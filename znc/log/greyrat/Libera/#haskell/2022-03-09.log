[00:00:29] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[00:03:01] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c)
[00:05:32] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:1d57:8085:a2ac:6196)
[00:07:38] *** Joins: deadmarshal_ (~deadmarsh@95.38.114.14)
[00:09:04] *** Joins: agumonkey (~user@2a01:e0a:8f9:d3e0:b117:81a8:33f6:93e7)
[00:09:06] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:7859:22cf:713c:fe6e) (Ping timeout: 260 seconds)
[00:09:50] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:10:22] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[00:11:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c) (Remote host closed the connection)
[00:11:31] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c)
[00:12:32] *** Quits: deadmarshal_ (~deadmarsh@95.38.114.14) (Ping timeout: 272 seconds)
[00:15:25] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[00:16:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:16:20] *** Quits: dcoutts__ (~duncan@host86-144-78-249.range86-144.btcentralplus.com) (Ping timeout: 272 seconds)
[00:17:18] *** Joins: neurocyte0917090 (~neurocyte@IP-045014190241.dynamic.medianet-world.de)
[00:17:18] *** Quits: neurocyte0917090 (~neurocyte@IP-045014190241.dynamic.medianet-world.de) (Changing host)
[00:17:18] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:17:48] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 240 seconds)
[00:18:51] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[00:19:36] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:509f:97b6:34da:4a)
[00:19:51] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Remote host closed the connection)
[00:20:07] <mastarija> I'm wondering, is there an alternative to the `network` package?
[00:20:42] <Hecate> not sure
[00:20:49] <geekosaur> I think there might be higher level interfaces, but network is the loest level interface and would still be there underneath
[00:20:53] <geekosaur> *lowest
[00:21:06] <Hecate> hmm
[00:21:07] <Hecate> https://hackage.haskell.org/package/network-bsd ?
[00:21:09] <Hecate> maybe?
[00:21:20] <[exa]> it would be pretty hard to write a really different alternative to the sockets API
[00:21:24] <mastarija> I was just wondering if someone tried to do something else with low level networking
[00:21:55] <[exa]> the BSD subpackage is about netdb name resolution
[00:22:02] *** Joins: acidjnk (~acidjnk@p200300d0c7049f27690562e0ba62f824.dip0.t-ipconnect.de)
[00:22:15] <geekosaur> yeh
[00:22:42] <geekosaur> network-bsd is name resolution, network is sockets, the docs for network point to some higher level interfaces
[00:22:46] <[exa]> mastarija: not really, berkeley sockets are kinda everywhere
[00:23:01] <geekosaur> "Other packages provide higher level interfaces:
[00:23:01] <geekosaur> connection
[00:23:01] <geekosaur> hookup
[00:23:01] <geekosaur> network-simple"
[00:23:08] <[exa]> mastarija: as geekosaur said, there's plenty of middleware that adds abstractions/goodies (0mq etc)
[00:23:27] <mastarija> yes I saw that
[00:23:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:23:59] <[exa]> is there even an OS that uses a non-socketish API for networking?
[00:24:05] <mastarija> but since there are usually 50 different takes on something in haskell I was surprised there's nothing for networking :D
[00:24:33] <geekosaur> there used to be some that used alternatives, but de facto sockets have won
[00:24:56] <mastarija> [exa], I'm not really looking for nonsocket networking, but maybe a different "wrapper" around the C library
[00:25:22] <geekosaur> the problem here is that network itself shows how difficult writing such wrappers is
[00:25:29] <[exa]> mastarija: for any specific purpose?
[00:25:34] <geekosaur> it'skinda notoriously difficult to keep wprking
[00:25:35] <mastarija> I was just interested if there's something out there
[00:25:45] <mastarija> Like looking at weird animals in the zoo
[00:25:50] <mastarija> nothing in particular :D
[00:26:26] <geekosaur> especially on windows
[00:26:29] <mastarija> geekosaur, yes I have problems on windows on occasions
[00:26:30] <[exa]> mastarija: I tend to take all sockets and wrap them with the haskell handles and then pretend the world is a happy place with only handles and IO
[00:26:44] <mastarija> xD
[00:27:13] <[exa]> ah, windows
[00:27:20] <monochrom> There are usually 50 different takes on something high-level.
[00:29:55] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[00:30:50] *** Joins: TQuid (~TQuid@2604:3d08:6e7e:9700:9106:2a95:ca3a:5770)
[00:32:07] *** alMalsamo is now known as lumberjack123
[00:32:15] *** TQuid is now known as register
[00:32:19] *** register is now known as TQuid
[00:32:44] <janus> mastarija: i have made uring/iocp api compatible bindings for chez (used via idris), something similar should be possible with haskell (except i don't know how the haskell rts works).
[00:33:31] <janus> mastarija: https://git.sr.ht/~janus/
[00:33:48] <geekosaur> I think there might be some work on uring support in the rts
[00:34:04] <geekosaur> not inany released version, and still early
[00:34:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[00:35:37] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:1d57:8085:a2ac:6196) (Ping timeout: 250 seconds)
[00:36:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:37:59] <mastarija> janus, never heard of uring
[00:38:20] <mastarija> gonna check that out, thanks :)
[00:38:24] <janus> mastarija: there are some good articles on lwn
[00:40:03] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[00:42:39] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:42:47] <mastarija> janus, thx, found one : https://lwn.net/Articles/810414/
[00:43:42] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c) (Remote host closed the connection)
[00:44:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:45:24] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[00:47:17] *** Joins: pavonia (~user@user/siracusa)
[00:48:28] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[00:49:07] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[00:49:24] *** Joins: coot (~coot@213.134.190.95)
[00:50:50] *** Joins: dcoutts__ (~duncan@host86-144-78-249.range86-144.btcentralplus.com)
[00:54:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Remote host closed the connection)
[00:55:29] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[00:56:23] <TQuid> Anyone here had success setting up a Haskell environment on an M1 mac?
[00:57:35] <geekosaur> ghc 8.10.7 should work fine
[00:57:43] <geekosaur> 9.2.2 apparently has a signing problem
[00:58:03] <geekosaur> but mostly people still use 8.10.7 so I wouldn't be in much hurry to upgrade anyway
[00:58:19] <TQuid> Yeah, when I try to install that from the bindist, "make install" results in every single library giving a security exception ("cannot scan for malicious software"). I don't relish re-running make for every one of those
[00:58:51] <TQuid> I have not found any way to tell the idiot OS to give a pass to a whole directory
[00:59:01] *** Quits: kongsheng (~kongsheng@71.28.228.142) (Quit: Client closed)
[00:59:25] *** Quits: AlexZenon (~alzenon@178.34.160.24) (Read error: Connection reset by peer)
[00:59:25] *** Quits: Alex_test (~al_test@178.34.160.24) (Read error: Connection reset by peer)
[00:59:25] *** Quits: AlexNoo (~AlexNoo@178.34.160.24) (Read error: Connection reset by peer)
[01:00:40] *** Quits: ubert (~Thunderbi@p548c8d84.dip0.t-ipconnect.de) (Quit: ubert)
[01:00:42] <mastarija> geekosaur, I just tried setting up 9.2.2 on windows and it's broken it seems
[01:00:59] <maerwald> mastarija: yes
[01:01:03] <maerwald> see https://gitlab.haskell.org/ghc/ghc/-/issues/21196
[01:01:22] <mastarija> :D
[01:01:52] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 250 seconds)
[01:02:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[01:03:00] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[01:03:32] <maerwald> you can try putting yur msys2 into PATH
[01:03:54] <maerwald> but that can cause all sorts of other problems
[01:04:22] <maerwald> since windows uses PATH to look for dynamic libraries too
[01:04:58] *** Joins: AlexNoo (~AlexNoo@178.34.160.24)
[01:05:33] *** Joins: Alex_test (~al_test@178.34.160.24)
[01:06:04] *** Joins: AlexZenon (~alzenon@178.34.160.24)
[01:07:52] <mastarija> maerwald, I have msys2 in my path (parts of it) it works nicely and I quite like the experience. When I need a package, just pacman -S and it's on!
[01:09:09] *** Joins: ubert (~Thunderbi@p200300ecdf3be9b38bc0692fc3914e47.dip0.t-ipconnect.de)
[01:09:15] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Remote host closed the connection)
[01:09:47] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:509f:97b6:34da:4a) (Quit: Leaving)
[01:11:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:12:20] <janus> maybe the msys2 equivalent of /usr/lib needs to be on the path for libgcc_s.dll to be found (i am guessing the file name)
[01:12:39] *** Quits: TQuid (~TQuid@2604:3d08:6e7e:9700:9106:2a95:ca3a:5770) (Remote host closed the connection)
[01:12:52] *** Quits: Topsi (~Tobias@dyndsl-095-033-088-239.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[01:13:00] <maerwald> it's absolutely not recommended
[01:13:08] <maerwald> weird things will happen
[01:13:35] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[01:17:46] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:18:50] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:20:50] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[01:21:57] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:23:07] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:23:44] <monochrom> Yikes, I was hoping that 9.2.2 would solve all platform-related problems. Apparently, it has caused more.
[01:24:04] <monochrom> OK, "caused" is unfair. suffered.
[01:24:25] <maerwald> msys2 maintainers also managed to break GHC: https://github.com/msys2/MINGW-packages/issues/10837
[01:24:30] <maerwald> so you get hit from all angles
[01:24:30] <geekosaur> 9.2.2 hasso far been abit of a cursedrelease. starting with "is not released"
[01:24:50] <monochrom> (Someone on the mailing list reported a signature-checking error on intel mac.)
[01:24:59] <geekosaur> yep
[01:25:42] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[01:26:03] <monochrom> Though, the silver lining is that all the issues seem to be just packaging rather than fundamental eg code generator broken. :)
[01:26:11] <monochrom> So, much easily fixable.
[01:26:36] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[01:26:53] <monochrom> OK, I guess from the POV of the GHC devs, it is packaging that's the hard part. :)
[01:26:57] <geekosaur> yeh, but imagine being poor bgamari right now
[01:27:34] <monochrom> They're probably like "code optimization based on abstract interpretation is trivial" :)
[01:29:31] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 245 seconds)
[01:31:08] <sm> releasing is hard
[01:31:18] <sm> sorry to hear 9.2.2 is continuing the tradition .. :/
[01:33:58] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:35:01] <romesrf> hahaah
[01:35:27] <romesrf> it is indeed unfortunate that so much work is required for that all to work
[01:36:10] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[01:36:43] <maerwald> well, first of all: supporting windows is hard anyway
[01:37:10] <romesrf> :') *windows* is hard
[01:37:17] <maerwald> then supporting mac is hard
[01:37:24] <maerwald> M1 even harder
[01:37:32] <maerwald> then FreeBSD is a nightmare at times
[01:37:51] <maerwald> alpine linux also causes issues
[01:37:54] <maerwald> and the list goes on
[01:38:02] <romesrf> it does seem like a chore
[01:38:04] <sm> bgamari needs help
[01:38:13] <romesrf> sm: how can we help?
[01:38:31] <maerwald> clone em
[01:38:41] <sm> get hired as a full time engineer with the GHC team
[01:38:46] <romesrf> sm: dream job?
[01:38:56] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:39:01] <sm> hehe maybe ask bgamari
[01:39:12] <sm> yes and no :)
[01:39:16] <sm> I imagine
[01:39:27] *** Joins: Maxdaman1us (~Maxdamant@user/maxdamantus)
[01:39:30] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Remote host closed the connection)
[01:39:34] <romesrf> "OK everyone 9.2.2 is out everyone get back on code optimization"
[01:39:43] <romesrf> *everyone is happy for a month*
[01:39:51] <romesrf> OK everyone 9.2.3 let's go
[01:39:57] <romesrf> 3 months of hell?
[01:39:59] <romesrf> :)
[01:40:11] <Unicorn_Princess> hm. project-name.cabal other-modules and default-extensions lists are newline-separated, but build-depends needs commas between items. what gives?
[01:40:56] <romesrf> sm: unfortunately full time isn't on the table for me, the thesis comes first
[01:40:58] <maerwald> Unicorn_Princess: because you already have optional whitespace between dependency name and version range
[01:41:08] <sm> picture how Debian supports multiple architectures. It's an army of maintainers all working together. (Actually it's probably a much smaller number of hard-working folks. But in principle, it's definitely not expected to all be handled by 1-2 people)
[01:41:13] <romesrf> but "where" is bgamari working?
[01:41:31] <Unicorn_Princess> maerwald, aaah, ugly, but makes sense, thanks
[01:41:47] <monochrom> If the job is just to pick one single platform and support it, it could be a dream job. If the job is to support multiple platforms, that's a nightmare job.
[01:41:51] <janus> Unicorn_Princess: you can avoid the commas by having multiple build-depends
[01:41:54] <maerwald> sm: a distro like debian probably has 50 active volunteers and easily up to 200 devs in total
[01:42:00] <sm> I think he and maybe others like mpickering are employees of Well-Typed and part/full time funded to work on GHC
[01:42:04] <romesrf> monochrom: I can see that :)
[01:42:05] <monochrom> Ugh wait a second! nightmare is a special case of dream... >:)
[01:42:12] <Unicorn_Princess> lol
[01:42:22] <romesrf> monochrom: LOL
[01:42:26] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 260 seconds)
[01:42:34] <romesrf> instance Dreamable Nightmare
[01:43:56] *** Joins: biberu (~biberu@user/biberu)
[01:44:18] <romesrf> perhaps you know impurepics.com, they have some really funny images
[01:44:23] <romesrf> this one always comes to mind: https://impurepics.com/posts/2018-07-29-names-dont-matter.html
[01:44:25] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[01:44:42] <monochrom> Haha rosable.
[01:46:10] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:9e8a:8fa1:6b4e:dd92)
[01:47:34] *** Quits: Maxdaman1us (~Maxdamant@user/maxdamantus) (Ping timeout: 260 seconds)
[01:47:58] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:9e8a:8fa1:6b4e:dd92) (Client Quit)
[01:49:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:51:59] *** Joins: Guest14 (~Guest14@185.249.168.124)
[01:52:31] *** Quits: Guest14 (~Guest14@185.249.168.124) (Client Quit)
[01:52:34] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[01:56:49] *** Joins: jz99 (~jz99@pa49-186-65-17.pa.vic.optusnet.com.au)
[01:57:08] *** Quits: jz99 (~jz99@pa49-186-65-17.pa.vic.optusnet.com.au) (Remote host closed the connection)
[01:57:08] *** Joins: euouae (~euouae@user/euouae)
[01:57:24] <euouae> Hello does anyone else have two entries of ~/.cabal/bin and ~/.gchup/bin in their $PATH?
[01:57:36] *** Joins: jz99 (~jz99@pa49-186-65-17.pa.vic.optusnet.com.au)
[01:58:06] *** Quits: jz99 (~jz99@pa49-186-65-17.pa.vic.optusnet.com.au) (Remote host closed the connection)
[01:58:09] <monochrom> I think most people do.
[01:58:22] <euouae> why is that monochrom, shouldn't there be a single entry instead?
[01:58:25] <geekosaur> I think they might mean two of each?
[01:58:29] <euouae> ah yeah, two of each
[01:58:38] *** Joins: kaph (~kaph@151.35.10.65)
[01:58:48] <geekosaur> ideally there'd be only one. you might have to check your shell dotfiles for duplication
[01:59:04] <euouae> I can't even figure out where it is that it gets added 
[01:59:09] <monochrom> I don't, but that's because I set up my ~/.cabal/config to have a non-default setting about installdir so I have ~/bin instead of ~/.cabal/bin
[01:59:18] <euouae> I don't see it under my .bashrc or .profile nor my corresponding /etc files
[02:00:11] <geekosaur> look for a line which sources ~/.ghcup/env
[02:00:22] <geekosaur> or possibly two such lines
[02:00:42] <euouae> aha, thanks. I will investigate. that does bring up results 
[02:00:53] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[02:01:31] <euouae> in ~/.bashrc there's [ -f "/home/fox/.ghcup/env" ] && source "/home/fox/.ghcup/env"
[02:01:39] *** Quits: fendor_ (~fendor@178.165.181.170.wireless.dyn.drei.com) (Remote host closed the connection)
[02:01:44] <euouae> that one should be fine, as -f only tests for existence I believe, so ... hmm...
[02:01:48] <geekosaur> yes
[02:02:12] <monochrom> What if something runs .bashrc twice?
[02:03:09] <euouae> That's probably it 
[02:03:16] <geekosaur> .bashrc is run with every shell, .profile only by a login shell. if you start a second shell under the first it'll add them to $PATH again
[02:03:47] <euouae> but who added that line to my .bashrc? Was it me?
[02:04:22] <euouae> It's not automatically done by ghcup, right? I must've mistakenly modified my .bashrc instead of .profile
[02:04:45] <monochrom> The "curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh" thing does. Although, it did ask you.
[02:05:02] <maerwald> euouae: that has been fixed
[02:05:03] <geekosaur> shouldn't it have added it to .profile though?
[02:05:10] <geekosaur> oh
[02:05:21] <maerwald> https://gitlab.haskell.org/haskell/ghcup-hs/-/merge_requests/229
[02:05:24] <euouae> aha, okay. thanks again for all the clarifications and the unix lesson :D
[02:05:50] <maerwald> 2 months ago, so if you re-run the ghcup installer, it will fix ~/.ghcup/env
[02:05:54] *** Quits: kaph (~kaph@151.35.10.65) (Remote host closed the connection)
[02:06:15] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[02:06:22] *** Joins: kaph (~kaph@151.35.10.65)
[02:07:04] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[02:07:37] <monochrom> neat trick :)
[02:07:38] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[02:07:48] <euouae> maerwald https://www.haskell.org/ghcup/install/#manual-install the website could also be fixed
[02:08:06] <euouae> Because it seems that it's still suggesting the old thing?
[02:08:21] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[02:08:53] <euouae> won't re-running ghcup also re-download everything?
[02:09:02] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:09:03] <maerwald> not much
[02:09:37] <maerwald> You can also: curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_MINIMAL=1 sh
[02:10:46] <euouae> I'm going to write my own hack that detects .cabal/bin presence in $PATH for now 
[02:11:17] <maerwald> euouae: the link I gave you shows how to do it
[02:11:36] *** Joins: haskellnoob (~haskellno@181.122.131.227)
[02:12:57] <haskellnoob> hello all, it's me again with another noob question where I am stuck
[02:13:01] <haskellnoob> https://pastebin.com/RSTJEZnb
[02:13:47] <haskellnoob> basically I have a newtype wrapped around a bytestring that gets hex-encoded, but I cannot implement the FromJSON instance, I'm just not smart enough to figure it out
[02:14:15] <euouae> maerwald in that commit, right? yup, but I'm going with the simpler $PATH =~ "cabal/.bin"
[02:15:16] <geekosaur> https://github.com/geekosaur/dotty/blob/master/.bsa-common#L21-L53 for those who like their minds blown :þ
[02:17:10] *** Quits: ubert (~Thunderbi@p200300ecdf3be9b38bc0692fc3914e47.dip0.t-ipconnect.de) (Quit: ubert)
[02:17:23] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e)
[02:17:32] *** Joins: Guest|40 (~Guest|40@dsl-94-229-145-149.pool.bitel.net)
[02:17:50] *** Joins: ubert (~Thunderbi@p200300ecdf3be9b34516931a7c3fe14b.dip0.t-ipconnect.de)
[02:17:56] *** Parts: Guest|40 (~Guest|40@dsl-94-229-145-149.pool.bitel.net) ()
[02:18:33] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:19:30] <[exa]> haskellnoob: I guess it's missing a simple conversion back into the bytestring. do you have a function that converts the hex back?
[02:19:32] <euouae> cool trick with IFS 
[02:21:07] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[02:21:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[02:21:49] <bgamari> geekosaur, heh, life isn't so bad for me
[02:21:55] <bgamari> romesrf, I'm in New Hampshire
[02:22:10] *** Joins: kaph_ (~kaph@93-39-148-20.ip76.fastwebnet.it)
[02:22:11] <bgamari> geekosaur, it is indeed a tad annoying that we have to do yet another release
[02:22:36] <bgamari> but as you say, this is a problem that we know how to fix
[02:22:49] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:22:50] <bgamari> things could be much worse and we are certainly converging
[02:23:15] <bgamari> the "not" mistake on the other hand I was quite annoyed by :)
[02:23:35] *** Joins: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.29-46.dynamic.3bb.co.th)
[02:24:54] *** Quits: kaph (~kaph@151.35.10.65) (Ping timeout: 272 seconds)
[02:25:33] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[02:25:58] <haskellnoob> exa, I now have this, at least compiling: https://pastebin.com/n9HViRdP - but I think the usage of "fromJust" is wrong here
[02:27:48] <maerwald> haskellnoob: you can case match on it and use `fail "blah"` for Nothing
[02:28:03] <maerwald> https://hackage.haskell.org/package/aeson-2.0.3.0/docs/Data-Aeson-Types.html#t:Parser has a MonadFail instance
[02:28:37] <haskellnoob> that works, nice !!
[02:28:46] <haskellnoob> thanks a lot guys, you're my heros
[02:30:26] *** Quits: haskellnoob (~haskellno@181.122.131.227) (Remote host closed the connection)
[02:30:44] *** Joins: haskellnoob (~haskellno@181.122.131.227)
[02:31:48] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[02:33:09] *** Joins: juri__ (~juri@79.140.115.116)
[02:34:16] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 256 seconds)
[02:34:50] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[02:35:03] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[02:36:45] *** Quits: haskellnoob (~haskellno@181.122.131.227) (Remote host closed the connection)
[02:36:46] *** Quits: juri__ (~juri@79.140.115.116) (Read error: Connection reset by peer)
[02:37:04] *** Joins: haskellnoob (~haskellno@181.122.131.227)
[02:38:09] *** Joins: juri_ (~juri@178.63.35.222)
[02:39:29] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:9e8a:8fa1:6b4e:dd92)
[02:43:00] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:43:48] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[02:44:08] *** Quits: acidjnk (~acidjnk@p200300d0c7049f27690562e0ba62f824.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:44:12] *** Quits: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[02:49:47] *** Quits: haskellnoob (~haskellno@181.122.131.227) (Remote host closed the connection)
[02:50:05] *** Joins: haskellnoob (~haskellno@181.122.131.227)
[02:53:23] *** Quits: liskin (~liskin@xmonad/liskin) (Quit: liskin)
[02:53:42] *** Joins: liskin (~liskin@xmonad/liskin)
[02:54:17] *** Quits: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.29-46.dynamic.3bb.co.th) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:56:10] *** Quits: haskellnoob (~haskellno@181.122.131.227) (Remote host closed the connection)
[02:56:27] *** Joins: haskellnoob (~haskellno@181.122.131.227)
[02:58:08] *** Quits: haskellnoob (~haskellno@181.122.131.227) (Remote host closed the connection)
[02:58:25] *** Joins: haskellnoob (~haskellno@181.122.131.227)
[02:59:26] *** Joins: lisk1n (~liskin@xmonad/liskin)
[02:59:49] *** Joins: Maxdaman1us (~Maxdamant@user/maxdamantus)
[03:00:17] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Killed (NickServ (GHOST command used by Maxdaman1us)))
[03:00:25] *** Maxdaman1us is now known as Maxdamantus
[03:02:15] *** Quits: haskellnoob (~haskellno@181.122.131.227) (Remote host closed the connection)
[03:02:34] *** Joins: haskellnoob (~haskellno@181.122.131.227)
[03:03:28] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[03:03:51] *** Quits: lisk1n (~liskin@xmonad/liskin) (Client Quit)
[03:03:59] *** Quits: liskin (~liskin@xmonad/liskin) (Quit: liskin)
[03:04:04] *** Quits: euouae (~euouae@user/euouae) (Quit:  bye)
[03:04:30] *** Joins: liskin (~liskin@xmonad/liskin)
[03:04:56] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[03:05:17] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:05:55] <iphy> I'm starting to not be a big fan of MonadFail
[03:06:18] <iphy> being limited to single strings
[03:06:40] <monochrom> That is why it was separated out from Monad. It is very niche, yes.
[03:06:59] <iphy> I don't know what the right alternative is though
[03:07:05] <iphy> I've been playing with MonadValidate
[03:07:30] *** Quits: michalz (~michalz@185.246.204.93) (Remote host closed the connection)
[03:07:37] <geekosaur> ExceptT, Validate, Chronicle
[03:07:42] *** Quits: worldhelloworld2 (~quassel@vmi275462.contaboserver.net) (Ping timeout: 256 seconds)
[03:07:49] <geekosaur> in roughly ascending order of complexity-but-capability
[03:07:50] *** Quits: worldhelloworld (~c1utt4r@164.68.96.37) (Ping timeout: 260 seconds)
[03:08:28] <monochrom> If you intend actually informative and/or machine-readable errors, it's ExceptT or Validate or equivalent, yeah. MonadFail has a different purpose where a meh String suffices.
[03:08:57] <monochrom> Indeed most MonadFail instances throw away the string altogether.
[03:09:06] <iphy> yeah that's annoying
[03:09:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[03:09:47] <iphy> I like the thing about Validate where it can collect multiple failures in one go
[03:09:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:10:08] <iphy> that's why I'm using that now for msgpack
[03:10:17] <geekosaur> Chronicle distinguishes between warnings, errors that it can continue from, and errors it can't
[03:11:07] <geekosaur> it's kinda the swiss army knife of exception handlers
[03:11:21] *** Quits: sooch_ (sid533113@id-533113.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[03:11:21] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[03:11:21] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 252 seconds)
[03:11:21] *** Quits: _0x47_ (sid508683@id-508683.tinside.irccloud.com) (Ping timeout: 252 seconds)
[03:11:24] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (Read error: Connection reset by peer)
[03:11:38] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[03:11:50] <haskellnoob> any ideas how I can implement FromJSON for this? https://pastebin.com/s4PmvKx1
[03:11:54] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[03:11:54] *** Quits: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[03:11:54] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Read error: No route to host)
[03:11:54] *** Quits: integral (sid296274@user/integral) (Read error: Connection reset by peer)
[03:11:54] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:11:54] *** Quits: S11001001 (sid42510@id-42510.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:11:54] *** Quits: jonrh (sid5185@id-5185.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.8.2 - https://znc.in)
[03:11:55] *** Quits: nrr___ (sid20938@id-20938.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:11:56] *** Quits: lally (sid388228@id-388228.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:11:56] *** Quits: bw (sid2730@user/betawaffle) (Read error: Connection reset by peer)
[03:11:57] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:12:01] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Remote host closed the connection)
[03:12:06] *** Joins: S11001001 (sid42510@id-42510.ilkley.irccloud.com)
[03:12:06] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[03:12:07] *** Joins: jackdk (sid373013@cssa/jackdk)
[03:12:10] *** Joins: integral (sid296274@user/integral)
[03:12:10] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[03:12:10] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[03:12:10] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[03:12:11] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[03:12:12] *** Joins: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com)
[03:12:14] *** Joins: lally (sid388228@id-388228.uxbridge.irccloud.com)
[03:12:14] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[03:12:14] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[03:12:15] *** Joins: _0x47_ (sid508683@id-508683.tinside.irccloud.com)
[03:12:16] *** Joins: sooch_ (sid533113@id-533113.hampstead.irccloud.com)
[03:12:17] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[03:12:18] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[03:12:21] *** Joins: nrr___ (sid20938@id-20938.lymington.irccloud.com)
[03:12:24] *** Joins: bw (sid2730@user/betawaffle)
[03:12:24] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[03:12:27] <monochrom> As with other things, Haskellers discovered the cold hard truth that other language communities deny: so-called "error", "error raising", and "error handling" are very broad, the subniches conflict with each other, do not expect one single standard, expect multiple standards for multiple contexts.
[03:12:28] *** Joins: jonrh (sid5185@id-5185.ilkley.irccloud.com)
[03:12:30] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[03:12:32] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[03:12:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[03:13:33] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Ping timeout: 252 seconds)
[03:13:33] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Ping timeout: 252 seconds)
[03:14:06] *** Quits: kadoban (~kadoban@user/kadoban) (Ping timeout: 252 seconds)
[03:14:06] *** Quits: andreabedini[m] (~andreabed@2001:470:69fc:105::c821) (Ping timeout: 252 seconds)
[03:14:06] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Ping timeout: 252 seconds)
[03:14:06] *** Quits: Deide (~deide@user/deide) (Ping timeout: 252 seconds)
[03:14:06] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Ping timeout: 252 seconds)
[03:15:13] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:15:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[03:16:25] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[03:16:28] <haskellnoob> I put some more context how the json array looks like here: https://pastebin.com/HbXV8tbf
[03:18:51] <Axman6> haskellnoob: deriving (FromJSON)? :)
[03:19:01] <Axman6> hmm, or not
[03:19:21] <haskellnoob> ups
[03:19:28] <haskellnoob> I meant implement, of course, my bad
[03:19:30] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[03:19:31] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:19:41] <monochrom> deriving-FromJSON probably does not know to do hex-coding.
[03:20:16] <haskellnoob> hex-decoding is all good, my problem is I have multiple contructors in haskell and need to inspect the json array somehow
[03:21:08] <Axman6> this would eactually be easier in waargonaut... but anyway. something like withArray "Tag" $ \xs -> case xs of ["e",eid,url] -> ...; ["p",pubKey,url] -> ...; _ -> fail "ohno"
[03:21:15] <haskellnoob> I tried this: https://pastebin.com/qNkAegFv - without success
[03:22:00] <Axman6> using parseJSON inside parseJSON definitely feels wrong to me
[03:22:31] <Axman6> in the code you have there, x has both type EventId and XOnlyPubKey
[03:22:31] <haskellnoob> hahaha, that's why I'm asking
[03:22:46] <haskellnoob> exactly, that's the problem the compiler complains about
[03:23:04] <Axman6> read out t, then do the case statement, at the very least
[03:23:23] <monochrom> I am very pessimistic about any attempt at reusable FromJSON EventId for example, unless FromJSON EventId accepts "063df25d22738a838cbbdc3dee470e0c58284954" no more no less.
[03:24:12] <monochrom> E.g., if FromJSON EventId "adds" so little "feature" as expecting a field name, then it ruins everything.
[03:24:17] <haskellnoob> monochrom that's exactly how it works
[03:24:30] <monochrom> This also applies to the rest, RelayURL, XOnlyPubKey.
[03:24:36] <haskellnoob> yes
[03:24:50] <Axman6> if you have a function Text -> Decoder EventId then you're off to a good start
[03:25:27] <Axman6> (and the same for thew other types)
[03:26:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:26:28] <Axman6> the FromJSON instance for EventId isn't very useful, the way EventIds exist in this structure means they can't really be parsed in the usual ways
[03:26:31] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[03:26:48] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[03:27:21] <haskellnoob> one sec
[03:28:46] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[03:29:15] <haskellnoob> https://pastebin.com/9s1J0tCr - here are EventId and pubkey FromJSON instances included
[03:29:29] <haskellnoob> I don't think they are any problem for me at the moment
[03:29:32] *** Joins: Deide (~deide@user/deide)
[03:30:13] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[03:30:22] <monochrom> You can reused eventId'
[03:30:32] <monochrom> err s/reused/reuse/
[03:30:35] *** Joins: andreabedini[m] (~andreabed@2001:470:69fc:105::c821)
[03:30:35] *** Joins: kadoban (~kadoban@user/kadoban)
[03:31:24] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[03:31:39] <haskellnoob> I think right now my problem is this line "t <- parseJSON $ v V.! 0", because it doesn't know what type that is
[03:31:56] <haskellnoob> Compiler says: Probable fix: use a type annotation to specify what ‘a0’ should be.
[03:32:05] <Axman6> there's this weird linguistic fad I keep seeing, especially from people in California, where they'll say things like that, like "this car needs cleaned", "this'll need renovated", completely dropping the "to be". it breaks my brain everytime I hear it on youtube
[03:32:14] <haskellnoob> Ambiguous type variable ‘a0’ arising from the literal ‘"e"’
[03:33:03] <haskellnoob> Axman6 I'm not a native english speaker, please forgive me
[03:33:07] <Axman6> haskellnoob: do EventId and XOnlyPubKey ever exist in json objects if the form { "id": "67912989239847893" }? seems like a weird FromJSON instance
[03:33:13] <Axman6> haskellnoob: no, this was about monochrom's  typo
[03:33:45] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:33:48] <geekosaur> Axman6, it'salso a Pittsburgh thing
[03:33:58] <haskellnoob> ok, so the json array looks like this: ["e", "063df25d22738a838cbbdc3dee470e0c58284954", "https://google.com"] - or with a p instead of e
[03:33:59] <geekosaur> I keep thinking "-ing, not-ed!"
[03:34:05] <Axman6> *seems like a weird instance given the example you gave of it being used in an array
[03:34:05] <monochrom> Consider "real good" >:)
[03:34:40] <Axman6> geekosaur: interesting - though for me, y'all are just "American"
[03:35:12] <Axman6> (with California and Texas being basically their own countried)
[03:35:49] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[03:35:53] <haskellnoob> I see what you mean, should be "parseJSON = withText "EventId" $ \i -> do" right?
[03:36:10] <Axman6> yeah, that would be more useful
[03:36:18] <Axman6> and would help with this code actually
[03:36:31] <haskellnoob> thanks, at least one step further
[03:36:44] *** Joins: Dykam (Dykam@dykam.nl)
[03:37:21] <haskellnoob> he still complains about this line "t <- parseJSON $ v V.! 0" in the instance FromJSON Tag.
[03:37:31] <haskellnoob> doesn't know what type it is
[03:38:28] <Axman6> then you can do: withArray "Tag" $ \v -> do guard (V.length v == 3); case v ! 0 of (Text "p") -> ETag <$> ((,) <$> parseJSON (v ! 1) <*> parseJSON (v ! 2); (Text "e") -> ...; 
[03:38:30] *** Quits: mmhat (~mmh@55d49be1.access.ecotel.net) (Quit: WeeChat 3.4)
[03:39:01] <Axman6> just match on the Text constructor of the Value
[03:40:14] * ski . o O ( s/(Text "p") ->/Text "p" ->/ )
[03:40:25] <Axman6> yeah, that too
[03:41:24] <Axman6> haskellnoob: I thginkwhat you have in your last paste will work as long as you just do case  v V.! 0 of Text "p" -> ...; Text "e" -> ...; _ -> fail "bad tag bro"
[03:41:56] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[03:43:30] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:44:17] <haskellnoob> having this now: https://pastebin.com/zN1hQhx8
[03:44:36] <haskellnoob> which gives me this error:
[03:44:37] <haskellnoob> parse error (possibly incorrect indentation or mismatched brackets)     | 106 |             Text "e" -> PTag <$> ((,) <$> parseJSON (v ! 1) <*> parseJSON (v ! 2)
[03:45:05] <Axman6> need to close those brackets bro (which I forgot in my code, sorry) avter the (v ! 2)'s
[03:45:07] <Axman6> after*
[03:45:22] <geekosaur> paren counting is a useful skill
[03:45:55] <haskellnoob> right
[03:45:59] <haskellnoob> now: Not in scope: data constructor ‘Text’
[03:46:11] <Axman6> ETag <$> liftA2 (,) ... might also be a little cleaner
[03:46:22] <Axman6> you need to import Value(Text) from Aeson
[03:46:30] <Axman6> uh, it might be String actually
[03:46:56] <haskellnoob> got it
[03:46:57] <haskellnoob> one sec
[03:47:11] <Axman6> yeah the type is String
[03:47:17] <Axman6> uh, constructor*
[03:47:26] <Axman6> ... | String !Text | ...
[03:47:55] <haskellnoob> no way
[03:48:00] <haskellnoob> this actually works
[03:48:01] <haskellnoob> hahahaha
[03:48:03] <haskellnoob> thanks guys
[03:48:24] <Axman6> have you tested it with actual data? :)
[03:49:04] <haskellnoob> actual data? are you crazy? the compiler says it's okay, I won't break the illusion now!
[03:49:21] <haskellnoob> :)
[03:50:21] <Axman6> JSON is stringly typed, it can always go wrong ;)
[03:50:22] <haskellnoob> thanks Axman6, exa and monochrom
[03:52:01] *** Quits: haskellnoob (~haskellno@181.122.131.227) (Remote host closed the connection)
[03:52:20] *** Joins: haskellnoob (~haskellno@181.122.131.227)
[03:53:04] *** Quits: haskellnoob (~haskellno@181.122.131.227) (Remote host closed the connection)
[03:55:08] *** Quits: ubert (~Thunderbi@p200300ecdf3be9b34516931a7c3fe14b.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[03:57:07] *** Joins: ubert (~Thunderbi@p200300ecdf3be9b31a3c049f5a83f6ca.dip0.t-ipconnect.de)
[03:58:21] *** Quits: ubert (~Thunderbi@p200300ecdf3be9b31a3c049f5a83f6ca.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[03:58:30] *** Joins: ubert1 (~Thunderbi@p200300ecdf3be9b34946219f5177446d.dip0.t-ipconnect.de)
[04:00:37] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 240 seconds)
[04:00:49] *** ubert1 is now known as ubert
[04:04:31] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[04:04:36] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[04:06:11] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[04:07:31] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 272 seconds)
[04:08:45] *** Joins: hyiltiz (~quassel@31.220.5.250)
[04:16:47] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 252 seconds)
[04:17:17] *** Quits: emf (~emf@2620:10d:c090:400::5:33d6) (Ping timeout: 240 seconds)
[04:18:37] *** Quits: foul_owl (~kerry@23.82.193.87) (Ping timeout: 240 seconds)
[04:21:04] *** Joins: foul_owl (~kerry@174-21-76-71.tukw.qwest.net)
[04:23:42] *** Joins: emf (~emf@2620:10d:c090:400::5:9fc8)
[04:24:17] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::45ee)
[04:30:01] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:30:41] *** Quits: foul_owl (~kerry@174-21-76-71.tukw.qwest.net) (Ping timeout: 256 seconds)
[04:33:16] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Ping timeout: 256 seconds)
[04:33:42] *** Joins: nattiestnate (~nate@202.138.250.37)
[04:34:04] *** Quits: nattiestnate (~nate@202.138.250.37) (Client Quit)
[04:36:00] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[04:36:22] *** Joins: kongsheng (~kongsheng@71.28.228.142)
[04:42:38] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 252 seconds)
[04:43:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:44:24] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[04:46:05] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[04:46:05] *** Joins: foul_owl (~kerry@23.82.193.89)
[04:47:48] <DigitalKiwi> is there some library for arbitrary(?) units. i want to quickly do maths on like miles per gallon per dollar etc.
[04:48:22] <dons> https://hackage.haskell.org/package/units is the classic one i think
[04:48:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:48:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:48:43] *** Joins: wroathe (~wroathe@user/wroathe)
[04:49:12] <dons> you'll need something else if you want to do currency conversions though, obvs. 
[04:53:18] <janus> how do i run the doctests for the random library?
[04:54:38] <geekosaur> do you know about cabal-doctest?
[04:55:42] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:02:39] <janus> geekosaur: yes, but i was told it is deprecated
[05:05:33] <janus> in fact, i tried adding cabal-doctest, and that's when i was told it was deprecated: https://github.com/haskell/random/pull/128/files
[05:05:54] <janus> so i am trying to figure out what i have misunderstood, what is the proper way to have doctests now?
[05:06:32] <geekosaur> that seems odd since as far as I know there is no alternative currently
[05:07:38] <janus> there is docspec by phadej, and you can invoke doctest as a interpreter since doctest-0.20: "cabal repl --with-ghc=doctest", see https://hackage.haskell.org/package/doctest-0.20.0/changelog
[05:07:39] <geekosaur> certainly its hackage page doesn't mention one (but it does say it's deprecated, sadly)
[05:08:24] <janus> but i don't think the random library would expect me to use either of these approaches, since it is older than doctest-0.20 and also doesn't mention docspec at all
[05:09:38] <janus> i just think 'cabal test doctests --enable-tests' seems like a pretty intuitive way of executing the tests, what am i doing wrong?
[05:09:51] <janus> because it fails with the message that i posted in a comment on that pr
[05:09:54] <hololeap> I feel like I've asked this before, but is there any way to get `cabal repl` to open a specific module in a project?
[05:11:28] <dons> $ cabal v2-repl My.Cool.Module ?
[05:13:22] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[05:14:14] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[05:15:53] <hololeap> I'm not actually sure what that does. it doesn't seem to matter which module I put there
[05:16:25] *** Joins: off^ (~off@50.232.121.75)
[05:16:45] <dons> oh it seems to load the package that contains My.Cool.Module
[05:17:04] <dons> you still then have to load it with :   :m My.Cool.Module
[05:17:09] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[05:17:32] <dons> puts you in the right package tho
[05:17:37] <geekosaur> I don'tthink ghci provides enough knobs for either cabal replor stack ghci to do that
[05:19:06] <hololeap> hm, too bad. it would be really nice to "open" a module so I can play around with functions to see how they behave
[05:19:29] <geekosaur> you can manually use :m asdons said
[05:19:35] <dons> just use :m in the ghci prompt you get to
[05:19:39] <geekosaur> it just can't "focus" it automatically for you
[05:20:33] *** Quits: ishutin (~ishutin@84-236-40-230.pool.digikabel.hu) (Ping timeout: 256 seconds)
[05:20:46] <hololeap> I guess :m + ... could work, although I like how regular ghci also pulls in the imports of a module when you open the file as an argument and also exposes "hidden" functions
[05:21:13] <dons> $ cabal v2-repl Glean
[05:21:13] <dons> [7 of 7] Compiling Glean            ( glean/client/hs/Glean.hs, interpreted )
[05:21:13] <dons> Ok, 7 modules loaded.
[05:21:13] <dons> *Glean> :m Glean.Angle
[05:21:19] <dons> Prelude Glean.Angle> :t query
[05:21:19] <dons> query
[05:21:19] <dons>   :: Glean.Typed.Binary.Type t =>
[05:21:19] <dons>      Angle t -> Glean.Query.Thrift.Internal.Query t
[05:21:31] <dons> tab completion works too. so you can explore the exported module a bit
[05:21:49] <hololeap> can you reference any functions that aren't exported by Glean.Angle?
[05:21:53] <geekosaur> and it's interpreted so it'll still  have those "hidden" functions
[05:21:59] *** Joins: ishutin (~ishutin@78-131-74-100.pool.digikabel.hu)
[05:22:03] <dons> I think ghci can see all of it right? iirc
[05:22:34] <geekosaur> I do this with xmonad somewhat regularly while testing and/or typing things
[05:23:00] <DigitalKiwi> thanks dons
[05:24:00] <hololeap> ultimately I would like to automate this to some degree so I can have a terminal open in my IDE with ghci loaded and the module imported
[05:25:15] <hololeap> and also support different components
[05:25:47] <dons> might need access to cabal internals if you want to do it programmatically
[05:25:54] <dons> or the ghci library
[05:26:03] <dons> people have done interactive shells like this via the ghci lib a few times in the past iirc
[05:26:56] <hololeap> cool
[05:27:02] <dons> i don't think cabal out of the box is quite the right thing, its close. but not exactly what you'd want for an IDE that's e.g. swtiching contexts following the editor
[05:27:11] <dons> but its not far off what you need
[05:27:58] <hololeap> I was thinking about trying to write a kate plugin for this
[05:28:43] <jackdk> janus: whenever I wrote doctests, I did so by calling the doctest main from a test-suite. dunno if that helps
[05:29:03] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[05:33:08] *** Quits: kaph_ (~kaph@93-39-148-20.ip76.fastwebnet.it) (Ping timeout: 250 seconds)
[05:34:19] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[05:42:59] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[05:45:46] <janus> jackdk: but then there is no communication of the dependencies (and other cabal information) to the test suite, right? i thought that was the rationale for using cabal-doctest or 'cabal repl --with-ghc=doctest'
[05:46:55] <jackdk> *shrug*, but this worked (at least once): https://github.com/qfpl/semialign-extras
[05:47:08] <janus> ok cool, thank you, i'll try
[05:47:42] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Quit: ZNC 1.8.2+cygwin2 - https://znc.in)
[05:48:31] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[05:52:37] *** Joins: vysn (~vysn@user/vysn)
[05:54:25] *** Joins: AlexNoo_ (~AlexNoo@178.34.161.220)
[05:55:46] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[05:55:47] <janus> jackdk: i just tried executing the test suite on that project with ghc 8.10.7 and doctest 0.20, and it failed to find its dependencies. so it's a similar situation to what's happening with random
[05:56:01] *** Quits: AlexZenon (~alzenon@178.34.160.24) (Ping timeout: 256 seconds)
[05:56:26] *** Quits: Alex_test (~al_test@178.34.160.24) (Ping timeout: 272 seconds)
[05:56:36] *** Quits: theproffesor (~theproffe@2601:282:8202:4a10::8622) (Quit: ¯\_(ツ)_/¯)
[05:56:46] <janus> it seems to me like this is an approach that used to work, and now it doesn't. but cabal-doctest still works. i'd prefer if people had build-type:Custom and a working test suite over a test suite that doesn't execute...
[05:57:54] <janus> but the bounds on semialign-extras are telling, since it has base<4.14, which means it worked until at least until ghc 8.8.4. (assuming the bounds are correct)
[05:57:57] *** Quits: AlexNoo (~AlexNoo@178.34.160.24) (Ping timeout: 256 seconds)
[05:58:29] <janus> but OTOH, i tried running the tests on random with ghc 8.6.5. so maybe it has to be an old doctest _and_ an old ghc
[05:59:02] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:59:44] <janus> davean: now i understand why you prefer the older random releases ;)
[06:00:06] *** Quits: emf (~emf@2620:10d:c090:400::5:9fc8) (Quit: emf)
[06:00:53] *** Joins: AlexZenon (~alzenon@178.34.161.220)
[06:01:00] *** Joins: Alex_test (~al_test@178.34.161.220)
[06:02:03] <jackdk> janus: worked for me inside the nix shell. I suspect it's picking up the packages it needs from the shell
[06:02:41] <janus> oh, maybe it is using ghc.environment files somehow?
[06:09:10] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e)
[06:09:22] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e) (Client Quit)
[06:11:20] <jackdk> nix-shells use an old cabal v1-command-style "global" package db. I put "global" in quotes because it's contained within the nix shell.
[06:12:36] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:20af:a1b:4b5f:e73)
[06:13:49] *** Joins: jz99 (~jz99@150.203.68.4)
[06:15:03] *** Joins: yauhsienhuangtw (~Yau-Hsien@61-231-43-120.dynamic-ip.hinet.net)
[06:15:19] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[06:17:57] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:18:14] *** Quits: yauhsien (~Yau-Hsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[06:21:30] *** Joins: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914)
[06:24:12] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:20af:a1b:4b5f:e73) (Ping timeout: 240 seconds)
[06:25:49] *** Joins: ubert1 (~Thunderbi@p200300ecdf3be98ff66ac9efa0af0607.dip0.t-ipconnect.de)
[06:26:26] *** Quits: ubert (~Thunderbi@p200300ecdf3be9b34946219f5177446d.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:26:26] *** ubert1 is now known as ubert
[06:32:07] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[06:34:10] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[06:34:48] <davean> janus: ;)
[06:35:08] <davean> jackdk: it gets deeper
[06:35:11] <davean> er, janus 
[06:37:42] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[06:39:41] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:41:10] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[06:42:23] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[06:44:39] *** [itchyjunk] is now known as Guest4684
[06:44:39] *** [_] is now known as [itchyjunk]
[06:45:37] *** Quits: Guest4684 (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[06:46:38] *** Quits: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:47:43] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[06:48:58] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[06:49:55] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[06:52:12] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[06:56:45] *** Joins: notzmv (~zmv@user/notzmv)
[06:57:00] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[06:59:48] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Ping timeout: 240 seconds)
[07:02:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:06:44] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[07:08:12] *** Quits: beka (~beka@104.193.170.240) (Ping timeout: 240 seconds)
[07:09:19] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:10:14] *** Quits: kongsheng (~kongsheng@71.28.228.142) (Quit: Client closed)
[07:11:00] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[07:14:26] *** Joins: yauhsien_ (~Yau-Hsien@112.121.69.46)
[07:16:16] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914)
[07:18:08] *** Quits: yauhsienhuangtw (~Yau-Hsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[07:19:20] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[07:22:25] *** Joins: yauhsienhuangtw (~Yau-Hsien@61-231-43-120.dynamic-ip.hinet.net)
[07:23:06] *** Joins: beka (~beka@104-244-24-117.PUBLIC.monkeybrains.net)
[07:25:24] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:26:22] *** Quits: yauhsien_ (~Yau-Hsien@112.121.69.46) (Ping timeout: 272 seconds)
[07:31:10] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[07:31:11] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:31:26] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 272 seconds)
[07:34:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:35:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:35:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:35:41] *** Joins: wroathe (~wroathe@user/wroathe)
[07:41:53] *** Quits: analognoise (~analognoi@185.229.59.233) (Read error: Connection reset by peer)
[07:45:05] *** Joins: Guest48 (~Guest48@103.177.44.10)
[07:45:17] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:47:36] *** Joins: Guest487 (~Guest48@103.177.44.10)
[07:48:12] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 256 seconds)
[07:52:00] *** Quits: jjhoo (~jahakala@user/jjhoo) (Ping timeout: 268 seconds)
[07:52:30] *** Quits: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[07:53:20] *** Joins: tomku (~tomku@user/tomku)
[07:55:30] *** Joins: adam_ (~m-2jewo5@129.153.21.50)
[07:57:04] *** Joins: jjhoo (~jahakala@user/jjhoo)
[07:57:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:01:55] *** Quits: adam_ (~m-2jewo5@129.153.21.50) (Remote host closed the connection)
[08:02:12] *** Joins: adamcstephens_ (~m-2jewo5@129.153.21.50)
[08:04:39] *** Quits: yauhsienhuangtw (~Yau-Hsien@61-231-43-120.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:07:55] *** Joins: mbuf (~Shakthi@122.174.187.22)
[08:11:04] *** Joins: jz9915 (~jz99@150.203.68.4)
[08:14:31] *** Quits: jz99 (~jz99@150.203.68.4) (Ping timeout: 256 seconds)
[08:19:51] *** Joins: strawburr (~user@172.56.40.24)
[08:21:02] *** Quits: adamcstephens (161730d29b@2604:bf00:561:2000::2d5) (Remote host closed the connection)
[08:22:05] *** adamcstephens_ is now known as adamcstephens
[08:24:40] *** Joins: AdamS[m] (~adamvalko@2001:470:69fc:105::1:d5f0)
[08:29:40] *** Joins: k8yun (~k8yun@user/k8yun)
[08:29:49] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:42:44] *** Quits: jz9915 (~jz99@150.203.68.4) (Quit: Client closed)
[08:42:55] *** Joins: jz99 (~jz99@150.203.68.4)
[08:44:53] *** Quits: jz99 (~jz99@150.203.68.4) (Client Quit)
[08:48:46] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[08:54:09] *** Quits: off^ (~off@50.232.121.75) (Remote host closed the connection)
[08:55:37] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914)
[08:58:00] *** Quits: ubert (~Thunderbi@p200300ecdf3be98ff66ac9efa0af0607.dip0.t-ipconnect.de) (Quit: ubert)
[08:58:35] *** Joins: ubert (~Thunderbi@p200300ecdf3be98f2891ed35b60ac0a6.dip0.t-ipconnect.de)
[09:00:52] *** Joins: deadmarshal_ (~deadmarsh@95.38.117.150)
[09:02:17] *** Quits: Guest48 (~Guest48@103.177.44.10) (Quit: Client closed)
[09:02:17] *** Quits: Guest487 (~Guest48@103.177.44.10) (Quit: Client closed)
[09:05:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[09:05:16] *** Quits: deadmarshal_ (~deadmarsh@95.38.117.150) (Ping timeout: 256 seconds)
[09:05:28] *** Quits: strawburr (~user@172.56.40.24) (Remote host closed the connection)
[09:07:43] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[09:08:18] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:14:44] *** Joins: bahamas (~lucian@84.232.140.52)
[09:16:57] *** Joins: deadmarshal_ (~deadmarsh@95.38.117.150)
[09:23:47] *** Joins: xkuru (~xkuru@user/xkuru)
[09:29:25] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[09:29:38] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[09:29:52] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 272 seconds)
[09:31:02] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[09:31:10] *** Joins: coot (~coot@213.134.190.95)
[09:34:30] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[09:36:18] <Axman6> um, dumb question, but how do use cabal repl with a package I've installed? I'm used to stack repl -package foo, what's the equivalent when using cabal?
[09:36:31] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[09:36:33] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[09:37:11] <Axman6> ah, looks like --build-depends
[09:37:16] <jneira[m]> <geekosaur> "stack controls its version of..." <- yeah that is the reason, it lets you override it but I guess nobody does it, so you end with two msys, as you can't touch stack one without high probs of break it
[09:37:28] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[09:37:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[09:38:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:39:20] *** Quits: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com) (Quit: leaving)
[09:39:52] *** Quits: ubert (~Thunderbi@p200300ecdf3be98f2891ed35b60ac0a6.dip0.t-ipconnect.de) (Quit: ubert)
[09:40:10] *** Joins: ubert (~Thunderbi@p200300ecdf3be98f192a131a3268d950.dip0.t-ipconnect.de)
[09:46:37] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::45ee) (Ping timeout: 240 seconds)
[09:47:12] *** Quits: CATS (apic@brezn3.muc.ccc.de) (Ping timeout: 256 seconds)
[09:48:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:48:29] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:51:01] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:51:18] *** Joins: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com)
[09:53:20] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:54:32] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[09:57:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:59:06] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:59:23] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:01:03] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[10:02:50] *** Joins: Guest48 (~Guest48@103.177.44.10)
[10:05:28] *** Quits: Guest48 (~Guest48@103.177.44.10) (Client Quit)
[10:09:20] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914)
[10:15:54] *** Joins: xkuru (~xkuru@user/xkuru)
[10:16:42] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[10:17:07] *** Joins: xkuru (~xkuru@user/xkuru)
[10:18:22] *** Quits: deadmarshal_ (~deadmarsh@95.38.117.150) (Ping timeout: 256 seconds)
[10:22:08] *** Joins: Guest48 (~Guest48@103.177.44.10)
[10:27:13] *** Quits: Guest48 (~Guest48@103.177.44.10) (Quit: Client closed)
[10:30:46] *** Joins: arjun (~arjun@user/arjun)
[10:31:11] <arjun> how do i point cabal to install a package form a different url globally ?
[10:31:30] <arjun> sidenote: anyone know what's up here -> https://github.com/vincenthz/hs-memory/pull/87 ?
[10:35:28] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:36:37] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[10:37:39] *** Joins: vglfr (~vglfr@88.155.45.155)
[10:40:44] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:42:18] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[10:46:05] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:9e8a:8fa1:6b4e:dd92) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[10:47:08] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[10:51:25] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:54:52] *** Joins: Philos86 (~Philos86@38.80.235.160)
[10:56:08] <Philos86> Hello, I'm new to Haskell and was wondering if I could get some help. I'm trying to implement the sRGB gamma transfer function and getting some errors about the Fractional datatype.
[10:57:27] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[10:57:54] *** Quits: ishutin (~ishutin@78-131-74-100.pool.digikabel.hu) (Ping timeout: 272 seconds)
[10:59:00] *** Joins: ishutin (~ishutin@87-97-2-239.pool.digikabel.hu)
[11:02:16] <Cale> Philos86: sure, maybe put the code/error up on dpaste.com or something?
[11:03:33] <Cale> Fractional by the way, is a type class -- it's an interface shared by numerical data types that can represent fractional values (and do things like division)
[11:04:38] *** Quits: ubert (~Thunderbi@p200300ecdf3be98f192a131a3268d950.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[11:04:51] <Cale> You might be getting errors if you try to use (/) to divide integer values, for instance, because you'll need to explicitly convert them to a fractional type of number, such as Double before doing that.
[11:06:17] *** Quits: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com) (Ping timeout: 240 seconds)
[11:06:50] <Philos86> Cale Here you go: https://pastebin.com/EwuerMTc
[11:07:40] <Cale> Oh, Fractional isn't a type, you can't use it like that in a type signature
[11:07:45] <Philos86> Ah, that makes sense.
[11:08:08] <Philos86> Is there a generic Real datatype I can use that represents real numbers?
[11:08:09] <Cale> Also, you don't have to repeat the x on the left of each guard (and I think that's not valid)
[11:08:28] *** Joins: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com)
[11:09:10] <Cale> You could write something like gammaCorrect :: (Fractional a) => a -> a
[11:09:26] <Cale> However, I see that you're also running into an issue with exponentiation
[11:09:30] <Philos86> Now it's telling me "No instance for (Fractional b0) arising from a use of `/'".
[11:09:40] <Cale> ^ can only handle non-negative integer exponents
[11:09:52] <Philos86> Oh.
[11:09:57] <Cale> (but can work with any type of numbers in the base)
[11:10:07] <Philos86> So is there a way to raise a real number to the power of another real number?
[11:10:15] <Cale> (**)
[11:10:27] <Cale> :t (**)
[11:10:28] <lambdabot> Floating a => a -> a -> a
[11:10:44] <Philos86> Ah. Is that valid for negative bases/exponents too?
[11:11:57] <Cale> > pi ** (-4)
[11:11:58] <ski> > 2 ^^ (-3)
[11:11:58] <lambdabot>  1.0265982254684336e-2
[11:12:00] <lambdabot>  0.125
[11:12:17] <Philos86> Ah, ok.
[11:12:20] <Cale> > 2 ** sqrt 2
[11:12:22] <lambdabot>  2.665144142690225
[11:12:42] <Cale> But it forces the base and result to be floating point
[11:12:43] <Philos86> Some previous implementations of pow (looking at you, HLSL) don't support negative bases or exponents for some reason.
[11:12:52] *** Joins: da39a3ee5e6b4b0_ (~textual@171.5.29.46)
[11:12:57] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914) (Ping timeout: 240 seconds)
[11:13:00] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[11:13:02] <Cale> There's also ^^
[11:13:05] <Cale> :t (^^)
[11:13:06] <lambdabot> (Fractional a, Integral b) => a -> b -> a
[11:13:21] <Cale> It allows negative integer exponents, but requires a fractional base / result type
[11:13:24] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:13:33] <Cale> Just for comparison,
[11:13:36] <Cale> :t (^)
[11:13:37] <lambdabot> (Integral b, Num a) => a -> b -> a
[11:13:44] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 272 seconds)
[11:14:28] <Philos86> Huh
[11:14:58] <Philos86> Ok silly question, but how do I write a number (of any kind) to the console/stdout/stderr?
[11:15:15] <Cale> print x will usually do it
[11:15:23] <Cale> which is the same as putStrLn (show x)
[11:15:37] <Axman6> :t ((^),(^^),(**))
[11:15:38] <lambdabot> (Integral b1, Integral b2, Floating a1, Fractional a2, Num a3) => (a3 -> b1 -> a3, a2 -> b2 -> a2, a1 -> a1 -> a1)
[11:15:50] <ski> luvly jubly
[11:15:51] <Cale> show will convert things into strings (usually in a way that results in valid Haskell source code representations of them, but sadly not always)
[11:16:02] <Axman6> urgh, for some reason I expected to get back a tuple of types... that is not at all useful, ignore me
[11:16:25] <Philos86> Also is the an exact arithmetic datatype that works like Float/Double?
[11:16:42] <Philos86> Like the iRRAM library for C++
[11:17:05] <Cale> There are some on Hackage
[11:17:46] <Cale> https://hackage.haskell.org/package/aern2-real
[11:17:56] <Cale> https://hackage.haskell.org/package/exact-real
[11:18:06] <Philos86> Like does it work as-is do I need to use it with special functions?
[11:18:25] <Philos86> Like in C I would need to use a bunch of MPFR proxy functions
[11:18:40] <Cale> It implements the standard numerical classes
[11:18:47] <Cale> like Fractional etc.
[11:19:04] <Philos86> So I could literally just do "pi / 2" and it would be more or less exact?
[11:19:09] <Cale> yep
[11:20:05] <Cale> Though, not sure what the printed result will look like. You might have to extract a specific approximation to actually see something sensible.
[11:23:04] <Philos86> Kinda surprised something like that isn't built-in from the start
[11:23:17] <Cale> Well, it's usually quite impractical for real use
[11:23:27] <Philos86> Ah, yeah speed-wise.
[11:23:34] <Cale> yeah
[11:23:49] <Cale> Like, adding the numbers from 1 to 1000 might be painfully slow kind of slow.
[11:23:51] <Philos86> Is there a 128bit datatype?
[11:24:32] <Cale> https://hackage.haskell.org/package/long-double
[11:25:59] <Cale> There's also Data.Fixed for fixed-precision arithmetic
[11:28:50] <Philos86> Alright, thanks.
[11:29:17] <Philos86> I've heard performance isn't as great at times; is it because of the backend compiler it uses?
[11:30:37] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:30:55] <Cale> Performance of which thing?
[11:32:29] <Philos86> Haskell in general; I've heard reports that a program in Haskell does not have the raw goodput of an equivalent program written in C/C++, but was curious if there's any truth to it.
[11:33:00] <Cale> Just GHC-compiled Haskell code in general? The art of optimising Haskell code is definitely a bit less well-known and can be a little less intuitive than languages that are closer to the bare-metal representation. Though most of the time, it just comes down to using the right data structures and algorithms at a high level.
[11:33:32] <sm> well, very few things are as fast as C in general
[11:33:45] <Cale> If you're really trying to race a C program at some tight loop, that might require mangling your code a bunch, but you could also just write the small loop in C and call it.
[11:33:56] *** Joins: fendor (~fendor@178.165.181.170.wireless.dyn.drei.com)
[11:33:58] <Cale> (or assembly/llvm for that matter)
[11:34:28] <Philos86> Well GHC actually compiles to C (or was it C--?) as an intermediary right? I figured at that point the next compiler in the toolchain could/would handle platform-specific optimization.
[11:34:31] <Cale> no
[11:34:42] <Philos86> Huh.
[11:34:49] <Cale> Well, it compiles to its own thing called C-- as one of the intermediates
[11:35:11] <Cale> (but that's not very much like C)
[11:35:23] <Cale> At one point in the past, it did compile via C
[11:35:51] <Cale> (which it had to mangle the compiler output of gcc with horrible perl scripts before the programs would run, it was terrible)
[11:36:05] <Philos86> I was reading up on it and it made it sound like they switched to using regular C or LLVM SSA as the intermediary.
[11:36:17] <Cale> But it has its own native code generator now, as well as an LLVM backend as an option
[11:36:40] <Philos86> Oh, ok so you can use LLVM if you'd like, but it's not the default or only option.
[11:36:44] <Cale> yeah
[11:36:49] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:94a8:4010:5291:ba96)
[11:38:22] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[11:39:26] <Cale> Oh, davean let me know that -via-C still exists actually :D
[11:39:36] <Cale> -fvia-C
[11:39:48] <davean> https://downloads.haskell.org/~ghc/9.2.2/docs/html/users_guide/codegens.html#c-code-generator-fvia-c
[11:39:52] <davean> basicly it doesn't exist though
[11:40:10] <davean> Its a technicallity it does which is why I mentioned it not here
[11:40:20] *** Joins: michalz (~michalz@185.246.204.77)
[11:40:20] <davean> (Unless you're working on porting GHC)
[11:40:32] *** Quits: beka (~beka@104-244-24-117.PUBLIC.monkeybrains.net) (Ping timeout: 256 seconds)
[11:40:41] <Cale> ah, the option is physically removed from standard-built compilers, probably good :)
[11:41:00] <Philos86> Ah yeah I'm not porting GHC to anywhere.
[11:41:02] <merijn> Cale: I was about to say, it merely exists in a hypothetical sense :p
[11:41:34] <merijn> "If you are facing a porting problem HARDER than making via-C work again for your platform, the code is still around"
[11:41:41] <davean> I just figured Cale would like to know the truth instead of the convinient reality
[11:41:46] <Philos86> Ok so are literal values defined as a certain type by default?
[11:41:47] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:42:02] <Cale> Numerical literals are polymorphic
[11:42:04] <Cale> :t 5
[11:42:05] <lambdabot> Num p => p
[11:42:08] <Cale> :t 4.5
[11:42:09] <lambdabot> Fractional p => p
[11:42:19] <davean> theres also a thing called "defaulting"
[11:42:35] <merijn> imo, defaulting was a mistake
[11:42:39] <Philos86> Ok so a literal 0.5 would be implemented on a context-by-context basis?
[11:42:44] <davean> merijn: yes, but it does relate to the question
[11:42:57] <davean> merijn: and the 'base' code is littered with it
[11:43:00] <merijn> Philos86: Well, specifically, 0.5 gets translated to "fromRational 0.5"
[11:43:06] <Philos86> So x = 0.5 + 1 might be different from x = 0.5 / y
[11:43:16] <merijn> Philos86: And, for example, 5 gets translated to "fromInteger"
[11:43:39] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[11:43:56] <Philos86> In C you can define the precision/datatypes of literal values, and wasn't sure if I can or should be doing that in Haskell.
[11:43:59] <merijn> Philos86: Type inference is bidirectional, so the type of 'x' (and thus it's value) derives from *both* the parts of it's expression *and* how it's used
[11:44:04] <davean> Philos86: specify its type
[11:44:24] <merijn> Philos86: In your 'x = 0.5 + 1' GHC infers a couple of things
[11:44:25] <Cale> Philos86: Especially if you're not giving explicit type signatures. If you want to get good performance out of numerical stuff, you should definitely try to specify the types as much as you can.
[11:44:54] <Philos86> Ok, that's what I was thinking but wasn't sure.
[11:45:02] <merijn> Philos86: First of all "0.5 :: Fractional p => p", "1 :: Num p => p", and "(+) :: Num a => a -> a -> a"
[11:45:18] <merijn> Philos86: So GHC infers: "x :: (Fractional a, Num a) => a"
[11:45:20] <Philos86> In the case of my transfer function, how would I force all literals to be either single or double precision?
[11:45:32] <merijn> Philos86: ":: Double" :)
[11:45:35] <Philos86> Like x * 12.92. Is the literal single or double?
[11:45:47] <merijn> Philos86: Rationals are arbitrary precision
[11:45:53] <Cale> When you see that something has a type like  Fractional p => p  then at runtime, this is implemented as a function which takes a record of all the Fractional operations (which in turn includes a record of all the Num operations), and computes your value using them.
[11:46:03] <merijn> Philos86: So it depends on the conversion from rational to actualy type/value (like Double)
[11:46:12] <Philos86> Ok so would I define the type like this?
[11:46:13] <Philos86> x * (12.92 :: Double)
[11:46:15] <sm> when GHC RTS (?) fails to decode due to unset/wrong locale... is there any more specific exception to catch than IOException ?
[11:46:35] <merijn> Philos86: Yeah. Or, if 'x :: Double' GHC will automatically infer 12.92 as being Double too
[11:46:35] <Cale> It's usually enough just to specify the types at the top level when you define things
[11:46:51] <Philos86> @merij
[11:46:51] <lambdabot> Unknown command, try @list
[11:47:11] <merijn> Philos86: Or, if you write "y = x * 12.92" then "y :: Double" is enough to infer 'x' and '12.92' are Double
[11:47:13] <Philos86> merijn Because I'm only taking a single Double parameter, is GHC assuming all literals are floats then?
[11:47:26] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 245 seconds)
[11:47:42] <merijn> Philos86: You cannot mix different types in arithmetic (unlike C) and there is no automatic conversion
[11:48:09] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:48:18] <merijn> Philos86: So fixing one part of an expression to a specific type is sufficient to fix *everything* unless you explicitly add conversions
[11:48:35] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[11:48:46] <Cale> Philos86: the information generally flows through the operations
[11:48:47] <Cale> :t (*)
[11:48:48] <lambdabot> Num a => a -> a -> a
[11:48:54] <merijn> Which can be annoying sometimes when mixing lots of integer and float math, but overall I prefer it to C's implicit conversion, because it's harder to mess up explicit conversions
[11:49:02] <Cale> both arguments and the result of (*) must have the same type, for example
[11:49:04] *** Joins: lumberja1k123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[11:49:05] <Philos86> Ok so is it safe to assume that GHC promotes a literal or variable to the most precise/accurate datatype between two operands?
[11:49:10] <merijn> > (5 :: Int) * (12.00 :: Double)
[11:49:12] <lambdabot>  error:
[11:49:12] <lambdabot>      • Couldn't match expected type ‘Int’ with actual type ‘Double’
[11:49:12] <lambdabot>      • In the second argument of ‘(*)’, namely ‘(12.00 :: Double)’
[11:49:20] <Cale> GHC will never implicitly convert numerical types
[11:49:23] <merijn> Philos86: GHC never promots variables
[11:49:36] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[11:49:46] <merijn> Philos86: Only literals are polymorphic and they're converted *once*, based on the type of the expression their used in
[11:49:48] <Philos86> So (x :: Float) * (y :: Double) would be invalid?
[11:49:53] <merijn> Philos86: Yes
[11:49:54] <Cale> correct
[11:50:20] <Philos86> You said explicit is allowed though so I can manually promote x to Double then right?
[11:50:32] <Cale> yeah, you could use realToFrac to convert it
[11:50:33] <merijn> Philos86: So literals are arbitrary precision (and will be converted to the nearest possible representation based on use)
[11:50:35] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[11:50:44] <merijn> > (0.5 :: Float) * (2.0 :: Double)
[11:50:45] <lambdabot>  error:
[11:50:46] <lambdabot>      • Couldn't match expected type ‘Float’ with actual type ‘Double’
[11:50:46] <lambdabot>      • In the second argument of ‘(*)’, namely ‘(2.0 :: Double)’
[11:50:50] <merijn> > realToFrac (0.5 :: Float) * (2.0 :: Double)
[11:50:52] <lambdabot>  1.0
[11:51:01] <ski> > realToFrac (pi :: Float) :: Double
[11:51:03] <lambdabot>  3.1415927410125732
[11:51:25] <Philos86> So wait how do you typecast/coerce/promote a variable?
[11:51:29] <ski> > fromIntegral (5 :: Int) * (12.00 :: Double)
[11:51:30] <lambdabot>  60.0
[11:51:37] <Philos86> Is it just (x :: Type) :: OtherType?
[11:51:40] <ski> no
[11:51:43] <merijn> There are no casts, there's coercions (but you don't want those)
[11:51:53] <merijn> Philos86: The two main functions you want for arithmetic are:
[11:51:58] <merijn> :t realToFrac
[11:51:59] <lambdabot> (Real a, Fractional b) => a -> b
[11:52:02] <merijn> :t fromIntegral
[11:52:03] <lambdabot> (Integral a, Num b) => a -> b
[11:52:35] <ski> `(x :: Type) :: OtherType' only works when `Type' and `OtherType' are the same type. a type ascription is not a cast or a coercion. it specifies what type something already has
[11:52:35] <merijn> The former converting between fractional/real types and the latter for converting any integral type to an arbitrary Num
[11:52:41] <Cale> Philos86: Well, that basically ensures that Type and OtherType will unify with each other, i.e. that if they're polymorphic, that you can specialise them both to get some more concrete type
[11:52:59] *** Quits: lumberja1k123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[11:53:01] <Cale> Philos86: Or if they're not polymorphic, it just ensures that Type and OtherType are the same type
[11:53:13] <Philos86> Ok wait so it sounds like ultimately in Haskell all arithmetic boils down to either an integral type or fractional type, yes?
[11:53:15] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 256 seconds)
[11:53:34] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[11:53:39] <Cale> Well, you can introduce your own new data types and make them instances of these classes by implementing the operations
[11:53:42] <Philos86> Like for example any integer (eg. 5) can ultimately be represented as a fractional (5 / 1) so it seems like Haskell is internally using those for everything, no?
[11:54:01] <merijn> Philos86: Consider the case of "2 :: Double". The literal '2' has type 'Num a => a' (i.e. any instance of Num) and the type annotation says it has type Double. So the question (to GHC) is "is Double an instance of Num?". Yes, so it uses 2 as type Double
[11:54:05] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[11:54:18] <Philos86> Just trying to wrap by head around integrals and fractionals.
[11:54:41] <Cale> (5 :: Integer) will internally be a data structure that stores 5 as a machine int, because it's small enough, but for a large enough value, would use a GMP large integer
[11:54:57] <Cale> (5 :: Double) will use a machine double internally
[11:55:06] <Cale> (5 :: Int) will definitely use a machine integer
[11:55:08] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:55:13] <Philos86> Ok so in that case it's looking at 2 (as a Num) and seeing if it can downcast it (but not really) to a Double before implementation
[11:55:32] <merijn> Philos86: The think is that the *literal* 5 in source is treated as "fromInteger 5" and the representation depends on "what integer type is 5 converted to"
[11:55:35] <Cale> When you have a real program, at some point, you will have to choose a specific type
[11:55:45] <ski> > fromInteger 2 :: Double
[11:55:47] <lambdabot>  2.0
[11:56:06] <merijn> Philos86: So if you have "5 :: Double" it will convert the integer value 5 to the closest IEEE-754 Double (which happens to be 2.0)
[11:56:07] <ski> a literal `2' gets converted to `fromInteger 2', where that `2' has type `Integer'
[11:56:23] <Cale> On the ghci prompt, or if you're really lazy about specifying things, there's a mechanism which will try to "default" the type chosen to Integer, and if that doesn't work, then Double (and this list can be modified with a default declaration)
[11:56:34] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:56:37] <Philos86> Ah, ok.
[11:56:40] *** Joins: Erutuon (~Erutuon@user/erutuon)
[11:56:57] <Cale> It only applies in cases where a type is only constrained by Prelude classes that include some numerical ones.
[11:56:59] <merijn> (because the literal "5 :: Double" is treated as "fromInteger 5 :: Double" and "fromInteger :: Num a => Integer -> a" and Double is an instance of Num)
[11:57:02] <Philos86> Also thanks for answering all my questions; Haskell is very much a world of difference from the C family of languages.
[11:57:07] <ski> (a floating-point literal like `2.0' gets converted to `fromRational 2.0', interpreting that `2.0' as a `Rational')
[11:57:39] <merijn> Philos86: Note that literals (by definition) are finite in size and thus can be represented losslessly as Rational (which is basically a fractional representation)
[11:57:43] <Philos86> Does haskell have a native way of doing integrations or summations?
[11:57:46] <merijn> > 5 :: Rational
[11:57:48] <lambdabot>  5 % 1
[11:57:51] <ski> (note that `fromInteger' is distinct from `fromIntegral', btw)
[11:58:01] <merijn> > 1 / 3 :: Rational
[11:58:02] <lambdabot>  1 % 3
[11:58:19] <Cale> Philos86: There's sum, which will take the sum of a list
[11:58:29] <Cale> > sum [x^2 | x <- [1..10]]
[11:58:30] <lambdabot>  385
[11:58:51] <merijn> Philos86: So the literal as seen by the compiler is lossless and you only incur loss of precision when the compiler uses "fromRational :: Fractional a => Rational -> a" to convert it to, e.g. a Double
[11:59:31] <Cale> No built-in mechanism for integrals, but relevant libraries exist
[11:59:35] <Philos86> Ah ok so the precision loss is ultimately context-specific then
[12:00:03] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 256 seconds)
[12:00:11] <merijn> Philos86: Yeah. And since there's no automatic promotion there's only a single context-specific loss (e.g. to Double or whatever)
[12:00:29] <Philos86> Ok that makes sense now.
[12:01:19] *** Joins: alp (~alp@user/alp)
[12:01:44] <Philos86> I'm looking for some libraries for integration but not finding anything on google
[12:01:55] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:02:13] *** Quits: [exa] (exa@user/exa/x-3587197) (Remote host closed the connection)
[12:02:35] <merijn> Philos86: Which is why in your 'y = x * 0.5' example fixing either 'x' or 'y' is sufficient to make things work out
[12:02:49] <merijn> The rest is inferred transitively via *
[12:04:25] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[12:05:09] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[12:05:48] <Philos86> Does Haskell have any kind of loops?
[12:06:02] <ski> > let x = x in x
[12:06:04] <lambdabot>  *Exception: <<loop>>
[12:06:26] <merijn> Philos86: Define loops :)
[12:06:50] <merijn> Because "no" but also "yes, of course"
[12:07:45] <Philos86> Like for example if I need to integrate over hemisphere and calculate some value based on a vector for that specific iteration I could do that easily in C using a for loop
[12:07:52] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:08:30] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[12:09:15] *** Joins: chele (~chele@user/chele)
[12:09:16] <merijn> Philos86: Most while loops can be trivially turned into maps/folds and various higher order traversals. Where as more generic while loops are more likely to be easier to just write recursively
[12:09:33] <Philos86> Ah, ok that makes sense.
[12:09:58] <Philos86> So let's say I need to integrate over a hemisphere, how would that look in Haskell?
[12:10:09] <merijn> Most "iterative solutions with state" tend to map rather naturally to folds
[12:10:28] <merijn> Philos86: I can't say, because I don't know what "integration over a hemisphere" looks like in "not Haskell" :)
[12:11:01] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[12:11:35] *** Joins: dschrempf (~dominik@178.251.70.207)
[12:12:11] <Philos86> Oh, well like in C integration usually gets turned into a summation via some kind of for loop with a specific number of samples
[12:14:10] <merijn> Philos86: Basically, if you can formulate your loop body as a function with type: "IterationInput -> State -> State" it's a fold :)
[12:14:15] <merijn> :t foldl
[12:14:16] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[12:14:18] <merijn> :t foldr
[12:14:19] <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
[12:14:45] <merijn> (You can make IterationInput an integer or () if you only need the state)
[12:14:56] <merijn> Although, if you only need the state you can probably just use:
[12:14:57] <Philos86> Ok so going back to my gamma transfer function as an example
[12:15:01] <merijn> :t iterate
[12:15:03] <lambdabot> (a -> a) -> a -> [a]
[12:15:15] <merijn> > iterate (+1) 0
[12:15:16] <lambdabot>  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2...
[12:16:07] <ski> > takeWhile (< 1000) (iterate (2 *) 1)
[12:16:09] <lambdabot>  [1,2,4,8,16,32,64,128,256,512]
[12:16:25] <Philos86> How would I iterate or fold a number of real values through a function and print them all out?
[12:17:07] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[12:17:13] <Philos86> Like if function f takes a single value x, and I want to iterate or fold over a range of 0 to 1 how do you do that?
[12:17:56] <ski> % for_ [0,0.25 .. 1] (\x -> print x)
[12:17:56] <yahb> ski: 0.0; 0.25; 0.5; 0.75; 1.0
[12:18:05] <merijn> Philos86: ok, so the input of 'f' is the values within your range? What does 'f' return?
[12:18:52] <Philos86> In this case it maps a value within the range of [0, 1] and returns another value within the range of [0, 1]
[12:19:04] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:19:04] <merijn> And what do you do with the result of 'f'?
[12:19:33] <Philos86> Ultimately it would be stored somewhere, like in a file or printed to the console.
[12:19:58] <ski> each individual `f x' would be stored in a file, for each `x' in the range ?
[12:20:00] <merijn> oh, so you just want to use a function before printing? The something like ski's example
[12:20:17] <merijn> :t mapM_
[12:20:18] <lambdabot> (Foldable t, Monad m) => (a -> m b) -> t a -> m ()
[12:20:44] <merijn> % mapM_ (print . (+1)) [0,0.25..1]
[12:20:44] <yahb> merijn: 1.0; 1.25; 1.5; 1.75; 2.0
[12:20:58] <merijn> (just imagine (+1) is whatever function you want)
[12:21:02] *** Joins: jespada (~jespada@148.252.132.235)
[12:21:52] <merijn> ah, looks like I have a reasonably simple iterative problem in last years AOC
[12:22:19] <Philos86> It's giving me syntax errors about the % sign
[12:22:22] <merijn> Philos86: Problem: https://adventofcode.com/2021/day/6 iterative solution using foldl https://github.com/merijn/AdventOfCode/blob/master/Day6.hs#L42-L51
[12:22:32] <merijn> Philos86: % is just the signal to the bot to run it :)
[12:22:49] <Philos86> Oh, derp.
[12:23:07] <Philos86> Ok what does the double .. mean in the array list?
[12:23:53] <merijn> Philos86: pedantic side note: there's no array lists. There's list (which are single linked lists) and there are arrays/vectors (but those aren't in base)
[12:24:15] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[12:24:28] <merijn> Philos86: [x,y..z] gets translated to "enumFromThenTo" (and there's various other Enum based functions)
[12:24:39] <merijn> > [1..] -- enumFrom 1
[12:24:41] <lambdabot>  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,...
[12:24:49] <merijn> > [1,3..] -- enumFromThen 1 3
[12:24:50] <Philos86> So does y control the precision of each iteration?
[12:24:51] <lambdabot>  [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53...
[12:24:59] *** Joins: [exa] (~exa@user/exa/x-3587197)
[12:25:00] <merijn> > [1,3..10] -- enumFromThenTo 1 3 10
[12:25:04] <lambdabot>  [1,3,5,7,9]
[12:25:14] <Philos86> Eg. [0,0.0625..1] would increment by 0.0625 each time?
[12:25:20] <Cale> yeah
[12:25:24] <merijn> Philos86: Yeah. Although admittedly the Double instance is a god awful abomination best avoid like the plague :p
[12:25:34] <Philos86> How so?
[12:25:41] <merijn> Philos86: But it was the simplest way to do your [0, 1] constraint :)
[12:25:52] <Philos86> Ah, I see.
[12:25:54] <merijn> > [0.1..]
[12:25:56] <lambdabot>  [0.1,1.1,2.1,3.1,4.1,5.1,6.1,7.1,8.1,9.1,10.1,11.1,12.1,13.1,14.1,15.1,16.1,...
[12:26:21] <Cale> Yeah, in the Double/Float case, the precision it uses to test if you're at the end is half the distance between the first two given elements, so there are some wacky things that can happen
[12:26:26] <merijn> Philos86: Well, if "enumFrom" is supposed to pick the next value, what is the "next" value of a double? As you can see, the default choice is horrible
[12:26:37] *** Joins: notzmv (~zmv@user/notzmv)
[12:26:40] <merijn> For integeral values "next" has a more sensible definition
[12:26:48] <ski> > [0,2/11 .. 1] :: [Float]
[12:26:49] <lambdabot>  [0.0,0.18181819,0.36363637,0.54545456,0.72727275,0.90909094,1.0909091]
[12:27:17] <Philos86> No wonder integration libraries exist haha.
[12:27:21] <merijn> Philos86: But the .. notation works for any enumerable type
[12:27:24] <tomsmeding> > [0,0.4..1.2]
[12:27:25] <lambdabot>  [0.0,0.4,0.8,1.2000000000000002]
[12:27:28] <merijn> > [False..]
[12:27:29] <lambdabot>  <hint>:1:9: error: parse error on input ‘]’
[12:27:33] <merijn> > [False ..]
[12:27:35] <lambdabot>  [False,True]
[12:27:38] <ski> @botsmack
[12:27:38] <lambdabot> :)
[12:27:58] <Philos86> Ok so what's the difference between a fold and a map?
[12:28:16] *** Joins: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net)
[12:28:17] <merijn> Philos86: If you wanna use "proper" arrays (i.e. like C's arrays) you'll want
[12:28:20] <merijn> @hackage vector
[12:28:20] <lambdabot> https://hackage.haskell.org/package/vector
[12:28:22] <Cale> map will apply a function to all the elements of a list to get another list
[12:28:26] <ski> a `map' translates each element in a list into a new element (independently). the new list has the same number of elements
[12:28:34] <merijn> > map (+1) [0..10]
[12:28:35] <lambdabot>  [1,2,3,4,5,6,7,8,9,10,11]
[12:28:38] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:28:39] <Cale> a fold need not produce a list as its result -- it does some arbitrary thing to combine the elements of the list
[12:28:43] <merijn> > foldl (+) 0 [0..10]
[12:28:45] <lambdabot>  55
[12:29:11] * [exa] hangs a nice ' atop that foldl
[12:29:19] <merijn> > map f [a,b,c]
[12:29:20] <lambdabot>  error:
[12:29:20] <lambdabot>      • Ambiguous type variable ‘b0’ arising from a use of ‘show_M258285656192...
[12:29:20] <lambdabot>        prevents the constraint ‘(Show b0)’ from being solved.
[12:29:28] <merijn> > map f [a,b,c] :: [Expr]
[12:29:29] <lambdabot>  [f a,f b,f c]
[12:29:44] <merijn> > foldl f z [a,b,c] :: Expr
[12:29:45] <lambdabot>  f (f (f z a) b) c
[12:29:58] <ski> > foldr f z [a,b,c]  :: Expr
[12:29:59] <lambdabot>  f a (f b (f c z))
[12:30:10] *** Joins: __monty__ (~toonn@user/toonn)
[12:30:31] *** Joins: acidjnk (~acidjnk@p200300d0c7049f95a8560519e34e318b.dip0.t-ipconnect.de)
[12:30:51] <ski> > foldl (**) z [a,b,c]  :: Expr
[12:30:53] <lambdabot>  ((z**a)**b)**c
[12:30:54] <ski> > foldr (-) z [a,b,c]  :: Expr
[12:30:55] <lambdabot>  a - (b - (c - z))
[12:32:20] *** Joins: worldhelloworld2 (~quassel@vmi275462.contaboserver.net)
[12:33:19] *** Quits: [exa] (~exa@user/exa/x-3587197) (Quit: repty)
[12:33:25] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Remote host closed the connection)
[12:33:28] *** Joins: bahamas (~lucian@84.232.140.52)
[12:33:56] *** Joins: [exa] (exa@user/exa/x-3587197)
[12:34:32] <Philos86> Ok so folds ultimately just add it all up
[12:34:49] <Cale> It's possible to implement map using foldr
[12:34:57] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Ping timeout: 240 seconds)
[12:34:58] <Philos86> I'm assuming foldl and foldr mean fold-left and fold-right, respectively?
[12:35:06] <ski> yes
[12:35:14] <Philos86> Ok so what's the difference?
[12:35:17] <Cale> Yeah, and those refer to the way that the resulting expression is nested
[12:35:28] <Cale> > foldr f z [1,2,3]
[12:35:29] <lambdabot>  f 1 (f 2 (f 3 z))
[12:35:33] <Cale> > foldl f z [1,2,3]
[12:35:35] <lambdabot>  f (f (f z 1) 2) 3
[12:36:03] <Cale> (this is using a cute library that's loaded into lambdabot to display expressions)
[12:36:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:36:54] <Cale> ( https://hackage.haskell.org/package/simple-reflect )
[12:38:15] <ski> @where folds
[12:38:15] <lambdabot> <http://en.wikipedia.org/wiki/File:Fold-diagrams.svg>,<https://cale.l5.ca/share/Folds.svg>
[12:38:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:38:16] <Philos86> Ok what does the . in mapM_ (print . someFunc) do here?
[12:38:24] <ski> function composition
[12:38:38] <Cale> https://cale.l5.ca/share/Folds.svg -- you can see a bunch of folds and folding-related functions visualised here
[12:38:49] <Cale> (f . g) x = f (g x)
[12:39:00] <ski> Cale : ahead of you :p
[12:39:07] <Cale> oh, haha
[12:39:30] <Cale> The wikipedia link is dead :(
[12:39:46] <Philos86> Oh so the . passes the result of g into f
[12:40:33] <ski> Philos86 : it's the same as `mapM_ (\x -> print (someFunc x))', or `mapM_ myFun' where `myFun x = print (someFunc x)'
[12:41:01] <Cale> Yeah, of course, due to lazy evaluation being outermost-first, what will operationally happen (typically) is that the code for f will be entered immediately with its parameter bound to (g x)
[12:41:46] <Cale> (and then, when f decides to inspect that argument, g will actually be used)
[12:42:47] <Philos86> So can Haskell do OOP or is that a bad idea here?
[12:42:49] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:43:09] <Cale> It has no built-in features for it, but it can do a pretty good job of it
[12:43:24] <merijn> Although the use of OOP style design is kinda niche
[12:43:29] <Cale> Yeah
[12:44:25] <Cale> Though there are times where I see someone go overboard defining a type that has 180 cases or something, and then that gets pattern matched on only 2 or 3 times :P
[12:44:27] <Philos86> I'm just curious how you'd handle certain things that typically require state
[12:45:11] <hololeap> do you know about the state monad?
[12:45:16] <Philos86> Like for example I've heard reports of Haskell being increasingly used for game development, which typically require AI and some kinda physics library
[12:45:24] <Cale> A good rule of thumb is that any time you have a type with more constructors than there are times you'll ever pattern match on it, you might just want to replace the type with a record of the results of those pattern matches.
[12:45:45] <Cale> Let's start even more basic than the state monad
[12:46:07] <Cale> Functions can produce different results when applied to different arguments
[12:46:11] <Philos86> hololeap No, I'm only vaguely aware of it and monads in general.
[12:46:28] <hololeap> ok, I probably got to far ahead
[12:46:47] <Philos86> Cale Do constructors mean the same thing here as they do in C/C++?
[12:46:48] <Cale> So you can represent a situation where you have variables that change just by having those variables be the parameters of a function
[12:46:54] <ski> Philos86 : no
[12:47:03] <Cale> Philos86: Yeah, not really, no
[12:47:28] <ski> @where C/C++
[12:47:28] <lambdabot> "C/C++ : A new language for the new Millennium" by Richard Heathfield in 2005-02 at <http://web.archive.org/web/20090421080714/http://www.cpax.org.uk/prg/portable/c/c++/rfe00000.html>
[12:47:51] <Cale> You'll want to read about algebraic data types before the thing I said about data constructors begins to make sense probably :)
[12:48:09] <ski> and pattern-matching
[12:49:06] <Philos86> I'm somewhat aware of pattern matching
[12:49:24] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[12:49:26] <merijn> Philos86: I mean, contrary to the "popular internet perception" Haskell is a whole lot less principled and safe then the average inexperienced person talking about Haskell makes it out to be :p
[12:49:54] <merijn> Philos86: There's like 5 or 6 different types of mutable state, including straight up "malloc & pointers" :)
[12:49:59] *** Joins: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[12:50:15] <hololeap> most languages only know about product types, which are like structs. there are also sum types which are more like "choose a constructor from a list of choices". you can also mix and match
[12:50:21] <Cale> When you define a new data type, you specify a bunch of new values that get names starting with uppercase letters, and these values can be functions (i.e. they can have arguments), with the special property that you're allowed to pattern match on them and get the arguments back out
[12:50:33] <Philos86> So you're saying alot of YT is getting it wrong then?
[12:50:47] <merijn> Philos86: Depends on the channel, probably ;)
[12:51:04] <merijn> But overall I'd say "most things said about Haskell outside of Haskell communities are wrong", yes :)
[12:51:21] <hololeap> it's mostly that haskell makes it less easy to break the rules and/or go crazy, but you still can
[12:51:22] <Cale> Philos86: As a counterpoint to what merijn is pointing out: Haskell also makes it less necessary to use all of those things
[12:51:43] <merijn> Yeah, in practice you usually don't need all that stuff
[12:52:04] <merijn> I'm just saying it's there and using it isn't that hard if you come from, like, C
[12:52:10] <Philos86> Ah ok
[12:52:26] <merijn> Sure, blowing your foot of using malloc and pointers in Haskell is about as easy as in C, which is motivation not too :p
[12:52:31] <Cale> and after a while of not using them as much, you will begin to understand why that's a good idea, because programs that don't manipulate state and twiddle things in memory everywhere are so much easier to reason about, debug, and test
[12:52:36] <Philos86> So if I actually needed to create a singleton or some-such I could, but not necessarily should.
[12:53:07] <merijn> Philos86: Singletons are less necessary since most things are immutable and pure by default
[12:53:31] <merijn> Philos86: singletons are important because they arise when "shared mutable state needs to be ensured to be globally unique"
[12:53:35] <Philos86> Ok so how does Haskell handle things like interfacing with C?
[12:53:45] <merijn> But if you eliminate most shared mutable state, that's a non-issue
[12:54:01] <merijn> Philos86: There's a C FFI which is, frankly, trivial to use if you know C
[12:54:06] <Philos86> Like if I want to draw a triangle in OpenGL, do I need to create wrappers that explicitly state the side-effects of the OGL calls like you do with the IO() datatype?
[12:54:30] <hololeap> it's actually not that uncommon when you start looking at real programs. it seems like quite a few use MVars (IO mutable variables) to implement essentially the singleton pattern from OOP
[12:55:14] <merijn> Philos86: Normally C FFI happens using IO
[12:55:34] <merijn> Philos86: For example, here's a bunch of FFI I do with SQLite and some of my own code in the same repo: https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/src/SQLiteExts.hs#L80-L168
[12:56:04] <merijn> And the relevant C header https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/cbits/sqlite-functions.h
[12:56:05] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a)
[12:56:14] <merijn> Should be fairly straightforward :)
[12:56:33] <hololeap> but you can get away with a lot less singletons if you learn how to do write haskell idiomatically
[12:57:09] <hololeap> it's just sometimes they are actually useful at the top level of a program
[12:57:57] <Philos86> Ah ok that makes sense.
[12:59:18] <Philos86> Not sure if this is sensible question, but how conducive is Haskell to mathematics in general over other languages like C?
[12:59:23] <merijn> Philos86: If you have a C/C++ backgroun, Ryan Newton gave an interesting keynote about Haskell at C++Now a few years back: https://www.youtube.com/watch?v=lC5UWG5N8oY
[12:59:40] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[12:59:52] <Cale> Philos86: Haskell is definitely good for those people who have a mathematical mindset
[13:00:00] *** Joins: ccntrq (~Thunderbi@2a01:c22:8509:dc00:953c:9b71:e9ca:822e)
[13:00:14] <hololeap> it was written by math nerds
[13:00:19] <Philos86> Like let's say I need to write some kind of math library that can or will be called from C
[13:00:46] <Philos86> Cale Ah, that might explain why I'm struggling with it then, as I come from the other side of the camp.
[13:00:53] <maerwald> I think for actual maths stuff, people use python
[13:01:18] <Philos86> Could I write my library in Haskell and call it from C?
[13:01:39] <Cale> Technically, yes, though it's a little awkward to go in that direction
[13:02:04] <Philos86> maerwald Does Python offer a FFI or call to/from C? Last I checked it doesn't.
[13:02:24] <hololeap> maybe llvm would make that easier?
[13:02:28] <Cale> You can FFI export things from Haskell, and then on the C side, you need to call a thing to start the Haskell runtime and then you can call the exported functions.
[13:02:57] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 240 seconds)
[13:03:00] <Philos86> Oh, so Haskell can't generate standalone code that can run then.
[13:03:18] <hololeap> it has a runtime
[13:03:21] *** Quits: thevishy (~Nishant@49.37.242.151) (Read error: Connection reset by peer)
[13:03:22] <Cale> Like, there's a garbage collector and stuff.
[13:03:31] <Cale> thread scheduler
[13:03:57] *** Joins: thevishy (~Nishant@49.37.242.151)
[13:04:10] <hololeap> it's not a good fit for e.g. arduino
[13:04:25] <hololeap> although I think someone did make a subset that worked for that...
[13:04:27] <Cale> It might be more appropriate to write Haskell code that writes C code.
[13:04:45] <Philos86> So if I have a function that is say literally 'f x y = (x ** 5) / pi - y' it would still require the runtime, despite being pure math that could probably be implemented using just doubles and the x87 or SSE/AVX registers?
[13:05:11] <Cale> There are some libraries like that. FFTW is a fast Fourier transform library written as an O'Caml program that writes C programs
[13:05:23] <__monty__> Yes, because haskell has certain semantics and guaranteeing those requires the runtime.
[13:05:26] <Philos86> Cale Funny how we got back to the discussion of whether or not Haskell compiles to C as an intermediary.
[13:05:36] <merijn> __monty__: disagree
[13:05:47] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[13:05:57] <__monty__> merijn: Even if I add "at this time?"
[13:06:12] <Cale> Philos86: Yeah, except that in this case, you'd be writing a one-shot compiler in Haskell, that would itself generate C code. The compiler you could even run interpreted :P
[13:06:16] <merijn> Philos86: I mean, "does code like that require a runtime?" probably not. Was it worth anyone's engineering time to minimise reliance on the runtime? No
[13:06:38] <Philos86> That makes sense.
[13:07:03] <merijn> __monty__: I disagree that Haskell's semantics require a runtime. GHC's implementation kinda hard relies on it, but there's no theoretical reason to consider "Haskell" needing it
[13:07:20] *** Joins: kuribas (~user@ptr-25vy0ia81ze2oltltpx.18120a2.ip6.access.telenet.be)
[13:07:49] <Cale> There's a library called Atom that was written and used a while back to make the control software for a bunch of hybrid hydraulic vehicles. It's a Haskell library that generates C code to avoid the need for a realtime operating system.
[13:07:54] <hololeap> that's actually a good point. a lot of this isn't haskell specific, but ghc specific
[13:07:59] <__monty__> Yeah, but this discussion isn't really about pie in the sky stuff. The question is rather concrete. "Can I FFI into Haskell without the runtime."
[13:08:08] <Cale> https://hackage.haskell.org/package/atom
[13:08:36] <merijn> Philos86: The runtime itself is "just" a library linked into the program, if you're one of those people trying to shave off every byte, that's a problem, but in practice that's a non-issue since you usually wanna embed a non-trivial amount of Haskell so you'd need most of the runtime anyway
[13:08:54] <Cale> Yeah
[13:09:00] *** Quits: ishutin (~ishutin@87-97-2-239.pool.digikabel.hu) (Ping timeout: 250 seconds)
[13:09:08] <Cale> Though, it's usually more comfortable regardless just to go the other way
[13:09:09] * maerwald looks at his 50MB big binaries that have 200LOC of code
[13:09:30] <Philos86> Well the idea was to use Haskell for situations where Haskell lends itself very well (eg. math and physics libraries), or for very math-heavy programs (eg. computer graphics) thinking that Haskell, being a pure functional language, could optimize or be optimized for said usage better than C/C++ would.
[13:09:33] <Cale> Usually the stuff that needs to be written in C is a lot smaller
[13:09:46] <dminuoso> maerwald: To be fair, the default of cabal not splitting sections and not stripping your binary is a big part of that.
[13:10:04] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:10:04] <hololeap> also it being statically linked by default
[13:10:05] <Cale> Or, more to the point, the performance-critical stuff is usually tight loops in the innermost parts of your program
[13:10:05] <dminuoso> (Amusingly cabal has a defunct stripping function. You can enable it all you want, it actually doesnt do anything)
[13:10:23] <maerwald> Philos86: I'm not sure Haskell is very strong on math-heavy programs. The fact that it's suitable for math-like minds doesn't imply we can compete with other language ecosystems wrt such libraries
[13:10:23] <Cale> and so it's fine to surround that with high-level code
[13:10:39] <Philos86> dminuoso I'm using stack, not cabal so not sure if I have that problem.
[13:10:53] *** Joins: ishutin (~ishutin@85-238-93-20.pool.digikabel.hu)
[13:11:07] *** Joins: EvanR_ (~EvanR@user/evanr)
[13:11:10] <Philos86> maerwald Ah, ok that makes sense.
[13:11:17] <dminuoso> Philos86: Doesnt stack use cabal-the-lib though?
[13:11:22] <hololeap> isn't massive pretty competitive as far as performance?
[13:11:27] <maerwald> having done computer graphics in Haskell a bit, I'm pretty confident to say it cannot compete with OpenCV for example
[13:11:28] <merijn> maerwald: That sound's like your not stripping and not using split sections
[13:11:28] <Philos86> I have no idea; I'm new to all of this haha.
[13:11:34] <Cale> Yeah, there is a bunch of numerical stuff written for Haskell, but it's a bit haphazard, and there hasn't been a coordinated effort of any kind to build a one-size-fits-all numerical computing solution.
[13:11:35] *** Quits: EvanR (~EvanR@user/evanr) (Read error: Connection reset by peer)
[13:11:35] <maerwald> merijn: I am =)
[13:11:46] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Ping timeout: 256 seconds)
[13:11:46] <dminuoso> sounds unlikely
[13:12:02] <dminuoso> Even our 20kLOC with plenty of libraries is smaller than that
[13:12:11] <hololeap> *Massiv
[13:12:16] <dminuoso> maerwald: How do you strip? Do you rely on `enable-stripping` in cabal?
[13:12:32] <dminuoso> Err *executable-stripping
[13:12:40] <dminuoso> Because that thing is properly broken and doesnt do anything
[13:12:45] <maerwald> I'm aware
[13:12:47] <Cale> But if you have to do like, one numerical computing thing... there are bindings to BLAS and Lapack and a bunch of other stuff, as well as some higher level libraries for more specific tasks.
[13:13:11] <maerwald> cabal build --ghc-options='-split-sections -optl-static'
[13:13:12] <merijn> maerwald: My 30k LOC using a bazillion libraries is 20MB unstripped
[13:13:29] <dminuoso> Yup, our 20kLOC with a bazillion libraries is around 16MiB as well
[13:13:30] <Cale> https://hackage.haskell.org/package/statistics -- this library is pretty decent in my experience
[13:13:45] <merijn> maerwald: Are you sure most that size isn't the C libraries you're linking?
[13:13:49] <maerwald> obviously, I was exaggarating
[13:14:04] <Philos86> So like if I want to write a ray-tracer (where you need a BVH, or an Octree, and many other things like BSDFs and such) would that actually be harder to do that in Haskell?
[13:14:21] <merijn> Philos86: I don't think so
[13:15:07] <dminuoso> merijn: though, 20MiB unstripped?
[13:15:09] <dminuoso> How did you do that?
[13:15:24] <dminuoso> Anything of that size with a bazillion libraries would probably be closer to 100MiB
[13:15:26] <Cale> I've written a raytracer that was about 1 page of Haskell code at some point. Of course, it had no fancy features of any kind, and it just rendered some spheres with fractal reflections :)
[13:15:53] <merijn> dminuoso: The power of transitive split-sections?
[13:15:56] <maerwald> Philos86: and even if you manage to build your computational graphics stuff in Haskell, you're very unlikely reaching similar-to-C performance unless you invest a LOT of time into performance optimization in Haskell
[13:16:03] <Cale> I wonder if I still have it somewhere... I think it might be past the point where I lost a bunch of stuff in a hard drive death
[13:16:20] <merijn> maerwald: I'm not even convinced of that for "offline" raytracing
[13:16:49] <Cale> On the up-side, it can be pretty easy to experiment with parallelism in Haskell
[13:17:06] <kuribas> I am thinking to write a library that has lenses to change or read from a bytestring directly, using some record as template.
[13:17:35] <kuribas> So basically:  getField . deserialize, but without the deserialize.
[13:17:50] <Cale> (Getting truly great performance still takes work, but for a raytracer, it would be easy at least to get all your cores hot)
[13:17:52] <Philos86> Cale Does that it'd be relatively simple for one to implement a rasterizer in Haskell?
[13:18:07] <Philos86> *that mean
[13:18:14] <kuribas> Hopefully ghc can inline the lenses, and reduce them to offsets.
[13:18:25] <merijn> dminuoso: On linux it's 11 MB stripped (13 on macos)
[13:18:30] <Cale> Yeah, relatively simple to get something that goes faster than single-threaded anyway
[13:18:38] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[13:18:46] <Cale> You might have to fiddle around a bit with how you chunk the work
[13:19:08] <Cale> but for a raytracer, it's embarrassingly parallel, so you'll get a decent solution without too much trouble
[13:19:24] <kuribas> so "view @"field" @MyRecord bs", becomes "peekAt fieldOffset bs"
[13:20:09] <kuribas> With the hope that this gives C like performance, but safe manipulation of the binary.
[13:21:25] <kuribas> Using generics.
[13:21:27] <maerwald> kuribas: in order to do fast bytestring access you need to rely on e.g. elemIndex, which uses memchr
[13:21:44] <kuribas> maerwald: yes?
[13:22:16] <maerwald> How would you do that when you need to deserialize? Usually you have a binary format that tells you where the next offset is if you need to process large binary data
[13:22:18] *** Quits: worldhelloworld2 (~quassel@vmi275462.contaboserver.net) (Ping timeout: 272 seconds)
[13:22:22] <kuribas> Or I use "peek"?
[13:22:54] <kuribas> maerwald: the idea is not to deserialize, but to calculate the offsets from a record definition.
[13:22:56] *** Quits: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net) (Ping timeout: 272 seconds)
[13:23:04] <kuribas> the record definition also defines the binary format of the blob.
[13:23:34] <kuribas> Maybe generics are too fragile, and I will need to generate lenses using TH...
[13:23:41] <Philos86> Cale So how would Haskell's parallelism align with GPGPU parallelism?
[13:23:58] <maerwald> kuribas: maybe https://hackage.haskell.org/package/winery is enough, it's very performant
[13:24:03] <Philos86> Also can Haskell natively compile code to run on GPUs?
[13:24:55] <Philos86> Theoretically, if GHC generates and compiles its own CPU code couldn't it also do the same for GPUs and keep them in sync?
[13:25:21] *** Quits: thevishy (~Nishant@49.37.242.151) (Quit: Leaving)
[13:25:30] <Philos86> Like say I'm running a fold over some complex function with a number of values and parameters. Can GHC break that down into chunks that would run on a GPU?
[13:27:13] <kuribas> maerwald: yeah, that looks interesting.
[13:28:04] <hololeap> more likely there would be some kind of language subset or interface that limits the allowed operations and then compile that to the cuda code or whatever
[13:28:15] <hololeap> I don't know if that exists currently, though
[13:28:54] <Philos86> Huh.
[13:28:55] *** Joins: ubert (~Thunderbi@p200300ecdf3be98fb257cc52479c2a5c.dip0.t-ipconnect.de)
[13:28:56] <Cale> There is a library, I haven't heard much about it in years, but it's apparently still maintained https://hackage.haskell.org/package/accelerate
[13:29:34] <Cale> It's pretty cool -- you can write array operations, and there are backends that can use CUDA or various other mechanisms to implement them
[13:31:32] <Cale> https://github.com/AccelerateHS/accelerate/ good readme here with a bunch of links to resources
[13:33:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[13:35:36] *** Quits: jespada (~jespada@148.252.132.235) (Ping timeout: 272 seconds)
[13:36:04] *** Joins: jespada (~jespada@148.252.132.235)
[13:36:08] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[13:36:38] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-055.client.tudelft.eduvpn.nl)
[13:37:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Ping timeout: 240 seconds)
[13:41:29] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:50:22] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[13:51:59] *** Joins: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net)
[13:54:37] *** Joins: worldhelloworld2 (~quassel@vmi275462.contaboserver.net)
[13:54:52] <romesrf> \o
[13:55:21] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 245 seconds)
[13:55:39] *** Quits: jespada (~jespada@148.252.132.235) (Ping timeout: 256 seconds)
[13:56:36] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[13:57:49] *** Joins: akegalj (~akegalj@78-3-81-31.adsl.net.t-com.hr)
[14:06:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:07:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:07:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:12:09] *** Joins: jespada (~jespada@148.252.132.235)
[14:15:05] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[14:16:11] *** Joins: zaquest (~notzaques@5.130.79.72)
[14:24:09] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c)
[14:26:01] *** Quits: da39a3ee5e6b4b0_ (~textual@171.5.29.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:28:23] *** Quits: acidjnk (~acidjnk@p200300d0c7049f95a8560519e34e318b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:32:22] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c) (Remote host closed the connection)
[14:37:35] *** Quits: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Ping timeout: 256 seconds)
[14:42:46] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b)
[14:43:34] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[14:45:46] *** Joins: coot (~coot@213.134.190.95)
[14:45:50] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[14:45:54] *** Quits: vglfr (~vglfr@88.155.45.155) (Ping timeout: 272 seconds)
[14:47:35] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Remote host closed the connection)
[14:48:07] *** Joins: fendor_ (~fendor@91.141.34.180.wireless.dyn.drei.com)
[14:48:19] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c)
[14:50:56] *** Quits: fendor (~fendor@178.165.181.170.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[14:51:19] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[14:52:01] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[14:54:28] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:54:36] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:8c26:e871:cea5:bbc0) (Ping timeout: 240 seconds)
[14:56:16] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c) (Remote host closed the connection)
[14:56:21] *** Joins: deadmarshal_ (~deadmarsh@95.38.230.176)
[14:57:16] *** Joins: kaph (~kaph@an-19-184-70.service.infuturo.it)
[15:00:09] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[15:03:48] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[15:04:25] *** Quits: ishutin (~ishutin@85-238-93-20.pool.digikabel.hu) (Read error: Connection reset by peer)
[15:06:18] *** Joins: euprogramista (~euprogram@185.218.127.6)
[15:06:19] *** Joins: ishutin (~ishutin@87-97-12-221.pool.digikabel.hu)
[15:07:39] <euprogramista> hi there, can use this channel to ask general questions about haskell (even some beginner's questions)?
[15:08:25] <yushyin> euprogramista: yes!
[15:08:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:08:56] <euprogramista> yushyin: tks
[15:09:19] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c)
[15:10:03] <euprogramista> I'm studying the chapter about functors-applicative-functors-and-monoids from LYAH and things are getting a bit complicated on the topic about using fmap over functions.
[15:10:36] <euprogramista> one particular thing caught my attention: "When we use fmap (+3) over Just 3, it's easy to..."
[15:11:05] <euprogramista> so I tried to just check the type of `:t fmap (*3) Just`
[15:11:18] <euprogramista> which is `fmap (*3) Just :: Num (Maybe a) => a -> Maybe a`
[15:11:34] <euprogramista> I got confused about what is this `Num (Maybe a)`
[15:11:55] <kuribas> :t Just --euprogramista
[15:11:56] <lambdabot> a -> Maybe a
[15:11:57] <euprogramista> I understand what could be `Num a` or `Maybe a`
[15:12:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:12:30] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 272 seconds)
[15:12:33] <kuribas> euprogramista: it's trying to do (*3) over a (Maybe a).
[15:13:01] <kuribas> euprogramista: you are "fmapping" over the function Just, not over the Maybe type.
[15:13:04] <euprogramista> kuribas: so how can I apply (*3) to (Maybe a)?
[15:13:15] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:13:48] <euprogramista> if I try to make this work in my head I think that it woud be the same as trying to do ((Just 1) * 3) which wouldn't work
[15:13:53] <kuribas> :t fmap (*3) (Just 2)
[15:13:54] <lambdabot> Num b => Maybe b
[15:13:58] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c) (Remote host closed the connection)
[15:14:10] <romesrf> :t fmap
[15:14:11] <lambdabot> Functor f => (a -> b) -> f a -> f b
[15:14:19] <romesrf> (a -> b) -> (f a -> f b)
[15:14:24] <euprogramista> right... but how can I, as an example, use (fmap (*3) Just) ?
[15:14:34] <romesrf> a function from a to b becomes a function from Maybe a to Maybe b
[15:14:40] <romesrf> :t (*3)
[15:14:41] <lambdabot> Num a => a -> a
[15:14:44] *** Quits: arjun (~arjun@user/arjun) (Ping timeout: 256 seconds)
[15:14:45] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[15:14:49] <romesrf> :t fmap @Maybe (*3)
[15:14:50] <lambdabot> error:
[15:14:50] <lambdabot>     Pattern syntax in expression context: fmap@Maybe
[15:14:50] <lambdabot>     Did you mean to enable TypeApplications?
[15:15:06] <romesrf> :t fmap (*3) :: (Maybe a -> Maybe b)
[15:15:07] <lambdabot> error:
[15:15:07] <lambdabot>     • Couldn't match type ‘a1’ with ‘b1’
[15:15:07] <lambdabot>       ‘a1’ is a rigid type variable bound by
[15:15:10] <kuribas> euprogramista: because "Just" is a function, so you are fmapping over the function.
[15:15:55] <romesrf> when you fmap (*3), the function Int -> Int becomes Maybe Int -> Maybe Int
[15:16:06] <romesrf> which you can then apply to any (Maybe Int) to get another Maybe Int
[15:16:22] <euprogramista> hmm... I think that this makes sense to me now
[15:16:37] <romesrf> euprogramista: but I would also recommend seeing the fmap instance of Maybe
[15:16:42] <kuribas> :t fmap (+1) (*3)
[15:16:43] <lambdabot> Num b => b -> b
[15:16:55] <romesrf> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Base.html#line-1030
[15:16:57] <kuribas> > (fmap (+1) (*3)) 6
[15:16:58] <lambdabot>  19
[15:17:04] <euprogramista> so the Num (Maybe a) is to tell that I'm gonna get a Maybe where a is a Num?
[15:17:48] <euprogramista> Id like to test this function
[15:18:03] <euprogramista> (fmap (*3) Just) 10
[15:18:04] <romesrf> euprogramista: No, you only got Num (Maybe a) because you applied fmap to a function rather than to a maybe value
[15:18:17] <euprogramista> > (fmap (*3) Just) 10
[15:18:18] <lambdabot>  error:
[15:18:18] <lambdabot>      • No instance for (Num (Maybe Integer))
[15:18:18] <lambdabot>          arising from a use of ‘e_1310’
[15:19:04] <romesrf> `fmap (*3) Just` :: (Num (Maybe a) => a -> Maybe a) -- the constraint here indicates that the function is a -> Maybe a as long as there is an instance Num (Maybe a)
[15:19:42] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[15:19:56] <romesrf> euprogramista: the thing about fmap is that it works for any functor, not just Maybes, that's why you didn't get a type error when you did (fmap (*3) Just) instead of (fmap (*3) (Just 2))
[15:20:01] <romesrf> :t Just
[15:20:03] <lambdabot> a -> Maybe a
[15:20:20] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:20:31] <romesrf> (a -> Maybe a) is a function, and functions are functors (instance Functor ((->) a))
[15:20:50] <romesrf> so if you think about fmap of the function functor instead of mayb
[15:20:58] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:21:20] <romesrf> fmap of maybe is :: (a -> b) -> Maybe a -> Maybe b
[15:21:55] <euprogramista> so not necessarily just because I can use fmap with any functor it doesn't mean that what I get will work in practical means?
[15:22:14] <kuribas> euprogramista: Note that technically any type could be a Num instance, for example functions.  Luckily functions don't have a Num instance.  That's why this doesn't give a type error.
[15:22:18] <kuribas> (but should give one).
[15:22:22] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[15:22:52] <kuribas> > (fmap (*(3::Int)) Just) 10 -- restricting the literal to Int solves this.
[15:22:54] <lambdabot>  error:
[15:22:54] <lambdabot>      • Couldn't match type ‘Maybe t0’ with ‘Int’
[15:22:54] <lambdabot>        Expected type: t0 -> Int
[15:24:12] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Ping timeout: 250 seconds)
[15:24:28] <romesrf> euprogramista: e.g. using "+" to sum two strings in javascript won't sum de ascii value of the strings but rather join the two strings together
[15:24:29] <kuribas> Well, in your case, the literal would be a "Maybe a" value.
[15:24:43] <romesrf> euprogramista: so when using fmap you need to think about the semantics of what you're using it on
[15:25:15] *** Quits: ccntrq (~Thunderbi@2a01:c22:8509:dc00:953c:9b71:e9ca:822e) (Ping timeout: 268 seconds)
[15:25:17] <romesrf> fmap (any_function) has type Functor f => f a -> f b
[15:25:28] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:25:40] <romesrf> what that function now does depends on the implementation of fmap for the specific functor you're using
[15:26:45] *** Joins: ccntrq (~Thunderbi@2a01:c23:941d:5a00:c6ed:e12e:1f74:6b4a)
[15:27:43] *** Joins: acidjnk (~acidjnk@p200300d0c7049f95a8560519e34e318b.dip0.t-ipconnect.de)
[15:29:36] *** Joins: ccntrq1 (~Thunderbi@2a01:c23:9136:4a00:eba3:c941:ef08:4dc0)
[15:30:42] *** Quits: kaph (~kaph@an-19-184-70.service.infuturo.it) (Read error: Connection reset by peer)
[15:31:08] *** Quits: ccntrq (~Thunderbi@2a01:c23:941d:5a00:c6ed:e12e:1f74:6b4a) (Ping timeout: 250 seconds)
[15:31:09] *** ccntrq1 is now known as ccntrq
[15:32:10] <euprogramista> okay... maybe this can also help me to better understand it: When I see something like this -> f :: (Eq a) => a -> a -> Bool. I can read it as the function takes two arguments and they have to be a member of Eq. How can I properly read Num (Maybe a) => a -> Maybe a?
[15:32:26] <euprogramista> sorry that it's taking long for me to properly understand
[15:33:44] <kuribas> euprogramista: Don't worry.  It means the function can take a value of type `a` into a value of type `Maybe a`, but only as long as an instance `Maybe a` for Num exists.
[15:34:07] <kuribas> euprogramista: in practice it doesn't exist, but type classes are open, so someone "could" define it.
[15:34:43] <romesrf> f :: Eq a => a -> a -> Bool is read "f is a function that forall types a that satisfy the constraint `Eq a`, a -> a -> Bool"
[15:35:02] *** Quits: coot (~coot@213.134.190.95) (Remote host closed the connection)
[15:35:21] <romesrf> which means you can call this function with any type that instances Eq
[15:35:26] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[15:36:02] <romesrf> Num (Maybe a) => a -> Maybe a is a function that forall 'a's such that (Maybe a) is an instance of Num, takes an a and returns Maybe a
[15:36:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[15:36:39] <romesrf> however, by default, there isn't any `a` that can make that be true
[15:37:06] <romesrf> you could define in your code something like `instance Num (Maybe Int)`
[15:37:21] <romesrf> so if you called that function with an Int, it would work because (Maybe Int) would be an instance of Num
[15:37:51] <kuribas> euprogramista: constraints don't have to be on type variables, they can be on any type.
[15:38:01] <romesrf> however, by default no instance like that is defined, so even though that function exists, it can't really be called because there is no satisfying `a`
[15:38:42] <romesrf> but if you create such instance of (Num (Maybe Int)), you'd be able to call that function with a == Int
[15:38:48] <euprogramista> omg I think I get it now
[15:38:54] <romesrf> euprogramista: :P
[15:39:02] <euprogramista> when I run this:
[15:39:07] <euprogramista> > :info Num
[15:39:09] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[15:39:12] <albet70> is there a library in haskell like pandas in python? for excel data
[15:39:15] <romesrf> :info Num
[15:39:21] *** Quits: Philos86 (~Philos86@38.80.235.160) (Ping timeout: 256 seconds)
[15:39:22] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[15:39:23] <romesrf> % :info Num
[15:39:24] <yahb> romesrf: type Num :: * -> Constraint; class Num a where; (+) :: a -> a -> a; (-) :: a -> a -> a; (*) :: a -> a -> a; negate :: a -> a; abs :: a -> a; signum :: a -> a; fromInteger :: Integer -> a; {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}; -- Defined in `GHC.Num'; instance Num DiffTime -- Defined in `time-1.9.3:Data.Time.Clock.Internal.DiffTime'; instance Num NominalDiffTime
[15:39:29] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[15:39:40] <euprogramista> I can see that there is no instance for Maybe
[15:39:54] <romesrf> euprogramista: yeah!
[15:39:56] <euprogramista> the :info Num proves exactly what you folks are saying
[15:40:04] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:40:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Ping timeout: 240 seconds)
[15:40:13] <euprogramista> great! thanks a lot for walking me through this folks
[15:40:22] <romesrf> euprogramista: good luck keep up
[15:40:34] <romesrf> it only gets more fun :D
[15:40:39] <euprogramista> this channel is a bless :D studying haskell alone is hard
[15:41:04] <romesrf> posting questions on discourse also works
[15:41:15] <romesrf> discourse.haskell.org
[15:41:22] <euprogramista> :interesting
[15:41:46] <romesrf> it's good that the questions are more "searchable" there, you might find things other people have asked interesting too
[15:42:24] <kuribas> euprogramista: hint: many functions in haskell are actually very general, and this can be confusing for beginners.  Put type annotations on such functions or values to make the types easier.
[15:42:37] <kuribas> :t foldr
[15:42:38] <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
[15:42:55] <kuribas> :t foldr :: (a -> b -> b) -> b -> [a] -> b
[15:42:56] <lambdabot> (a -> b -> b) -> b -> [a] -> b
[15:43:11] <euprogramista> nice I didn't know about discourse. I've been usually searching on stackoverflow but answers are usually full of theory that I can't follow at the moment.
[15:43:35] <kuribas> Which is in fact good practice for anyone have problem with difficult types errors.
[15:44:12] *** Joins: Topsi (~Tobias@dyndsl-095-033-023-104.ewe-ip-backbone.de)
[15:44:23] <euprogramista> kuribas: what do you mean by type annotation?
[15:44:56] <euprogramista> sorry I should have googled this one (was just convenient since I'm already here)
[15:45:01] <kuribas> euprogramista: (value :: type)
[15:45:16] <kuribas> it constrains the value to the type.
[15:45:23] <euprogramista> ah got it
[15:45:30] <kuribas> > 3 :: Int
[15:45:31] <lambdabot>  3
[15:45:36] <kuribas> :t 3
[15:45:37] <lambdabot> Num p => p
[15:45:40] <kuribas> :t 3 :: Int
[15:45:41] <lambdabot> Int
[15:45:49] <euprogramista> in the LYAH it calls it class constraint instead of type annotation
[15:46:26] <euprogramista> but I guess class constraint is just one way to call it
[15:46:27] <kuribas> no, the class constraint is the part before "=>"
[15:46:50] <kuribas> type annotation is ":: <some type>"
[15:47:05] <kuribas> they are different things.
[15:47:11] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[15:48:16] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:49:30] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[15:49:35] <euprogramista> kuribas: thanks for helping
[15:51:20] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[15:51:49] <kuribas> np
[15:51:56] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:52:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[15:53:24] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a)
[15:53:32] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[15:53:33] <albet70> is there library to read and write excel file?
[15:58:47] <geekosaur> hackage shows several in various states of support and completeness
[16:01:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[16:01:37] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[16:02:00] *** Joins: euprogra1ista (~euprogram@ip-103-85-36-164.syd.xi.com.au)
[16:03:48] *** Quits: euprogramista (~euprogram@185.218.127.6) (Ping timeout: 272 seconds)
[16:04:31] <lortabac> albet70: I have used xlsx, it's not ideal but it did the job for me
[16:04:39] <lortabac> @hackage xlsx
[16:04:39] <lambdabot> https://hackage.haskell.org/package/xlsx
[16:05:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[16:05:35] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[16:07:36] *** Quits: Logio (em@kapsi.fi) (Ping timeout: 272 seconds)
[16:07:44] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[16:09:09] *** Joins: kongsheng (~kongsheng@71.28.228.142)
[16:09:44] *** Parts: euprogra1ista (~euprogram@ip-103-85-36-164.syd.xi.com.au) ()
[16:11:18] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[16:11:29] *** Parts: adamcstephens (~m-2jewo5@129.153.21.50) ()
[16:11:30] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[16:11:43] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:11:44] <albet70> ok
[16:12:08] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[16:12:45] *** Joins: Logio (em@kapsi.fi)
[16:16:25] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[16:16:43] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[16:17:14] *** Quits: fendor_ (~fendor@91.141.34.180.wireless.dyn.drei.com) (Remote host closed the connection)
[16:18:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:19:14] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[16:20:04] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[16:20:19] *** Joins: re101-fousek-71 (~re101-fou@196.43.170.89)
[16:21:15] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[16:24:52] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:25:52] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[16:28:02] *** AlexNoo_ is now known as AlexNoo
[16:30:45] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[16:30:49] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[16:31:16] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[16:32:47] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[16:35:46] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[16:36:26] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[16:39:44] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[16:39:44] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[16:40:17] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[16:42:03] <Topsi> I get the following error with a nightly GHC and a project created with stack new: https://paste.tomsmeding.com/2LsGbbDm
[16:42:09] <Topsi> There is a similar issue, which was apparently worked around by adding cabal to the setup-depends field. https://github.com/commercialhaskell/stack/issues/5110
[16:42:14] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[16:42:15] <Topsi> More specific to my problem I have found an issue where they talk about adding a setup-depends field with Cabal-syntax >= 3.7 https://github.com/haskell/cabal/issues/7974
[16:42:21] <Topsi> Unfortunately this does not work. https://paste.tomsmeding.com/8pOtxs3L
[16:42:22] <Topsi> What is StackSetupShim/how can I supply it the Cabal-syntax package?
[16:43:23] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[16:44:28] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:f90c:4552:5c2e:aa7d)
[16:46:11] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[16:46:36] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[16:47:33] *** Quits: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net) (Remote host closed the connection)
[16:47:37] *** Quits: re101-fousek-71 (~re101-fou@196.43.170.89) (Quit: Client closed)
[16:48:29] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[16:48:57] <merijn> Topsi: Cabal-syntax 3.7 doesn't exist yet
[16:49:10] <merijn> or rather, it's the current HEAD branch of Cabal/cabal-install
[16:49:34] *** Quits: acidjnk (~acidjnk@p200300d0c7049f95a8560519e34e318b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:50:16] <merijn> Topsi: So that example cabal file has a bunch of dependencies restricting to unreleased versions of packages
[16:50:37] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[16:50:40] *** Quits: worldhelloworld2 (~quassel@vmi275462.contaboserver.net) (Read error: Connection reset by peer)
[16:50:51] *** Joins: c1utt4r (~c1utt4r@vmi275462.contaboserver.net)
[16:50:54] <Topsi> yes. but I supply the current HEAD branch of Cabal if you look at my extra-deps https://paste.tomsmeding.com/8pOtxs3L
[16:51:38] *** Joins: worldhelloworld2 (~quassel@vmi275462.contaboserver.net)
[16:53:44] <merijn> Topsi: It declares cabal-version 1.12, but also uses custom-setup which didn't exist until 1.24
[16:54:43] <Topsi> what declares cabal-version 1.12?
[16:55:08] <Topsi> ahh, at the very top
[16:55:49] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 240 seconds)
[16:56:01] <merijn> In general mixing stack with GHC head seems like a recipe for pain, though
[16:56:47] <Topsi> it's the same error with cabal-version 1.24
[16:57:08] <merijn> Since stack is under maintained and lagging Cabal by quite a bit
[16:57:37] <merijn> The most recent stack release demands Cabal 3.2, so it doesn't support 3.4 or 3.6 and I certainly wouldn't hold my breath for support for 3.7/3.8
[16:57:50] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[16:57:50] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[17:03:11] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[17:08:07] *** Joins: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[17:09:01] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[17:11:34] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[17:13:10] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914)
[17:15:29] <maerwald> you'll likely run out of air
[17:16:17] *** Joins: benin (~benin@183.82.26.94)
[17:17:35] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[17:21:43] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[17:23:56] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[17:26:39] *** Joins: jespada (~jespada@148.252.132.116)
[17:26:41] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[17:28:10] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[17:31:15] *** Joins: arjun (~arjun@user/arjun)
[17:31:53] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:ecfc:ebe1:b77a:f914) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:32:36] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:f90c:4552:5c2e:aa7d) (Read error: Connection reset by peer)
[17:34:16] *** Quits: ishutin (~ishutin@87-97-12-221.pool.digikabel.hu) (Read error: Connection reset by peer)
[17:34:20] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[17:34:58] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[17:36:38] <exarkun> is it possible to implement unsafePerformIO in Haskell?  Or must it be implemented by the runtime at a lower level?
[17:36:56] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[17:37:15] *** Joins: ishutin (~ishutin@92-249-150-241.static.digikabel.hu)
[17:37:25] <merijn> exarkun: Define "implement in" and "haskell"
[17:37:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[17:37:36] <geekosaur> it *is* implemented in Haskell, although it requires MagicHash extension
[17:37:51] <Lycurgus> like writing a compiler in the lang compiled
[17:37:52] <exarkun> I tried to follow links from hoogle to the implementation and got a dead end.  Where is the implementation?
[17:38:55] <Lycurgus> ur meaning ghc when you say Haskell
[17:39:11] <exarkun> merijn: That sounds hard :/  I'm probably less interested in exactly the question I asked and more interested in learning more about how IO works, I guess.
[17:39:14] <geekosaur> https://downloads.haskell.org/ghc/8.10.7/docs/html/libraries/base-4.14.3.0/src/GHC-IO-Unsafe.html#unsafePerformIO
[17:39:33] <merijn> exarkun: That's mostly an implementation detail of GHC. There's several papers on it
[17:39:36] <geekosaur> and it does indeed provide a clue as to how IO works in ghc
[17:39:41] <merijn> exarkun: Relevant are the ghc-prim package
[17:39:44] <merijn> @hackage ghc-prim
[17:39:44] <lambdabot> https://hackage.haskell.org/package/ghc-prim
[17:39:55] <merijn> exarkun: And the "Lazy Functional State Threads" paper
[17:39:58] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:40:06] <merijn> exarkun: Which explains both the ST monad and IO
[17:40:10] <merijn> exarkun: Or rather
[17:40:21] <merijn> exarkun: It explains the implementation used by GHC
[17:41:04] <exarkun> Cool.  This looks like a bunch of good reading material.
[17:41:24] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[17:41:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Ping timeout: 240 seconds)
[17:43:09] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[17:43:29] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[17:45:01] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[17:47:59] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[17:49:46] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[17:51:08] *** Quits: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru) (Ping timeout: 256 seconds)
[17:52:25] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:53:48] <merijn> exarkun: Specifically, the paper I mentioned is about "how do we enforce an ordering of operations in a lazy setting?" and that is, of course, precisely what IO does (enforce ordering/sequencing of side-effects)
[17:54:28] <dminuoso> 15:07:36       geekosaur | it *is* implemented in Haskell, although it requires MagicHash extension
[17:54:36] <dminuoso> Mmm, it is *not* implemented in Haskell
[17:54:38] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[17:54:40] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[17:55:03] <dminuoso> It is implemented by GHC Haskell - the relevant point is, you couldn't conjure this yourself.
[17:55:14] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[17:55:15] <merijn> exarkun: Turns out IO and ST are both built on top of the same underlying abstractions
[17:56:08] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[17:56:14] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[17:56:17] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[17:56:50] <exarkun> That's kinda neat.  I'm not sure if I would have guessed it, probably not, but I can convince myself that I can sort of see why it would be.
[17:56:50] <dminuoso> Unless you argue that you can implement it in terms of the GHC API, but Im not entirely sure whether that is saying much
[17:58:23] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[17:58:56] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[17:59:32] *** Quits: akegalj (~akegalj@78-3-81-31.adsl.net.t-com.hr) (Quit: leaving)
[18:03:02] *** Joins: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru)
[18:05:37] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[18:06:47] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:07:25] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[18:07:26] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:7996:fa87:bd3d:81c8)
[18:09:34] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:10:08] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[18:10:14] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[18:11:06] *** Joins: infandum (~user@205.189.58.89)
[18:14:29] *** ProfSimm is now known as anomal
[18:15:32] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[18:15:48] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[18:16:08] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[18:16:38] <infandum> I am running into the following error: stats.csv: openBinaryFile: resource exhausted (Too many open files). I thought it would be pretty straightforward, as the file it tried to open was just being checked if it existed with Turtle's du (to check if existing and if not 0 bytes). evaluating with Control.Exception that did not work, so I replaced it with Turtle's testfile, that did not work either. Here is the only time it is used: skip
[18:16:38] <infandum> <- (&&) <$> (pure $ skipFlag) <*> (TU.testfile "stats.csv"); when (not skip) $ process otherFile
[18:16:38] <infandum>  
[18:17:02] <infandum> Sorry, broke a line apparently: skip <- (&&) <$> (pure $ skipFlag) <*> (TU.testfile "stats.csv"); when (not skip) $ process otherFile
[18:17:02] <infandum>  
[18:19:29] <infandum> Many of these files are being checked, so I figured that they weren't being closed, but now it's just checking for existence, what would the problem be?
[18:22:15] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:22:47] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:22:47] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:22:48] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[18:23:16] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:24:17] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[18:25:17] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:26:21] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:26:56] *** Joins: bahamas (~lucian@84.232.140.52)
[18:27:46] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:31:45] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:33:34] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 250 seconds)
[18:33:37] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:34:02] *** Joins: vglfr (~vglfr@88.155.117.136)
[18:34:10] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[18:34:10] *** Quits: jespada (~jespada@148.252.132.116) (Read error: Connection reset by peer)
[18:35:01] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:f90c:4552:5c2e:aa7d)
[18:35:22] *** Quits: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Quit: Client closed)
[18:35:32] *** Quits: ccntrq (~Thunderbi@2a01:c23:9136:4a00:eba3:c941:ef08:4dc0) (Remote host closed the connection)
[18:35:50] *** Joins: ccntrq (~Thunderbi@2a01:c23:9136:4a00:eba3:c941:ef08:4dc0)
[18:36:35] *** Quits: benin (~benin@183.82.26.94) (Quit: The Lounge - https://thelounge.chat)
[18:36:38] <infandum>  I wonder if it is coincidence: using inline-r, other files are being written. I wonder if the problem is actually there and it just happens to bug out during the haskell opening step.
[18:36:42] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[18:37:20] <dpratt> what's a good way to set up a new Haskell project? is "cabal init" still the best option? probably relevant that I'm not too interested in using stack, and I am doing this in a Nix environment
[18:37:36] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 256 seconds)
[18:38:36] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 240 seconds)
[18:39:14] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[18:40:17] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[18:40:28] <merijn> dpratt: cabal init should be fine, although I usually copy and edit a cabal file from a similar project
[18:42:37] <dpratt> ok, thanks merijn
[18:45:47] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[18:57:11] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[18:58:14] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[18:58:35] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 256 seconds)
[18:58:50] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[18:59:37] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[19:00:52] *** Quits: dschrempf (~dominik@178.251.70.207) (Ping timeout: 250 seconds)
[19:01:22] *** Joins: jespada (~jespada@148.252.132.116)
[19:01:24] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[19:01:25] *** Joins: vysn (~vysn@user/vysn)
[19:02:29] *** Quits: anomal (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:02:48] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:03:30] *** Quits: kongsheng (~kongsheng@71.28.228.142) (Quit: Client closed)
[19:17:24] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:17:42] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:19:43] <Benzi-Junior> hey, doing a coding challenge, and I'm wondering if there is something I missed, I'm given  "data Agent msg a" and asked to provide a "instance Functor (Agent msg)" and I'm struggling a bit with the lack of a constructor, or in fact any implementation of "Agent"
[19:22:03] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 268 seconds)
[19:22:07] <Benzi-Junior> should I just assume that they forgot to ask for an implementation or is there  a reasonable way of working with the data without an associated constructor ?
[19:22:29] <merijn> Benzi-Junior: As you describe it, it sounds impossible
[19:22:52] <geekosaur> do they not even tell you shat this data should be doing?
[19:23:01] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:94a8:4010:5291:ba96) (Quit: WeeChat 2.8)
[19:23:11] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[19:23:11] <[exa]> types without constructors are possible but the task doesn't seem to be possible to do in a sane way
[19:23:24] <[exa]> except ofcourse for BS like `fmap _ = undefined`
[19:23:41] <merijn> I mean, I suppose if there is no constructor for Agent, then the implementation is trivial ;)
[19:24:34] <Benzi-Junior> geekosaur, "Agent msg a" is an abstract process that can send and receive broadcast messages of type msg and will eventually return a result of type a 
[19:24:59] <geekosaur> oh brother
[19:25:07] <Benzi-Junior> oh wait, the next line tells me to "Define the type such that Agent msg is a free monad" 
[19:25:16] <geekosaur> ah, there you gothen
[19:25:21] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[19:25:46] <geekosaur> once you do that, the Functor instance should be pretty obvious
[19:25:58] <geekosaur>  free monad is, at least
[19:26:01] <Benzi-Junior> I just missed it because it's labeled "TODO" which it seemed was verie astutely done throughout the document
[19:26:10] <geekosaur> *assuming you know what a free monad is, at least
[19:26:23] <Benzi-Junior> ye I tried starting this a while back and it seemed... to simple 
[19:26:27] <Benzi-Junior> until it was impossible 
[19:27:38] <Benzi-Junior> ok very important question, which is a better constructor name for "data Agent msg a", Bond or Smith ?
[19:27:39] *** Quits: jespada (~jespada@148.252.132.116) (Read error: Connection reset by peer)
[19:29:38] <kuribas> Archer?
[19:30:07] <Franciman> ^^
[19:31:18] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[19:32:48] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[19:32:52] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:33:52] *** Joins: jespada_ (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[19:34:14] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[19:34:54] *** Quits: canta (~canta@user/canta) (Quit: WeeChat 2.8)
[19:35:06] *** Joins: canta (~canta@user/canta)
[19:37:00] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Ping timeout: 240 seconds)
[19:38:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[19:41:00] *** shapr` is now known as shapr
[19:42:19] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:43:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Ping timeout: 240 seconds)
[19:44:42] <SrPx> what is currently the fastest int map implementation for insertion, deletion and lookup?
[19:44:49] <SrPx> specially lookup
[19:45:14] <geekosaur> IntMap is usually fastest
[19:45:32] <Benzi-Junior> ok, so for a "instance Applicative (Agent msg)" I'm struggling, how do I implement pure, I understand how I could do it if there was an "Default msg" assertion
[19:45:48] *** Quits: ishutin (~ishutin@92-249-150-241.static.digikabel.hu) (Ping timeout: 240 seconds)
[19:46:11] <geekosaur> Benzi-Junior, did you understand "free monad"?
[19:46:19] <SrPx> geekosaur: you sure? i think i've read a paper a few years ago about an alternative that is faster for lookups, but slower for merging
[19:46:25] <SrPx> can't remember what it was though
[19:46:56] <geekosaur> SrPx, I was considering based on what we actually have, not on papers that might lack usable implementations
[19:47:07] <SrPx> I see
[19:47:14] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:47:22] *** Quits: jespada_ (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Ping timeout: 272 seconds)
[19:47:52] *** Joins: ishutin (~ishutin@178-164-208-216.pool.digikabel.hu)
[19:48:01] <geekosaur> Benzi-Junior, a "free x" means you have a constructor corresponding to each operation on "x". so for a free monad you have a constructor corresponding to pure/return and another corresponding to bind/>>=
[19:48:03] *** Joins: bahamas (~lucian@84.232.140.52)
[19:48:19] <geekosaur> (this is an oversimplification but close enough for this, I think)
[19:49:01] <geekosaur> this whole thing is a bit problematic because one would assume if someone knew about free monads, they'd already know about functors…
[19:50:49] *** Joins: nuh^ (~nuh@50.232.121.75)
[19:51:11] <Benzi-Junior> geekosaur, I know what free constructions are in category theory, but less so in practice 
[19:51:32] *** Quits: ccntrq (~Thunderbi@2a01:c23:9136:4a00:eba3:c941:ef08:4dc0) (Remote host closed the connection)
[19:51:38] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[19:51:50] *** Joins: ccntrq (~Thunderbi@2a01:c23:9136:4a00:eba3:c941:ef08:4dc0)
[19:52:53] <Benzi-Junior> geekosaur, if I understand you correctly, "data Agent msg a" should have at least 2 constructors, one that takes a "msg" and another to take an "a" 
[19:53:35] <geekosaur> not quite, as I understand it from the problem statement. (Agent msg) is the free monad, not Agent itself
[19:54:09] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[19:54:12] *** Quits: In0perable (~PLAYER_1@fancydata.science) (Quit: All your buffer are belong to us!)
[19:54:17] <geekosaur> sadly this means it's not really defined enough to dothis right. or put otherwise, the TODO you mentioned was a warning that the problem set isn't fully written yet
[19:54:42] <geekosaur> which makes it really hard to do anything useful
[19:55:53] <Benzi-Junior> huh
[19:56:20] <geekosaur> they *really* needed to show you the full definition of Agent
[19:57:45] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Read error: Connection reset by peer)
[19:57:45] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[19:57:45] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[19:58:07] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[19:58:53] <geekosaur> but as I said, the TODO indicates that whoever wrote the problem set hadn't gotten as far as writing that yet; someone learning how to write Functor instances should not be expected to know what a free monad is yet
[19:59:04] *** Joins: hololeap (~hololeap@user/hololeap)
[19:59:10] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[19:59:18] <geekosaur> much less how to write one when the monad instance is on (Agent msg) instead of just Agent
[19:59:44] <geekosaur> (which you can tell because they tell you the Functor instance is on (Agent msg))
[20:00:16] <geekosaur> really tempted to say go find a different problem set to work on
[20:02:01] <Benzi-Junior> see that really is what stumped me, it seemed to be trivial until it feels like an assumption of "Default msg" is needed
[20:03:24] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[20:03:56] <geekosaur> it's not an assumption, it falls out from "free monad"
[20:04:04] *** Quits: ccntrq (~Thunderbi@2a01:c23:9136:4a00:eba3:c941:ef08:4dc0) (Remote host closed the connection)
[20:04:18] <geekosaur> like I said though, the problem set is incomplete and therefore doen't give you that
[20:07:08] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[20:08:50] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 252 seconds)
[20:13:16] *** Joins: vicfred (~vicfred@user/vicfred)
[20:15:27] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[20:15:52] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[20:16:09] <Benzi-Junior> I don't think the problem set is incomplete, it is labeled with the TODO's to indicate what the steps of the challenge are
[20:16:26] *** Quits: mbuf (~Shakthi@122.174.187.22) (Quit: Leaving)
[20:17:42] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[20:17:49] *** Joins: Midjak (~Midjak@82.66.147.146)
[20:18:20] <monochrom> No one has actually seen the original problem statement verbatim unabridged, right?
[20:21:33] *** Quits: c1utt4r (~c1utt4r@vmi275462.contaboserver.net) (Remote host closed the connection)
[20:21:43] <Franciman> i miss do notation in my sml journey :(
[20:21:56] <Franciman> i'm writing my parser
[20:22:04] <Franciman> and have to pass some state on
[20:22:23] <monochrom> Use a ref >:)
[20:22:31] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[20:22:51] *** Joins: c1utt4r (~c1utt4r@vmi275462.contaboserver.net)
[20:23:32] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 240 seconds)
[20:23:39] <Franciman> yup
[20:25:18] <monochrom> Before do-notation, people wrote each line as "foo a b    >>= \x ->", and aligned the >>='s.
[20:25:35] <Franciman> oh, there was an haskell without do notation?
[20:25:50] <monochrom> I think yes.
[20:26:00] <Franciman> well i mean, without do notation but monads were being used*
[20:26:16] *** Joins: ub (~Thunderbi@p200300ecdf3be98f4574cf7817efb211.dip0.t-ipconnect.de)
[20:26:18] <monochrom> I think yes.
[20:26:48] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[20:26:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[20:28:06] <Franciman> :O
[20:28:29] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:28:47] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Remote host closed the connection)
[20:30:17] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a) (Ping timeout: 252 seconds)
[20:32:42] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[20:32:58] *** Joins: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net)
[20:34:03] *** Quits: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[20:37:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Remote host closed the connection)
[20:43:10] *** Joins: Akiva (~Akiva@user/Akiva)
[20:43:16] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[20:43:22] <Benzi-Junior> geekosaur, when you say the full definition of Agent, do you mean the operations that it needs to support ?
[20:43:53] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:43:58] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[20:44:02] <geekosaur> as you discovered and merijn also noted, you can't write a Functor instance at all without the full definition of Agent
[20:44:28] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::45ee)
[20:44:37] <geekosaur> and just knowing that (Agent msg) is a Functor, or even that it's a free Monad, isn't enough to tell you what to do with msg
[20:45:46] <Benzi-Junior> ok, thanks, 
[20:46:09] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[20:46:20] <Benzi-Junior> makes me feel better for getting stmped by it 
[20:47:54] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[20:49:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:53:11] *** Joins: tubogram4 (~tubogram@user/tubogram)
[20:53:46] *** Joins: vysn (~vysn@user/vysn)
[20:55:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[20:56:34] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[20:57:15] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:57:34] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[20:57:39] *** Joins: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net)
[20:57:49] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[20:58:41] *** Joins: bahamas (~lucian@84.232.140.52)
[21:02:06] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[21:02:52] *** Joins: k8yun (~k8yun@user/k8yun)
[21:03:22] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[21:04:48] *** Quits: michalz (~michalz@185.246.204.77) (Read error: No route to host)
[21:05:22] *** Joins: michalz (~michalz@185.246.204.72)
[21:05:24] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[21:06:50] <dpratt> the readme for hpack says that cabal2nix supports package.yaml files; assuming I have a setup involving cabal2nix, does this imply that I would not need to separately run hpack to create/update the project cabal file?
[21:07:27] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[21:07:57] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[21:08:50] *** Quits: kadobanana (~mud@user/kadoban) (Remote host closed the connection)
[21:09:08] *** Quits: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[21:09:15] *** Joins: kadobanana (~mud@user/kadoban)
[21:12:42] *** Joins: Guest|24 (~Guest|24@cpc84763-aztw28-2-0-cust94.18-1.cable.virginm.net)
[21:13:01] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[21:13:21] *** Quits: Guest|24 (~Guest|24@cpc84763-aztw28-2-0-cust94.18-1.cable.virginm.net) (Client Quit)
[21:16:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:17:59] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[21:18:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:18:26] *** Joins: econo (uid147250@user/econo)
[21:18:26] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:20:50] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Remote host closed the connection)
[21:21:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[21:23:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:25:31] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[21:25:40] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[21:26:53] *** Joins: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net)
[21:26:54] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[21:27:57] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[21:30:19] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[21:30:48] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[21:31:47] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[21:32:10] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[21:33:16] *** Quits: ishutin (~ishutin@178-164-208-216.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:33:29] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[21:35:09] *** Joins: ishutin (~ishutin@178-164-235-213.pool.digikabel.hu)
[21:36:32] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[21:36:57] *** Joins: zebrag (~chris@user/zebrag)
[21:40:18] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[21:41:04] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[21:42:08] *** Joins: simendsjo (~user@84.211.91.241)
[21:43:18] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[21:47:57] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[21:50:34] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[21:50:49] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[21:53:11] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[21:53:14] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[21:53:57] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[21:56:11] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[21:57:24] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Ping timeout: 240 seconds)
[21:58:07] *** Joins: k8yun (~k8yun@user/k8yun)
[21:58:55] *** Joins: coot (~coot@213.134.190.95)
[22:00:34] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[22:02:37] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[22:03:18] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:03:44] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[22:04:37] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:04:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[22:04:45] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[22:04:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[22:06:04] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:06:56] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-055.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[22:07:08] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:07:16] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[22:07:30] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[22:10:38] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[22:12:35] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[22:13:53] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[22:15:34] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 272 seconds)
[22:17:17] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:18:53] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[22:18:53] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:23:40] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[22:26:04] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[22:28:01] *** Quits: wrengr (~wrengr@99.34.197.35.bc.googleusercontent.com) (Remote host closed the connection)
[22:28:24] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[22:30:36] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Ping timeout: 240 seconds)
[22:31:14] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[22:32:25] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[22:33:01] *** Quits: vglfr (~vglfr@88.155.117.136) (Ping timeout: 256 seconds)
[22:34:28] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[22:35:03] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:35:37] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[22:35:54] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[22:36:36] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[22:37:50] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[22:38:22] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[22:43:43] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[22:45:05] *** Joins: wrengr (~wrengr@249.189.233.35.bc.googleusercontent.com)
[22:45:29] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[22:46:37] *** Joins: nexeq (nexeq@user/nexeq)
[22:50:04] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[22:52:20] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[22:52:41] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[22:52:51] *** Joins: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[22:54:45] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[22:54:58] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[22:56:49] *** Quits: deadmarshal_ (~deadmarsh@95.38.230.176) (Ping timeout: 256 seconds)
[22:57:16] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:f90c:4552:5c2e:aa7d) (Ping timeout: 268 seconds)
[22:58:25] *** Joins: neurocyte0917090 (~neurocyte@IP-094046072103.dynamic.medianet-world.de)
[22:58:25] *** Quits: neurocyte0917090 (~neurocyte@IP-094046072103.dynamic.medianet-world.de) (Changing host)
[22:58:25] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:58:25] *** Joins: bahamas (~lucian@84.232.140.52)
[22:59:07] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:59:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[23:01:04] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[23:02:55] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[23:05:08] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8) (Remote host closed the connection)
[23:06:18] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[23:07:08] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[23:13:06] *** Quits: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[23:17:17] *** Quits: ishutin (~ishutin@178-164-235-213.pool.digikabel.hu) (Ping timeout: 240 seconds)
[23:19:20] *** Joins: ishutin (~ishutin@fibhost-67-47-53.fibernet.hu)
[23:20:17] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:23:31] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[23:25:58] *** Joins: dschrempf (~dominik@mobiledyn-62-240-134-189.mrsn.at)
[23:26:13] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:27:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:27:31] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:27:31] *** Lord_of_Life_ is now known as Lord_of_Life
[23:34:44] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[23:36:39] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:40:15] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[23:42:38] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[23:42:57] *** Quits: kuribas (~user@ptr-25vy0ia81ze2oltltpx.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:44:10] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:2cb5:4e42:6ff9:8715)
[23:44:12] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:7996:fa87:bd3d:81c8) (Ping timeout: 240 seconds)
[23:47:01] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[23:48:21] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[23:49:18] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[23:49:31] *** Quits: dschrempf (~dominik@mobiledyn-62-240-134-189.mrsn.at) (Ping timeout: 256 seconds)
[23:51:32] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[23:52:35] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[23:53:23] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:53:32] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Remote host closed the connection)
[23:55:02] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[23:58:13] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d22:fd9a:65d6:50a8)
[23:59:34] *** Joins: liz_ (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
