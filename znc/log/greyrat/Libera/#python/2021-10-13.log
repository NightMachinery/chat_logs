[00:00:49] *** Joins: zebrag (~chris@user/zebrag)
[00:01:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[00:02:53] *** Joins: fikran (~fikran@user/fikran)
[00:04:21] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[00:06:25] *** Quits: nomic (~nomic@185.217.117.221) (Quit: Leaving)
[00:06:48] *** Joins: Telvana (~capo@user/telvana)
[00:08:03] *** Joins: Nspace (~Nspace@user/nspace)
[00:11:13] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[00:11:49] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 252 seconds)
[00:12:39] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[00:13:01] *** Joins: kenoba (~kenoba@user/kenoba)
[00:13:36] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:14:38] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[00:18:08] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[00:18:52] *** Quits: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) (Quit: bilb_ono)
[00:19:12] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:19:32] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[00:19:42] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[00:19:58] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 260 seconds)
[00:20:11] *** Joins: SlaveGeek334269 (~SlaveGeek@179.61.228.72)
[00:20:35] *** Quits: magla (~gelignite@55d450ed.access.ecotel.net) (Quit: Stay safe!)
[00:21:13] *** Joins: kenoba (~kenoba@user/kenoba)
[00:24:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[00:25:38] *** Quits: stdout (~stdout@216.163.21.11) (Quit: Leaving)
[00:25:55] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[00:27:06] <madduck> I have the opposite problem of people unable to import a module: I cannot figure out how the heck Python manages to find this module of mine. I removed the .egg-link. How else could it possibly find the module?
[00:28:15] <SnoopJ> madduck, two ways to find out: 1) look at `themod.__file__` 2) turn up the verbosity of the interpreter you're using, it shows a lot of very helpful information when searching
[00:28:19] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[00:28:33] *** Joins: dez (uid92154@user/dez)
[00:28:41] <SnoopJ> the first is often a quick answer, the second is exhaustive
[00:28:51] <madduck> `themod.__file__` has the path to the module alright. I want to know how the heck Python knows about this location!
[00:28:51] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[00:28:58] *** Joins: junktext (~junktext@109.201.152.161)
[00:29:07] <SnoopJ> madduck, where is it located?
[00:29:14] <SnoopJ> if it's one of the locations in `python3 -m site`, that's how.
[00:29:41] <madduck> no, not in site path
[00:30:13] <madduck> ah yes, it is in site path
[00:30:20] <SnoopJ> :)
[00:30:21] <madduck> i had renamed it, so it wasn't found anymore.
[00:30:27] <madduck> once i move it back, it's found
[00:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[00:30:36] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:30:47] <madduck> but how does it get onto site path?
[00:30:56] <madduck> I can understand how '~/.local/lib/python3.9/site-packages' ends up there
[00:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[00:31:08] <madduck> but this is ~/misc/some/other/path/that/nobody/should/know/about!
[00:31:39] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[00:32:03] <madduck> ~/.local/lib/python3.9/site-packages//easy-install.pth
[00:32:05] <madduck> argh!
[00:32:48] <SnoopJ> there are a couple of ways, most of them detailed at https://docs.python.org/3/library/site.html#module-site
[00:33:23] <SnoopJ> easy-install is deprecated, nobody should be using it nowadays
[00:33:52] <stewie925> question:  shouldn't the 'with open("filename.txt", <mode>)` find the file in the same directory as the python script/program?
[00:34:01] <madduck> So what is the recommended way to make a git checkout available to Python? I don't want to keep installing on every change
[00:34:01] <SnoopJ> but its mechanism of action is described in the setuptools docs: https://setuptools.pypa.io/en/latest/deprecated/easy_install.html
[00:34:15] <energizer> stewie925: no, it's relative to os.cwd()
[00:34:17] <madduck> stewie925: no, it will look in the current working directory
[00:34:27] *** Quits: lyr (~lyr@user/lyr) (Quit: Ping timeout (120 seconds))
[00:34:37] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[00:34:37] <stewie925> oh hmmm
[00:34:38] <energizer> madduck: pip install -e
[00:34:41] *** Joins: lyr (~lyr@user/lyr)
[00:34:46] <madduck> energizer: that is what I did!
[00:34:58] <energizer> madduck: are you talking about a local git repo?
[00:35:02] <SnoopJ> madduck, `pip install --editable path/to/repo` if it's pip-installable and uses setup.py/setup.cfg. Or write your own .pth according to the information in the site docs, or invoke Python from that directory (the last option is what I usually do)
[00:35:26] <SnoopJ> maybe what you checked out uses easy-install :(
[00:35:31] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[00:35:46] <SnoopJ> (remember: as frustrated as you are, you do have 100% of the information in front of you; we have only what you tell us)
[00:36:40] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 260 seconds)
[00:36:51] <SnoopJ> C-API question: I have a std::ostream that I want to send out to the Python user. Is PyByteArray_FromStringAndSize() my best bet, or is there something more natural?
[00:36:54] *** Joins: Nspace (~Nspace@user/nspace)
[00:37:03] <madduck> pip install -e . definitely recreates the reasy-install.pth file
[00:37:09] *** Quits: amosbird (~amosbird@13.75.119.182) (Remote host closed the connection)
[00:37:14] *** Joins: VSpike (~johncc@2001:bc8:47ac:1a22::1)
[00:37:28] <madduck> the module has setup.py with a basic call to setuptools.setup
[00:37:29] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:37:50] *** ub is now known as ubert
[00:38:21] <SnoopJ> oh hrm, maybe FromStringAndSize() won't do the trick, I may not be able to get the underlying pointers in that buffer...
[00:38:25] *** Joins: amosbird (~amosbird@13.75.119.182)
[00:38:37] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[00:38:43] *** Quits: arinov (~arinov@188.58.26.189) (Ping timeout: 252 seconds)
[00:42:11] *** Joins: ravan__ (~ravan@user/ravan)
[00:42:41] *** Quits: dld (~davidlowr@73.61.8.17) (Ping timeout: 264 seconds)
[00:44:11] *** Joins: ravindUwU (~ravindUwU@n110-22-18-174.sun3.vic.optusnet.com.au)
[00:44:13] *** Joins: dld (~davidlowr@73.61.8.115)
[00:44:25] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[00:44:32] *** Quits: zrsm (~mrrobot@173.171.254.123) (Quit: BitchX-1.2.1-419-geaf6456 -- just do it.)
[00:44:41] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 245 seconds)
[00:44:55] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[00:44:56] *** Joins: Macuser (~Macuser@216.30.159.201)
[00:45:55] *** Quits: Barones (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b) (Ping timeout: 252 seconds)
[00:46:18] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:46:19] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[00:46:20] <newpy> if I have two dataframes indexed by date but one has missing dates, how can I quickly add the missing dates from one df to the other (nan row values is fine)
[00:47:42] <newpy> I have a kludgy sol'n using df.reindex_like(df2)+df
[00:47:48] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Read error: Connection reset by peer)
[00:48:25] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[00:49:43] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[00:49:58] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[00:50:11] *** Quits: curiosity (uid507362@user/cypris) (Quit: Connection closed for inactivity)
[00:50:45] <ravindUwU> Hiya! Is there no way to forward reference the generic type param of the base class?
[00:50:47] *** Joins: Nspace (~Nspace@user/nspace)
[00:50:52] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 252 seconds)
[00:50:52] *** ayusta is now known as ayustae
[00:51:09] <ravindUwU> class A(B[C]) with C forward-referenced?
[00:52:49] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:53:20] <stealth_> `class A(B, C)` ?
[00:53:48] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:54:06] <ravindUwU> `C` is the generic type parameter to `B`. `B` is defined as `class B(Generic[T])` where `C` is assignable to `T`.
[00:54:16] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[00:54:34] *** Quits: fanis30 (~fanis30@adsl-234.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[00:54:46] <newpy> hmm, one last pandas question, this one is really basic
[00:54:53] <ravindUwU> which (as I understand) is different from `class A(B, C)` which makes `A` inherit from both `B` and `C` stealth_
[00:54:59] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[00:55:36] <newpy> if I have a pandas dataframe indexed by date with a named column, how do I update a single value, row 0 (date '2021-01-01') column 'c' ?
[00:56:01] <newpy> I think I got it to work with df.loc[0].c = 1 but that seems wrong
[00:56:20] <newpy> sorry df.iloc[0].c = 1 is what works
[00:56:35] *** Lord_of_Life_ is now known as Lord_of_Life
[00:56:40] *** Joins: LabMonkey (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net)
[00:56:45] * aphysically was trying someone's match code online and tried to use Black habitually
[00:57:11] <stealth_> ravan__, right
[00:57:16] <stealth_> ravindUwU, ^
[00:58:14] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:48f3:3484:87aa:1496) (Ping timeout: 260 seconds)
[01:04:48] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[01:06:11] *** Joins: sudomann (~sudomann@73.183.118.9)
[01:06:55] <aphysically> https://bugs.python.org/issue45435 :thinking:
[01:07:07] *** Quits: odrling (~odrling@korone.aidoru.agency) (Quit: see you space cowboy)
[01:07:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:08:08] *** Joins: odrling (~odrling@korone.aidoru.agency)
[01:10:24] <bjs> aphysically: thinking about what
[01:11:10] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[01:11:18] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[01:11:35] <aphysically> I've seen/been told a lot of conflicting things about whether or not this FAQ stuff was a CPython quirk or a language specification
[01:11:52] <aphysically> it'd be nice if simple assignment was atomic I guess though
[01:12:15] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[01:12:21] <bjs> aphysically: it's -supposed- to be language spec,  but it's old and crusty part of the docs and implementations have moved on.  Simple assignment to a name *really should* be atomic,  otherwise too much code is broken
[01:12:39] <ravindUwU> I think I'm gonna give up on making typings work—typings just... so half-assed ugh
[01:12:48] <ravindUwU> stealth_, thanks ^^
[01:12:52] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:12:52] *** Quits: ravindUwU (~ravindUwU@n110-22-18-174.sun3.vic.optusnet.com.au) (Quit: KTHXBAI)
[01:12:59] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[01:13:07] <bjs> aphysically: What that FAQ really needs, and what I suggested to ambv / graingert is that it gets moved into the actual docs for each datatype with more careful wording of the caveats and what it means by "atomic"
[01:13:40] <madduck> If I run 'python3 -m foo', it loads module foo with __name__=='__main__'. Can I achieve the same from within another module? I.e. load it as if it was being called from the CLI?
[01:13:44] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:13:57] <bjs> aphysically: the main problem is that Python is complicated and that operations (e.g. deleting objects, comparing objects, etc) can call *back into Python*;  so the FAQs discussion of the GIL is a bit misleading in those cases.
[01:14:18] <energizer> madduck: why
[01:14:44] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[01:15:02] <madduck> because if this module.__main__ is called, and under certain conditions, I want to deflect to another module.__main__
[01:15:05] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 268 seconds)
[01:15:10] <aphysically> bjs: I think I'd be okay with most stuff not being atomic in a future GIL-less python as long as simple assignment stays atomic mostly because otherwise annoys me :^)
[01:15:35] <bjs> aphysically: it has to stay atomic because Python has no atomic assignment
[01:15:37] <energizer> madduck: no you want to define some functions and call them
[01:15:48] *** Joins: sleepr (~fredrik@user/sleepr)
[01:15:58] <madduck> I don't own the other module
[01:16:55] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[01:17:12] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[01:17:15] <aphysically> in my code I mostly just protected everything with locks and I only relied on simple assignment atomicity, but I think I still have some doubts about my understanding of atomicity in general
[01:17:32] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[01:18:05] <energizer> madduck: maybe you can do it with `runpy`
[01:18:33] <aphysically> like is it thread safe to modify attributes a and b of an instance of class c separately even without most of these atomicity guarantees? I'm pretty sure it is, but it wasn't at all obvious to me it should be the case
[01:19:01] <madduck> energizer: thank you! Will look into that
[01:19:43] <aphysically> I think it's safe, but I can imagine in my head some language where threads try to have their own copy of the entire class c for modification and then it's not safe - but python doesn't work like this I believe
[01:22:09] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 265 seconds)
[01:22:39] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[01:24:15] <newpy> I'm getting a SettingWithCopyWarning (value trying to be set on a copy of a slice from a dataframe) but it won't say which line
[01:25:48] *** Quits: dre (~dre@2001:8003:c932:c301:b1a7:f172:e0ac:f5a0) (Remote host closed the connection)
[01:25:58] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:26:08] *** Joins: dre (~dre@2001:8003:c932:c301:e309:8ed:b76f:cbc5)
[01:26:34] *** Parts: SlaveGeek334269 (~SlaveGeek@179.61.228.72) ()
[01:26:58] *** Joins: nomic (~nomic@185.217.117.221)
[01:28:23] <newpy> n/m I accidentally made a change
[01:28:26] <SnoopJ> newpy, somewhere, you are doing `df[idx] = ...` where idx is an "advanced" index, usually a Series or a Python sequence. When you access the underlying numpy data in an irregular fashion, it has no choice but to make a copy.
[01:28:54] <SnoopJ> in pandas you typically avoid that with `df.loc`
[01:28:56] <newpy> SnoopJ, ty
[01:29:25] <newpy> SnoopJ, if I have date indices and a column 'c' is df.iloc[0].c = 1 ok?
[01:29:29] *** Quits: Akuli (~Akuli@82-203-164-221.bb.dnainternet.fi) (Quit: Leaving)
[01:29:43] <newpy> it seems really wrong but I'm not sure how to set a single value
[01:29:46] *** Joins: Nspace (~Nspace@user/nspace)
[01:30:04] *** Quits: paul424 (~tom@ip-31-0-126-234.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[01:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[01:30:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:31:01] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[01:31:01] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:31:41] <SnoopJ> newpy, `df.loc[0, "c"] = 1`
[01:32:15] <newpy> SnoopJ, I get "TypeError: cannot do index indexing on <class 'pandas.core.indexes.datetimes.DatetimeIndex'> with these indexers [0] of <class 'int'>"
[01:32:22] <SnoopJ> oh, hm
[01:32:22] <newpy> since the index is a datetime
[01:32:35] <SnoopJ> newpy, well, the short answer here is "no"
[01:32:51] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:d0de:49e0:ae27:584a)
[01:33:03] <newpy> no df.iloc[0].c is not ok? or no there is no simpler way?
[01:33:07] <SnoopJ> no it's not okay
[01:33:10] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[01:33:17] <SnoopJ> for setting
[01:33:19] <SnoopJ> it's fine for accessing
[01:33:43] <QuaternionsRock> Am I stupid or does types.new_class have an insane amount of overlap with type?
[01:33:43] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[01:33:45] <SnoopJ> if you need to index the row as an integer, you'll need the column number
[01:33:59] *** Quits: junktext (~junktext@109.201.152.161) (Ping timeout: 268 seconds)
[01:34:03] <newpy> hey hey, df.loc[0,-1] worked (since 'c' is the last column)
[01:34:13] <newpy> I mean iloc
[01:34:13] <SnoopJ> QuaternionsRock, the third option is that it has a lot of overlap and it's not insane (at least not by Pythonic standards...)
[01:34:53] <SnoopJ> newpy, you could also do `df.loc[df.index[0], "c"]` which is...not awesome.
[01:35:01] <SnoopJ> but at least then the column is a little less magical
[01:35:34] <newpy> yea it would be hard to track every column #
[01:35:48] <newpy> plus I've seen certain times (maybe with views?) where the columns are printed alphabetically
[01:36:07] <QuaternionsRock> *cough* use xarray *cough*
[01:36:18] *** Joins: khrbt (~znc@user/khrbt)
[01:36:20] <newpy> QuaternionsRock, ?
[01:36:21] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[01:36:47] <QuaternionsRock> Nothing haha, if you're relatively new to python don't worry about it
[01:36:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:37:15] <QuaternionsRock> I hope that someday xarray replaces numpy and pandas but that's... unlikely
[01:37:34] *** Joins: sudomann (~sudomann@73.183.118.9)
[01:38:04] <SnoopJ> it is
[01:38:13] <SnoopJ> but it's a nice library where it fits
[01:38:26] <energizer> does xarray support heterogenous columns like pandas does?
[01:38:31] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[01:38:37] <SnoopJ> energizer, yes, and so does numpy
[01:38:57] <SnoopJ> although you wouldn't really use the word "column" with structured dtypes
[01:39:11] <energizer> no i mean
[01:39:34] <energizer> a table with each column having a different type but single type within column
[01:39:37] <energizer> aka dataframe
[01:40:02] <SnoopJ> that's what I understood you to mean, and yes, both xarray and numpy can do this (although numpy's spelling is array-y, you can usually do the same thing)
[01:40:03] <QuaternionsRock> Numpy supports that as well
[01:40:27] <SnoopJ> a pandas DataFrame is basically several ndarrays in a trenchcoat anyway
[01:40:35] <energizer> then what is the difference between xarray and pandas?
[01:41:04] <QuaternionsRock> pandas was essentially purpose-built for <=2D datasets
[01:41:09] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[01:41:29] <QuaternionsRock> whereas xarray is capable of dealing with N-D datasets with the same finesse
[01:41:33] <SnoopJ> xarray is less of a "multitool" and has less kitchen-sink syndrome going on. And yea, it does way better with high dimensional data
[01:41:35] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:41:36] <energizer> then what is pd.MultiIndex
[01:41:43] <SnoopJ> energizer, a kludge
[01:41:56] <QuaternionsRock> A crappy way to introduce >2-D data to pandas
[01:41:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:42:01] <SnoopJ> or well, it's not a kludge, but it's not directly representing multiple dimensions either
[01:42:33] *** Joins: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com)
[01:42:41] *** Joins: grooverman (~grooverma@177.102.119.40)
[01:42:58] <SnoopJ> pandas is like a data multitool, xarray is closer to things like netCDF that do a limited set of tasks extremely well
[01:43:07] <SnoopJ> (or like numpy, I guess)
[01:43:19] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[01:43:27] <QuaternionsRock> Idk if can agree with that anymore
[01:43:36] <SnoopJ> it's exactly the same implementation strategy: put it on top of numpy, it just goes about it with a different philosophy
[01:43:51] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:43:53] <QuaternionsRock> It sure used to be the case, but nowadays I don't think there's much pandas can do that xarray can't
[01:44:05] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-ad5a-d7d8-86d4-5dd6.res6.spectrum.com)
[01:44:14] <shodan45> is lxml.etree (still?) an ok module to create xml?
[01:44:14] <SnoopJ> QuaternionsRock, oh, does xarray speak SQL now?
[01:44:19] <SnoopJ> shodan45, yes, lxml is great
[01:44:35] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:45:06] <QuaternionsRock> I always forget about that lol
[01:45:24] <SnoopJ> it has been my experience that most of pandas's API is forgettable, because it is the height of "kitchen sink design"
[01:45:48] <shodan45> SnoopJ: I'm having some odd issues getting a string out of a tree I created... etree.tostring() seems to return a b"" type of string
[01:45:51] <QuaternionsRock> Yeah definitely
[01:45:52] <SnoopJ> there's just a lot going on in there, which is great when you need [that thingy] but can be terrible when you want to build on something that isn't quicksand.
[01:45:58] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-bd3d-32f8-73a8-cd11.res6.spectrum.com) (Ping timeout: 265 seconds)
[01:46:07] <QuaternionsRock> But fwiw you can read an sql into xarray with panda
[01:46:09] <SnoopJ> in pandas's defense, things have gotten a lot better, but it's still a slog
[01:46:10] <QuaternionsRock> s
[01:46:39] <SnoopJ> QuaternionsRock, it's just my favorite example of a slightly quirky thing pandas does. I don't think the SQL interface is particularly good (vs. just...using a database)
[01:46:50] *** Joins: whatsupdoc (~whatsupdo@148.64.18.230)
[01:47:03] <QuaternionsRock> xarray depends on pandas anyway, so it's not like using pandas for loading SQL adds an additional dependency
[01:47:06] <shodan45> and what's weirder is that the function I'm passing this "string" to is giving me "TypeError: a bytes-like object is required, not 'str'"
[01:47:31] <SnoopJ> QuaternionsRock, I'm not talking about "loading SQL" (whatever that means), I'm talking about Pandas being able to translate SQL queries into queries over a DataFrame
[01:47:44] <QuaternionsRock> ah
[01:47:48] <QuaternionsRock> fair enough
[01:47:54] *** Quits: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[01:47:58] <SnoopJ> shodan45, b"" is a bytes object, not a string
[01:48:16] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[01:48:27] <SnoopJ> I can't remember the particulars of the etree interface, but you might need to decode() what you're getting if the thing you're passing on to expects a string proper
[01:48:47] <SnoopJ> QuaternionsRock, I usually think of xarray as "HDF, but I hate this a lot less"
[01:48:56] <shodan45> SnoopJ: ah right. So then it's even weirder that it's complaining that it's NOT a bytes-like object
[01:49:04] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Read error: Connection reset by peer)
[01:49:05] <SnoopJ> not that HDF isn't good, but it's not a great choice for N-D data like that.
[01:49:18] <SnoopJ> shodan45, I can't really tell you much without seeing the code and/or complete error report.
[01:49:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:49:48] <shodan45> SnoopJ: I'll see what I can do
[01:50:13] *** Quits: Allegretto (~allegrett@178-164-188-250.pool.digikabel.hu) (Ping timeout: 252 seconds)
[01:50:46] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 252 seconds)
[01:50:58] *** Joins: zebrag (~chris@user/zebrag)
[01:51:10] *** Joins: SlaveGeek334269 (~SlaveGeek@1.136.105.31)
[01:51:12] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[01:51:13] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[01:51:17] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[01:51:31] <whatsupdoc> Windows 11 sucks btw
[01:51:42] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:583f:addf:6026:5042) (Quit: Textual IRC Client: www.textualapp.com)
[01:52:06] <QuaternionsRock> shodan45 depending on exactly what you're working with this *could* be wrong, but odds are you just want to convert the string x to bytes via x.encode()
[01:52:29] <QuaternionsRock> SnoopJ that's exactly the perception that I wish xarray could shake
[01:53:56] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[01:54:19] <QuaternionsRock> Yes, pandas has a ridiculous amount of miscellaneous tools, but in at least 95% of cases people would be better served by xarray than pandas
[01:54:49] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[01:55:50] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[01:56:11] <QuaternionsRock> I also despise many outward-facing uses of ndarrays in libraries, where you are effectively expected to just *know* which axis is which with no concrete guarantees that it won't change in the future
[01:56:59] <QuaternionsRock> energizer btw, check out the second example here if you want to learn more https://numpy.org/doc/stable/reference/arrays.dtypes.html
[01:57:17] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[01:57:25] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 252 seconds)
[01:57:48] <graingert[m]> bjs ?
[01:57:57] <bjs> graingert[m]: what is the ? for
[01:57:58] <energizer> after hearing all that, /me doesnt want to learn more
[01:58:07] <graingert[m]> Ah I see the context now
[01:58:47] *** Joins: Barones (~Barones@2804:214:819c:493:65fd:646a:7f40:cfe6)
[01:58:50] <graingert[m]> <bjs> "aphysically: it's -supposed..." <- I couldn't see this message from the push notification
[01:58:53] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[01:58:56] <QuaternionsRock> energizer lol the link is about multiple types in numpy arrays, it has nothing to do with xarray,
[01:59:01] <QuaternionsRock> but suit yourself
[01:59:16] <bjs> graingert[m]: I'm debating whether to reply to your bpo and just go through each of the options in the FAQ with concerns about "atomicity"
[01:59:19] <graingert[m]> so twisted depends on list.pop being atomic
[02:00:10] <graingert[m]> And I've written code that needed dict.copy() to be atomic
[02:00:13] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[02:00:14] <graingert[m]> And rhettinger said it was
[02:00:18] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[02:00:28] <graingert[m]> And that's ok Twitter so you can trust it more than dpo
[02:00:29] <QuaternionsRock> On an unrelated note
[02:00:34] <graingert[m]> s/ok/on/
[02:00:43] <bjs> graingert[m]: :P
[02:00:44] <QuaternionsRock> Why is __new__ special-cased to be a classmethod but __prepare__ is not?
[02:01:00] <graingert[m]> bjs: That sounds like it would be helpful
[02:02:04] <SnoopJ> QuaternionsRock, well, I'm very much in the "numpy can do a lot more than you think it can" camp on that matter. But I do like xarray and hope to see more of it in the future
[02:02:10] *** Joins: iflema (~ian@user/iflema)
[02:02:16] *** Joins: cuppajoeman (uid521943@hampstead.irccloud.com)
[02:02:49] *** Joins: redrum88 (~redrum88@user/redrum88)
[02:02:53] *** Joins: Allegretto (~allegrett@85-238-68-1.pool.digikabel.hu)
[02:02:57] <aphysically> the Callable[] typing syntax doesn't include self and such in the arguments right?
[02:03:59] <QuaternionsRock> SnoopJ sort of yes, but anything that can't be done to an xarray.DataArray that can be done to a numpy.ndarray can be done to xarray.DataArray.values
[02:04:49] <QuaternionsRock> It's the near-complete backwards-compatibility with numpy that makes me want to see people use it more often
[02:04:57] <SnoopJ> it's not compatible, it's *built on top of it*
[02:04:58] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:05:03] <QuaternionsRock> Exactly
[02:05:44] <SnoopJ> it takes the right stuff from pandas AFAICT, but I haven't used it very much because numpy does most of what I want, and when I wanted more than it could do I was stuck with HDF5 from upstream :(
[02:06:00] <QuaternionsRock> That's tough
[02:06:10] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[02:06:22] <aphysically> jinsun_: I think I found a mypy bug maybe?
[02:06:51] <QuaternionsRock> What I mean to say by the above is that, numpy when numpy can do everything people need, xarray can generally do it more safely
[02:07:17] *** Joins: Nspace (~Nspace@user/nspace)
[02:07:24] *** Quits: SlaveGeek334269 (~SlaveGeek@1.136.105.31) (Remote host closed the connection)
[02:07:31] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:07:35] <QuaternionsRock> scipy.interpolate.griddata is probably the best example I can think of off the top of my head
[02:07:37] <QuaternionsRock> https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html
[02:08:14] <cuppajoeman> When you use the @ symbol for matrix multiplicaiton in numpy, how did numpy make that available to us
[02:08:15] <QuaternionsRock> Actually there is a better one in scipy but I can't remember which function it was
[02:08:22] *** Quits: Barones (~Barones@2804:214:819c:493:65fd:646a:7f40:cfe6) (Read error: Connection reset by peer)
[02:08:25] <cuppajoeman> what if another package also tries to define that symbol
[02:08:31] <cuppajoeman> Can we define our own operators?
[02:08:32] <jinsun> aphysically: how?
[02:08:49] <SnoopJ> QuaternionsRock, what do you mean by safe?
[02:09:13] <aphysically> jinsun: let me know what you think, take a look at this call https://github.com/willmcgugan/rich/blob/256697915d9676b7d5cb6abd5559132ff5f92fdf/rich/pager.py#L26
[02:09:57] <aphysically> mypy git (not latest release) thinks this has too few arguments, because it takes the Callable definition on line 20 to mean it must have two arguments, but other versions of callable don't really work
[02:10:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[02:10:12] <aphysically> is the correct way to type this some sort of protocol?
[02:10:13] *** Quits: nomic (~nomic@185.217.117.221) (Quit: Leaving)
[02:11:53] *** Joins: y1n (~y1n@91.141.57.213.wireless.dyn.drei.com)
[02:12:04] <QuaternionsRock> SnoopJ I can't remember the function exactly, but essentially it took either 2D or 3D array of points (let's assume 3D). It could either take an array of shape (3, N) or (N, 3), but if the shape was (3, 3) it would automatically assume one or the other, which is inherently dangerous behavior
[02:12:11] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 245 seconds)
[02:12:11] <jinsun> cuppajoeman: no there is only a fixed set of operators, you can add to the builtins operators by writing a pep and convincing the cpython developers to add it to the language, @ was added that way   https://www.python.org/dev/peps/pep-0465
[02:12:14] *** Joins: fikran (~fikran@user/fikran)
[02:12:32] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:13:17] <madduck> Can I access the data in setup.py from the module? It feels silly to repeat version numbers and copyright details etc. e.g. for argparse.epilog
[02:13:23] <cuppajoeman> jinsun: So does this just make it available for us?
[02:13:27] <cuppajoeman> use*
[02:13:34] <cuppajoeman> So any program can use that operator?
[02:13:34] <QuaternionsRock> Whereas a pandas.DataFrame or xarray.DataArray could easily circumvent this issue by allowing the function to depend on labels rather than dimensions
[02:13:56] <cuppajoeman> Or is it only availble for the numpy library to use
[02:14:02] <jinsun> aphysically: ah that is a mypy bug, but looks like it is fixed in git recently https://github.com/python/mypy/issues/9489
[02:14:04] <energizer> madduck: go the other way
[02:14:12] <energizer> setup.py can read
[02:14:18] <QuaternionsRock> At the end of the day, the core issue is that the order of dimensions is generally arbitrary in nature
[02:14:21] <SnoopJ> QuaternionsRock, okay, that gives me a better sense what function you mean, but I still don't know what safe/dangerous means here. That sounds like "the result will be unexpected" more than "the result will be wrong/unpredictable/explode my machine" (which is what I usually think of as unsafe)
[02:14:23] <madduck> hah, okay. Sometimes it's so easy.
[02:14:48] <QuaternionsRock> Ah I see, I didn't mean "undefined"
[02:15:03] <aphysically> jinsun: I think the fix might have actually been the cause of it breaking?
[02:15:07] <jinsun> cuppajoeman: you can use @ in your own code, just define `__matmul__` in your class, like the PEP says https://www.python.org/dev/peps/pep-0465/#specification
[02:15:14] <aphysically> it *works* on the latest stable release and is *broken* on git with the fix
[02:15:27] <Repiphany_> Row-major vs column-major will never not be an issue as long as linear algebra is a thing
[02:15:27] *** Joins: strugee_ (~strugee@strugee.net)
[02:15:36] <cuppajoeman> Ah I see
[02:15:48] <cuppajoeman> Thanks jinsun
[02:15:58] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:16:02] <jinsun> aphysically: ah ok
[02:16:21] *** Quits: zerox2a (~zerox2a@2a01:c23:8103:f400:8931:2ee5:fc73:1471) (Ping timeout: 256 seconds)
[02:16:33] *** Quits: Strom (strom@fedora/strom) ()
[02:16:47] <aphysically> it works if you remove the Callable annotation jinsun, but what was the correct callable annotation supposed to be? is there any way to type it with protocol or something?
[02:17:00] <aphysically> with __call__ and some nonsense
[02:17:00] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[02:17:10] <jinsun> aphysically: so I guess now it is considered wrong, what the rich code is doing
[02:17:45] <jinsun> aphysically: why not simply def _pager instead of lambda?
[02:17:57] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[02:18:02] *** Quits: whatsupdoc (~whatsupdo@148.64.18.230) (Quit: Client closed)
[02:18:19] <aphysically> not sure
[02:18:39] *** Joins: Strom (strom@fedora/strom)
[02:19:55] <aphysically> I'll submit a PR changing it
[02:20:27] <aphysically> I found a another bug in rich's typing but that mypy doesn't catch
[02:21:38] *** Joins: SlaveGee_ (~SlaveGeek@179.61.228.72)
[02:22:58] *** Joins: Betal (~Betal@user/betal)
[02:23:26] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[02:23:57] <jinsun> found with pyright?
[02:24:20] *** Joins: _slate_ (~slate@159.69.26.92)
[02:25:07] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:bc70:e69d:10aa:2e3c) (Ping timeout: 265 seconds)
[02:25:36] <aphysically> no, mypy git
[02:26:06] <aphysically> pyright complains a ton about rich and I didn't want to work through it
[02:26:29] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[02:26:55] <aphysically> jinsun: this line is annotated as a callable, but it's clearly assigned with a getattr that has the possibility of being None https://github.com/willmcgugan/rich/blob/256697915d9676b7d5cb6abd5559132ff5f92fdf/rich/measure.py#L103
[02:30:38] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[02:30:54] <bjs> graingert[m]: what was the raymond tweet again? do you have a link quick
[02:31:05] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[02:31:09] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:31:49] <graingert[m]> https://twitter.com/raymondh/status/1251953119556104192?t=iPhjn81vFuMxMwEq0X83tA&s=19
[02:31:52] <bjs> he has too many tweets and I can't remember the exact wording
[02:32:14] <graingert[m]> I googled Raymondh dict.copy
[02:32:23] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:cced:c365:caec:cb99)
[02:32:25] <bjs> graingert[m]: ah
[02:32:38] <bjs> graingert[m]: I was going through the list of operations and I'm a bit confused by the D.keys() line.
[02:32:43] <bjs> I'm not entirely sure *what* it is saying is atomic
[02:33:02] <aphysically> jinsun: I'm also goign to change that lambda to a def; I have no idea why it was a lambda even; it was actually more lines with the lambda due to black..
[02:33:12] <bjs> is that just something that was a Py2 issue and is now meaningless
[02:33:16] <bjs> or is there something I'm missing?
[02:34:03] *** Quits: emf (~emf@2620:10d:c090:400::5:a45e) (Quit: emf)
[02:34:10] *** Quits: Quack (~Quack@185.21.216.169) (Ping timeout: 265 seconds)
[02:36:06] <aphysically> jinsun: there's not any difference between the callable attribute there and an actual method right?
[02:36:13] <iflema> speaking of missing something - "time.strftime('%S')" as a value can one exec the key?
[02:36:19] *** Joins: Quack (~Quack@185.21.216.169)
[02:36:48] *** Joins: Capricious (~capriciou@121.44.243.153)
[02:36:49] *** Joins: emf (~emf@2620:10d:c090:400::5:a45e)
[02:36:54] <QuaternionsRock> Why are metaclasses *still* so jank
[02:36:54] <jinsun> aphysically: yeah that looks ugly too, and really better to just use def to annotate functions, Callable makes sense for dataclasses and function arguments where the funnction is not being defined there
[02:37:25] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:39:58] *** Quits: emerent (~quassel@p200300cd57485550ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:39:58] *** Joins: emerent_ (~quassel@p200300cd574855e1ba27ebfffed28a59.dip0.t-ipconnect.de)
[02:39:58] *** emerent_ is now known as emerent
[02:40:08] <bjs> graingert[m]: I added some remarks about what I think about each of the points in the FAQ;  I hope it's useful in some way
[02:40:11] <bjs> to your bpo
[02:41:06] <energizer> QuaternionsRock: they cant exactly change the behavior of metaclasses
[02:41:14] <energizer> also some of it is peformance
[02:41:19] *** LabMonkey is now known as Mechanismus
[02:41:27] <jinsun> aphysically: yeah doesn't look like there is a difference, looking at the git blame, it was an unannotated lamda before, and someone just added the Callable annotation to satisfy mypy that time instead of converting to a def
[02:41:41] <QuaternionsRock> energizer I'm actually talking about the syntax lol
[02:42:09] <energizer> QuaternionsRock: what's weird about the syntax
[02:42:22] <stewie925> hello, I don't understand why  my line 6 is getting TabError in the following code patch: https://bpa.st/ESDA
[02:42:26] <jinsun> aphysically: and originally it was just _pager = pydoc.pager, then later more functionality was needed, and they made it a lambda instead of a def to one-liner it I guess (which backfired now)
[02:42:41] *** Joins: int3l (~int3l@78-83-119-37.spectrumnet.bg)
[02:43:12] <energizer> stewie925: you must have tabs in there somewhere. get rid of them
[02:44:17] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:44:20] <jinsun> (that is why you should use a better editor not write python in notepad)
[02:44:29] <stewie925> energizer: thank you - that's weird...Ill do my best to fix
[02:44:34] <bjs> stewie925: line 4 has a tab, but line 5 does not
[02:44:42] <bjs> of that bpaste
[02:44:51] <energizer> stewie925: which editor are you using
[02:45:10] <stewie925> energizer:  I am using vscode
[02:45:21] <energizer> ok
[02:45:26] <stewie925> bjs: thank you, let me fix and run it again (also I forgot import os hehe)
[02:45:55] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:583f:addf:6026:5042)
[02:46:02] <_slate_> question: lookup speed for set is O(1), good now how to make use of that if I want to retrieve a specific object from the set? using a dictionary wouldnt make sense as I dont need to assign a value.
[02:46:10] <QuaternionsRock> energizer actually I just realized the problem I have is with __new__, not metaclasses
[02:46:46] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 245 seconds)
[02:47:06] <bjs> _slate_: the question is a bit confusing because how do you know which "specific object" you need to return?
[02:47:08] <SnoopJ> _slate_, *membership* testing for set is O(1), lookup is not an operation that set has, because it isn't a mapping.
[02:47:11] <energizer> _slate_: what is the difference between lookup and retreive?
[02:47:54] <QuaternionsRock> idg why super().__new__ doesn't bind the cls argument
[02:48:26] <QuaternionsRock> also __new__ is schrodinger's classmethod
[02:48:53] <QuaternionsRock> They call it a classmethod everywhere in the docs but it totally isn't
[02:50:07] *** Quits: ubert (~Thunderbi@77.119.211.49.wireless.dyn.drei.com) (Remote host closed the connection)
[02:50:19] <QuaternionsRock> It's like... a staticmethod? Kind of
[02:50:31] <QuaternionsRock> It at least acts more like a staticmethod than anything else
[02:50:38] <Yhg1s> It is a staticmethod, yes.
[02:50:38] <aphysically> jinsun: https://github.com/willmcgugan/rich/pull/1579
[02:50:51] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[02:51:17] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[02:51:36] <Yhg1s> It's just a staticmethod that takes the class as first argument. It's a staticmethod (and arguably staticmethod exists) because you need to pass the child class as first argument and it predates super(), so the only way to make it work was to have it be a staticmethod.
[02:51:51] <aphysically> jinsun: what is this even doing? trying to make sure the pydoc import is lazy?
[02:52:08] <QuaternionsRock> Yhg1s wdym it predates super()?
[02:52:16] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:52:18] <SnoopJ> it existed first
[02:52:23] <Yhg1s> I'm not sure what part of that is unclear. __new__ existed before super().
[02:52:32] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 265 seconds)
[02:52:53] <QuaternionsRock> Lol I thought you were talking about object lifetime
[02:53:32] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[02:53:42] <Yhg1s> QuaternionsRock: where in the documentation does it say it's a classmethod, by the way? https://docs.python.org/3/reference/datamodel.html#object.__new__ explains it is a staticmethod.
[02:54:12] *** Joins: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:ac08:8774:7e5b:2a4)
[02:54:14] <jinsun> aphysically: yeah because of this it seems https://github.com/willmcgugan/rich/issues/1104
[02:54:19] <QuaternionsRock> Yep, I was misremembering Yhg1s
[02:55:24] <aphysically> I do find it a bit weird rich includes code samples in the main part of the library
[02:55:27] <_slate_> bjs: I identify the object I need by a the value of a specific attribute of it. Currently I am doing that by iterating over the set, checking each objects target attribute for the value I need and if I get a match return that object to then do changes to it.
[02:55:31] <aphysically> (in every library module)
[02:55:44] <bjs> _slate_: are you sure you don't want a dict of {attribute_value: object}
[02:55:47] <QuaternionsRock> So... what exactly would happen if we just decided to treat __new__ as a classmethod?
[02:56:00] <Yhg1s> QuaternionsRock: I'm not sure who 'we' is.
[02:56:01] <_slate_> bjs: Yes, because I dont need to assign a value I have no use for it
[02:56:08] <bjs> QuaternionsRock: it's not a classmethod, classmethods get the class implicitly bound as the first argument
[02:56:10] <QuaternionsRock> Yhg1s python 3.11 lol
[02:56:13] <_slate_> bjs: My goal using a set was to achieve a quicker lookup speed
[02:56:15] <bjs> QuaternionsRock: if you call __new__ you have to explicitly pass cls
[02:56:17] <Yhg1s> QuaternionsRock: lots of code would break.
[02:56:21] <QuaternionsRock> bjs I'm aware
[02:56:25] <bjs> _slate_: quicker than dict?
[02:56:35] <QuaternionsRock> Yhg1s what code? That's what I'm curious about
[02:56:48] <bjs> The code that was written that passes cls explicitly :)
[02:56:51] <Yhg1s> QuaternionsRock: all code that calls super().__new__(), since it has to be passing the clas explicitly.
[02:57:07] <QuaternionsRock> Ahhh shit you right
[02:57:08] <_slate_> bjs: From what I had researched they recommend using a set if u dont need to assign a value, which would be the case for me
[02:57:27] <bjs> _slate_: but it sounds you *do* want to assign a value,  you literally said the attribute *value* above
[02:57:32] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[02:58:05] <_slate_> bjs: The value must reside inside the object, as I don't have access to the list of objects in all places of the code.
[02:58:17] *** Quits: int3l (~int3l@78-83-119-37.spectrumnet.bg) (Quit: WeeChat 3.3)
[02:58:33] <Yhg1s> _slate_: but you want to look up the object based on the value. So you want a dict, with the value being the key.
[02:58:46] <bjs> _slate_: the data structure you are describing is a dictionary,  which maps the attribute value (as the key) to the object itself (as the value).
[02:59:08] <bjs> _slate_: sets can't do this,  but yeah you'll have to manage the dictionary manually.  But it'll be the same speed as set,  all dict operations you care about are ~O(1) here
[02:59:27] <Yhg1s> the same speed as a set used correctly. Much faster than a set you merely iterate over to find the item.
[02:59:29] <QuaternionsRock> Yhg1s there should be ways around that though. __prepare__ must be marked as a classmethod, so perhaps we could optionally allow __new__ to be decorated as such and change the behavior of super() slightly
[02:59:49] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:00:05] <Yhg1s> QuaternionsRock: I presume you want to change __new__ into a classmethod in order to avoid having to pass the class explicitly.
[03:00:24] <Yhg1s> QuaternionsRock: however, not having to pass the class explicitly is what would break all the existing code that uses super().__new__.
[03:00:34] <QuaternionsRock> Yeah, it's not a big deal per se but it does seem like a pretty significant inconsistency
[03:00:47] *** Joins: int3l (~int3l@78-83-119-37.spectrumnet.bg)
[03:01:00] <bjs> insignificant* :P
[03:01:00] <Yhg1s> QuaternionsRock: it's a minor quirk. It's not fixable without significant effort and a decade long deprecation process.
[03:01:02] *** Quits: int3l (~int3l@78-83-119-37.spectrumnet.bg) (Client Quit)
[03:01:02] <_slate_> Yhg1s: Yeah, that's what I was thinking  as well, I really have no use for the value though - What I would have done now is create a dict with the object as key and the object as value lol
[03:01:20] <Yhg1s> _slate_: you *do* have a use for the value if you want to find the object by that value.
[03:01:21] *** Joins: CodePoint_ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:01:32] <bjs> _slate_: I mean the value already exists, so you're not really saving anything
[03:01:47] <QuaternionsRock> Yhg1s I'm saying there's a way to not break existing code
[03:01:49] <Yhg1s> _slate_: a dict mapping object to object is useless. But you don't want to find the object by the object. You want to find the object by *the value*.
[03:01:55] <Yhg1s> QuaternionsRock: I'm saying there isn't.
[03:02:05] *** Joins: Neil (~NeilRG@192.222.196.111)
[03:02:22] <Neil> what is Meson?
[03:02:29] *** Neil is now known as Guest9924
[03:02:31] <bjs> graingert[m]: the 2.7 FAQs also mentioned D.keys();  I'm assuming it's a leftover from the 2->3 transition. At least I still can't think of what it's trying to say.
[03:02:33] <Guest9924> it says it's a "build system"
[03:02:43] <Yhg1s> Nei: it depends on the context.
[03:03:08] <_slate_> Yhg1s: Hmm yeah, well that's right, it just feels weird because the value I would assign also exists inside the object (and it must exist there because it is being using in different places, accessing the object itself only)
[03:03:25] <Yhg1s> _slate_: I'm not sure why that's weird.
[03:03:28] <QuaternionsRock> Since __new__ is already special-cased, why not special-case super().__new__ as well? If super() is invoked in a __new__ function decorated with @classmethod, bind cls to the first argument of super().__new__
[03:03:42] <_slate_> Yhg1s: Feels redundant x)
[03:03:57] <Yhg1s> QuaternionsRock: and thus breaking code that's calling super().__new__(cls)
[03:04:16] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:cced:c365:caec:cb99) (Ping timeout: 245 seconds)
[03:04:17] <Yhg1s> _slate_: except it's not, because it's for different purposes.
[03:04:18] <QuaternionsRock> Not if you don't decorate your __new__ function with @classmethod
[03:04:26] <QuaternionsRock> Yhg1s make it opt-in, in a sense
[03:04:36] <Guest9924> Yhg1s, I mean this https://github.com/mesonbuild/meson
[03:04:43] <Guest9924> I'm just not sure exactly what it is
[03:04:51] <Yhg1s> QuaternionsRock: that would only work if you control all code that _might_ be using the class.
[03:04:53] <_slate_> Yhg1s: Yeah, you are right - looking at it from that perspective its not redundant at all, thank you for helping out x)
[03:04:54] <Guest9924> is it a competitor to poetry ?
[03:04:57] <Guest9924> or setuptools?
[03:05:09] <_slate_> Thanks everyone for the quick replies, much appreciated
[03:05:22] <Yhg1s> Guest9924: it's a build system. It's not really a 'competitor' to poetry or setuptools. It's a broader tool.
[03:05:32] <QuaternionsRock> Yhg1s no it wouldn't. Let me write up a quick example
[03:05:35] <Guest9924> Yhg1s, is it used with one or the other/
[03:05:36] <Guest9924> ?
[03:05:37] <Yhg1s> QuaternionsRock: don't bother.
[03:05:42] <Yhg1s> QuaternionsRock: I'm off to bed, sorry.
[03:05:47] <Guest9924> or does it supplant them?
[03:05:50] <Yhg1s> Guest9924: it can be, sure.
[03:05:51] <QuaternionsRock> I mean I was going to anyway haha
[03:05:52] <bjs> Guest9924: the bottom of the readme directs to you their homepage for more information,  at https://mesonbuild.com/ . Which describes it as a fairly generic build system
[03:06:21] *** Quits: CodePoint_ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint_)
[03:06:50] <Yhg1s> Guest9924: poetry and setuptools only describe Python projects, and don't really do the building. Meson is not specifically for Python, and can do much more.
[03:07:27] <Guest9924> okay, thanks both
[03:07:34] <Guest9924> bjs okay read that now, thanks
[03:10:09] *** Joins: int3l (~int3l@78-83-119-37.spectrumnet.bg)
[03:10:34] *** Quits: int3l (~int3l@78-83-119-37.spectrumnet.bg) (Client Quit)
[03:10:53] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[03:12:17] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:12:57] <QuaternionsRock> Yhg1s https://gist.github.com/QuaternionsRock/66d9c18aeab6cd37c2503961539df829
[03:14:14] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:5468:7d82:1f0a:58a1)
[03:14:43] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[03:18:45] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[03:19:55] *** Joins: whatsupdoc (~whatsupdo@148.64.18.230)
[03:20:17] <whatsupdoc> Can someone give a rough breakdown of how iterators are implemented under the hood?
[03:20:28] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:ec30:badc:b3fd:8af2) (Quit: Client closed)
[03:20:29] *** Joins: INeedAHandle (~INeedAHan@211.192.133.205)
[03:20:30] <whatsupdoc> How is it that an iterator can work on any data type?
[03:20:46] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:ec30:badc:b3fd:8af2)
[03:20:57] <KirkMcDonald> whatsupdoc: https://docs.python.org/3/library/stdtypes.html#iterator-types
[03:21:07] <bjs> whatsupdoc: I think you may have misunderstood slightly,  there is no type called an "iterator".  an iterator is a description of a whole bunch of things
[03:21:38] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[03:21:41] <whatsupdoc> Oh I see, thanks
[03:21:49] <bjs> whatsupdoc: in Python we call anything you can loop over an "iterable".  `for _ in iterable` works by creating an "iterator" from the iterable,  by asking the iterable type itself to produce one
[03:21:58] <bjs> whatsupdoc: (by calling the objects __iter__ method).
[03:22:14] <QuaternionsRock> Oh also bjs what do you think of that suggestion?
[03:22:17] <SnoopJ> iterable: thing that can be walked-over; iterator: thing that does the walking
[03:22:25] *** Joins: georgios (~georgios@user/georgios)
[03:22:51] <bjs> whatsupdoc: iter(some_list) gives a list_iterator object,  iter(some_tuple) gives a tuple_iterator object etc.  Then when the loop runs, each iteration it asks the iterator object the iterable created for the "next" element.
[03:23:33] *** Quits: hexa- (~hexa-@juno.lossy.network) (Quit: WeeChat 3.1)
[03:24:31] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[03:24:42] <energizer> is this how iterators work in modern languages?
[03:24:56] *** Joins: hexa- (~hexa-@juno.lossy.network)
[03:25:05] <bjs> energizer: something basically like this, yes.
[03:25:19] *** Quits: Kharon (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[03:25:28] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:d0de:49e0:ae27:584a) (Quit: Client closed)
[03:25:48] *** Quits: newpy (~newpy@2601:280:4381:1390:d8a2:4368:1fe2:a8e3) (Quit: Leaving)
[03:26:45] <KirkMcDonald> There are several approaches to it, used in various languages.
[03:27:29] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[03:28:23] <jinsun> c# does it mostly like python, except that your class must inherit IEnumerable interface (and it calls them Enumerable and Enumerator)
[03:28:42] <kenwoodfox> Im laying out a bit of a project i want to do in python, i want to put together a digital signage thing for my robotics team, something really generic that can do a lot
[03:28:42] <kenwoodfox> i want to do things like play video, display status of CI/CD builds, minecraft stats, misc team stats, discord embeds, etc etc, lots and lots of stuff so im thinking of making it with flask, so i can build all sorts of things depending on what we want
[03:28:42] <kenwoodfox> then im planning on maybe running chromium in kiosk mode using systemd, same with the python flask program itself, running on a pi
[03:28:42] <kenwoodfox> Is there anything wrong with my approach? would something else be better? Id love some feedback :3
[03:29:19] <bjs> Rust has an Iterator trait that has a next() function, but uses option types rather than exceptions to determine end-of-iterator.
[03:29:25] *** Joins: Nspace (~Nspace@user/nspace)
[03:30:04] <SnoopJ> my perspective: "iterator" generalizes quite well, everybody does "iterable" differently
[03:30:08] <bjs> Haskell has the Foldable typeclass which is... totally different :P
[03:30:10] *** Parts: Venhal (sid515085@uxbridge.irccloud.com) ()
[03:30:26] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[03:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[03:30:33] <KirkMcDonald> C++ has its iterator protocol, which is vaguely modeled after using a pointer to advanced through a NUL-terminated string.
[03:30:41] <KirkMcDonald> advance*
[03:30:46] <SnoopJ> C++ also has the idea of bi-directional iteration, which adds quite a wrinkle
[03:31:01] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-142e-facc-6ddb-8c11.res6.spectrum.com)
[03:31:05] <KirkMcDonald> It's optional, though.
[03:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:31:17] <SnoopJ> well, so is iteration :)
[03:31:30] <energizer> KirkMcDonald: does that accumulate memory usage?
[03:31:46] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-ad5a-d7d8-86d4-5dd6.res6.spectrum.com) (Ping timeout: 260 seconds)
[03:31:49] <KirkMcDonald> energizer: No. Basically, the iterator object pretends to be a pointer.
[03:32:09] <KirkMcDonald> energizer: Since you can override the dereference operator.
[03:32:14] <KirkMcDonald> overload*
[03:32:42] <SnoopJ> "it depends on how you do it"
[03:33:09] <KirkMcDonald> Well, sure, it's C++, so nothing is ever simple.
[03:33:14] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:655d:868c:5af:b90)
[03:33:27] <QuaternionsRock> Ah man not sure if you repsonded but I got dc'ed bjs
[03:33:44] <bjs> QuaternionsRock: I don't think I responded, I don't really see the point
[03:34:17] <SnoopJ> KirkMcDonald, well, you could probably write a crummy iterator in any language that has the concept
[03:34:31] <KirkMcDonald> D is a curious case, in that it has *two* iteration protocols, an old one and a new one.
[03:34:36] <bjs> __new__ is a weird function and it's special-cased to be a staticmethod and that's... just fine?
[03:34:39] <bjs> KirkMcDonald: Python has two too
[03:34:43] <bjs> we just don't talk about the other one...
[03:34:51] *** Joins: Fiji (~Fiji@user/fiji)
[03:35:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:35:15] <KirkMcDonald> The old one uses this curious scheme in which the foreach loop's body is passed to a method as a callback.
[03:35:27] <energizer> what are yall talking about
[03:35:46] <bjs> energizer: you'll have to be more specific
[03:35:54] <energizer> <bjs> KirkMcDonald: Python has two too
[03:35:58] <bjs> energizer: Sequences.
[03:36:06] <bjs> but please don't
[03:36:06] <energizer> ha
[03:36:07] <KirkMcDonald> energizer: __getitem__ can give you iteration.
[03:36:31] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:36:34] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[03:37:30] <whatsupdoc> What's the difference between a generator and an iterator? They feel similar
[03:37:37] <bjs> whatsupdoc: a generator is a kind of iterator
[03:37:38] <energizer> isa
[03:37:44] <KirkMcDonald> whatsupdoc: A generator is a specific sort of object.
[03:38:10] <energizer> whatsupdoc: no difference in usage, just different in how you create them
[03:38:12] <KirkMcDonald> An iterator is anything which implements the iterator protocol (of which a generator is an example).
[03:38:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:38:22] <madprops> is appending to a file always faster than prepending?
[03:38:31] <KirkMcDonald> madprops: Yes.
[03:38:37] <whatsupdoc> Ok, awesome thanks!
[03:38:46] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (Quit: WeeChat 3.3)
[03:38:47] <jinsun> there can be difference in ussge, if you do generator.send or generator.throw
[03:38:55] <bjs> whatsupdoc: e.g. `def f(): yield`  then calling f gives you an object called a "generator".  Generators are iterators, because you can ask for the "next" thing from them.  They are iterable,  since you can loop over them.  They have other methods too, that aren't found on all iterators/iterables (like .send and .throw)
[03:38:59] <KirkMcDonald> madprops: Generally speaking. Because prepending means you need to also re-write everything following the new data.
[03:39:03] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[03:39:04] <energizer> that is another of those things we dont talk about jinsun
[03:39:11] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 250 seconds)
[03:39:21] <KirkMcDonald> madprops: But when appending to the end, that's it, you can just do that.
[03:39:45] <madprops> KirkMcDonald, What if I want to limit the file to x number of lines, is it still faster?
[03:40:00] <bjs> send is perfectly fine,  throw is a little more awkward but important to e.g. old-style coros;  this is different to the old sequence-based iteration which is technically supported but "please dont"
[03:40:07] <jinsun> energizer: :D yeah, I didn't even know those are a thing till I read the typing documentation
[03:40:11] <QuaternionsRock> Is there anything that can be accomplished in a metaclass's __new__ function that can't be done in its __init__?
[03:40:24] *** Joins: jazzy2 (~jaziz@user/jaziz)
[03:40:27] <KirkMcDonald> madprops: Meaning that when prepending, you would also delete lines from the end, and when appending, you'd remove lines from the start?
[03:40:32] <bjs> QuaternionsRock: well __new__ can do things before you create the class
[03:40:41] <madprops> KirkMcDonald, yeah
[03:40:43] <bjs> __init__ necessarily happens after the creation of the class object already
[03:40:50] <KirkMcDonald> madprops: Either one of these implies re-writing the entire file.
[03:41:21] <madprops> so might as well prepend
[03:41:29] <energizer> QuaternionsRock: return a value
[03:41:31] <QuaternionsRock> bjs What are the potential use cases for that, if I may ask?
[03:41:40] <SnoopJ> QuaternionsRock, it's extremely important in metaprogramming
[03:41:53] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[03:41:54] <QuaternionsRock> Ah, so you can dynamically change the metaclass?
[03:41:55] <bjs> QuaternionsRock: for example, if you don't want to return a new class (see e.g. enum.Enum)
[03:42:15] <QuaternionsRock> ahhh
[03:42:20] <bjs> Uh that's not a good example
[03:42:26] <bjs> Well it's a good example but not for the thing I said :P
[03:42:53] <QuaternionsRock> Why not?
[03:42:55] <SnoopJ> I think the general statement is "it's useful to separate creation of the instance object from initialization of it"
[03:43:06] *** Joins: jazzy (~jaziz@user/jaziz)
[03:43:27] <bjs> QuaternionsRock: you also have things like __prepare__ which run before the class body is run, and can be accessed from within __new__
[03:43:42] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[03:45:01] *** jazzy is now known as jazz-o-lantern
[03:46:22] <QuaternionsRock> Right, prepare makes sense to me
[03:46:38] <QuaternionsRock> __prepare__ is naturally incompatible with __slots__ right?
[03:46:55] <bjs> QuaternionsRock: to be honest a lot of the cases for metaclass hackery have been subsumed by other newer toys that people prefer
[03:47:12] <QuaternionsRock> such as?
[03:47:25] <SnoopJ> bjs, do you think it'd be fair to say the mechanics of the toys use the things we're discussing? :)
[03:47:27] <QuaternionsRock> I guess descriptors?
[03:47:47] <QuaternionsRock> Descriptors don't use metaclasses do they?
[03:48:07] <bjs> QuaternionsRock: well a change of style of programming (e.g. using decorators and functions),  or using the descriptor protocol,  and for specific things you have __class_getitem__ and the likes
[03:48:35] <energizer> __set_name__ was created to avoid the need for a bunch of metaclasses
[03:48:36] *** Quits: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net) (Ping timeout: 265 seconds)
[03:48:58] <bjs> features have slowly been added specifically to account for cases where people were using metaclasses so that now, they don't have to
[03:49:39] <bjs> Right __init_subclass__, __set_name__, __class_getitem__   ... I'm sure there are others
[03:49:47] <bjs> all there simply to remove the need for metaclass hackery in common cases
[03:50:10] <energizer> and __prepare__ reduces the need for __new__
[03:50:15] <bjs> Yeah
[03:50:37] <bjs> and changes to dict to preserve the order of definitions in the class body too
[03:51:21] <SnoopJ> QuaternionsRock, re: what came up earlier about one feature preceding another: it's also important to remember that the language is both designed and evolved, and the stuff under discussion falls into both camps for sure :)
[03:51:21] <QuaternionsRock> bjs Enum doesn't mess with __new__ does it? I'm trying to replicate that kind of behavior and I can't seem to do it
[03:51:32] <bjs> QuaternionsRock: yes it messes with __new__, in many weird ways
[03:51:50] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 260 seconds)
[03:52:10] <bjs> QuaternionsRock: note that Enum messes with __new__ in *two* places: the Enum metaclass, and the Enum class
[03:52:18] <SnoopJ> EnumType.__new__ is particularly worth pointing out
[03:52:42] <SnoopJ> (if you want to programmatically generate an Enum class, which is something I've personally done in generating bindings)
[03:53:45] <energizer> bjs do you happen to know what's the cutting-edge theory of things like typing.Protocol/clojure.spec/racket contracts?
[03:53:50] <bjs> QuaternionsRock: and to make it worse the two __new__'s interact
[03:53:56] <bjs> energizer: theory as in
[03:54:07] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[03:54:36] <energizer> bjs like, are those libraries on the forefront of thinking or are they way behind the academic PLT on dynamic typing
[03:54:55] <SnoopJ> thinking about what
[03:55:27] <QuaternionsRock> I'm trying to understand what EnumMeta.__new__ does that can't be accomplished elsewhere
[03:55:31] *** Quits: davor_ (~davor@user/davor) (Ping timeout: 245 seconds)
[03:55:44] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[03:56:02] <SnoopJ> QuaternionsRock, do you mean EnumType?
[03:56:07] <bjs> QuaternionsRock: I mean this is Python,  things can always be achieved elsewhere by doing things more manually
[03:56:46] *** Joins: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net)
[03:56:48] <SnoopJ> oh, right, there's an alias for that name
[03:56:58] <QuaternionsRock> SnoopJ I don't think so? Not entirely sure but I don't see EnumType in the docs anywhere
[03:56:59] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[03:57:11] <bjs> QuaternionsRock: remember that an Enum class has class variables which are Enum instances
[03:57:14] <SnoopJ> QuaternionsRock, it's defined as EnumType and then aliased `EnumMeta = EnumType` right below it.
[03:57:24] <SnoopJ> QuaternionsRock, let's flip the question around: you want to rip out that __new__. So where do you put it?
[03:57:42] <bjs> SnoopJ: I think you're looking at a very modern version of the code
[03:58:08] <SnoopJ> bjs, ...yes, that's biting me in the arse again for sure, I'm looking at my local clone on main
[03:58:14] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-ac81-7fce-fe8c-415b.res6.spectrum.com) (Read error: Connection reset by peer)
[03:58:27] * SnoopJ makes a worktree for 3.8
[03:58:51] <QuaternionsRock> SnoopJ I just can't think of anything that can be accomplished with a metaclass's __new__ that can't be done with its __init__
[03:59:13] <bjs> QuaternionsRock: and the Enum metaclass has to sort that out,  as the Enum instances cannot exist before the Enum class does and yet the Enum class has class attributes which are instances of itself
[03:59:18] *** Quits: emf (~emf@2620:10d:c090:400::5:a45e) (Quit: emf)
[04:00:03] <SnoopJ> QuaternionsRock, the general-form answer is "things that MUST be done before an instance exists" which by definition excludes __init__, because that method gets an instance as its first argument. This is admittedly not a very common thing in day-to-day code, but that does not mean such problems do not exist.
[04:00:18] <QuaternionsRock> Yeah of course
[04:00:30] <SnoopJ> when juggling classes themselves...well, where else does it live is my question to you?
[04:00:32] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[04:00:58] <QuaternionsRock> I assume there are good reasons to have __new__ there, I'm just trying to get an understanding of what they are is all :)
[04:01:07] *** Quits: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29) (Quit: Konversation terminated!)
[04:01:10] *** Joins: aknot (~aknot@2603:900a:1503:17bb:1968:150e:2b56:2737)
[04:01:25] <QuaternionsRock> I honestly didn't fully realize that an enum's members are instances of itself
[04:01:28] <SnoopJ> metaprogramming is definitely a heavy-hitter in answering "what is this even good for"
[04:01:31] *** Joins: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29)
[04:02:25] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[04:02:25] <bjs> QuaternionsRock: Enum wanted a fancy API that let you just write classes with some class attributes,  the only way to do t hat is with metaclasses
[04:02:44] *** Joins: davor (~davor@user/davor)
[04:03:05] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:583f:addf:6026:5042) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:03:17] <bjs> over the last decade it's become a complex class with __call__ and __new__ and __prepare__ with lots of subtle interactions just to make sure you get the right behaviour in all the weird edge cases
[04:03:22] *** Quits: flokuehn (~flokuehn@mue-88-130-54-168.dsl.tropolys.de) (Ping timeout: 252 seconds)
[04:03:30] *** Quits: LuKaRo (~LuKaRo@p4fc3226e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:03:45] <SnoopJ> upshot: when you're in __new__, you have access to the class and can do things like reflect on what class attributes might be defined, then do Weird And Magical Things™ to make something cool happen
[04:04:41] <SnoopJ> QuaternionsRock, attrs/dataclasses is another good example of where this is a useful pattern, with a lot less of the idiosyncracy that Enum has
[04:04:51] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:dd48:1c77:fa63:9a2d)
[04:05:16] *** Joins: flokuehn (~flokuehn@muedsl-82-207-236-227.citykom.de)
[04:05:19] *** Joins: LuKaRo (~LuKaRo@p57b15e22.dip0.t-ipconnect.de)
[04:05:36] <SnoopJ> oh hrm, dataclass does not use it because decorator, but it does appear in attrs
[04:06:29] *** Quits: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net) (Ping timeout: 265 seconds)
[04:06:29] <SnoopJ> only for the attr.NOTHING singleton, though
[04:06:44] * SnoopJ rescinds the suggestion shamefully, these are not good examples
[04:06:52] *** Joins: nomic (~nomic@185.217.117.221)
[04:06:58] <energizer> sqlalchemy is the good example
[04:07:03] <bjs> QuaternionsRock: there are lots of tiny things that Enum does, like re-ordering attributes and checking the base classes that are just easier to do from __new__ and maybe if enum was re-invented today it'd be written to not use metaclasses at all and use a different API
[04:07:04] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[04:07:53] <bjs> probably a lot of what it does in __new__ could also be done in __init__ with a little extra work
[04:08:05] *** Joins: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net)
[04:10:10] <QuaternionsRock> bjs how does Enum re-order attributes?
[04:11:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[04:14:29] <SnoopJ> energizer, ah yes, and probably any ORM-y thing fits. Pydantic certainly makes use of __new__
[04:14:44] *** Parts: gry (~quassel@botters/gry) (пока)
[04:15:00] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-04cc-b6ed-267b-4319.res6.spectrum.com)
[04:15:34] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:15:59] <bjs> QuaternionsRock: well it has access to the dictionary used to create the class so it's free to add/remove/reorder the attributes that will become the class's own attributes as it sees fit.  Maybe I misremember https://docs.python.org/3/library/enum.html#finer-points whether it re-ordered or just checked
[04:17:40] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-142e-facc-6ddb-8c11.res6.spectrum.com) (Ping timeout: 252 seconds)
[04:17:53] <SnoopJ> whoa, the tip of development has a *lot* of juggling for _order_
[04:18:48] <SnoopJ> 3.8.12: https://git.io/JKqiK vs. main: https://git.io/JKqiM
[04:19:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:20:05] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 260 seconds)
[04:20:17] <bjs> QuaternionsRock: but in general, __new__ gets given all the "building blocks" for your class (the set of base classes, the mapping that will become the attributes of the class, any other keywords passed in the `class` statement and then the __new__ can choose to change/substitute those or even just not make new instances of the class at all and return something else
[04:20:58] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[04:21:21] *** Quits: gitly (~gitly@85.255.234.91) (Ping timeout: 245 seconds)
[04:21:22] <bjs> and with things like that it's hard to point to one single usecase,  while at the same time feeling it's limitless power to do funky (and maybe even useful) things
[04:21:35] *** Joins: fikran (~fikran@user/fikran)
[04:21:46] <SnoopJ> yea a singleton is not a bad example of where you really couldn't do it in __init__ if an instance's existence posed a problem (let's say instances hold resources if they exist at all, for argument's sake)
[04:22:09] *** Joins: akaWolf (~akaWolf@akawolf.org)
[04:22:16] <SnoopJ> (even though you can absolutely do plain-old singletons with just __init__)
[04:23:26] *** Joins: gitly (~gitly@85.255.237.21)
[04:24:32] <Guest9924> is there an easy way to take a set of traceback objects and trim their common prefix?
[04:25:44] *** Joins: int3l (~int3l@78-83-119-37.spectrumnet.bg)
[04:26:06] *** Quits: int3l (~int3l@78-83-119-37.spectrumnet.bg) (Client Quit)
[04:29:10] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 252 seconds)
[04:30:00] *** Joins: qlixed (~qlixed@181.44.129.13)
[04:30:04] *** Quits: qlixed (~qlixed@181.44.129.13) (Remote host closed the connection)
[04:30:23] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[04:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[04:31:51] <jamwil> What's the most pythonic way to enumerate an infinite loop?
[04:32:25] <nedbat> jamwil: what do you mean by enumerate?
[04:32:42] <imp> jamwil: enumerate(iterable)
[04:32:43] <nedbat> jamwil: for n in itertools.count():   will give you 0...whatever
[04:32:44] <jamwil> Keep a running tally of the number of iterations
[04:33:15] <jamwil> But the loop effectively being `while True: ...`
[04:33:30] <nedbat> jamwil: try this out   for n in itertools.count:
[04:33:46] <jamwil> Awesome, thanks!
[04:34:48] *** Joins: vlm (~vlm@user/vlm)
[04:37:51] *** Joins: djapo (~archangel@user/djapo)
[04:38:52] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:42:56] <whatsupdoc> Interesting, never knew python also has closures
[04:43:24] *** Quits: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29) (Quit: Konversation terminated!)
[04:43:28] <whatsupdoc> Never understood the point of them anyway. I never think: oh let's write a closure..
[04:44:31] <Repiphany_> Decorators
[04:44:34] *** Repiphany_ is now known as Repiphany
[04:45:02] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e86c:be50:e673:c005) (Read error: Connection reset by peer)
[04:46:40] <whatsupdoc> Never heard of decorators before
[04:48:19] *** Joins: ShinyCyril (~ShinyCyri@65.79.144.153)
[04:48:23] <whatsupdoc> So decorators are just closures with a custom function passed in?
[04:49:30] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 265 seconds)
[04:50:36] <SnoopJ> whatsupdoc, a closure is a way to bind names to a function, often used in languages (like Python) where functions themselves can be manipulated.
[04:50:50] <SnoopJ> This is a good example: https://en.wikipedia.org/wiki/Closure_(computer_programming)#Anonymous_functions
[04:51:31] <whatsupdoc> Yea i think i understand what they are
[04:51:46] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[04:51:58] <SnoopJ> I was trying to address what they're _for_
[04:52:10] <whatsupdoc> Oh lol
[04:52:52] <whatsupdoc> Idk I just feel like I'm never forced to use a closure
[04:53:10] <SnoopJ> You can write quite a lot of programs without being "forced" to use them, sure.
[04:53:12] <whatsupdoc> The way I'm forced to use if-else or for loops
[04:53:19] <SnoopJ> At least, not forced in a way you're aware of.
[04:53:46] <madduck> Are there any vim users here with a smart idea of how to configure Vim for proper lin wrapping? I am especially annoyed by it constantly trying to wrap within my strings
[04:54:02] <MacGyver> You're not forced to use if-else or for-loops either, usually. You just use them because they seem to be the natural way to express what you want to do.
[04:54:09] <MacGyver> Same with closures.
[04:54:47] <jinsun> you can resist the force of for loops with iter and next and lots of copy paste (don't)
[04:55:29] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:55:40] <MacGyver> Also there are things that are closures that you're not aware of when using them.
[04:55:43] *** Quits: subopt (~subopt@2603-8081-2302-459a-e428-389a-706c-5538.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:56:00] <MacGyver> The way python implements currying for example, with functools.partial? That's all closures.
[04:57:03] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:57:13] <MacGyver> (Actually I think it is, I'm not sure now I've said it.)
[04:57:45] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[04:58:22] <SnoopJ> whatsupdoc, decoration is a pattern thats let you add behavior to objects (i.e. to "decorate" them). A decorator is the object that does this. In Python, a decorator is a callable that 'eats' an object and usually spits out an object of roughly the same sort, maybe with some changes.
[04:59:03] <SnoopJ> The @foo syntax is applying foo to whatever's being defined below it (a function or class)
[04:59:40] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:ec30:badc:b3fd:8af2) (Quit: Client closed)
[05:01:35] *** Joins: elkclone (~elkclone@user/elkclone)
[05:01:49] <SnoopJ> MacGyver, I don't think partial really uses closures, no, it's a special type of callable object that keeps track of what you told it about: https://github.com/python/cpython/blob/main/Modules/_functoolsmodule.c#L36-L44 (but I don't know _functools.c very well)
[05:03:01] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[05:03:24] <SnoopJ> The concept is used inside the language itself, though, because the interpreter has to keep track of things like "a function defined inside a function"
[05:03:48] <SnoopJ> s/language/implementation/
[05:05:31] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:06:04] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 252 seconds)
[05:06:04] *** brabrax_ is now known as brabrax
[05:06:34] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[05:07:00] *** Quits: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:ac08:8774:7e5b:2a4) (Quit: Textual IRC Client: www.textualapp.com)
[05:12:22] *** Quits: whatsupdoc (~whatsupdo@148.64.18.230) (Quit: Client closed)
[05:14:53] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[05:17:31] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[05:19:03] *** Joins: nomic2 (~nomic@185.217.117.233)
[05:19:08] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:655d:868c:5af:b90) (Quit: Client closed)
[05:19:28] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 265 seconds)
[05:20:46] *** Joins: giacomo-c (~giacomo@107.13.177.67)
[05:20:52] *** Quits: nomic (~nomic@185.217.117.221) (Ping timeout: 252 seconds)
[05:20:55] *** Quits: techsurvivor (~don@cpe-70-114-183-69.austin.res.rr.com) (Ping timeout: 265 seconds)
[05:20:58] *** Quits: giacomo (giacomo@gateway/vpn/protonvpn/giacomo) (Ping timeout: 260 seconds)
[05:21:01] *** Joins: ozoned (~odoood@2601:c8:c003:a550::3)
[05:21:03] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[05:21:13] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[05:21:53] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Read error: Connection reset by peer)
[05:22:52] *** Joins: yossarian (~yossarian@ool-44c5f2f7.dyn.optonline.net)
[05:24:54] *** Quits: nomic2 (~nomic@185.217.117.233) (Quit: Leaving)
[05:25:11] *** Joins: nomic (~nomic@185.217.117.233)
[05:26:45] *** Joins: Barones (~Barones@2804:214:819d:d948:ac98:dc45:263b:b06e)
[05:27:22] *** Joins: Sky_Net (~Sky_Net@176.14.213.149)
[05:27:40] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[05:28:12] *** Quits: ozoned (~odoood@2601:c8:c003:a550::3) (Read error: Connection reset by peer)
[05:28:35] *** Quits: ShinyCyril (~ShinyCyri@65.79.144.153) (Quit: ShinyCyril)
[05:29:06] *** moose`` is now known as moose
[05:29:35] *** Joins: ShinyCyril (~ShinyCyri@65.79.144.153)
[05:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[05:30:50] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[05:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[05:32:44] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[05:33:19] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[05:33:51] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[05:34:34] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[05:35:06] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[05:35:26] *** Quits: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) (Quit: bilb_ono)
[05:35:49] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[05:35:53] *** Quits: Sky_Net (~Sky_Net@176.14.213.149) (Quit: Leaving)
[05:36:46] *** MightyMu_ is now known as MightyMu
[05:37:11] *** Quits: DerpGusta (~quassel@user/derpgusta) (Ping timeout: 245 seconds)
[05:37:43] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[05:38:02] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:39:19] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:40:05] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 250 seconds)
[05:40:42] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[05:40:56] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[05:41:06] *** Joins: morrigan (~m0rr1gan@user/m0rr1gan)
[05:42:14] *** Joins: sudomann (~sudomann@73.183.118.9)
[05:43:38] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 265 seconds)
[05:43:38] *** Quits: morrigan_ (~m0rr1gan@user/m0rr1gan) (Ping timeout: 265 seconds)
[05:44:18] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:44:53] *** Joins: cheater (~Username@user/cheater)
[05:46:20] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Remote host closed the connection)
[05:47:49] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[05:48:37] *** Joins: DerpGusta (~quassel@user/derpgusta)
[05:49:13] *** Quits: yossarian (~yossarian@ool-44c5f2f7.dyn.optonline.net) (Changing host)
[05:49:13] *** Joins: yossarian (~yossarian@user/yossarian)
[05:50:24] <madprops> can I send input directly to a shell program, instead of using echo?
[05:51:24] *** Joins: fabulaztika (~oghoaglag@128.65.233.146)
[05:51:52] <lastshell> madprops sure, read about pipes
[05:54:15] <KirkMcDonald> Or the input parameter to subprocess.run()
[05:57:42] <madprops> I'm piping a string to rofi, but it doesn't seem to pick it up
[05:58:19] <madprops> usually i echo and pipe it
[05:58:37] <madprops> p1.communicate("aaa\nbbb")
[05:59:04] <fabulaztika> Howdy good people, Is there any way or any framework with the intention of measuring the amount of memory used after running a certain python code? Specially if we're comparing defined functions/classes in python with a C++ extension using ref counting.
[06:00:02] *** Joins: genoobie (~genoobie@pool-74-110-61-101.bflony.fios.verizon.net)
[06:00:02] <yossarian> madprops: it's probably blocking, waiting for EOF
[06:00:28] *** Quits: NeoCore (~neocore@195.200.221.23) (Quit: Leaving)
[06:00:39] <yossarian> you need to either close the input handle or use an API that sends a single string as the input buffer and does the close for you
[06:00:53] <madprops> memoryview: a bytes-like object is required, not 'str'
[06:01:45] <SnoopJ> fabulaztika, Scalene is a relatively recent sampling profiler that might be useful to you. I've also done this sort of thing with a relatively dumb tool that just uses the `psutil` library to keep tabs on a process.
[06:01:56] <genoobie> hey all!  Ii've got a question.  I've got some code that basically sends the IP address of a headless pi to my email.  Here's the question.  The first guide I followed had me install ssmtp and mailutils.  At the end of the day, that code didn't work.  Turned out ssmtp was deprecated for Raspbian Buster.
[06:01:59] *** Quits: ShinyCyril (~ShinyCyri@65.79.144.153) (Quit: ShinyCyril)
[06:02:00] <madprops> p1.communicate(bytes("aaa\nbbb", "utf-8"))
[06:02:02] <madprops> this fixed it
[06:02:08] <fabulaztika> thank u <3
[06:02:24] *** Joins: Atque (~Atque@user/atque)
[06:02:29] <yossarian> madprops: you can probably also open the subprocess with `text=True` or something like that, to avoid the `bytes(...)` conversion
[06:02:53] <madprops> yossarian, true, that also works
[06:03:09] *** Quits: saribro (~swinnenb@user/swinnenb) (Remote host closed the connection)
[06:03:10] <MacGyver> genoobie: That's not a question, that's a story.
[06:03:29] <genoobie> but I want to understand this better.  So my code has a couple of "import" lines, subprocess, smtplib, email.mime.text import MIMEText, import datetime
[06:03:39] <MacGyver> Ah, you weren't done :)
[06:03:57] <genoobie> do I need to have msmtp and mailutils installed to have this code work?
[06:04:44] <MacGyver> No, those are standard python libraries.
[06:05:16] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[06:05:19] <MacGyver> I mean if somewhere in the code it calls out to other programs, yes, but the libraries imported there stand on their own.
[06:05:59] <yossarian> if they're trying to send an email from the device, they either need to have an SMTP server installed or to be connecting to one
[06:06:04] <jinsun> but since it is Raspbian you'll have to install those seprately anyway probably
[06:06:12] <yossarian> genoobie: are you using an SMTP provider, or are you trying to use a local SMTP server?
[06:06:55] <genoobie> okay, so let me put up a pastebin of the code
[06:08:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:12:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:12:34] *** Quits: Guest9924 (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[06:13:57] *** Joins: sudomann (~sudomann@73.183.118.9)
[06:15:11] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 268 seconds)
[06:15:32] <genoobie> ugh sorry for the delay, the pastebin is https://pastebin.com/RnRTAU7Y
[06:15:33] <infobob> https://bpaste.net/CC6A (repasted for genoobie)
[06:15:54] <genoobie> so I don't know the answer to your questions yossarian
[06:16:14] <genoobie> I don't know if the code is using a local or SMTP provider.
[06:16:29] <yossarian> genoobie: looks like it's using gmail, so it's using a remote provider
[06:17:00] <genoobie> so I could technically uninstall msmtp, uninstall mailutils and all should still run ok?
[06:17:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:17:31] <genoobie> I mean with that code?
[06:17:47] <yossarian> i *think* so? it doesn't seem like you're using any of that
[06:17:59] <genoobie> okay, cool and thanks!
[06:18:10] <yossarian> but keep in mind that Google discourages using their SMTP gateway like this, so you might run into some issues with it
[06:18:16] <yossarian> but they won't be related to those programs
[06:18:37] <genoobie> bbiam after I unisntall those things and delete the .conf files.
[06:18:41] <yossarian> (you might have to enable SMTP on your gmail account, IIRC)
[06:19:24] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[06:19:28] <genoobie> yeah, I had to turn off "less secure apps" or some such IIRC
[06:20:48] *** Joins: Buliarou1 (~gypsydang@185.207.166.57)
[06:20:53] *** Quits: INeedAHandle (~INeedAHan@211.192.133.205) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:22:23] *** Joins: sudomann (~sudomann@73.183.118.9)
[06:22:28] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:22:37] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:24:04] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:24:43] <genoobie> can I remove the whole ssmtp folder in etc if I uninstalled ssmtp?
[06:25:56] <yossarian> ¯\_(ツ)_/¯
[06:26:01] <yossarian> probably? find out what happens :-)
[06:26:07] <MacGyver> Ask your distribution's support channel.
[06:26:52] <MacGyver> (The answer is likely yes but no guarantees from us)
[06:27:56] <InPhase> genoobie: apt purge instead of apt remove
[06:28:11] *** Quits: aknot (~aknot@2603:900a:1503:17bb:1968:150e:2b56:2737) (Ping timeout: 250 seconds)
[06:28:31] <InPhase> genoobie: If not an apt system, reinstall a new linux distribution and try again.  :)
[06:28:51] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[06:30:24] *** Quits: oldguy (~oldguy@user/oldguy) (Quit: WeeChat 2.3)
[06:30:54] *** Quits: Barones (~Barones@2804:214:819d:d948:ac98:dc45:263b:b06e) (Quit: Leaving)
[06:30:56] *** Joins: fikran (~fikran@user/fikran)
[06:31:12] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[06:32:55] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[06:32:56] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[06:33:01] *** Joins: djapo (~archangel@user/djapo)
[06:33:04] *** Quits: akimbo (~akimbo@customer-145-40-27-9.stosn.net) (Remote host closed the connection)
[06:33:40] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:33:49] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 250 seconds)
[06:34:04] *** Joins: gravy (~gravy@220-245-7-7.static.tpgi.com.au)
[06:34:13] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:36:25] *** Quits: elwisp (~elwisp@178.73.210.32) (Ping timeout: 250 seconds)
[06:36:29] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:85f2:249c:fc8f:dca3)
[06:39:13] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[06:40:19] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 250 seconds)
[06:40:19] *** jmiehe1 is now known as jmiehe
[06:41:07] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[06:43:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:45:43] *** Joins: src (~src@user/src)
[06:46:21] *** Quits: src (~src@user/src) (Remote host closed the connection)
[06:46:38] *** Joins: src (~src@user/src)
[06:46:50] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 260 seconds)
[06:47:07] *** Joins: pyeverything (~pyeveryth@204.8.153.37)
[06:48:46] <pyeverything> could someone please help me with this pandas code? https://bpa.st/VBDA so Patient ID column type is object same as MSI Status however, I want to first find a particular patient ID and then check if his MSI Status is MSS but I can't since it gives me a pandas series
[06:49:16] <pyeverything> I tries .str.contains('MSS') and that didn't work too
[06:49:58] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Quit: Leaving)
[06:50:17] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:edb2:3e6c:cd4b:1f77)
[06:50:20] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:edb2:3e6c:cd4b:1f77) (Write error: Broken pipe)
[06:50:28] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[06:50:40] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:edb2:3e6c:cd4b:1f77)
[06:51:14] <QuaternionsRock> Is it just me or does Enum try to remove _ignore_'ed keys twice?
[06:52:47] <jinsun> pyeverything: what did you want the output to be if not pandas series?
[06:53:22] <QuaternionsRock> in enum.py, _EnumDict removes _ignore_'ed keys on line 134, and EnumMeta tries to remove them again on line 186
[06:53:55] <pyeverything> jinsun: preference is string, I basically want to access the MSS Status column of the patient ID with ID equal to 11CO052 as in  pid = df[df['Patient ID']=='11CO052']['MSI Status'] however, since it is a series, I can't check the str using contains or in methods
[06:54:19] *** Quits: genoobie (~genoobie@pool-74-110-61-101.bflony.fios.verizon.net) (Quit: Client closed)
[06:54:40] <pyeverything> jinsun:  probably there's better way to do this feel free to go over it if so as well please
[06:55:24] <jinsun> pyeverything: but what if there are more than one rows where the patient ID matches, which row will you consider then (pandas gives series always that's why)
[06:56:22] *** Joins: pluri_ (~pluri@user/pluri)
[06:56:26] <pyeverything> jinsun you are right, hmm IDK i guess i am confused.
[06:57:11] <pyeverything> jinsun: something like, for each of those rows, print if MSI Status is MSS or not? how can i achieve that?
[06:57:27] <jinsun> pyeverything: why did .str.contains not work btw? that seems like the solution
[06:57:40] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[06:58:00] *** Joins: YoungPrince (~DrBrownbe@2600:1700:9aa1:6bc0:5468:7d82:1f0a:58a1)
[06:58:01] <pyeverything> letmme try it again and report
[06:58:02] <jinsun> or did you want exactly equal to MSS? not just contains
[06:58:09] <pluri_> in using python with selenium and chromedriver, is there any reason why the same configuration/script would work on my local machine (mac), then trigger cloudflare's protection when running from a remote ubuntu server?
[06:58:36] <pyeverything> jinsun: I have to connect to another network i will be back. exactly MSS
[06:59:04] *** Quits: pyeverything (~pyeveryth@204.8.153.37) (Read error: Connection reset by peer)
[06:59:08] <jinsun> pyeverything: so do .eq("MSS") instead of .str.contains
[06:59:31] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[07:00:55] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[07:01:25] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:01:46] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:5468:7d82:1f0a:58a1) (Ping timeout: 245 seconds)
[07:02:00] *** Joins: Guest9924 (~NeilRG@192.222.196.111)
[07:02:27] *** Joins: moonmoon (awoo@libera/staff/moonmoon)
[07:04:44] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[07:04:44] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[07:05:09] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:05:17] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:3546:be8e:e7b8:5f67)
[07:06:26] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:3546:be8e:e7b8:5f67) (Client Quit)
[07:06:44] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:3546:be8e:e7b8:5f67)
[07:07:04] *** Quits: y1n (~y1n@91.141.57.213.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[07:08:03] *** Quits: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net) (Quit: WeeChat 3.3)
[07:08:54] *** Quits: promeys (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[07:10:03] *** Joins: pyever___ (~pyeveryth@BUMC-dot1x-155-41-185-202.bumc.bu.edu)
[07:12:41] <pyever___> jinsun: sorry i had difficulty logging back to my account. so i get this https://bpa.st/UVMQ
[07:13:46] <jinsun> pyever___: use .eq('MSS') for exact equality instead of .str.contains('MSS')
[07:14:19] <QuaternionsRock> Why are sets still unordered when dicts are insertion ordered and they're both hash tables?
[07:14:42] <QuaternionsRock> I would've expected the implementation of set to follow the implementation of dict
[07:14:52] <aphysically> there's some PR claiming enum creation is quartic in number of entries of using auto() (otherwise cubic)
[07:15:13] <aphysically> and fixing it to be only linear (or quadratic with auto)
[07:15:22] <pyever___> jinsun:  https://bpa.st/UMQQ so i want to check if it is MSS do something next but i can't
[07:15:49] <QuaternionsRock> aphysically why is auto() so bad?
[07:15:54] <QuaternionsRock> (can you link the PR?)
[07:16:15] <aphysically> uhh sure probably easy enough to find it was only this morning
[07:16:25] <aphysically> https://github.com/python/cpython/pull/28907
[07:16:42] <aphysically> it says quadratic but if you read the description as far as I can tell the claim is that it's actually quartic
[07:16:50] <jinsun> pyever___: okay you want a single boolean, as the error messages says, bool(series) is ambiguos,  what do you want the condition to be if there are multiple True and False
[07:17:15] <pyever___> jinsun: basically for each patient, if their MSI status is MSS, I want to move their image to MSS folder (images start with patient ID -- and yes one patient might have more than one image), and if their MSI Status is MSI-H, I want to move their images to MSI-H folder.
[07:17:31] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Ping timeout: 252 seconds)
[07:18:14] <aphysically> let me check it again
[07:18:29] <aphysically> oh maybe they just mean 3n^2 and not quartic
[07:18:52] <aphysically> makes more sense
[07:20:04] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[07:21:01] <pyever___> jinsun: does that make sense to you?
[07:22:37] <jinsun> pyever___: kinda, so why not simply loop over each row and do those things you want for each row? the filter you were trying doesn't seem like the right direction to go
[07:24:36] <QuaternionsRock> The implementation of Enum is quite ridiculous lol
[07:24:42] *** Joins: sirquack (~sirquack@2601:643:8680:526:f5ee:50a8:2d5:ce2e)
[07:24:48] <QuaternionsRock> I've been staring at it for the last few hours for something completely unrelated
[07:25:00] <sirquack> can a dictionary have multiple keys to one value?
[07:25:14] <QuaternionsRock> sirquack yes
[07:25:34] <sirquack> QuaternionsRock: how?
[07:26:05] <yossarian> sirquack: keys are unique, values are not
[07:26:22] <QuaternionsRock> Wait, are you asking if multiple keys can *reference* the same value, or if the value associated with multiple keys can be equal to each other sirquack?
[07:26:25] <pyever___> jinsun: yeah thanks that makes better sense
[07:27:07] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[07:28:34] <deltab> {'a': 1, 'b': 1}
[07:28:40] *** Joins: NetPipe (~Guest51@xplr-69-168-164-55.xplornet.com)
[07:30:05] <deltab> o = []; {'a': o, 'b': o}
[07:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[07:31:16] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[07:32:46] <pyever___> jinsun: how can I copy a directory with all of the files inside it if it starts with 01CO001 ? not sure how exactly to use shutil for dir https://stackoverflow.com/a/59756813
[07:33:24] *** Quits: NetPipe (~Guest51@xplr-69-168-164-55.xplornet.com) (Changing host)
[07:33:24] *** Joins: NetPipe (~Guest51@user/netpipe)
[07:33:58] <pyever___> shutil.copytree?
[07:35:06] *** Quits: portalrat (~portalrat@user/portalrat) (Ping timeout: 245 seconds)
[07:35:26] *** Joins: portalrat (~portalrat@user/portalrat)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:04] <jinsun> pyever___: yes, copytree should do it
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:39] *** Joins: frost (~frost@59.71.244.189)
[07:39:57] *** Quits: pluri_ (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:40:22] *** Quits: pyever___ (~pyeveryth@BUMC-dot1x-155-41-185-202.bumc.bu.edu) (Remote host closed the connection)
[07:40:53] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[07:43:44] *** Joins: pspiagicw (~user@123.136.198.193)
[07:45:10] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:46:09] <sirquack> QuaternionsRock: I'm asking if multiple keys can reference the same value
[07:47:36] <QuaternionsRock> sirquack ah, in that case, they cannot. There are several ways around that though
[07:48:14] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[07:54:02] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 260 seconds)
[07:54:23] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[07:56:45] *** Quits: Guest9924 (~NeilRG@192.222.196.111) (Quit: Leaving)
[07:58:16] <jinsun> sirquack: what does "multiple keys refering to the value" mean? like if you change one, the others change?
[07:59:00] <BrenBarn> do you mean multiple keys pointing to the same value?  sure that's possible
[07:59:15] *** Joins: Neil (~NeilRG@192.222.196.111)
[07:59:32] <BrenBarn> Are you asking like can you do `{'a': 1, 'b': 1}`?
[07:59:39] *** Neil is now known as Guest7209
[08:00:06] <QuaternionsRock> That isn't what he's asking
[08:00:34] <jinsun> not clear from the question really
[08:00:54] <jinsun> reference can mean anything
[08:00:54] <QuaternionsRock> I already asked him to clarify to be fair
[08:00:55] <Guest7209> is there an easy way to filter tracebacks?
[08:01:06] <QuaternionsRock> If you scroll up you'll see the question he was responding to
[08:02:14] <jinsun> still not clear to me, but ok if sirquack is satisfied it doesn't matter
[08:02:31] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[08:02:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[08:05:44] <jinsun> Guest7209: filter how? you can get the traceback as string in re.search things there
[08:06:11] <jinsun> s/in/and
[08:06:38] <Guest7209> jinsun, okay, thanks.  I think I found a function that does something like I want using traceback.walk_tb(tb)
[08:06:49] <aphysically> jinsun: I could try to go through the pyright issues for rich but there's so many
[08:06:52] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[08:07:01] <aphysically> and it's not even in strict mode D:
[08:08:21] <jinsun> yeah would be lot of work, would be easier if you were the owner and skip the PR process
[08:09:20] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[08:10:59] <BrenBarn> the problem is they just clarified by restating the same wording that they already used without realizing it was unclear, so the clarification isn't any more clear
[08:11:00] <aphysically> I think the maintainer is busy right now so I don't want to open up too many PRs anyway
[08:14:26] *** Quits: pspiagicw (~user@123.136.198.193) (Ping timeout: 265 seconds)
[08:14:55] *** Quits: LiftLeft (~LiftLeft@191.96.185.109) (Ping timeout: 265 seconds)
[08:16:40] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:19:56] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:20:10] *** Joins: Wulf (~Wulf@user/wulf)
[08:21:04] *** Quits: sirquack (~sirquack@2601:643:8680:526:f5ee:50a8:2d5:ce2e) (Quit: Leaving)
[08:21:09] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:24:33] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[08:24:37] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[08:25:02] *** Hash is now known as LordOfThePings
[08:27:07] *** Joins: sudomann (~sudomann@73.183.118.9)
[08:27:07] *** Quits: NetPipe (~Guest51@user/netpipe) (Quit: Client closed)
[08:28:19] *** Joins: akimbo (~akimbo@customer-145-40-27-9.stosn.net)
[08:28:36] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[08:28:40] *** LordOfThePings is now known as EnchanterTim
[08:28:55] *** Joins: stranac (~stranac@195.29.239.126)
[08:30:52] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[08:31:01] *** Joins: NetPipe (~NetPipe@user/netpipe)
[08:31:21] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Ping timeout: 245 seconds)
[08:31:22] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:23] <NetPipe> anyone here good with pygame and looking for work ?
[08:32:41] <NetPipe> https://github.com/netpipe/Luna/blob/master/media/8ball.pys i have code like this ready
[08:33:02] <NetPipe> box2d physics support too
[08:33:14] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Ping timeout: 260 seconds)
[08:33:22] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[08:34:17] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[08:35:01] *** Joins: brabrax (~brabrax@user/brabrax)
[08:38:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[08:39:07] *** Joins: fdan (~fdan@103.215.168.1)
[08:39:17] *** Quits: Guest7209 (~NeilRG@192.222.196.111) (Quit: Leaving)
[08:39:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:40:18] *** Joins: fikran (~fikran@user/fikran)
[08:40:37] *** Joins: pspiagicw (~user@123.136.198.193)
[08:40:45] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[08:42:23] <NeilRG> does anyone know how to get the current traceback object that I can pass to walk_tb?
[08:42:51] <NeilRG>         list(walk_tb(extract_stack(()))) doesn't work
[08:42:57] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[08:43:02] *** Quits: ATAD (~ATAD@user/atad) (Ping timeout: 260 seconds)
[08:44:27] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[08:44:32] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[08:45:15] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[08:45:41] *** Joins: upsala (~zcb@185.213.155.160)
[08:45:46] <Wulf> NeilRG: you can raise an exception and catch it
[08:45:56] *** Joins: Maple (uid10029@user/maple)
[08:45:59] <NeilRG> Wulf, is there no way to get the current stack otherwise?
[08:46:13] <Wulf> NeilRG: as a traceback? I don't know a way.
[08:46:15] <NeilRG> how does print_stack do it?
[08:46:36] <Wulf> NeilRG: but there's e.g. sys._current_frames
[08:46:59] <NeilRG> Wulf, probably better to raise an exception than to poke around into private members
[08:47:14] *** Joins: Maple_ (~Maple@user/maple)
[08:47:24] <Wulf> and sys._getframe
[08:47:57] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[08:48:24] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: It's that time again.)
[08:48:25] <NeilRG> Wulf, oh I see.  Do you think it's fine to just do that then?
[08:49:13] <Wulf> NeilRG: I'd throw the exception.
[08:49:29] <NeilRG> Wulf,  okay, and then how do produce something I can call walk_tb on?
[08:50:03] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:50:13] <Wulf> NeilRG: sys.exc_info
[08:50:22] <NeilRG> Wulf, sorry, what?
[08:51:17] <Wulf> try: raise Exception  except Exception: tb = sys.exc_info()[2]
[08:51:23] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[08:52:29] *** Joins: sudomann (~sudomann@73.183.118.9)
[08:53:47] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[08:54:19] <NeilRG> Wulf, thanks
[08:55:19] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:57:39] *** Joins: stoneware (~stoneware@user/stoneware)
[08:57:56] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 265 seconds)
[08:57:58] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 260 seconds)
[09:00:05] *** Joins: sudomann (~sudomann@73.183.118.9)
[09:01:34] *** Quits: Maple_ (~Maple@user/maple) (Quit: WeeChat 3.3)
[09:04:24] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[09:07:30] <NeilRG> Wulf, it doesn't work
[09:07:39] <NeilRG> it's only getting the last frame
[09:07:50] <NeilRG> how do I pull the stack out of an exception?
[09:08:13] <NeilRG> maybe:        except Exception as e:
[09:08:13] <NeilRG>             tb = e.__traceback__
[09:08:55] <NeilRG> hmm, that's still not working
[09:09:17] <BrenBarn> Why did you pass () as an argument to `extract_stack`?
[09:09:19] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[09:09:41] *** Joins: ATAD (~ATAD@user/atad)
[09:10:27] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:11:25] *** Joins: txtsd (~txtsd@user/txtsd)
[09:12:32] <KirkMcDonald> NeilRG: I think I need to clarify the somewhat subtle distinction between a traceback and a stack trace.
[09:12:42] <NeilRG> KirkMcDonald, please
[09:12:49] <KirkMcDonald> Or perhaps s/stack trace/call stack/
[09:13:08] <KirkMcDonald> The call stack is the current stack of live stack frames.
[09:13:26] <KirkMcDonald> Extending from the program's entry point to the function that you are currently in.
[09:13:50] <KirkMcDonald> A traceback is a thing that is begun when an exception is raised and built as it unwinds the call stack.
[09:14:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[09:14:17] <KirkMcDonald> In essence, as an exception propagates, frames are transferred from the call stack to the traceback.
[09:14:30] *** Quits: ckdCreations (~ckdCreati@147.55.133.139) (Read error: Connection reset by peer)
[09:14:46] <KirkMcDonald> The traceback module give you access to both.
[09:14:46] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[09:15:11] <KirkMcDonald> Which is why basically everything in there is in there twice.
[09:18:56] *** Joins: pagnol (~user@014198154145.ctinets.com)
[09:19:02] <NeilRG> KirkMcDonald, ok, so how do I get the call stack?
[09:20:14] <KirkMcDonald> NeilRG: It'd be walk_stack rather than walk_tb, for one thing.
[09:20:42] <NeilRG> KirkMcDonald, okay, unfortunately, I can't change that
[09:20:51] <NeilRG> the walk_tb is in library code
[09:20:58] <NeilRG> so I need to produce whatever walk_tb accepts
[09:21:09] *** Quits: ravan__ (~ravan@user/ravan) (Quit: Leaving)
[09:21:30] <KirkMcDonald> NeilRG: Then I'm a little unclear on the overall problem you're trying to solve.
[09:21:42] <NeilRG> KirkMcDonald, I want to call this filtering function that's in a library
[09:21:45] *** Joins: ravan__ (~ravan@user/ravan)
[09:21:50] *** Quits: ravan__ (~ravan@user/ravan) (Read error: Connection reset by peer)
[09:21:51] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:e9f9:3245:a633:dd76)
[09:21:55] <NeilRG> the filtering function filters a traceback object (whatever thtat is)
[09:22:05] <NeilRG> I would like produce such a traceback object corresponding to the call stack
[09:22:19] <NeilRG> can I convert a call stack to a traceback?
[09:22:29] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[09:22:37] <KirkMcDonald> You can raise an exception and unwind the stack.
[09:23:12] <NeilRG> KirkMcDonald, so I'd have to catch the exception somehwere else?
[09:23:16] <NeilRG> that wouldn't work for me
[09:23:23] <NeilRG> does extract_stack?
[09:23:27] <NeilRG> ...work?
[09:24:52] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:25:43] <KirkMcDonald> It does the thing that it does.
[09:25:54] *** Joins: Tas-sos (~Tas-sos@ppp141237137165.access.hol.gr)
[09:26:36] <NeilRG> ok
[09:27:16] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[09:27:20] <KirkMcDonald> Man, I am reading the documentation for the traceback module, and this thing is fairly unclear in places.
[09:28:23] *** Quits: src (~src@user/src) (Ping timeout: 265 seconds)
[09:28:28] *** Quits: YoungPrince (~DrBrownbe@2600:1700:9aa1:6bc0:5468:7d82:1f0a:58a1) (Quit: Leaving)
[09:29:07] <NeilRG> KirkMcDonald, yeah :)
[09:30:00] <KirkMcDonald> In any case, walk_tb wants an actual traceback object.
[09:30:26] <KirkMcDonald> The thing built as an exception unwinds the stack and is assigned to the exception object's .__traceback__ attribute.
[09:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:31:46] <BrenBarn> have you seen this: https://stackoverflow.com/questions/27138440/how-to-create-a-traceback-object
[09:32:18] *** Joins: ExeciN (~ExeciN@user/nicexe)
[09:34:13] *** Joins: sudomann (~sudomann@73.183.118.9)
[09:40:14] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[09:40:28] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:e9f9:3245:a633:dd76) (Quit: WeeChat 2.8)
[09:40:31] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[09:42:17] *** Joins: manti7 (~manti7@176.10.104.94)
[09:42:49] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[09:44:17] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[09:44:28] *** Parts: nickodd (~nickodd@user/nickodd) ()
[09:44:44] *** Joins: kosh (~kosh@user/kosh)
[09:46:32] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:04] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[09:47:15] *** Joins: seednode (~seednode@user/seednode)
[09:48:25] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[09:50:18] *** Joins: carl- (~carl-@185.103.188.131)
[09:55:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:00:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[10:03:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[10:04:37] *** Joins: pradhvan (~pradhvan@dgplug/pradhvan)
[10:05:10] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:85f2:249c:fc8f:dca3) (Ping timeout: 260 seconds)
[10:05:29] *** Joins: gusto (~Augustus@2620:149:e0:6001::93)
[10:05:32] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:06:33] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:07:15] *** Joins: sudomann (~sudomann@73.183.118.9)
[10:07:36] *** Quits: gusto (~Augustus@2620:149:e0:6001::93) (Client Quit)
[10:11:09] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[10:11:30] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[10:12:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[10:14:38] *** Joins: nickodd (~nickodd@user/nickodd)
[10:15:31] *** Gustavo6046_ is now known as Gustavo6046
[10:15:43] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 252 seconds)
[10:17:17] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:17:19] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[10:19:58] <aphysically> cpython is stackless now? :thinking:
[10:21:19] *** Joins: carl-- (~carl-@185.103.188.130)
[10:23:15] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[10:23:26] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:ed9e:cfca:43af:b59b)
[10:23:55] *** Quits: carl- (~carl-@185.103.188.131) (Ping timeout: 250 seconds)
[10:24:57] <mawk> is it though
[10:25:46] <aphysically> well if I can't trust the creator of stackless python who can I trust? https://bugs.python.org/issue45256#msg402485
[10:25:56] * aphysically is off to bed
[10:28:04] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[10:28:10] *** Joins: mrwick (~mrwick@user/mrwick)
[10:28:11] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[10:29:01] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[10:29:16] *** Joins: palasso (~palasso@user/palasso)
[10:29:21] *** Joins: gusto (~Augustus@109.255.100.54)
[10:30:47] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[10:31:18] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:32:44] *** Joins: zuQe87 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net)
[10:33:17] *** Quits: zuQe8 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net) (Ping timeout: 265 seconds)
[10:33:17] *** zuQe87 is now known as zuQe8
[10:34:13] *** Joins: orbatos__ (~orbatos@user/orbatos)
[10:35:56] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:36:37] *** Quits: orbatos_ (~orbatos@user/orbatos) (Ping timeout: 252 seconds)
[10:39:55] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 265 seconds)
[10:42:30] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 260 seconds)
[10:44:16] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[10:45:09] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[10:46:14] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:e9f9:3245:a633:dd76)
[10:47:02] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:edb2:3e6c:cd4b:1f77) (Quit: Client closed)
[10:47:21] *** Joins: chele (~chele@user/chele)
[10:47:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[10:48:03] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Remote host closed the connection)
[10:48:37] *** Joins: p-i- (~Ohmu@223.206.71.4)
[10:48:45] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[10:49:38] *** Joins: fikran (~fikran@user/fikran)
[10:50:13] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 268 seconds)
[10:53:38] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[11:53:52] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[11:53:53] *** Joins: rud0lf (rud0lf@user/rud0lf)
[11:54:08] *** Joins: _0az3 (~az0@user/az0)
[11:54:12] *** Quits: mpmc (~mpmc@user/mpmc) (Remote host closed the connection)
[11:54:21] *** Joins: Yorick_ (znc@vps.freegamehosting.eu)
[11:54:38] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[11:54:41] *** Joins: tonitch (~tonitch@user/tonitch)
[11:54:44] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[11:54:48] <b_jonas> Repiphany_: try http://oeis.org/search?q=567898765
[11:55:00] *** Joins: agireud (~agireud@136.49.88.21)
[11:55:06] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:55:27] <QuaternionsRock> Does anyone know where the type hints in collections.abc come from? For instance, MutableMapping.__setitem__ has TypeVars '_KT' and '_VT' as annotations in both vscode and pycharm, which leads me to believe that they are defined in CPython rather than in a IDE-defined helper
[11:55:32] <Repiphany_> I'm trying to get gitesh to define their problem more specifically, I don't actually care
[11:55:33] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[11:56:00] *** Server sets mode: +Ccnrtf #python-unregistered
[11:56:11] *** Joins: ubert (~Thunderbi@178.165.161.120.wireless.dyn.drei.com)
[11:56:25] *** Joins: rodstewart (~dmartins@188.ip-149-56-97.net)
[11:56:26] *** Joins: mpmc (~mpmc@user/mpmc)
[11:56:27] *** Joins: deetwelve (~deetwelve@user/deetwelve)
[11:56:50] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[11:56:55] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:57:00] *** Quits: VaniaPy (~VaniaPy@adsl-234.176.58.193.tellas.gr) (*.net *.split)
[11:57:00] *** Quits: ravan (~ravan@user/ravan) (*.net *.split)
[11:57:00] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[11:57:00] *** Quits: Skyfire (~pyon@user/pyon) (*.net *.split)
[11:57:00] *** Quits: vodkra (~vodkra@user/vodkra) (*.net *.split)
[11:57:00] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (*.net *.split)
[11:57:00] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (*.net *.split)
[11:57:00] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (*.net *.split)
[11:57:00] *** Quits: Peng_ (~mnordhoff@ultimate1.mnrd.us) (*.net *.split)
[11:57:00] *** Quits: jrabbit (~jack@user/jrabbit) (*.net *.split)
[11:57:00] *** Quits: tpr (~tpr@user/tpr) (*.net *.split)
[11:57:00] *** Quits: vegii (~quassel@2001:470:1f18:3aa:30f::5439) (*.net *.split)
[11:57:00] *** Quits: mwilson (mwilson@2600:3c01::f03c:92ff:fe7f:1149) (*.net *.split)
[11:57:00] *** Quits: leonardo (~leonardo@user/leonardo) (*.net *.split)
[11:57:00] *** Quits: madduck (~madduck@user/madduck) (*.net *.split)
[11:57:00] *** Quits: SnoopJ (~snoopj@user/snoopj) (*.net *.split)
[11:57:00] *** Quits: mumixam (~m@user/mumixam) (*.net *.split)
[11:57:00] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[11:57:00] *** Quits: TechSmurf (~tech@user/techsmurf) (*.net *.split)
[11:57:00] *** Quits: korros (korros@2600:3c03::f03c:92ff:febf:689a) (*.net *.split)
[11:57:00] *** Quits: LostInWeb (~quassel@narvi.bifroest.eu) (*.net *.split)
[11:57:27] *** Joins: zepolen (~zepolen@2a02:587:8600:1ad4:fd93:9610:683a:b386)
[11:57:59] *** Joins: stockholm (~Andreas@p200300d2c706a40058a161e52931af9e.dip0.t-ipconnect.de)
[11:58:01] *** Joins: plastico (~plastico@neomutt/plastico)
[11:58:19] *** Quits: m1dnight (~christoph@188.ip-51-91-158.eu) (Client Quit)
[11:58:43] *** Joins: xakan (~xakan@ns354170.ip-91-121-101.eu)
[11:59:17] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (Ping timeout: 268 seconds)
[11:59:20] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[11:59:26] <rindolf> gitesh: you can use two for loops
[11:59:27] *** Joins: user3456_ (user3456@user/user3456)
[11:59:30] <Repiphany_> gitesh: https://bpa.st/NX6Q
[12:00:09] *** Joins: u4t (~chat@78.ip-139-99-236.net)
[12:00:13] *** Quits: user3456 (~user3456@user/user3456) (Ping timeout: 252 seconds)
[12:00:16] *** user3456_ is now known as user3456
[12:00:20] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[12:00:55] <gitesh> Repiphany_: I could do this :) :(
[12:01:19] *** Joins: iwkse (~iwkse@iurit.com)
[12:01:33] *** Joins: tabakhase (tabakhase@user/tabakhase)
[12:01:42] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[12:02:12] *** Joins: semeion (~semeion@user/semeion)
[12:02:13] <jinsun> QuaternionsRock: it is in typeshed, https://github.com/python/typeshed/blob/54ff11bf9fefe0578a81ef32e4f42c1285f01d3d/stdlib/typing.pyi#L91
[12:03:41] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[12:03:41] *** Joins: Skyfire (~pyon@user/pyon)
[12:03:41] *** Joins: vodkra (~vodkra@user/vodkra)
[12:03:41] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[12:03:41] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[12:03:41] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[12:03:41] *** Joins: Peng_ (~mnordhoff@ultimate1.mnrd.us)
[12:03:41] *** Joins: jrabbit (~jack@user/jrabbit)
[12:03:41] *** Joins: tpr (~tpr@user/tpr)
[12:03:41] *** Joins: vegii (~quassel@2001:470:1f18:3aa:30f::5439)
[12:03:41] *** Joins: mwilson (mwilson@2600:3c01::f03c:92ff:fe7f:1149)
[12:03:41] *** Joins: leonardo (~leonardo@user/leonardo)
[12:03:41] *** Joins: madduck (~madduck@user/madduck)
[12:03:41] *** Joins: SnoopJ (~snoopj@user/snoopj)
[12:03:41] *** Joins: mumixam (~m@user/mumixam)
[12:03:41] *** Joins: TechSmurf (~tech@user/techsmurf)
[12:03:41] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[12:03:41] *** Joins: korros (korros@2600:3c03::f03c:92ff:febf:689a)
[12:03:41] *** Joins: LostInWeb (~quassel@narvi.bifroest.eu)
[12:03:47] <QuaternionsRock> tysm
[12:03:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[12:04:03] <gitesh> Repiphany_: ty
[12:04:41] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:05:15] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[12:05:40] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[12:05:56] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[12:06:04] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[12:06:22] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:07:15] *** Joins: mantiX (~manti7@176.10.104.94)
[12:09:09] *** Joins: m1dnight (~christoph@xvm-104-119.dc0.ghst.net)
[12:10:06] *** enkrypt_ is now known as enkrypt
[12:10:07] *** Joins: Klinda (~superleag@user/klinda)
[12:11:00] *** Joins: Byteflux (~byte@byteflux.net)
[12:14:36] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[12:14:39] <Qria> No one answered my question here so I posted a stackoverflow question: https://stackoverflow.com/questions/69552365/unexpected-performance-degradation-in-unpickled-set-in-python
[12:15:16] *** Joins: Ben10 (~Ben10@217.138.200.26)
[12:15:49] *** Joins: shangxiao (~davids@124.187.230.212)
[12:16:34] *** Quits: theo (~theo@user/theo) (Ping timeout: 265 seconds)
[12:17:02] *** Joins: Henry151 (~bishop@user/henry151)
[12:17:32] *** Joins: theo (~theo@user/theo)
[12:17:45] *** Joins: neolem (~neolem@gueuti.fr)
[12:18:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:18:31] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:18:33] *** Quits: ravan_ (~ravan@user/ravan) (Quit: Leaving)
[12:18:46] *** Joins: ravan_ (~ravan@user/ravan)
[12:18:59] *** Quits: ravan_ (~ravan@user/ravan) (Read error: Connection reset by peer)
[12:19:29] <Peng> I'm speculating, but in the unpickled version, maybe each int is a separate instance, and maybe that has an impact.
[12:19:43] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:20:01] <Peng> (In CPython, small ints are always interned, but you go up to 1999.)
[12:20:29] *** Joins: dTal (quassel@dragonbox/wizzard/dtal)
[12:20:32] *** Joins: hays (rootvegeta@fsf/member/hays)
[12:20:44] *** Joins: mgubyt (u@mgub.yt)
[12:20:44] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[12:20:50] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[12:20:51] *** Joins: jor (~jor@jor.link)
[12:20:58] *** Joins: yolk (~yolk@ec2-18-220-87-120.us-east-2.compute.amazonaws.com)
[12:21:02] *** Joins: derelict (derelict@user/derelict)
[12:21:02] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[12:21:04] *** Joins: kevr (~kevr@user/kevr)
[12:21:11] *** Joins: bkhl (~bkhl@user/bkhl)
[12:21:12] *** Joins: webmind (~webmind@user/webmind)
[12:21:16] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[12:21:18] *** Joins: toine (~antoine@2001:41d0:e:41f::1)
[12:21:19] *** Joins: catbeard (~noise@user/catbeard)
[12:21:22] *** Joins: vishwin (~brioux@pool-108-36-200-79.phlapa.fios.verizon.net)
[12:21:24] *** Joins: truth (~truth@user/truth)
[12:21:24] *** Joins: graingert (sid128301@2a03:5180:f::1:f52d)
[12:21:25] *** Joins: blue_rog (~blue_rog@2400:6180:0:d0::89:1)
[12:21:33] *** Joins: d33tah (~d33tah@2a03:b0c0:3:d0::14d2:c001)
[12:21:36] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:3062:484d:dd96:3195)
[12:21:50] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[12:21:51] *** Joins: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net)
[12:21:56] <Qria> @Peng Good idea but I'm testing it with string(`[n] -> [str(n)]`) and the result is same
[12:22:24] *** Joins: znf (~ibm86@toaster.linge-ma.ro)
[12:22:46] <Peng> I'm not sure what you mena
[12:22:48] *** Joins: arinov (~arinov@213.194.126.155)
[12:22:48] <Peng> mean*
[12:22:52] <Peng> I'm sure I can't type
[12:23:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[12:23:20] *** Quits: u4t (~chat@78.ip-139-99-236.net) (Ping timeout: 265 seconds)
[12:24:16] *** Joins: u4t (~chat@78.ip-139-99-236.net)
[12:24:18] *** Joins: The-Compiler (~compiler@the-compiler.org)
[12:24:40] *** Parts: Ben10 (~Ben10@217.138.200.26) ()
[12:25:39] *** waveform_ is now known as waveform
[12:26:34] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[12:26:37] <Qria> Were you not suggesting that because I am pickling an integer it can have impact? I am saying that I can change it to pickle string instead and still reproduce the issue
[12:26:58] *** Joins: Abrax (~Abrax@user/abrax)
[12:28:34] <Peng> Strings would behave essentially the same way under the circumstances
[12:28:37] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[12:28:45] <hexnewbie> Qria: It could be the order
[12:28:51] *** Joins: menace (~someone@user/menace)
[12:29:14] <Peng> On the other hand, my idea is probably wrong, pickle/unpickle probably shouldn't change data like that?
[12:29:15] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:30:06] <Qria> @hexnewbie order of?
[12:30:57] <hexnewbie> Qria: Actually, Peng is correct about the interning, except it's not interning as much as having the same instance
[12:31:12] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[12:31:23] <hexnewbie> Qria: data & subset and data3 & subset3 only compare pointers, data2 & subset2 compares content
[12:31:43] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:32:01] <Peng> Ah!
[12:32:24] <hexnewbie> If there *was* interning, there wouldn't be performance difference
[12:32:40] <Qria> That is very interesting. But what causes data2 and data3 to behave differently?
[12:32:46] <Peng> There *is* interning, but only for small ints, so it wouldn't have a significant effect.
[12:33:10] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (Ping timeout: 252 seconds)
[12:33:30] <Peng> If you changed 2000 to 200, interning might have a significant performance impact
[12:33:32] <hexnewbie> Qria: You serialized them separately, so 3 in the one set and 3003 in the other set would be two different instances of 3003. If you serialized them together, they would point to the same 3003
[12:33:46] <hexnewbie> s/ 3 / 3003 / since 3 is interned
[12:33:57] <Qria> Oh I see
[12:34:24] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[12:34:46] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[12:35:03] *** neolem[m] is now known as neolem_
[12:35:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[12:35:38] <hexnewbie> I do some extreme form of explicit interning of strings with sys.intern() in two of my project, but that's mostly due to memory usage, CPU performance is secondary
[12:36:06] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[12:36:10] <Qria> I have checked `id()` of the objects and you were right @hexnewbie thank you
[12:36:11] <hexnewbie> In fact, unless timed and profiled the sys.intern() call might be hurting the performance
[12:36:38] <hexnewbie> (Also, it can't be used on non-strings)
[12:36:39] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-04cc-b6ed-267b-4319.res6.spectrum.com) (Quit: jarthur_)
[12:37:08] *** neolem_ is now known as neolem[m]
[12:37:27] *** Quits: neolem (~neolem@gueuti.fr) (Quit: The Lounge - https://thelounge.chat)
[12:37:29] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:37:36] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 245 seconds)
[12:37:40] *** neolem[m] is now known as neolem
[12:38:03] *** Joins: neolem3 (~neolem@gueuti.fr)
[12:38:25] *** neolem is now known as neolem[m]
[12:38:37] *** neolem3 is now known as neolem
[12:38:43] *** Quits: y1n (~y1n@178.115.76.222.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[12:39:42] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[12:39:45] *** Joins: koziad (~koz@user/koziad/x-1285628)
[12:39:47] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[12:42:58] *** Quits: oz4ga (~tim@93.90.4.233) (Quit: ZNC 1.8.2 - https://znc.in)
[12:43:48] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:47:40] <nedbat> Qria: it's not the 3003 is the same object or not, it's whether tuple([3003]*100) is the same object or not
[12:48:20] *** Joins: mari0 (~mario@user/mari0)
[12:48:39] <hexnewbie> Oh, nedbat is right. I didn't even *notice* the list. That makes it way, way, way worse.
[12:49:12] *** Joins: yeirr (~yeirr@user/yeirr)
[12:49:16] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (Quit: WeeChat 3.2)
[12:50:23] *** Quits: brentaarnold (~brentaarn@32.132.115.46) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[12:50:47] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[12:50:50] *** Joins: Ninpo (~Ninpo@user/ninpo)
[12:51:11] *** lorenzosu_ is now known as lorenzosu
[12:51:54] <nedbat> Qria was testing those ids in the last example
[12:52:31] *** Joins: y1n (~y1n@178.115.35.10.wireless.dyn.drei.com)
[12:52:53] <Qria> The original problem I had was with big dataclasses fyi
[12:53:32] <nedbat> Qria: tuple equality is:  def tuple_eq(t1, t2): if t1 is t2: return True;; else: return all(e1 == e2 for e1, e2 in zip(t1, t2))
[12:53:42] *** Quits: yeirr (~yeirr@user/yeirr) (Remote host closed the connection)
[12:54:00] *** Joins: yeirr (~yeirr@user/yeirr)
[12:54:07] <nedbat> dataclasses are probably similar
[12:54:09] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[12:55:17] *** Joins: saribro (~swinnenb@user/swinnenb)
[12:55:30] <Qria> That's very interesting. I guess that pseudocode is implemented in C? I am trying to find the source
[12:56:52] <nedbat> Qria: hm, good question, it's not in Objects/tupleobject.c somehow
[12:56:58] <lericson> why do I get this error? BlockingIOError: [Errno 11] write could not complete without blocking
[12:57:23] <lericson> writing to sys.stdout
[12:57:36] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 245 seconds)
[12:57:55] <Qria> Found this: https://github.com/python/cpython/blob/d943d19172aa93ce88bade15b9f23a0ce3bc72ff/Objects/object.c#L757-L764
[12:57:56] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[12:58:33] <nedbat> Qria: that's probably it. i'm no expert on the twists and turns here
[12:58:38] *** Joins: computeiro (~Wender@189.37.67.57)
[12:59:01] <nedbat> lericson: are you writing to a pipe? What's reading from the pipe?
[12:59:08] <lericson> no pipe
[12:59:21] <lericson> a terminal is on the other side of sys.stdout
[12:59:28] <lericson> well, tmux
[12:59:39] <Qria> Thanks for the help nedbat, very insightful
[12:59:45] <hexnewbie> Qria: That's how comparisons for sets and dictionaries are performed, but note that it does not apply to ‘==’. For example: nan = float('nan'); nan == nan
[12:59:48] <grawity> some programs switch the tty to non-blocking mode on launch (e.g. neovim), then switch back to normal on suspend or exit
[12:59:58] <grawity> so maybe you ran one that didn't switch it back
[13:00:09] <lericson> grawity: interesting
[13:00:15] <lericson> can it be checked
[13:00:26] <hexnewbie> Qria: However: d = {nan: 3}; d[nan] # works
[13:00:46] *** Joins: yourfate (~yourfate@cabal.yourfate.org)
[13:00:48] *** Joins: Atque (~Atque@user/atque)
[13:01:32] <grawity> lericson: fcntl.fcntl(sys.stdin.fileno(), fcntl.F_GETFL) & os.O_NONBLOCK
[13:01:44] <grawity> damn those modules need some enum.IntFlag
[13:01:46] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 245 seconds)
[13:02:15] <lericson> grawity: can it be checked with stty
[13:02:36] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:02:41] <grawity> doubtful, it's a file descriptor option rather than tty/termio option
[13:04:10] *** Joins: p-i-_ (~Ohmu@223.206.71.4)
[13:04:41] *** Quits: damonlynch (~ngaio@2601:245:c700:2c06:5519:4b72:484:51a2) (Ping timeout: 245 seconds)
[13:05:22] <grawity> so I suppose you could even have different settings for stdin and stdout
[13:05:56] <hexnewbie> Qria: I have used this ugly approach for ‘interning’ tuples: https://gitlab.com/milkok/typeatlas/-/blob/master/typeatlas/fontlist.py#L568 (be warned that _langs_intern needs to be cleaned after the procedure is done, so this better belongs in a class, context manager or a closure), if you're comparing a lot, using the same on frozen dataclasses might work
[13:06:19] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[13:06:22] <volgar1x> Hello guys, do you know how I can fix syntax errors emitted by Pyright on type annotations (which are false positives) ?
[13:06:25] <lericson> >>> import sys,os,fcntl;[fcntl.fcntl(f.fileno(), fcntl.F_GETFL) & os.O_NONBLOCK for f in [sys.stdin, sys.stdout]]
[13:06:28] <lericson> [2048, 2048]
[13:06:29] <lericson> you got it grawity
[13:06:32] <lericson> good one
[13:06:43] <hexnewbie> Qria: And the string interning is not needed in your case
[13:07:19] *** Quits: p-i- (~Ohmu@223.206.71.4) (Ping timeout: 265 seconds)
[13:09:49] *** Joins: wender (~Wender@189.37.68.169)
[13:11:56] <nedbat> volgar1x: can you link us to an example?
[13:12:58] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:13:16] *** Joins: sudomann (~sudomann@73.183.118.9)
[13:13:36] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[13:13:36] *** Quits: computeiro (~Wender@189.37.67.57) (Ping timeout: 265 seconds)
[13:13:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:13:45] *** Quits: carl-- (~carl-@185.103.188.130) (Remote host closed the connection)
[13:13:53] *** Joins: drogas (~drogas@jump2.jet.uk)
[13:14:07] *** Joins: carl-- (~carl-@185.103.188.130)
[13:14:42] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:15:31] *** Quits: odrling (~odrling@korone.aidoru.agency) (Ping timeout: 252 seconds)
[13:15:34] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[13:16:04] *** Quits: bdeshi (~bdeshi@45.86.163.209) (Ping timeout: 252 seconds)
[13:16:14] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[13:16:14] *** Joins: Mathisen_ (mathisen@about/windows/staff/mathisen)
[13:16:30] *** Quits: chele (~chele@user/chele) (Ping timeout: 265 seconds)
[13:16:46] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (Ping timeout: 245 seconds)
[13:17:49] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 268 seconds)
[13:18:07] *** Joins: odrling (~odrling@korone.aidoru.agency)
[13:18:16] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[13:18:25] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 252 seconds)
[13:19:28] <volgar1x> nedbat: any type annotation raises a syntax error, either for function parameters, function returns, or variable declarations
[13:19:35] *** Joins: ferros (~ferros@vps-eacaba1b.vps.ovh.net)
[13:20:07] *** Joins: Wulf (~Wulf@user/wulf)
[13:20:29] <volgar1x> it's occurring consistently across all .py files of my project
[13:20:32] <volgar1x> on first occurence
[13:20:36] *** Joins: adde9708 (uid139358@id-139358.tinside.irccloud.com)
[13:20:43] <volgar1x> s/occurence/occurrence in the file/
[13:21:08] <jinsun> volgar1x: even simple annotations like int and str? or some complex types?
[13:21:19] <nedbat> volgar1x: that sounds very strange. what version of Python are you using, and what version is pyright using?
[13:22:52] <volgar1x> i'll add to this that i have the same problem either @home or @work
[13:22:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:23:43] <hexnewbie> Oh wow, twisted has had systemd integration since 2012 or earlier. I'm so behind the times 😃
[13:23:45] <volgar1x> with python3.7, pyright 1.1.172 @ work & python3.8 @ home
[13:23:50] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:24:18] <Yhg1s> volgar1x: it sounds very much like you have a syntax error then. Can you show the code that's giving you the error?
[13:24:22] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Read error: Connection reset by peer)
[13:24:25] <volgar1x> jinsun: yep, every type annotation has a syntax error
[13:24:37] *** Joins: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch)
[13:24:58] <volgar1x> Yhg1s: my code runs fine though so why is pyright imagining syntax errors ?
[13:25:10] <Yhg1s> volgar1x: it's impossible to say without seeing the code.
[13:25:22] <volgar1x> I even set `"pythonVersion": "3.8",` in `pyrightconfig.json`
[13:25:36] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[13:26:58] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[13:28:10] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 252 seconds)
[13:28:10] *** Quits: easter_egg (~jeffry@user/easter-egg/x-4406379) (Ping timeout: 252 seconds)
[13:28:17] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[13:28:53] *** Joins: c10l (~c10l@user/c10l)
[13:28:55] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[13:29:10] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[13:29:14] <lericson> grawity: so i spent entirely too much time making this utility https://bsg.lericson.se/fd_flags.py
[13:29:16] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: neolem[m] (~neolem@2001:470:69fc:105::c675) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: allegary (~allegary@apache/committer/gjm) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: kikijiki[m] (~kikijiki@user/kikijiki) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: Mikaela- (~mikaela-@Feneas/Mikaela-) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: canardo (~canardo@2001:470:69fc:105::e110) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: berton[m] (~berton@2001:470:69fc:105::ce36) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: dngray[m] (~dngray@user/dngray) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (Quit: Bridge terminating on SIGTERM)
[13:29:21] *** Quits: aleko1 (~aleko1@2001:470:69fc:105::1:1016) (Quit: Bridge terminating on SIGTERM)
[13:29:21] *** Quits: spai (~spai@user/spai) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: ptival (~ptival@2001:470:69fc:105::41fc) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: litchi (~litchi01m@user/litchi) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: cotsuka (~cotsuka@user/cotsuka) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: Aminda- (~mikaela-@Feneas/Mikaela-) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: bim9262[m] (~bim9262@user/bim9262) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Quit: Bridge terminating on SIGTERM)
[13:29:23] *** Quits: Vipulk (~vipulk@user/vipulk) (Quit: Bridge terminating on SIGTERM)
[13:29:23] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[13:29:28] <lericson> did i just kill some bridge
[13:29:28] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Client Quit)
[13:29:57] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:30:04] <madduck> I am a bit sad that "with tempfile.mkdtemp() as tmpdir:" does not work
[13:30:21] *** Joins: _xor (~xor@72.49.199.147)
[13:31:00] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 265 seconds)
[13:31:02] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[13:31:18] *** Joins: Tempesta (~Tempesta@user/tempesta)
[13:31:33] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[13:31:35] *** Joins: djhankb (~djhankb@208.113.164.68)
[13:31:36] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[13:33:00] <grawity> now make it toggle the FDs back to blocking mode with F_SETFL
[13:33:02] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 246 seconds)
[13:33:19] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[13:33:32] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[13:33:40] <grawity> tbh getting EBADF on stdio FDs is a bad sign in general
[13:33:43] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[13:33:46] *** Joins: Aminda- (~mikaela-@Feneas/Mikaela-)
[13:33:47] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[13:33:47] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[13:33:47] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[13:33:47] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[13:33:51] *** Quits: y1n (~y1n@178.115.35.10.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[13:34:00] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[13:34:14] *** Joins: kikijiki[m] (~kikijiki@user/kikijiki)
[13:34:22] <themill> madduck: is there something that it does that tempfile.TemporaryDirectory does not?
[13:34:28] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[13:34:55] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[13:34:55] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[13:34:55] *** Joins: psydroid (~psydroid@user/psydroid)
[13:34:55] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[13:34:55] *** Joins: neolem[m] (~neolem@2001:470:69fc:105::c675)
[13:34:55] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[13:34:55] *** Joins: canardo (~canardo@2001:470:69fc:105::e110)
[13:34:56] *** Joins: allegary (~allegary@apache/committer/gjm)
[13:34:56] *** Joins: cotsuka (~cotsuka@user/cotsuka)
[13:35:09] *** Joins: thiras (~thiras@user/thiras)
[13:35:10] *** Joins: dngray[m] (~dngray@user/dngray)
[13:35:10] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[13:35:10] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[13:35:10] *** Joins: jinsun_ (~jinsun@user/jinsun)
[13:35:19] *** Quits: Buliarou1 (~gypsydang@185.207.166.57) (Ping timeout: 252 seconds)
[13:35:24] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[13:35:38] *** Joins: berton[m] (~berton@2001:470:69fc:105::ce36)
[13:35:38] *** Joins: bim9262[m] (~bim9262@user/bim9262)
[13:35:38] *** Joins: Vipulk (~vipulk@user/vipulk)
[13:35:39] *** Joins: Mikaela- (~mikaela-@Feneas/Mikaela-)
[13:35:39] *** Joins: ptival (~ptival@2001:470:69fc:105::41fc)
[13:35:39] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[13:35:39] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[13:35:39] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[13:35:39] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[13:35:43] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[13:35:53] *** Joins: spai (~spai@user/spai)
[13:35:55] <lericson> grawity: not much of a choice is there
[13:36:32] <QuaternionsRock> Is there any way to make a "transparent" metaclass? That is, a metaclass that is automatically inserted into the mro of a class's other metaclasses without needing to explicitly define a metaclass that derives them both?
[13:36:49] *** Joins: Buliarous (~gypsydang@185.207.166.57)
[13:38:32] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[13:39:24] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: WeeChat 2.8)
[13:40:06] <lericson> also why aren't there more subclasses for specific OSErrors?
[13:40:14] <lericson> seems like such an obvious thing to want
[13:40:17] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[13:40:28] <lericson> except OSError.BadFileDescriptor or something
[13:41:15] <grawity> you mean like FileNotFoundError, etc?
[13:41:18] <lericson> yeah
[13:41:26] <grawity> dunno maybe they just added generic ones to be portable or something
[13:41:34] <grawity> tbh I've heard of a few bugs where a program decides "I don't need to reopen stdio to /dev/null, I can just close all the FDs!" and then it opens a database or something as fd #2, and then some backtrace gets written via stderr all over the important database
[13:41:54] <QuaternionsRock> especially considering there is a FileExistsError lol
[13:42:12] *** Quits: sartan (~sartan@user/sartan) (Quit: WeeChat 1.9.1)
[13:42:12] <grawity> so the general wisdom is that FDs 0-2 should never remain closed for any longer period of time
[13:42:21] <lericson> sure
[13:42:24] <lericson> but i'm not closing any fds
[13:42:32] <grawity> but you're still getting EBADF somehow?
[13:42:40] <lericson> i query flags on all fds
[13:42:41] *** Quits: NetPipe (~NetPipe@user/netpipe) (Quit: Client closed)
[13:42:52] <grawity> oh, right I missed the range
[13:42:58] <grawity> by "all" you mean "first 256"
[13:43:05] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Ping timeout: 265 seconds)
[13:43:07] <lericson> the only legitimate ones yes
[13:43:08] <grawity> at first I thought the script only does stdio
[13:43:08] <lericson> :p
[13:43:09] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[13:43:32] <grawity> map(int, os.listdir("/dev/fd"))
[13:44:00] <grawity> hmm I guess that includes the fd for /dev/fd itself, but good enough
[13:44:03] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 265 seconds)
[13:44:58] *** Joins: sudomann (~sudomann@73.183.118.9)
[13:45:34] <hexnewbie> Twisted does [int(fd) for fd in self.listdir(dname)], where dname *can* be '/proc/self/fd' (though twisted uses "/proc/%d/fd" % (self.getpid(),))
[13:45:41] *** Quits: freeman_h (~freeman_h@94.5.86.162) (Read error: Connection reset by peer)
[13:46:02] *** Joins: holgersson (~quassel@user/holgersson)
[13:46:23] <grawity> yeah that's the official Linux API, but at first I thought "maybe it would be better to use /dev/fd for portability" nevermind that literally none of the BSDs have it
[13:46:34] <grawity> I wonder why it doesn't use /proc/self/fd though
[13:46:42] <lericson> macOS has /dev/fd
[13:46:43] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 250 seconds)
[13:47:05] <grawity> FreeBSD has a /dev/fd that is hardcoded to only include 0-2, unless you mount a devfdfs on top or something
[13:47:11] <Yhg1s> I don't know if it's the reason, but I wouldn't use /proc/self/fd because it would do the wrong thing if self.listdir() dispatched to other processes.
[13:47:22] <grawity> hmm makes sense I guess
[13:47:22] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[13:47:33] <hexnewbie> Oh yeah, that would be true
[13:47:44] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[13:47:51] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:6c75:c2c3:e117:bf80) (Quit: Client closed)
[13:47:53] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[13:48:03] *** Quits: nomic (~nomic@185.217.117.233) (Quit: Leaving)
[13:48:07] *** Quits: ouemt (~quassel@user/ouemt) (Remote host closed the connection)
[13:48:19] <hexnewbie> Twisted does try /dev/fd second, and range(1024) third
[13:48:26] *** Quits: EnchanterTim (~weechat@thestonedapes.com) (Ping timeout: 245 seconds)
[13:49:07] <lericson> lol i have revised the program
[13:49:12] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[13:49:19] <grawity> why 1024 and not resource.RLIMIT_NOFILE ;_;
[13:49:24] <lericson> spending even more time on a somewhat useless utility https://bsg.lericson.se/fd_flags.py
[13:49:54] <hexnewbie> grawity: Because macOS apparently reports 9223372036854775808 there, and even on Linux where that is a saner value, it can get *really really* slow
[13:49:57] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[13:49:58] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[13:50:02] <grawity> twisted's self.listdir() might be dispatched to other processes, standard Python os.listdir() is pretty unlikely to do the same
[13:50:19] *** Joins: cheater (~Username@user/cheater)
[13:50:20] <grawity> hexnewbie: ah, it has no rlimits by default?
[13:50:21] *** Joins: ouemt (~quassel@user/ouemt)
[13:50:27] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[13:51:09] <lericson> next step: argparse and setting flags, i guess
[13:51:23] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[13:51:48] <hexnewbie> grawity: I have no idea, that's what the comment says. I was bit by slow process execution in a [safe setuid C program of mine] due to a high limit on recent Linux, though. Like, every command would take a couple of seconds until I resorted to /proc/self/fd
[13:51:59] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[13:52:13] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:ed9e:cfca:43af:b59b) (Ping timeout: 256 seconds)
[13:52:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:52:44] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[13:54:19] *** Joins: fikran (~fikran@user/fikran)
[13:54:40] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 260 seconds)
[13:55:18] *** Quits: kiska (james@user/kiska) (Quit: Ping timeout (120 seconds))
[13:56:16] *** Quits: audiocat (~audio@2603-8081-1800-1546-c83b-26d7-50b9-7442.res6.spectrum.com) (Ping timeout: 252 seconds)
[13:56:18] *** Joins: kiska (james@user/kiska)
[13:56:58] *** Joins: Grinchios (~Grinchios@213.205.241.251)
[13:58:43] *** Joins: cth (~Cthulchu@193.194.107.250)
[13:58:44] *** Joins: holgersson (~quassel@user/holgersson)
[14:00:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:02:06] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[14:02:07] *** Joins: Klinda (~superleag@user/klinda)
[14:03:02] *** Joins: legola (~legola@46.235.97.9)
[14:03:34] <raxor2k> i am using ".to_json()" to convert a dataframe into a json object(?) ,so my question is, how can i change this function on the other api, so i can receive those datas: async def process_latest_data(list: List): ? right now i have it like "List" which obviously doesnt work
[14:03:51] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 268 seconds)
[14:04:10] <wyre> Hi guys, I'm curious ... how is actually helpful Method Overloading? My point is that I don't like to reimplement methods, I prefer having new methods always
[14:04:28] <wyre> s/having/to have/
[14:05:21] *** Joins: sirn- (~sirn@user/sirn)
[14:05:30] <raxor2k> nvm: changing to "list: Dict" worked :D
[14:05:47] *** Quits: sirn (~sirn@user/sirn) (Ping timeout: 250 seconds)
[14:05:47] *** sirn- is now known as sirn
[14:06:00] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[14:08:07] *** Quits: xensie (~xensie@88-115-236-81.elisa-laajakaista.fi) (Quit: Textual IRC Client: www.textualapp.com)
[14:08:13] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[14:08:22] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[14:08:56] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[14:09:12] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[14:09:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:10:48] *** Joins: WarpedAI (~Warped@user/warped)
[14:11:07] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[14:13:32] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 265 seconds)
[14:13:37] *** dcaro is now known as dcaro_lunch
[14:14:16] <nedbat> wyre: in python, what do you mean by overloading?
[14:14:52] <wyre> nedbat, https://i.imgur.com/nNXbwAd.png
[14:14:53] <grawity> not a very good idea to have a parameter named literally 'list', because that's a built-in type name
[14:15:14] *** Joins: EnchanterTim (~weechat@thestonedapes.com)
[14:15:45] *** Quits: gabby (~aphysical@user/aphysically) (Ping timeout: 250 seconds)
[14:15:54] <nedbat> wyre: it's really useful and very common to have default arguments for methods, so that you can affect how they behave.
[14:15:54] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[14:16:13] *** Joins: sudomann (~sudomann@73.183.118.9)
[14:16:18] <nedbat> wyre: if you are using default values to completely change what the method does, then it might be better to have two methods
[14:16:32] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[14:17:47] *** Joins: gabby (~aphysical@user/aphysically)
[14:18:37] <gitesh> If a list of integers and I want to .join , do you think I need to cast integers into str to print .join ?
[14:19:23] <solrize> ???  how do you join integers?   you have: [1,2,3,4,5].  you want:  ???
[14:19:24] <Yhg1s> gitesh: not cast, but convert, yes. Have you considered just trying it and looking at the error you got?
[14:20:03] <gitesh> solrize: "".join(alist)
[14:20:17] <gitesh> Yhg1s: ok thanks
[14:20:20] *** Joins: giacomo (giacomo@gateway/vpn/protonvpn/giacomo)
[14:20:21] <wyre> I see nedbat, thank you very much 😀
[14:20:27] *** Quits: giacomo-c (~giacomo@107.13.177.67) (Ping timeout: 265 seconds)
[14:21:42] *** Joins: jmft2 (~jmft2@213.31.248.255)
[14:22:00] <lericson> there, grawity
[14:22:07] <lericson> it also sets flags https://bsg.lericson.se/fd_flags.py
[14:22:12] <solrize> gitesh,  what do you want the output to be when the input is [1,2,3,4,5]  ?
[14:22:18] <lericson> also crazy how many GETs you get just by pasting a link in thsi channel
[14:22:35] <gitesh> solrize: 12345
[14:25:16] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:25:30] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:26:36] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[14:26:47] <solrize> hmm sec
[14:27:03] <gitesh> solrize: what do you want to know?
[14:27:06] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[14:27:19] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[14:27:24] <solrize> >>> reduce(lambda a,x: a*10+x, [1,2,3,4,5],0)
[14:27:31] <solrize> from functools import reduce
[14:27:48] <solrize> join isn't what you want, you can't really join digits
[14:27:58] <lericson> probably easier to just int(''.join(map(str, L)))
[14:28:01] *** Quits: alxndr (~alexander@ybti.net) (Ping timeout: 245 seconds)
[14:28:02] <solrize> you could convert them to strings and back but that's way ugly
[14:28:02] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[14:28:13] *** Joins: alxndr (~alexander@ybti.net)
[14:28:25] <solrize> better to either use reduce or write a traditional loop
[14:28:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 265 seconds)
[14:28:37] <hexnewbie> You should always decide what failure mode do you prefer when you get 10 as a digit
[14:28:47] <solrize> yeah there is that too
[14:29:08] <solrize> assert all(0<=d<=9 for d in mylist)
[14:29:22] *** Quits: ubert (~Thunderbi@178.165.161.120.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[14:29:23] <lericson> sum(a*10**i for i, a in enumerate(L))
[14:29:26] <lericson> how about that
[14:29:31] <solrize> ugh :)
[14:29:38] <supakeen> lericson: needs a reversed afaik
[14:29:50] <lericson> depends on how you like your numbers but point taken, supakeen :p
[14:29:53] <hexnewbie> Now we don't get to use reduce
[14:30:02] <supakeen> (i was thinking of typing out the same one ;))
[14:30:02] <solrize> what's wrong with reduce?
[14:30:08] <supakeen> in this case nothing really
[14:30:12] <supakeen> i prefer your reduce one
[14:30:23] <supakeen> but the sum one is more easily extensible i guess
[14:30:28] <supakeen> if that ever happens
[14:30:31] <lericson> i think the sum is easier to read
[14:30:32] <solrize> reduce is in functools instead of a builtin
[14:30:36] <solrize> extensible?
[14:30:50] <lericson> easiest of all is the int() of joined str
[14:30:53] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:30:55] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[14:30:59] <supakeen> sure say you want `sum(a*10**i for i, a in enumerate(L) if not i % 3)` or such
[14:31:08] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:31:13] <supakeen> it'd be weird but its easier to tack that sort of stuff on
[14:31:16] <lericson> L[::-1]
[14:31:24] <lericson> bbl
[14:31:26] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:32:09] <solrize> erm, ok, if you're trying to convert with commas or something, you probably have to check the locale
[14:32:15] <solrize> what is the application?
[14:32:17] *** Quits: jmft2 (~jmft2@213.31.248.255) (Quit: This computer has gone to sleep)
[14:32:21] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:32:40] <solrize> yeah int(''.join(map(str,mylist))) starts looking better
[14:32:46] *** Quits: SlaveGee_ (~SlaveGeek@179.61.228.72) (Quit: Leaving...)
[14:32:50] <solrize> [1,23,456] -> 123456
[14:33:07] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[14:33:07] <grawity> repr(bytes(L))[5::4]
[14:33:27] *** Joins: mozgalom (~mozgalom@ipnet-gw.157.157.97.111.simnet.is)
[14:33:28] <grawity> >>> L = [1, 2, 3, 4, 5]; repr(bytes(x))[5::4]
[14:33:29] <grawity> '12345'
[14:33:31] <grawity> looks good to me
[14:33:37] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:34:01] *** Joins: slav0nic (slav0nic@python.su)
[14:34:05] *** Quits: pspiagicw (~user@123.136.198.193) (Remote host closed the connection)
[14:34:08] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[14:34:23] *** Joins: pspiagicw (~user@123.136.198.193)
[14:34:43] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[14:35:05] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:35:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:35:40] *** Joins: mestre (~mestre@191.177.175.57)
[14:36:22] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:36:46] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 245 seconds)
[14:37:10] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:38:00] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[14:38:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:38:55] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[14:39:21] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:39:46] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:40:07] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:40:39] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[14:40:40] <jinsun> NameError: name 'x' is not defined
[14:41:05] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:41:34] *** Quits: Lazenca (Lazenca@user/lazenca) (Remote host closed the connection)
[14:41:47] <jinsun> `re.sub(r"\[|\]|, ", "", str([1,2,3,4,5]))` :p
[14:41:49] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[14:42:03] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 265 seconds)
[14:42:09] *** Joins: ano (~ano@user/ano)
[14:42:25] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:42:41] *** EnchanterTim is now known as Hash
[14:43:51] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 245 seconds)
[14:44:00] *** Joins: lethu (~lethu@user/lethu)
[14:44:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:45:01] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:46:27] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:47:46] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:47:59] *** Joins: sudomann (~sudomann@73.183.118.9)
[14:49:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:50:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:50:41] *** chowmein__ is now known as chowmeined
[14:51:00] *** Joins: adder (~adder@user/adder)
[14:51:13] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Ping timeout: 252 seconds)
[14:51:20] *** Joins: bdeshi- (~bdeshi@bdeshi.space)
[14:51:44] *** bdeshi- is now known as bdeshi
[14:51:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:51:59] <adder> I'm experiencing the same issue, including the error message, as here -> https://issueexplorer.com/issue/python-trio/trio-typing/31 <- and I'm not sure how should I annotate my func's return type
[14:52:29] *** Quits: shad (~shad@user/shad) (Ping timeout: 246 seconds)
[14:52:41] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[14:52:45] <hexnewbie> Just create a class DigitArray(numbers: Iterable[int | str], *, base: int=10) already 😜
[14:52:55] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:54:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[14:54:41] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:54:45] *** Quits: diverdud1 (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 260 seconds)
[14:56:54] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:58:23] *** Joins: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-00eb.v6.ethz.ch)
[15:00:16] <kek_> hi, currently trying to find a bug. I'm not a python pro so can someone help me understand this "maxm = max(m for _, m in kwargs['mode_array'])"? python3.8+
[15:01:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[15:01:41] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[15:02:18] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[15:02:45] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:9425:3251:6042:700)
[15:03:19] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 265 seconds)
[15:03:56] *** Joins: sudomann (~sudomann@73.183.118.9)
[15:04:05] *** Quits: adder (~adder@user/adder) (Ping timeout: 260 seconds)
[15:04:33] <Yhg1s> kek_: it iterates over kwargs['mode_array'], takes the second item from each of those items and gives you the one that's largest.
[15:05:54] *** Joins: adder` (~adder@user/adder)
[15:07:29] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: No route to host)
[15:08:11] <adder`> I disconnected, so I'd appreciate it if someone repasted the answers to my question, if any
[15:08:38] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[15:09:06] <kek_> Yhg1s, it utilizes   max(iterable, *[, key, default])? If so, what does "m for _" mean? And how is "m in kwargs['mode_array']" a key? Also how do you see "takes the second item"?
[15:09:42] <grawity> regarding the _, read it as [m for (_, m) in thing]
[15:09:43] <bjs> kek_: it's going like `for (m, _) in kwargs["mode_array"]:`
[15:09:54] <bjs> and giving max the largest m
[15:09:58] <grawity> where "for (a, b) in thing" is just regular destructuring
[15:09:59] <nomn> kek_: the form "for a, b in c" suggests kwargs is a list of dictionaries, a and b being key and value of the dict c
[15:10:28] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[15:10:51] *** Joins: ano (~ano@user/ano)
[15:10:58] <Yhg1s> nomn: no, not a list of dictionaries at all. A list of length-2 sequences (like tuples)
[15:11:00] <bjs> kek_: like `for (char, num) in [("a", 1), ("b", 2), ("c", 3), ...]`  the first part will be the first element of each tuple and the second will be the second.  Python lets you drop the parens here for brevity.
[15:11:05] *** Quits: emptynine (tkk@cybertron.redlight.li) (Ping timeout: 260 seconds)
[15:11:22] *** Joins: BlueSky (~BlueSky@user/bluesky)
[15:12:05] <nomn> oh right my bad
[15:12:22] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:12:28] <grawity> well, close enough if you were iterating over a dict's .items()
[15:12:30] *** Quits: pspiagicw (~user@123.136.198.193) (Ping timeout: 265 seconds)
[15:12:52] *** Joins: pspiagicw (~user@123.136.198.193)
[15:12:56] <kek_> I might not be used to python but that just looks terrible to me.
[15:13:00] *** Joins: emptynine (tkk@cybertron.redlight.li)
[15:13:24] <kek_> How do you know that we are iterating over tuples?
[15:13:26] <bjs> kek_: oh, the comma is not part of the arguments to the call to max.
[15:13:38] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[15:13:53] <bjs> kek_: they might not be tuples,  Python is very dynamic here and any iterable of 2-length things will work with that code
[15:14:00] <kek_> bjs, so the whole thing is one argument?
[15:14:06] <bjs> kek_: yes
[15:14:28] *** Joins: aknot (~aknot@2603:900a:1503:17bb:170d:ea3d:512d:9158)
[15:14:31] <bjs> kek_: perhaps a longer way of writing would be like `all_ms = [];  for (m, _) in kwargs["mode_array"]: all_ms.append(m)` then `max(all_ms)`
[15:14:48] <kek_> so the comma indicates the tuple? could I do m,, to get (m,,)?
[15:15:17] *** Joins: upsala (~zcb@185.213.155.160)
[15:15:18] *** Quits: menace (~someone@user/menace) (Quit: menace)
[15:15:22] <bjs> kek_: that isn't valid because you actually need to put names between the commas
[15:15:25] <bjs> m or _ or something else
[15:15:26] <grawity> x, is a 1-element tuple, x,y is a two-element one, x,y,z is a 3-element one
[15:16:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[15:16:35] <kek_> bjs, I see, thanks. I kept reading it as two arguments and comparing it to the docs and it just didn't make any sense. Thanks everyone
[15:17:11] <Yhg1s> grawity: then it would be a list of tuples, not a list of dicts :)
[15:17:17] <nomn> btw this is called a "list comprehension" if you wanna look it up for future uses
[15:17:21] <bjs> kek_: this is a common pattern in Python,  to do something like `func(a for b, c in d if e)`
[15:17:25] <bjs> nomn: it's not a list comprehension
[15:17:31] <bjs> it's close though
[15:17:40] <nomn> oh?
[15:17:44] <bjs> nomn: there's no list
[15:18:20] <nomn> oh, iterable comprehension then
[15:18:41] <bjs> generator expression/comprehension
[15:18:59] *** Joins: SlaveGeek334269 (~SlaveGeek@179.61.228.72)
[15:19:20] <nomn> thanks for the corrections
[15:20:17] <BlueSky> are there any limitation to storing numpy arrays in list
[15:20:18] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:20:19] *** Quits: p-i-_ (~Ohmu@223.206.71.4) (Remote host closed the connection)
[15:20:22] <kek_> thanks I'll google a bit about it
[15:20:22] *** Quits: streety_ (~streety@li761-24.members.linode.com) (Ping timeout: 252 seconds)
[15:20:39] <bjs> BlueSky: what kind of limitations are you thinking?   there's no technical or physical limitation to what you can put inside lists
[15:20:54] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[15:21:29] <BlueSky> bjs: wait, I'll post code
[15:21:40] *** Joins: sudomann (~sudomann@73.183.118.9)
[15:22:20] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[15:25:01] *** Joins: brelod (~me@90.244.150.142)
[15:25:02] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[15:25:17] <tsujp> should I write my own tree data structure or use anytree? I just need basic functionality no rendering or whatever
[15:25:46] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[15:26:22] <BlueSky> bjs: https://pastebin.com/5xBFRkUD, please run this sample. Why is the elements of list are all same. Check print at (55), you will get different init_mat, but when I append it to list states, everything changes
[15:26:23] <infobob> https://bpaste.net/Y2IA (repasted for BlueSky)
[15:26:29] *** Joins: streety (~streety@li761-24.members.linode.com)
[15:27:18] <BlueSky> for the past one hour am pulling my hair
[15:27:25] <Yhg1s> BlueSky: you only ever append init_mat to states. init_mat is always the same object.
[15:27:26] *** Joins: curiosity (uid507362@user/cypris)
[15:27:48] <Yhg1s> BlueSky: putting the array in a list doesn't copy it. Everything in Python is a reference. (See bit.ly/pynames1)
[15:28:20] <BlueSky> then how do i store my arrays so that later I can plot them at once
[15:29:01] <BlueSky> Yhg1s: Thank you very much, I thought array will be copied,
[15:29:13] <Yhg1s> BlueSky: Python never implicitly copies.
[15:29:42] <jinsun> arrays have a .copy method that you can use to manually copy
[15:29:45] <Yhg1s> BlueSky: you can use operations that create new arrays instead of modifying init_mat in-place, though.
[15:29:47] <tsujp> is python literally always pass by reference?
[15:29:59] <grawity> it's pass-by-object
[15:30:05] <Yhg1s> tsujp: you can think of it that way, sure.
[15:30:24] <grawity> which isn't *exactly* the same as "pass-by-reference" that I'm familiar with
[15:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:30:53] <BlueSky> Yhg1s: what are those operations
[15:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:46] <BlueSky> I want a copy of a matrix at every iterations, saving a figure at every iteration is too slow.
[15:32:31] <BlueSky> so that I can plot them at once
[15:33:01] <Yhg1s> BlueSky: there's quite a lot of operations that create new arrays, including a lot of methods and array-wide operations like '*' and '+'.
[15:33:21] <Yhg1s> BlueSky: but if you want to create a copy after several operations or several iterations, a manual copy step is probably easier.
[15:33:45] <BlueSky> how? you mean a.copy?
[15:33:47] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 246 seconds)
[15:33:59] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:34:12] <Yhg1s> BlueSky: numpy.copy, yes.
[15:34:42] *** Joins: xiongxin (~quassel@113.116.224.79)
[15:34:44] <BlueSky> so the code will be list.appen(numpy.copy)?
[15:34:45] *** Joins: castle_dweller (~castle_dw@213.144.157.17)
[15:34:53] *** Joins: zeden (~zeden@user/zeden)
[15:35:05] *** Joins: src (~src@user/src)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:27] <Yhg1s> BlueSky: for example, sure.
[15:37:42] *** Joins: gormenghast (~gormengha@37.164.40.192)
[15:38:15] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[15:38:25] *** Joins: tnez_ (~el@user/tnez)
[15:38:56] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:39:26] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 268 seconds)
[15:39:38] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:39:56] *** Joins: elkclone (~elkclone@user/elkclone)
[15:40:37] *** Quits: gormenghast (~gormengha@37.164.40.192) (Client Quit)
[15:40:51] *** Joins: gormenghast (~gormengha@37.164.40.192)
[15:42:37] *** Joins: shad (~shad@user/shad)
[15:43:01] <BlueSky> Yhg1s: whole contains memory addresses
[15:43:42] *** Parts: SlaveGeek334269 (~SlaveGeek@179.61.228.72) ()
[15:44:13] *** Quits: adde9708 (uid139358@id-139358.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:44:44] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[15:45:23] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:46:50] <Yhg1s> BlueSky: I don't understand what you're saying, sorry.
[15:48:03] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 250 seconds)
[15:48:07] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[15:48:36] <BlueSky> Yhg1s: it works, when I use array.copy, list contains addresses. If I use numpy.copy(array), list contains addresses
[15:48:45] <BlueSky> Yhg1s: it works, when I use array.copy, list contains addresses. If I use numpy.copy(array), list contains arrays
[15:48:55] <BlueSky> *^
[15:49:58] *** Joins: iflema (~ian@user/iflema)
[15:50:35] *** Quits: stockholm (~Andreas@p200300d2c706a40058a161e52931af9e.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[15:50:54] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[15:54:07] *** Quits: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 250 seconds)
[15:55:02] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 265 seconds)
[15:55:26] <kek_> again a question to maxm = max(m for _, m in kwargs['mode_array']). Assuming kwargs[' mode_array'] would be a numpy.float64, would that have worked on 3.8?
[15:55:40] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[15:56:17] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:9425:3251:6042:700) (Quit: Leaving)
[15:56:48] *** Joins: c4017_ (~c4017@2604:3d08:747f:7c90:3546:be8e:e7b8:5f67)
[15:56:51] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[15:57:30] *** dcaro_lunch is now known as dcaro
[15:57:56] <kek_> nevemrind, just saw that I can use a virt env to specify the version once installed. Gonna try it.
[15:59:04] <bjs> kek_: if it was a float then no, you can't loop over a float
[15:59:41] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:3546:be8e:e7b8:5f67) (Ping timeout: 245 seconds)
[16:00:07] *** Joins: portalrat_ (~portalrat@user/portalrat)
[16:00:35] <kek_> bjs ok thanks, would have wondered me. still gonna try it, maybe the issue is generating whatever is passed.
[16:00:52] *** Joins: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl)
[16:01:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:02:13] *** Quits: portalrat (~portalrat@user/portalrat) (Ping timeout: 252 seconds)
[16:02:14] *** Quits: frost (~frost@59.71.244.189) (Quit: Connection closed)
[16:02:41] <gitesh> I think we should always do abstraction and use functions , so no global
[16:03:00] <gitesh> because functions are thought we can think of
[16:03:39] *** Joins: fikran (~fikran@user/fikran)
[16:05:06] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 245 seconds)
[16:05:22] *** Joins: Telvana (~capo@user/telvana)
[16:05:28] <rindolf> gitesh: what?
[16:07:35] *** Quits: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-00eb.v6.ethz.ch) (Remote host closed the connection)
[16:07:38] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[16:07:42] *** Joins: sudomann (~sudomann@73.183.118.9)
[16:09:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:10:23] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:11:01] *** Joins: p-i-_ (~Ohmu@223.206.71.4)
[16:11:20] *** Joins: Derailed_ (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[16:11:46] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[16:11:52] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:12:44] *** Quits: legola (~legola@46.235.97.9) (Remote host closed the connection)
[16:12:54] <Yhg1s> BlueSky: I don't understand what you mean, sorry.
[16:13:10] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[16:13:26] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (Ping timeout: 245 seconds)
[16:13:38] *** Joins: snalty_ (~Shhh@user/snalty)
[16:13:51] <BlueSky> Yhg1s: ndarray.copy gives memory address, whereas numpy.copy(ndarray) copys the array
[16:13:52] *** Joins: pycurious (~Adium@user/pycurious)
[16:13:56] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[16:14:16] *** Quits: snalty (~Shhh@user/snalty) (Ping timeout: 245 seconds)
[16:14:23] <Yhg1s> BlueSky: I don't know what you mean by 'memory address'.
[16:14:33] *** Joins: cheater (~Username@user/cheater)
[16:14:35] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 268 seconds)
[16:14:38] <Yhg1s> BlueSky: numpy.copy(), when passed an array, should return a new array.
[16:14:49] *** snalty_ is now known as snalty
[16:15:29] <BlueSky> Yhg1s: memory address - location of array in memory
[16:16:50] *** Joins: Elodin (~weechat@user/elodin)
[16:17:29] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Quit: Leaving...)
[16:18:31] *** Joins: nac2 (~nac@user/nac)
[16:18:46] *** Quits: gormenghast (~gormengha@37.164.40.192) (Read error: Connection reset by peer)
[16:18:51] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 245 seconds)
[16:19:20] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[16:19:29] <jinsun> BlueSky: no, ndarray.copy is a method, if you print it, it may show the address of the function (not the array), (doesn't show for me on 3.9.7 actually, so changed in newerr version of python maybe)
[16:19:35] *** Joins: gregoryloscombe (~gregorylo@213.86.15.34)
[16:19:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:19:55] *** Joins: gormenghast (~gormengha@2a01:e0a:1fb:3af0:e895:76de:9eb2:bdcb)
[16:20:06] *** Quits: reset (~reset@user/reset) (Ping timeout: 245 seconds)
[16:20:33] *** Quits: nac (~nac@user/nac) (Ping timeout: 250 seconds)
[16:20:33] *** nac2 is now known as nac
[16:20:38] *** Quits: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net) (Quit: ZNC - http://znc.in)
[16:20:59] *** Joins: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net)
[16:21:10] *** portalrat_ is now known as portalrat
[16:22:43] <BlueSky> jinsun: in 3.8.10, it gives me <built-in method copy of list object at 0x7fb9480e0ac0>
[16:24:28] *** Joins: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[16:24:33] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[16:24:38] <bjs> BlueSky: did you forget to call it
[16:24:59] <bjs> BlueSky: some_list.copy()  to copy the list
[16:25:05] <bjs> (but note, it does not copy the contents of the list!)
[16:25:39] *** Quits: gormenghast (~gormengha@2a01:e0a:1fb:3af0:e895:76de:9eb2:bdcb) (Read error: Connection reset by peer)
[16:25:45] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:dd48:1c77:fa63:9a2d) (Quit: Textual IRC Client: www.textualapp.com)
[16:25:49] *** Joins: gormenghast (~gormengha@37.164.40.192)
[16:26:12] *** Quits: gormenghast (~gormengha@37.164.40.192) (Read error: Connection reset by peer)
[16:26:42] <jinsun> BlueSky: ignore the address part, the beginning part tells you what it is (a method, not memory address of the list)
[16:26:42] <BlueSky> bjs: then what does it do, how it differs from numpy.copy()
[16:27:04] *** Quits: mozgalom (~mozgalom@ipnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[16:27:07] <BlueSky> ok
[16:27:16] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[16:27:30] *** Joins: gormenghast (~gormengha@2a01:e0a:1fb:3af0:e895:76de:9eb2:bdcb)
[16:27:34] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 265 seconds)
[16:28:21] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[16:28:27] <bjs> BlueSky: well numpy.copy(some_list) does not return a list, for a start
[16:28:38] <bjs> it returns a new numpy array with all the data copied over
[16:28:38] *** Quits: gormenghast (~gormengha@2a01:e0a:1fb:3af0:e895:76de:9eb2:bdcb) (Remote host closed the connection)
[16:28:47] *** Joins: gormenghast (~gormengha@2a01:e0a:1fb:3af0:e895:76de:9eb2:bdcb)
[16:28:52] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[16:28:59] <bjs> BlueSky: maybe https://bpa.st/ITIQ clears up something?
[16:29:58] *** Joins: DerpGusta (~quassel@user/derpgusta)
[16:30:13] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:30:30] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[16:30:31] *** Quits: DerpGusta_ (~quassel@user/derpgusta) (Ping timeout: 245 seconds)
[16:31:10] *** Joins: legola (~legola@46.235.97.9)
[16:31:52] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[16:32:41] <BlueSky> bjs: thank you
[16:33:10] *** Joins: yeirr (~yeirr@user/yeirr)
[16:33:38] *** Joins: fuz (~fuz@user/fuz)
[16:33:53] *** Joins: reset (~reset@user/reset)
[16:34:19] *** Quits: aknot (~aknot@2603:900a:1503:17bb:170d:ea3d:512d:9158) (Ping timeout: 268 seconds)
[16:35:56] *** Quits: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net) (Read error: Connection reset by peer)
[16:36:11] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[16:36:51] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[16:36:54] *** Joins: vladoski (~vladoski@2001:b07:add:d406:f64c:c83e:546c:7bf5)
[16:37:29] <vladoski> what's the easiest way to use sqlalchemy to filter on a table with sqlalchemy core
[16:37:39] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[16:38:09] <vladoski> like I need to create a "dynamic" filter where I have 5 params that sometimes are null, and if they're null I don't want to filter by null
[16:38:10] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:38:13] <vladoski> just don't use that one
[16:38:26] *** Joins: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net)
[16:38:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 245 seconds)
[16:40:23] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[16:40:47] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[16:41:38] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[16:42:02] *** Joins: yeirr (~yeirr@user/yeirr)
[16:42:07] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (lead.libera.chat (Nickname regained by services)))
[16:42:07] *** vinleod is now known as vdamewood
[16:42:15] *** Quits: yeirr (~yeirr@user/yeirr) (Client Quit)
[16:43:47] *** Joins: pycurious (~Adium@user/pycurious)
[16:43:48] *** Joins: stockholm (~Andreas@p200300d2c706a40058a161e52931af9e.dip0.t-ipconnect.de)
[16:44:00] *** Joins: brickfat (~brickfat@user/brickfat)
[16:44:05] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[16:44:31] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:d0cb:3918:ffe3:7838)
[16:44:44] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[16:46:02] *** Joins: pycurious (~Adium@user/pycurious)
[16:50:04] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[16:51:19] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[16:51:45] *** Joins: srhm (~srhm@user/srhm)
[16:52:21] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Quit: Ping timeout (120 seconds))
[16:52:36] *** Joins: bloody (~bloody@user/bloody)
[16:52:46] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[16:53:02] *** Joins: yeirr (~yeirr@user/yeirr)
[16:53:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:54:29] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 265 seconds)
[16:54:36] *** Joins: ravan (~ravan@user/ravan)
[16:55:30] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:3062:484d:dd96:3195) (Ping timeout: 268 seconds)
[16:55:58] *** Joins: ede (~ede@user/ede)
[16:56:10] <tsujp> how can I have a self referential class property?
[16:56:19] <tsujp> i.e. class Node: has a property 'self' of type 'Node'
[16:56:44] <bjs> tsujp: the *class* has a property?
[16:57:00] <tsujp> Yeah
[16:57:09] <Yhg1s> tsujp: do you mean in a type annotation?
[16:57:16] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:d869:7637:1e54:db75)
[16:57:21] <tsujp> sec lemme write what I mean (new to python so probably garbling my words)
[16:58:11] *** Quits: src (~src@user/src) (Quit: Leaving)
[16:58:13] <InPhase> tsujp: self gets passed to each function.  You don't reference self outside of member functions.
[16:58:15] <tsujp> http://ix.io/3BCT
[16:58:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:58:26] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:58:32] <Yhg1s> tsujp: so, yes, in a type annotation. Use "Node"
[16:58:35] <bjs> tsujp: you can put it in quotes, "Node" rather than Node
[16:58:48] <tsujp> ah, are all custom type annotations in quotes?
[16:59:18] <Yhg1s> no.
[16:59:30] <InPhase> Oh, that stuff.
[16:59:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:59:51] <tsujp> If not all custom types are in quotes, is it just because this one is referring to itself?
[17:00:07] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[17:00:08] <Yhg1s> Because it's referring to one that doesn't exist yet. (It only exists after the class body is executed.)
[17:00:09] <tsujp> Or rather, the class has a property of the same class
[17:00:14] <tsujp> Right right
[17:00:14] <bjs> tsujp: you can put any annotation in quotations, to stop it being evaluated by Python
[17:00:24] <tsujp> Ohhh
[17:00:35] <bjs> Newer versions of Python will make this unnecessary,  it's a quirk of the language
[17:00:38] <tsujp> So this defers the inference of the annotation until runtime
[17:00:48] <bjs> tsujp: Python doesn't look at the annotations at all
[17:00:50] <bjs> they're just documentation
[17:00:52] <Yhg1s> bjs: it's not year clear which version or how, though :)
[17:01:00] <tsujp> Oh neat I just found `from __future__ import annotations`
[17:01:08] <tsujp> and now it works as bare `Node | None`
[17:01:28] <tsujp> bjs neat
[17:01:38] *** Joins: yeirr (~yeirr@user/yeirr)
[17:01:44] <bjs> Yhg1s: to be honest it's not clear to me what is and isn't clear
[17:01:50] *** Joins: grooverman (~grooverma@177.95.12.14)
[17:01:54] <bjs> (let alone what will and won't happen :P)
[17:02:16] <Yhg1s> bjs: pretty much just the choice between PEP 563 and PEP 649.
[17:02:49] *** Quits: castle_dweller (~castle_dw@213.144.157.17) (Quit: *falls down a pit*)
[17:02:49] <bjs> Yhg1s: but 563 is already accepted! :P
[17:03:39] *** Quits: yeirr (~yeirr@user/yeirr) (Client Quit)
[17:03:49] *** Quits: pspiagicw (~user@123.136.198.193) (Ping timeout: 252 seconds)
[17:03:54] <ede> hi. how does the crypto stuff on https://www.python.org/downloads/ work? --verify gives me -> gpg: Can't check signature: No public key
[17:03:59] *** Joins: yeirr (~yeirr@user/yeirr)
[17:04:15] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:04:42] <Yhg1s> bjs: https://mail.python.org/archives/list/python-dev@python.org/message/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/
[17:04:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:05:06] <SnoopJ> ede, did you run the `gpg --recv-keys` command just above that, first? You need the relevant public key in order to verify something that's been signed with someone's private key.
[17:05:42] <supakeen> but how do i verify that the site wasn't changed to show another key?
[17:05:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:05:53] <ede> "You can import a person's public keys" doesn't sound what i am after
[17:06:08] <SnoopJ> supakeen, you could go directly to keybase, if you'd like
[17:06:12] <ede> so i have to mail devel@python.org or sth to find out what i need?
[17:06:17] <SnoopJ> no...
[17:06:18] <Yhg1s> ede: you need someone's public key to verify that they signed the package.
[17:06:28] <SnoopJ> More specifically, that someone is the release manager.
[17:06:30] <MacGyver> ede: It is what you're after.
[17:06:31] <ede> great, so i can just delete the download
[17:06:39] <ede> i know not a single python developer
[17:06:40] <SnoopJ> (for source files anyway)
[17:06:56] <ede> manager. uff. definitely not my league.
[17:07:19] <ede> seems the docs are useless on this page.
[17:07:19] <stealth_> while using `build_ext` is there ways to optimize the .so? i am getting really large file
[17:07:21] <Yhg1s> ede: it's not about leagues. It's about a web of trust (which is how PGP keys work).
[17:07:29] *** Joins: NeoCore (~neocore@195.200.221.24)
[17:07:29] <Yhg1s> ede: but if you don't want to use PGP, that's fine. You can just trust the website instead.
[17:07:36] <ede> so i have to know some hackers involved in development?
[17:07:40] <SnoopJ> No
[17:07:40] <Yhg1s> ede: the page lists the keys you need to add.
[17:07:54] <ede> i must download all the files and run pgp with each of it?
[17:08:05] <Yhg1s> ede: you don't have to do anything.
[17:08:09] <Yhg1s> ede: what do you _want_ to do?
[17:08:15] <SnoopJ> Right, verifying the signature is a completely optional step.
[17:08:23] <ede> the obvious check after a download "from the web"
[17:08:34] <Yhg1s> ede: What do you want to check _for_?
[17:08:41] *** Joins: arinov (~arinov@176.219.204.250)
[17:08:48] <ede> that i get what i want and not "something"
[17:08:57] <bjs> Yhg1s: annotations are a little bit of a mess
[17:09:05] <Yhg1s> ede: and who would you trust to give you want you want, instead of 'something'?
[17:09:08] *** Quits: Capricious (~capriciou@121.44.243.153) (Quit: Capricious)
[17:09:09] <SnoopJ> ede, we're not entirely clear on what it is you want, because you seem to be saying "I don't want to do [thing you asked about]"
[17:09:12] <Yhg1s> bjs: indeed.
[17:09:30] <ede> i have a file of size 18,726,176 bytes, that's all i know. and some .asc file and can do nothing with it.
[17:09:36] <MacGyver> ede: Yeah, thing is, the whole PGP-signature-based checking of software distribution is badly designed and doesn't work well for the end user. You're right, but getting into a fight over it is not going to help.
[17:09:48] <Yhg1s> ede: you can just use the installer or source you downloaded.
[17:09:53] <SnoopJ> ede, you will need the public key of whoever signed it if you want to verify the signature.
[17:10:00] <Csm319_> Hi guys, I want to run a python script as a service on Windows
[17:10:12] <ede> then at least the good old md5 checksums should be on the page, i can't even check for a bit flip during download now.
[17:10:15] <Yhg1s> ede: if you want to verify that it is what you think it should be, you need someone to vouch for it. The release manager vouched for it, via PGP. You just have to trust that the release manager is who they say they are. That's what PGP is for.
[17:10:37] <SnoopJ> The MD5 sums are listed on individual release pages.
[17:10:38] <ede> ah, it has md5 on the dl page
[17:10:39] <Yhg1s> ede: HTTPS already checked for that.
[17:10:42] <Csm319_> I have followed the steps detailed on this link ( http://thepythoncorner.com/dev/how-to-create-a-windows-service-in-python/ ) and it generates the service correctly but I cannot start it, Windows returns the following error : Error 1053: the service did not respond to the start or control request in a timely fashion
[17:10:51] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:10:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:11:07] *** Joins: Capricious (~capriciou@121.44.243.153)
[17:11:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:11:20] <ede> Yhg1s: heh just the opposite approach of what Debian does. i'd really like to see a stage talk on this :)
[17:11:27] <SnoopJ> `gpg --verify` here addresses the problem of "Did a trusted source okay this download?"
[17:11:27] *** Joins: idono123 (~Guest76@2603-6011-6c01-ec00-0000-0000-0000-0022.res6.spectrum.com)
[17:11:36] <Csm319_> From what I have read in other forums, one of the solutions provided to solve this problem was to modify the timeout value for the startup of a service by using regedit and creating a DWORD called ServicePipeTimeout which is assigned as value 180000, but still I can't start the service...why?
[17:11:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:12:02] <SnoopJ> An attacker who could replace the page source served to a user could change both the download link *and* the MD5 sum, that verifies only that transmission errors didn't occur
[17:12:05] *** Quits: arinov (~arinov@176.219.204.250) (Remote host closed the connection)
[17:12:48] *** Quits: idono123 (~Guest76@2603-6011-6c01-ec00-0000-0000-0000-0022.res6.spectrum.com) (Quit: Client closed)
[17:12:49] <MacGyver> SnoopJ: So here's the thing. How does ede get the public key of the trusted source? By importing based on a key fingerprint that's ont the same website.
[17:13:10] <MacGyver> Unless you're actually in the WoT, you don't really get much here.
[17:13:24] <MacGyver> That's a fair point they're making.
[17:13:26] <ede> same website isn't a good idea. the same as 2FA using just one phone.
[17:14:04] <Yhg1s> MacGyver: again, this is how PGP works. You have a web of trust. you need to trust someone that trusts the release manager. Or, trust someone who trusts someone who trusts the release manager.
[17:14:14] <Yhg1s> (etc)
[17:14:15] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[17:14:18] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[17:14:19] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Read error: Connection reset by peer)
[17:14:27] <MacGyver> Yhg1s: You don't have to explain PKI models to me, thanks.
[17:14:49] <ede> so PGP works like release groups
[17:14:55] <ede> where you need someone to invite you
[17:15:00] <lericson> PGP works like syphilis
[17:15:05] <Yhg1s> ede: no, you don't have to be invited.
[17:15:10] <Yhg1s> ede: you're free to trust whoever you like.
[17:15:14] <Yhg1s> they don't have to trust you.
[17:15:20] <ede> i trust my distro so far, and now?
[17:15:21] <SnoopJ> MacGyver, as I have already said, they can go to keybase on their own if they'd like.
[17:15:43] *** Quits: brickfat (~brickfat@user/brickfat) (Remote host closed the connection)
[17:15:53] *** Quits: kevr (~kevr@user/kevr) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[17:16:04] *** Joins: brickfat (~brickfat@user/brickfat)
[17:16:12] *** Joins: kevr (~kevr@user/kevr)
[17:16:21] <SnoopJ> or any other server that has the relevant public key, if they don't trust *that* source
[17:16:40] <stealth_> nm got it
[17:17:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[17:17:14] <Yhg1s> ede: there are plenty of palces where Pablo lists his PGP key signature, like his github page (https://github.com/pablogsal), which you can verify has write access to Python (github.com/python/cpython), for example. It really depends on how far you want to go to verify Pablo.
[17:17:29] <ede> the more independent sources there are the more unlikely it is that something is odd as long as they all have the same info
[17:17:33] <SnoopJ> (and the stuff between Pablo and the file you downloaded)
[17:17:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:18:01] <ede> Yhg1s: see, "Pablo". spanish name, has no other meaning to me (and most users too i bet)
[17:18:53] <SnoopJ> As described on the downloads page, the 3.10.x and 3.11.x source files and tags have been signed by Pablo Galindo Salgado, who is the release manager.
[17:19:10] <Yhg1s> ede: his name is listed, with pgp key and role, on https://www.python.org/downloads/, right before the bits you did read about verifying releases.
[17:19:29] <ede> the docs should say something like "you need pablo's key, check hist [github] and if you're paranoid also that of [alice], [bob] and [carol]:"
[17:19:33] <Yhg1s> ede: this isn't something most users care about.
[17:19:43] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 252 seconds)
[17:19:47] <Yhg1s> ede: so the docs don't try to hand-hold through this procedss.
[17:20:41] <ede> Yhg1s: yeah, i've seen the list, but is is kind of flat leveled. never been on p.o so far for anything than docs.
[17:20:43] <SnoopJ> ede, the docs are open-source, a PR is welcome.
[17:21:04] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[17:21:05] <ede> SnoopJ: i'd need a GH acc first, right?
[17:21:19] *** Parts: GOD (~mad@user/god) ()
[17:21:32] <ede> actually i think i even made one some years ago, only never used it (hard enough to fight their web ui as a user)
[17:21:33] <SnoopJ> ede, you don't need one to create an issue on bugs.python.org (the current workflow), but eventually GitHub will be The Way To Do It™
[17:22:22] <SnoopJ> (as I understand it, anyhow)
[17:22:47] <ede> SnoopJ, tbh one of my issues is devs trying to push even users who barely can handle an INSTALL.EXE on windows into GH which i still see as a developer playground.
[17:22:58] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[17:23:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:23:29] *** Joins: ShinyCyril (~ShinyCyri@65.79.144.153)
[17:23:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:23:41] *** Joins: y1n (~y1n@91.141.73.115.wireless.dyn.drei.com)
[17:23:59] <SnoopJ> ede, I don't know what to say about that, except that "devs...push..." is a pretty antagonistic framing.
[17:24:01] *** Joins: sudomann (~sudomann@73.183.118.9)
[17:24:22] *** Quits: ShinyCyril (~ShinyCyri@65.79.144.153) (Client Quit)
[17:24:40] <SnoopJ> There is a documentation workgroup being spun up to address questions like "how do we make it easier for people to fix-up the docs, though," but there isn't much material out of it yet.
[17:24:50] *** Quits: MattWThomas (~macravin@161.38.68.34.bc.googleusercontent.com) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[17:24:59] *** tnez_ is now known as tnez
[17:25:22] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[17:25:25] *** Joins: MattWThomas (~macravin@161.38.68.34.bc.googleusercontent.com)
[17:25:33] <ede> SnoopJ: i mean comments like "then file a bug on GH/our Gitlab" i've seen so often already. or "patch it / make a PR" and some more.
[17:25:33] *** Joins: _xor (~xor@72.49.199.147)
[17:25:38] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[17:25:51] <ede> ah cool. i love good docs.
[17:26:08] *** Joins: carl- (~carl-@185.103.188.130)
[17:26:48] *** Joins: bauripalash (~bauripala@2401:4900:3827:308a:1:1:80ff:eff5)
[17:27:05] *** Quits: Grinchios (~Grinchios@213.205.241.251) (Remote host closed the connection)
[17:27:13] *** Joins: ShinyCyril (~ShinyCyri@65.79.144.153)
[17:27:23] *** Joins: Grinchios (~Grinchios@213.205.241.251)
[17:28:02] <The-Compiler> ede: Then perhaps your perception of GitHub being a "developer playground" is wrong. It's the place to be involved in (most) open source projects. Such involvement doesn't have to be code development, it might well be working on docs or reporting issues.
[17:28:13] <SnoopJ> ede, it's something I try to hold in reserve until I believe that a user would be better off contributing what they want to see directly than communicating it to someone who's "inside the fence." I think that's the case here, because we're a little confused.
[17:28:47] <SnoopJ> python.org probably shouldn't have a complete primer on PKI, but the material there could certainly made more "I don't know PKI" friendly, perhaps with a link out to such a primer.
[17:29:06] *** Quits: ShinyCyril (~ShinyCyri@65.79.144.153) (Client Quit)
[17:29:06] <SnoopJ> (as least in my opinion!)
[17:29:39] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:30:13] <supakeen> grrpki
[17:30:25] <ede> SnoopJ: yeah, that's what i like too in general. if it's just 5 steps from 0 to 100 then why not just list them 1 2 3 4 5. simple short sentences, maybe with links to external info where appropriate.
[17:30:56] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:00] <SnoopJ> ede, I think that page does a great job and I don't know what improvements you'd want made, so I encourage you to submit that as an issue, or to have at it yourself, if you'd like.
[17:31:09] <SnoopJ> It could certainly do better :)
[17:31:49] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 252 seconds)
[17:31:53] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[17:32:12] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[17:32:24] *** Joins: srhm (~srhm@user/srhm)
[17:33:08] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[17:33:09] *** Joins: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006)
[17:34:42] *** Joins: Fiji (~Fiji@user/fiji)
[17:36:03] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 265 seconds)
[17:38:12] *** Joins: Vornicus (~Vornicus@cpe-23-243-151-111.socal.res.rr.com)
[17:39:37] *** saribro is now known as swinnenb
[17:40:06] *** Quits: deniska (~denis@user/deniska) (Ping timeout: 245 seconds)
[17:40:22] *** ATAD_ is now known as ATAD
[17:40:32] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:d869:7637:1e54:db75) (Quit: Textual IRC Client: www.textualapp.com)
[17:41:10] <ede> SnoopJ: i looked into keybase.io, imported his key. the next step would be the RSA key it seems, but i think i'll drop this for now. (also gpg's text on the issue is all but clear heh)
[17:41:21] <ede> no let's see i i get it built.
[17:41:48] *** Joins: deniska (~denis@user/deniska)
[17:42:02] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[17:42:22] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[17:42:41] *** Joins: yeirr (~yeirr@user/yeirr)
[17:42:51] *** Joins: Elodin (~weechat@user/elodin)
[17:43:24] *** Joins: qlixed (~qlixed@181.45.80.239)
[17:44:04] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[17:45:34] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[17:46:21] *** Joins: Wulf (~Wulf@user/wulf)
[17:46:31] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:47:47] *** Joins: alzgh (~alzgh@user/alzgh)
[17:48:05] *** Quits: gormenghast (~gormengha@2a01:e0a:1fb:3af0:e895:76de:9eb2:bdcb) (Read error: Connection reset by peer)
[17:48:14] *** Joins: gormenghast (~gormengha@37.164.40.104)
[17:48:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:48:28] *** Quits: bauripalash (~bauripala@2401:4900:3827:308a:1:1:80ff:eff5) (Read error: Connection reset by peer)
[17:48:34] *** Quits: gormenghast (~gormengha@37.164.40.104) (Read error: Connection reset by peer)
[17:48:45] *** Joins: gormenghast (~gormengha@2a01:e0a:1fb:3af0:e895:76de:9eb2:bdcb)
[17:50:01] *** Quits: vladoski (~vladoski@2001:b07:add:d406:f64c:c83e:546c:7bf5) (Ping timeout: 252 seconds)
[17:51:00] *** Joins: EgonX (~EgonX@c-98-194-169-75.hsd1.tx.comcast.net)
[17:51:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:51:32] *** Joins: zebrag (~chris@user/zebrag)
[17:51:46] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[17:51:55] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[17:52:56] *** Joins: yeirr (~yeirr@user/yeirr)
[17:53:28] <foo> I have a context dict we pass around throughout our code. In different projects, I have done had context["uid"] to store the uid of the user's session. I've also done ctx["user_id"]... I want to use ctx["uid"] since it's short and I type this a lot, haha. But can we all agree user_id is more explicit and uid can mean a few different things?
[17:53:51] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 245 seconds)
[17:54:26] <OverCoder> def __init__(self) -> None:
[17:54:28] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:54:30] <OverCoder> "-> None"
[17:54:34] <OverCoder> what is this? function return type?
[17:54:40] <bjs> OverCoder: yes
[17:54:42] <Yhg1s> OverCoder: it is a type annotation for the return type, yes.
[17:54:42] <OverCoder> I don't recall Python was typed last I used it?
[17:54:43] <SnoopJ> OverCoder, it's a type annotation for the return type, yep
[17:54:52] <OverCoder> (which was years ago probably)
[17:54:55] *** Joins: briian (uid321220@id-321220.uxbridge.irccloud.com)
[17:54:55] <bjs> OverCoder: it's documentation,  Python doesn't enforce them
[17:54:58] <Yhg1s> OverCoder: it's always been strongly typed. It's also optionally statically typed.
[17:55:05] <OverCoder> Got it 👍 thanks
[17:55:19] <SnoopJ> yea, emphasis on "annotation," it's a little bread-crumb you're leaving for some unspecified tool. The runtime doesn't much care about them, just stores them.
[17:55:31] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:55:58] <OverCoder> (that was a really quick conversation)
[17:56:20] *** Quits: pradhvan (~pradhvan@dgplug/pradhvan) (Quit: Leaving)
[17:56:37] *** Quits: Capricious (~capriciou@121.44.243.153) (Quit: Capricious)
[17:56:57] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[17:58:10] *** Quits: Geronimo (~Geronimo@user/geronimo) (Quit: Ping timeout (120 seconds))
[17:58:30] *** Joins: Geronimo (~Geronimo@user/geronimo)
[17:59:48] *** Joins: LiftLeft (~LiftLeft@102.165.16.134)
[18:00:02] *** Quits: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 268 seconds)
[18:00:06] *** Quits: phillhoc1ing (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[18:00:20] *** Joins: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com)
[18:00:34] *** Joins: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[18:01:02] <BlueSky> Is anyone familiar with opencv or scikit image? How to detect edges in a multicolour patches
[18:01:21] *** Joins: audiocat (~audio@2603-8081-1800-1546-9f5a-e373-8203-155a.res6.spectrum.com)
[18:02:16] *** Joins: sudomann (~sudomann@73.183.118.9)
[18:02:35] *** Quits: gormenghast (~gormengha@2a01:e0a:1fb:3af0:e895:76de:9eb2:bdcb) (Ping timeout: 260 seconds)
[18:03:09] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[18:05:32] *** Joins: gormenghast (~gormengha@37.164.2.240)
[18:05:38] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:dddc:a59e:4083:bc2a)
[18:07:29] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Remote host closed the connection)
[18:08:40] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[18:08:51] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 245 seconds)
[18:08:57] *** Quits: Grinchios (~Grinchios@213.205.241.251) (Remote host closed the connection)
[18:09:16] *** Joins: Grinchios (~Grinchios@213.205.241.251)
[18:09:35] <Zweimer> In what channel would you guys ask a general computer question?
[18:10:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[18:10:15] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[18:11:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:11:57] *** Joins: sudomann (~sudomann@73.183.118.9)
[18:12:35] *** Joins: ShinyCyril (~ShinyCyri@65.79.144.153)
[18:13:00] *** Joins: fikran (~fikran@user/fikran)
[18:14:43] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 265 seconds)
[18:16:20] *** Quits: Grinchios (~Grinchios@213.205.241.251) (Remote host closed the connection)
[18:16:33] *** Joins: Grinchios (~Grinchios@213.205.241.251)
[18:17:14] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[18:17:23] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[18:17:44] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:17:51] *** Joins: srhm (~srhm@user/srhm)
[18:17:52] *** Joins: node1 (~node1@user/node1)
[18:17:52] *** Quits: node1 (~node1@user/node1) (Client Quit)
[18:18:03] *** Joins: bauripalash (~bauripala@2401:4900:3827:308a:1:1:80ff:eff5)
[18:18:19] *** Quits: bauripalash (~bauripala@2401:4900:3827:308a:1:1:80ff:eff5) (Client Quit)
[18:18:23] *** Joins: node1 (~node1@user/node1)
[18:18:53] <ede> what is PKG_PROG_PKG_CONFIG ? not found in configure#10530, also on cunfigure.ac#3064
[18:19:22] *** Joins: iomari891 (~iomari891@105.112.138.38)
[18:19:29] <Wulf> ede: try installing pkg-config
[18:19:41] *** Joins: arseru (uid515527@user/arseru)
[18:21:25] <SnoopJ> Zweimer, there's ##computers maybe? And #linux. Depends on what exactly the question is, this might be better to discuss in #python-offtopic unless it's tied to Python somehow.
[18:21:37] *** Joins: han-solo (~hanish@user/han-solo)
[18:21:38] <SnoopJ> Zweimer, and for general querying of what channels exist on this network, see /msg alis help
[18:21:52] <Zweimer> Thanks!
[18:23:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[18:24:04] <ede> Wulf: could it be my autoconfig is just too old?
[18:24:19] *** Joins: achillion (~ach@user/achilleas)
[18:24:41] *** Quits: achilleas (ach@user/achilleas) (Ping timeout: 245 seconds)
[18:24:56] *** Quits: ShinyCyril (~ShinyCyri@65.79.144.153) (Quit: ShinyCyril)
[18:25:07] *** Joins: todda7 (~torstein@75.red-83-36-23.dynamicip.rima-tde.net)
[18:25:18] <ede> because... config.log:configure:17478: found /usr/bin/pkg-config
[18:25:18] *** achillion is now known as achilleas
[18:25:28] *** Joins: paul424 (~tom@ip-37-248-157-117.multi.internet.cyfrowypolsat.pl)
[18:27:35] *** Joins: Roey (~Roey@user/Roey)
[18:27:36] *** Quits: gormenghast (~gormengha@37.164.2.240) (Quit: Quit)
[18:27:55] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 252 seconds)
[18:29:01] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[18:29:06] *** Joins: ShinyCyril (~ShinyCyri@65.79.144.153)
[18:29:10] <Roey> o/ all
[18:29:46] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:30:01] *** Joins: computeiro (~Wender@189.15.139.188)
[18:30:14] <rindolf> Roey: hi
[18:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:30:39] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[18:30:40] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[18:30:41] *** Joins: Grinchioos (~Grinchios@213.205.241.251)
[18:30:41] *** Quits: Grinchios (~Grinchios@213.205.241.251) (Read error: Connection reset by peer)
[18:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:31:14] *** Quits: wender (~Wender@189.37.68.169) (Ping timeout: 246 seconds)
[18:31:39] *** Quits: Grinchioos (~Grinchios@213.205.241.251) (Remote host closed the connection)
[18:32:06] *** Quits: todda7 (~torstein@75.red-83-36-23.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[18:32:14] <Roey> rindolf: hi!
[18:32:43] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[18:32:55] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[18:32:56] *** Joins: Hackerpcs (~user@user/hackerpcs)
[18:32:58] *** Joins: sudomann (~sudomann@73.183.118.9)
[18:33:19] *** Joins: yeirr (~yeirr@user/yeirr)
[18:33:54] *** Joins: mei6 (~mei@user/mei)
[18:34:23] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[18:34:37] *** Joins: src (~src@user/src)
[18:34:41] *** Quits: ldm (~ldm@hacksoc/member) (Ping timeout: 245 seconds)
[18:34:50] <SnoopJ> Is there an annotation appropriate for "object that speaks the buffer protocol?" I'm mostly thinking about bytes/bytearray/BytesIO but what I'm annotating works with anything that supports PyObject_GetBuffer() (or defines getbuffer() to return such)
[18:35:31] *** Quits: ShinyCyril (~ShinyCyri@65.79.144.153) (Quit: ShinyCyril)
[18:35:35] *** Joins: tbcr (~tbcr@user/tbcr)
[18:35:50] *** Joins: Luke (~ldm@hacksoc/member)
[18:35:52] *** Joins: cm315 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[18:36:47] <SnoopJ> ah, typeshed's ReadableBuffer/WriteableBuffer appear to be the best option: https://github.com/python/typeshed/pull/4232
[18:37:04] *** Quits: Hackerpcs (~user@user/hackerpcs) (Client Quit)
[18:37:05] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[18:38:13] <rindolf> Roey: what's new?
[18:38:14] *** Joins: Hackerpcs (~user@user/hackerpcs)
[18:38:22] *** Joins: alzgh (~alzgh@user/alzgh)
[18:38:46] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[18:38:55] *** Quits: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 252 seconds)
[18:39:51] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Ping timeout: 265 seconds)
[18:39:57] *** Joins: Axy (~Axy@user/axy)
[18:40:47] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[18:41:18] *** Joins: subopt (~subopt@2603-8081-2302-459a-7832-288f-cf28-8ba7.res6.spectrum.com)
[18:41:43] *** Joins: pycurious (~Adium@user/pycurious)
[18:42:08] *** Joins: The_Loko (~The_Loko@86.127.244.35)
[18:42:13] *** Quits: xiongxin (~quassel@113.116.224.79) (Ping timeout: 252 seconds)
[18:42:16] *** Quits: cm315 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 265 seconds)
[18:42:19] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[18:43:04] *** Joins: xiongxin (~quassel@113.116.224.79)
[18:43:52] *** Quits: d3sync- (~d3sync@62.1.63.20.dsl.dyn.forthnet.gr) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[18:44:49] *** Joins: pycurious (~Adium@user/pycurious)
[18:44:50] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[18:45:05] *** Joins: vladoski (~vladoski@2001:b07:add:d406:f64c:c83e:546c:7bf5)
[18:45:23] <vladoski> what's the best way to create an enum in 2.7 since there's no Enum
[18:45:57] <grym> vladoski: enum34
[18:46:07] *** Quits: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006) (Remote host closed the connection)
[18:46:16] *** Joins: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006)
[18:46:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:49:42] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:49:43] *** Joins: Nspace (~Nspace@user/nspace)
[18:50:01] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:50:29] <ede> hm, `configure` is a shell script anyway and a line just saying `PKG_PROG_PKG_CONFIG` doesn't make any sense at all in this context
[18:50:31] *** Quits: Noisytoot_ (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 245 seconds)
[18:50:31] *** Quits: beterraba (~beterraba@86.107.21.198) (Ping timeout: 252 seconds)
[18:50:32] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[18:50:32] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[18:51:01] *** Joins: ano (~ano@user/ano)
[18:51:24] <Roey> rindolf: was playing around with match-case in python 3.10
[18:52:10] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[18:52:24] *** Quits: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch) ()
[18:52:40] <rindolf> Roey: ah, nice
[18:52:44] *** Joins: beterraba (~beterraba@86.107.21.198)
[18:52:59] *** Joins: cdown_ (~cdown@89.32.122.5)
[18:53:16] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 252 seconds)
[18:53:24] <ede> could it be that line was meant to become a COMMENT?
[18:53:25] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[18:53:40] <ede> or some kind of subheader or something
[18:54:50] *** Quits: curiosity (uid507362@user/cypris) (Quit: Connection closed for inactivity)
[18:55:25] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 252 seconds)
[18:55:52] *** Quits: cdown_ (~cdown@89.32.122.5) (Read error: Connection reset by peer)
[18:56:02] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[18:57:39] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[18:57:42] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[18:57:55] *** Joins: cdown_ (~cdown@163.114.131.1)
[18:58:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:58:35] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:58:54] *** Joins: BillyZane2 (~BillyZane@91.196.220.174)
[18:59:20] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 265 seconds)
[18:59:42] *** Quits: xiongxin (~quassel@113.116.224.79) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:00:13] *** Joins: kenoba (~kenoba@user/kenoba)
[19:00:39] *** cdown_ is now known as cdown
[19:01:19] *** Quits: BillyZane (~BillyZane@91.196.220.174) (Ping timeout: 250 seconds)
[19:01:28] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[19:01:49] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[19:01:58] *** Joins: ericoc (sid179921@id-179921.uxbridge.irccloud.com)
[19:02:30] *** Joins: cellofellow (~user@68.69.167.233)
[19:05:06] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Client Quit)
[19:05:49] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:05:56] *** Joins: djapo (~archangel@user/djapo)
[19:06:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:06:37] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:07:24] *** Quits: beterraba (~beterraba@86.107.21.198) (Ping timeout: 265 seconds)
[19:07:49] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 245 seconds)
[19:10:53] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[19:11:17] <nedbat> ede: are you sure you want to build Python yourself? There might be easier ways
[19:11:17] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[19:12:28] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[19:12:58] <ede> nedbat: not meant to replace the system's one. but since the days of this system are limited, why not. i need f-strings for yt-dlp, finally upgrading would solve the problem, but since i'm at it i just wanted to give it a go.
[19:13:10] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[19:13:35] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[19:13:36] *** Joins: shad (~shad@user/shad)
[19:13:39] <ede> also 9:30 for the make run is far less than i expected. not really horrifying.
[19:14:15] <grym> ede: i think nedbat is suggesting that pyenv is nice
[19:14:20] <grym> (it builds python for you)
[19:15:16] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[19:15:38] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:15:45] *** Joins: khrbt (~znc@user/khrbt)
[19:16:25] *** Joins: yeirr (~yeirr@user/yeirr)
[19:16:27] <nedbat> ede: ok, sounds like you got it done
[19:16:29] *** Joins: Jigsy (~Jigsy@user/jigsy)
[19:16:40] <ede> i was looking at some scripting languages some years ago and one of them flooded my environment with a ton of functions, and i did create a user for this task explicitely. not sure if python or ruby or node or whatever. i still like python as a base for daily runners, but since this happened i'm not so sure about these environments anymore.
[19:17:07] *** clarjon_1 is now known as clarjon1
[19:17:10] <ede> nedbat: not sure, i've seen some errors which looked like undefined variables, didn't check the logs yet
[19:17:24] <nedbat> ede: i find that each language has its own approach to package management, and if they are different than one expects, they can seem baffling and malignant.
[19:17:28] <ede> but for now i'd like to see if i get it installed into /usr/local
[19:17:47] <nedbat> ede: just know that there are packaged ways to get new releases of Python
[19:17:57] <grym> i install my hand-build pythons in $HOME, usually
[19:17:58] <SnoopJ> CPython keeps it pretty simple, thankfully
[19:18:25] *** Quits: agireud (~agireud@136.49.88.21) (Remote host closed the connection)
[19:18:28] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Quit: clarjon1)
[19:18:28] <ede> nedbat: indeed. the thing is only that i like to keep things clean (thus debian's usrmerge isn't something i like), i started with 2 floppies and i knew everything in /bin personally ;)
[19:18:32] *** Joins: agireud (~agireud@136.49.88.21)
[19:18:53] *** Joins: achillion (ach@user/achilleas)
[19:19:37] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: Ping timeout (120 seconds))
[19:19:37] *** Quits: achilleas (~ach@user/achilleas) (Ping timeout: 252 seconds)
[19:19:45] <SnoopJ> ede, you should be able to set --prefix in the configuration step to do what you're after, unless you've already done that
[19:19:55] *** achillion is now known as achilleas
[19:19:57] <SnoopJ> --prefix=/usr/local more specifically
[19:19:58] <ede> grym: i don't have really a sytem for this (tasklist: 1. upgrade system 2. install everything needed 3. make some helpers and develop some BCPs), but i try to keep it in $HOME while i work on it, and when it's done it goes into /usr/local
[19:20:03] *** Joins: kenoba (~kenoba@user/kenoba)
[19:20:29] <ede> whould i need sudo if i put it into $HOME? if not i'd try it there first
[19:20:32] <ede> (call me paranoid)
[19:20:35] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 246 seconds)
[19:20:41] <grym> ede: you wouldn't
[19:20:45] <ede> oh wait, probably not at all
[19:20:48] <SnoopJ> it depends on what you're doing
[19:20:51] <grym> i don't mix sudo and python
[19:20:55] <SnoopJ> you'd still need permissions for things that require permissions
[19:20:59] <grym> uh, unless it's some funky GPIO raspi thingie
[19:21:07] *** Joins: NetPipe (~NetPipe@user/netpipe)
[19:21:09] <grym> then you usually have to, but also, it's a raspi
[19:21:25] <ede> neither do i. one of the things i'm concerned about is sudo making 3rd party managers put things into places where apt should be king
[19:21:34] <SnoopJ> ede, `sudo pip` is always wrong
[19:21:38] <ede> *nod*
[19:21:58] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[19:22:08] <ede> i don't even curl $url | sudo sh -
[19:22:09] <SnoopJ> and it doesn't help matters that Debian does *gestures* a whole bunch of idiosyncratic things. PEP 668 might alleviate some of those headaches.
[19:22:19] <ede> and they ALL saying to do so
[19:22:35] <SnoopJ> (it's a way for the system to say "no, really, don't touch this Python site" and pip will respect it, if/when adopted)
[19:23:21] *** Quits: src (~src@user/src) (Quit: Leaving)
[19:23:22] <ede> sometimes i like their approaches, sometimes i don't. alternatives: nice. apache module handling: never.
[19:23:39] *** Joins: src (~src@user/src)
[19:23:48] <grym> ede: similarly, i like to set PIP_REQUIRE_VIRTUALENV
[19:23:52] <grym> keeps the fatfingers at bay
[19:24:17] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[19:24:55] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[19:25:11] <audiocat> Roey, do you do any freelance pentesting?
[19:25:20] <Roey> sometimes
[19:25:24] <Roey> heyyyyyyyy audiocat!!!!!!!!!!!!
[19:25:25] <audiocat> i may need to hire you in a few months for a python app i'm building
[19:25:26] * Roey hugs audiocat 
[19:25:29] <ede> oh wait, i'd use --prefix for ./configure already? a lot of time did pass since i looked at make & friends (a hugh mistake, i know)
[19:25:30] <Roey> ay
[19:25:31] <audiocat> Roey, hey \o/
[19:25:37] <audiocat> how much do you charge?
[19:25:39] <Roey> how ya doing??
[19:25:40] *** Quits: Oddity (Oddity@user/oddity) (Remote host closed the connection)
[19:25:44] <SnoopJ> ede, yes, CPython follows this convention.
[19:25:46] <audiocat> i'm ok. just workin
[19:25:58] <Roey> audiocat: I can get back to you on that;  by when do you want an answer? I'd need to see what the scope of the work involves, too
[19:26:00] <Roey> audiocat: aye
[19:26:11] <ede> SnoopJ: ah thanks. su run #3, since the CPU is still stable :)
[19:26:19] <Roey> audiocat: btw you can call me if you ever wan to just talk; feel free
[19:26:30] <audiocat> Roey, any time, it'll be a while. i mainly just want payment processing unhackable
[19:26:33] <Roey> aye
[19:26:58] <SnoopJ> ede, there might be a way to override the config-time value when invoking make, but I usually do it that way because autotools trivia is hard to remember
[19:27:17] <audiocat> Roey, i don't want users to be able to empty the company bank account via some exploit
[19:27:25] *** Joins: pycurious (~Adium@user/pycurious)
[19:27:29] <audiocat> because payouts may be automatic
[19:27:43] <audiocat> wouldn't want to manage that manually
[19:28:00] <audiocat> and don't want to hire someone who isn't a big part of the company
[19:28:10] <ede> SnoopJ: heh yeah. i dug my head into the docs and even got stuck in awk or what it was. just can't do half of it which is suboptimal if you just want to get something done :)
[19:28:15] *** notevil_ is now known as notEVIL
[19:28:55] *** Joins: riz (~BillyZane@91.196.220.174)
[19:29:16] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 245 seconds)
[19:29:28] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[19:29:31] <Roey> audiocat: aye
[19:29:33] <Roey> of course
[19:29:47] <Roey> audiocat: why are you building a bank app?
[19:29:50] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[19:29:55] <SnoopJ> ede, in my experience, GNU documentation is mostly useful if you already know what you are looking up.
[19:30:04] <audiocat> Roey, it's a music service that pays artists royalties
[19:30:10] <SnoopJ> which isn't my favorite, but...yea.
[19:30:10] <audiocat> not a bank app
[19:30:17] *** Quits: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[19:30:33] * SnoopJ gave the autotools docs another try a few months ago and came away frustrated once more
[19:30:41] *** Quits: Syzygy_ (~Syzygy@178-190-79-0.adsl.highway.telekom.at) (Quit: Leaving)
[19:31:04] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[19:31:07] <SnoopJ> but at least once the tooling is in place, ./configure is pretty straightforward and reliable :)
[19:31:10] <Roey> audiocat: ok
[19:31:17] <Roey> audiocat: let's take this private
[19:31:34] *** Quits: BillyZane2 (~BillyZane@91.196.220.174) (Ping timeout: 265 seconds)
[19:31:35] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:33:03] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[19:34:08] *** Joins: semeion (~semeion@user/semeion)
[19:36:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:37:13] *** Quits: irrgit (~irrgit@192.241.175.183) (Ping timeout: 252 seconds)
[19:38:22] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:38:58] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[19:39:11] *** Quits: sudomann (~sudomann@73.183.118.9) (Quit: Lost terminal)
[19:39:24] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[19:39:45] *** Joins: yeirr (~yeirr@user/yeirr)
[19:41:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:41:15] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[19:41:16] *** Quits: yeirr (~yeirr@user/yeirr) (Client Quit)
[19:41:37] *** Joins: defiant (~defiant@user/defiant)
[19:41:40] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[19:42:10] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[19:43:55] *** Joins: iomari891 (~iomari891@105.112.138.38)
[19:47:46] *** Joins: yeirr (~yeirr@user/yeirr)
[19:48:51] *** Quits: treefrob (~treefrob@p2e54293e.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[19:49:01] <ede> SnoopJ: yes, it's not really a tutorial. but these are not trivial to write if you want good results but i'd really like to see more of them. something like the camel and the llama book or what it was, you want to have both of them.
[19:49:19] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:49:43] *** Quits: yeirr (~yeirr@user/yeirr) (Client Quit)
[19:49:44] *** Joins: darksun (~darksun@user/darksun)
[19:49:52] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[19:49:52] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:50:20] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[19:50:59] *** Quits: vladoski (~vladoski@2001:b07:add:d406:f64c:c83e:546c:7bf5) (Remote host closed the connection)
[19:51:12] *** Joins: shad (~shad@user/shad)
[19:51:29] <SnoopJ> ede, the upshot is that those docs are for people who want to generate a configure script, not people who want to use one. `./configure --help` is usually enough info to get by; I would say that's the case with CPython anyway, but https://docs.python.org/3/using/unix.html#building-python has some additional information, as well as the included README.rst
[19:51:50] <SnoopJ> probably we will be complaining about build tooling forever 😅
[19:52:44] <ede> why not, someone may pick up a good argument and change something that's worth changing ;)
[19:53:24] *** Joins: ErkiS (~opera@85.253.103.121.cable.starman.ee)
[19:54:44] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[19:54:46] *** Joins: rickybob_ (rickybob@gateway/vpn/protonvpn/rickybob)
[19:55:09] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[19:55:35] <stealth_> ede, i run something like this to custom install `mkdir build && cd build && ../configure --prefix=/opt/python/3.10 && make --jobs=8 && make install --jobs=8`
[19:55:58] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 268 seconds)
[19:56:00] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[19:56:14] *** rickybob_ is now known as rickybob
[19:56:42] <ede> hm, maybe i should start with something smaller to get back into that whole building
[19:56:50] *** Quits: grooverman (~grooverma@177.95.12.14) (Quit: bye)
[19:57:36] <ede> stealth_: 8? i envy you :)
[19:57:59] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[19:58:17] <stealth_> ede, i have a old system but it has 16cores, so it half of that to install python is np, also its done in like 5min on latest linux
[19:58:38] <ede> but mkdir build sounds like a good method to keep things clean (which is something i like)
[19:59:05] <ede> six-teen. i'll start it and get me a drink to digest this :o
[19:59:11] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:59:14] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:59:40] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:59:42] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[20:01:06] *** Joins: stdout (~stdout@216.163.21.11)
[20:01:48] <stealth_> ede, if you like core, you might like https://www.amd.com/en/products/ryzen-threadripper
[20:02:36] *** Quits: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006) (Ping timeout: 245 seconds)
[20:02:41] *** Joins: treefrob (~treefrob@p2e54293e.dip0.t-ipconnect.de)
[20:02:43] *** Joins: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006)
[20:02:46] *** Joins: nomic (~nomic@185.217.117.233)
[20:03:10] *** Joins: EgonX_ (~EgonX@2601:2c6:47f:9c18:e098:f9f1:913c:33b5)
[20:03:16] <ErkiS> I have a script that invokes curses.initscr() to get true terminal width. how to fix the issue that piping the script into " | more" remains paging forever - IF there is no output from the script?
[20:03:37] *** Quits: bss (bss@rie.incorporeal.org) (Quit: brb)
[20:03:37] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[20:04:13] *** resmo_ is now known as resmo
[20:04:43] *** Quits: EgonX (~EgonX@c-98-194-169-75.hsd1.tx.comcast.net) (Ping timeout: 252 seconds)
[20:04:55] <ede> my typical way to mess up things: ../configure --enable-optimization --prefix=/usr/local
[20:05:37] <KirkMcDonald> ErkiS: Can't you get the terminal width with ioctl?
[20:06:05] *** Joins: yeirr (~yeirr@user/yeirr)
[20:06:24] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[20:06:55] <KirkMcDonald> ErkiS: As in e.g. this snippet: https://stackoverflow.com/questions/16237137/what-is-termios-tiocgwinsz
[20:07:10] <stealth_> ede, by installing into "/opt/..." all the lib, bin folder/files are 1 place, it easy to just delete and rebuilt if you mess something up.
[20:07:17] *** Quits: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006) (Ping timeout: 264 seconds)
[20:07:32] <stdout> when making an in memory text file using io.StringIO like - file = io.StringIO(f'foobar') how can i add lines to the 'file' object?
[20:08:04] <KirkMcDonald> stdout: file.write("whatever\n")
[20:08:31] *** Joins: bss (bss@rie.incorporeal.org)
[20:08:33] <ede> stealth_: better than /usr/local? iirc all i had in /opt so far were some bigger packages like Opera (qt license long ago) and maybe mysql. but since then i put everything into /usr/local.
[20:08:38] <ErkiS> KirkMcDonald: that seems a very esoteric and platform-locked way to get terminal size
[20:08:59] <ede> but ok, i'll change this at least until i understand what i'm doing
[20:09:24] <stealth_> ede, i personally don't like messing with system files/folders
[20:09:42] <ErkiS> KirkMcDonald: and the snippet fails with "OSError: [Errno 25] Inappropriate ioctl for device"
[20:09:53] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[20:10:06] <stdout> KirkMcDonald, first time using in memory files. in my example, 'foobar' would be the name of the file or the text within? i'm only used to using file.write for writing to files on disk.
[20:10:49] <KirkMcDonald> stdout: In that example, 'foobar' is the initial text content of the StringIO object.
[20:11:00] <stdout> ok, thanks
[20:11:28] <KirkMcDonald> ErkiS: On which platform? I would broadly expect that to work on most Unix-y systems.
[20:11:53] <ede> stealth_: exactly, that's why /usr/local. only /usr/local/etc doesn't seem to work as expected, not even for binaries in /usr/local/bin. but that's a different story.
[20:11:58] <ErkiS> KirkMcDonald: Ubuntu 20
[20:12:25] <KirkMcDonald> ErkiS: Oh, you mentioned redirecting stdout.
[20:12:34] *** Joins: kosh (~kosh@user/kosh)
[20:12:42] <stealth_> ede, well its a pain when want to delete! you have to go into each of those folder to delte.
[20:12:48] <KirkMcDonald> ErkiS: The issue is that you need a stream that's connected to the terminal, if you want to use that stream to get the terminal's width.
[20:13:38] *** Quits: paul424 (~tom@ip-37-248-157-117.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[20:14:12] <KirkMcDonald> ErkiS: So if sys.stdout.isatty() returns False, then that won't work.
[20:14:37] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[20:15:07] <ede> stealth_: an opportunity to clean up all of it :)
[20:15:14] <ErkiS> KirkMcDonald: ultimately it shouldn't matter how I get the screen size - what matters is making the pipe downstream understand that there is nothing more coming from upstream. doing sys.stdout.close() did not help.
[20:15:24] *** Quits: src (~src@user/src) (Quit: Leaving)
[20:15:37] *** dcaro is now known as dcaro_away
[20:15:37] *** Quits: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) (Quit: bilb_ono)
[20:16:22] <stealth_> ede, yep. I have perfected the art of how to do things others don't agree with :D
[20:16:38] *** Joins: cmagina (sid286142@user/cmagina)
[20:16:41] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:16:57] *** Joins: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006)
[20:17:22] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 252 seconds)
[20:18:03] <ede> stealth_: yep, i've been using linux for a decade before i finally had a flatrate. so no irc, no google, just a bit of usenet guerilla style. prepare, connect, post, download, disconnect, read.
[20:18:30] <KirkMcDonald> ErkiS: Did you, at least, call curses.endwin() once you were done?
[20:18:47] <ErkiS> KirkMcDonald: yes, .endwin() gets called properly.
[20:18:49] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[20:19:00] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:d5a1:1b6b:17db:14b0)
[20:19:11] *** Joins: yeirr (~yeirr@user/yeirr)
[20:19:13] <KirkMcDonald> ErkiS: Then I am somewhat unclear on the cause of the issue.
[20:19:31] <ErkiS> KirkMcDonald: if I print a single blank line at the end - no problem, more understands that there is no more output and exits. no output at all - more pages forever.
[20:19:53] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[20:20:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:20:09] <stealth_> ede, mhmm
[20:22:21] *** Joins: fikran (~fikran@user/fikran)
[20:22:55] *** Quits: stockholm (~Andreas@p200300d2c706a40058a161e52931af9e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:23:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:23:54] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[20:24:14] <raxor2k> https://bpa.st/5BZQ  somebody can tell what im doing wrong here when trying to download files using boto3 ?
[20:25:28] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Quit: Leaving)
[20:26:39] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:27:17] <stewie925> hello guys, I was in a coding interview and I was presented with a logging example - the program was doing as it should using `with open('file.txt','r') as f:  for line in f: <process>` - and the interview asked me: how to make the file processing more efficient if the input data is huge ( 5GB).
[20:27:51] <SnoopJ> stewie925, tell us more about the "processing"
[20:27:57] <SnoopJ> what was being done with the data?
[20:28:40] <BlueSky> How to resolve this opencv installation error? https://pastebin.com/NQpQ7tmm
[20:28:41] <infobob> https://bpaste.net/3ZQA (repasted for BlueSky)
[20:28:42] <BtbN> define "more efficient"
[20:28:46] <BtbN> faster? Using less RAM?
[20:29:17] <stewie925> SnoopJ:  the program reads a log file and looks for "ERROR" messages and prints them out
[20:29:19] <mefistofeles> BlueSky: basically, you need python 3.7, which is kind of odd
[20:29:36] <stewie925> BtbN:  yes, using less RAM and prevent memory issues
[20:29:49] <mefistofeles> BlueSky: try installing from conda-forge instead of anaconda
[20:30:01] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[20:30:03] <SnoopJ> the "less RAM" piece of it would require us to see the body of that loop to know what we're trying to be less-than
[20:30:04] <BlueSky> mefistofeles: I'll try thanks
[20:30:31] <stewie925> ahhh ,,, SnoopJ:  brb, let me find it
[20:30:50] <SnoopJ> but since it goes one line at a time, I'm not entirely sure what there might be to improve. Maybe it'll be more obvious with code in-hand :)
[20:30:57] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[20:31:04] <stealth_> stewie925, was there something wrong with the your code?
[20:31:30] *** Joins: djhankb (~djhankb@208.113.164.68)
[20:31:41] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:32:40] <stealth_> stewie925, you would have used "rb" vs "r" and parsed line that way, that would be more efficient
[20:32:48] <stewie925> hello, here it is - https://imgur.com/18fMETm
[20:32:57] *** Quits: LiftLeft (~LiftLeft@102.165.16.134) (Ping timeout: 265 seconds)
[20:33:34] <stewie925> SnoopJ: stealth_: BtbN: here it is https://imgur.com/18fMETm
[20:33:53] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:33:55] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[20:35:00] <stealth_> stewie925, using `global` like that is flawed
[20:35:25] <stewie925> stealth - yeah, it was purposely done that way and asked me to catch anything iffy
[20:35:31] <stewie925> its a coding interview test
[20:35:40] <stewie925> I did point that out
[20:35:47] <stealth_> stewie925, o ok, thats neat
[20:36:01] <stewie925> but its that memory-efficient issue that stumps me
[20:36:37] *** Quits: qlixed (~qlixed@181.45.80.239) (Ping timeout: 252 seconds)
[20:36:58] <stealth_> stewie925, suppose you could have set `open(buffering=1)` if they wanted line buffer
[20:38:27] <stewie925> stealth_: yes!!!  I am itching to ask that specifically hehe -  I saw a YT video about that but its from 2013, I believe it should still work for python3 though
[20:38:27] <SnoopJ> stealth_, doing this without the global would be the main improvement as far as memory consumption is concerned. It would probably improve running time a LOT too because `line not in lines_already_read` must scan the entire list each time, so you're looking at O(N²) work there
[20:38:28] <stewie925> https://youtu.be/i2DHWxtRqpE
[20:38:44] <stealth_> stewie925, i do like their approach though! giving you code and asking you how to improve it
[20:39:44] *** Quits: nomic (~nomic@185.217.117.233) (Quit: Leaving)
[20:39:45] <SnoopJ> stewie925, are there duplicate lines in these log files? I'm not really sure I understand the check's purpose
[20:39:56] <stewie925> exactly, I like this kind of code interviews -  I was able to point out the `hour is not 02 and hour is not 03...` should be `hour not in ['02,'03'...]`
[20:40:02] *** Joins: nomic (~nomic@185.217.117.233)
[20:40:29] <stealth_> that `if line not in`... looks useless
[20:40:48] <stewie925> SnoopJ, no duplicate lines - basically it reads and ignores any logs between 0200 and 0400 - otherwise it finds lines with ERROR and reports it
[20:40:49] <stealth_> since its time stamped! how can line already exist
[20:41:20] *** Joins: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr)
[20:41:21] <stewie925> ohhh good point about `line not in ` IF there are no dups
[20:41:25] <stewie925> oh wait
[20:41:32] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[20:41:40] <grym> it's always an interesting question to consider the differences in outcomes between 1. giving a reasonable interview answer and 2. code-golfing the hell out of weird code
[20:41:41] <SnoopJ> yea there's no point to doing that at all if you know already that there aren't dupes: scanning a file this way won't revisit a line...
[20:41:58] <foo> I have a context dict we pass around throughout our code (named ctx). In different projects, I have done had ctx["uid"] to store the uid of the user's session. I've also done ctx["user_id"]... I want to use ctx["uid"] since it's short and I type this a lot, haha. But can we all agree user_id is more explicit and uid can mean a few different things? Or would you say it really doesn't matter?
[20:42:06] <grym> (he says, as the temptation to write a listcomp with a regex lambda in it grows ..)
[20:42:11] <SnoopJ> and as written, that list will grow quite large, up to the size of the number of lines in the file.
[20:42:25] <SnoopJ> (by the end of the loop you'll be holding ~ the entire file there!)
[20:42:42] <stewie925> SnoopJ: stealth_:  wait, maybe it could have duplicates - because what if the same error shows up at 05:00:03. and 05:00:45
[20:43:02] <SnoopJ> stewie925, sorry, I can't see your replies that tag stealth_ as well
[20:43:16] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[20:43:36] <stewie925> repost - maybe it could have duplicates - because what if the same error shows up at 05:00:03. and 05:00:45
[20:44:06] <stewie925> oh I didn't know that SnoopJ - guess I was used to freenode where I can tag multiple users - been a while
[20:44:07] *** Joins: CombatVet (~c4@user/combatvet)
[20:44:12] <stealth_> stewie925, then they should have used a `set` vs `list`
[20:44:27] <SnoopJ> it's not a network thing, just the way I have my client configured to avoid arguments
[20:44:58] <stewie925> I see
[20:44:59] <SnoopJ> stewie925, that makes more sense, so maybe instead of checking entire lines, you can represent errors themselves. I would say that if the "same" error occurs at two different timestamps, it's debatable if this is the "same" error
[20:45:01] *** Joins: skali (~skali@178.214.251.8)
[20:46:11] <BlueSky> mefistofeles: what is the difference between installing through anaconda and conda-forge? It is downloading some 400mb worth of packages now
[20:46:18] *** Joins: LiftLeft (~LiftLeft@102.165.16.73)
[20:46:27] *** Parts: ErkiS (~opera@85.253.103.121.cable.starman.ee) ()
[20:46:29] <SnoopJ> but if they are supposed to be treated the same, maybe that check can represent errors instead of the lines the errors live inside of. And if you could define a hashable class that represents errors (a tuple might even work), then the list could be made a set instead. Sets have O(1) lookup time and don't allow duplicates, so that will save substantial running time and maybe some memory
[20:46:50] *** Joins: sartan (~sartan@user/sartan)
[20:47:26] <stewie925> so both yourself and stealth suggest using sets instead....   makes sense yes
[20:47:27] <SnoopJ> stewie925, is it considered a duplicate of the error if it's associated with the same "Task XXXXX" ?
[20:47:40] *** Joins: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net)
[20:47:52] *** Quits: gregoryloscombe (~gregorylo@213.86.15.34) (Quit: WeeChat 3.2)
[20:47:53] <stealth_> stewie925, that `hour =` line is flaws, since `line.split(':')[0]` will give you "Jan 20 05"
[20:47:55] <SnoopJ> i.e. would an ERROR for task 12345 be a duplicate of other errors for 12345, but not for task 8675309?
[20:47:56] <stewie925> the task is showing on INFO messages though, it won't show on error
[20:48:17] <stealth_> stewie925, also using multiple `.split()` like that isn't efficient
[20:48:22] <SnoopJ> stewie925, I am looking at your screenshot where it says in a comment: "[ERROR] Task 72619 ..."
[20:48:28] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[20:48:37] <stewie925> oh I missed that .. hold on...
[20:48:50] <SnoopJ> remember, we only know what you tell us, and that right now is a limited amount of the problem this code is supposed to solve.
[20:49:55] <stewie925> SnoopJ:  if we could  compare the whole string after the [ERROR]  text, right?
[20:50:20] <stewie925> I mean I suppose we could just compare that string that comes after that [ERROR] text
[20:50:28] <SnoopJ> stewie925, that's one option. I asked about tasks because if this code is supposed to just figure out which tasks had errors, keeping track of the task number would be sufficient (and efficient)
[20:52:04] *** Joins: Jong (~Jong@2620:10d:c090:400::5:c08c)
[20:52:33] <stewie925> oh I see.... you got a point there -  assuming that the log reports only one error per task
[20:52:41] *** skali is now known as skali_
[20:53:09] <stewie925> let me post another image with line numbers - I inadvertently cut them off
[20:53:28] <SnoopJ> stewie925, these questions are aimed at getting you clarify what this code is supposed to do, because what counts as a "duplicate" isn't clear at all from the code and what you've said so far.
[20:53:43] <mefistofeles> BlueSky: conda-forge is like an official community mantained repository, whereas anaconda is just the anaconda main one (conda-forge has much more packages and probably much more variants of the same packages)
[20:54:02] <mefistofeles> so sometimes it helps using conda-forge because it happens to have the variant that fits your specific environment
[20:54:03] <SnoopJ> You could use the task number and whole error message, though, sure. That might not be the 'best' way, but it's still likely going to be an improvement over duplicating the entire file.
[20:54:07] <stealth_> stewie925, maybe the obvious one is why is there `while True:`?
[20:54:29] <stewie925> SnoopJ: basically the interviewer just said to ignore any duplicate ERROR messages
[20:54:42] <BlueSky> mefistofeles: it does makes sense now. Thankx
[20:54:43] <stewie925> maybe I should have inquired further...
[20:55:31] <stewie925> stealth_:  I did point out the while true, and the interviewer said its supposed to be there
[20:55:46] <SnoopJ> stewie925, in an interviewing situation, those kind of clarifying questions are a great idea. It shows the interviewer how you're thinking about the problem, and often they haven't actually given you a completely unambiguous problem :)
[20:56:27] *** Joins: beterraba (~beterraba@185.183.107.221)
[20:56:37] <SnoopJ> and a chance for you to see how they respond to that kind of request
[20:57:04] <grym> stewie925: ^ the meta-game here is that the interviewer is (usually) only ostensibly asking you about the question content, and is actually observing and interested in knowing ... other things
[20:57:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:57:25] <grym> stewie925: so it's useful to be explicit about "i am thinking about these externalities", at least up to a point
[20:57:48] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:dddc:a59e:4083:bc2a) (Quit: Client closed)
[20:57:52] *** Joins: semeion (~semeion@user/semeion)
[20:58:15] <stewie925> grym: hello :)
[20:58:18] <SnoopJ> total crapshoot if an interviewer is actually paying attention to this, but their response to "I'm not sure I understood the entire problem" tells you a lot as a potential employee/coworker
[20:58:19] <stealth_> stewie925, that while should go inside of the `with` blocks, i am assuming its to read/parse new updated line!
[20:58:56] *** Quits: legola (~legola@46.235.97.9) (Remote host closed the connection)
[20:59:52] <stewie925> stealth_: interestingly the interview told me the while true should be where it is when I brought it up
[20:59:55] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[21:00:31] *** r0bby is now known as r0bby[m]
[21:00:35] *** Quits: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[21:01:10] *** r0bby[m] is now known as r0bby
[21:01:17] <stewie925> stealth_: as the interview said the program/script is continuously  monitoring the log hence the while True
[21:01:40] <stealth_> stewie925, ok, just saying normally you would want to open the file once then process is as much as you want, vs open+close again and again
[21:02:07] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[21:02:09] <stewie925> stealth_: agree
[21:02:12] <stewie925> I agree
[21:02:36] <stealth_> stewie925, if that's the case then it should defiantly go within the `with open()..` block
[21:02:57] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:03:26] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Remote host closed the connection)
[21:03:47] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[21:04:12] <stewie925> sorry guys - so assuming that "duplicate" means the text string that follows the [ERROR]....
[21:04:54] <grym> stewie925: oh hai
[21:04:55] <stewie925> then I think you guys have made the right point about using set instead of list
[21:05:04] <stealth_> stewie925, they should use `set` to store data vs list
[21:05:34] <stealth_> stewie925, or `dict` if order matter python 3.6+
[21:06:23] <stewie925> stealth_ you caught another great point there too - yes the sets would sometimes "sort" the details
[21:06:35] <stewie925> dict sounds a better option... hmmm
[21:06:46] *** Joins: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr)
[21:06:51] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[21:06:56] <SnoopJ> stewie925, I would do it as a set of tuples (task_id, errmsg), or *maybe* a dict of errmsg -> list of task_id
[21:07:19] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:07:28] *** Quits: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006) (Remote host closed the connection)
[21:08:01] *** Joins: Hummer12007 (061e0434dc@2604:bf00:710:0:5054:ff:feea:5006)
[21:08:15] <stewie925> SnoopJ: thanks - just wondering what is the reason for tracking the task id?
[21:09:01] <stewie925> ohhhh
[21:09:09] <SnoopJ> stewie925, you could do the whole string if you really want to
[21:09:25] <stewie925> so your thinking is that we just interested with the actual error message itself, ignore the task id
[21:10:05] <SnoopJ> stewie925, the task id is part of the string following [ERROR] either way
[21:10:10] *** Quits: y1n (~y1n@91.141.73.115.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[21:10:46] *** Quits: Jong (~Jong@2620:10d:c090:400::5:c08c) (Ping timeout: 252 seconds)
[21:10:46] <stealth_> task id, could be part of multi log, where id = ip/port/user-data, ..
[21:11:20] <stealth_> maybe a transaction
[21:11:33] <altendky> what do you all use for flaky tests in pytest?  https://pypi.org/project/pytest-flakes/?
[21:11:48] <hexa-> rerunfailures *duck*
[21:11:49] <altendky> somehow i can't find my retry code from years ago...
[21:12:10] <hexa-> though I'm mostly a packager
[21:12:28] <stewie925> so in this code, we don't need buffering at all then (even if the input file size is in GBs
[21:12:43] <sartan> a retry handler at pytest itself, not within the test method?
[21:12:45] <altendky> hexa-: some reason to duck about that?  other than the obvious central topic of having flaky tests to begin with
[21:12:54] *** JanC_ is now known as JanC
[21:13:01] <hexa-> altendky: the latter, yeah.
[21:13:11] <altendky> sartan: the actual case presently is tests that randomly run extra slow on macos because, well, macos is randomly slow in gha
[21:13:20] <foo> I'm writing an API module that connects to an api. Is there any conventional naming for functions to differentiate between actual API calls versus local calls? eg. say I'm wanting to get a quickbooks customer. I have get_customer in this api module and I have get_saved_customer where saved is from the local database and former actually hits api. Any suggested naming convention here?
[21:13:23] <hexa-> from a packagers perspective two kinds of tests are meh: flaky ones and timing related ones
[21:13:26] <sartan> yeah, have lots of similar examples for various flaky tests, mostly timing related
[21:13:28] <altendky> like i had 4 second tests that would fail until i pushed them to 45 second timeouts
[21:13:31] *** Joins: emf (~emf@2620:10d:c090:400::5:c416)
[21:13:37] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[21:13:39] <sartan> we have a json file for specific tests that are allowed to fail in our ci/cd
[21:13:41] <altendky> sartan: yep, the test includes a timing check
[21:13:43] <sartan> with exact signatures
[21:13:50] <sartan> but it'd be interesting to handle it at the test suite
[21:13:58] <altendky> sartan: right, i was assuming a solution that decorates the specific test function
[21:14:00] <foo> Something as simple as api_get_customers might work, I can prefix all actual API functions with api_ ... but wondering what someone else might do here.
[21:14:17] *** Quits: talismanick (~talismani@76.78.246.103) (Ping timeout: 268 seconds)
[21:14:33] <sartan> could write one but it could be complicated as setUp(), setUpClass(), teardown, etc could become 'unclear'
[21:14:40] *** Joins: Naan (~naan@user/naan)
[21:14:44] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[21:15:00] <pyeveryt_> hi jinsun so shutil.copytree doesn't work when I am iterating over rows of a DF. So the destination folder doesn't even exist but i get error. Could you please inspect this? https://bpa.st/GMTA the first row works but the second row since dst already exists it fails. Not sure how to handle this
[21:15:02] <altendky> sartan: two have already been mentioned
[21:15:09] <altendky> pytest-flakes and pytest-rerunfailures
[21:15:19] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[21:15:22] <phy1729> sartan: I'd recommend not just allowing them to fail but requiring them to do so (if they aren't just flaky). If a test you didn't expect to be fixed get fixes that's something to look at.
[21:15:23] <altendky> the question was whether there was a defacto standard one
[21:15:43] <altendky> phy1729: that's a case for `@pytest.mark.xfail(strict=True)`
[21:15:55] <sartan> phy1729: It's complicated. =) some of it is like, 'event A happens, [instantiate a bunch of containers for a test,], event b must happen within 10 seconds' and sometimes it's 20 when cpu is high.
[21:16:29] <altendky> a retry on a timing test basically says 'this must be _able_ to be this fast, even if sometimes it isn't'
[21:16:29] <phy1729> Right that's just flaky, but sometimes you write tests for bugs that haven't yet been squished
[21:16:34] <stewie925> SnoopJ:  thank you
[21:16:36] <sartan> we still want that test, but when this happens "it's flaky", or some minor test-specific race condition we just allow the failure to happen. catching/raising xfail is too difficult
[21:16:44] <stewie925> stealth_: thanks to you also
[21:16:55] <sartan> We have something like 300k unit tests and this only applies to maybe 20 =)
[21:17:07] <sartan> but those 20 are noisy!
[21:17:08] <altendky> not sure what there is to catch or raise about xfail
[21:17:12] <stewie925> I wish there are more coding interview style available online hehe (I am asking too much lol)
[21:17:15] *** Joins: MaximB (~MaximB@87.68.165.53)
[21:17:27] <sartan> _raising_ xfail means you _expect_ a failure.
[21:17:28] <stewie925> I just hope I pass the interview
[21:17:38] <sartan> eg, some code is temporarily disabled because of a feature interaction or merge in progress
[21:17:53] <sartan> there's a difference between expecting a failure and ignoring one
[21:17:56] *** Joins: arinov (~arinov@31.142.50.8)
[21:17:56] <altendky> well, just xfail allows it to fail or pass
[21:18:05] <altendky> strict=True requires it to fail
[21:18:11] *** Joins: jazzy (~jaziz@user/jaziz)
[21:18:23] *** Quits: beterraba (~beterraba@185.183.107.221) (Ping timeout: 265 seconds)
[21:18:26] <sartan> but i like the idea about automatically retrying it at the suite level
[21:18:34] <sartan> or the method with a decorator as altendky says
[21:18:48] <sartan> sometimes these issues are intermittent, like asynchronous integration tests or timing issues related to device load
[21:19:27] <altendky> maybe i should have gone to pypistats.org to get the 'most used' answer :]
[21:19:40] *** Joins: emf_ (~emf@2620:10d:c090:400::5:c416)
[21:19:41] *** Quits: Dotz0cat (~Dotz0cat@h254.88.187.173.dynamic.ip.windstream.net) (Ping timeout: 245 seconds)
[21:19:45] *** Quits: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[21:19:53] <altendky> and rerunfailures takes it by 50x...  hmm
[21:20:12] *** Joins: Dotz0cat (~Dotz0cat@h38.88.187.173.dynamic.ip.windstream.net)
[21:20:31] *** Quits: kstolen (~kStolen@2a00:fa40:2aaa:1::539:82de) (Ping timeout: 245 seconds)
[21:21:31] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[21:21:46] *** Quits: emf (~emf@2620:10d:c090:400::5:c416) (Ping timeout: 245 seconds)
[21:22:11] *** Joins: kstolen (~kStolen@2a00:fa40:2aaa:1::539:82de)
[21:22:27] <enrh> Why doesn't pydantic provide PublicAttr() like its PrivateAttr()? Are you just supposed to design your class w/o public attributes that are not fields (parameters)?
[21:22:31] <altendky> looks like pytest-flakes is a bit lacking but https://pypi.org/project/pytest-rerunfailures/#re-run-individual-failures
[21:23:13] *** Quits: nomic (~nomic@185.217.117.233) (Quit: Leaving)
[21:24:19] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 250 seconds)
[21:25:16] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[21:25:57] *** skali_ is now known as skali
[21:26:14] *** Quits: skali (~skali@178.214.251.8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:26:52] *** Joins: Fiji (~Fiji@user/fiji)
[21:27:38] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Remote host closed the connection)
[21:28:44] *** Quits: Fiji (~Fiji@user/fiji) (Client Quit)
[21:29:08] <foo> My question is less technical as it is curiousity around possible naming conventions here. It's possible there is no standard protocol.
[21:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[21:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[21:31:20] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[21:33:19] *** Joins: CombatVet (~c4@user/combatvet)
[21:34:58] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[21:35:54] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:36:04] *** Joins: alzgh (~alzgh@user/alzgh)
[21:37:18] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:38:49] *** Joins: oriba (~oriba@x4db7efa1.dyn.telefonica.de)
[21:39:33] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:39:55] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[21:40:06] <Tritium> foo: it looks like your question was lost in the noise, at least on my client.  what were you asking?
[21:40:29] <foo> Tritium: Thank you for asking. :) I'm writing an API module that connects to an api. Is there any conventional naming for functions to differentiate between actual API calls versus local calls? eg. say I'm wanting to get a quickbooks customer. I have get_customer in this api module and I have get_saved_customer where saved is from the local database and former actually hits api. Any suggested naming
[21:40:35] <foo> convention here?
[21:41:12] *** Joins: mikeliuk (~mikeliuk@213.205.198.201)
[21:41:42] *** Quits: freeman_h (~freeman_h@94.5.86.162) (Read error: Connection reset by peer)
[21:41:48] <Roey> what a cool question
[21:42:39] *** Joins: han-solo (~hanish@user/han-solo)
[21:45:10] <ammar2> foo: as you said there's no convention here, but my initial thought would be to keep it distinguished with a sub-object like, `quickbooks.api.get_customer` vs `quickbooks.get_saved_customer`
[21:45:38] *** Joins: dodo__ (~dodo@user/dodo)
[21:45:55] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[21:46:02] <foo> ammar2: thanks, I'm all for initial thoughts. :) Interesting, I see your point. I could create a class for this API and run the logic in there, too. Or use attrs to do that.
[21:46:21] *** Quits: dodo (~dodo@user/dodo) (Ping timeout: 245 seconds)
[21:46:26] <foo> ammar2: or even prefix a function with api_, but a "sub-object like" sounds a bit nicer.
[21:46:59] *** Joins: StyXman (~mdione@82-64-204-19.subs.proxad.net)
[21:47:05] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:47:31] <Tritium> I'm in agreement with that.  Namespacing like that allows you to keep the API discoverable.  "im in company.user, and it has a get method... company.client would also have a get method, probably" ... and you are not looking up "company.get_current_user" or something.  You can make the latter discoverable but its harder without namespacing
[21:48:00] <StyXman> what's going on here? https://dpaste.org/YpGJ I create two sockets, one for ipv6, one for ipv4, I try to listen on the same port and the second one fails. are ports shared between ipv4 and ipv6?
[21:48:04] <SnoopJ> stewie925, you're welcome. Even though advice online is hard to come by, I would encourage you to take your own notes when you interview. Keeping a record of what you're asked and all the other stuff that happens during the interview lets you build up your own material over time.
[21:48:32] <Tritium> (this...applies to everything.  making the api its own namespace)
[21:48:37] <foo> Tritium: would you suggest using something like attrs to help with that?
[21:48:38] <Tritium> (im not being terribly clear)
[21:48:45] <gabby> jinsun: I find some of the pyright warnings for rich questionable; gonna shower and I'll show you what I mean
[21:48:49] <Tritium> foo: maybe?
[21:48:54] *** gabby is now known as aphysically
[21:48:56] <stewie925> SnoopJ: appreciate your advice
[21:48:59] <foo> Tritium: considering I have all this code in a single .py file.
[21:49:00] <Tritium> don't need it, but i dont see how it could hurt
[21:49:12] <foo> Tritium: alrighty, thank you. :) Grateful for you and ammar2 chiming in here.
[21:49:13] <sartan> foo: internal class method `_foo` external method `foo`
[21:49:29] <StyXman> more info: https://dpaste.org/5KJV/slim
[21:49:41] <sartan> def get_saved_customers() is what other api clients use, _get_saved_customer_from_db() is what your internal class methods use
[21:49:45] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:50:18] *** Joins: magla (~gelignite@55d4478c.access.ecotel.net)
[21:50:25] <foo> sartan: so, using _ to distinguish between our own internal system and excluding that for external calls. I have seen that before, and I do guess that is a sort of convention - particularly for classes if memory serves.
[21:50:34] <sartan> yep
[21:50:54] <sartan> it's merely a convention and is not enforced anywhere, but it's nice to set obvious boundaries when reading and using code
[21:51:04] <foo> sartan / Tritium / ammar2 - thank you again. I have this exact same issue with customers, projects, phases, project types.
[21:51:13] <aphysically> jinsun: like pyright reveals the type of self.overflow here as str | None instead of the literal overflow type it was set with, but mypy keeps the literal. Not sure if this is a bug or quirk of how pyright treats literals, gonna have to look into it https://github.com/willmcgugan/rich/blob/256697915d9676b7d5cb6abd5559132ff5f92fdf/rich/text.py#L985
[21:51:36] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[21:51:43] <Tritium> foo, sartan: eh, there is a namespace conflict here with the word "internal"  ... where one is internal to the application (not talking to the foreign API, but still possibly public) and internal to implementation details.  only the latter gets the _ prefix
[21:51:55] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[21:51:58] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Ping timeout: 252 seconds)
[21:52:18] *** Joins: khrbt (~znc@user/khrbt)
[21:52:36] *** Quits: yossarian (~yossarian@user/yossarian) (Ping timeout: 245 seconds)
[21:52:50] *** Joins: jwodder (~jwodder@2601:89:c600:f150:a0ae:71b2:386a:4ffe)
[21:53:11] <foo> Tritium: fair enough, that was my understanding of _ too. As in, if _ is used in a class... don't touch it, it's used internally by a class. Thanks for chiming in.
[21:53:21] <Tritium> in the library to talk to an api, a convenience function would be public in the domain of anyone using the library, but it would be internal from the perspective of the api itself.
[21:53:24] <jwodder> Is it OK for a context manager's __exit__ to "handle" an exception by raising a modified exception?
[21:53:35] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[21:53:44] *** Joins: CoolerY (~CoolerX@user/coolerx)
[21:54:12] <Tritium> jwodder: there is signaling you have to do with return values in __exit__ that deal with exceptions.  IIRC you are not supposed to raise in __exit__
[21:54:38] <jwodder> Dang, that would have saved me a couple dozen lines of code.
[21:54:41] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Ping timeout: 245 seconds)
[21:55:36] <Tritium> jwodder: imma put an asterisk on my response of...I haven't written a context manager from scratch in probably 3 years
[21:56:11] <jwodder> FTR, I tested doing this with a trivial @contextmanager-decorated function, and it seemed to work out OK.
[21:56:26] *** Joins: donofrio (~donofrio@165.225.60.54)
[21:56:55] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[21:57:11] <Tritium> ...I was just about to suggest you look at how @contextmanager is implemented to see how they handle that.  it will be written correctly
[21:57:16] *** Quits: NeoCore (~neocore@195.200.221.24) (Quit: Leaving)
[21:57:25] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:57:28] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[21:59:15] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[22:00:08] *** Joins: Jong (~Jong@2620:10d:c090:400::5:c08c)
[22:00:30] <jwodder> I see in the comments for the @contextmanager implementation "__exit__() must not raise an exception unless __exit__() itself failed".  Not sure what they consider "__exit__ failing", though.
[22:00:50] *** Joins: Nspace (~Nspace@user/nspace)
[22:02:37] *** Quits: mikeliuk (~mikeliuk@213.205.198.201) (Quit: Connection closed)
[22:03:10] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[22:03:31] <Tritium> so context on that - what they are saying is __exit__ gets passed it a lot of context including exceptions.  Don't raise exceptions based on that context - dont raise based on what happened in the with statement that used the context manager.  but if there is something that went wrong in the __exit__ function itself that is local to the exit function (which should be rare), then you can raise that.
[22:04:14] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: Ping timeout (120 seconds))
[22:04:40] *** Joins: kenoba (~kenoba@user/kenoba)
[22:05:11] <jwodder> Got it.
[22:05:15] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[22:05:31] *** Joins: qlixed (~qlixed@host101.181-9-122.telecom.net.ar)
[22:06:29] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[22:06:38] *** Quits: Jong (~Jong@2620:10d:c090:400::5:c08c) (Read error: Connection reset by peer)
[22:06:51] <sniperwolf> hello. Is there a way to generate block diagram from python code automatically?
[22:07:25] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[22:07:26] <ammar2> do you have an example diagram in mind?
[22:07:52] *** Joins: kosh (~kosh@user/kosh)
[22:07:54] <sniperwolf> no. I have example python code in mind. I want to generate diagram from it
[22:08:11] *** Quits: kosh (~kosh@user/kosh) (Client Quit)
[22:08:16] *** Quits: jwodder (~jwodder@2601:89:c600:f150:a0ae:71b2:386a:4ffe) (Quit: My work here is done.)
[22:08:28] *** Joins: kosh (~kosh@user/kosh)
[22:08:29] <_slate_> Does anyone know how to install a private repository via pip, if using the configuration explained here: https://gist.github.com/jexchan/2351996 ?
[22:08:36] <grym> sniperwolf: https://github.com/Technologicat/pyan  possibly
[22:08:41] <sniperwolf> i mean algorithm description in block diagram, given python code that is implementation of algorithm
[22:08:42] <SnoopJ> sniperwolf, https://pypi.org/project/diagrams/ is a good example of doing this in the specific context of "cloud architecture." More than that, you might just want to use graphviz directly.
[22:08:51] <SnoopJ> oh
[22:09:05] *** Joins: stockholm (~Andreas@p200300d2c706a40058a161e52931af9e.dip0.t-ipconnect.de)
[22:09:16] <SnoopJ> you want a library that eats Python code and spits out a graph describing it abstractly?
[22:09:27] <sniperwolf> yes
[22:09:28] <madduck> Has anyone figured out how to prevent Vim from linebreaking within Python strings?
[22:09:34] * SnoopJ isn't aware of anything like that
[22:09:42] <grym> sniperwolf: we can show you stuff that gives you a call graph
[22:09:50] <grym> but "understand my code and make a block diagram" is a real big reach
[22:10:03] <StyXman> sniperwolf: something that exports UML, for instance?
[22:10:10] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:10:32] <SnoopJ> madduck, I don't have mine configured to autowrap, I usually `gqap` (or select a block in visual line mode and `gq`) when I want to wrap things. I would think the Python file mode would prevent what you describe, unless it's a plugin?
[22:10:45] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:10:53] <Tritium> sniperwolf: To be entirely fair, 90% of the point of doing the diagrams is to ensure that you understand what code you are writing, so autogenerating it from code kind of defeats the purpose
[22:11:03] <SnoopJ> You may want to ask #vim
[22:11:05] <madduck> I don't auto-wrap, but gq definitely breaks strings.
[22:11:09] <grym> Tritium: " what did the _last_ idiot do" >:)
[22:11:23] <madduck> SnoopJ: yeah, I will/have
[22:11:24] <SnoopJ> madduck, ah. Yea, it will do that and I'm not entirely sure if there's a way to prevent it.
[22:11:30] <Tritium> grym: this is what pliers in a back ally are for
[22:11:36] <sniperwolf> i had in mind: write code like "while A==true: b(A) " i feed this code to tool and it generates diagram like that
[22:11:37] <sniperwolf> https://www.startpage.com/av/proxy-image?piurl=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F4%2F43%2FWhile-loop-diagram.svg%2F220px-While-loop-diagram.svg.png&sp=1634150429T25d962abedb153eff94bf19f0bfecac234c0d6f28230dfda07fb017ead0f576d
[22:11:46] *** Quits: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[22:11:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[22:12:05] <grym> Tritium: all 8 prior grad students had the gall -- the sheer gall -- to move many states away!
[22:12:08] <grym> and graduate!
[22:12:10] <SnoopJ> sniperwolf, does this do what you want? https://pythontutor.com/
[22:12:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:12:19] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[22:12:42] <Tritium> grym: oh you have to work on grad student code?  I'm sorry for your loss
[22:12:43] <StyXman> sniperwolf: that's called a flowchart, should help you finding something
[22:12:45] <SnoopJ> hmm, probably not, since it doesn't "swallow up" a loop
[22:12:47] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[22:13:00] <grym> Tritium: by the time that stinker crossed my radar, the first three authors had been gone so long they're now tenured...
[22:13:14] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[22:13:40] <grym> Tritium: enough war stories for lunch, but ... 19.  that was how many nested blocks were in the main function.
[22:14:02] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[22:14:21] <Tritium> And i thought i wrote sloppy code..
[22:14:22] <sartan> there is https://pypi.org/project/py2puml/
[22:14:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:14:39] *** Joins: Axy (~Axy@user/axy)
[22:14:44] <sartan> takes class methods and inheritance and makes some rough diagrams automatically in plantuml (which is based off graphviz, but better)
[22:15:00] <sartan> IMO it's always illegible so i don't use it. i have tried it before
[22:15:07] <sartan> wanted sphinx-autodoc & py2puml
[22:15:08] <SnoopJ> you'll almost certainly end up in graphviz either way, but what you're asking for is basically a compiler
[22:15:19] <SnoopJ> (and therefore a big ask, but it might exist?)
[22:15:34] <grym> "oh, my IR is dot" sounds like a hoot, actually
[22:15:41] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 264 seconds)
[22:15:48] <grym> if you can write a compiler for irs tax forms...
[22:15:50] <SnoopJ> grym, I mean, the question is very close to "let me see the CFG"
[22:15:54] <Tritium> At least 3 other people have written compilers for python...
[22:16:02] <Tritium> so...maybe!
[22:16:05] <SnoopJ> and as I say that, I'm vaguely recalling that Anthony Shaw did something like this...
[22:16:11] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1001)
[22:16:22] <SnoopJ> not for this purpose, but I do remember him showing off...something?
[22:16:29] *** Joins: khrbt (~znc@user/khrbt)
[22:16:38] <grym> (the tax forms thing was a sigbovik gag, but it did kind of work)
[22:16:57] *** Joins: exarkun (~exarkun@user/exarkun)
[22:17:35] <SnoopJ> ah, it might be related to his project `wily`
[22:17:56] <Tritium> fun fact: postscript was  ...not written for, but used IRS tax forms... as the standard for its own compilers (so sayeth computerphile)
[22:18:27] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[22:18:34] *** Quits: The_Loko (~The_Loko@86.127.244.35) (Quit: Leaving)
[22:19:28] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[22:19:38] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[22:19:58] *** Quits: omegatron (~some@p5b056a70.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[22:20:10] *** Joins: Betal (~Betal@user/betal)
[22:20:12] <SnoopJ> Tritium, Professor Brailsford is my favorite :)
[22:20:14] *** Parts: StyXman (~mdione@82-64-204-19.subs.proxad.net) (cheers!)
[22:20:24] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 265 seconds)
[22:20:54] <SnoopJ> And it certainly doesn't hurt that he was on the scene when so much of that business (PDF in particular) was being invented
[22:21:28] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[22:21:33] *** Joins: Axy (~Axy@user/axy)
[22:22:14] *** Joins: beterraba (~beterraba@185.183.107.213)
[22:23:07] *** Joins: omegatron (~some@p5b056a70.dip0.t-ipconnect.de)
[22:24:07] <SnoopJ> oh interesting, IBM has a tool for this (no idea what the output is like): https://github.com/IBM/pyflowgraph
[22:24:34] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[22:24:39] <SnoopJ> sniperwolf, this looks pretty good: https://rahul.gopinath.org/post/2019/12/08/python-controlflow/
[22:26:15] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:26:37] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 252 seconds)
[22:26:43] *** Joins: mickey8 (~user@user/mickey)
[22:26:48] <sniperwolf> thank you
[22:28:37] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[22:28:51] *** Quits: sartan (~sartan@user/sartan) (Ping timeout: 245 seconds)
[22:29:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[22:29:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[22:29:49] <SnoopJ> thanks for asking the question, I may give that tool a go the next time I'm handed a big pile of code that does god-knows-what
[22:30:24] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[22:30:37] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[22:30:37] *** Joins: Axy (~Axy@user/axy)
[22:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:31:14] *** Joins: Nspace (~Nspace@user/nspace)
[22:31:42] *** Joins: fikran (~fikran@user/fikran)
[22:32:08] <sniperwolf> not sure if i should start with ibm tool, or https://github.com/IBM/semanticflowgraph it depends on, honestly i have no idea what semantic flow means
[22:32:57] <SnoopJ> it might be a little more abstract than you're interested in
[22:33:00] *** Quits: agireud (~agireud@136.49.88.21) (Remote host closed the connection)
[22:33:04] <SnoopJ> (but I couldn't make a ton of sense of it either)
[22:33:26] *** Joins: djapo (~archangel@user/djapo)
[22:33:33] <SnoopJ> I think it's looking at the flow of data through programs to try and figure out what the program's larger-scale semantics are
[22:33:51] <SnoopJ> rather than just visualizing the actual flow of execution, which sounds like it might suffice for your needs (and is much simpler!)
[22:33:58] *** Quits: extnct (~extnct@2604:180:2:a54:1::9ce7) (Remote host closed the connection)
[22:34:22] <sniperwolf> oops AttributeError: module 'subprocess' has no attribute 'mswindows'. While trying pip install pyflowgraph
[22:34:37] <SnoopJ> 😬
[22:35:06] *** Joins: agireud (~agireud@136.49.88.21)
[22:35:19] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[22:35:30] <SnoopJ> sniperwolf, `pyflowgraph` on PyPI seems to be a separate project anyway
[22:35:35] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[22:36:29] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:36:46] *** Quits: Luke (~ldm@hacksoc/member) (Ping timeout: 245 seconds)
[22:37:03] *** Joins: Luke (~ldm@hacksoc/member)
[22:37:21] *** Joins: PJBoy (~PJBoy@user/pjboy)
[22:37:48] *** Joins: _zipper (zipper@gateway/vpn/protonvpn/zipper/x-90676202)
[22:37:51] *** Joins: Auron (~Auron956@user/auron)
[22:38:06] *** Joins: Axy (~Axy@user/axy)
[22:39:04] *** Parts: sleepr (~fredrik@user/sleepr) ()
[22:39:16] *** Quits: kujo (~kujo@188.166.12.52) (Ping timeout: 245 seconds)
[22:39:28] <_zipper> ?
[22:39:35] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[22:39:35] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[22:39:35] <madduck> yapf3 also breaks within strings
[22:39:40] <madduck> ah sorry ECHAN
[22:39:51] <Roey> hi
[22:40:07] <Roey> who here uses @dataclass in their code?  I like to see more uptake of this
[22:40:59] *** Quits: mei6 (~mei@user/mei) (Read error: Connection reset by peer)
[22:41:04] <grym> Roey: dataclass/attrs are very popular
[22:41:22] *** Joins: kujo (~kujo@188.166.12.52)
[22:41:30] *** Joins: kurfen (~kurfen@37.120.204.67)
[22:42:50] *** Joins: zuQe83 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net)
[22:43:06] *** Joins: sartan (~sartan@user/sartan)
[22:44:16] *** Quits: zuQe8 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net) (Ping timeout: 245 seconds)
[22:44:16] *** zuQe83 is now known as zuQe8
[22:44:42] <SnoopJ> Roey, I've used it, and many of the channel regulars have as well.
[22:45:06] *** Quits: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:11] *** Joins: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr)
[22:45:25] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[22:45:43] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[22:46:15] <Roey> grym, SnoopJ: aye
[22:46:31] <SnoopJ> Roey, do you have a question about it, or just polling the channel?
[22:46:34] <Roey> I've written so much boilterplate C++/python code in my past
[22:46:41] <Roey> just polling the channel
[22:46:50] <Roey> so I'm so very happy to see it in PYthon
[22:46:57] <Roey> also the match-case statement
[22:47:00] <sniperwolf> SnoopJ how do i open .graphml files? I only found yed program which is weird closedsource register to download company. Also ibm tool outputed this for my program. I dont know graphml syntax, but it does not seem like correct graph. Just something with one node or somerthing https://bpa.st/7VBA
[22:47:02] <Roey> and f-strings
[22:47:09] <foo> Roey: What'd you call me?!
[22:47:14] <foo> Roey: Oh, please, disregard.
[22:47:22] <SnoopJ> sniperwolf, I don't know it either
[22:47:25] <Roey> foo: LOL
[22:47:35] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:41] <SnoopJ> sniperwolf, but it looks like it's described at http://graphml.graphdrawing.org
[22:47:55] <sartan> you can use https://www.yworks.com/products/yed
[22:48:01] *** Quits: bookworm (~bookworm@neomutt/bookworm) ()
[22:48:26] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:48:33] <sartan> https://www.yworks.com/yed-live/ too
[22:48:52] *** Joins: mickey8 (~user@user/mickey)
[22:49:52] *** Joins: piscvau (~odile@2a01:cb15:803c:8000:dacb:8aff:fe83:49bb)
[22:50:01] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[22:50:16] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[22:50:26] *** Quits: CoolerY (~CoolerX@user/coolerx) (Remote host closed the connection)
[22:50:50] *** Joins: CoolerY (~CoolerX@user/coolerx)
[22:51:32] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[22:51:48] <pr3d4t0r> Howdy.  Is there a mechanism to politely ask for review of a PEP 541 package?  The original owner agreed to the transfer and the email exchange is documented in GitHub issue #1369, along with the full reasons.  We'd like to publish the package in the next few days under the new name.  Thanks in advance.
[22:52:01] *** Joins: TMan459 (~TMan459@068-187-099-141.res.spectrum.com)
[22:52:37] <SnoopJ> pr3d4t0r, you might ask that question in #pypa, I don't know if there's any inboxes/etc. to bang on to get someone to have a look
[22:53:18] <energizer> pr3d4t0r: what kind of review?
[22:53:24] <madprops> If i declare a list with this annotion: items: List[Dict[str, Union[int, str, int]]]
[22:53:38] <madprops> should I create the list dicts in a certain way?
[22:53:47] <grym> madprops: why int twice?
[22:53:50] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[22:53:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:53:58] <exarkun> does anyone have an example of a project that uses flit and exposes an accurate version number with the minimum repetition possible?
[22:54:17] <madprops> grym, items.insert(0, {"date": get_seconds(), "text": text, "num_lines": num_lines})
[22:55:07] <madprops> grym, i was guessing i needed to specify the type of each property
[22:55:12] <exarkun> madprops: That's not what a union is - https://docs.python.org/3/library/typing.html#typing.Union
[22:55:13] <SnoopJ> energizer, I think they want someone to look at the issue and get the package name released to them.
[22:55:23] <pr3d4t0r> energizer: Transfer a defunct package name to me/us.
[22:55:31] <pr3d4t0r> SnoopJ: I will do that, thank you.
[22:55:47] <madprops> grym, oh i see, like "int or string"
[22:55:58] <pr3d4t0r> energizer: We have the original package name owner's blessing to transfer it to us.
[22:56:01] <exarkun> madprops: You can't express "has these three keys and each key has a certain type associated with it" with python's type system
[22:56:04] <pr3d4t0r> Anyway, I'll go to the other channel.
[22:56:07] <pr3d4t0r> Thanks guys :)
[22:56:10] *** Quits: qlixed (~qlixed@host101.181-9-122.telecom.net.ar) (Ping timeout: 265 seconds)
[22:56:19] <exarkun> madprops: Make a new type with `attrs` instead of using a dict
[22:56:19] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:56:31] <energizer> pr3d4t0r: cant you just ask the owner to add you as an owner on pypi
[22:57:01] <SnoopJ> pr3d4t0r, failing any response there, I'd trawl through the other PEP 541 issues that have been closed and see who's closing them, but it looks like they're moving the requests along at a reasonable clip, too, you might be next :)
[22:57:03] <energizer> madprops: that's TypedDict
[22:57:11] <madprops> i'll just make a class
[22:57:17] <energizer> but yeah just make a class
[22:57:27] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[22:57:50] <energizer> madprops: with dataclasses or https://attrs.org
[22:58:10] *** saschi_ is now known as saschi
[22:58:14] <piscvau> Hello I am a beginner using pandas and I would like some help. I need to read an excel file which I store in an sdlite database. Then I need to search in the dataframe the b[x] where a[x] == a certain value. The code is here https://bpa.st/SHGA
[22:58:42] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[22:59:43] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[22:59:45] *** Quits: shabius (~shabius@2a0e:1c80:2:1021::1001) (Read error: Connection reset by peer)
[23:00:23] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1001)
[23:02:08] *** Quits: gitly2 (~gitly@85.255.234.86) (Ping timeout: 246 seconds)
[23:02:16] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Quit: Leaving)
[23:02:37] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:02:55] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[23:03:02] *** Joins: semeion (~semeion@user/semeion)
[23:03:37] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[23:03:46] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:d5a1:1b6b:17db:14b0) (Quit: Ping timeout (120 seconds))
[23:03:50] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:03:52] <ammar2> just wrote this abomination, hacking line number gotos into the language in under 30 lines https://gist.github.com/ammaraskar/6d81ca75f379c9e929089ab44c0d8702
[23:04:20] <Staunch> ammar2: dear lord
[23:04:20] *** Joins: gitly2 (~gitly@85.255.233.120)
[23:04:24] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:d5a1:1b6b:17db:14b0)
[23:04:47] <Staunch> ammar2: i don't know whether to be impressed or horrified
[23:05:03] <SnoopJ> ammar2, that beats python-goto by over 100 lines, nice!
[23:05:04] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[23:05:19] *** Joins: Macuser (~Macuser@216.30.159.201)
[23:05:52] *** Quits: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net) (Remote host closed the connection)
[23:06:13] <ammar2> SnoopJ: to be fair this doesn't do labels
[23:06:18] <ammar2> so it's weaker?
[23:06:25] <ammar2> I modeled it more like the BASIC todo
[23:07:15] <madprops> i wonder if __dict__ gets cached, or if it's generated every time
[23:08:04] <ammar2> it's part of the object usually
[23:08:13] *** LiaoTao_ is now known as LiaoTao
[23:08:21] *** Joins: stoneware (~stoneware@user/stoneware)
[23:08:25] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[23:09:53] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[23:10:27] *** dodo__ is now known as dodo
[23:10:43] *** Joins: qlixed (~qlixed@181.45.80.239)
[23:11:03] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[23:11:29] *** Quits: donofrio (~donofrio@165.225.60.54) (Ping timeout: 265 seconds)
[23:12:16] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 252 seconds)
[23:12:28] *** Joins: ub (~Thunderbi@178.165.161.120.wireless.dyn.drei.com)
[23:12:47] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[23:13:06] <SnoopJ> ammar2, yea I figured it was probably a slightly different featureset. But hacking of this sort is fun besides :)
[23:13:07] <stealth_> ammar2, +1 that looks pretty good
[23:13:39] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:14:02] *** Joins: whatsupdoc (~whatsupdo@148.64.18.24)
[23:14:11] <SnoopJ> madprops, __dict__ for object instances?
[23:14:51] <madprops> SnoopJ, yeah, I was calling __dict__ on a list of objects to create a json list, but I decided to just use TypedDict now
[23:14:53] <SnoopJ> I think there might be _some_ optimization but it's pretty much a dict per instance AIUI
[23:14:54] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[23:15:07] <SnoopJ> https://www.python.org/dev/peps/pep-0412/ might be relevant to what you're wondering
[23:15:09] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:15:34] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[23:16:48] *** Joins: Pickchea (~private@user/pickchea)
[23:17:33] <han-solo> ammar2: nice :)
[23:18:35] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[23:18:48] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:19:52] *** Joins: semeion (~semeion@user/semeion)
[23:21:09] *** Quits: whatsupdoc (~whatsupdo@148.64.18.24) (Quit: Client closed)
[23:21:51] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:22:19] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[23:22:30] *** ub is now known as ubert
[23:23:20] <CrtxReavr> JSON has arrays, not lists.  >=]
[23:23:38] *** Joins: whatsupdoc (~whatsupdo@148.64.18.24)
[23:24:35] *** Quits: piscvau (~odile@2a01:cb15:803c:8000:dacb:8aff:fe83:49bb) (Ping timeout: 260 seconds)
[23:24:43] <SnoopJ> the spec calls them arrays, but the name is about where the similarity to the ADT stops
[23:24:50] *** Joins: brickfat (~brickfat@user/brickfat)
[23:25:06] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 245 seconds)
[23:25:47] *** Joins: Akuli (~Akuli@82-203-161-31.bb.dnainternet.fi)
[23:26:01] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[23:26:04] *** Joins: carljm (~carljm@163.114.132.5)
[23:27:04] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[23:27:05] *** Quits: _zipper (zipper@gateway/vpn/protonvpn/zipper/x-90676202) (Quit: Quit)
[23:27:14] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[23:28:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:29:47] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 246 seconds)
[23:30:18] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[23:30:33] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[23:30:55] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[23:31:06] <foo> Darn it, just realized something. I have an API library that uses asyncio. I wanted to call asyncio from a flask endpoint. Don't think this will work. *Researches
[23:31:11] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[23:31:14] <foo> Ideally I rewrite the library but don't have time for that with this MVP
[23:31:21] *** Quits: beterraba (~beterraba@185.183.107.213) (Ping timeout: 245 seconds)
[23:31:27] *** Joins: djhankb (~djhankb@208.113.164.68)
[23:31:53] <SnoopJ> foo, could you switch to FastAPI? It has great async support and the API is very flask-alike
[23:31:56] *** Parts: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) ()
[23:32:08] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[23:32:16] <foo> SnoopJ: Possibly, does "async support" mean it can work with asyncio or trio?
[23:33:20] <foo> SnoopJ: actually, we do have some flask templates and static files that gets served and stuff. Not only using it for an API
[23:33:31] <SnoopJ> foo, yes
[23:33:57] <SnoopJ> not sure what it's like to convert between flask and starlette (the server FastAPI is atop) is like re: templates.
[23:34:16] <ammar2> it's pretty easy
[23:34:29] <SnoopJ> if trio is involved, you might be able to get away with flask, since you can quarantine the async stuff as trio's problem
[23:34:32] <foo> SnoopJ: thank you. Another option: I utilize a queue, webhook adds to queue, gets executed separately. I might need to do that.
[23:34:39] <aphysically> jinsun: hmmm this might be one to report to pyright
[23:34:46] <ammar2> you basically just go from `render_template` to `TemplateResponse`
[23:35:02] <aphysically> https://github.com/willmcgugan/rich/blob/256697915d9676b7d5cb6abd5559132ff5f92fdf/rich/text.py#L101 pyright infers the types of start, end, and style are a union of the three
[23:35:28] <foo> SnoopJ: less than ideal but I might be able to get away with asyncio.run() from flask endpoint. Really less than idea, though. That would only be a short-term solution.
[23:35:37] *** Quits: CoolerY (~CoolerX@user/coolerx) (Quit: Leaving)
[23:35:45] *** Joins: meridion (~meridion@punt.hetgrotebos.org)
[23:36:13] <SnoopJ> foo, as long as you know about this other option, but maybe that will be more appropriate for "we should move in this direction"
[23:36:17] *** Joins: iryd (~jamesm@c-174-56-254-152.hsd1.ga.comcast.net)
[23:36:26] *** Parts: iryd (~jamesm@c-174-56-254-152.hsd1.ga.comcast.net) ()
[23:36:42] <foo> SnoopJ: really appreciate it. thank you. We're really early phases in this and can improve.
[23:37:05] <SnoopJ> sure thing
[23:37:53] *** Quits: magla (~gelignite@55d4478c.access.ecotel.net) (Quit: Stay safe!)
[23:37:58] *** Quits: stockholm (~Andreas@p200300d2c706a40058a161e52931af9e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[23:38:35] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[23:38:42] *** spiderman is now known as SpookySpiderman
[23:38:58] *** Joins: semeion (~semeion@user/semeion)
[23:39:25] *** SpookySpiderman is now known as spiderman
[23:41:10] *** Joins: MercilessDeth (~brad@136.49.61.2)
[23:41:22] *** Quits: oriba (~oriba@x4db7efa1.dyn.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:42:26] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[23:42:47] *** Joins: xaltsc_ (~xaltsc@user/xaltsc)
[23:43:26] *** Quits: xaltsc_ (~xaltsc@user/xaltsc) (Client Quit)
[23:44:36] *** Joins: arinov (~arinov@213.194.126.155)
[23:44:50] *** Quits: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Ping timeout: 265 seconds)
[23:45:22] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[23:46:10] *** Joins: CoolerX (~CoolerX@user/coolerx)
[23:47:13] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 268 seconds)
[23:47:29] *** Joins: y1n (~y1n@77.119.164.98.wireless.dyn.drei.com)
[23:47:53] *** Joins: mactron (~mactron@apn-123-214-101-gprs.simobil.net)
[23:48:36] *** Quits: ede (~ede@user/ede) (Remote host closed the connection)
[23:49:16] *** Joins: ede (~ede@user/ede)
[23:49:29] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 250 seconds)
[23:49:57] *** Joins: zebrag (~chris@user/zebrag)
[23:52:04] *** Quits: ede (~ede@user/ede) (Remote host closed the connection)
[23:52:23] *** Joins: mostafa (~mostafa@5.233.88.94)
[23:52:36] *** Joins: ede (~ede@user/ede)
[23:54:21] *** Parts: mostafa (~mostafa@5.233.88.94) ()
[23:54:35] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:54:37] *** Joins: mostafa (~mostafa@5.233.88.94)
[23:55:20] <mostafa> hi guys ...where is python chm offline doc?
[23:55:31] <mostafa> i just can't find
[23:56:26] *** Quits: davor (~davor@user/davor) (Ping timeout: 265 seconds)
[23:56:30] *** Quits: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[23:56:35] *** Joins: davor_ (~davor@user/davor)
[23:56:38] <grym> mostafa: looks like they're called "windows help file" https://www.python.org/downloads/release/python-3100/
[23:56:59] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:58:57] *** Joins: stockholm (~Andreas@p200300d2c706a40058a161e52931af9e.dip0.t-ipconnect.de)
[23:59:01] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[23:59:31] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
