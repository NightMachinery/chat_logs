[00:00:02] <prussian> As a suburbanite, this is basically true.
[00:01:37] <edk> i think they just don't see the big picture, as most people don't
[00:01:51] <edk> the only lifestyle that's available to most of them is a car-based one
[00:01:52] <manicennui> I think it is a cultural problem.
[00:01:54] <edk> they didn't design the suburbs
[00:02:07] <manicennui> edk: Again, they push for these things.
[00:02:28] <manicennui> They even come into the city and then try to reform the city to be more suburb like.
[00:02:53] <manicennui> And they all bitch about tax dollars going to public transportation (far more goes to roads).
[00:03:26] <manicennui> Without public transportation, the roads into Chicago would be literally undriveable.
[00:03:33] <dimadima> i really want to do this https://news.ycombinator.com/item?id=28594313
[00:03:34] <manicennui> Rush hour traffic is already pretty bad.
[00:03:34] <buttsbot> As a solo developer, I decided to offer phone support | Hacker News
[00:03:49] <dimadima> i think my wife will kill me if i do
[00:03:59] <manicennui> dimadima: I have interacted directly with customers in the past, and I wish we did it more.
[00:04:11] <manicennui> Usually business customers though.
[00:04:24] <dimadima> this is going to be a free messaging app
[00:04:30] <dimadima> no paying customers
[00:04:37] <dimadima> but i kind of want ppl to call me and "waste my time"
[00:04:50] <manicennui> You say that until you get some cranks.
[00:05:00] <dimadima> yeah
[00:05:04] <dimadima> i wonder, right
[00:05:08] <edk> how much of the suburbanite mindset comes from within, though, and how much is just because they've been funneled into a car-based suburban lifestyle
[00:05:38] <edk> i really do think that the single most significant thing separating you and me from your average conservative-voting car-driving surburban idiot is means
[00:06:07] <manicennui> edk: I don't think you'll ever convince the average Republican suburbanite.
[00:07:28] <manicennui> As I said, there is a good commuter train to downtown Chicago here. There are stations all over and they are far less busy on the weekends. When suburbanites want to come into the city to go to some museums or whatever, they still mostly drive.
[00:07:36] <manicennui> And then complain about the lack of parking and the expense.
[00:08:22] <manicennui> The rates are even discounted on the weekends.
[00:08:46] <bkero> That's typically why I don't go out on weekends
[00:08:52] <bkero> It's full of suburbanites coming in and being nutsacks
[00:09:09] <manicennui> "The $7 Saturday or Sunday Day Pass is good for unlimited rides on either Saturday or Sunday. In addition, the $10 Weekend Pass (available on the Ventra app only) is good for unlimited rides on both weekend days."
[00:09:21] <manicennui> bkero: They don't go to the good neighborhoods here.
[00:09:24] <manicennui> They go to Mag Mile.
[00:11:18] <manicennui> There is one area nearby where they sometimes go because it has decent angled parking and is packed with small shops and restaurants.
[00:11:29] <manicennui> But cars have to drive really slowly through that stretch.
[00:12:56] <klardotsh> manicennui: hey now, they go to Mag Mile **and** Wrigley
[00:13:07] <manicennui> klardotsh: True. Both areas that I mostly avoid.
[00:13:12] <klardotsh> or if they like disappointment, Soldier Field :trollface:
[00:14:04] <manicennui> I suppose there are probably a lot of them at Lincoln Park Zoo.
[00:14:10] <manicennui> But they must have good parking somewhere.
[00:14:19] <klardotsh> I haven't lived in Chicago in years but I distinctly remember working late (or very early) on Cubs home days to get home (Lakeview for a bit, Rogers Park for the rest) without smelling like vomited-back-up PBRs
[00:14:21] <manicennui> And the park is huge.
[00:14:43] <klardotsh> (^ referring to the Red Line)
[00:14:51] <manicennui> klardotsh: I used to live in a spot where it made sense to shop at certain stores on Addison. I knew to check the game schedule before doing so.
[00:15:12] <manicennui> Not because the stores would be full of them, but the buses would be full of drunk people.
[00:15:25] <manicennui> Definitely been offered a shitty can of beer on the bus before.
[00:19:14] <klardotsh> but yeah anyhoot out here in Seattle we built a highway **under the city with no exits** to support north-south suburb-suburb commutes (oh wait, there's an exit at the sports fields, because of course there is) so safe to say this is a nationwide plague of design
[00:19:53] <manicennui> I liked Seattle's train, other than the fact that it is basically one line.
[00:20:18] <manicennui> Of course there was a really sketchy station near downtown.
[00:20:56] <klardotsh> yeah. the one giant line gets a few miles longer next month (it's built, just getting tested), and a second line opens in.... well.... was going to be this year, then 2024, then who knows when. mostly suburban stops on both extensions, the new stations in the city mostly don't open until mid-late 2030s
[00:22:18] <manicennui> I took it from the airport to downtown.
[00:22:26] <klardotsh> ah, yeah. it's good for that.
[00:22:38] <manicennui> The whole honor system was interesting.
[00:23:29] <manicennui> And then you have special cops who sometimes check tickets or something.
[00:23:45] <manicennui> I never actually saw them checking.
[00:24:13] <klardotsh> yeah, which is a mess and a half. probably 60% of the non-rush-hour trains I've ridden have gotten that check, but when it's crammed to the rafters there's just no sane way to do it.
[00:24:39] <klardotsh> they're now testing replacing the cops with folks who do the same job but without being armed to the teeth, which is a nice change.
[00:24:44] <manicennui> I don't understand why you don't just create physical barriers to the platform with gates.
[00:25:13] <manicennui> The CTA has automated gates. Metra relies on "conductors".
[00:25:33] <klardotsh> IIRC the rationale is that the cops or "cops" cost less than the projected losses from turnstile jumpers or something like that
[00:25:37] <manicennui> I've definitely been on Metra trains where my ticket was never checked.
[00:25:44] <klardotsh> mind you none of the Link stations are staffed, whereas almost all L stations are
[00:25:54] <manicennui> If you can call it that.
[00:26:11] <manicennui> The people at CTA stations are barely alive most of the time.
[00:26:23] <klardotsh> oh, I do remember that, but _in theory_ they're staffed lol
[00:27:05] *** Quits: dcz (~dcz@user/dcz) (Read error: Connection reset by peer)
[00:27:06] <manicennui> The only place where I see them do much is downtown where they have to get out the handicap ramps.
[00:27:35] *** Joins: dcz (~dcz@user/dcz)
[00:27:35] <manicennui> But there are usually multiple people at downtown stations.
[00:28:32] <manicennui> I wonder how European countries do it.
[00:28:41] <manicennui> Or Japan.
[00:29:08] <Brekkjern> Depends on the country
[00:29:14] <Brekkjern> And/or city
[00:30:02] <manicennui> The country of Europe!
[00:30:12] <Brekkjern> Indeed :P
[00:30:17] <manicennui> Paris in particular.
[00:30:26] <manicennui> I like what I'm hearing about what Paris is doing.
[00:30:38] <manicennui> I don't know anything about their public transportation though.
[00:31:12] <Brekkjern> You and me both
[00:32:40] <manicennui> It seems they have turnstiles.
[00:34:01] <manicennui> https://www.youtube.com/watch?v=T0YS5si8bJs
[00:34:02] <buttsbot> How To Use the Paris Metro - French Friday - LONG VERSION - YouTube - https://www.youtube.com/watch?v=T0YS5si8bJs
[00:34:30] <manicennui> Reminds me a lot of the CTA.
[00:35:59] <Geekingfrog> Paris metro, with big luggages or baby stroller is hell
[00:36:06] <Geekingfrog> so. many. stairs.
[00:36:18] <manicennui> About the same as the CTA.
[00:36:27] <Geekingfrog> what's the CTA ?
[00:36:33] <manicennui> Chicago's system.
[00:36:47] <manicennui> A lot of stations have elevators or escalators, but they are broken half the time.
[00:37:33] <manicennui> I want to say that there are several old subway stops that don't have either.
[00:39:41] <manicennui> https://wheelchairtravel.org/chicago/public-transportation/
[00:39:42] <buttsbot> Chicago Wheelchair Accessible Public Transportation - Wheelchair Travel
[00:39:48] <manicennui> Bunch of stations.
[00:39:52] <manicennui> So similar in that regard too.
[00:40:12] <manicennui> I'm guessing that Paris's system is more extensive and slightly better in some ways.
[00:41:46] <manicennui> That map he shows on the train looks exactly like the ones on some of the newer cars.
[00:44:50] <manicennui> They even have musicians playing on the platform.
[00:46:10] <manicennui> What I can see in this video looks a lot like the CTA.
[00:47:34] <manicennui> Seems like more of their system is underground.
[00:47:53] <manicennui> It would be amazing if the CTA trains were all underground.
[00:48:19] <manicennui> So we wouldn't have to hear them, and so we wouldn't have to stand out in the cold in the winter.
[00:49:13] *** Quits: dcz (~dcz@user/dcz) (Ping timeout: 252 seconds)
[00:55:23] <manicennui> OMG. Topic (included in the curiosity stream subscription discussed earlier) has a bunch of Nordic murder mystery shows.
[01:11:14] <manicennui> The Topic and Somm apps are better than HBO Max's app.
[01:11:15] <manicennui> Sad.
[01:12:10] <manicennui> They seem to be using the same app with different branding, but they don't seem to be owned by the same company.
[01:13:56] <manicennui> Huh.
[01:14:06] <manicennui> It seems they are using something called Vimeo OTT.
[01:14:14] <manicennui> https://vimeo.zendesk.com/hc/en-us/articles/115012583567-What-is-Vimeo-OTT-
[01:14:14] <buttsbot> What is Vimeo OTT? â€“ Vimeo Help Center
[01:14:50] <manicennui> So apparently Vimeo is doing something other than scamming popular video creators.
[01:15:10] <manicennui> "Vimeo OTT is Vimeo's over-the-top platform that lets you launch a subscription service with all the tools and tech you need to grow a sustainable business."
[01:15:34] <manicennui> I was able to discover this by viewing the source of the site an seeing some awesome ascii art.
[01:16:09] <manicennui> The source of this page in particular: https://watch.sommtv.com/help
[01:16:09] <buttsbot> Help - SOMM TV
[01:38:46] <ngoldbaum> the ios15 safari redesign is gonna fuck with me
[01:39:56] <dimadima> i'm looking forward to seeing this!
[01:40:10] <dimadima> apparently they added a setting to disable it
[01:40:24] <dimadima> which means there was tons of pushback. when does apple do that?
[01:41:08] <ngoldbaum> it came out today
[01:41:14] <dimadima> i don't know much about these things but i've never heard of apple adding a setting to toggle something in response to feedback
[01:41:18] <ngoldbaum> thanks for prompting me to check the safari settings
[01:41:55] <dimadima> for the redesign toggle or something else?
[01:42:20] <dimadima> i never go in there except to enable developer settings
[01:42:37] <ngoldbaum> redesign toggle
[01:42:49] <dimadima> ngoldbaum: is it there?
[01:43:01] <ngoldbaum> yup
[01:43:05] <dimadima> nice
[01:53:05] <manicennui> "I am happy to announce the promotion of <person> to System Engineering Tech Lead II. <person> is our subject matter expert in ServiceNOW."
[01:53:29] <manicennui> I guess the pay is probably decent, but are people happy specializing in some mediocre tool?
[01:58:18] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[01:58:25] <bkero> Just look at how popular AWS is
[01:58:36] <bkero> and how much specialized knowledge they demand
[01:59:15] <edm> https://usercontent.irccloud-cdn.com/file/6iT7P2N2/Screenshot%202021-09-20%20at%2022.26.58.png
[01:59:44] <edm> this kind of thing makes me less worried that AI is going to take over the world and that twitter knows too much about me
[01:59:45] <dimadima> hair care nice
[02:01:04] <edm> must have assumed i like it from all the rust coders and space stuff i follow
[02:03:53] <manicennui> bkero: There are a lot of different things you can do with AWS though.
[02:04:08] <manicennui> I guess I just don't find what ServiceNow does very interesting and can't imagine focusing on it.
[02:04:25] <bkero> I'm sure ServiceNow can do a lot too
[02:04:26] <manicennui> Especially not as a user of it.
[02:05:30] <manicennui> But I also have no interest in AWS, so maybe I'm just a weirdo.
[02:09:25] <indigo> https://simonberens.me/blog/dear-mom-im-dropping-out this is pretty great
[02:09:25] <buttsbot> Dear Mom, Iâ€™m Dropping Out â€” Simon Berens
[02:09:54] <indigo> Choice quote: "If I could be immersed in this community while building out solutions to real problems, learning the ins and outs of running a startup and using industry standard tools, what would be the use of credentials issued by a university thousands of miles away that still taught PHP for web development? Would success in the far more complex
[02:09:55] <indigo> task of building startups from the ground up not be credential enough?"
[02:10:44] <bkero> Facebook's hitting me up for tech lead positions. Is moral bankrupcy worth the money? Is it any better if I only agree to work on "good" projects like OpenCompute?
[02:12:28] <klardotsh> I personally couldn't (and have told FB's recruiters such). the "good" projects are overwhelmingly still funded by blood money
[02:18:22] <indigo> bkero: only you can make that decision. If it helps, I turned down FB's offer and now work in adtech at another company :P
[02:19:17] <kline> >success in the far more difficult task of building startups from the ground up not be credential enough
[02:19:40] <kline> but success along this metric has nothing to do with what universities supposedly (though admittedly fail) to credential
[02:20:09] <kline> i would also argue that universities/colleges should not be seen as institutions to create a skilled workforce anyway, but in the meantime they are
[02:20:59] <kline> and creating a workforce of verifiably skilled software workers is very different from launching a successful startup, which is far more aligned with replacing an MBA program
[02:21:46] *** Joins: jaix (~jaix@user/jaix)
[02:22:12] *** Quits: jaix (~jaix@user/jaix) (Remote host closed the connection)
[02:24:07] <kline> 99% of programming work is skilled vocational teamwork and should be taught in technical schools, not academic universities, which should return to being the preserve of academic research
[02:24:17] <manicennui> Agreed.
[02:24:23] <manicennui> The bootcamps are nearly there.
[02:24:45] <manicennui> But I also see value in a true liberal arts education. People should learn to read/write and reason well.
[02:24:52] <kline> these courses should be shorter, more practical, cheaper, and deliver bang for buck that is good for students and employers, establishing a baseline of actual skills in both fundamentals and current industry needs
[02:24:58] <manicennui> Just doesn't need to be four years.
[02:25:25] <manicennui> I find it insane that people pay today's tuition rates in the US.
[02:25:38] <kline> manicennui, i think most bootcamps are really ways to fleece people who cant afford college (socially, financially, time-cost) but want to be in software
[02:25:39] <manicennui> Especially people not going into a field where the pay is high.
[02:25:57] <kline> ive interacted with a handful of bootcamp people and the quality has not been there
[02:26:14] <manicennui> I've had mixed experiences, just like people from university.
[02:26:25] <manicennui> Education is not a good predictor.
[02:26:49] <kline> i think part of the problem is that we dont actually know what good software _engineering_ practice is yet
[02:26:53] <manicennui> And we have hired a lot from schools like CMU.
[02:27:01] <kline> we're throwing stuff at the wall and seeing what sticks
[02:27:12] <manicennui> I kind of think that I do.
[02:27:21] <manicennui> But there also isn't one path.
[02:27:28] <manicennui> And it's hard to judge in a few hours.
[02:27:38] <kline> we dont practice software engineering like we practice other engineering disciplines
[02:27:44] <manicennui> And has nothing to do with who is the best at coding challenges.
[02:28:16] <manicennui> kline: Definitely. I don't think we act like professionals at all, but we currently have the upper hand in the market, so employers have to deal with us.
[02:28:33] <kline> well, i think we should be working to improve that
[02:28:55] <kline> but what im _really_ saying is that credentials are garbage if no one knows what to test for
[02:29:09] <kline> "i founded a startup" is just a crucible to select out the hard way those that cannot
[02:29:25] <kline> not to train up and then assess outcomes
[02:29:56] <kline> credentials are worthless because no one knows what to measure, or along those metrics where success lies
[02:30:35] <kline> until we know what is important we cant measure or train for it
[02:30:53] <manicennui> Sure.
[02:31:06] <manicennui> The real problem is that the things we actually want are hard to test/measure.
[02:31:08] <kline> i dont see this improving for centuries, to be honest, same as its taken us all of recorded history to be able to build the bridges we have now
[02:31:15] <manicennui> So we settle for things that are easy to test/measure.
[02:31:29] <manicennui> That aren't correlated well with what we actually want.
[02:31:44] <kline> the problem is people want the gradiose software bridges now and are willing to put people and money into it and we build terrible monstrosities that dont work
[02:32:12] <manicennui> kline: I used to worry a lot about this, and then I realized that doing anything about it is almost impossible, and continuing to allow all of these incompetent people into the field just makes me look better.
[02:32:31] <manicennui> But I think there are ways to actually filter a lot of them out.
[02:32:37] <kline> ok
[02:32:42] <manicennui> Tech stack choice is a big one.
[02:33:07] <kline> i think im going to go get some food
[02:33:08] <kline> bye
[02:36:22] *** Quits: hoistbypetard (hoistbypet@user/hoistbypetard) (Quit: ZNC 1.8.1 - https://znc.in)
[02:36:41] *** Joins: hoistbypetard (~hoistbype@user/hoistbypetard)
[02:46:29] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:57:12] <manicennui> Interesting comment about Heinlein: https://www.reddit.com/r/books/comments/jdvx0/heinleins_views_on_homosexuality/c2bg6ft/?utm_source=reddit&utm_medium=web2x&context=3
[02:57:13] <buttsbot> Cambwah comments on Heinlein's views on homosexuality?
[03:13:31] <indigo> kline: Clearly the way to select great software engineers is to have them do algorithms problems on a whiteboard during an interview
[03:16:24] *** Quits: hoistbypetard (~hoistbype@user/hoistbypetard) (Quit: ZNC 1.8.1 - https://znc.in)
[03:16:57] *** Joins: hoistbypetard (~hoistbype@user/hoistbypetard)
[03:17:37] <manicennui> https://www.bankinfosecurity.com/hacker-makes-off-12-million-in-latest-defi-breach-a-17580
[03:17:38] <buttsbot> Hacker Makes Off with $12 Million in Latest DeFi Breach
[03:17:38] <manicennui> lol?
[03:53:25] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[03:55:13] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[04:20:14] <manicennui> https://www.cnn.com/2021/09/20/politics/texas-abortion-doctor-lawsuit/index.html
[04:20:14] <buttsbot> Texas doctor who says he performed abortion sued in first known challenge under new law - CNNPolitics
[04:20:48] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:25:39] <kline> By Tierney Sneed and Ariane de Vogue, CNN
[04:25:43] <kline> unfortunate name
[04:28:29] <manicennui> "One lawsuit was filed Monday by Oscar Stilley, a former tax attorney in Arkansas who is serving a home confinement sentence for a federal conviction on tax crimes."
[04:32:27] <dmc> kinda hilarious that offline maps aren't available in Google Maps if you use incognito mode
[04:39:48] <manicennui> Makes sense.
[04:40:08] <manicennui> Best to isolate incognito mode completely.
[06:14:12] *** Quits: girst (~girst@zeta.gir.st) (Ping timeout: 240 seconds)
[06:14:51] *** Joins: girst (~girst@zeta.gir.st)
[06:20:45] <dimadima> the firefox dev tools color picker sucks
[06:21:26] <dimadima> why can't they add HSL
[06:23:42] <dimadima> is anyone else bothered by this
[06:34:57] <gwozniak> I can honestly say it has never been an issue for me
[06:37:54] <gwozniak> Also: number of times I have used or needed the colour picker: 0
[06:38:47] *** Joins: dcz (~dcz@user/dcz)
[06:42:38] <manicennui> https://www.youtube.com/watch?v=axcPoS2sF0E
[06:42:39] <buttsbot> Turning Your Back To Leopards & Cheetahs | BIG CATS Show Their Predatory Nature Part 2 - YouTube - https://www.youtube.com/watch?v=axcPoS2sF0E
[06:42:44] <manicennui> Amazing how strong that instinct is.
[06:43:20] <manicennui> Also amazed by what babies cheetahs are.
[06:43:48] <dimadima> gwozniak: oh i use the color picker
[06:44:16] <dimadima> this big cats video looks very cool i will watch it later
[06:45:04] <manicennui> People who get that close to big cats are kind of nuts, even if they do act super tame.
[06:45:21] <manicennui> Even house cats can do a fuckton of damage if they decide to.
[06:46:03] <dimadima> yes fucking with animals is insane
[06:49:07] <dimadima> different strokes
[07:40:29] <manicennui> Speaking of fucking with animals, I'm watching Beastars.
[07:40:34] <manicennui> Slut bunny is hilarious.
[07:56:38] <gwozniak> Welp, Canada had it's election, which turned out to basically be the identity relation
[07:56:42] <gwozniak> *its
[08:52:46] <indigo> Still Trudeau?
[09:09:41] *** Quits: dcz (~dcz@user/dcz) (Ping timeout: 264 seconds)
[09:20:40] <klardotsh> from what I've heard, not only still trudeau, but little movement at all in any seat
[09:21:06] <klardotsh> but I'm in the Wild Lands down south so idk directly
[10:01:40] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 268 seconds)
[10:02:51] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[10:12:00] *** Joins: dcz (~dcz@user/dcz)
[11:50:32] <manicennui> https://www.youtube.com/watch?v=1OcAUhe3E1E
[11:50:32] <buttsbot> Vlojure - A New Way to Write ClojureScript - YouTube - https://www.youtube.com/watch?v=1OcAUhe3E1E
[12:25:38] *** Joins: reneeontheweb (~reneeonth@c188-149-36-100.bredband.tele2.se)
[12:30:17] *** Quits: dcz (~dcz@user/dcz) (Ping timeout: 246 seconds)
[12:34:17] <Geekingfrog> that's pretty cool
[12:35:32] *** Quits: gwozniak (~user@dsld126.ody.ca) (Remote host closed the connection)
[12:35:45] *** Joins: gwozniak (~user@dsld126.ody.ca)
[12:42:43] <Geekingfrog> It's not very practical, but I find that neat nevertheless
[13:01:54] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 264 seconds)
[13:55:47] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[13:56:50] *** Joins: riv (~river@tilde.team/user/river)
[14:56:08] <gerikson> "GMP is bad because it does not accomodate our build system" - https://news.ycombinator.com/item?id=28603572
[14:56:09] <buttsbot> A bitch to use on just about every language in existence. The issue is having co... | Hacker News
[14:58:22] <gerikson> serious question: is this a troll? https://lobste.rs/s/dpdmcg/structural_pattern_matching_python_3_10#c_gokluc
[14:58:22] <buttsbot> Structural pattern matching in Python 3.10 | Lobsters
[15:01:56] <riv> there's no GMP replacement in pure rust?
[15:02:32] <riv> looks like there are
[15:03:10] <prussian> gerikson: it's a fair criticism if you are using such langs.
[15:03:23] <prussian> I know the struggle this person has.
[15:03:40] <prussian> which is why I tried suing for nix.
[15:03:59] <prussian> with `nix bundle` I hope I can bring it back up
[15:04:11] <prussian> but I fear bundle is basically the same as ubuntu snaps basically, lol.
[15:06:18] <prussian> idgi gerikson how is this post a troll?
[15:07:43] <gerikson> just wondered if sum types are as ubiqioutus as the person states
[15:08:24] <Xe> prussian: you can build ubuntu snaps with nix lol
[15:08:44] <prussian> the future is now.
[15:09:35] <prussian> I want to get off this Timesys Factory distro and onto something that isn't basically some hand rolled Makefile framework for building libraries, root filesystem and a toolchain.
[15:10:30] <prussian> anyhow, today is the day I show the power of nix... wish me luck?
[15:13:07] <prussian> gerikson: It seems to be gaining traction in the mind share though, in terms of nueue langs.
[15:13:19] <prussian> zig, rust, etc...
[15:13:56] <prussian> hell, does std::variant count? it's so gross, it's hard for me to think so
[15:15:01] <gerikson> wiki seems to think so?
[15:15:23] <prussian> c++ is such a riot
[15:15:37] <prussian> I'm barely up to date on all the cool c++17 stuff.
[15:16:06] <prussian> I've switched to auto x() -> type declarations
[15:16:19] <prussian> soon I will use auto everywhere.
[15:20:37] *** Joins: dcz (~dcz@user/dcz)
[15:30:33] <companion_cube> gerikson: this person is serious yes
[15:30:45] <companion_cube> He's a ocaml old timer
[15:31:10] <companion_cube> When you have sum types they're roughly as often used as structures/records
[15:31:16] <companion_cube> Meaning all the damn time
[15:31:54] <companion_cube> prussian: std::variant doesn't count, it's a ugly unusable union
[15:55:16] <prussian> so true...
[15:55:25] <prussian> hwat a shame.
[17:06:29] <gwozniak> gerikson: yeah, sum types are as old as the hills. I still see no reason to add it to Python.
[17:07:20] <gwozniak> It would be more trolling if Python weren't actually sort of trying to become more "typed"
[17:07:25] <gerikson> I read that comment as a backhanded dismissal of Python as weakly typed
[17:07:39] <gwozniak> It is that, I think
[17:08:48] <gwozniak> Saying that every language needs it (which the account sort of does earlier) is just nonsense, imo
[17:10:54] <gerikson> dunno why Python brings all the bile
[17:11:38] <gerikson> considering how mild @Corbin seems his comments are indicative of a seething rage
[17:11:43] <WilhelmVonWeiner> because Python just werks
[17:12:22] <WilhelmVonWeiner> you can't have a language everyone loves using where the BDFL thinks map/reduce is meh
[17:12:44] <WilhelmVonWeiner> s/everyone loves using/is generally popular/
[17:13:53] <prussian> damn...
[17:14:15] <prussian> Python is the bane of my existence.
[17:28:02] <companion_cube> gwozniak: all languages should have sum types
[17:28:13] <companion_cube> But some are too cursed fit that now
[17:28:36] <gwozniak> Nah, they don't all need it
[17:29:46] <companion_cube> That's reason number 1 why zig > C :)
[17:40:26] <gwozniak> I think sum types are great.  You don't need them everywhere, and I posit their inclusion everywhere won't make a significant difference to the small tasks that are best served by "scripting" languages
[17:40:54] <gwozniak> In any large codebase, I think sum types (and type systems in general) are the way to go
[17:41:20] <gwozniak> I don't care at all about sum types when I'm writing simple analysis code for log output, etc.
[17:42:03] <gwozniak> If I have to bother with managing types at all in that sort of stuff, I will reach for something else
[17:45:14] <gwozniak> I talked to some data analytics people recently and the gist of the conversation about programming stuff was, "it will never be structured, so we don't care too much about structure ourselves. We only want an answer"
[17:49:56] <companion_cube> Yeah ok
[17:50:25] <companion_cube> For any serious programming, with a typed language, sum types are the bee's knee
[18:10:43] <Geekingfrog> What about serious programming with dynamically typed language?
[18:11:19] <riv> it's still research
[18:11:22] <riv> there is some though
[18:11:45] <wrl> yeah, serious programming with dynamically typed languages is still an urban legend
[18:16:37] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:36:20] *** Quits: dcz (~dcz@user/dcz) (Ping timeout: 252 seconds)
[18:38:20] <ngoldbaum> why so serious
[18:41:29] <companion_cube> Geekingfrog: absurd!!1!
[18:45:52] <dimadima> are types really being added to python?
[18:50:03] <dimadima> i mean, static types
[18:50:09] <dimadima> obviously things have types :)
[18:50:57] <dimadima> type hints?
[18:54:18] <Geekingfrog> yes, there's been some efforts in the past years to add more type hints and support for them
[18:55:08] <Geekingfrog> Both for tooling to do type checking, static analysis and code completion (LSP & whatnot), but also some libraries like pydantic exploits type hints quite a bit.
[18:55:38] <dimadima> Geekingfrog: so mainline 3.x has official support for this stuff and the language is heading in that direction?
[18:55:47] <kline> 14:15 <gwozniak> I talked to some data analytics people recently and the gist of the conversation about programming stuff was, "it will never be structured, so we don't care too much about structure ourselves. We only want an answer"
[18:55:57] <kline> its very easy to get an answer
[18:56:02] <kline> harder to get the right answer, though
[18:57:29] <Geekingfrog> dimadima: the language will never be statically typed. There's considerable resistance (rightly so I'd say) and there are a ton of stuff relying on the very dynamic nature of python. But the camp pushing for more powerful tools based on type hint can't be ignored either. I'm not too close to the internals of python dev though.
[18:57:55] <Geekingfrog> It's gaining mindshare at least, some popular libraries are providing type hints nowadays
[18:58:06] <kline> theres no need for python to be strictly typed anyway
[18:58:12] <kline> diversity in tools is good
[18:58:18] *** Quits: n3t (n3t@s45.mydevil.net) (Read error: Connection reset by peer)
[18:58:43] *** Joins: n3t (n3t@s45.mydevil.net)
[18:59:11] <kline> no one is arguing that for mission critical software being able to perform higher-confidence QA through static analysis is bad
[18:59:32] <kline> we know its a good thing here, but that doesnt mean everything must aim to solve this with the costs it brings
[18:59:50] <Xe> kline: of course python is typed
[18:59:54] <Xe> you write it using a keyboard
[19:00:27] <Geekingfrog> :D
[19:00:31] <kline> >they dont solely voice-code
[19:00:35] <kline> hope you enjoy your rsi
[19:01:45] <Geekingfrog> Personally, I quite like gradual typing. You add type hint/annotation when it matters, or you feel you get the most bangs for your bucks, and for the rest, you live "dangerously"
[19:04:07] <kline> Geekingfrog, my concern is that bugs happen, almost by definition, where you dont check for them
[19:04:08] <riv> im very suspicious of gradual typing
[19:04:20] <dimadima> i've personally never felt like types provided an overhead, but the opposite. past 200-300 LOCs and some number of files, my personal ability to continue adding complexity plummets without static types
[19:04:30] <riv> it seems way more complex than standard static typing
[19:04:34] <dimadima> i'm also very suspicious about gradual typing
[19:04:34] <kline> the bits you think are safe enough to not need typing is where youre going to shoot yourself in the foot with bugs anyway
[19:05:21] <Geekingfrog> It can be horrendous to have a flexible ORM, or something mapping somewhat dynamic SQL queries that also satisfy a typechecker
[19:05:29] <kline> dimadima, i have a suspicion that almost all code artefacts are <300 lines and 2-3 files anyway
[19:05:30] <dimadima> i sincerely believe that people who can code with dynamic types are just more intelligent than me
[19:06:38] <dimadima> kline: yes that's true. but often they fit into bigger things, like if the artefact is a library
[19:06:47] <dimadima> you might say in that case it provides a black box interface
[19:06:56] <kline> i suspect if you bin all software ever written in a histogram by hundreds-of-loc, theres a massive long tail distribution with almost all code written in small, almost throwaway, tools
[19:07:12] <dimadima> but over the past 10 years i've really only worked on larger systems, so for me w/o types it's been terrible
[19:07:31] <dimadima> kline: yeah that's true
[19:08:06] <Geekingfrog> Agree, types help a lot for big projects. But as you mentionned, there's so much programming on much smaller scales
[19:08:06] <dimadima> but even for little tools and scripts like that, if they use other libraries, for me it's much easiert to produce these little artefacts with types
[19:08:33] <Geekingfrog> All I see from the data scientits I interact with are few hundred lines notebooks, where flexible querying and graphs are central
[19:08:53] <dimadima> Geekingfrog: all i'm saying is i've never experienced a loss of flexibility or any other such overhead from types
[19:08:58] <manicennui> I'm confident that my coworkers would write bad statically typed code.
[19:09:35] <dimadima> although i do emphasize that what i'm saying is my personal experience and in no way am i trying to get into some argument over typed vs dynamic langauges :)
[19:10:15] <dimadima> i'm merely curious what flexibility people lose when they use typed languages? how would you describe such an experience?
[19:10:45] <dimadima> (i've also never used a lisp, for example)
[19:10:51] <kline> example: i needed to do some time based stuff in rust the other day
[19:10:58] <riv> i think it's just a different experience doing the programming mostly, you can end up with the same thing but you have to kind of plan it out more
[19:11:24] <kline> in almost every language, you can get times as a delay since an epoch
[19:11:34] <riv> i feel like with lisp and other dyanmic languages you grow the code more organically but with a very strict typed language you kind of scaffold and blueprint it more
[19:11:45] <Geekingfrog> How would you do some SQL queries, with joins in a typed language? And in such a way that you can easily change the query without having to change many many more definitions alongside.
[19:11:57] <kline> in rust, either i had an opaque Instant type that I could do various time-like things with, OR, i had an integral type I could do math operations against
[19:12:05] <riv> at the end of the day you basically end up with the same algorithms and data structures though
[19:12:07] <Geekingfrog> It's doable certainly, but I found it a lot easier in dynamic language like python & clojure
[19:12:19] <kline> what i wanted to do was take the current time, round up to the next 10th second, and then wait until that time
[19:12:20] <manicennui> dimadima: Something I find that is often a pain in statically typed languages is JSON deserialization.
[19:12:32] <kline> in rust, that required multiple types and conversion between them
[19:12:36] <dimadima> Geekingfrog: yes if you're in a languahe where you need to set up models for everything that's marshalled into your static type runtime, i see how that might be constraining
[19:12:39] <kline> this wouldnt be the case in python
[19:12:48] <manicennui> dimadima: Unless you are very strict with what you accept.
[19:13:25] <dimadima> kline: but if you know all that about rust, why would it slow you down
[19:13:44] <dimadima> the overhead there seems like in the initial learning about those static types
[19:14:03] <dimadima> manicennui: i kind of like having to create model types for marshalled objects
[19:14:25] <dimadima> manicennui: most runtimes and serde libraries let you be pretty flexible about what you ignore
[19:14:45] <manicennui> dimadima: Depending on the language, things that are optional can be a bit of a pain.
[19:14:49] <dimadima> but eh maybe not, i see it the other way too
[19:14:57] <dimadima> yeah
[19:15:00] <kline> dimadima, in python itd be a modulo and an add, that simple. in rust i need to refer to the docs to figure out what interfaces and options i have to do that, then cast back and forward
[19:15:00] <kline> it takes both more code and more knowledge in my head, which also means more knowledge i need to have learned and may need to still reference to refresh
[19:15:12] <kline> dimadima, in python itd be a modulo and an add, that simple. in rust i need to refer to the docs to figure out what interfaces and options i have to do that, then cast back and forward
[19:15:15] <manicennui> In Go your options are either default values, which are idiotic, or using pointers and then checking whether values are null.
[19:15:15] <kline> it takes both more code and more knowledge in my head, which also means more knowledge i need to have learned and may need to still reference to refresh
[19:15:44] <dimadima> okay i see what you all are talking about
[19:16:00] <dimadima> 1) things where data crosses boundaries
[19:16:10] <riv> there is some static analysis that is just objectively good though
[19:16:28] <riv> in javascript, if you use a variable that doesn't exist, you get nothing until the line of code executd
[19:16:43] <kline> riv, like i said earlier, no one disputes that
[19:17:00] <dimadima> riv: fortunately most linters even pick that up
[19:17:05] <dimadima> you don't even need static analysis for that
[19:17:17] <manicennui> riv: You don't need static typing for that.
[19:17:21] <riv> i think that lint counts as static analysis
[19:17:23] <manicennui> riv: Perl can tell you that.
[19:17:23] <kline> dimadima, pedant point: linting is static analysis
[19:17:36] <dimadima> kline: i thought that as soon as i hit "enter" :)
[19:17:40] <dimadima> that's a good point
[19:17:44] <kline> (static analysis is just any code analsys that doesnt require execution)
[19:18:03] <kline> (compare profiling as a dynamic analysis technique)
[19:18:18] <manicennui> riv: I think what you are really getting with statically typed languages there is a forced compilation step.
[19:22:36] <ngoldbaum> dimadima: type hints in python have no runtime implications, theyâ€™re purely there for static analysis
[19:22:47] <dimadima> i suspect i need to spend some time w/ a LISP. until now i've used JS and Python and both of those dynamic experiences have been really not my cup-of-tea
[19:23:24] <dimadima> ngoldbaum: that's more or less like typescript
[19:23:46] <manicennui> dimadima: I don't think a lisp will change your mind there.
[19:24:18] <dimadima> manicennui: you don't think the total syntax reduction and macros makes the lack of types more "worthwhile"?
[19:24:58] <manicennui> I think the two are orthogonal.
[19:25:04] <dimadima> i see
[19:25:36] <manicennui> That being said, Clojure is pursuing a different solution to the problem.
[19:25:37] <riv> its not totally orthogonal, typed macros are a lot harder
[19:25:55] <manicennui> And Racket is gradually typed.
[19:26:04] <manicennui> Common Lisp is also gradually typed.
[19:26:27] <manicennui> At least some implementations are.
[19:31:00] *** Joins: dcz (~dcz@user/dcz)
[19:31:29] <manicennui> Looks like Tom Hanks is making a sci-fi sequel to Castaway.
[19:31:49] <manicennui> https://www.youtube.com/watch?v=-0bYWnP3jH4
[19:31:49] <buttsbot> Finch â€” Official Trailer | Apple TV+ - YouTube - https://www.youtube.com/watch?v=-0bYWnP3jH4
[19:32:20] <manicennui> The robot's voice is atrocious.
[19:33:09] <manicennui> Love the aesthetic, but it seems a bit too cute.
[19:43:07] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:52:07] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[19:53:30] *** Joins: riv (~river@tilde.team/user/river)
[20:45:18] *** Quits: reneeontheweb (~reneeonth@c188-149-36-100.bredband.tele2.se) (Remote host closed the connection)
[21:38:23] <companion_cube> Best gradual typing right now, I think, is typescript
[21:38:43] <companion_cube> Just because they pourred so much effort into it
[21:39:07] <companion_cube> It's also miles ahead of the other gradual type systems
[21:51:30] <manicennui> companion_cube: But it is completely absent at runtime.
[21:52:28] <companion_cube> Sure, it's gradual
[21:52:53] <companion_cube> It's optional, so how could it be a runtime thing?
[21:54:37] <manicennui> Contrary to what you seem to think, most dynamically typed languages do have types at runtime.
[21:56:11] <dimadima> i'm not seeing disagreement as to whether dynamically typed languages have runtime types.
[21:56:33] <companion_cube> Doesn't mean it's the same types as the gradual types manicennui
[21:56:44] <manicennui> companion_cube: In most languages it is though.
[21:56:52] <manicennui> With TS the information is lost.
[21:56:54] <companion_cube> Which one has runtime generics?
[21:56:56] <dimadima> typescript is phenomenal though. i haven't used ocaml or many other lgangues but having some from java/c#, ts is liberating
[21:57:17] <dimadima> companion_cube: c# is the only one i know
[21:57:26] <companion_cube> It's static though :)
[21:57:29] <dimadima> but i don't know much at all
[21:57:39] <companion_cube> Not what I'd call gradual typing
[21:57:53] <dimadima> companion_cube: oh you meant dynamic/gradual. do such languages have generics?
[21:58:29] <companion_cube> Yes, TS does
[21:58:36] <companion_cube> Pretty powerful ones too
[21:58:41] <dimadima> companion_cube: you count TS as gradual?
[21:59:05] <dimadima> yeah generics in TS are pretty dope. not as nice as java/c# but as i said, i love TS all around so i'm not complaining
[22:01:42] <companion_cube> dimadima: sure, TS allows any anywhere
[22:01:52] <dimadima> i ran into a TS generics weakness the other day and it was pretty interesting. https://stackoverflow.com/questions/64893755/how-do-i-assign-a-value-to-a-conditional-type can't imagine anyone wants to read this but just in case :)
[22:01:52] <buttsbot> typescript - How do I assign a value to a conditional type? - Stack Overflow
[22:01:58] <manicennui> companion_cube: https://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study/paper.pdf
[22:02:08] <dimadima> companion_cube: yeah, its true. i just wonder what % of people actually gradually adopt TS
[22:02:24] <dimadima> i had a pretty large JS codebase and as soon as i started replacing files with TS i couldn't stop
[22:03:16] <companion_cube> manicennui: didn't know typed racket kept everything at runtime
[22:03:27] <manicennui> I don't think it keeps everything.
[22:03:42] <companion_cube> So that's one counter example, albeit a pretty academic one
[22:03:50] <manicennui> You can read the section called Deep: Enforce Types.
[22:04:04] <manicennui> Sounds like it is mostly concerned with the interaction between typed and untyped at runtime.
[22:04:38] <manicennui> Type erasure is fine when your entire language is statically typed.
[22:04:51] <manicennui> And I'm not saying there are no benefits to what TS does.
[22:05:10] <manicennui> And as the paper mentions, there are performance implications to different approaches.
[22:05:28] <manicennui> But I've also seen TS code that has additional code to check runtime stuff because of the type erasure.
[22:06:04] <manicennui> https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards
[22:06:29] <dimadima> part of what took me so long to even try TS is this exact issue
[22:06:44] <dimadima> it seemed horrible to take TS, translate it to JS and run the code in a JS runtime w/o any reference to the types
[22:06:54] <dimadima> but in practice, for me, it turned out totally fine
[22:06:59] <dimadima> type guards are fine, yes
[22:07:06] <dimadima> they're nice even
[22:07:25] <manicennui> It claims that page is deprecated, but I don't see the discussion of type guards in the new documentation.
[22:07:55] <dimadima> manicennui: i've not heard anything about them being deprecated
[22:08:10] <manicennui> There is a banner when you load that page.
[22:08:21] <manicennui> I don't know that they have, but that page has been.
[22:08:34] <dimadima> yeah i see the banner
[22:09:47] <manicennui> Looks like the Narrowing page contains the information?
[22:11:04] <manicennui> dimadima: I've had past discussions with companion_cube about types in dynamic languages.
[22:11:42] <companion_cube> Yeah
[22:12:16] <companion_cube> And sometimes it's unavoidable to have checks, given that json in TS is just a cast from JSON.parse
[22:12:18] <manicennui> I can't remember the details of his argument, but I believe it is that dynamic languages basically have one type more or less at runtime.
[22:12:33] <manicennui> Something along the lines of Object.
[22:12:36] <companion_cube> Where more static langs will force you to validate
[22:13:35] <dimadima> how is this subject to argument?
[22:13:41] <dimadima> i mean, isn't this a matter of fat
[22:13:44] <dimadima> fact*
[22:13:53] <dimadima> i don't know what the fact is, but certainly there is one
[22:14:08] <dimadima> it probably depends on how the language is implmeneted
[22:14:15] <manicennui> If you want to go that route, then nearly all types in Java are type Object too.
[22:14:25] <companion_cube> It's just that dynamic types are not really types ;)
[22:14:41] <manicennui> The point is that many dynamic languages will complain if you try to add a string to a number.
[22:14:44] <companion_cube> TS might actually be a good example of that, both worlds are quite decorated in the end
[22:14:49] <dimadima> companion_cube: my understanding is that sans erasuure java has runtime types and they're checked at runtime
[22:14:52] <manicennui> And the ones that don't are mostly doing implicit conversions between types.
[22:14:56] <dimadima> every time an object is accessed, its type is checked
[22:14:59] <companion_cube> Sure, and so will they if you divide by zero manicennui
[22:15:22] <dimadima> i wouldn't be surprised each object in java has a type field that specifies its class concretely at runtime
[22:15:39] <dimadima> i mean, that, after all, is how getClass().getName() works i think
[22:15:46] <manicennui> dimadima: Java does erase generics.
[22:15:49] <dimadima> it does
[22:15:56] <dimadima> that's why i said "sans-erasure"
[22:15:59] <manicennui> As does Rust.
[22:16:21] <manicennui> I don't actually know much about how the rest works.
[22:16:29] <dimadima> beyond erasure, i believe the java runtime really checks types on every access
[22:16:35] <dimadima> at runtime
[22:16:38] <dimadima> and will error if something is wrong
[22:16:58] <manicennui> Should be unnecessary though.
[22:17:04] <manicennui> Why would the code have compiled?
[22:17:10] <dimadima> should be you'd think, but i if i recall correctly, it does it
[22:17:16] <dimadima> manicennui: i think because of linking
[22:17:25] <dimadima> you don't compile all code, just your code
[22:17:27] <dimadima> i think.
[22:18:27] <dimadima> back when i learned shit more aggressively i also spent some time on graalvm
[22:18:40] <dimadima> systems like that, though, i think are more like what companion_cube is talking about
[22:19:06] <dimadima> i'm generally ignorant though so i'll stop talking.... now :)
[22:19:16] <companion_cube> dimadima: java checks array accesses I think
[22:19:37] <indigo> Rust erases generics??
[22:19:44] <companion_cube> Because of covariant arrays
[22:19:44] <manicennui> indigo: Yes.
[22:20:05] <manicennui> indigo: It creates type specific versions of each needed function.
[22:20:14] <indigo> Ah right
[22:20:38] <companion_cube> They're basically templates
[22:20:45] <companion_cube> But checked at definition site
[22:20:47] <manicennui> monomorphization
[22:21:04] <indigo> A.k.a. why my Rust compile takes so much RAM
[22:21:53] <riv> ooh
[22:22:02] <manicennui> Java just creates code that uses Object basically.
[22:22:04] <riv> would be fun to make a rust file that blows up on compilation
[22:22:46] <riv> https://github.com/rust-lang/rust/issues/54540
[22:22:46] <buttsbot> >I told a coworker about lobste.rs, and futilely tried to convince him that it isn't HN for Rust
[22:22:47] <buttsbot> Exponential compile-time and type_length_limit blowup when nesting closure wrappers Â· Issue #54540 Â· rust-lang/rust Â· GitHub
[22:23:05] <manicennui> heh
[22:23:24] <manicennui> The Rust hype seems to have died down a bit recently.
[22:23:28] <manicennui> Or maybe I've somehow filtered it out.
[22:23:29] <companion_cube> Pretty easy to do in ocaml too
[22:23:52] <companion_cube> There are expressions with exponential time inference
[22:24:05] <indigo> manicennui: Maybe they're finally moving to the Trough of Disillusionment
[22:24:56] <manicennui> I think the novelty of "X reimplemented in Rust" might have worn off a bit.
[22:25:28] <manicennui> Not that people aren't still doing it.
[22:25:40] <dimadima> i don't know whenever anyone posts something to HN written in C i suggest it would be better in Rust
[22:25:45] <manicennui> But I see it come up less often on various sites.
[22:26:03] * dimadima jk
[22:28:14] <companion_cube> Now people are doing new things in rust, it's even better! :p
[22:28:29] <dimadima> hehe
[22:28:29] <companion_cube> Well, some big projects anyway
[22:31:11] <companion_cube> It's just become more normalized I think
[22:31:51] <dimadima> rust is mainstream now eh?
[22:32:09] <dimadima> who would get fired for choosing rust?
[22:32:09] <buttsbot> >unsafe {} sex can be dangerous
[22:32:18] <dimadima> woah there
[22:32:31] * dimadima steps away from the vehicle
[22:51:53] <indigo> Clearly not Discord https://discord.com/blog/why-discord-is-switching-from-go-to-rust
[22:51:53] <buttsbot> Why Discord is switching from Go to Rust
[22:52:47] <manicennui> That's pretty old though.
[22:54:10] <indigo> 2020??
[22:55:07] <manicennui> 18 months ago.
[22:55:13] <drakonis> that's old as fuck lol
[22:55:17] <drakonis> also dont they use elixir?
[22:55:42] <drakonis> okay its elixir NIFs
[22:57:20] <indigo> Pretty sure they use all sorts of languages there. Here's a comment about migrating some Python to Rust https://news.ycombinator.com/item?id=26229259
[22:57:21] <buttsbot> Original author here. Cool to see it posted again. We're still using and investi... | Hacker News
[22:59:44] <dimadima> sad how rust is just eating up Go
[23:00:37] <dimadima> like ppl spent all this time on Go, and *poof*
[23:01:27] <dimadima> isnt it the first day of fall today or tomorrow
[23:01:35] <dimadima> autumn is upon us
[23:01:39] <dimadima> here in the northern hemisphere
[23:05:57] <indigo> Is it though?
[23:09:45] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[23:11:01] *** Joins: riv (~river@tilde.team/user/river)
[23:13:46] <manicennui> I don't think it is.
[23:13:55] <manicennui> I think Go is just less hyped now.
[23:14:42] <manicennui> We have a handful of people interested in Rust, but we have no plans to rewrite anything.
[23:15:01] <klardotsh> opinion: I don't think it's sad at all. My experiences with Go have generally ranged from "meh" to "makes me want to hurl my machine into the sun at lightspeed" and I'm happy to see it lose some greenfield projects to languages that extract less of such responses from me.
[23:15:19] <manicennui> I don't want to deal with Go nor Rust frankly.
[23:15:38] <manicennui> But we already use Go.
[23:16:28] <klardotsh> Zig has me very excited, but I'm waiting on a few things (esp. libraries) to mature a bit before diving in too much. I've greatly enjoyed (synchronous, specifically....) Rust even if the learning curve was steep. I'll even take TypeScript on Node/Deno over having to write more Go.
[23:16:41] <manicennui> I don't want to deal with Zig either.
[23:16:43] <klardotsh> (not that Zig is really competing with Go other than in the CLI tools space)
[23:16:52] <manicennui> I write mostly business logic, and I don't need a low level language.
[23:17:24] <dimadima> rewriting Go to Rust should be viewed as an extreme action
[23:17:32] <dimadima> extreme/senseless?
[23:17:42] <manicennui> It might have made sense in Discord's case.
[23:17:48] <manicennui> We don't have their scaling issues.
[23:17:49] <dimadima> well they went from Python?
[23:17:59] <dimadima> or did i misread that
[23:18:16] <manicennui> Aren't they the ones that were unhappy with Go's GC?
[23:18:24] <Brekkjern> Yes
[23:18:40] <dimadima> klardotsh: i want to try Deno. have you tried it?
[23:18:53] <Geekingfrog> I know companion_cube is a big fan right now
[23:19:05] <dimadima> Geekingfrog: of Deno?
[23:19:08] <Geekingfrog> yes
[23:19:25] <manicennui> Our largest app is just fine on Ruby, but our developers write terrible fucking code. They rewrote some old Ruby code in Go with AWS and managed to make it an order of magnitude slower. I'm not even exaggerating.
[23:19:28] <dimadima> :thumbsup:
[23:19:36] <klardotsh> dimadima: I have not. I bought the 1.0 hoodie because who doesn't want a fricken dinosaur hoodie?! but I haven't had a chance to use it for anything yet - my last job was deeply bound to Node-flavored TS, and greenfield stuff was in Rust
[23:19:42] <dimadima> manicennui: remarkable!
[23:19:54] <Geekingfrog> manicennui, how is that even possible?
[23:19:56] <klardotsh> manicennui: impressive lol
[23:20:00] <dimadima> klardotsh: yeah i'vebrew installed it but need to read about package management
[23:20:14] <dimadima> klardotsh: what is Node-flavored TS?
[23:20:19] <Geekingfrog> surely that's the "with AWS" bit which failed them.
[23:20:23] <manicennui> Geekingfrog: None of the stuff they rewrote in Go was a performance bottleneck.
[23:20:33] <Geekingfrog> :D
[23:20:33] <klardotsh> dimadima: TypeScript that runs on Node only, and wasn't compatible with Deno
[23:20:36] <dimadima> manicennui: who let them do that!
[23:20:38] <manicennui> And the new architecture is just bad.
[23:20:45] <dimadima> manicennui: rewrite something that wasn't a problem inthe first place
[23:21:00] <manicennui> I'm not saying that you couldn't make it faster with Go and AWS, but we are nowhere near the performance limits of Ruby.
[23:21:03] <Geekingfrog> architecture is just bad?
[23:21:12] <dimadima> klardotsh: so that would be stuff that uses node core libaries? or....?
[23:21:45] <klardotsh> dimadima: that, plus pretty tightly-woven dependencies on things that took native dependencies in the postgres space
[23:21:46] <dimadima> klardotsh: if i see someone in a deno sweatshirt i'll know it's you :)
[23:21:52] <dimadima> klardotsh: ah okay makes sense
[23:22:08] <gerikson> this is a very weird HN submission https://news.ycombinator.com/item?id=28605468
[23:22:09] <buttsbot> Ask HN: Why are all my pretentious art friends joining signal? | Hacker News
[23:22:21] <manicennui> Geekingfrog: In short, they added extra latency and didn't include parts of the old architecture that were specifically designed to improve performance.
[23:22:25] <dimadima> cause they're drug dealers DUH
[23:22:37] <manicennui> Or buyers.
[23:22:41] <dimadima> DUH
[23:22:45] <dimadima> :)
[23:23:02] <Geekingfrog> that's hillarious manicennui
[23:23:06] <klardotsh> manicennui: speaking of Ruby. my next job is at a ruby shop. I'll be doing SRE/Platform/Infra/DevXP/misc. primarily, but obviously I'll need to learn Ruby. any particular footguns I should know about to brace for deep sighs and/or ragequits?
[23:23:41] <klardotsh> manicennui: also if you have thoughts on https://sorbet.org/ I'd be intrigued because TypeScript, Rust, and Haskell have turned me into one of Those People (TM) who can't work without hella-strong types anymore and that project intrigues me.
[23:23:41] <buttsbot> Sorbet Â· A static type checker for Ruby
[23:23:52] <manicennui> klardotsh: In my experience, Ruby is a decent language, and there are great books out there, which many Ruby programmers will claim to have read, and then they write the most horrific code imaginable.
[23:24:17] <dimadima> i wonder if i wrote horrific code
[23:24:19] <dimadima> write*
[23:24:22] <manicennui> klardotsh: I haven't evaluated sorbet, but I wouldn't start with the thought that you should use it.
[23:24:34] <manicennui> I'd just learn what exists first and where the actual problems are.
[23:24:40] <Brekkjern> dimadima: Of course you do. We all do :P
[23:24:51] <Brekkjern> We might think we don't, but we do.
[23:24:55] <manicennui> dimadima: Probably just mildly irritating.
[23:25:31] <manicennui> The situation I described with the rewrite is what happens when you have people who don't know what they are doing but are attracted to shiny new things and then parrot bullshit arguments they don't understand.
[23:25:35] <klardotsh> manicennui: thanks! IIRC rails doesn't have Sorbet support yet anyway so I wouldn't be able to just drop it in on day one anyway, I'm mostly eyeing it for future use
[23:25:51] <manicennui> I have no idea what we gain by using AWS at all other than increased infrastructure costs.
[23:26:07] <Geekingfrog> what's your role in that manicennui ? The poor old ops who has to provide the infra for that ?
[23:26:11] <klardotsh> depends. which AWS services?
[23:26:21] <manicennui> Geekingfrog: No, my team took over their work.
[23:26:33] <gerikson> awww so cuet https://news.ycombinator.com/item?id=28601104
[23:26:34] <buttsbot> When I was in high school, I was part of an online community that wrote graphica... | Hacker News
[23:26:46] <Geekingfrog> as a salvage operation ?
[23:26:53] <manicennui> Geekingfrog: Managers thought it would be smart to create a team of people to focus on rearchitecting people, but most of the people they added to that team didn't understand the existing system well, and were the type of people who chase fads.
[23:27:12] <manicennui> They've done the same thing with the frontend, rewriting it in vue, and we've been trying to debug it for months.
[23:27:26] <Geekingfrog> I suspect these also are the type of people the most convincing to get this type of role
[23:27:43] <Geekingfrog> what a track record
[23:27:49] <manicennui> Geekingfrog: I almost certainly could have been on the team if I wanted, but I prefer to do work that matters.
[23:28:08] <manicennui> I've been doing this long enough that I'm super suspicious of all rewrites.
[23:28:15] <manicennui> They rarely deliver on their promises.
[23:28:28] <manicennui> They are usually just different and have a huge number of initial bugs.
[23:28:54] <indigo> +1 I was part of a rewrite back at my last company... for "performance reasons"
[23:29:39] <manicennui> I fully support refactoring, which might look like a rewrite in the long term.
[23:29:40] <indigo> I proposed trying to profile the existing code and identifying performance issues, but no, apparently rewriting it all from PHP to Python/React/Node was the way to go
[23:29:49] <manicennui> heh
[23:29:59] <manicennui> PHP outperforms all of those generally.
[23:30:07] <manicennui> People far underestimate FPM.
[23:30:15] <indigo> Also the performance was great in the beginning, until you had to add all those pesky features that users wanted :)
[23:30:34] <indigo> Not to mention most of the poor performance was due to the clunky DB schema
[23:30:45] <indigo> But changing the schema was deemed "too hard"
[23:30:57] <manicennui> Yeah, that's what happens with the rewrites at my current place.
[23:31:10] <dimadima> perfomance is also good until you have users
[23:31:10] <manicennui> The real source of problems is too hard to rewrite, so they don't touch it.
[23:31:14] <dimadima> pesky users
[23:31:31] <Geekingfrog> "perf is good until you have users" :D
[23:31:38] <dimadima> manicennui: it's remarkable they do rewrites at your place at all
[23:31:44] <manicennui> Why?
[23:31:54] <dimadima> manicennui: i would guess most places are extremely rewrite hostile
[23:31:56] <manicennui> I think you kind of have to these days unless you want to lose even more developers.
[23:32:08] <dimadima> manicennui: that's pretty cool
[23:32:28] <manicennui> You basically have to let developers do a lot of things that aren't useful to the business in hopes that they will stick around and deliver a small amount of value.
[23:32:48] <indigo> dimadima: At Google, stuff gets rewritten all the time (https://arxiv.org/pdf/1702.01715.pdf, 2.11 Frequent Rewrites)
[23:33:00] <manicennui> We have a fairly large engineering team too.
[23:33:01] <Geekingfrog> is that how you get promoted over there ?
[23:33:05] <manicennui> Nowhere near Google size.
[23:33:06] <dimadima> indigo: that's very mature of them
[23:33:14] <manicennui> I think it's around 150-200 people right now.
[23:33:14] <dimadima> i see manicennui's point as well
[23:33:14] <indigo> Geekingfrog: Pretty much
[23:33:57] <manicennui> I think these rewrites where I work do help people get promoted.
[23:34:10] <manicennui> We are really bad at assessing project success.
[23:34:17] <manicennui> We celebrate the launch, then move on.
[23:34:23] <manicennui> Then everyone bitches about it in private.
[23:34:30] <manicennui> And we spend the next year fixing it.
[23:34:39] <Geekingfrog> The classic "once it's shipped it cease to exist"
[23:34:59] <manicennui> The main guy involved in the frontend rewrite is now a principal engineer.
[23:35:29] <Geekingfrog> oh boi
[23:35:56] <indigo> Probably why folks futilely try to get it right the first time
[23:36:10] <manicennui> indigo: I don't see a lot of that helping either.
[23:36:16] <manicennui> s/helping/happening/
[23:37:16] <manicennui> This is basically the only thing that sucks about my current job: the tech stack and the average skill level.
[23:37:24] <manicennui> But I have it so good in other ways.
[23:37:48] <gerikson> oh great more Gemini discussion on HN
[23:38:46] <Geekingfrog> I think the average skill level is a inevitability as the number of engineers rises.
[23:39:31] <manicennui> I barely even work 40 hours (and during the summer we get 3 hours off every Friday). I never get called when on call. Pay is decent. Benefits are decent. We specifically focus on hiring nice people. Most of my managers over the last 7 years have been great...
[23:39:46] <manicennui> Geekingfrog: Yeah. The tech stack also influences that.
[23:42:17] *** Quits: dcz (~dcz@user/dcz) (Ping timeout: 246 seconds)
[23:42:42] <manicennui> We have a competitor in Chicago (where I am) who uses mostly Clojure, and I could probably get a job there pretty easily, but I have no idea what other tradeoffs I'd have to make.
[23:42:49] <manicennui> We are bigger than they are.
[23:43:17] <manicennui> And it's entirely possible that they work harder, which would really suck!
[23:51:24] <dimadima> gerikson: down on gemini?
[23:51:39] <gerikson> dimadima: the standard mix
[23:51:42] <gerikson> nothing new
[23:51:56] <gerikson> 17:21 <@activelow> earth isn't rotating too slow, nor did this require any regulation; TAI tick rate is too fast
[23:51:59] <gerikson> JFC
[23:52:03] <gerikson> this takes the cake
[23:53:22] <dimadima> if gemini becomes big google etc will just take it over like they did the web and bada-bing same story
[23:53:45] <manicennui> There seems to be little risk of that.
[23:53:54] <dimadima> that's what they said about the web ;)
[23:54:00] <dimadima> oh of it getting big?
[23:54:04] <manicennui> Yes.
[23:54:14] <dimadima> yeah, sure
[23:54:49] <dimadima> i'll check out gemini one of these days. in my ideal world the web APIs will fragment into APIs for documents and APIs for web apps
[23:54:59] <dimadima> gemini should have a place
[23:55:09] <manicennui> https://www.nbcchicago.com/news/local/metallica-playing-unexpected-show-at-chicagos-metro-monday-for-just-20/2617396/
[23:55:10] <buttsbot> Metallica Playing Unexpected Show at Chicagoâ€™s Metro Monday â€“ NBC Chicago
[23:55:11] <manicennui> Woah!
[23:55:16] <manicennui> Metro is tiny!
[23:55:23] <manicennui> That would have been fucking awesome!
[23:55:46] <dimadima> you need vaccine proof in chicago?
[23:56:02] <manicennui> I believe so.
[23:56:15] <manicennui> I haven't been to a concert venue since the pandemic started.
[23:56:23] <dimadima> i haven't left my house
[23:56:45] <manicennui> I've definitely spent more time than usual in my condo.
[23:57:54] <dimadima> last few weeks i've been trying to finish this damn projected and all my commit messages are now "wip" :( :(
[23:58:07] <dimadima> damned*
[23:58:17] <dimadima> it's sad
[23:58:49] <manicennui> Are you going to squash them?
[23:59:02] <dimadima> yeah but every so often there's a good commit message
[23:59:43] <dimadima> oh well
[23:00:22] <manicennui> I'm pretty deliberate with in progress commits.
[23:00:30] <manicennui> I make sure to not mix a bunch of different changes together.
[23:00:49] <dimadima> i usually am too, i really enjoy git pedantry in fact
[23:00:52] <manicennui> And I give them somewhat descriptive messages even if I plan to squash them later and remove the message.
[23:01:05] <dimadima> but it's desperate times
[23:01:09] <manicennui> Makes it easier if I decide I really didn't need that change at all.
[23:01:32] <dimadima> yeah those are the commits that have good messages as mentioned above
[23:02:08] <dimadima> but of course you enver really know which commits those will be
[23:02:32] <dimadima> nothing is taught worse than git
[23:02:39] <dimadima> it took me a long ass time to figure out git
[23:02:59] <dimadima> it's criminal that `git pull` even exists
[23:03:17] <gerikson> https://news.ycombinator.com/item?id=28600995
[23:03:18] <buttsbot> I think useless and annoying are the wrong words here. Itâ€™s elegant in that effo... | Hacker News
[23:03:36] <gerikson> Adtech will see Gemini as damage, and route around it
[23:04:41] <bkero> When for React over gemini?
[23:05:10] <dimadima> "In that sense Gemini has skipped past the "embrace and extend" and moved itself right to "extinguish", which actually seems to be its central design." lol
[23:05:16] <dimadima> truly brutal
[23:05:31] <dimadima> that's ridiculous
[23:05:43] <Brekkjern> That was perfectly put
[23:05:50] <dimadima> but perfectly put, yes
[23:05:56] <Brekkjern> If I had an HN account I would have upvoted that
[23:06:09] <dimadima> i just did on your behalf, even though i dont' agree :)
[23:06:29] <Brekkjern> Thank you :D
[23:14:25] <gerikson> dimadima: haha!
[23:22:12] *** Quits: klardotsh (~klardotsh@75-172-15-163.tukw.qwest.net) (Quit: nyaa~)
[23:42:25] <dimadima> gerikson:  :)
[23:52:53] <manicennui> Some woman at work has a Slack profile pic that looks more like something one would use on Tinder.
[23:55:20] <indigo> Oh nooo
[23:55:39] <gerikson> "come hither, coworker"
[23:56:46] <manicennui> It's not really inappropriate, but it is an angled shot that makes her look especially attractive.
[23:58:24] <manicennui> Slightly above and at an angle.
