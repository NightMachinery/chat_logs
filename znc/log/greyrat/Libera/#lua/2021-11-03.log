[00:01:01] <sqz1> sweet..just one module-file, works straight out the box. Awesome docs too
[00:01:51] <technomancy> you know it's gonna be good when the splash page includes a disassembly dump
[00:03:06] <Tricycle> map and siblings take few lines to implement
[00:03:15] <RhodiumToad> I wonder if using an fsin instruction is actually faster
[00:03:50] <Tricycle> I fell that having function be just like any other variable is enough to be program as functionnaly as you want
[00:04:00] <Tricycle> *feel
[00:05:09] <sqz1> hm this is like moonscript without moonscript
[00:05:28] <technomancy> isn't moonscript extremely class-oriented?
[00:08:33] <sqz1> yes and some functional stuff as syntactic sugar
[00:09:14] <technomancy> hm; what are the functional features, out of curiosity?
[00:11:58] <sqz1> hm looking at the docs, it seems its mostly spreads & comprehensions, the rest is indeed focused on class things
[00:14:20] <sqz1> too bad it's not a simple drop-in module-file solution
[00:14:27] *** Quits: kelo (~atanyukev@mx7.olek.im) (Remote host closed the connection)
[00:15:43] <sqz1> btw. https://redbean.dev/ <-- kudos for that dev
[00:19:57] *** Joins: kelo (~atanyukev@mx7.olek.im)
[00:26:24] <hs0ucy> sqz1: portable web server?
[00:34:51] <Albright> Whoa, that is ludicrous
[00:39:23] <Albright> Ah, I guess it only works on x86_64.
[00:40:54] <hs0ucy> harsh
[00:49:15] *** Quits: magla (~gelignite@55d4b8af.access.ecotel.net) (Quit: Stay safe!)
[00:52:40] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 268 seconds)
[00:53:35] *** Joins: uzi_ (~uzi@161.9.200.42)
[00:58:06] *** Quits: hs0ucy (~hs0ucy@modemcable162.76-21-96.mc.videotron.ca) (Ping timeout: 260 seconds)
[01:04:10] *** Joins: w0ng (~w0ng@103.1.212.100)
[01:15:07] *** Joins: AndroidToad (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk)
[01:30:51] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:ecf7:1521:506c:53cc) (Quit: Textual IRC Client: www.textualapp.com)
[01:51:22] *** Joins: bomb (~bomb@user/bomb)
[01:53:26] *** Joins: Guest53 (~Guest53@152.67.207.99)
[01:57:26] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[02:18:08] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[02:24:43] *** Quits: Guest53 (~Guest53@152.67.207.99) (Quit: Client closed)
[02:33:12] *** Quits: pizdets_ (~pizdets@183.182.110.102) (Ping timeout: 250 seconds)
[02:33:47] *** Joins: pizdets (~pizdets@183.182.115.195)
[02:49:41] <jaawerth> sqz1: luafun also uses the clever metatable trick of wrapping lua's 3-value iterators as a single first-class value by setting {gen, param, state} with a `__call` metamethod that does `return self.gen(param, state)`, which is super convenient
[02:54:53] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:59:13] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:a0af:7780:c2f2:5686)
[03:05:17] *** Joins: Guest53 (~Guest53@152.67.207.99)
[03:07:32] *** Quits: AndroidToad (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk) (Ping timeout: 256 seconds)
[03:49:28] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:52:11] *** Quits: netlynx (~jan@94-226-69-15.access.telenet.be) (Quit: Leaving)
[04:13:05] *** Quits: fcr (~fran@r167-56-72-113.dialup.adsl.anteldata.net.uy) (Ping timeout: 268 seconds)
[04:17:15] *** Joins: fcr (~fran@r186-48-168-132.dialup.adsl.anteldata.net.uy)
[04:27:50] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:1b5c:1bd6:918c:5122) (Quit: ZNC 1.8.2 - https://znc.in)
[04:28:02] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:4d0e:ce74:c79b:d28a)
[04:45:34] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[05:02:02] *** Quits: bomb (~bomb@user/bomb) (Quit: setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);)
[05:05:27] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Read error: No route to host)
[05:16:55] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[05:17:24] *** Quits: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr) (Quit: bye)
[05:18:56] *** Joins: R2robot (~R2robot@user/r2robot)
[05:34:31] *** Joins: emanuele6 (~emanuele6@net-2-36-98-113.cust.vodafonedsl.it)
[05:34:51] *** Quits: emanuele6 (~emanuele6@net-2-36-98-113.cust.vodafonedsl.it) (Changing host)
[05:34:51] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[05:37:11] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:46:00] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[05:53:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:11:16] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:11:27] *** Joins: kiril (~kiril@85.91.153.163)
[06:30:04] *** Quits: w0ng (~w0ng@103.1.212.100) (Quit: w0ng)
[06:31:22] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[06:37:35] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:40:26] *** Quits: Guest53 (~Guest53@152.67.207.99) (Quit: Client closed)
[07:08:14] *** Quits: ratchet_freak (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be) (Ping timeout: 268 seconds)
[07:18:19] *** Quits: ratchetfreak_ (~ratchetfr@141.135.121.217) (Read error: Connection reset by peer)
[07:23:38] *** Joins: w0ng (~w0ng@103.1.212.100)
[08:02:04] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:03:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:10:43] *** Joins: zostj (~rue@1-162-47-227.dynamic-ip.hinet.net)
[08:59:15] *** Quits: uzi_ (~uzi@161.9.200.42) (Read error: Connection reset by peer)
[08:59:28] *** Joins: uzi_ (~uzi@161.9.200.42)
[09:00:24] *** Quits: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Ping timeout: 260 seconds)
[09:04:02] *** Joins: dvx (~dvx@185.63.97.64)
[09:07:42] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:10:06] *** Quits: Overkill (~overkill9@69-165-200-34.cable.teksavvy.com) (Ping timeout: 245 seconds)
[09:10:18] *** Joins: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[09:10:37] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[09:14:38] *** Quits: zostj (~rue@1-162-47-227.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[09:15:48] *** Joins: password59 (~password@user/password2)
[09:15:54] *** password59 is now known as password2
[09:16:12] *** Joins: zostj (~rue@1-162-47-227.dynamic-ip.hinet.net)
[09:17:43] *** Quits: reset (~reset@user/reset) (Quit: reset)
[09:19:35] *** Quits: password (~password@user/password2) (Ping timeout: 268 seconds)
[09:23:47] *** Joins: AndroidToad (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk)
[09:24:22] *** Joins: Overkill (~overkill9@69-165-200-34.cable.teksavvy.com)
[09:35:08] *** Quits: AndroidToad (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk) (Ping timeout: 256 seconds)
[09:36:26] *** Joins: AndroidToad (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk)
[09:50:07] *** Joins: password (~password@user/password2)
[09:50:25] *** Quits: password2 (~password@user/password2) (Ping timeout: 268 seconds)
[09:56:17] *** Joins: parnikkapore (~parnikkap@user/parnikkapore)
[10:04:52] *** Joins: AndroidToad83 (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk)
[10:09:08] *** Quits: AndroidToad (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk) (Ping timeout: 256 seconds)
[10:12:36] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 268 seconds)
[10:13:13] *** Joins: uzi_ (~uzi@161.9.200.42)
[10:56:26] *** Quits: parnikkapore (~parnikkap@user/parnikkapore) (Quit: Leaving)
[11:04:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[11:05:26] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[11:10:35] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 268 seconds)
[11:26:25] *** Joins: Elw3 (~Elw3@x59cc9a68.dyn.telefonica.de)
[11:34:42] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[11:35:21] *** Joins: ano (~ano@user/ano)
[11:35:28] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:43:46] *** Quits: AndroidToad83 (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk) (Ping timeout: 256 seconds)
[11:45:06] *** Quits: Elw3 (~Elw3@x59cc9a68.dyn.telefonica.de) (Ping timeout: 268 seconds)
[11:45:13] *** Joins: angryguy (~Elw3@x59cc9a57.dyn.telefonica.de)
[12:05:34] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[12:06:34] *** Joins: Elw3 (~Elw3@x59cc999a.dyn.telefonica.de)
[12:08:30] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[12:09:46] *** Quits: angryguy (~Elw3@x59cc9a57.dyn.telefonica.de) (Ping timeout: 268 seconds)
[12:15:08] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-05ac-b500-b530-e274-3e6d-4887.dyn.netcomnetz.de)
[12:15:57] *** Joins: angryguy (~Elw3@dynamic-002-247-243-236.2.247.pool.telefonica.de)
[12:19:38] *** Quits: Elw3 (~Elw3@x59cc999a.dyn.telefonica.de) (Ping timeout: 268 seconds)
[12:21:08] *** Quits: angryguy (~Elw3@dynamic-002-247-243-236.2.247.pool.telefonica.de) (Quit: Leaving)
[12:22:23] *** Joins: Elw3 (~Elw3@dynamic-002-247-243-059.2.247.pool.telefonica.de)
[12:26:31] *** Joins: AndroidToad83 (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk)
[12:50:18] *** Joins: Guest53 (~Guest53@152.67.207.99)
[13:05:33] *** Quits: Guest53 (~Guest53@152.67.207.99) (Quit: Client closed)
[13:32:45] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:34:10] <sqz1> jaawerth: interesting
[13:34:18] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[13:37:49] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[13:38:09] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 265 seconds)
[13:38:38] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 265 seconds)
[13:39:11] <sqz1> Albright: x86_64? You're talking about the prebuilt binaries perhaps? redbean.c seems to be compiled with cosmopolitan libc (which compiles on x86_64, i386, ARM, MIPS, Alpha, HP-PA, PowerPC, RISC-V, s390x, and Xtensa). It'll probably compile with a gnu-libc as well without too much work don't you think?
[13:39:43] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[13:39:48] *** Quits: Stealth (stealth@sourcemage/archon/stealth) (Excess Flood)
[13:40:34] <sqz1> hs0ucy: no really :)
[13:40:43] <sqz1> s/no/not/g
[13:40:48] *** Joins: Stealth (stealth@sourcemage/archon/stealth)
[13:41:03] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 268 seconds)
[13:58:18] *** Joins: plundra (user@vtmp.article.se)
[14:00:19] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[14:06:02] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[14:06:18] *** Joins: netlynx (~jan@94-226-69-15.access.telenet.be)
[14:12:25] <plundra> I have a iterator function (what string.gmatch returns), I'm expecting a fixed number of matches so I'd like to have something close to `a, b, c = foo()`, is that possible? Now I did for i=1, 3 do x[i] = foo() end.
[14:12:42] <plundra> It's fine but just curious if there is something readable and shorter.
[14:15:04] *** Quits: AndroidToad83 (~AndroidTo@82-68-208-20.dsl.in-addr.zen.co.uk) (Ping timeout: 256 seconds)
[14:18:30] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 260 seconds)
[14:19:26] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[14:20:24] <RhodiumToad> you shouldn't usually assume that iterators like gmatch will return a closure rather than 4 separate args
[14:20:36] <RhodiumToad> (or 3 in versions before 5.4)
[14:22:19] <RhodiumToad> I would do something like
[14:22:51] <RhodiumToad> local i=0  for blah in string.gmatch(...) do ... i=i+1 if i>=3 then break end end
[14:23:38] <RhodiumToad> that protects you against things like version differences in how loop iterators work
[14:32:51] *** Quits: Yorlik (~Yorlik___@ip6-2a03-7500-05ac-b500-b530-e274-3e6d-4887.dyn.netcomnetz.de) (Ping timeout: 268 seconds)
[14:39:25] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:46:11] *** Joins: bomb (~bomb@user/bomb)
[14:47:59] *** Quits: password (~password@user/password2) (Quit: Connection closed)
[14:53:52] <jaawerth> RhodiumToad: wouldn't an iterator that takes state as a param also return state as the first value, breaking assumptions in the above code anyway?
[14:55:05] <jaawerth> eh nevermind I guess it'd still work for, like, keys
[14:55:13] <jaawerth> and similar things
[14:55:53] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:56:14] <RhodiumToad> no, the return values from the func are always the new loop variables
[14:58:08] *** Quits: ArRay (~ArRay_@user/array/x-1947090) (Remote host closed the connection)
[14:59:11] <RhodiumToad> the pseudocode is something like   local state, fn, ivar, tbc <close> = iterator()  repeat local var_1, var_2, ... = fn(state,ivar) ivar = var_1 if ivar == nil then break end --[[ loop body ]] until false
[15:00:39] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[15:00:57] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-05ac-b500-71c2-006d-f976-4681.dyn.netcomnetz.de)
[15:01:33] *** Joins: ArRay (~ArRay_@user/array/x-1947090)
[15:11:23] <jaawerth> right I meant in terms of business logic, but as soon as I said I realized that wasn't right either so
[15:17:39] *** Quits: Yorlik (~Yorlik___@ip6-2a03-7500-05ac-b500-71c2-006d-f976-4681.dyn.netcomnetz.de) (Read error: Connection reset by peer)
[15:23:38] *** Joins: tinystoat (~squeek@user/tinystoat)
[15:50:33] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 268 seconds)
[16:16:06] *** Quits: fcr (~fran@r186-48-168-132.dialup.adsl.anteldata.net.uy) (Ping timeout: 260 seconds)
[16:20:32] *** Joins: fcr (~fran@r167-60-56-79.dialup.adsl.anteldata.net.uy)
[16:25:49] *** Quits: bomb (~bomb@user/bomb) (Remote host closed the connection)
[16:31:18] *** Quits: Elw3 (~Elw3@dynamic-002-247-243-059.2.247.pool.telefonica.de) (Quit: Leaving)
[16:35:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:35b5:6b52:836c:5a7)
[16:35:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:35b5:6b52:836c:5a7) (Changing host)
[16:35:25] *** Joins: skapata (~Skapata@user/skapata)
[17:07:29] *** Joins: dvx_ (~dvx@5.181.92.64)
[17:10:05] *** Quits: dvx (~dvx@185.63.97.64) (Ping timeout: 268 seconds)
[17:15:59] *** Quits: dvx_ (~dvx@5.181.92.64) (Ping timeout: 264 seconds)
[17:33:13] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6042-7156-16f0-8c3d.res6.spectrum.com)
[17:37:26] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:38:14] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Quit: WeeChat 3.3)
[17:39:34] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 260 seconds)
[17:46:15] *** Joins: R2robot (~R2robot@user/r2robot)
[18:01:11] <ano> is it safe/ok to use table hex id to associate table with something?
[18:01:52] <furq> if you mean the result of tostring() then not really
[18:02:08] <furq> if you mean using the table itself as a key then yes
[18:08:46] <ano> any better approach? need to implement unique signal name per table above existed signal implementation on c, but implementation can handle only string as signal name
[18:19:38] <RhodiumToad> have a table that associates any generated string name (the hex id will do) with the actual table
[18:20:28] <RhodiumToad> if paranoid, check the value before inserting
[18:21:04] <RhodiumToad> or just use a generated string like ("TAB%08d"):format(i)  and increment i each time
[18:23:05] <ano> good old counter
[18:32:08] <kakolainen[m]> you might simply try: function addtable(table) local i= #signal2table; signal2table[i] = table; table2signal[table] = i; end
[18:32:39] <kakolainen[m]> should not need a remove function and garbage collection might also magically work
[18:41:53] <kakolainen[m]> local signal2table,table2signal = setmetatable({},{__mode="kv"}),setmetatable({},{__mode="kv"});  function addtable(table) local i= #signal2table+1; signal2table[i] = table; table2signal[table] = i; end
[18:45:54] *** Joins: lalitmee (~lalitmee@42.106.36.190)
[18:49:30] <RhodiumToad> that'll remove entries from the table (eventually) if the referenced tables are no longer reachable from anywhere else, but that might not be what you want
[18:49:55] <RhodiumToad> for example if the "names" are referenced from the C code
[18:50:34] <RhodiumToad> (you don't actually need two tables, you can use the same table for lookups in both directions)
[18:54:20] *** Joins: hs0ucy (~hs0ucy@modemcable162.76-21-96.mc.videotron.ca)
[18:57:55] <kakolainen[m]> if it's not what you want then you need the remove function and the program might develope a "memory leak" when the remove function is not called
[19:06:30] *** Joins: GNUHacker (~gnu@fsf/member/GNUHacker)
[19:08:13] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[19:14:44] <ano> what string.format('%p', t) does?
[19:16:36] <rjek> https://www.lua.org/manual/5.4/manual.html#pdf-string.format
[19:20:27] *** Joins: reset (~reset@user/reset)
[19:20:58] <ano> >That gives a _unique_ string identifier for _tables_ /looks like i something i can use
[19:23:02] <ano> *like a
[19:41:47] *** Quits: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net) (Read error: Connection reset by peer)
[19:42:25] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[19:52:16] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:53:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:18:10] *** Quits: lalitmee (~lalitmee@42.106.36.190) (Ping timeout: 268 seconds)
[20:45:50] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-05ac-b500-5d67-25c6-0975-7af8.dyn.netcomnetz.de)
[20:49:48] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[20:50:00] *** Joins: JanC (~janc@user/janc)
[21:02:31] *** Joins: splud (~noneya.bi@user/splud)
[21:03:03] <splud> I'm refactoriung some lua code on a NodeMCU device.
[21:05:50] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:06:20] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[21:06:27] <splud> I want to put some support functions into a single source file, one of which returns its instantiated object (a parser)
[21:06:35] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[21:07:01] <splud> wait, further refactoring necessary here/
[21:10:28] *** Joins: magla (~gelignite@55d4ce3b.access.ecotel.net)
[21:18:33] *** Joins: Elw3 (~Elw3@x59cc9b8d.dyn.telefonica.de)
[21:49:46] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:01:10] *** Quits: Elw3 (~Elw3@x59cc9b8d.dyn.telefonica.de) (Ping timeout: 268 seconds)
[22:41:43] *** Quits: zostj (~rue@1-162-47-227.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[22:47:11] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:00:47] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:15:34] *** Joins: Elw3 (~Elw3@x59cc9973.dyn.telefonica.de)
[23:17:12] *** Quits: km (9ab7146360@user/km) (Remote host closed the connection)
[23:17:28] *** Joins: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr)
[23:23:01] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[23:24:14] <sqz1> any idea why only a fragment of the shellscript stdout (0-8 lines instead of 25 lines) is printed..while with `sleep 1s` it prints the full 25 lines? 
[23:24:15] <sqz1> lua-snippet: `io.stdout:setvbuf 'no' ; f = io.popen(myshellscript,'r') ; os.execute("sleep 1s") ; print( f:read("*a") )`
[23:27:30] *** Quits: hs0ucy (~hs0ucy@modemcable162.76-21-96.mc.videotron.ca) (Ping timeout: 268 seconds)
[23:28:28] <Elw3> It finished reading before the script finished running i assume
[23:30:07] <Elw3> if i do io.popen("something that prints"); print("HELLO"), Hello is printed in the middle of the lines of the shell script, meaning print is executed before the shell script finishes.
[23:35:06] <sqz1> oh wait..the actual snippet is:
[23:35:29] <sqz1> lua-snippet: `io.stdout:setvbuf 'no' ; f = io.popen(myshellscript,'r') ; os.execute("sleep 1s") ; print( f:read("*a") ) ; f:close()`
[23:36:24] <sqz1> maybe the close() is not needed here, maybe the shellscript closes the filedescriptor automatically
[23:36:37] <Elw3> It doesnt matter really.
[23:39:36] <sqz1> hm no..leaving out the close() doesn't make a difference indeed. Interesting, I thought that all lua code was synchronous except coroutines.
[23:40:05] <Elw3> Thats not lua anymore if you do bash
[23:41:14] <RhodiumToad> the f:read("*a") shouldn't complete until the child process has either exited or closed its stdout
[23:41:32] <kakolainen[m]> are you confusing stderr and stdout?
[23:42:43] <Elw3> And yet you get mixed prints if you do io.popen("cat longfile"); print"banana" RhodiumToad 
[23:43:40] <RhodiumToad> do I?
[23:44:28] <Elw3> i get it at least
[23:44:34] <RhodiumToad> what exact code
[23:44:41] <kakolainen[m]> I mean messages coming from shellscript to stderr probably bypass Lua and sqz1 is probably confusing the pipelines
[23:44:52] <Elw3> That one above?
[23:46:44] <RhodiumToad> if the print"banana" is before the print(f:read("*a")) then "banana" will be output first, no?
[23:48:29] <RhodiumToad> io.stdout:setvbuf 'no' ; f = io.popen("cat bigfile",'r') ; print("***begin") ; print(f:read("*a")) ; print("***end")   -- prints ***begin before any of the file contents and ***end after all of it
[23:49:51] <Elw3> Riiiiight wait a second...
[23:50:10] <Elw3> Scrap that i was wrong. 
[23:50:44] *** Quits: kurfen_ (~kurfen@45.152.181.22) (Quit: ZNC 1.8.2 - https://znc.in)
[23:50:54] <Elw3> I had a file open i was writing right now and changed a line to test the claim. It happens that this line was using zenity
[23:51:51] <Elw3> And if i do io.popen("zenity some_windowshit") the script continues without zenity finishing.
[23:52:26] *** Quits: andreyorst (~andreyors@2.92.124.83) (Ping timeout: 260 seconds)
[23:52:46] *** Joins: kurfen (~kurfen@45.152.181.20)
