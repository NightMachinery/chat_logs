[00:05:14] *** Joins: VincentVega (~user@212.241.16.19)
[00:19:49] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[00:22:11] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Reconnecting)
[00:22:31] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[00:23:51] <Josh_2> flip214:  lul hkdf-extract works :P thanks
[00:24:01] *** Joins: karlosz (~karlosz@router.cloyne.org)
[00:24:44] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[00:26:17] <dieggsy> I'm doing something kind of weird and injecting a "git status" output into code as a string at macro expansion time
[00:26:29] <dieggsy> it seems that this works even if i start lisp outside of that git directory
[00:26:51] <dieggsy> is that just chance, or is it somehow guaranteed that files are somehow compiled within the context of where they are in the file ssytem
[00:27:34] <dieggsy> oh, nevermind, i'm an idito
[00:27:49] <dieggsy> i have a (with-current-directoy ...) going on. excellent. no magic here
[00:28:08] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[00:28:33] *** Joins: selwyn (~selwyn@user/selwyn)
[00:29:35] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:29:36] *** Parts: neirac (~neirac@pc-145-79-45-190.cm.vtr.net) (Leaving)
[00:30:07] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:34:32] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b8d0:8128:692d:9688) (Ping timeout: 244 seconds)
[00:44:18] *** Joins: trocado (~trocado@188.83.243.251)
[01:11:50] <dieggsy> it's quite weird that pathname-directory doesn't return a pathname - am I using the wrong function?
[01:12:25] <Josh_2> wow
[01:13:54] <Josh_2> finally figured it out, turns out in one place you use a private key, the other you have to use a different key
[01:24:46] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:bd0a:a3e5:780f:162a) (Remote host closed the connection)
[01:33:12] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[01:33:59] <Inline> oook, but still this qix example is somehow wrong
[01:51:56] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[02:03:34] <MichaelRaskin> dieggsy: pathname-directory is «directory of pathname»
[02:10:58] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:22:52] *** Quits: pve (~pve@37-136-226-115.rev.dnainternet.fi) (Quit: leaving)
[02:27:35] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 258 seconds)
[02:27:54] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:28:49] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 245 seconds)
[02:28:59] *** Joins: franco (~franco@37.218.244.249)
[02:29:22] *** Joins: aeth (~Michael@user/aeth)
[02:41:24] *** Joins: hoagie (~seb.hoagi@184-96-214-37.hlrn.qwest.net)
[02:42:33] <waleee> fe[nl]ix: around?
[02:44:00] <waleee> is a lack of /etc/hosts on linux a known bug of iolib/sockets:lookup-hostname ?
[02:44:32] <waleee> (that it fails if /etc/hosts doesn't exist)
[02:45:37] <pjb> waleee: I don't think there's a hard requirements for most /etc/ files.  There's a standard sysexit code for such an occurence: EX_OSFILE
[02:46:00] <pjb> waleee: the question is how does it fail, and can you exit with that sysexits code?
[02:46:44] <pjb> waleee: another consideration is that there's a configuration to specify what resource, and in what order, is used to perform various lookups, including DNS lookups.
[02:48:17] <pjb> waleee: version 2 of GNU glibc uses  /etc/nsswitch.conf  https://man7.org/linux/man-pages/man5/nsswitch.conf.5.html  https://www.oreilly.com/library/view/linux-network-administrators/1565924002/ch06.html
[02:48:18] *** Quits: hoagie (~seb.hoagi@184-96-214-37.hlrn.qwest.net) (Read error: Connection reset by peer)
[02:48:29] <waleee> pjb: thanks for the resources
[02:49:50] *** Joins: hoagie (~seb.hoagi@184-96-214-37.hlrn.qwest.net)
[02:49:52] <waleee> pjb: it fails with "Failed to find the WRITE-DATE of /etc/hosts: No such file or directory"
[02:50:48] <waleee> another person with another distro got a timeout instead
[02:51:14] <waleee> but he connects via a homeserver that uses wireguard
[02:53:13] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[02:53:50] <pjb> Well, as mentionned, if it's a system with nss, the file may not exist.
[02:53:56] <pjb> One should use the API.
[02:54:25] <pjb> gethostbyname(3) etc.
[02:55:18] <waleee> forgive my noobness, but is it a function in iolib/sockets ?
[02:55:25] <pjb> gethostent() if you need to scan all the entries (for some value of "all", depending on the configuration, and what's available locally, I guess).
[02:55:46] <pjb> waleee: no, it's a posix function. It should be used by iolib/sockets instead of reading /etc/hosts.
[02:56:01] <waleee> doesn't seem to do that
[02:56:06] <pjb> Report a bug.
[02:56:37] <pjb> In the meantime, you can patch your copy of iolib.sockets.
[02:56:38] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[03:01:17] *** Joins: akoana (~ah@user/akoana)
[03:04:24] <waleee> wtf my email was registered on a ubuntu one-account (needed for launchpad bug-reports)
[03:07:05] <waleee>  oh, I had registered on launchpad about 15 years ago
[03:10:30] *** Quits: mindCrime_ (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 250 seconds)
[03:12:35] <waleee> of course the launchpad wasn't actively used
[03:27:52] <jcowan> In exactly no lisps can you mutate (); it's an atomic object like 5.
[03:28:04] <jcowan> (You can in Python)
[03:39:08] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[03:46:20] *** Joins: mindCrime_ (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[03:47:26] *** Quits: hoagie (~seb.hoagi@184-96-214-37.hlrn.qwest.net) (Remote host closed the connection)
[03:57:28] *** Quits: VincentVega (~user@212.241.16.19) (Remote host closed the connection)
[03:59:48] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[04:07:52] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[04:24:29] <pjb> jcowan: you could in some lisp.
[04:24:44] <jcowan> Which?
[04:24:45] <pjb> jcowan: (psetf nil t t nil) was a famous hack.
[04:24:55] <pjb> jcowan: perhaps on lisp machine lisp?
[04:25:14] <pjb> Nowadays, there are constant variables so such an occurence is detected.
[04:25:37] <jcowan> That changes the definitions of the symbols t and nil, which is not the same as mutating either one (or any othr symbol)
[04:27:04] <pjb> Oh, like changing their name?
[04:27:30] <moon-child> sounds like smalltalk 'become'
[04:27:38] <pjb> Well, it is possible that an implementation uses the string passed to intern or make-symbol as string name, and if you mutate this string you could thus change the symbol name.
[04:28:06] <pjb> But again, modern CL implementations have protections to prevent that.
[04:30:33] *** Quits: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com) (Quit: WeeChat 3.1)
[04:31:03] <jcowan> Back when the pname was on the alist of a symbol, you could mutate it, but that wouldn't affect the inaccessible hash table that maps pnames to their symbols.
[04:31:30] <jasom> jcowan: what about (setf (get nil ...)...)?  If the plist is part of the symbol, you're mutating the symbol, no?
[04:33:42] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 258 seconds)
[04:34:02] <jcowan> The story is about mutating symbol names.  in Lisp 1.5, pnames were on the plist, but they were not Lisp objects (no strings yet), so you could only mutate a pname by assembly-language operations.  And even if you mutated the plist of NIL to be T, it would still *work like* NIL in the sense of evaluating to itself and being the empty list.  So typing in NIL would print out T, because that is the new pname of NIL.
[04:34:08] *** Quits: franco (~franco@37.218.244.249) (Read error: Connection reset by peer)
[04:35:38] <pjb> jcowan: the story is foremost that modern implementations implement protections.  The standard doesn't mandate them. It only forbids conforming programs to perform any retrospection on the CL stuff.
[04:40:20] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 272 seconds)
[04:44:00] *** Joins: igemnace (~ian@2001:4451:4409:5500:1742:292d:a06d:fb23)
[04:44:03] *** Joins: leo_song (~leo_song@1.156.61.81)
[04:46:32] *** Quits: trocado (~trocado@188.83.243.251) (Read error: Connection reset by peer)
[04:50:19] *** Joins: yewscion (~yewscion@c-24-131-220-23.hsd1.pa.comcast.net)
[04:59:39] *** Joins: zacts (~zak@user/zacts)
[04:59:41] *** Joins: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com)
[05:10:29] *** Quits: zacts (~zak@user/zacts) (Ping timeout: 245 seconds)
[05:14:58] *** Joins: zacts (~zak@user/zacts)
[05:24:28] *** Joins: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net)
[05:40:31] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Ping timeout: 264 seconds)
[05:45:26] *** Quits: yewscion (~yewscion@c-24-131-220-23.hsd1.pa.comcast.net) (Remote host closed the connection)
[05:46:32] *** Quits: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:46:57] *** Joins: yewscion (~yewscion@2601:547:a01:2900::b46f)
[05:54:30] *** Quits: zacts (~zak@user/zacts) (Quit: bbl)
[05:54:53] *** Joins: dsk (~dsk@user/dsk)
[06:07:09] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[06:07:51] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:08:48] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[06:15:03] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[06:16:10] *** Quits: lottaquestions (~nick@2607:fa49:5040:7500:8457:d454:836b:2a86) (Remote host closed the connection)
[06:31:13] *** Joins: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net)
[06:32:22] *** Joins: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de)
[06:35:34] *** Joins: unyu (~pyon@user/pyon)
[06:36:24] *** Quits: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[06:41:15] *** Quits: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:55:45] *** Quits: mindCrime_ (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 252 seconds)
[07:04:09] *** Quits: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50) (Ping timeout: 272 seconds)
[07:11:00] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f)
[07:11:49] *** Joins: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50)
[07:34:27] <beach> Good morning everyone! 
[07:59:23] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[07:59:57] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:00:24] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[08:00:31] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[08:00:37] *** Lord_of_Life_ is now known as Lord_of_Life
[08:03:35] *** Joins: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net)
[08:06:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[08:12:18] *** Joins: jemoka (~jemoka@user/jemoka)
[08:12:24] *** Parts: jemoka (~jemoka@user/jemoka) ()
[08:12:52] *** Joins: jemoka (~jemoka@user/jemoka)
[08:23:49] <hirez> morning beach 
[08:23:57] <hirez> another day of enjoying mcclim 
[08:24:00] <hirez> ive finally caught my stride
[08:24:09] <hirez> implementing drawing the convex hull was a breeze
[08:24:13] <beach> Excellent!
[08:24:41] <beach> People need to know how good McCLIM has become, and that it is going to get even better.
[08:24:53] <hirez> call me old fashioned but I love the command interactor
[08:24:57] <hirez> I cant explain why
[08:25:02] <hirez> but its just...nice to have
[08:25:09] <beach> I agree.
[08:25:29] <beach> But it can be hidden in applications where people don't want it.
[08:25:48] <hirez> if they could reskin this to use a native-looking skin (or an approximation) I could probably sell this easily
[08:26:15] <beach> I think that's one of the plans.
[08:26:32] <hirez> judging by the hour I spent with LispWork's offering this fields remarkably similar
[08:26:40] <hirez> im guessing CLIM was a gui kit from days gone by?
[08:27:15] <hirez> because they feel very similar in terms of programming (though lispworks IDE makes life marginally easier...)
[08:27:16] <beach> I think it has roughly the same age as the standard. 
[08:28:00] <beach> CLIM used to be supported by Allegro, LispWorks, and also Genera I think.
[08:28:39] <beach> I discovered the specification a little more than 20 years ago when I needed a GUI for Gsharp, and I didn't want to attempt an FFI solution.
[08:29:38] <hirez> you've been programming lisp since the cowboy days 
[08:29:41] <hirez> thats pretty cool
[08:30:12] <beach> Oh, I learned Lisp (not Common Lisp obviously) in around 1977 or so.
[08:30:29] <hirez> did you ever get to play with a real life symbolics machine?
[08:30:49] <beach> Then, it turned out that Mike McDonald and gilberth had written pieces of a free implementation.  Mike had made "horizontal" progress (with the address-book application), and gilberth had done "vertical" progress with regions and transformations.
[08:30:56] <beach> No, I did not.
[08:31:39] <beach> So, I think in 2000, gilberth merged his and Mike's work, encouraged by me, and that was the start of McCLIM.
[08:31:55] <hirez> wow so you've had your hand in mcclim for a while
[08:32:06] <hirez> no wonder you seem to know a lot about it ;D
[08:32:17] <beach> You can say that I was the one that made it happen, even if I didn't do it myself. 
[08:32:33] *** Quits: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:32:44] <beach> It happened at an event called the Libre Software Meeting, in Bordeaux.
[08:33:47] <hirez> hah, now that I think about it bordeaux has come up a few conversations about computational geometry
[08:33:55] <hirez> I think inria hosts a computational mathematics seminar there
[08:34:04] <beach> Ah, that's possible.
[08:34:57] <beach> Otherwise, I was a grad student at Johns Hopkins when Joe O'Rourke and Subhash Suri were doing good work in computational geometry.  They are fairly well known in the field.
[08:35:04] *** Quits: yewscion (~yewscion@2601:547:a01:2900::b46f) (Ping timeout: 245 seconds)
[08:35:09] <hirez> O'Rourke is a demigod in the field.
[08:35:11] <beach> Subhash is still a friend of mine.
[08:35:24] <hirez> Also OR is one of the few people that would actually answer my emails 
[08:35:32] <hirez> gave me very good graduate school advice
[08:35:42] <beach> Great!
[08:36:04] <hirez> I actually have the second edition of his book on my desk.
[08:36:11] <hirez> Its basically the seminal work in introductory CG
[08:36:21] <beach> Yes, I see.
[08:36:28] <beach> Small world. 
[08:36:40] <hirez> Very small haha
[08:37:28] <hirez> I've found lisp to be a natural fit. Despite pressure to use python and what not I'm committed to porting everything over this direction.
[08:37:54] <hirez> Conses are natural representations of points. Functional composition is extremely useful.
[08:37:57] <beach> Good.  Python would be horrible for that kind of computation.  You would have to write your code in C.
[08:38:27] <hirez> And I have. In the process of running experiments in one of my papers python's GC was so aggressive I had to retool it in Cython
[08:38:34] <beach> It is usually estimated that Python has a factor 50 or so performance penalty compared to a good Common Lisp implementation like SBCL.
[08:39:10] <moon-child> hirez: could you not disable the gc entirely?  That's frequently a reasonable tradeoff for batch processing work, even with a good gc
[08:39:34] <hirez> moon-child, not in python. At least not easily. Cython let me "get around" the GC by redefining structures as C structures.
[08:40:07] <hirez> Its mostly industry pressure. CG is trying to fit in with the ML guys these days.
[08:40:10] <moon-child> huh
[08:40:46] <moon-child> oh--I suppose cpython uses reference counting, so the main cost would be incrementing and decrementing reference counts, not actually allocating and freeing or tracing objects
[08:40:48] <hirez> Thankfully I am focused on robotic path planning. A nice fit for lisp and symbolic computation imo :D
[08:42:00] <hirez> moon-child, that and the representation of structures in the VM. They are extremely heavy. 80% or more of my GC penalty was coming from dicts/sets getting collected as I dumped them.
[08:42:17] <hirez> The fact I can tune SBCL's GC already is a huge selling point.
[08:42:46] <moon-child> ah, yeah, python's objects are quite heavy, and it can't really leave them unboxed
[08:43:32] <hirez> yeah and outside of Cython there's no way to just get a simple C-like structure.
[08:44:06] <hirez> Tuples are close but not perfect, and classes are really the only other way. Each of those has a huge penalty in terms of all the free stuff it gives you.
[08:45:03] <hirez> Anyway, this all to say with McCLIM working and finally starting to really grok lisp I'm happy with what ive done far.
[08:45:10] <hirez> Happy enough to keep on pushing ;D
[08:55:10] *** Joins: raeda_ (~raeda@72.49.219.33)
[08:57:01] *** Joins: ldb (~user@user/ldb)
[08:59:32] <GreaseMonkey> what kinds of IRC bot libraries would you recommend on QuickLisp or via something i can check out into my local-projects directory? or would i be best to instead look for something that would let me parse lines fairly well... or should i just bite the bullet and use what's in cl + alexandria?
[08:59:53] <GreaseMonkey> ...oh and usocket of course unless something tends to be a lot better than that
[08:59:58] *** Joins: SAL9000_ (~SAL9000@shirakumo/sal9000)
[09:00:15] <GreaseMonkey> the other thing is it needs to be happy running in a SWANK server
[09:00:32] <GreaseMonkey> but i suspect it's really only stuff like SDL that needs special treatment of the main thread and whatnot
[09:00:41] *** Quits: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com) (Ping timeout: 272 seconds)
[09:02:43] *** Joins: Kabriel (~Kabriel@user/kabriel)
[09:03:31] <ldb> GreaseMonkey: cl-irc? https://common-lisp.net/project/cl-irc/
[09:03:58] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[09:03:58] *** Quits: karlosz (~karlosz@router.cloyne.org) (*.net *.split)
[09:03:58] *** Quits: skempf (~Kabriel@user/kabriel) (*.net *.split)
[09:03:58] *** Quits: raeda (~raeda@72.49.219.33) (*.net *.split)
[09:03:58] *** Quits: pok (~pok@user/pok) (*.net *.split)
[09:04:06] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 250 seconds)
[09:05:50] *** Joins: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net)
[09:06:08] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:08:12] <GreaseMonkey> ldb: thanks for that, i'm looking into it now
[09:08:19] *** Joins: tophullyte (~tophullyt@63.246.255.209)
[09:11:00] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[09:11:43] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[09:16:34] *** Joins: yewscion (~yewscion@2601:547:a01:2900::b46f)
[09:19:09] *** Quits: ldb (~user@user/ldb) (Ping timeout: 244 seconds)
[09:25:04] *** Quits: yewscion (~yewscion@2601:547:a01:2900::b46f) (Ping timeout: 245 seconds)
[09:27:12] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[09:27:47] *** Joins: ldb (~user@user/ldb)
[09:28:15] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 244 seconds)
[09:40:07] *** Joins: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com)
[09:42:00] *** Quits: casual_friday (~casual_fr@216.71.110.168) (Ping timeout: 245 seconds)
[09:42:59] *** Joins: casual_friday (~casual_fr@216.71.110.168)
[09:53:45] *** Joins: ad_absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f)
[09:56:19] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f) (Ping timeout: 245 seconds)
[10:02:10] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[10:11:46] *** Joins: adabsurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f)
[10:14:14] *** Quits: ad_absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f) (Ping timeout: 245 seconds)
[10:16:49] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[10:20:13] *** Joins: Cymew (~ante@c-b985225c.023-1144-7570702.bbcust.telenor.se)
[10:21:00] *** Joins: shka (~herr@109.231.62.239)
[10:27:30] *** Quits: mingus (~jan-magnu@ti0135a400-0748.bb.online.no) (Read error: Connection reset by peer)
[10:34:35] *** Quits: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:35:00] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[10:38:26] *** Joins: shka (~herr@109.231.62.239)
[10:40:40] *** Joins: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net)
[10:42:15] *** Joins: ad_absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f)
[10:44:39] *** Quits: adabsurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f) (Ping timeout: 245 seconds)
[10:46:51] *** Quits: ad_absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f) (Client Quit)
[10:58:26] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[11:03:31] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[11:07:27] *** Quits: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:09:12] *** Quits: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com) (Ping timeout: 244 seconds)
[11:10:11] *** Joins: Duuqnd (~Duuqnd_@185.201.174.79)
[11:11:28] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[11:12:06] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[11:12:24] *** Joins: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net)
[11:12:49] *** Quits: rbtEngrDude (~textual@wsip-66-210-249-144.ph.ph.cox.net) (Client Quit)
[11:23:03] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[11:27:20] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[11:32:53] *** Joins: Krystof (~user@81.174.155.115)
[11:44:42] *** Quits: tophullyte (~tophullyt@63.246.255.209) (Quit: Leaving)
[11:48:55] *** Quits: ldb (~user@user/ldb) (Ping timeout: 264 seconds)
[11:52:35] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[11:53:12] *** Joins: ldb (~user@user/ldb)
[11:56:35] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[11:58:24] *** Quits: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50) (Ping timeout: 245 seconds)
[12:02:35] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[12:02:46] *** Joins: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50)
[12:07:25] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[12:13:25] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[12:14:35] *** Joins: pve (~pve@188-67-245-173.bb.dnainternet.fi)
[12:18:45] *** SAL9000_ is now known as SAL9000
[12:19:41] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[12:21:04] *** Joins: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de)
[12:27:25] *** Joins: selwyn (~selwyn@user/selwyn)
[12:34:59] *** Joins: Oladon (~olad@98.43.81.226)
[12:37:42] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:58] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:50:07] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:50:12] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:55:06] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[13:01:24] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[13:05:18] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Read error: Connection reset by peer)
[13:05:20] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Write error: Broken pipe)
[13:05:20] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Write error: Connection reset by peer)
[13:05:20] *** Quits: akanouras (~akanouras@user/akanouras) (Read error: Connection reset by peer)
[13:05:20] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Read error: Connection reset by peer)
[13:06:05] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[13:07:11] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[13:07:11] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[13:07:11] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[13:07:11] *** Joins: akanouras (~akanouras@user/akanouras)
[13:31:17] *** Quits: ldb (~user@user/ldb) (Ping timeout: 244 seconds)
[13:37:09] *** Joins: ldb (~user@user/ldb)
[13:41:53] *** Quits: ldb (~user@user/ldb) (Ping timeout: 272 seconds)
[13:45:12] *** Joins: ldb (~user@user/ldb)
[13:50:51] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[14:07:11] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[14:07:42] *** Joins: akoana (~ah@user/akoana)
[14:21:13] *** Parts: trokotech (~user@237.red-81-40-102.staticip.rima-tde.net) (ERC (IRC client for Emacs 28.0.50))
[14:23:06] *** Joins: trokotech (~user@237.red-81-40-102.staticip.rima-tde.net)
[14:24:20] *** Joins: cranium (~cranium@user/cranium)
[14:25:30] *** Joins: ceblan (~user@237.red-81-40-102.staticip.rima-tde.net)
[14:32:51] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[14:32:56] *** Joins: abraham (~abraham@173.239.198.148)
[14:34:31] *** Joins: karlosz (~karlosz@router.cloyne.org)
[14:40:56] *** Joins: random-nick (~random-ni@87.116.179.85)
[14:46:56] *** Quits: abraham (~abraham@173.239.198.148) (Quit: Textual IRC Client: www.textualapp.com)
[14:53:51] *** Joins: mingus (~jan-magnu@ti0135a400-0748.bb.online.no)
[15:00:04] *** Quits: v88m (~Xiro@109-252-61-50.nat.spd-mgts.ru) (Ping timeout: 245 seconds)
[15:00:35] *** Joins: v88m (~Xiro@109.252.61.50)
[15:03:58] *** Quits: v88m (~Xiro@109.252.61.50) (Read error: Connection reset by peer)
[15:06:04] *** Joins: v88m (~Xiro@109.252.61.50)
[15:08:24] *** Quits: v88m (~Xiro@109.252.61.50) (Read error: Connection reset by peer)
[15:09:51] *** Joins: v88m (~Xiro@109.252.61.50)
[15:16:07] *** Quits: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:16:34] *** Joins: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de)
[15:17:20] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ed7f:3670:2cf7:6ab9)
[15:35:12] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:35:19] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[16:13:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[16:19:14] *** Joins: yewscion (~yewscion@2601:547:a01:2900::7467)
[16:20:31] *** Joins: knusbaum (~kjn@2601:240:8480:9990:5c3d:cdb5:2e15:9aeb)
[16:23:29] *** Joins: yitzi (~yitzi@172.98.105.250)
[16:29:58] *** Quits: yewscion (~yewscion@2601:547:a01:2900::7467) (Ping timeout: 268 seconds)
[16:30:28] *** Quits: knusbaum (~kjn@2601:240:8480:9990:5c3d:cdb5:2e15:9aeb) (Remote host closed the connection)
[16:34:37] *** Joins: kami_ (~user@user/kami/x-1692339)
[16:34:52] <kami_> Good afternoon, #commonlisp
[16:35:55] <kami_> I am sure I've asked this at least once in the past (on freenode), but I'm getting old ... so: what are my options if c2ffi says 'Not all C basic types are covered! The outlier is: :long-double' on x86_64-pc-linux-gnu ?
[16:36:08] <kami_> and cffi/c2ffi::+c-builtin-types+ has the value
[16:36:49] <kami_> (":void" ":_Bool" ":char" ":signed-char" ":unsigned-char" ":short" ":unsigned-short" ":int" ":unsigned-int" ":long" ":unsigned-long" ":long-long" ":unsigned-long-long" ":float" ":double" ":long-double")
[16:37:58] <kami_> I inspected cffi/c2ffi::+c-builtin-types+ after falling into the debugger
[16:41:26] <jackdaniel> I think that this would be easier if you had constructed a minimal example with code
[16:57:18] *** Quits: Duuqnd (~Duuqnd_@185.201.174.79) (Ping timeout: 250 seconds)
[17:05:16] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[17:27:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 252 seconds)
[17:31:47] *** Joins: Bike (~Glossina@71.69.170.70)
[17:31:47] *** ChanServ sets mode: +o Bike
[17:33:16] *** Quits: v88m (~Xiro@109.252.61.50) (Ping timeout: 250 seconds)
[17:41:51] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[17:45:35] <kami_> jackdaniel: that's definitely a very good idea. I thought it might be a commonly encountered problem and someone would be able to tell me my mistake off the top of their hat.
[17:47:05] <kami_> And with cffi stuff, it is often difficult to create a 'minimal' example, as you just give it a header file and the person who wants to reproduce the problem has to have at least the header files installed on their machine.
[17:48:55] <jackdaniel> in practice often issues with libraries come from typos. and a person who makes them is usually typo-blind (at least I don't see my typos until either the compiler or a person tells me about it)
[17:51:04] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:00:12] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:01:14] <kami_> that's true 
[18:01:15] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[18:01:25] <kami_> But in this case, it's something else:
[18:01:28] <kami_> https://github.com/cffi/cffi/blob/master/src/c2ffi/generator.lisp#L406
[18:01:51] <kami_> ;; TODO FIXME (":long-double"        :long-double)
[18:07:03] <kami_> long-double is only supported on scl
[18:08:58] <jackdaniel> fwiw ecl also supports long double but cffi doesn't have that in ecl's backend
[18:10:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:28:48] *** Joins: srhm (~ascii@user/srhm)
[18:31:29] *** Joins: knusbaum (~kjn@2601:240:8480:9990:6dc4:1551:87ad:ddab)
[18:34:46] *** Joins: micro_ (~micro@user/micro)
[18:36:35] *** Quits: knusbaum (~kjn@2601:240:8480:9990:6dc4:1551:87ad:ddab) (Ping timeout: 272 seconds)
[18:40:34] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[18:40:34] *** Quits: micro (~micro@user/micro) (*.net *.split)
[18:40:34] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (*.net *.split)
[18:40:34] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[18:40:35] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[18:40:35] *** Quits: lucerne (~thelounge@ip202.ip-51-178-215.eu) (*.net *.split)
[18:43:09] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 244 seconds)
[18:44:20] *** Joins: ludston (~patience@203.129.29.40)
[18:44:54] <ludston> Does (intern "blah" :keyword) hold :blah in memory forever or are keywords a special case somehow?
[18:45:18] <jackdaniel> forever and ever
[18:45:27] <beach> Yes, the former.
[18:45:58] <jackdaniel> on the other hand '#:|blah| will be gc-ed when not referenced anymore
[18:46:09] <jackdaniel> the root is the package in the keyword case
[18:47:06] <ludston> Most of our json libraries like to intern, which is a bit scary considering that json might be coming from possibly hostile 3rd parties
[18:47:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[18:47:48] <jackdaniel> symbols are heavier than strings, but not that much heavier
[18:48:17] <jackdaniel>  I think that it will take some jason to exhaust your heap
[18:48:24] <jackdaniel> json*
[18:48:56] <ludston> The concern would be that someone would send json messages like {"A":"", "AA":"", "AAA":""} which will eventually DOS the system
[18:49:15] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:49:25] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[18:49:52] *** Joins: ivche (~user@89.205.100.51)
[18:50:17] <jackdaniel> doesn't that apply also to excessively long string values? (that's what I've meant that symbols are heavy, but not super-heavy)
[18:50:25] *** Quits: gwefnn (~gwefnn@user/gwefnn) (Quit: ZNC 1.8.1 - https://znc.in)
[18:51:02] *** Joins: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com)
[18:51:39] *** Joins: gwefnn (~gwefnn@user/gwefnn)
[18:52:52] <ludston> No, because you can trivially filter out long string values by validating against incoming stream size, vs receiving many small strings with unique values that get interned uniquely
[18:52:57] *** Kabriel is now known as skempf
[18:53:42] <splittist> aren't short things smaller than long things?
[18:54:02] <ludston> It depends how many of them you have in a row
[18:54:28] <_death> would there be a point in interning them?
[18:54:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:55:08] *** Quits: yitzi (~yitzi@172.98.105.250) (Remote host closed the connection)
[18:55:30] <ludston> The json libraries I'm looking at are interning because it is convenient to convert "{"A":1,"B":2}" into '(:a 1 :b 2)
[18:55:50] <ludston> As opposed to '("a" 1 "b" 2) which would be safe
[18:56:46] <splittist> I guess if you're snarfing arbitrary JSON, and I can spam you with (expt #x10FFFF n) entries you might be in trouble. But wouldn't the same thing happen with strings?
[18:57:07] <_death> ludston: well, I often use com.gigamonkeys.json which doesn't intern.. but often interning may be convenient because you want to have references to particular keys in your source, so you could have a hybrid that find-symbol in some package, or for some delimited set of keys
[18:59:10] <ludston> _death: I'll have a look at it. I'm liking jonathan the most out of the libs so far, and it's pretty trivial for me to hack it to *not* intern.
[18:59:28] *** Joins: seok (~seok@49.2.163.56)
[19:00:45] <ludston> splittist: The problem is that you don't know if the json is arbitrary/valid until you have parsed it, and at that point it has already interned. Strings aren't a problem because they are garbage collected.
[19:00:45] <_death> ludston: you could also count the number of newly interned symbols to make it possible to detect such anomalies, or intern them in a non-keyword package.. there are a myriad of approaches
[19:10:18] <ludston> _death: I might set up long-term monitoring for that. I'm trying to think of a case where I'd actually want interning. Maybe a local config file? But then I would just use Lisp.
[19:12:48] <_death> when you say "interning", do you mean "intern" or "find-symbol"
[19:13:08] <ludston> As above, specifically (intern "blah" :keyword)
[19:14:20] <_death> so I guess interning could be helpful if you want to use EQ to compare things (but then you could also use a hash table of strings)
[19:14:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[19:14:49] <ludston> e.g. https://github.com/Rudolph-Miller/jonathan/blob/fb83ff094d330b2208b0febc8b25983c6050e378/src/util.lisp#L33
[19:14:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[19:15:35] *** Joins: srhm (~ascii@user/srhm)
[19:16:24] <SAL9000> you could intern as a postprocessing step, I guess? json -> (list string) -> (list symbol)
[19:19:56] <ludston> One of the reasons that common lisp is the best, is you can just redefine some function in someone elses namespace that you disagree with.
[19:21:01] <SAL9000> :-)
[19:21:55] <SAL9000> That's one of the many double-edged swords/footguns, to be honest. This kind of thing -- while awesome for us -- is probably a major obstacle to large scale/commercial adoption of CL.
[19:22:09] <_death> instead you can make it possible to provide your own function to the json parser
[19:23:36] <_death> many languages allow similar shenanigans
[19:25:05] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:27:29] <_death> just think of the good ol' #define private public ;)
[19:29:33] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[19:29:45] <ludston> _death: But nowhere near as clean as (progn (in-package :jonathan.utils) (defun make-keyword (str) str)))
[19:30:58] <_death> "clean" is not the word I'd use :)
[19:32:08] <ludston> Don't judge me! This way I don't have to fork an entire repo to change one line
[19:32:12] *** Joins: aeth_ (~Michael@user/aeth)
[19:32:28] <ludston> Haha
[19:33:18] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[19:33:23] *** aeth_ is now known as aeth
[19:35:27] <ludston> I guess you have to be careful though because it might be a breach of the software license
[19:36:54] <_death> there's always defadvice ;)
[19:43:56] *** Joins: selwyn_ (~selwyn@user/selwyn)
[19:44:13] *** Quits: raeda_ (~raeda@72.49.219.33) (Remote host closed the connection)
[19:44:17] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[19:44:17] *** Joins: raeda__ (~raeda@72.49.219.33)
[19:44:24] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[19:45:35] *** Joins: aeth_ (~Michael@user/aeth)
[19:45:35] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[19:46:09] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[19:46:14] *** aeth_ is now known as aeth
[19:46:22] *** Joins: slyrus__ (~slyrus@135.180.166.51)
[19:46:31] *** Joins: mingus_ (~jan-magnu@ti0135a400-0748.bb.online.no)
[19:47:40] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[19:47:50] *** Joins: gwefnn_ (~gwefnn@user/gwefnn)
[19:48:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[19:48:42] *** Joins: Bike_ (~Glossina@71.69.170.70)
[19:48:42] *** ChanServ sets mode: +o Bike_
[19:49:55] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[19:50:28] *** Joins: srji_ (~srji@static.43.141.203.116.clients.your-server.de)
[19:51:58] *** Joins: pieguy128_ (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[19:53:44] *** Joins: pve_ (~pve@188-67-245-173.bb.dnainternet.fi)
[19:55:00] *** Quits: srhm (~ascii@user/srhm) (*.net *.split)
[19:55:03] *** Quits: gwefnn (~gwefnn@user/gwefnn) (*.net *.split)
[19:55:07] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (*.net *.split)
[19:55:09] *** Quits: Bike (~Glossina@71.69.170.70) (*.net *.split)
[19:55:12] *** Quits: mingus (~jan-magnu@ti0135a400-0748.bb.online.no) (*.net *.split)
[19:55:12] *** Quits: random-nick (~random-ni@87.116.179.85) (*.net *.split)
[19:55:12] *** Quits: karlosz (~karlosz@router.cloyne.org) (*.net *.split)
[19:55:12] *** Quits: trokotech (~user@237.red-81-40-102.staticip.rima-tde.net) (*.net *.split)
[19:55:14] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[19:55:15] *** Quits: pve (~pve@188-67-245-173.bb.dnainternet.fi) (*.net *.split)
[19:55:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[19:55:24] *** Quits: leo_song (~leo_song@1.156.61.81) (*.net *.split)
[19:55:26] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[19:55:27] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[19:55:29] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[19:55:33] *** Quits: slyrus_ (~slyrus@135.180.166.51) (*.net *.split)
[19:55:33] *** Lord_of_Life_ is now known as Lord_of_Life
[19:55:54] *** Quits: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50) (Ping timeout: 245 seconds)
[19:57:22] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[20:01:07] *** Joins: random-nick (~random-ni@87.116.165.220)
[20:01:39] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[20:02:48] <dieggsy> huh, for some reason i can't use *standard-output* in slynk with allegro's excl:run-shell-command. has anyone run into this before? 
[20:03:00] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.1)
[20:03:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[20:04:55] <dieggsy> er, sly that is. it uninformatively says the stream "can't be used for output". I'm sure it's some weirdness to do with how sly handles output 
[20:06:06] *** Quits: Cymew (~ante@c-b985225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[20:10:14] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[20:12:08] <etimmons> slynk's *standard-output* is a gray stream. Not all implementations can use that type of stream for their external command functions
[20:12:21] <splittist> dieggsy: I know nothing about excl:run-shell-command, but is it talking about output from the process, which would need a lisp INPUT stream
[20:12:46] <etimmons> UIOP's {run,launch}-program says that allegro can handle handle streams that are of subtype FILE-STREAM
[20:13:20] *** Bike_ is now known as Bike
[20:13:33] <etimmons> * type FILE-STREAM
[20:13:57] <dieggsy> etimmons: oh. hadn't even heard of gray streams
[20:14:45] <dieggsy> huh. maybe i can work around it by having it return the stream and use that to print myself....
[20:19:38] <etimmons> That's similar to how other implementations handle it internally. I know that in cases like this, ECL spawns a new thread that shuffles data from a new stream associated with the program to the stream where you want it to go.
[20:21:56] <jackdaniel> yeah, that was tricky :)
[20:24:47] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[20:27:08] *** Joins: Josh_2 (~user@37.25.47.130)
[20:27:29] <Josh_2> Afternoon
[20:41:50] <dieggsy> or actually, if i run uiop:run-program in a thread, will it only block that thread?
[20:44:09] *** Joins: samebchase (~samebchas@51.15.68.182)
[20:44:28] *** Quits: seok (~seok@49.2.163.56) (Quit: Client closed)
[20:46:43] *** Joins: trokotech (~user@237.red-81-40-102.staticip.rima-tde.net)
[20:49:30] <etimmons> It should, but that really depends on the implementation you're using since it's a thin veneer to give a uniform-ish API over the implementation specific functions
[20:52:15] *** Joins: aeth_ (~Michael@user/aeth)
[20:53:03] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[20:53:08] *** aeth_ is now known as aeth
[21:01:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 252 seconds)
[21:10:35] <Xach> Hmm, is there anything standard-ish (cltl2 included) to get the name of the function enclosing a macro or compiler-macro at macroexpansion time?
[21:13:10] <Bike> What do you mean by enclosing? Like, if a macro is being expanded, the name of the function whose body the macro form is in?
[21:13:28] <Krystof> don't think so.  a cltl2-ish environment might have information about block names, but I think even allegro doesn't have a "list-all-blocks-in-this-environment" exported operator
[21:13:39] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:15:23] <Krystof> * (defmacro foo (&environment env) (inspect env))
[21:15:23] <Krystof> FOO
[21:15:23] <Krystof> * (defun bar (x) (foo) x)
[21:15:23] <Krystof> The object is a STRUCTURE-OBJECT of type SB-KERNEL:LEXENV.
[21:15:23] <Krystof> 0. FUNS: NIL
[21:15:24] <Krystof> 1. VARS: ((X . #<SB-C::LAMBDA-VAR :%SOURCE-NAME X {10018CA583}>))
[21:15:24] <Krystof> 2. BLOCKS: ((BAR #<SB-C::ENTRY {10018CAD73}> #<SB-C::CTRAN 1 {10018CA883}>
[21:15:25] <Krystof>              #<SB-C::LVAR 2 {10018CA8B3}>))
[21:15:30] <Krystof> whoops, sorry.  I meant to trim that
[21:22:36] <Xach> Krystof: thanks. block names were my first thought but the env object I have is a bit more opaque to me than SBCL's 
[21:27:07] <dieggsy> with slime/sly is there no way to make sure all output is shown in the repl buffer (as opposed to some going to the inferior lisp buffer) ?
[21:28:52] <scymtym> Xach: the log4cl library must have something like that but i doubt it is even remotely standard-ish
[21:29:06] <Xach> scymtym: i don't mind non-standard in this case
[21:29:27] <Xach> (i know my question mentioned standard-ish but i am not too picky actually)
[21:29:32] <Xach> that's a good pointer, thank you
[21:30:51] <scymtym> sure
[21:32:09] <jackdaniel> log4cl takes the enclosing block name and it works only on sbcl and ccl
[21:32:17] * Xach is just discovering that 
[21:32:42] <Xach> Allegro would be most useful to me in fact. Time to scrape around the env object a little more.
[21:38:13] *** Joins: Noisytoot (noisytoot@sourcehut/user/noisytoot)
[21:46:12] *** Joins: aeth_ (~Michael@user/aeth)
[21:46:19] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 268 seconds)
[21:49:43] *** aeth_ is now known as aeth
[21:51:41] *** Joins: seok (~seok@49.2.163.56)
[22:11:26] *** Quits: seok (~seok@49.2.163.56) (Ping timeout: 250 seconds)
[22:16:16] *** Joins: seok (~seok@49.2.163.56)
[22:24:23] <Josh_2> Shinmera: is chirp:statuses/update-with-media supposed to work with gifs? 
[22:26:33] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:ed7f:3670:2cf7:6ab9) (Remote host closed the connection)
[22:29:04] <jackdaniel> (1+ most-positive-fixnum) ways for making repl unusable: (setf *print-right-margin* (1+ most-positive-fixnum))
[22:34:28] <Inline> should there be assertions going on with *print-right-margin* ?
[22:34:39] <Inline> or *right-margin*
[22:37:44] *** Joins: aeth_ (~Michael@user/aeth)
[22:39:11] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:39:16] *** aeth_ is now known as aeth
[22:47:09] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 245 seconds)
[22:54:00] <jcowan> jackdaniel: Even professional copy editors are blind to what they write themselves.
[22:54:33] <pjb> jackdaniel: it's a non-negative integer, so (1+ most-positive-fixnum) is perfectly conforming.
[22:54:47] <pjb> Any implementation that fails on that is non-conforming.
[22:54:52] <pjb> Booo!
[23:04:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:06:14] <_death> just need a larger screen, or smaller font ;)
[23:08:01] <dieggsy> something something iosevka
[23:22:43] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[23:26:11] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[23:29:08] *** Quits: ivche (~user@89.205.100.51) (Ping timeout: 264 seconds)
[23:32:39] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:40:29] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[23:40:31] *** Joins: ivche (~user@89.205.100.51)
[23:40:33] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[23:40:47] *** Quits: seok (~seok@49.2.163.56) (Quit: Client closed)
[23:53:23] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[23:53:32] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
