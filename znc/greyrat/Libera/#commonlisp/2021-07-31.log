[00:00:05] <shka> Bike: yeah, but double-floats are rarely used in deep learning
[00:00:23] <Bike> single floats... shouldn't need to cons?
[00:01:36] <shka> i think i wanted to show how sbcl compares single-floats
[00:01:54] <jeosol> I occasionally work with python for the DL libraries, but it can be pain in notebooks having to go up and down to reevaluate some cells come back down, only to realize one other computation is stale, etc
[00:02:00] <Inline> err whaaa
[00:02:04] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[00:02:21] <Inline> i see no threading for single-floats but when using double floats there is some threading going on
[00:02:29] <Bike> threading?
[00:03:14] <Inline> thread.pseudo-atomic-bits, thread.alloc-region, pending interrupt trap
[00:03:30] <Bike> that just indicates it has to allocate memory
[00:03:42] <Inline> and CONS->RNN
[00:03:44] <Bike> the memory allocation is a per thread thing most of the time, probably
[00:03:50] <shka> you know what, i am spewing nonsense
[00:03:54] <Inline> so not even consing in single floats
[00:04:04] <Inline> but in double floats
[00:04:09] <shka> comparison also looks fine
[00:04:34] <Bike> a double float needs 64 bits to represent, so there's no room for a type tag. so they're boxed if they need to be used in a type sensitive context. ergo, consing.
[00:04:51] <Inline> aha
[00:04:52] <Bike> a single float is only 32 bits so it fits with a type tag into a 64 bit word just fine.
[00:05:08] <shka> yet i vividly remember when i stumbled in something float related in SBCL that worked faster with double-floats then a single floats
[00:05:32] <shka> because single float were getting converted to double floats anyway
[00:06:01] <shka> but i can't remember or google it
[00:06:05] <Inline> welp, the fastness i also skimmed from books recommending to use bigger types, the machine architectures are then faster because of bus design or so....
[00:06:10] <shka> so maybe my memory is glitching
[00:06:25] <jeosol> Bike: I was recently following a talk on Julia why the guy was saying it faster than python and many other languages (don't recall he mentioned C). But one thing he kept saying is that if you have to box and unbox, he said you are "dead"
[00:06:41] <Bike> yes, memory allocation really screws things up.
[00:06:43] <Inline> not sbcl specific, even python and fortran books recommend the same
[00:06:56] <jeosol> this was for a course on performance optimization
[00:07:10] <Bike> suddenly your arithmetic might involve the garbage collector and/or synchronization.
[00:08:25] <shka> well, you may work fine with double-floats in sbcl, but you will gonna need type declarations for arrays and use inline quite a bit
[00:08:48] <Bike> right, it can avoid boxing intermediate results
[00:09:04] <shka> it is a little bit annoying, but it can be done
[00:09:22] <shka> heck, statistical learning uses double-floats for floating point types
[00:09:46] <shka> and i did that BECAUSE OF THAT ISSUE THAT I CAN'T FIND OR REMEMBER
[00:09:51] * shka is frustrated
[00:10:07] <shka> maybe it got fixed?
[00:10:24] <jeosol> Btw, on my threading issues mention earlier, is passing data from upstream to downstream object a bad design or code smell - this is where I tell the lower object what their index is that is used to create a directory later on
[00:11:02] <shka> jeosol: reserve index beforehand
[00:11:34] <jeosol> hmm, ok, that's interesting
[00:12:16] <jeosol> as long as I can map the X_i to some folder and just pick the results, I probably don't need to pass an object (and I do a setf on a slot) this is where things are getting messed up
[00:12:52] <shka> nothing in the changelog
[00:13:00] <jeosol> I haven't been displined enough
[00:13:00] <shka> well, maybe i was wasting my time
[00:13:10] <shka> wouldn't be the first time...
[00:14:34] <shka> jeosol: as for index, if that's just iota, well, you can simply do something like (lparallel:pmap nil (lambda (argument index) ...) arguments (alexandria:iota (length arguments)))
[00:15:46] <Shinmera> shka: Thanks a lot! My finances will stay troublesome as long as I have to fund a team with no income, heh.
[00:16:31] <shka> Shinmera: btw, did you painted this calendar using your drawning app that name i can't remember right now?
[00:16:39] <Shinmera> haha, no
[00:16:40] <shka> *did you paint
[00:16:43] <Shinmera> I use Krita
[00:16:49] <shka> heh, that's a shame!
[00:16:59] <shka> but it looks nice
[00:17:11] <jeosol> skha: technically, the index corresponds to rows of a larger matrix (num_solutions, num_dimensions), so I slice of each row (X_i) to a separate thread
[00:17:18] <shka> i will grab one for myself and one as a gift
[00:17:55] <shka> jeosol: then, technically, you are fine
[00:18:00] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[00:18:19] <shka> jeosol: you don't need a lock
[00:18:22] <shka> which is great
[00:19:27] <shka> you may prefer to return vector which gets stacked into matrix as an after step but at this point this is really just stylistic choice
[00:19:54] <shka> or you may pass displaced array into the function
[00:20:15] <shka> all options are possible
[00:20:30] <shka> anyway, have a good night
[00:20:39] <shka> and once again, good luck with your deadline!
[00:21:24] <jeosol> shka: thanks buddy. I really appreciate the pointers and suggestions. I will try them
[00:21:29] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Read error: Connection reset by peer)
[00:24:47] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:28:10] *** Quits: pjb` (~pjb@2a01cb040b1ae100445395ee53681b27.ipv6.abo.wanadoo.fr) (Quit: renaming)
[00:28:41] *** Joins: pjb (~pjb@user/pjb)
[00:34:42] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[00:36:11] *** Joins: aeth (~aeth@user/aeth)
[00:40:50] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[00:44:03] <jmercouris> Shinmera: how to plump:text and avoid the text of script tags?
[00:44:16] <jmercouris> Shinmera: let's say I invoke it on the document root, and I want to avoid getting script tags
[00:44:25] <Shinmera> you do it yourself.
[00:44:28] <jmercouris> will I have to manually traverse the tree or something
[00:44:32] <jmercouris> damn, I was just about to say it
[00:44:33] <jmercouris> OK
[00:44:41] <jmercouris> that's pricy
[00:45:56] <Shinmera> "pricy?"
[00:56:35] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[00:58:04] *** phadthai_ is now known as phadthai
[00:59:18] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 256 seconds)
[01:02:49] *** Quits: thmprover (~user@047-042-215-236.res.spectrum.com) (Quit: [Exit, pursued by bear])
[01:10:41] *** Joins: Guest82 (~Guest82@190.218.237.48)
[01:13:57] <Guest82> does anyone know how to print to the repl while using a controller (read: web.lisp) in caveman2? phantomics
[01:14:14] <Guest82> I've tried format T, print, don't know what else
[01:14:46] <jmercouris> Guest82: it should work
[01:14:50] <phantomics> Haven't used caveman2, do you know what output stream is being used?
[01:14:53] <jmercouris> Guest82: if you aren't seeing anything look in your inferior lisp
[01:14:58] <Guest82> hm, not sure
[01:15:12] <jmercouris> check the inferior lisp, printing works just fine in caveman
[01:15:29] <Guest82> I am too much of a noob to even understand what inferior lisp means... I'm using sublime text with a package called sly
[01:15:38] <Guest82> jmercouris thanks for answering!
[01:15:50] <Guest82> maybe I'll restart the server
[01:15:55] <pve> Guest82: try SWANK::*CURRENT-STANDARD-OUTPUT*
[01:16:00] <jmercouris> ah, that explains
[01:16:21] <Guest82> haha
[01:16:21] <jmercouris> Shinmera: computationally expensive
[01:17:50] <Shinmera> Why would it be any more expensive than what the plain text does
[01:19:17] <Guest82> jmercouris I'm getting errors, package doesn't exist, tried doing ql:quickload "swank" but then still didn't work
[01:19:21] <Guest82> for (SWANK::*CURRENT-STANDARD-OUTPUT*)
[01:19:27] <Guest82> in the repl
[01:20:00] *** Joins: dsk (~dsk@user/dsk)
[01:20:34] <pve> Guest82: I meant try printing to that stream
[01:21:04] <Guest82> oh, meaning doing something like this (format SWANK::*CURRENT-STANDARD-OUTPUT* "hello")
[01:21:05] <Guest82> ?
[01:21:16] <Guest82> @pve
[01:21:44] <pve> Guest82: yes, and see where the output goes
[01:22:13] <Guest82> pve got an error saying the variable swank is unbound
[01:22:22] <Guest82> thanks for the noob debug help...
[01:22:37] <pve> Guest82: oh, ok you're running it separately
[01:23:33] <pve> Guest82: how exactly are you running it?
[01:23:34] <Guest82> pve not sure what that means..... I started the server in the repl... but the repl is probably running as a bash process and being called from the editor sublime text
[01:24:05] <pve> Guest82: ok, I understand now
[01:24:17] <Guest82> phantomics nope, don't know...
[01:25:09] *** Joins: tfeb (~tfb@88.98.95.237)
[01:25:49] <Guest82> @pve Is there a way to see all the variables in the current script? I tried (inspect *readtable*) but didn't understand the output so much
[01:26:23] <Guest82> pve any ideas about the printing? or how to debug a program without printing haha
[01:26:49] <Guest82> I feel like there's a bit of a jump between starting to program in lisp and understanding how to deal with all these things...
[01:27:01] <pve> Guest82: Sorry I'm not familiar with caveman2, but you could at least print to a file if you can't see standard-output
[01:27:54] <Guest82> @pve oh, I hear, thanks, that's a good idea
[01:28:54] <pve> Guest82: (with-open-file (*out* "debug.log" :direction :output :if-exists :append) (print *out* "Hello!"))
[01:30:31] <pve> and turn that into a utility function like (defun log (message) ... ) or something
[01:31:11] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[01:32:31] <lisp123_> Guest82: "I feel like there's a bit of a jump between starting to program in lisp and understanding how to deal with all these things..." --> I won't lie, it will take a bit of time, but the benefits will be great down the track
[01:34:13] <Guest82> pve, thanks a lot!
[01:34:45] <pve> Guest82: it may be that running the thing from within sublime is complicating things too much if you are unable to see any output
[01:35:14] <Guest82> lisp123_ I find macros are the solution to my problems fighting languages to be able to abstract things, but I feel like there should be a smaller barrier to entry than learning lisp and emacs at the same time
[01:35:15] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[01:35:44] <pve> Guest82: You could try starting it manually from the shell instead. Then you should see the debugging output at least.
[01:35:56] <Guest82> pve I hear, I understand everything is easier with emacs, but I don't know how to use emacs and I feel it's too much to learn both in one shot
[01:36:11] <pve> Guest82: didn't mean emacs, just shell
[01:36:11] <Guest82> @pve I will try now, that's a good idea!
[01:37:11] <pve> Guest82: remember to familiarize yourself with the various command line parameters like --eval and --load to get maximum convenience
[01:37:29] <lisp123_> Guest82: Try Portacle. I don't disagree with you, the combo of learning lisp and emacs makes it a bit harder, but both tools have a lot of benefits too - so you will get a lot of success down the track :)
[01:37:42] <Guest82> pve, thanks will read the man page
[01:38:07] <lisp123_> Guest82: Sorry to beat a daed horse, but I _highly_ recommend emacs for any sort of lisp programming
[01:38:20] <lisp123_> You can start with the basics and dip your toes in
[01:38:22] <Guest82> lisp123_ yeah, from what've I've read it seems it's a great combination. I tried portacle but they didn't support latest mac os
[01:38:26] <Guest82> let me check if they updated it
[01:38:36] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 265 seconds)
[01:38:44] <lisp123_> For MacOs - you can install basic emacs
[01:38:54] <pve> Guest82: and if working from the shell, do define convenience functions or symbol-macros to reload your project quickly
[01:39:02] <lisp123_> Follow this: https://emacsformacosx.com/
[01:39:59] <pjb> yes, this one is good ^
[01:41:35] <pve> Guest82: silly example: (define-symbol-macro rr (asdf:load-system "myapp")) will make "rr" reload your stuff after you've edited it in sublime
[01:46:51] <Guest82> pve thanks for the idea of the convenience functions
[01:46:57] <Guest82> lisp123_ thanks for the link
[01:47:00] <Guest82> will look at it
[01:47:07] <Guest82> oh, that's just emacs
[01:47:18] <lisp123_> lol
[01:47:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[01:47:36] <lisp123_> It will take 1 min to install
[01:47:43] <lisp123_> Have you installed SBCL already?
[01:48:24] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:50:46] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:53:11] <Guest82> lisp123_ yeah I have emacs 2.7 in the terminal, sbcl,just added cl
[01:53:13] <Guest82> ccl
[01:53:28] <lisp123_> Cool
[01:53:59] <lisp123_> I'm gonna sleep but good luck and enjoy
[01:54:13] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:54:25] <Guest82> lisp123_ what's the easiest tutorial about dealing with lisp on emacs? I feel like the tutrial here is just text editting, and then to do lisp modes and other things is another huge jump
[01:54:39] <Guest82> ok, thanks, good night!
[01:54:41] <pjb> Guest82: well, there's the emacs-lisp-intor.
[01:54:45] <pjb> Guest82: well, there's the emacs-lisp-intro
[01:54:57] <Guest82> @pjb that's an emacs command?
[01:55:07] <Guest82> or that's the elisp tutorial?
[01:55:10] <pjb> Guest82: Yes.
[01:55:27] <Josh_2> Elisp or CL dev from emacs?
[01:55:35] <pjb> Guest82: Bug for CL, it's http://cliki.net/Getting+Started and http://cliki.net/Online+Tutorial
[01:55:44] <pjb> s/Bug/But/
[01:55:48] <Josh_2> Theres a lot of youtube videos
[01:56:15] <Guest82> Josh_2 I want cl
[01:56:33] <pjb> Guest82: those links are in the topic of #clschool
[01:57:24] <Guest82> pjb thank you, never heard of #clschool before haha now added it
[01:57:44] <pjb> http://cliki.net/IRC lists interesting channels.
[02:08:10] *** Quits: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[02:09:21] *** Joins: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de)
[02:10:52] <Guest82> pjb thanks! just added #lispweb
[02:13:21] <pve> Guest82: I like Marco Baringer's SLIME video (https://www.youtube.com/watch?v=NUpAvqa5hQw), you can skip to around the 10:00 mark.
[02:14:35] *** Quits: gaqwas (~john@dynamic-077-004-083-210.77.4.pool.telefonica.de) (Ping timeout: 258 seconds)
[02:14:55] <Guest82> @pve great, thanks, I have plenty of homework now ;)
[02:15:45] <pve> Guest82: I fondly remember watching that video when I started lisping
[02:16:20] <Guest82> my emacs fails from bad init file settings
[02:16:21] <Guest82> hahaha
[02:16:23] <Guest82> old problems
[02:16:24] <Guest82> Warning (initialization): An error occurred while loading ‘/Users/danielnussenbaum/.emacs.d/init.el’:
[02:16:25] <Guest82> File is missing: Opening input file, No such file or directory, /Users/danielnussenbaum/zsh:1: command not found: rosconfig
[02:16:49] <Guest82> now i've commented everything out and it works!
[02:16:51] <Guest82> haha
[02:17:10] *** Joins: notzmv (~zmv@user/notzmv)
[02:20:04] <pve> Guest82: I'm rewatching the slime video now, and it's incredible how useful it still is, despite being a little old
[02:20:40] *** Joins: akoana (~ah@user/akoana)
[02:21:21] <Guest82> it's two years old hahaha when I see something from 20 years ago I think it's old
[02:21:51] <pve> nah, it's from 2005
[02:22:01] <Guest82> thanks
[02:22:13] <Guest82> ah repost..
[02:23:41] <pve> Guest82: he uses asdf-install in the video, but there's quicklisp these days
[02:25:00] <Guest82> yeah
[02:26:59] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[02:27:17] *** Quits: pve (~pve@37-136-132-0.rev.dnainternet.fi) (Quit: bedtime)
[02:28:14] *** Quits: Guest82 (~Guest82@190.218.237.48) (Quit: Client closed)
[02:30:59] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:5:7c36:6d3c:3648) (Remote host closed the connection)
[02:32:23] <kakuhen> fyi you almost always want to quicklisp nowadays
[02:33:27] <kakuhen> the nice part about quicklisp is not only that it's widely used nowadays, but also lets you quickly test your projects on other cl implementations, assuming you added it to your implementation's init file (i.e. your .sbclrc, .eclrc, and so on)
[02:49:07] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[02:52:45] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[02:58:34] *** Quits: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[03:03:06] *** Joins: sterni (~lukas@user/sterni)
[03:10:52] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[03:12:14] <char> flip214: I'm not sure drakma will work because I need it to work for websocket too.
[03:12:21] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:24:07] *** Quits: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:24:34] *** Joins: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de)
[03:24:49] <char> flip214: i need the proxy to be configurable in common lisp
[03:36:14] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 258 seconds)
[03:59:27] *** Quits: subst (~user@cpe-174-105-5-165.columbus.res.rr.com) (Ping timeout: 252 seconds)
[04:00:31] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[04:05:53] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[04:06:07] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[04:20:11] *** Joins: Wairu_Goodman (~Wairu_Goo@2804:389:e01e:36fd:146b:aa89:e12e:1d40)
[04:41:26] *** Parts: akoana (~ah@user/akoana) (Leaving)
[04:57:04] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[04:58:42] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[05:21:02] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[05:23:56] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[05:44:42] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[05:51:22] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[06:19:54] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[06:20:54] *** Joins: zacts (~zacts@user/zacts)
[06:25:23] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[06:26:02] *** Joins: zacts (~zacts@user/zacts)
[06:27:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:36:29] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[06:46:46] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[06:59:47] *** Joins: akoana (~ah@user/akoana)
[07:06:31] *** Joins: prxq_ (~quassel@x4dbdadd8.dyn.telefonica.de)
[07:10:11] *** Quits: prxq (~quassel@x4db6a48f.dyn.telefonica.de) (Ping timeout: 252 seconds)
[07:33:13] *** Quits: lottaquestions (~nick@2607:fa49:5040:a300:d5df:d412:bed6:9ef6) (Quit: Konversation terminated!)
[07:33:36] *** Joins: nick (~nick@2607:fa49:5040:a300:fb5d:71f4:4e8b:bb12)
[07:33:50] <beach> Good morning everyone!
[07:35:06] <char> beach: hello
[07:40:12] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:41:28] *** Quits: nick (~nick@2607:fa49:5040:a300:fb5d:71f4:4e8b:bb12) (Quit: Konversation terminated!)
[07:41:53] *** Joins: lottaquestions (~nick@2607:fa49:5040:a300:fb5d:71f4:4e8b:bb12)
[07:42:50] *** Quits: lottaquestions (~nick@2607:fa49:5040:a300:fb5d:71f4:4e8b:bb12) (Client Quit)
[08:12:16] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:34:18] *** Quits: Wairu_Goodman (~Wairu_Goo@2804:389:e01e:36fd:146b:aa89:e12e:1d40) (Ping timeout: 240 seconds)
[08:55:34] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: leaving)
[09:09:49] <hayley> So, The Art of the Metaobject Protocol turns 30...today or perhaps yesterday depending on time zone.
[09:16:16] <beach> Oh, wow!  I'll be sure to celebrate!
[09:16:53] <hayley> I think it happened yesterday for both of us, but better late than never.
[09:17:02] <beach> Yeah.
[09:19:03] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[09:24:59] * edgar-rft always thougth that art is timeless, but whatever makes you happy...
[10:44:15] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[10:51:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:52:39] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 276 seconds)
[10:52:51] *** Lord_of_Life_ is now known as Lord_of_Life
[11:01:50] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[11:24:24] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 252 seconds)
[11:25:45] *** Joins: shka (~herr@109.231.62.239)
[11:42:18] *** Joins: selwyn (~selwyn@user/selwyn)
[11:49:27] *** Joins: gaqwas (~john@dynamic-095-115-081-228.95.115.pool.telefonica.de)
[11:52:42] *** Joins: cjb (~cjb@user/cjb)
[11:59:58] *** Joins: pve (~pve@188-67-251-199.bb.dnainternet.fi)
[12:35:53] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:32] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:38:48] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[12:45:15] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[13:02:58] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[13:03:10] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[13:04:42] *** Joins: pjb (~pjb@user/pjb)
[13:05:21] <lisp123_> I have question
[13:06:01] <lisp123_> If I define a package, say new-and-improved-lisp, which uses CL (:use :cl)
[13:06:42] <lisp123_> Can I redefine standard functions within this package and they will shadow the standard ones (but where I don't specify them, they will fall back to the standard ones)?
[13:09:45] <lisp123_> I am getting an error "Lock on package COmmon-Lisp violated) - is there a way to suppress this?
[13:10:41] *** Joins: fourier_ (~fourier@c-5eea258d-74736162.cust.telenor.se)
[13:10:43] *** Quits: fourier (~fourier@customer-89-255-226-149.stosn.net) (Read error: Connection reset by peer)
[13:11:01] *** Joins: tfeb (~tfb@88.98.95.237)
[13:14:36] <pjb> lisp123_: definitely. Shadow them.
[13:15:59] <pjb> (defpackage "YOUR-CL" (:use "CL") (:export . #.(let (clsyms) (do-external-symbols (s "CL" clsyms) (push (string s) clsyms)))) (:shadow "DEFUN"))
[13:17:13] <pjb> (in-package "YOUR-CL") (defmacro defun (name lambda-list &body body) `(CL:defun ,name (,@lambda-list &aux (,(gensym) (print '(entering ,name)))) ,@body))
[13:17:40] <pjb> mind using the qualified name when you want to refer to the CL symbol, instead of yours.
[13:20:49] *** Quits: lad (~lad@user/lad) (Ping timeout: 250 seconds)
[13:22:12] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[13:29:15] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Remote host closed the connection)
[13:29:51] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[13:31:44] <kakuhen> is it possible to define a class locally and use a type for it?
[13:31:57] *** Quits: d4ryus (~d4ryus@ppp-188-174-95-171.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[13:32:05] <kakuhen> I am thinking of something like (let ((etc (make-instance 'standard-class))) ...) and using 'etc as a type
[13:33:14] <shka> kakuhen: yeah, it is possible IIRC but i can't recall how
[13:33:33] <shka> but anon classes can be used in CL
[13:35:12] *** Joins: d4ryus (~d4ryus@ppp-188-174-95-171.dynamic.mnet-online.de)
[13:36:09] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Ping timeout: 258 seconds)
[13:40:15] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[13:41:43] <pjb> kakuhen: like this: https://termbin.com/7nemw
[13:42:02] <kakuhen> ooh good approach
[13:42:11] <pjb> kakuhen: note the implementation of etcp: you don't need a named type!
[13:42:14] <pjb> Just use the class object.
[13:43:07] <kakuhen> yeah this is good -- just now I found a solution involving ccl:ensure-class, but it is not portable enough
[13:43:11] <kakuhen> your method is way better; thanks
[13:44:38] <pjb> you can use c2mop:ensure-class
[13:44:58] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Ping timeout: 258 seconds)
[13:45:32] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[13:45:37] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[13:46:07] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:50:11] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:50:14] <lisp123_> pjb: thanks, reading through this now
[13:56:30] <kakuhen> pjb: is c2mop part of most major implementations' CLOS?
[13:56:40] <kakuhen> I decided to jump to definition and noticed it took me to l1-clos.lisp in ccl
[13:58:20] <kakuhen> wait nvm i just answered that question for myself
[14:00:38] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Remote host closed the connection)
[14:01:12] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[14:03:50] <kakuhen> i'm starting to grow to dislike defclass...
[14:04:09] <kakuhen> something that compiles fine literally everywhere else is fine but sbcl must spam nearly 1,000 lines at my repl with a dozen style warnings
[14:04:11] <kakuhen> too lazy to fix this agh
[14:05:40] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Ping timeout: 258 seconds)
[14:08:03] <pjb> kakuhen: c2mop is a portability layer for the MOP, allowing you to use it the same way on all implementations providing some level of MOP.
[14:08:13] <pjb> MOP is a non-standard extension of CLOS.
[14:08:28] <pjb> https://cliki.net/MOP
[14:08:46] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[14:10:04] <pjb> The CL (CLOS) standard doesn't impose much introspection/retrospection; just a minimum.  This allows to write batch compilers and perform a lot of compilation-time optimizations.  The MOP goes 100% Smalltalk: you can redefine everything.
[14:18:53] *** Quits: fourier_ (~fourier@c-5eea258d-74736162.cust.telenor.se) (Ping timeout: 265 seconds)
[14:19:52] *** Joins: fourier (~fourier@customer-89-255-226-149.stosn.net)
[14:25:11] *** Joins: random-nick (~random-ni@87.116.182.181)
[14:25:14] <kakuhen> that sounds pretty cool
[14:30:07] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:36:16] *** Quits: Inline (~Inline@aftr-37-201-241-161.unity-media.net) (Quit: Leaving)
[14:55:48] <lotuseater> so when someone says to me again this would have nothing to do with OO ...
[14:56:21] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:03:17] <lotuseater> edgar-rft: timeless for us from the moment on it's discovered :)
[15:03:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[15:03:59] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Quit: Leaving...)
[15:14:38] <pjb> It's completely natural that we have CLOS and the MOP, given that Smalltalk was implemented in lisp originally.
[15:15:12] <lotuseater> haha but again, tell this a blub "OOP software developer"
[15:23:03] *** Quits: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:23:29] *** Joins: frgo (~frgo@p200300deef181d002c171766ea2b531d.dip0.t-ipconnect.de)
[15:27:52] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[15:53:12] *** Joins: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[16:09:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[16:30:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:05:01] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:06:44] <contrapunctus> pjb: TIL :o source?
[17:24:47] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 255 seconds)
[17:28:01] <hayley> I doubt it. I heard that the first Smalltalk-72 VM was written in BASIC though.
[17:28:14] <hayley> And Mr Bobrow of AMOP was a Smalltalk hacker before.
[17:49:28] <Josh_2> 'ello
[17:52:19] <hayley> 'Allo guv'na.
[17:52:35] <Josh_2> :smirk:
[17:52:50] <hayley> 😏
[17:54:38] <Josh_2> hayley: are you no-defun?
[17:55:57] <hayley> Are you no-defun?
[17:56:45] <Josh_2> I'll just assume so then
[17:57:19] <hayley> I reckon pjb is no-defun-allowed.
[17:58:08] <hayley> As the nicks have no letters in common, I bet they thought they could get away with it.
[18:19:29] *** Joins: sm2n (~sm2n@user/sm2n)
[18:28:52] *** Joins: kpoeck (~kpoeck@87.140.193.0)
[18:45:54] *** Joins: nirnam (~nirnam@1.46.144.168)
[18:57:53] <jmercouris> Josh_2: hayley is no-defun-allowed and theemacsshibe
[18:58:55] <jmercouris> I will assume hayley is the actual name
[19:01:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:12:00] *** Joins: selwyn (~selwyn@user/selwyn)
[19:13:56] *** Joins: zacts (~zacts@user/zacts)
[19:20:43] <pjb> "The first version, termed Smalltalk-71, was created by Kay in a few mornings on a bet that a programming language based on the idea of message passing inspired by Simula could be implemented in "a page of code"."
[19:21:00] <pjb> http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html
[19:21:40] <pjb> (also, note the Burroughs 220 stuff!)
[19:21:49] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[19:23:05] <zacts> wow that's cool pjb
[19:23:21] <zacts> smalltalk syntax seems elegant for the OOP style to me
[19:24:57] <pjb> Smalltalk-72 was implemented in assembler: https://github.com/pablomarx/Smalltalk72
[19:27:58] <Josh_2> I like Smalltalk
[19:29:19] <pjb> Well, it's not clear from the linked EarlyHistoryST document if he wrote it in lisp or just was inspired by lisp implementation to write a smalltalk implementation in a similar way.
[19:29:42] <pjb> It's possible the Smalltalk lisp sources I've seen were later implementation in lisp of Smalltalk, on other systems.
[19:30:32] <pjb> You'd do that on any system that has a lisp.  You'd implement also LOGO that way…
[19:31:19] <pjb> Another version of the document: http://worrydream.com/EarlyHistoryOfSmalltalk/
[19:32:26] <pjb> It's funny that in 70s he worked a lot on the syntax, instead of concentrating on the fundamental mechanism such as message sending and receiving.
[19:32:48] <pjb> A lisper would just implement that; the syntax if sexp didn't suffice, would come later, as way of reader macros…
[19:33:18] <pjb> That's probably why it forked to OO instead of MO.
[19:33:31] <Josh_2> MO?
[19:35:46] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:39:50] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[19:40:01] *** Joins: lad (~lad@user/lad)
[19:41:15] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[19:41:34] <pjb> Message Oriented.
[19:42:07] <lotuseater> ahh, like with COP (concurrency oriented)
[19:43:12] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[19:44:48] <Josh_2> ah
[19:48:55] <pjb> Ah yes, Dan Ingalls implemented the first Smalltalk-71 design in BASIC on the NOVA.  Hey! Basic wasn't that useless after all :-)
[20:03:05] *** Joins: zacts (~zacts@user/zacts)
[20:07:13] <Josh_2> https://docs.google.com/spreadsheets/d/14MFvpFaJ49XIA8K1coFLvsnIkpEQBbkOZbtTYujvatA/edit#gid=191987842 interesting
[20:08:10] *** Quits: skyl4rk (~tlvb@user/tlvb) (Quit: WeeChat 3.1)
[20:08:22] *** Joins: skyl4rk (~tlvb@user/tlvb)
[20:14:58] *** Quits: kpoeck (~kpoeck@87.140.193.0) (Ping timeout: 246 seconds)
[20:27:26] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[20:27:31] <lisp123_> Is cadr same as second?
[20:37:36] <beach> Yes.
[20:37:56] <beach> In terms of semantics, but not in terms of message to the person reading your code.
[20:38:23] <beach> lisp123_: Use CADR if you have a structure of CONS cells.  Use SECOND if you have a list of elements.
[20:38:25] <lisp123_> second = pick the second element, cadr = take the cdr then the car?
[20:38:36] <beach> Yes.
[20:39:46] <lisp123_> thanks
[20:40:12] <mfiano> No
[20:40:13] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[20:40:17] <mfiano> Take the car of the cdr
[20:40:33] <mfiano> Oh i misread, nevermind
[20:40:47] <lisp123_> sorry, i made it confusing ;)
[20:40:53] <mfiano> Read "take the cdr of the car".
[20:41:02] <mfiano> I should wake up, carry on :)
[20:42:21] <lisp123_> beach: have you read SICP?
[20:42:31] <lisp123_> Chapter 4 in particular
[20:43:55] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[20:50:53] <beach> lisp123_: Yes, sometime in the mid 1980s I think.
[20:51:24] <beach> I have it here.
[20:51:32] <beach> Let me check what chapter 4 is about.
[20:52:33] <beach> Got it!  What did you want to say about it?
[20:52:58] <lisp123_> Is there a subset of CL for which it can be repeated?
[20:53:29] <lisp123_> I transforming the code now, but I wonder if its something that should be done at a more professional level
[20:53:49] <lisp123_> since it will allow paradigms of logic programming, nondeterministic computing etc, in a standard way
[20:53:57] <beach> It's a very naive approach, meant for pedagogical purposes.  You won't get any performance out of it.
[20:54:06] <beach> Other than that, sure I think it is possible.
[20:54:21] <beach> You may also look at Lisp in Small Pieces.
[20:55:24] <lisp123_> Yup its on my list, but I have to get through SICP first and then Design & Analysis of Computer Programming which you recommended and I finally got in the mail
[20:55:53] <beach> Great!
[20:55:55] <lisp123_> if one uses macros will the performance be comparable?
[20:56:31] <beach> You need to compile to native code and do all the traditional compiler optimizations (and then some) to get decent performance.
[20:57:13] <lisp123_> I see
[20:59:33] <beach> lisp123_: I am off to spend the rest of the day with my (admittedly small) family.  I hope you can get answers from others in case you have more questions.
[21:00:01] <lisp123_> beach: Enjoy :) Have a great day
[21:13:28] *** Joins: psycomic (~psycomic@2a01cb0588c5e400ab74f68b8d01aaf3.ipv6.abo.wanadoo.fr)
[21:14:28] *** Joins: kpoeck (~kpoeck@87.140.194.0)
[21:14:34] <nirnam> is clus still a thing? I'd like something like clhs but in a nicer format
[21:15:33] <nirnam> or something in the sense of linux/posix programmer manual that can pull it out with man page
[21:20:49] <lotuseater> nirnam: you could also download CLHS for reading it offline, also with emacs
[21:21:09] <lotuseater> but ok, having it in org or pdf wouldn't be so bad after all
[21:21:38] <lotuseater> i wonder if the html source is 15MB what size the pdf would be
[21:21:58] <jcowan> WSCL has the final draft ANS in it, which is not as handy as the CLHS, but is public domain
[21:22:30] <lotuseater> nice, i just learned about WSCL from this channel
[21:24:39] <nirnam> have anyone created gnu info version of hyper spec? I suppose could be as light weight and easier to access
[21:25:06] <lisp123_> if I understand correctly, the hyperspec cannot be modified
[21:25:11] <lisp123_> as its under copyright
[21:25:54] <nirnam> but if we distributed it, secretly *wink*
[21:25:58] <jcowan> Correct.
[21:26:20] <jcowan> A side effect of WSCL will be having a truly free hyperspec.
[21:26:21] *** Quits: random-nick (~random-ni@87.116.182.181) (Quit: quit)
[21:27:19] <lotuseater> to whom goes the copyright? Kent Pitman and others?
[21:27:33] <lisp123_> LispWorks
[21:27:48] <lotuseater> okay seems reasonable, "--2005"
[21:28:03] <nirnam> I just want cl document/manual that is complete and easy to access without an pdf read or browser
[21:28:16] <lotuseater> nirnam: so emacs :D
[21:28:23] <jcowan> Note that CLHS isn't just the ANS, it has a lot of stuff that kmp added, nottably the issues
[21:28:42] <lisp123_> I mean its mostly well accessible, the only benefit they get is a bit of branding - if its a large FAANG I wouldn't feel bad of 'freeing' it, but don't want to cause any issues to a small company trying to make aliving in lisp :D
[21:29:07] <lisp123_> nirnam: assuming you use Emacs, http://snowsyn.net/2020/01/01/local-clhs-access-in-emacs/
[21:29:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[21:29:40] <jcowan> Since anyone can copy the CLHS freely (just not modify it), LispWorks is obviously not making money on it.
[21:29:44] <nirnam> this here is a vim users, I don't want to say it becase I get weird look by other lisper
[21:30:01] <lisp123_> lol, the facts seemed to point to that direction :D
[21:30:14] <lisp123_> does vim have an in built browser? thats all you sort of need
[21:30:22] <jcowan> This here is an 'ex' user (not an ex-user) who drops into vi mode to check paren mattching by bouncing on the % key.
[21:30:26] <lisp123_> a text based browser should be enough
[21:30:44] <lotuseater> and if i now dump parts to pandoc for creating org files and modify them just for myself and educational purpose, LispWorks will hunt me down?
[21:31:11] <lotuseater> "You'll never get this CL qualification!"
[21:31:25] <lotuseater> or better certificate
[21:31:52] <nirnam> well, we just called out to man/info command to veiw document say in C or Perl, there's no reason to use vim itself to veiw the document since it just an editor
[21:32:32] <lotuseater> or use less or this one rust tool that improves less, since less is more
[21:32:45] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[21:33:02] <lisp123_> is there a tool to convert html to man/info?
[21:33:10] <lotuseater> pandoc
[21:33:16] <nirnam> ofcourse
[21:33:22] <lotuseater> https://pandoc.org/
[21:33:24] <lisp123_> then you can run it through it right?
[21:33:42] <lisp123_> lotuseater: as long as you don't distribute it, I don't think there's any issues, but I am not a lawyer
[21:33:47] <lotuseater> with included batteries for type safe parsing
[21:34:08] <lotuseater> neither am I
[21:35:44] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:38:11] <psycomic> How is the common lisp exception system implemented? Is it built into the lisp system or is it based on lower level primitives and implemented in lisp itself?
[21:38:34] <nirnam> say if I distribute a script to do exactly that, fetch clhs, parse it to info doc, save it to /usr/share/doc, can I get in trouble with this?
[21:39:03] <nirnam> technically speaking I didn't distribute modified version of the document, I distribute something that does it
[21:39:07] <lisp123_> Not really
[21:39:45] <lisp123_> as in not really, you shouldn't have issues
[21:40:18] <lotuseater> I'm sure LispWorks has an extra department for that, which then comes up with parentheses clubs.
[21:41:09] <lisp123_> On that topic, I bought a copy of the actual standard and was gonna share it publicly, but then ANSI stamped my name on every page lol
[21:41:23] <lotuseater> lol
[21:43:00] * lotuseater bumps out his lambda shield for the next situation
[21:43:17] <_death> psycomic: check out https://github.com/phoe/portable-condition-system/ there is also a book (which I've yet to read)
[21:44:55] <lotuseater> it's good cause it covers much of that stuff
[21:45:00] *** Quits: lad (~lad@user/lad) (Ping timeout: 265 seconds)
[21:46:38] <psycomic> _death: I'm actually reading it right now, but i don't understand all of it. I'll probably read the book
[21:49:35] <_death> psycomic: there are also papers related to the condition system on Pitman's site.. http://www.nhplace.com/kent/Papers/index.html
[21:49:59] <lotuseater> it would take me also to the next step writing serious stuff or application software for others
[21:50:16] <psycomic> _death: thank you! i was looking for this
[21:50:43] <lotuseater> maybe in August a project comes up, developing a special system for someone who looks for one since 2019
[21:56:49] *** Joins: dsk (~dsk@user/dsk)
[22:00:53] *** Joins: lad (~lad@user/lad)
[22:08:36] *** Joins: selwyn (~selwyn@user/selwyn)
[22:29:47] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:37:42] *** Quits: psycomic (~psycomic@2a01cb0588c5e400ab74f68b8d01aaf3.ipv6.abo.wanadoo.fr) (Quit: Client closed)
[22:43:01] *** Quits: kpoeck (~kpoeck@87.140.194.0) (Ping timeout: 246 seconds)
[22:53:46] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Remote host closed the connection)
[22:54:26] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[22:59:58] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Ping timeout: 272 seconds)
[23:07:40] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[23:07:49] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Client Quit)
[23:15:42] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[23:16:10] *** Parts: sm2n (~sm2n@user/sm2n) (Leaving)
[23:16:43] *** Joins: sm2n (~sm2n@user/sm2n)
[23:19:14] *** Joins: srhm (~ascii@user/srhm)
[23:20:48] *** Joins: tfeb (tfb@gateway/vpn/protonvpn/tfb)
[23:25:19] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[23:27:27] *** Joins: akoana (~ah@user/akoana)
[23:48:36] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:51:59] *** Quits: tfeb (tfb@gateway/vpn/protonvpn/tfb) (Remote host closed the connection)
[23:56:06] <raeda> There's LispWorks approved TeX files for the spec hosted on CMU's archive, but I don't know enough about TeX to get it to compile
