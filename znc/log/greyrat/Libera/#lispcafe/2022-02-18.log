[00:04:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:04:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:06:51] *** Joins: aeth (~aeth@user/aeth)
[00:16:11] *** Joins: notzmv (~zmv@user/notzmv)
[00:18:12] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:41:40] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[00:43:35] * selwyn wonders how to cite rk4
[00:46:53] <edgar-rft> is that a star wars bot?
[00:47:10] <GreaseMonkey> [07:26:06] <treflip> An individual enterpreneur on my local job site is seeking for an "NFT-programmer" with 1-3(!) years of experience in "NFT-programming". <-- "Ah yes, I program in NFT"
[00:48:18] <edgar-rft> Not For Tourists
[00:48:37] <GreaseMonkey> i would be tempted to take up that offer for $100/hr knowing damn well it'll probably be fruitless
[00:49:05] <hayley> pl: Yet I heard of someone producing new results for her first year.
[00:49:49] <hayley> Judging by the frequency of Ethereum hacks, you can't do too badly.
[00:55:54] <pl> hayley: you're not supposed to produce something really new till PhD 
[00:56:25] <pl> But university (IMO) should be self-directed 
[00:56:55] <sm2n> most PhDs suck too
[00:57:23] <sm2n> university is kind of a scam; it's a stupid point of comparison
[00:57:33] <aeth> no
[00:57:38] <aeth> there's just too many people there
[00:58:32] <hayley> hey hayley go on https://theanarchistlibrary.org/library/u-n-e-f-strasbourg-on-the-poverty-of-student-life
[00:58:34] -ixelp- On the Poverty of Student Life | The Anarchist Library
[00:58:35] <GreaseMonkey> i wonder if a university would ever publish a study on what is the optimal number of people at a university given n lecturers and stuff like that, and then i wonder if any university would do anything other than mostly ignore it
[00:58:57] <sm2n> aeth: yes, and?
[00:59:28] <sm2n> it is in the nature of systems to overextend when the objective function being optimized for in reality is not the desired one
[00:59:30] <aeth> it's not that university is a scam, it's that there's too many people there
[00:59:44] <sm2n> university is what it is in reality, and that is a scam
[01:00:12] <sm2n> you can argue for a hypothetical ideal nice university, but it's pointless
[01:03:32] <aeth> two separate issues here
[01:03:51] <aeth> (1) university produces mostly-useless research because there are too many grad students who need to publish-or-perish
[01:04:12] *** Quits: neominimum (sid537410@user/neominimum) (Ping timeout: 240 seconds)
[01:04:20] <aeth> (2) university is being sold as a good financial investment, which naturally means that when it becomes overpriced and too many people are doing it, it will no longer be a good financial investment
[01:04:36] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[01:04:53] <aeth> But actual college classes will teach you stuff you can't learn online or, at the very least, you will be unable to learn unline without the discipline of a schedule and graded tests even if the material is out there
[01:05:36] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[01:05:37] *** Joins: neominimum (sid537410@user/neominimum)
[01:06:27] <aeth> this is #lispcafe so it's going to bias towards comp sci and you probably can teach yourself comp sci entirely online because comp sci embraced the web early... but that pretty much only works for comp sci
[01:07:19] <aeth> e.g. Khan Academy is good math education, but it only goes through what a K-12 math education in the US might offer. It's not going to teach you college math. For that you need books, and you probably can't parse those books outside of the context of a university class.
[01:07:19] <sm2n> works for math, and even physics to some extent + many social sciences/humanities
[01:07:46] <sm2n> it's only hard for the more experimental stuff with expensive equipment and safety procedures etc
[01:07:55] <aeth> (You probably can read the chapters in the textbook not covered by the course... after having had the benefit of taking the course)
[01:08:13] <aeth> well
[01:08:21] <aeth> For math, it's hard but in theory you can just buy the textbooks and learn them
[01:08:33] <aeth> For physics, chemistry, or biology? Yeah, good luck setting up a lab
[01:09:10] <aeth> The problem with social science and humanities online is that if you do that, you're probably going to learn social science and humanities that aren't... embraced by academia
[01:09:26] <aeth> e.g. There are lots of economics material online for free. Probably > 50% of that is Austrian economics.
[01:09:36] <sm2n> You can get an undergrad physics degree without running an expensive experiment
[01:10:02] <sm2n> And, yeah, but that's a learning problem
[01:10:36] <aeth> depends on the field of physics
[01:10:50] <aeth> with astronomy, you could self-study to a fairly advanced level, but I think that's about it
[01:11:03] <White_Flame> it's expensive to get spherical cows of uniform density
[01:11:58] <sm2n> Nah, if you specialize in anything vaugely theoretical you won't need to, say particle physics
[01:12:17] <sm2n> Physics has a pretty big split in some respects between theorists and experiementalists
[01:12:24] <sm2n> to say nothing of computational physics
[01:16:55] <edgar-rft> computational physics is when you switch the computer off and on again :-)
[01:17:28] <White_Flame> no, that's metaphysical hope in it working correctly that time ;)
[01:21:31] <White_Flame> ah tehre it is: http://www.catb.org/~esr/jargon/html/koans.html#id3141171
[01:21:31] -ixelp- Some AI Koans
[01:23:06] <hayley> https://www.youtube.com/watch?v=4rdSfCR8UKU
[01:23:06] -ixelp- [YTP] Anthony Sullivan's Apple Pie - YouTube
[01:34:55] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[01:40:25] <gilberth> I wonder what would be the quickest way to figure out all places CCL blocks with some timeout.
[01:42:39] <gilberth> As I need to implement waiting on a timeout with blocking syscalls only because macos imposes a minimum timeout of 10s.
[01:44:14] <moon-child> whaaat
[01:44:16] <moon-child> why?
[01:44:32] <gilberth> And it is annoying when you use SLIME e.g. as when you enter something it needs 10s for the CCL process to pick that up.
[01:45:51] <gilberth> moon-child: My guess: Battery life. What happens is that as soon as you process is a GUI application, after a little time every timeout parameter to a syscall like poll(2) or even Mach's semaphore_timed_wait is raised to at least 10s.
[01:46:19] <moon-child> as I recall, I made a tui music player which naively poll()d with a timeout of 100ms, and it worked fine
[01:46:56] <moon-child> maybe this has changed in new versions?
[01:46:56] <gilberth> If you have a Mac and CCL handy. Try (require :cocoa) (loop (time (sleep 1)))
[01:47:34] <moon-child> I have only an arm mac
[01:47:43] <gilberth> moon-child: Yes, it changed in macos 10.9 IIRC is fine. It needs longer with 10.10 to kick in than with 10.14.
[01:48:19] <gilberth> moon-child: Would be interesting to see if that happens with ARM, too. This is perhaps regarded as a feature of macos.
[01:48:25] <moon-child> wait, so 10.9 did not raise the timeout, 10.10 did, and 10.14 did not again?
[01:49:02] <gilberth> 10.14 does too and it's quicker for a process to enter that "macos raises timeout"-state.
[01:49:21] *** Joins: dre (~dre@2001:8003:c932:c301:2079:4593:1556:be9c)
[01:50:01] <gilberth> And that is not an CCL issue. I have a plain Objective-C test application crafted with Xcode, which does that too.
[01:50:44] <gilberth> Somehow ^C and ^\ are delayed, too.
[01:52:06] <gilberth> Blocking syscalls, that is with no timeout, are not affected. sleep(2) is affected too, so you can't even poll.
[01:53:05] <gilberth> Even if you arrange for a timer event with the Cocoa main event loop, it's timeout is raised too.
[01:53:38] <gilberth> And long as your application does not morph into a GUI application, everything is fine.
[01:53:58] *** Quits: cosimone (~user@93-47-231-171.ip115.fastwebnet.it) (Quit: stay out of trouble you crazy kids, and don't hop on the NICE BOAT)
[01:57:24] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[01:57:46] <gilberth> I should have known better and never attempted to address Cocoa from my Lisp process and instead implement some ad-hoc RPC to some Cocoa display server.
[01:58:10] <moon-child> ok, I mananged to get ccl running, but can not (require cocoa).  Care to share your objc reproduction?
[01:59:15] <gilberth> Strange. Then your ccl is somehow not finding itself. Ok. I'll need to dig that up. Could take a few minutes.
[02:01:32] * gilberth struggles with xcode.
[02:01:52] <moon-child> I don't think I ever used xcode
[02:02:00] <moon-child> just directly invoked the compiler
[02:02:48] <gilberth> I specifically wanted to use xcode here, so that nobody could argue that I would do something unorthodox.
[02:05:16] <hayley> https://rsk0315.github.io/playground/passwordle.html
[02:09:00] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:09:13] <moon-child> ok, I bootstrapped ccl, and now I seem to be able to load cocoa
[02:09:20] <dave0> maw
[02:10:14] <moon-child> gilberth: my sleeps seem to be taking 1 second in ccl, with cocoa
[02:12:28] <gilberth> moon-child: Does CCL have a GUI window? And give it some time.
[02:12:43] <moon-child> yes, it had a gui window
[02:12:57] <moon-child> I tried running both from the gui window and from the existing terminal repl; same result in both cases
[02:15:06] <moon-child> hmm, well, now it has frozen completely!
[02:15:55] <gilberth> It was sitting on my web server all the time. Here is a binary <http://clim.rocks/gilbert/sleepy-sleep.app.tar.gz> it just opens a window and prints on stdout. The aux thread is here: <http://clim.rocks/gilbert/sleepy-sleep.main.m.txt> For 10.14 it takes a minute to for the timeout raised to 10s. I would need to find sources that actually build :-(
[02:17:21] <gilberth> Perhaps I start from scratch. /me opens the beloved, not, xcode.
[02:18:36] <moon-child> it prints: usleep(100000) took 0.103568s
[02:18:46] <moon-child> (which seems reasonable)
[02:18:58] <gilberth> How often has it said that?
[02:19:43] <moon-child> seems to be every 10 seconds
[02:19:53] <moon-child> which matches up with the source you posted
[02:20:26] <gilberth> Well, for me it takes a minute for the timeout to be raised. And with every version from 10.10 up until Big Sur.
[02:22:17] <moon-child> this is on version 12.1
[02:22:47] <gilberth> I doubt they removed that feature.
[02:26:30] <gilberth> Ok. I'll see if I could install 12.1
[02:28:12] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[02:28:43] <gilberth> It "helps" when another application has focus.
[02:30:29] <gilberth> *sigh* I have not enough disk space for 12.1 :-(
[02:30:58] <moon-child> :/
[02:31:32] <gilberth> moon-child: What do you mean by "forzen completely". Not responding to ^C? As the latter is what happens to me at times.
[02:31:40] <moon-child> yes
[02:35:35] <gilberth> moon-child: I'll find some disk space. It's only that I want to keep every macOS version since 10.7, which is the oldest I have.
[02:35:50] <hayley> Find more disks?
[02:37:00] <gilberth> hayley: I want to have that on the built-in SSD for speed. And I don't have a server with plenty of disk space here, as I would have at my house. The external USB drives I have are unbearable slow.
[02:38:08] <gilberth> Ah, on macos 10.14 timeout has beeen raised to 20s. That's new.
[02:38:32] <gilberth> And that's a desktop. Why save battery life there?
[02:49:46] <hayley> https://www.youtube.com/watch?v=qW0q2SJgebI
[02:49:47] -ixelp- Stupid Child Doesn't Understand The Presidents - YouTube
[02:51:40] <moon-child> indeed, who cares for power.  Let's mine bitcoin!
[02:52:17] <hayley> moon-child: https://rsk0315.github.io/playground/passwordle.html
[02:53:12] <moon-child> now I'm wondering if miners can be tricked into cracking passwords for you
[02:53:17] <moon-child> need to make an scryptcoin I guess
[02:53:48] <hayley> Unlikely; no one uses double-SHA256 for hashes, and Scrypt coins use parameters that are too low IIRC
[02:54:00] <moon-child> oh, there really are scrypt coins?
[02:54:02] <moon-child> lol
[02:54:08] <hayley> Yes.
[02:54:11] <hayley> e.g. Litecoin
[02:54:33] <hayley> However, LTC uses N=1024, r=1, p=1
[02:54:43] <moon-child> I mean, it's not surprising--password hashes are partly intended to be hard on gpus, which is something the people who like cryptocurrencies for pure reasons would value--but still
[02:55:10] <hayley> The salt is fixed to the input text too, so you also lose if they use salts correctly.
[02:55:34] <hayley> I thought it was meant to be more ASIC/FPGA-hard, as getting memory is damn hard.
[02:56:56] <moon-child> well, gpus too
[02:57:14] <hayley> Sure.
[02:57:15] <moon-child> they have a decent amount of memory, but will still get majorly bottlenecked by it, vs the amount of compute they have
[03:02:26] <hayley> https://www.youtube.com/watch?v=KLGfeiMdi1Q
[03:02:26] -ixelp- Transforming a 90's Hot Wheels PC into a Modern Gaming Beast - YouTube
[03:02:30] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:24b4:3a5b:fddb:7ca9) (Read error: Connection reset by peer)
[03:10:39] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:15:20] <gilberth> Hmm. Has something changed with .dmg files? I have some here that are not recognized.
[03:16:39] <hayley> ❌ monads.online ✔️ linear-types.online
[03:22:22] <dave0> gilberth: sometimes i can extract .dmg files with 7zip
[03:22:37] <GreaseMonkey> later .dmg files use a variant of LZFSE which isn't documented
[03:23:09] <GreaseMonkey> the compression algorithms are the same, but they shove a bunch of blocks one after another
[03:24:02] <GreaseMonkey> and i have yet to work out how to successfully extract the Mac version of Devotion because i wanted to see if i could transplant OpenGL shaders into the Windows version because the shaders in that are screwed up when one attempts to play the game in Wine
[03:24:15] <GreaseMonkey> but that's how i know about that limitation
[03:24:20] <GreaseMonkey> erm, about that issue
[03:24:25] <gilberth> Yeah, but has something changed with .dmg files? For I still use 10.10 and 10.14. One .dmg is called "Install macOS" which is a very useful name and I wanted to have a peek what version of macOS that installer is for.
[03:25:07] <GreaseMonkey> yes, weird undocumented application of LZFSE
[03:25:14] <GreaseMonkey> they switched compression algorithms
[03:25:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[03:25:41] <GreaseMonkey> wait... 10.14, how old is that?
[03:25:52] <moon-child> isn't that pretty recent?
[03:25:57] <moon-child> just a couple years old
[03:26:04] <gilberth> The other is Steam. It quit working on my laptop and I wanted to re-install. The Steam.dmg I can download from Steam can't be opened, too.
[03:26:08] <GreaseMonkey> wait, it *should* work on 10.14
[03:27:06] <gilberth> On neither machine. [I have a laptop with 10.10 and a desktop with 10.14, the latest with 32-bit support.]
[03:27:17] <gilberth> So, that's just strange, then.
[03:27:32] <GreaseMonkey> wait what the hell they also added LZMA in 10.15
[03:27:53] <gilberth> Oh!
[03:28:27] <GreaseMonkey> largely because it's smaller than and less slow than bzip2
[03:28:34] <GreaseMonkey> hah, remember bzip2
[03:28:51] <GreaseMonkey> works fine on source code, but for other stuff gzip tends to fare better
[03:28:56] <GreaseMonkey> well, text in general
[03:30:05] <gilberth> Can't things just work? I am not an sysadmin, I am a mere hacker. I really don't like this poking around.
[03:30:31] <GreaseMonkey> from my digging, DropDMG's free trial should work
[03:30:49] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[03:31:20] <gilberth> Well, I could try to open with a later macOS. I have all versions up to Big Sur in virtual machines and am about to install 12.1 [in a VM].
[03:31:49] <GreaseMonkey> big sur should work
[03:32:39] <gilberth> Yeah, and it is called "big" for a reason. It's funny to see how a bare macOS install grew in size over time.
[03:34:57] <gilberth> macos 10.7 is 6GB, while Big Sur is 27GB. Has is really 4.5 times as much features?
[03:35:13] <gilberth> * many ;I suppose
[03:35:44] <hayley> This university has its own directions app, because apparently navigating the campus is that bad.
[03:36:29] <GreaseMonkey> my experience with the university i went with is you can usually work out how to get *out* of a building fairly easily
[03:36:38] <GreaseMonkey> but in some cases it can be tricky to navigate
[03:36:51] <GreaseMonkey> also, that app better be in addition to a map
[03:37:06] <gilberth> Once upon a time, you could navigate without any app. There was the invention of posting signs telling you the general direction to places. :-)
[03:37:31] * hayley sees a phone ad advertising a CPU with 4nm lithography. Now how do they measure that?
[03:37:46] *** Joins: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se)
[03:38:21] <hayley> When I went to campus in 2020, I'd look at the map they'd have somewhere on the floor. Then I could gaze at how convoluted all the corridors were at once.
[03:38:22] <gilberth> Anyhow, in general I am bad at navigation. I wonder how I could find my way without an navigation device with my car.
[03:39:13] <hayley> https://www.youtube.com/watch?v=UUxheK7soS4
[03:39:14] -ixelp- Eaten By The Monster Of Love - YouTube
[03:39:48] <gilberth> But then you get lazy and don't memorize the route anymore.
[03:41:37] * gilberth wants disks, plenty of disks, spinning even.
[03:42:21] <hayley> Best I can do is tape.
[03:42:27] <moon-child> what could you possibly want with spinning rust?
[03:42:55] <gilberth> You believe in sand?
[03:43:02] <hayley> https://www.youtube.com/watch?v=8TEAMHgrxi0
[03:43:03] -ixelp- JJ Burnel - Crabs - YouTube
[03:43:32] <kakuhen> spinning rust is affordable and it just works
[03:43:48] <gilberth> moon-child: RAID arrays make curious sounds when accessed, I like that :-)
[03:43:59] <moon-child> mirrors > raid
[03:44:06] <kakuhen> I can buy 4 tb of spinning rust for $50 but 4 tb of sand costs at least $350, so the choice is clear for me
[03:44:33] <kakuhen> and I'm still yet to own a failed drive
[03:44:46] <gilberth> kakuhen: Yes, and some years ago the ratio was worse.
[03:44:52] <kakuhen> in any case i do backup everything because modern technology is fickle
[03:45:20] * hayley only got 2tb for US$57
[03:45:31] <hayley> Or is it tera-bits? I got 2TB
[03:45:33] *** Quits: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[03:45:49] <kakuhen> i backup my entire laptop ssd weekly because any day i can wake up to a dead laptop due to some tiny chip malfunctioning
[03:46:24] <moon-child> use zfs, and live care free
[03:46:48] <kakuhen> i use zfs but zfs isnt a substitute for a backup
[03:46:59] <kakuhen> you still want redundancy for your zpool
[03:47:02] <gilberth> I have never had a falled disk, while one SSD failed for me. And I had plenty of disks, my first was a luxury 40MB disk. And from like 400 5 1/4" floppy disks only one single sector was ever bad.
[03:47:12] <moon-child> zfs + mirroring + one offsite backup and I'm happy
[03:47:25] <moon-child> gilberth: the plural of anecdote is not data
[03:47:28] <kakuhen> my ideal set up for a zpool is one physical vdev together with two mirror vdevs and a backup vdev
[03:47:50] <kakuhen> i forget the actual name of the backup vdev but basically its written to temporarily when one vdev goes down
[03:47:51] <gilberth> moon-child: Sure. But I am still fine with disks.
[03:48:25] <gilberth> And, yes, these days I would perhaps just mirror, as disks got way cheaper. idk
[03:49:23] <gilberth> But then, I also keep multiple backups. On and off-site.
[03:49:54] <gilberth> As RAID /= backup.
[03:51:16] <kakuhen> i dont have off-site backups but maybe one day i will
[03:51:27] <kakuhen> there's a minimum level of risk i am willing to accept
[03:52:32] <kakuhen> one thing that stops me from getting a UPS is precisely fire hazards, but if I have an extinguisher (capable of putting out chemical fires) then i'll be ok with having one
[03:52:39] <gilberth> Well, the nice thing when you own a company is that you could have a file server there with no questions asked.
[03:52:40] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[03:52:45] <pjb> Nowadays, one problem is that making backup takes a to of time. 
[03:52:54] <kakuhen> too bad i still live with parents and they'll think i am mentally ill if i decide to have a fire extinguisher in the house at all times
[03:52:56] <pjb> So RAID…
[03:53:28] <moon-child> incremental backup should not be that bad...
[03:53:29] <kakuhen> but once i live alone i'll keep one around as a way to buy time for firefighters, in case of a fire
[03:53:56] <pjb> incremental take a lot of memory, and a lot o time… Try a rsync on your whole disk…
[03:54:08] <moon-child> kakuhen: your parents do not allow you to have a fire extinguisher?  wow...
[03:54:12] <moon-child> pjb: zfs send
[03:54:53] <pjb> Well I tried sophisticated file systems last century, and it was less than successfull.  Even today, I don't hear anything good about zfs.
[03:54:58] <gilberth> moon-child: This is what I do. A cronjob does the work for me and evacuates data off-site. My local machines backup with Time Machine over DSL to my Linux server at my house. It's unbearable slow, but I don't need to hold hands.
[03:55:19] <kakuhen> try btrfs: it sounds like "better fs" so it must be better
[03:55:23] <moon-child> I have had nothing but good experiences with zfs
[03:55:26] <moon-child> kakuhen pls
[03:55:40] <GreaseMonkey> i pronounce it "butterface"
[03:56:01] <kakuhen> I like FFS, it's very fast...it says so in the name
[03:56:11] <GreaseMonkey> oh FFS
[03:57:04] <kakuhen> my favorite cycle in FreeBSD is when people actively choose UFS/FFS over ZFS then quickly get screwed by SU+J errors
[03:57:21] <kakuhen> ffs: "we can corrupt your files very fast :)"
[03:58:57] <kakuhen> anyway there are annoying things about ZFS, but I also agree that I've only had good experiences with it
[03:59:18] <kakuhen> my worst experience with ZFS is finding out that ARC does not strictly respect limits you set to it
[03:59:40] <kakuhen> i.e. if you set zfs.arc_max to 4 GB, there are cases where ARC will allocate over 4 GB of memory
[04:00:21] <kakuhen> but that shouldn't be an issue if your OS has non-retarded allocation functions (looking at you, OS X)
[04:00:34] <kakuhen> as long as zfs is able to respond to memory pressure then it can and will give up memory
[04:01:02] <kakuhen> unfortunately the OS X kernel is stuck in 2003 and needs custom alloc functions in the zfs kext to achieve this... but on basically any modern operating system the thing with ARC is a non-issue
[04:04:19] <gilberth> BTW, a RAID also gives you more bandwidth compared to a mere mirror.
[04:07:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:24:38] <hayley> https://disqordia.space/objects/5309d0e2-2ac3-4683-90c3-0f63ac2c7f25
[04:24:38] -ixelp- ☽ D̷i̵s̴q̴ordi̴a ☾
[04:24:51] <hayley> "I got banned from a gmod server once for “terrorism outside of designated time”"
[04:25:58] <hayley> Hm, maybe I should see about sending my resume to computer shops again. Though I am only """qualified""" in CS and probably not in selling overpriced goods.
[04:26:34] <hayley> gilberth: Speaking of, did you see yesterday that a write barrier is only some 0.8% slower than no barrier these days?
[04:26:42] <selwyn> i wonder what working in a computer shop is like
[04:28:04] <gilberth> hayley: Does SBCL use any write barriers?
[04:28:46] <hayley> gilberth: Yes, for generational GC. New versions on x86-64 and PowerPC insert writes to a card map, whereas everything else uses memory protection.
[04:31:29] <hayley> A small pity that Immix does marking (of most pages) and copying (of some pages) simultaneously, else it would be simple to basically have concurrent mark-sweep with an optional stop-the-world compact step. If we had that, I'd need a more complicated write barrier still.
[04:32:01] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:34:25] <hayley> I think the only concurrent GC MMTk has is the G1 port, though. So no one other than me will be happy with the change.
[04:34:43] <selwyn> https://www.fwi.co.uk/property/property/property-for-sale-pebble-island/
[04:34:44] -ixelp- Island/Farm/Property for Sale - Property
[04:38:29] <hayley> neominimum: I should mention, w.r.t "do parallel GCs use the same heap, or separate regions?" some do partition on more things, e.g. Doligez and Leroy made a GC where each thread gets its own private space, as well as a global space. There was also a paper on "provably space efficient parallel functional programming" or something, which had a similar effect (because all programs were expressed in fork-join and they could statically guarantee
[04:38:29] <hayley> that some cross-thread interactions never happen).
[04:39:17] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[04:39:26] <hayley> You can have separate regions in the same heap, still. e.g. most copying GCs, including that in SBCL, use "blocks" or "pages" of memory. It's probably more efficient to have threads process pages at a time, rather than individual objects.
[04:41:03] <hayley> And as the Train and G1 show, you can also partition a heap dynamically, where you know that you can operate on separate partitions of the heap, without affecting the rest.
[04:45:39] <hayley> gilberth: Also, have you heard of ulterior reference counting? You use copying GC for the nursery, and deferred RC for tenured objects.
[04:46:30] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[04:59:01] <hayley> The idea at least is interesting to me, since tracing seems to prefer it when most data is dead, but the mortality rate for tenured space is low.
[05:07:06] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[05:07:24] *** Joins: eugercek (~user@user/eugercek)
[05:07:37] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[05:30:15] <moon-child> cycles?
[05:30:17] *** Quits: dre (~dre@2001:8003:c932:c301:2079:4593:1556:be9c) (Quit: Leaving)
[05:33:08] <hayley> Either backup tracing or using one of those local tracing things like trial deletion.
[05:33:27] <hayley> Or I can cheese it and say that cycles are a programmer error. :)
[05:34:31] <moon-child> ah, I see you are a 'swifty'
[05:35:05] <hayley> If I was Swift, I'd be spending 30% of execution time doing immediate RC.
[05:36:01] <kakuhen> bring back the objective-c garbage collector
[05:36:06] <moon-child> I thought swift tries to statically optimize
[05:36:33] <hayley> I think it can statically stack allocate, but that's it?
[05:36:51] <kakuhen> swift and objective c try and miserably fail at inserting retain/release into your code, especially when you iterate and inside of the loop you allocate NSObjects
[05:37:11] <kakuhen> depending on how the autorelease pool is set up, memory usage explodes or it doesnt
[05:37:25] <moon-child> I mean, stuff like  f(x) { return x.y },  f(foo) should not touch foo's reference count
[05:37:26] <hayley> https://forums.swift.org/t/improving-reference-counting-performance/31185
[05:37:27] -ixelp- Improving reference counting performance - Discussion - Swift Forums
[05:37:36] <hayley> "As shown in the figure, performing RC operations takes on average 42% of the execution time in [micro-benchmarks]" lolololol
[05:37:48] <moon-child> jeesh that's bad
[05:38:08] <kakuhen> moon-child: yeah i think that counts as a weak reference so the count doesnt change
[05:38:18] <gilberth> Hmm, this weird macos behavior somehow not only depends on the process, but also on the load average. When the machine is otherwise busy, it does not kick in. Hard to tell.
[05:40:16] <moon-child> huh
[05:40:57] <hayley> http://user.it.uu.se/~kostis/Seminars/PLI/Papers/levanoni.pdf claims that they get by with 2 bit RC. /me goes to read on coelascing RC
[05:41:30] <hayley> I guess I could just scan a basic block, count up all the RC increments and decrements, and shift them to the end?
[05:42:33] <hayley> I also want to check if using a "zero count table" is still in fashion for deferred RC. If we had a table of tiny refcounts, we could probably find RC=0 objects with SIMD or SWAR techniques.
[05:44:06] <hayley> "add o to the thread local ZCT" Dammit.
[05:44:24] <gilberth> Anyhow, doesn't help. I'll modify my CCL to never wait with a timeout. Instead I fork(2) another processor acting as a timeout server. I'll talk over a pipe to it telling it my timeouts and go into a blocking syscall w/o timeout. Another helper thread read from that pipe to the helper process, gets a byte back, looks at the timeouts threads have set and sends them a signal.
[05:45:02] <moon-child> that's kinda terrible
[05:45:06] <moon-child> what if just not macos
[05:45:08] <moon-child> instead
[05:45:10] <gilberth> The signal handler does nothing but will make the blocking syscall return with EINTR or KERN_ABORTED. At that time I could read the clock and figure out, if I timed out.
[05:46:28] <hayley> CLOSOS when?
[05:47:05] <gilberth> hayley: You volunteer to write the GPU device drivers?
[05:47:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:47:43] <moon-child> I could maybe complain about that; but you render everything in software anyway, no?
[05:47:58] <gilberth> Me? Nope.
[05:48:12] <moon-child> you use opengl?
[05:48:18] <hayley> gilberth: You volunteer to buy a GPU?
[05:48:27] <moon-child> ha!
[05:49:26] <hayley> Or we could use your server idea, and send drawing commands to a *nix machine. You only would have to write one of those, as opposed to every library kludging around macOS.
[05:49:32] <gilberth> moon-child: I use whatever is native to the platform. That's Cocoa with macos and Cairo with Linux. And even when I would be bored and write an OpenGL-based backend, that still isn't SW rendering.
[05:49:51] <moon-child> cocoa is a software renderer, I am pretty sure
[05:50:20] <gilberth> hayley: I have a spare NVIDIA Quadro, would that do?
[05:50:57] <moon-child> hayley: I was thinking to use a vm.  Appreciable amount of work, but pass through pci and you get the full linux graphics stack
[05:51:06] <gilberth> moon-child: I don't care. I address what is native. I am not too concerned about rendering. I don't want to fix rendering, I want to fix a GUI library with support for native gadgets.
[05:51:20] <hayley> Boo, I need to be registered to join #lispcafe.
[05:51:27] <hayley> <gilberths-brother> hey its me ur brother
[05:51:39] <moon-child> then, why do you complain about missing gpu drivers?
[05:52:24] <hayley> CLIM 3 should be 3D. (clim:make-cuboid* x1 y1 z1 x2 y2 z2)
[05:52:32] <gilberth> moon-child: I guess Cocoa at least uses the GPU for blittering and blending? For instance.
[05:53:09] <gilberth> And I won't be surprised, if it won't at least blast out triangles to the GPU.
[05:54:03] <moon-child> I would be shocked if it did blending on the gpu.  Fastuidraw figured out how to do that, using the depth buffer, and it was somewhat novel
[05:54:09] <moon-child> that was 2016-2017 or so
[05:54:13] <moon-child> or, hmm, was that clipping
[05:54:25] <gilberth> Anyhow, any Lisp OS should go headless first. I said 30 years ago. I say this today.
[05:54:33] <moon-child> either way, you would not be using cocoa on closos.  Can you not use the closos native (software) renderer without a gpu?
[05:55:55] <gilberth> moon-child: My focus is just different. You are young, still have plenty of time and dream of an all Lisp solution. I don't.
[05:57:54] <gilberth> And even when I would aim for an all Lisp solution, I won't waste my time writing device drivers or rasterizers. There are plenty of people doing that already.
[05:58:36] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[05:58:53] <moon-child>  I only write a rasterizer because I figured out a fun way to do it that no one else had done so far
[05:59:09] <moon-child> ¯\_(ツ)_/¯
[05:59:42] <gilberth> That's fine, so you enjoy it. I am not particular interested in doing that, I want to do different things.
[06:00:17] <humasect> hi gilberth how is/are your project(s) going ?
[06:00:37] <gilberth> Read the log. I have fun with macos.
[06:00:55] <gilberth> And an unbearable slow disk.
[06:01:45] <humasect> alright my apologies
[06:01:56] <hayley> .oO(It's 168 hours to get gold rank on this server? I'm wasting my life with this game. But I have wasted more time at university, and I pay for that.)
[06:03:04] <gilberth> No need to apologize. It's me who has to apologize for I am in bad mood as I waste my time with something which shouldn't be needed.
[06:04:26] <humasect> game ?
[06:04:53] <gilberth> If it is regarded as a game, then Apple has a very strange humor.
[06:05:24] <humasect> try being poor sitting in line food banks, bed bugs, roomates gone psychotic, what is really missing in life ? empty stomach?
[06:05:25] <gilberth> But perhaps, yes, one would be better of regarding macos as a game of sorts.
[06:05:52] <humasect> 'game' comes to mind when i think of 'time waste' but i am a bit traumatized growing up loving games and being useless =)
[06:06:16] <humasect> computers are fun games (err the OS)
[06:06:42] <gilberth> I haven't played games for a while. Quake used to be a great time waster as I was a student though.
[06:06:46] <humasect> well today it is just 'does it run on the web' else before it was quite the adventure
[06:07:37] <humasect> quake is great... in 20s.. today i've got a couple (new 2ds xl) but mostly for posterity and nostalgia, can't spend more than a few minutes on a game. or movie. producer or consumer =) 
[06:08:50] <humasect> cancelling netflix, no more download roms. not that i've a family to feed but at least can put the time toward community/society if anything else 
[06:08:56] <gilberth> Quake made me dig 3D graphics. A friend and me wanted to write a 3d engine just as fast. On that slow machines, we had. These days he is a university professor in London and teaches computer graphics.
[06:09:27] <humasect> hehe i purchased quake when i owned a 486 *without* math co-pro , worth it
[06:09:29] <humasect> 320240 
[06:09:32] <humasect> 320x240
[06:09:55] <gilberth> He cloned Quake's BSP approach. I, more being an inventor, came up with sth portal based.
[06:10:00] <moon-child> gilberth, I thought you were playing s.t.a.l.k.e.r. recently?
[06:10:01] <humasect> lots of quake arena, last of my competitive games. prefer co-operative 
[06:10:20] <hayley> https://www.youtube.com/watch?v=gf5axLP7dVY
[06:10:20] -ixelp- What NOT to do when playing jazz - YouTube
[06:10:27] <gilberth> humansect: 640x480, 8-bit grayscale. PPro 200 with Linux and X11.
[06:10:29] <humasect> gilberth yeh i've worked with all the bsp editors, also made a couple of my own. also made a portal engine/editor before Portal :The Game
[06:11:12] <gilberth> I am not talking about the Portal game, but about portal-based 3d rendering.
[06:11:15] <humasect> hayley: movie recommend: Swing Girls (off-step)
[06:11:21] <humasect> gilberth: yep. 
[06:11:39] <humasect> me as well. before it got "mainstream" as we are talking about that kind of thing 
[06:12:27] <gilberth> The nice thing is, you can do that w/o visibility pre-computation and thus could also modify the world while the game is running.
[06:12:32] <humasect> grayscale? isnt that more processing than color even palett
[06:12:58] <humasect> BSP is wonderful, i got quickly addicted to CSG through it 
[06:13:13] <humasect> and carmack's code is how i learned most things 
[06:13:49] <humasect> convex poly's in any dimension leads to many intuitive tools, 
[06:13:56] <gilberth> huamsect: My screen was gray scale. And no: I still used a 8-bit palette. The pixel upscaling though took some time as the screen also was fixed frequency and it's native resolution was a bit higher than the 640x480 :-)
[06:14:42] <humasect> CSG ops is like geometry programming =) 
[06:14:53] <humasect> povray 
[06:16:12] <gilberth> CSG is surprisingly easy to do. We made our levels with a kind of scripting/macro language. No graphical editor. Later I hacked a quick and dirty Quake BSP editor using Lisp and X11.
[06:16:33] <humasect> nice =) it is very pleasant for the mind also 
[06:16:56] <humasect> and haskell came along and taught me actual math; still recovering =P 
[06:17:13] <gilberth> So you had e.g. a stair-case function. You specified the winding the step size and the height. Done.
[06:17:28] <humasect> yeah =) but 3ds max did that in the 9s 
[06:17:29] <humasect> 90s 
[06:17:38] <humasect> 'modifiers' 
[06:17:55] <gilberth> Well, we needed some quick tool to have some 3d-scenes to test our stuff with.
[06:17:56] <humasect> in the haskell/csg engine i called them procedurals or mutators =) 
[06:18:25] <humasect> afaik povray has some similar scripting ability, loops for stairs et c
[06:19:11] <gilberth> Later we wanted to go online and distributed. We hacked a browser plugin to enter 3d worlds, loaded on demand with those analogue modems of that time, and there could be "hyperlinks" from one room to another hosted by another site.
[06:19:28] <humasect> brl-cad ? or also the language 'AL" (based on scheme) 
[06:20:50] <moon-child> huh that sounds fun
[06:21:36] <humasect> i always have this idea that instead of 'web browser' a kind of 3d engine could be made to "browse" the web but like a game with architecture and levels and progress and such
[06:21:48] <humasect> great source of entropy amirite =) 
[06:22:09] <moon-child> I played at one point with some ideas for a game engine that could do networking (incl rollback) with no effort, or very little
[06:22:12] <humasect> and some kind of structure could be pursued toward geometric [r]ends
[06:22:30] <humasect> quakeworld moon-child?
[06:22:34] <moon-child> eventually I realised I was modelling time wrong, and I don't expect I'll ever pick it back up to fix it, but there are interesting ideas there
[06:22:42] <moon-child> humasect: I do not know anything about quake
[06:23:14] <humasect> carmack made evolution after peer-to-peer dialup stiuff sorry my terminology runs out there 
[06:23:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[06:23:43] <gilberth> humansect: That was our idea. But we stopped working on it as we were way too early. This was like in '98.
[06:24:30] <gilberth> Challenge was the 56kbps modems.
[06:24:32] <humasect> gilberth: nice =) this was about same time i was doing similar experiments/hopes
[06:24:38] <moon-child> humasect: ah, I see.  I don't like p2p for games
[06:25:08] <humasect> afaik quakeworld was the first or firstish client-predicting games during the modem times (28.8++)
[06:25:26] <humasect> moon-child: p2p? pay to play? or player vs player? =o 
[06:25:35] <moon-child> peer-to-peer
[06:25:51] <moon-child> yes lockstep is really what you want to avoid.  Unless you can assume shared hardware (arcade cabinets, ..)
[06:26:01] <gilberth> Well, we didn't intend to do games per se and not p2p. The idea was that people or perhaps companies could host a 3d presence.
[06:26:12] <humasect> turn based =P 
[06:26:22] <humasect> presence
[06:26:34] <moon-child> gilberth: hmm, why would they want that?
[06:26:49] <gilberth> Yes. Presenting themself, being there. Just like companies have web sites.
[06:27:00] <moon-child> humasect: good point.  A lot of the tricky state management problems go away when time is not real time
[06:27:24] <gilberth> moon-child: Because it would be the "next big thing". Consider that a decade later Second Life was a thing.
[06:27:44] <moon-child> mmm sure
[06:27:50] <moon-child> (and today it is vr...)
[06:27:57] <humasect> when is time not real time 
[06:28:00] <humasect> when ..
[06:28:20] <gilberth> As I said, we were too early. Way too early.
[06:28:27] <humasect> FP helps if at least to visualize the "game loop" as formula/function
[06:28:35] <humasect> oh ? but VR is here 
[06:28:41] <humasect> threee deee
[06:28:59] <humasect> time to resucc
[06:29:00] <moon-child> gilberth: people were still going places with vr even before then.  jaron lanier et al.  But yeah not exactly mainstream until recently
[06:29:05] <humasect> resuscitate *
[06:29:15] <moon-child> humasect: yes, but go one step further.  The game loop is an artefact
[06:29:20] <moon-child> it's part of your sampling methodology
[06:29:23] <moon-child> but the game state is continuous
[06:29:24] <humasect> itch.io is a game loop
[06:29:34] <humasect> buy game, try game, put game [away], get game..
[06:29:52] <gilberth> moon-child: Point is. I figured that we would have had no chance in '98 to grow a business out of it.
[06:29:55] <humasect> shopping for game is like shopping for shoes or glasses 
[06:30:21] <gilberth> Which is what we aimed for.
[06:30:25] <humasect> good point, 3d in 98 was still brand new 
[06:30:28] <moon-child> https://en.wikipedia.org/wiki/VPL_Research  these people did it 15 years earlier
[06:30:46] <humasect> but the word 'enterpreneur' wasnt even in dictionary then =P 
[06:31:44] <gilberth> moon-child: Went bankrupt ;)
[06:31:58] <humasect> power vr =P 
[06:32:32] <humasect> why did nvidia not purchase arm , 
[06:33:00] <moon-child> gilberth: details, details!
[06:33:36] <gilberth> And there is a time for everything. These days we have tablet computers. But they were present way earlier than the iPad.
[06:33:47] <humasect> dynabook
[06:34:11] <gilberth> Newton, and whatever the Microsoft tablet was called.
[06:34:25] <humasect> zoom zune 
[06:34:34] <gilberth> moon-child: What kind of details?
[06:35:34] <humasect> of bankrupcy 
[06:35:38] <humasect> ruptcy ?
[06:36:16] <gilberth> Right. But that illustrates my point. You could be too early with some tech.
[06:37:18] <gilberth> We were too early and thus abandoned our idea although we had something which actually worked.
[06:39:04] <humasect> hits deep , thinking of most ideas. then also..
[06:39:49] <humasect> i think that when an idea comes to the world, its shared, that is, it manifests in several parts in complimenting ways. (eg. the east vs. west AI fight (prolog v. lisp))
[06:41:02] <humasect> however no regrets, imagine what it would be today if you've put in that "time" to it until today? 
[06:42:01] <hayley> https://www.youtube.com/watch?v=eifljYPFW-E
[06:42:01] -ixelp- Elvis Costello & The Attractions - Radio, Radio - YouTube
[06:42:54] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Quit: WeeChat 3.4)
[06:43:24] <gilberth> I don't regret anything about it. It was a fun time.
[06:43:38] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[06:46:19] <gilberth> Anyhow, dear Apple, saving battery life is fine, but why can't I disable that, if I wish?
[06:46:40] <gilberth> And a little documentation would be nice.
[06:48:30] <humasect> plug into wall 
[06:48:48] <gilberth> And then?
[06:53:48] <humasect> and it charge (bypass batt life)
[06:54:05] <gilberth> My desktop has to battery to begin with.
[06:55:43] <hayley> BIOS memory?
[06:55:49] <humasect> to start up ?
[06:57:08] <gilberth> hayley: I doubt there is a BIOS on macs. And usually that is no chargeable battery anyway.
[06:57:24] <gilberth> And not powering the CPU.
[06:58:11] <hayley> "Thanks to Skip's tracking of side effects the garbage collector only has to scan memory reachable from the root of a computation" Erm, doesn't any copying GC only scan memory reachable from the root of a computation?
[07:00:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:00:45] <hayley> I suspect they have more interesting optimisations, but this doesn't describe much.
[07:01:43] * hayley looks through the source code and finds atomic refcounting. Uh-oh.
[07:06:50] <humasect> super efi 
[07:09:50] <hayley> Hm, what do we think about updating the link stash on <https://www.cliki.net/lispcafe>? Could make a list of everyone's favourite links.
[07:09:50] -ixelp- CLiki: lispcafe
[07:11:26] <gilberth> I don't believe that would be useful.
[07:15:03] <humasect> c2
[07:16:21] <hayley> I need "Dubious Achievement" on speed-dial.
[07:17:23] <gilberth> Actually I am pondering about sth somewhat related to write barriers. I'd like to be able to modify an output history, while another thread sees a snap shot from a given time. And it should be possible to make snop shots fast and atomically.
[07:18:19] <gilberth> I would need something like copy-on-write or transactional store. *sigh*
[07:18:41] <hayley> How much of the output history is mutable?
[07:18:54] <gilberth> It's all mutable.
[07:20:09] <gilberth> All I could do is state that leaf nodes from graphics output are immutable. And perhaps also closed text output records.
[07:21:42] <gilberth> So the least mutable state would be to be able to add/remove output records and to move them. I could regard the bounding box as a cache. CLIM likes to use them for typographical purposes, but that is the wrong approach anyway.
[07:22:14] * hayley seemingly needs software transactional memory in order to make Netfarm computed values ACID enough. sigh
[07:23:12] <hayley> Why am I sighing? I don't work on it anymore. But that is something I'd have to do.
[07:23:13] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:23:27] <gilberth> But what I need is snap-shots rather. I need at least two. The version last send to the display server and the version at that point the application said FORCE-OUTPUT.
[07:24:19] <hayley> Lock the world while you grab snapshots?
[07:24:50] <humasect> yes
[07:24:55] <gilberth> A lock wouldn't hurt. But: I can't effort to just copy everything, that would be way too slow.
[07:25:12] <moon-child> gilberth: so, you want transactions?
[07:25:32] <moon-child> or, copy-on-write?
[07:25:34] * moon-child hides
[07:25:36] <humasect> its all copying (mimicry) monkeys software can't do more than its taught to be doing 
[07:25:38] <hayley> Use https://gitlab.com/Theemacsshibe/cl-worlds?
[07:25:39] -ixelp- theemacsshibe / cl-worlds · GitLab
[07:25:40] <gilberth> moon-child: Multiple views on the state of affairs, yes.
[07:26:03] <humasect> :/
[07:26:03] <hayley> (Or don't, it's slow.)
[07:27:14] <gilberth> It should scale. Imagine some Listener with 100k lines printed on already. You want to quickly figure out the single char that was added by hitting a key while at the input editor.
[07:27:36] <humasect> oh my
[07:27:40] <hayley> How about this: have a global version counter for snapshots. Each object has a current version, and a log of dead versions. Snapshots snapshot a version counter.
[07:27:49] <hayley> The rest of making this work is an exercise for the reader.
[07:28:04] <humasect> then version the snapshots so you can snapshot the versions and then work it out magically 
[07:28:23] <hayley> (I assume snapshots are read-only, so no merging nonsense.)
[07:28:32] <gilberth> hayley: Sure. I was considering that. I also consider to have a write-buffer, were writes are recorded to be picked up by the updater.
[07:29:00] <gilberth> hayley: Sure, snapshots are read-only.
[07:29:13] <hayley> Netfarm snapshots have a write log, where logs are applied after someone finishes their critical section.
[07:29:14] <humasect> ext4
[07:31:13] <gilberth> Or I'll have an evacuation buffer. idk The application should have fast access to the data structure. The updater has a full 16ms at its disposal for doing its work.
[07:32:35] <humasect> sequential 
[07:32:38] <gilberth> And I am not concerned about multiple concurrent mutators.
[07:33:12] <gilberth> At least not on a single output history.
[07:33:32] <humasect> emacs =P 
[07:33:43] <gilberth> emacs?
[07:33:59] <humasect> bufers and non concurrent sounds prefect
[07:34:49] <gilberth> The part that generates actual screen updates should run in parallel.
[07:35:06] <humasect> have clients pull it ? 
[07:35:13] <humasect> rather than server pushing that is 
[07:35:23] <gilberth> Clients? What kind of clients?
[07:35:34] <humasect> the screen in this case?
[07:36:57] <gilberth> Yes, and? Sure the updating thread "pulls". The application mutates the output history and at certain times says FORCE-OUTPUT, which is just an indication that this now is a consistent state of output and could in principle be rendered, if the somebody would care.
[07:37:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[07:37:41] <gilberth> I expect FORCE-OUTPUT to be called often, way more often than the rendering thread would actually have a look.
[07:38:30] <gilberth> So FORCE-OUTPUT would take the snapshot. At then is better be just bumping some pointer or generation counter or something.
[07:39:10] *** Joins: aeth (~aeth@user/aeth)
[07:45:09] <gilberth> Ok. macos whatever is current has been downloaded. I wonder where I could find that.
[07:45:56] <gilberth> So I could keep that version, as it's hard to find specific versions later.
[07:50:26] <humasect> web
[07:50:42] <gilberth> Web?
[07:52:12] <gilberth> Anyhow, would it be practical to use a meta class, such a transactional store would be easy to have.
[07:53:55] <gilberth> Meanwhile I wonder, if my disk spins at 60RPM.
[07:54:11] <moon-child> more like 6000rpm, no?
[07:54:22] <gilberth> Perhaps it does, to save power.
[07:55:59] <gilberth> moon-child: My macmini is a very poor machine, yes. So I guess it's just those 5400rpm. But it feels like 60RPM.
[07:56:03] <humasect> emacs =P 
[07:56:24] <gilberth> What is it that you have with emacs?
[07:56:39] <White_Flame> eight megs and constantly spinning
[07:57:00] <moon-child> :/
[07:58:16] <gilberth> I see like 10MB/s. With an internal disk. That's slow, isn't it?
[07:58:43] <White_Flame> yep, should be 100+
[07:58:49] <moon-child> my old laptop got 10-20mb/s, on a spinny disc
[07:59:02] <moon-child> went up to 100-200mb/s, when I replaced it with an ssd
[07:59:41] <gilberth> As I said, I am on my poor, cheap and old macmini with a spinning disk.
[08:00:16] <gilberth> My laptop is a tad bit faster.
[08:02:01] *** Joins: dre (~dre@2001:8003:c932:c301:2079:4593:1556:be9c)
[08:02:22] <gilberth> I ought to mentally move in and provide me with proper hardware here.
[08:03:07] *** Joins: jeosol (~jeosol@user/jeosol)
[08:05:33] <humasect> lisp 
[08:06:27] <moon-child> weren't you talking about getting a threadripper?
[08:07:42] <gilberth> Yes, but not as a desktop.
[08:07:57] *** Joins: semz_ (~semz@user/semz)
[08:10:12] *** Quits: semz (~semz@user/semz) (Ping timeout: 240 seconds)
[08:15:46] <dave0> ripper makes it sound fast
[08:15:58] <gilberth> "About 40 minutes remaining" Hmm.
[08:16:59] <gilberth> So I am spending all day installing macos 12.ihaveforgotten
[08:17:27] <moon-child> sorry
[08:17:29] <moon-child> it's my fault, really
[08:17:33] <gilberth> Perhaps to only to see that this sleepy sleep feature is still present.
[08:18:13] <gilberth> moon-child: Well, it's me doing my homework. After all, I want that it works with a current macos, too.
[08:20:36] <gilberth> Somehow I just can't say good bye to macos and just ditch it.
[08:21:54] <dave0> aw that sounds so sentimental :-)
[08:22:03] <dave0> gilberth: you are a big softie
[08:22:27] <gilberth> How did you figure out that side of me?
[08:23:58] <dave0> from your love of macos :-)
[08:24:03] <gilberth> As with any relationship the first two years were just great. It's downhill since then.
[08:24:09] <gilberth> dave: :-)
[08:25:54] <gilberth> Anyhow, I noticed that either intentional and at times by accident CCL likes to pass a timeout of -1 for meaning "block until eterity".
[08:26:52] <gilberth> Sometimes it's -1 for real, at other times it's 2^32-1. That would need some clean up anyway.
[08:27:06] <moon-child> I think that is an idiom
[08:27:10] <moon-child> I have definitely done that, with that intent
[08:27:17] <moon-child> 2^32-1 seems wrong on a 64-bit system...
[08:27:46] <gilberth> moon-child: Within CCL its often an idiom, which nevertheless at times gets though to the syscalls as is.
[08:28:42] <gilberth> Which of course works, as 2^32-1 seconds is a long time. Even 2^32-1 ms is long enough that you won't notice.
[08:30:27] <gilberth> Anyhow, when reading the code you recognize that this code is old and was ported many times perhaps by different people. It looks like nobdy really cleaned up anything and rather hacked with the maxime: "Don't touch too much". Which generally isn't a bad strategy.
[08:31:37] <gilberth> And further I am always curious why COND is avoided like the plague and IF is used instead.
[08:32:24] <moon-child> huh.  Did not some primordial lisp have COND but not IF?
[08:32:49] <gilberth> COND was first. The very first LISP had COND.
[08:34:04] <gilberth> And I have seen AND used for WHEN and OR for UNLESS.
[08:34:23] <gilberth> Not with CCL, but with olde Lisp code.
[08:34:34] <moon-child> hmm.  Maybe, somewhere in ccl's lineage, cond was a macro, and some parts of the implementation were not allowed to use macros?
[08:36:01] <gilberth> Maybe. With CL, IF is the special form and COND is the macro. But then having no macros at all sounds strange.
[08:36:25] <moon-child> yeah
[08:36:47] <gilberth> I really don't know. Perhaps the roots were an interpreter expanding macros all the time? And the use IF stuck? /me shrugs.
[08:37:03] <moon-child> you are not allowed to do that in cl though
[08:37:15] <moon-child> you have to do 'minimal compilation', which entails macroexpansion
[08:37:49] <gilberth> I know. But I guess CCL predates CL. But I don't know for sure though.
[08:39:44] <gilberth> Does not make sense. Isn't it called MCL? /me googles.
[08:40:08] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[08:42:41] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[08:43:48] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[08:44:36] <gilberth> What I find is, that MCL indeed was developed in 1984 and thus a Common Lisp. So then this use of IF must be just someone's preference.
[08:45:44] *** Joins: aeth (~aeth@user/aeth)
[08:49:15] <gilberth> Perhaps it compiled faster :-)
[08:50:11] <gilberth> Ok. macos 12.2.1 boots.
[08:50:36] <gilberth> ... and boots.
[08:51:14] <gilberth> and boots some more. What is it pondering?
[08:53:19] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[09:10:31] <gilberth> Still boots. Stuck?
[09:11:33] <gilberth> Great start.
[09:13:12] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[09:17:48] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 240 seconds)
[09:18:03] <mfiano> Hi everyone
[09:18:15] <hayley> Hi mfiano
[09:18:17] <mfiano> I have a quick CLOS question.
[09:18:39] <mfiano> I have a class RGBA whose direct supers are (RGB ALPHA)
[09:18:53] * gilberth hides.
[09:19:19] <mfiano> I have an initialize-instance :after method for the ALPHA class, that checks to see if pre-multiplication should occur, and then mutates the slot values accordingly.
[09:20:06] <mfiano> In this case it doesn't work, because after methods are applied in reverse order from before methods, but I also don't want ALPHA to be more applicable than RGB for this instance. Is the best course of action to define an :around method instead?
[09:21:28] <mfiano> Oh wow, I thought I was in #commonlisp. I should wake up. Well, if anyone here knows... :)
[09:21:37] <gilberth> Question: When I say (setq c (make-instance 'funny-color :red 1 :alpha 0)), would (slot-value c 'red) then return sth different from 1?
[09:22:00] <mfiano> Is that a question for me?
[09:22:06] <gilberth> Yes.
[09:22:09] <mfiano> what is sth?
[09:22:16] <gilberth> something
[09:22:47] <mfiano> No, not unless :pre-multiply-alpha T is passed, as it defaults to NIL.
[09:23:45] <gilberth> Ah, and why doesn't the RGB then pre-multiply? On a general note: I don't like it when too much is done with initialize-instance.
[09:24:24] <mfiano> I'm not sking for your opinion on semantics. I'm asking for your opinion on a solution without changing the CPL
[09:25:21] <gilberth> Then go with an :around method, if you wish. I just find it a bit odd.
[09:25:44] <mfiano> Ok thanks.
[09:26:07] <mfiano> Your opinion is also noted.
[09:26:09] <gilberth> I mean, how does the ALPHA class guess what slots to pre-multiply?
[09:26:33] <mfiano> All slots except the alpha slot.
[09:26:38] <mfiano> It is aware of pixel format
[09:26:50] <mfiano> (channel order)
[09:26:56] <mfiano> and which one is alpha
[09:27:01] <gilberth> All? What if I have a named-colour-mixin with a name slot, which is some symbol or string?
[09:27:19] <mfiano> It is only aware of primaries.
[09:27:35] <gilberth> So it guesses.
[09:27:38] <mfiano> No
[09:27:50] <mfiano> It does not guess.
[09:27:58] <mfiano> These questions and assumptions are very strange.
[09:28:25] <gilberth> Sorry, I am just playing the stupid.
[09:29:01] <mfiano> Such is the internet, especially textual communication and across different cultures.
[09:29:08] <gilberth> To me it just feels, like it should the components that scale themself and not the alpha unilaterally scales some other value.
[09:30:06] <gilberth> And if the option is called :premultiply-alpha it would could be part of the protocol that there also is an :alpha initarg.
[09:30:33] * gilberth can't write anymore.
[09:30:54] <mfiano> That is essentially what happens. ALPHA is just a mixin class with a single method that instructs the channel slots to do exactly that.
[09:31:14] <mfiano> It is actually a common idiom, and lots of similar examples in Keene.
[09:32:09] <gilberth> Really? You still need a protocol to ask the RGB about which slots to scale.
[09:32:58] <gilberth> Could be CMYK the other day. Or just a luminance. Or whatever.
[09:33:09] <mfiano> There is only a single specialized array of all channel slots, and a protocol for retrieving the index of the alpha channel.
[09:33:32] <gilberth> ok
[09:33:35] <mfiano> I mean...there is only a single slot
[09:33:38] <mfiano> of all channels
[09:38:45] <gilberth> mfiano: CALL-NEXT-METHOD also takes arguments, so could, if you wish, opt to modify the initargs.
[09:39:23] <mfiano> Yes, but you are not allowed to supply arguments that would result in a new effective method.
[09:39:47] <mfiano> That is, alter the method combination mid-flight
[09:39:50] <gilberth> You can't specialize on a keyword argument anyway.
[09:40:13] <mfiano> I guess i'm not sure what you mean then.
[09:42:51] <gilberth> Well, an option is to say (defmethod initialize-instance :around ((obj blah-mixin) &rest initargs &key r &allow-other-keys) (apply #'call-next-method obj :r (* 2 r) initargs)). Just an idea. No idea if that is a good move or not.
[09:44:05] <mfiano> What I have works. I think we could bike shed this all day :)
[09:44:08] <mfiano> https://gist.github.com/mfiano/0dc394475abe4f598a4dd59fd881598f
[09:44:09] -ixelp- alpha.lisp · GitHub
[09:45:27] <gilberth> ok.
[09:46:09] <moon-child> mfiano: I am curious: do you also have a setter which premultiplies alpha?
[09:47:08] <gilberth> "About 2 minutes remaining".
[09:47:20] <gilberth> reinitialize-instance?
[09:49:05] <mfiano> Me and my co-developer discussed it but decided we didn't have a use for it just yet. We only need to know if a user supplied color should be pre-multiplied or if it is already pre-multiplied by the values they supply to the constructor. That is all that is needed to (lossily) post-multiply during color space conversion routines, and to test for the pre-multiplication predicate for Porter-Duff
[09:49:07] <mfiano> etc.
[09:50:07] <moon-child> well, I definitely find it inconsistent that the initarg is premultiplied.  But really I would rather nothing be multiplied transparently, even in a premultiplied format
[09:50:34] <gilberth> ^
[09:50:36] <moon-child> iow: if you are creating an object which has premultiplied alpha, it is your responsibility to premultiply the alpha
[09:51:03] <moon-child> *inconsistent that _only_ the initarg is premultiplied, I should have said
[09:51:09] <mfiano> Our use-case requires one or the other, so we need both.
[09:51:30] <mfiano> initargs cannot be pre-multiplied, as they are symbols, but I get what you mean.
[09:52:23] <gilberth> [The arguments can, but not their names. /me splitting hair.]
[09:53:08] <moon-child> [it depends.  :red can be an argument, for isntance.  /me splitting more hairs]
[09:54:05] <mfiano> initargs need not be keyword symbols even.
[09:54:11] <gilberth> [A keyword argument just happens to be named by the keyword, it itself is just the value. /me chops yet more hair.]
[09:54:11] <mfiano> how many hairs can we split?
[09:55:43] <gilberth> I would be surprised if initargs could be sth different from symbols, as &key argument names must be symbols.
[09:56:06] <moon-child> the keyword itself is an argument though.  When i say (foo :bar 5), I pass two arguments to foo: the first is :bar, and the second is 5
[09:56:12] <mfiano> They cannot. They must be symbols, but not necessarily those interned into the KEYWORD package.
[09:56:38] <moon-child> it is foo's responsibility, then, to parse these and bind, say, 5 to formal parameter BAR, and not to bind :bar to anything.  But it doesn't have to do that
[09:57:21] <gilberth> moon-child: You may pass two arguments but they are parsed into one parameter. Right.
[09:57:44] <mfiano> THis is going too off the rails for me now. Back to code :)
[09:58:16] <gilberth> Well, moon-child is right. Most people confuse arguments with parameters.
[09:58:31] <mfiano> They do? How odd.
[09:58:32] <moon-child> (can also distinguish 'parameter' from 'formal parameter'.  Formal parameter is what goes in the lambda list and is a property of the function; parameter is the value of a variable and is a property of a given invocation of the function)
[09:58:44] <mfiano> A parameter is a variable that an argument is bound to.
[09:58:50] <gilberth> mfiano: I did too. Just a minute ago.
[09:58:54] <mfiano> Oh I see
[09:59:12] <mfiano> Anyway, I'm off
[09:59:18] <moon-child> see ya
[09:59:28] <gilberth> Take care and have fun, then.
[10:00:46] <gilberth> "Less than a minute remaining". /me shrugs.
[10:01:35] <gilberth> And shouldn't it be "Less than one minute"?
[10:01:39] <mfiano> formal parameter is not a recognized Common Lisp term, and "parameter object" is something different in some Schemes. Overloaded terminology is fun, especially when "overload" is overloaded in polymorphism.
[10:01:48] <moon-child> :D
[10:03:49] <edgar-rft> according to that logic, what kind of variable then does defparameter define?
[10:04:33] <gilberth> It's consistent as it defines a parameter of your program.
[10:04:39] <neominimum> Honestly I considered args and params to be synonymous. But I can't say I've been in a situation that required differentiating the two concepts.
[10:05:13] <moon-child> edgar-rft: you can consider specials to be an implicit parameter to every function
[10:06:12] <White_Flame> or even simpler, you could consider the global environment to be an implicit parameter
[10:06:25] <White_Flame> and dynamic environment
[10:06:34] <moon-child> well, that adds complications
[10:06:42] <moon-child> because it involves explicit binding and unbinding
[10:06:53] <moon-child> if specials are implicit parameters, you don't need that
[10:07:09] <edgar-rft> a defparameter variable can be unbound - even if that makes not much sense, but it can :-)
[10:07:20] <moon-child> true
[10:07:53] <White_Flame> defparameter can't be initialized unbound like defvar can, though
[10:07:59] <gilberth> And unbound special variable still is a defined special variable. That doesn't change much.
[10:08:31] <gilberth> It's just a special marker. Slots can be unbound, too.
[10:08:54] <hayley> .oO( sb-pcl:+unbound-marker+ or something )
[10:09:19] <gilberth> hayley: Bah! I don't want to get hold of it ever.
[10:09:34] <hayley> (sb-kernel:make-unbound-marker)
[10:09:47] <moon-child> White_Flame: well, you can also say (let (x) ...)
[10:09:52] <moon-child> in principle, this should be an unbound x
[10:09:57] <moon-child> (in practice, it is not, but ...)
[10:10:06] <White_Flame> isn't that defined to be (let ((x nil) ...) ..) ?
[10:10:18] <gilberth> It is.
[10:10:25] <moon-child> yes
[10:10:27] <edgar-rft> gilberth: it changes much because an unbound variable is not a variable bound to an argument at the same time
[10:10:28] <moon-child> but, logically
[10:10:36] <White_Flame> "For both let and let*, if there is not an init-form associated with a var, var is initialized to nil."
[10:10:38] <gilberth> But saying that (let (x) ...) would leave x unbound would have made sense.
[10:11:08] <moon-child> I mean, (let (x) ...) indicates that you have chosen not to initialise x to anything because you're going to initialise it later
[10:11:20] * hayley can't decide between "initialize all your damn slots", "lol have some nulls" or "unbound slots exist" for Utena object initialisation
[10:11:22] <moon-child> whereas (let ((x nil)) ...) indicates that you have explicitly chosen to initialise x to nil because you want it to be nil
[10:11:40] * moon-child votes for option 1
[10:12:03] <hayley> The first makes functional weenies happy, the middle makes no one happy, and the last makes beach happy.
[10:12:20] <hayley> moon-child: What do you start counting from?
[10:12:26] <gilberth> Well, the habit of always initializing your variables comes from languages which would just stick some random value there. In theory a LISP which would allow for unbound lexicals would make perfect sens.
[10:12:50] <moon-child> hayley: bah!  I would count from 0, but in order to be sociable I usually use 1
[10:13:25] <edgar-rft> let's write a language for programs that do nothing
[10:13:39] <gilberth> An Apple minute seems longer than usual.
[10:14:20] <edgar-rft> that's how they make you think that you're ahead of time
[10:14:54] <gilberth> Great! Maybe that's the reason why I can't depart.
[10:15:00] <hayley> The problem with initialize-your-own-damn-slots is that idk how to enforce it. I mean, I make the functional weenie joke because they construct objects with all slots bound, but in normie OO languages you sometimes compute something.
[10:16:28] <moon-child> make initialise-instance return a vector of slot values
[10:16:35] <edgar-rft> Is INITIALIZE-YOUR-OWN-DAMN-SLOTS part of Haley's Object Protocol? :-)
[10:16:36] <hayley> A stupid example would be to cache a value, and then you install it with a side effect e.g. { this.foo = foo; this.bar = blah(foo); }. Thus there is a bogus value, be it null, or some other crap, until you assign. But now I'm not too opposed to the idea of having a CREATE form which takes such values.
[10:16:36] <moon-child> and err if it's the wrong length
[10:17:28] <moon-child> (or, perhaps, a plist.  Or something like that.)
[10:17:58] <hayley> e.g. now perhaps (class blah () (define a-slot) (define b-slot :default 2) (define (:constructor new a) (construct [a-slot a]))) would be valid. Leaving out A-SLOT would not be valid, but leaving out B-SLOT defaults to that :DEFAULT.
[10:18:03] <gilberth> Well, that is the route to a bunch of different flavors of NIL or nested Option<X> in "modern" languages.
[10:18:37] <hayley> Unbound slots are like Option but you try to pull the value out immediately. If there's no value, you get an unbound error.
[10:19:03] <gilberth> Look at what GETHASH does, it returns a second value indicating if something is found. ASSOC is clever and returns the cons, and a lot of functions including GETF or even READ let you pass a default or your own sentinel.
[10:19:50] <moon-child> gethash is convenient, but it's easy to ignore the second value
[10:20:09] <gilberth> And this is the reason I never want to be able to get hold of the internal unbound marker. Never.
[10:20:40] <moon-child> assoc is nice (and would be nicer still were (car nil) not nil)
[10:20:59] <gilberth> Because once you can, you can't tell "not being set" from "oops, it just happened to be that value" apart.
[10:21:48] *** Quits: dre (~dre@2001:8003:c932:c301:2079:4593:1556:be9c) (Ping timeout: 240 seconds)
[10:22:09] <gilberth> And that will enter the route of inventing yet another more null than a null.
[10:22:46] <hayley> Option.of(Option.of(Option.of(null)));
[10:23:00] <moon-child> pls
[10:23:07] <gilberth> hayley: How deep do you want to nest those?
[10:23:50] <hayley> Right $ Left $ Just $ Just $ Just $ Just $ Just Nothing
[10:24:12] <gilberth> moon-child: (defun kar (x) (etypecase x (cons (car x))))
[10:25:03] <gilberth> What I do with assoc is (car (or (assoc key alist) (error "Sorry, I can't do that.")))
[10:25:23] <moon-child> (defmethod kar ((x cons)) (car x))
[10:25:24] <gilberth> cdr rather, as I want the value :-)
[10:25:57] <gilberth> moon-child: Way too modern to me.
[10:26:56] <hayley> "noooo you can't use generic dispatch" "haha inline caches go brrrr"
[10:27:30] <gilberth> Worse yet: Some clown may add more methods.
[10:28:13] <moon-child> (defmethod kar ((x null)) nil) ;hahaha!  so much for strong typing
[10:30:12] * hayley reads a reply
[10:30:17] <hayley> "However, instead, imagine you have a type-system that tells you that in that scope, the only thing that can be mutated is myObject!Well, now you can run that in a loop, without accumulating garbage!" Hey, no shouting!
[10:30:31] <gilberth> Hmm (defmethod kar ((x vector)) "Linked lists are bad" (aref x 0))
[10:31:08] <hayley> https://news.ycombinator.com/item?id=30382151 I still don't get it.
[10:31:09] -ixelp- Well, imagine your type-system was able to tell you exactly what roots are mutab... | Hacker News
[10:32:02] * gilberth is blinded by the pink background of macos 12.2's login screen.
[10:32:06] <hayley> There is probably something profound in this reply, but I don't get it.
[10:32:46] <hayley> "Well, if you don't have a type-system that tells you what is mutable, you have to either scan all the mutable roots, or maintain a write-barrier to know what could have captured data in the scope." You get to scan the immutable roots too?
[10:33:17] <gilberth> And violet rather. Are these the colours en vogue this season?
[10:35:13] <hayley> A real compiler should just kill all the code, since myObject never escapes. Data flow analysis, do you speak it?
[10:35:55] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 240 seconds)
[10:36:39] <hayley> In a region-based system (be it static a la ML Kit, or dynamic c.f. Baker) the temporary list would be promoted to the next scope out, due to escaping the inner scope.
[10:36:57] <moon-child> if you put it in the type system, then you get a guarantee; or, the user has to make explicit what escapes and what does not
[10:37:18] <moon-child> this may or may not be a good idea (see ismm-dude comments about modularity), but it is definitely different
[10:37:55] <hayley> Sure, but it doesn't follow in this example that you don't accumulate garbage, because the [A, B, C] list escapes and has a lifetime similar to myObject now.
[10:39:19] <hayley> "If you use a write-barrier, what is going to happen is that [A, B, C] is going to be promoted, because the barrier is going to track the object myObject, and it doesn't realize that it's dead." ok, but myObject is later dead, so we apparently can just toss it out, even if we trip the barrier. I'm confused.
[10:40:42] <hayley> "the only thing that can be mutated is myObject" and we're doing just that. idk. Apparently this person uses the Skip language in question, so I don't think I want to read more about it, lest I lose my ability to reason about what escapes stack regions.
[10:44:15] <gilberth> Gotcha. 12.2 also raises my timeout. It took 40s to get into that "I raise your timeout to 10s" state.
[10:45:39] <gilberth> So much for that.
[10:45:55] * hayley wore out her head from head-scratching, and borrows gilberth's head.
[10:46:52] <gilberth> Does it help?
[10:47:01] <hayley> Well, we kill off [A, B, C] due to assigning null after (what a weird functional language!), but again the term here is "data flow analysis".
[10:47:16] <hayley> Not really, no.
[10:47:25] <gilberth> Sorry.
[10:50:32] <hayley> But I guess I don't see how mutable/immutable distinctions help with flow analysis, particularly with liveness. By definition, all the hairy problems involve mutable objects.
[10:50:38] <neominimum> w/r/t your w.r.t, okay, interesting. I may have to get into GC at some point as I wanna do async stuff and GC clearly is going to be an important component of any managed concurrent/parallel runtime. Man my plate is full with all the topics I need to learn.
[10:51:08] <neominimum> hayley: ^
[10:51:18] <hayley> Well, interface vs implementation. You probably shouldn't need to worry about GC until performance metrics show you should.
[10:51:46] <hayley> And I'm up shit creek without a paddle, because I found GC time is significant for one application.
[10:53:04] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[10:53:51] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[10:55:51] <neominimum> Hey, maybe you'll get it sorted by the time I get there! :)
[10:58:34] <hayley> "However, instead, imagine you have a type-system that tells you that in that scope, the only thing that can be mutated is myObject! [...] Well, now you can run that in a loop, without accumulating garbage!" It really feels like there should be some more inference steps in [...], but instead I read nothing at all. ):
[11:01:48] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[11:02:21] <hayley> But we already have a "actually, this value is dead" detection pass, and again it is called "data flow analysis". /me goes back to scratching own head
[11:07:30] *** Joins: dre (~dre@2001:8003:c932:c301:f5ca:6748:5b2:4153)
[11:15:28] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: later)
[11:22:03] <gilberth> Interesting a working (sleep 1) takes 16ms CPU, a sleep raised to 11s (sic!) takes .7ms CPU. Curious.
[11:22:30] <gilberth> Anyhow, my CLIM appears to work with macos 12.2, too. That's the only good news.
[11:23:39] <gilberth> BTW I noticed this behavior with Terminal.app too. Something written to the pseudo tty at times needs a while to be displayed.
[11:24:24] <neominimum> I wonder if any work has been done on what I would naively call managed/dynamic process dispatch on async runtimes. Cause I was running into a situation where I had a circuit simulator + actor runtime and I wanted to produce the truth table for a 16-way-not. With the way I coded the parallel dispatch (uh, breadth-first?) the message + object growth characteristics was killing sbcl before the computation could hit it's peak and start winding 
[11:24:24] <neominimum> down. Bacause I'm lazy, ideally I'd like to dispatch naively and have the runtime actually do the smart thing to keep memory growth within bounds.
[11:24:53] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[11:28:57] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 240 seconds)
[11:31:12] <gilberth> So you dispatch happily without ever attending to the dispatched tasks. Do they pile up like in a queue? I'm not quite familiar with the actor model.
[11:33:53] *** Quits: dre (~dre@2001:8003:c932:c301:f5ca:6748:5b2:4153) (Quit: Leaving)
[11:34:06] <gilberth> This is consistent. I didn't suffer from timeout raise for half a minute, and now in return for the extra granted kindness I am charged an extra 26s added to my timeout.
[11:34:24] <gilberth> inconsistent, rather
[11:35:10] <moon-child> can't have shit in macos
[11:35:17] <gilberth> Anyhow it seems someone at apple replaced max(timeout,10) with timeout+10.
[11:35:25] <moon-child> I wonder, how are you supposed to do timers consistently?
[11:35:55] <gilberth> You mean, I as an application?
[11:35:58] <moon-child> yeah
[11:36:10] <moon-child> or e.g. how does cron work?  I noticed cronjobs actually seem to run with more precision than on linux--generally within a second of the time I specify, where linux can stray by up to maybe 15 seconds
[11:36:28] <gilberth> You can't. I have yet to find a loop-hole. Every syscall I tried has its timeout raised.
[11:36:42] <gilberth> moon-child: cron is not a GUI application.
[11:36:58] <gilberth> Ah you mean in general.
[11:37:04] <moon-child> right
[11:37:06] <moon-child> right
[11:37:08] <moon-child> I see
[11:37:32] <moon-child> this might also explain some stalling I observed in dolphin earlier
[11:37:59] <gilberth> If I were to implement cron, I would use a way smaller argument to sleep and read the clock.
[11:38:43] <moon-child> why?  It seems wasteful to poll so frequently
[11:39:00] <moon-child> and it's not hard to predict when the next time you will need to run a job is
[11:39:21] <moon-child> (though, date changing is a _very_ tricky thing for a crond to deal with)
[11:39:58] <moon-child> (I think I heard one crond deals with it with time dilation, and some other cronds don't deal well with it at all)
[11:39:59] <gilberth> Well, it depends on whether I could depend on sleep observing the clock.
[11:40:17] <ck_> if you keep observing a clock, it'll be difficult to go to sleep
[11:40:24] <gilberth> moon-child: You mean, when the clock is adjusted?
[11:40:25] <ck_> just turn around, count sheep or something
[11:43:08] <gilberth> Interesting question. You write a time into the crontab and users would expect that the job is run at that time. Defined by what the clock happens to read. Now I see the issue, moon-child.
[11:44:21] <gilberth> Hmm, I see no other way than to read the clock from time to time.
[11:46:01] <neominimum> gilberth: Yes a central message queue, each message essentially contains an actor object + a dispatch method + a list of arguments to supply to the method. the actor instance was used to maintain state. A cooperative scheduler(if it could even be called that) or rather dispatcher would pop messages of the queue and apply the actor instance and arguments to the dispatch method specialised for that particular actor type (in this case a nand 
[11:46:01] <neominimum> gate)
[11:47:47] <gilberth> Ok. And because each message or continuation handled generates new (perhaps more than one) and you can't block on the "send", things pile up. Right?
[11:48:10] <neominimum> yes precisely
[11:48:56] <gilberth> You're dead in the water. Use call/cc then.
[11:50:13] <gilberth> The only other option is to not queue, but do the continuation right away. Can that work?
[11:50:44] *** Joins: shka (~herr@109.231.3.55)
[11:54:11] <gilberth> Am I synchronized to vsync, or what? /me rubs eyes. When I (sleep 1) as a regular process the CPU overhead is .4ms, As soon as I just morph into a GUI process, the (sleep 1) takes ~13ms..15ms CPU when not throttled.
[11:54:34] <hayley> https://www.youtube.com/watch?v=C7WOgCvwP_0
[11:54:35] -ixelp- Wish You Were Here QUAD (Album) - A 35th Anniversary Surround Compilation - YouTube
[11:54:45] <gilberth> neominimum: I suppose your code is just some regular CL and not some language of your own?
[11:55:16] <neominimum> potentially, although that may require new message sends that are created to 'leak' back to the dispatcher on function return instead of taking the scenic rout through the message queue. hmm... If i get a chance I may attempt to implement that.
[11:55:28] <neominimum> route*
[11:55:55] <gilberth> Oh, that route back is an actor thing?
[11:57:06] <gilberth> It's a long time I since read about it. I never played with it.
[11:58:28] <hayley> https://twitter.com/ResNeXtGuesser/status/1494416380640194561 
[11:58:46] <gilberth> [And neither SIGINT or SIGQUIT make it through in time.]
[11:59:10] <hayley> (Link is on how to make free electricity.)
[11:59:36] <neominimum> gilberth: I belive so. If I remember correctly an ideal actor model implementation may not even require a call stack. All returns are async and travel the message queue, being delivered to the stated continuation.
[11:59:39] <gilberth> Build an AM receive and use that?
[12:00:47] <gilberth> neominimum: Now that you say that, I have very vague memories. The whole thing was build around this paradigm.
[12:02:17] <gilberth> I even have the book, but not here. :(
[12:02:59] *** semz_ is now known as semz
[12:03:34] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[12:04:11] <neominimum> I have a bunch of the early academic papers that I was going through, but the math was getting a little heavy for my abilities. So I held off on going deeper until I could skill up some more, but I have yet to get around to that.
[12:04:19] <selwyn> gnuxie: what do you think about this storm
[12:04:28] <selwyn> í've never seen this much preparation before
[12:05:41] <Gnuxie> Idk it's all down south 
[12:06:19] <Gnuxie> Am shielded by the Pennines 
[12:06:22] <selwyn> oh
[12:06:32] <selwyn> i thought there was a storm in the north and scotland
[12:07:06] <Gnuxie> There's been a lot of storms this week I think 
[12:07:12] <Gnuxie> This red one is down south like 
[12:07:48] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 240 seconds)
[12:08:50] <gilberth> Here it was windy the other night. They warn of another storm coming this night. It's still quiet though.
[12:09:35] <ck_> clearly you two are in more danger because the storm doesn't have to follow EU guidelines anymore :/ hearts and prayers.
[12:10:01] <selwyn> i want to go to the river to see if it will flood
[12:10:09] <selwyn> but seems like the kind of thing you are not supposed to do
[12:11:16] <gilberth> We had a storm tide (correct term? flood rather?) yesterday. And the flood of 1962 has its anniversary. We also had a storm tide some three weeks ago or so.
[12:12:00] <ck_> how close to the water is the house you're in right now?
[12:12:09] <ck_> (aren't you in hamburg right now?)
[12:12:53] <gilberth> Yes, I am. We are very safe. Some 8km away from the Elbe river.
[12:13:25] <gilberth> And north of the Elbe stream at higher ground.
[12:13:38] <Gnuxie> Yeah since we've not had a proper red warning in (forever?) I wonder how many people are gonna get caught up being excited 
[12:14:15] <selwyn> i live 300m away from a river which never really floods
[12:14:19] <Gnuxie> Storm surge is what they call it 
[12:14:40] <selwyn> and 2 miles from the thames
[12:14:50] <gilberth> Surge? With water coming from the sea?
[12:15:08] <selwyn> gilberth: i think so
[12:15:18] <selwyn> i think it is the same phenomenon on both sides of the north sea
[12:15:24] <gilberth> ok. thanks then.
[12:16:28] <ck_> https://www.youtube.com/watch?v=W7tJEluN9O8
[12:16:28] -ixelp- Famous moment to Surge Protection in Who Wants to be a Millionaire - YouTube
[12:16:30] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[12:16:44] <selwyn> ck: lol
[12:18:13] <gilberth> selwyn: It is. Though here at the Elbe we have face the situations that water is pushed by the wind into the Elbe. It acts like a funnel. In '62 two things happend: Storm pushing the water for days, higher than usual tide because of the moon.
[12:18:28] <gilberth> s/have/
[12:18:39] * selwyn tries to remember fluid dynamics
[12:18:52] <gilberth> I mean look at the map. The German part of the Northe is like a corner, with no way out.
[12:18:53] <selwyn> we did some very basic atmospheric phenomena
[12:19:09] <gilberth> North sea.
[12:20:40] <selwyn> http://journal.sciencemuseum.ac.uk/browse/issue-06/understanding-storm-surges/understanding-storm-surges-in-the-north-sea-ishiguro-s-electronic-modelling-machine/
[12:20:41] -ixelp- Science Museum Group Journal - Understanding storm surges in the North Sea: Ishiguro’s electronic modelling machine
[12:20:43] <gilberth> However since 1962 a lot of money was invested into dikes.
[12:20:45] <selwyn> return to analogue computing
[12:21:48] <selwyn> used until 1983!
[12:21:52] <gilberth> My mother in 1962 lived in the very part of Hamburg that was flooded.
[12:23:21] <selwyn> gilberth: i see
[12:23:43] <selwyn> it is much easier to protect the south of england since it has basically one river
[12:23:53] <selwyn> that faces the north sea
[12:24:25] <shka> protect from what?
[12:24:39] <gilberth> From water?
[12:24:48] <gilberth> Coming from the sea?
[12:24:52] <shka> right
[12:24:53] <selwyn> the power of the sea
[12:25:07] <shka> i wonder how this would work out in the era of raising seas
[12:25:16] <gilberth> selwyn: Yes, and the North sea is of east of you. Though I could imagine that the channel can channel quite some surge.
[12:25:31] <selwyn> https://www.youtube.com/watch?v=ciNuF-9jFU4
[12:25:32] -ixelp- Carrion - YouTube
[12:25:40] <shka> seems to be a terrible time to be an island
[12:26:56] <gilberth> shka: Say good bye to a few island. They shrink already. But they have done that for thousand of years.
[12:27:24] <gilberth> The North Sea was once land.
[12:28:54] <shka> https://www.countryliving.com/uk/news/a38142403/uk-areas-underwater-rising-sea-levels/
[12:28:55] -ixelp- Interactive Map Shows UK Areas That Will be Underwater if Sea Levels Keep Rising
[12:28:59] <shka> so here is that
[12:30:06] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: You have been kicked for being idle)
[12:30:32] <moon-child> hmm, I have a PS that gs garbles; are there any other postcript implementations I can try?
[12:30:33] <gilberth> Yeah, so better buy no real estate there.
[12:31:45] <selwyn> cambridge will return to being a port city..
[12:32:21] <selwyn> perhaps it can go back to exporting wool as well
[12:33:01] <gilberth> If there is land left to put the sheep on.
[12:33:07] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[12:33:50] <gilberth> moon-child: Find a printer?
[12:35:05] <shka> https://www.msn.com/en-gb/news/other/gen-z-are-trying-to-seduce-vladimir-putin-on-instagram-into-not-starting-a-war/ar-AATktXu
[12:35:05] -ixelp- Gen Z are trying to seduce Vladimir Putin on Instagram into not starting a war
[12:36:30] <moon-child> haha
[12:36:37] <selwyn> shka: this map looks a lot like the middle ages afaict
[12:36:53] <selwyn> some towns get to be islands again
[12:37:26] <selwyn> i suppose it is the worst case in which it is supposed that there is no attempt to 'holland everything up'
[12:37:40] <selwyn> and actually try to stop low lying land being lost
[12:37:56] <contrapunctus> shka: https://www.youtube.com/watch?v=jhQ75OV4VRs
[12:37:57] -ixelp- La Maison en Petits Cubes short film - YouTube
[12:38:24] <Gnuxie> I think we did Holland it up 
[12:38:28] <selwyn> its said that putin has an assistant to use the computer for him
[12:38:36] <selwyn> least online president in the world
[12:38:41] <Gnuxie> Literally Dutch people drained it for us 
[12:39:27] <moon-child> (or maybe it's just a trash ps.  But https://0x0.st/o8tE.png I've never seen anything like this in a ps)
[12:39:28] <shka> Gnuxie: luckily my understanding is that UK ignores existence of north England so that is a lesser problem :P
[12:40:09] <selwyn> gnuxie: well we need to get them back in then
[12:40:19] <shka> would be funny to see manhattan sky scrapers sticking out from the water
[12:40:35] <Gnuxie> LwL
[12:41:59] <selwyn> shka: https://www.youtube.com/watch?v=oEp382HIisE
[12:42:00] -ixelp- Waterworld Original Film Trailer - YouTube
[12:43:03] <contrapunctus> selwyn: https://www.youtube.com/watch?v=jhQ75OV4VRs 😏
[12:43:04] -ixelp- La Maison en Petits Cubes short film - YouTube
[12:43:49] <contrapunctus> (PSA - prepare tissues in advance.)
[12:50:18] <gilberth> Actually I wonder when we will start to consider geo-engineering to cool the Earth.
[12:50:46] <selwyn> gilberth: i don't like this idea
[12:50:59] <selwyn> we will find a way to fuck it up more
[12:51:45] <gilberth> Well, there is still coal left to burn. And it'll be burned as long as it is cheaper than any alternative. I am not optimistic.
[12:55:19] <pjb> gilberth: don't worry. The depopulation process is engaged, in 40 years there will be left only 500,000,000 humans, we'll be able to continue consumming oil and coal, but at a 1/15 rate…
[12:56:24] <pjb> gilberth: it would be silly to try to cool the Earth.  Earth is on the verge of glaciation ages all the time.  We're lucky to have a few thousand years that are hotter every 25,000 years, but each time the civilisation is reset by the ice.
[12:57:21] <pjb> gilberth: Elon Musk is right, but the timeout is not 4 billion years or 200 million year, it's barely a couple of thousand years. If we don't make it out of the planet before the next ice age, it'll be the Big Reset.
[12:57:34] <gilberth> pjb: True. I remember the articles of the 80s about a new ice age coming.
[12:58:43] <gilberth> People forget that agriculture and settlement in Europe bagan just when the last ice age was over.
[13:02:10] <pjb> And the Sun activity these last years isn't encouraging…  It's flat, zero, nada.
[13:02:21] <pjb> https://spaceweathernews.com
[13:02:43] <selwyn> https://pbs.twimg.com/media/FLzKCNlX0AISCfs.png
[13:02:54] <pjb> which is good for our LEO satellites, but also shows we're at the door of the next ice age.
[13:03:32] <shka> pjb: no, we would be knees deep in the ice age already
[13:03:50] <gilberth> selwyn: Heh.
[13:04:09] <selwyn> i think it is saying that the amount of bitcoin is large enough so that you can get to the thermodynamic limit
[13:04:09] <pjb> without CO2 yes.
[13:04:15] <selwyn> which means it is a gas somehow? lol
[13:04:42] <pjb> check the Last solar cycles comparison giving the montly number of sunspot, year to year.
[13:05:27] <pjb> which means that if you believe human activity can change the climate, then we should do more CO2, not less.
[13:05:30] <gilberth> selwyn: What is temperature then? The trade?
[13:06:00] <pjb> gilberth: PV=nRT  temperature T = PV/nR depends only on the pressure and volume of the athmosphere.
[13:06:10] <selwyn> pjb: no
[13:06:11] <shka> selwyn: yes, a fart
[13:06:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:06:18] <shka> bitcoin is a fart
[13:06:26] <selwyn> thats the equation of state of an ideal gas
[13:06:34] <selwyn> not the atmosphere of a planet
[13:06:43] <pjb> selwyn: yes. This formula explains why teh temperature also increases on the other planets, where there's no human activity to create CO2.
[13:07:01] <pjb> you're free to use the more complex equation for real gases.
[13:07:59] <selwyn> you still can't use van der waals, or something like that
[13:08:09] <selwyn> (which itself doesn't model 'real' gases)
[13:08:41] <selwyn> the atmosphere isn't a container of fixed volume containing a gas at equilibrium at equal temperature
[13:13:56] <selwyn> and, do i need to say it, neither is bitcoin
[13:31:50] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:32:52] <selwyn> shka: what is he looking at https://www.youtube.com/watch?v=-XUe-9ryIE8
[13:32:53] -ixelp- 𝖕𝖔𝖑𝖎𝖘𝖍 𝖉𝖔𝖔𝖒𝖊𝖗 𝖒𝖎𝖝 - 𝘀𝘂𝗺𝗺𝗲𝗿'𝘀 𝗱𝗲𝗮𝗱 𝗮𝗻𝗱 𝗴𝗼𝗻𝗲 - YouTube
[13:33:33] <shka> selwyn: a random industrial building as far as i can tell
[13:35:19] <shka> this is a better mix anyway https://www.youtube.com/watch?v=W33s4jaRH60 :P
[13:35:20] -ixelp- V.A. - Polish New Wave(1983)(Coldwave)(NewWave)Full Album - YouTube
[13:35:56] <selwyn> thanks!
[13:37:32] <shka> also, you ok, bro?
[13:37:48] <selwyn> simply enjoying the music
[13:37:48] <shka> phd + doomer music sounds suspicious 
[13:37:51] <selwyn> lol
[13:38:01] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:38:55] <selwyn> i am writing all day long for no money
[13:38:58] <selwyn> but the end is in sight
[13:39:19] <selwyn> morale high
[13:43:25] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: sp (~sp@user/susam) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Bridge terminating on SIGTERM)
[13:44:52] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.4)
[13:46:25] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[13:50:35] <Gnuxie> don't you only have 10 days?
[13:50:46] <selwyn> a month
[13:50:57] *** Joins: sp (~sp@user/susam)
[13:50:58] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[13:50:58] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[13:51:03] <selwyn> its also basically finished
[13:51:14] <selwyn> rewriting parts of it
[13:55:35] *** Joins: hayley (~theemacss@user/hayley)
[14:02:15] <Gnuxie> oki
[14:02:20] <Gnuxie> good luck
[14:03:15] <selwyn> thanks!
[14:03:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[14:14:12] <selwyn> cornwall is getting bodied by the storm
[14:34:48] <ck_> oh no
[14:34:51] <ck_> will The Island hold?
[14:42:03] <edgar-rft> Rungholt will raise from the bottom of the North Sea :-)
[14:44:19] <gilberth> Sure.
[14:44:36] <selwyn> https://www.youtube.com/watch?app=desktop&v=vPQh1FrbOc0&ab_channel=BIGJETTV
[14:44:36] -ixelp- LIVE: Storm Eunice at London Heathrow Airport - YouTube
[14:45:05] <selwyn> > big jet tv
[14:45:35] <ck_> since I was a young child, I always remembered these profound words
[14:45:43] <ck_> The Island (Newquay)
[14:46:01] <ck_> The sea has eroded a section of softer rock to create this picturesque setting on Cornwall's northern coast.
[14:47:06] <ck_> selwyn: "there's another one right there" commenter sounds like Sean Bean in Ronin.
[14:48:16] <gilberth> It's still quiet here, storm is expected for tonight.
[14:49:19] <Gnuxie> barbed wire fence so i can't stowaway to escape plague island
[14:50:04] <Gnuxie> did you know we have a new variant of omichron here called BA.2
[14:50:54] <Gnuxie> https://www.biorxiv.org/content/10.1101/2022.02.14.480335v1
[14:50:56] -ixelp- Virological characteristics of SARS-CoV-2 BA.2 variant | bioRxiv
[14:51:05] <edgar-rft> we had a bit of wind here since yesterday but nothing really serious, but I'm far away from the north
[14:51:12] <selwyn> british ailment 2
[14:51:23] <gilberth> selwyn: That reminds me of <https://www.youtube.com/watch?v=C2vc87SXSu0>
[14:51:23] -ixelp- Landeversuch während des Sturmes Emma am 1.3.2008 in Hamburg einer A 320 - YouTube
[14:52:48] <gilberth> egdar-rft: I don't expect much to happen. It's just "a bit windy", nothing special.
[14:53:41] <hayley> I think I broke beach, he agrees with the idea I proposed in #sicl!
[14:58:01] <gilberth> Wind could be strange. My sister, who lives at the North Sea, had a little shed. There was a storm once and the shed went airborne and was found high up at the trees and bits at the neighbors place some few hundred meters down the road. However, at the place the shed used to be next morning she found sitting there and upright as if nothing happened her bicycle.
[14:58:20] <hayley> gilberth: Now's your chance to propose NaN boxing in #sicl.
[14:58:43] <edgar-rft> I've heard airports and railways stopped travelling for hours yesterday in northern germany because of the storm
[14:58:47] <gilberth> hayley: Depends on my mood. Are you selling tickets?
[14:58:56] <ck_> yes, they did
[14:58:59] <ck_> not completely though
[14:59:24] <hayley> gilberth: Yes, one GPU for a ticket.
[15:00:29] <gilberth> You can have my Quadro. :-) Wait a second, I don't need a ticket, do I?
[15:00:39] <edgar-rft> Gilberth will become our new NaN Boxing Champion.
[15:00:54] <gilberth> lol
[15:03:10] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[15:03:35] <hayley> beach seems to be in a good mood, since we did not manage to disagree on lazy promotion of cons cells for address-based hashing.
[15:11:31] <ck_> with NaN bread served at the breaks?
[15:12:13] <selwyn> lol
[15:26:01] <hayley> https://multicians.org/thvv/comix.html
[15:26:02] -ixelp- Software Engineering Comix
[15:28:03] <selwyn> there is a universal speed limit of 50mph, which doesn't affect a slower line near where i live
[15:28:12] <selwyn> however, they took the precaution of simply closing that one altogether lol
[15:28:28] <selwyn> train line, that is
[15:42:09] *** Joins: random-nick (~random-ni@87.116.179.129)
[16:13:44] <ck_> what kind of train is it? an overground part of the underground, or a regional train
[16:17:23] *** Joins: notzmv (~zmv@user/notzmv)
[16:19:56] *** Joins: epony (epony@user/epony)
[16:24:12] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[16:32:45] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[16:41:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:57:45] <selwyn> a regional train line called 'thameslink'
[17:18:53] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:43:36] *** Joins: treflip (~user@user/treflip)
[18:43:54] *** Joins: eugercek (~user@user/eugercek)
[18:48:40] <shka> lol, azure support loves to waste your time
[18:48:44] <shka> my question
[18:49:00] <shka> "Are Azure linux VMs always little endian?"
[18:49:12] <shka> "Please do let us know your comfortable timings so that we can schedule a call for remote session so that we can understand your issue better."
[18:49:30] <shka> Wtf dude, that was a simple yes/no question.
[18:49:43] <semz> reeks of automated reply
[18:52:18] <shka> still, yes/no question
[18:53:04] <shka> and going to that call would require more time then simply accounting for endian differences
[18:59:20] <ck_> but it wouldn't create an opportunity to sell you something
[19:15:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[19:18:19] <SAL9000> shka: answer is probably "yes"; x86 is always little-endian, I believe.
[19:25:33] <selwyn> i saw some dead pigeons in the park sadly
[19:25:42] <selwyn> how could a storm have killed them?
[19:25:55] <ck_> ballistic wood
[19:27:21] <shka> selwyn: hail?
[19:27:36] <selwyn> its dry
[19:27:40] <shka> selwyn: yeah, I am also fairly sure, but shit happens
[19:27:46] <selwyn> and the other pigeons are fine
[19:27:49] <shka> SAL9000: sorry
[19:28:13] <selwyn> i am guessing that the wind is simply very stressful
[19:28:20] <SAL9000> why sorry? it's a valid question if you're dealing with ARM (or RISC-V) :)
[19:28:30] <selwyn> flying is very tough on the cardiovascular system in normal circumstances
[19:29:14] <selwyn> or so i have been told
[19:29:59] <shka> SAL9000: i wanted to highlight you but selwyned by a mistake
[19:30:06] <SAL9000> ah :)
[19:30:20] <selwyn> lol
[19:30:54] <shka> i THINK it has to be x86, but you never know for sure
[19:59:47] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:28:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[20:34:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:50:23] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[20:52:26] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:05:47] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[21:09:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a0be:91d2:ac63:61de)
[21:18:58] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Quit: I'll be back.)
[21:19:26] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[22:06:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[22:19:41] *** Joins: notzmv (~zmv@user/notzmv)
[22:47:04] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[22:55:37] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:58:09] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ede5:6357:bb4:e959)
[23:02:05] <ck_> I was thinking about calling a self-help group into existence -- Cloud Haters Anonymous
[23:02:30] <ck_> apply by describing yourself as a spec in yaml format
[23:08:53] *** Quits: shka (~herr@109.231.3.55) (Quit: Konversation terminated!)
[23:46:53] <vms14> I prefer drugs
[23:47:04] <vms14> what's why I ended in lisp
[23:52:46] *** Joins: aeth_ (~aeth@user/aeth)
[23:52:47] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:52:50] *** aeth_ is now known as aeth
[23:58:25] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
