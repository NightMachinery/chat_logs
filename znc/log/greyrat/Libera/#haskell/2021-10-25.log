[00:02:19] *** Joins: hyiltiz (~quassel@31.220.5.250)
[00:04:07] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[00:10:08] *** Quits: olibiera (~olibiera@a79-169-181-190.cpe.netcabo.pt) (Quit: Client closed)
[00:10:37] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (Ping timeout: 252 seconds)
[00:10:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:11:18] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[00:16:01] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[00:16:57] *** Joins: seiryn (~seiryn@2a01cb040147e000baac7520288c550c.ipv6.abo.wanadoo.fr)
[00:17:11] *** Quits: seiryn (~seiryn@2a01cb040147e000baac7520288c550c.ipv6.abo.wanadoo.fr) (Quit: WeeChat 3.3)
[00:18:17] *** Joins: seiryn (~seiryn@2a01cb040147e000baac7520288c550c.ipv6.abo.wanadoo.fr)
[00:18:41] <fendor[m]> I have a endless cycle in a program I don't control, I want to abort execution after 3 seconds. Can I force that somehow? Performance hits are fine and I am already using `-fno-omit-yields`
[00:20:00] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[00:21:19] <geekosaur> if System.Timeout doesn't work, probably not. hm, unless you are talking about an external program via System.Process, then you might be able to terminate the process (but this might require using the right process module for the system instead of the generic one)
[00:21:37] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 252 seconds)
[00:23:39] <fendor[m]> not an external program, unfortunately
[00:26:19] *** Joins: argento (~argent0@168-227-96-26.ptr.westnet.com.ar)
[00:28:27] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:30:01] *** onion is now known as yin
[00:31:35] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 264 seconds)
[00:32:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[00:34:29] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[00:37:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:39:54] *** Quits: seiryn (~seiryn@2a01cb040147e000baac7520288c550c.ipv6.abo.wanadoo.fr) (Quit: WeeChat 3.3)
[00:42:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[00:42:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:43:34] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Quit: (zzz))
[00:43:45] *** Quits: ubert (~Thunderbi@91.141.57.54.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[00:44:21] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb555575e56a44659e48.dip0.t-ipconnect.de)
[00:46:22] <koz> Is there any guides or instructions on how to do a 2-column layout with 'pretty'?
[00:46:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 244 seconds)
[00:48:01] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb55ecd1c0be3c49da81.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[00:48:32] *** Joins: fluffyballoon (~user@131.93.208.196)
[00:49:04] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:49:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:54:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[00:57:36] *** Joins: burnsidesLlama (~burnsides@client-8-77.eduroam.oxuni.org.uk)
[00:58:53] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:00:01] *** Joins: jgeerds (~jgeerds@55d40de2.access.ecotel.net)
[01:01:43] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:02:37] *** Quits: burnsidesLlama (~burnsides@client-8-77.eduroam.oxuni.org.uk) (Remote host closed the connection)
[01:03:14] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[01:05:13] *** Quits: tabemann (~tabemann@2600:1700:7990:24e0:ab53:1c93:684e:f2ba) (Remote host closed the connection)
[01:05:25] *** Joins: tabemann (~travisb@2600:1700:7990:24e0:95ab:c391:8962:61e4)
[01:07:03] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[01:11:20] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 258 seconds)
[01:12:55] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[01:21:21] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 245 seconds)
[01:22:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:23:11] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 264 seconds)
[01:24:46] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[01:25:06] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:25:28] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[01:26:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[01:27:33] *** Joins: cjb (~cjbayliss@user/cjb)
[01:29:17] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:29:38] *** Joins: cheater (~Username@user/cheater)
[01:30:35] *** Quits: cjb (~cjbayliss@user/cjb) (Client Quit)
[01:32:10] *** Joins: cjb (~cjbayliss@user/cjb)
[01:33:13] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[01:38:36] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:40:38] *** Quits: jgeerds (~jgeerds@55d40de2.access.ecotel.net) (Ping timeout: 265 seconds)
[01:43:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 244 seconds)
[01:45:31] *** Quits: max22- (~maxime@2a01cb0883359800e0f5f648c85a67fc.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[01:46:15] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[01:51:13] <jlamothe> Can anyone explain to me what's going on with the following error message when I try to do a stack sdist: Packages using 'cabal-version: 2.0' and the autogenerated module Paths_* must include it also on the 'autogen-modules' field besides 'exposed-modules' and 'other-modules'. This specifies that the module does not come with the package and is generated on setup. Modules built with a custom Setup.hs 
[01:51:19] <jlamothe> script also go here to ensure that commands like sdist don't fail.
[01:51:49] <jlamothe> I've never encountered this before
[01:52:31] <c_wraith> It seems like a pretty complete message.
[01:53:34] <c_wraith> Some modules are created during package installation.  They aren't included in the sdist, so they don't go in exposed-modules or other-modules.  But newer version of cabal still ask you to say that you're using them.
[01:53:45] *** Joins: echoSMILE (~echoSMILE@user/echosmile)
[01:55:01] <jlamothe> Right, but those would go in the cabal file, wouldn't they? That file is generated by stack itself.
[01:55:31] <jlamothe> The funny thing is that I don't even use the Paths_* module anywhere in my project.
[01:55:50] <c_wraith> sounds like hpack is doing funny stuff
[01:56:03] <c_wraith> Like trying to stick Paths_* in other-modules
[01:56:20] <awpr> I've had to disable those for unrelated reasons.  https://paste.tomsmeding.com/rAcnIibl
[01:56:37] <jlamothe> It is... I wonder why.
[01:56:40] <awpr> if you're not using them, disabling can make rebuilds less frequent
[01:57:40] <jlamothe> How do I disable?
[01:58:09] <awpr> by adding the snippet I linked to, into the `library:` section
[01:58:24] <awpr> (with your package name instead)
[01:59:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:59:55] <energizer> what is the name for syntax that's like haskell's?
[02:00:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:01:07] <Axman6> "Haskell like syntax" :P
[02:01:18] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 244 seconds)
[02:01:48] <geekosaur> haskell is declarative, but there are many ways to be declarative. personally I consider haskell's syntax to be in the ML family, but others would argue
[02:02:20] <Axman6> Haskell's syntax is agressively Haskellish
[02:06:31] *** Joins: wroathe (~wroathe@user/wroathe)
[02:07:18] *** Joins: fluffyballoon (~user@131.93.208.196)
[02:09:02] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 244 seconds)
[02:12:44] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:14:04] <Cajun> definitely ML family of syntax
[02:14:04] <awpr> any idea how to convince Stack to update its understanding of a package that's been revised on Hackage?  I've got CI builds failing because they haven't realized the version bounds have been loosened.  I had fixed the local build by deleting stack.yaml.lock, but on my CI, it creates a new one that still chooses the pre-revision version
[02:15:26] <kronicmage> does anyone know the default confidence used in quickcheck's checkCoverage?
[02:16:44] <kronicmage> ah nvm found it, it's 10^9
[02:18:58] *** Joins: jespada (~jespada@181.28.253.200)
[02:25:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[02:26:37] *** Quits: argento (~argent0@168-227-96-26.ptr.westnet.com.ar) (Ping timeout: 244 seconds)
[02:28:05] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:29:27] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 265 seconds)
[02:32:47] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb935575e56a44659e48.dip0.t-ipconnect.de)
[02:32:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[02:36:03] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb555575e56a44659e48.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[02:37:46] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[02:40:06] *** Quits: slep (~slep@cpc150002-brnt4-2-0-cust437.4-2.cable.virginm.net) (Ping timeout: 245 seconds)
[02:42:34] *** Joins: alx741 (~alx741@186.178.108.74)
[02:42:40] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[02:42:59] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[02:42:59] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[02:43:33] *** Joins: MQ-17J (~MQ-17J@8.21.10.17)
[02:50:59] *** Joins: dajoer (~david@user/gvx)
[02:51:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Remote host closed the connection)
[02:52:18] <ski> energizer : in what sense ?
[02:53:30] <liskin> awpr: do you "stack update" in CI? (maybe a silly question as it assumes ~/.stack is cached…)
[02:54:31] <energizer> ski: i guess "ML-like" is the answer i was looking for
[02:54:52] <ski> or maybe "Miranda-like" ?
[02:54:53] <ski> "ISWIM-like" ?
[02:55:11] <ski> (it all depends on what features you have in mind ..)
[02:55:48] <energizer> i mean stuff like juxtapose-to-call and auto-curry
[02:55:50] <sm> awpr: I think stack/stackage intentionally ignores revisions.. or it's configurable in build-constraints.yaml
[02:55:52] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[02:56:49] <sm> correction, just a few packages are marked as `no-revisions:`
[02:57:28] <sm> and certainly try liskin's suggestion
[02:57:29] <ski> hm .. maybe "FP-like" (as in FP, the language (by Backus)), or possibly just "lambda-calculus-like" ?
[02:58:14] <ski> (also, "auto-curry" is a bad way to think about it ..)
[02:58:39] <energizer> i dont think a calculus has a syntax
[02:59:17] <energizer> at least not a concrete syntax
[02:59:42] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 260 seconds)
[03:01:29] <ski> Alonzo Church clearly introduces a concrete syntax in his 1941 "The Calculi of Lambda-Conversion" at <https://ia800107.us.archive.org/1/items/AnnalsOfMathematicalStudies6ChurchAlonzoTheCalculiOfLambdaConversionPrincetonUniversityPress1941/annalsOfMathematicalStudies6ChurchAlonzo-theCalculiOfLambda-conversion-princetonUniversityPress1941.pdf>
[03:02:07] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 258 seconds)
[03:04:25] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb935575e56a44659e48.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:07:50] *** Joins: hyiltiz (~quassel@31.220.5.250)
[03:15:12] *** Quits: ssipos (~ssipos@86.123.18.123) (Quit: WeeChat 3.3)
[03:17:04] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[03:18:14] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::7f76)
[03:18:41] *** Joins: argento (~argent0@168-227-96-26.ptr.westnet.com.ar)
[03:23:35] <AWizzArd> Uh. Really? Getting a substring of a Data.Text is O(n)?
[03:24:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 244 seconds)
[03:24:30] <c_wraith> it's a variable-length encoding
[03:26:01] *** spider_ is now known as spider
[03:26:16] <c_wraith> even if you ignore that codepoints might be different sizes, that doesn't account for the fact that codepoints aren't what people think of as "characters" in the general case
[03:26:45] <c_wraith> I have *no* idea what getting the substring of Text does with the indices you pass it
[03:27:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[03:28:46] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[03:28:57] *** Quits: platz_ (~platz@40.122.118.113) (Ping timeout: 258 seconds)
[03:28:58] <AWizzArd> c_wraith: okay thanks, I just would have expected that it could be closer to O(1).
[03:29:21] <c_wraith> Text also doesn't document what it does.
[03:29:36] <c_wraith> It says "characters".
[03:29:52] <AWizzArd> c_wraith: this would probably really require to manage some kind of internal index which may cost some more memory.
[03:30:31] <AWizzArd> c_wraith: always surprising how difficult strings can be :)
[03:30:37] <Axman6> you I've thought about that problem a lot, and using succinct structures you can got away with something like less than 1% overhead
[03:30:53] *** Joins: platz (~platz@user/platz)
[03:31:12] <c_wraith> My solution is to either write a full text editor or not edit text.
[03:31:20] <c_wraith> there is no in-between that works well
[03:34:16] <AWizzArd> yeah
[03:39:38] <pavonia> Axman6: How would such a stucture look like?
[03:40:40] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[03:43:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:43:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:43:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:43:43] *** Joins: wroathe (~wroathe@user/wroathe)
[03:45:07] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 252 seconds)
[03:46:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:47:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:48:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[03:48:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:48:54] *** Quits: cads (~asdf@ip-64-72-99-234.lasvegas.net) (Quit: Leaving)
[03:49:30] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:49:38] *** Joins: cads (~cads@ip-64-72-99-234.lasvegas.net)
[03:51:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[03:56:30] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 244 seconds)
[03:56:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Ping timeout: 264 seconds)
[03:57:01] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 244 seconds)
[04:03:12] *** Joins: D4v1d (~D4v1d@user/d4v1d)
[04:05:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[04:05:14] <D4v1d> Hello I am trying to install glirc but I encountered the error as shown in https://paste.tomsmeding.com/zsunUhIt ; however I already have openssl installed via homebrew and has linked them. Would you please help? Thank you.
[04:07:19] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:08:31] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:09:06] <geekosaur> ghoulguy, ^^ thta looks a rather custom error message, presumably you know what else it might be doing?
[04:11:46] *** Joins: zebrag (~chris@user/zebrag)
[04:14:38] <D4v1d> He may be busy 'cause he is a staffer
[04:18:06] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:19:08] <awpr> liskin: actually I think this is likely to be it; I do have caching of the Hackage index but no explicit update step.  will try right now
[04:20:13] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[04:21:49] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:23:13] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[04:28:55] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[04:29:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:30:37] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 244 seconds)
[04:33:13] *** Quits: juand (~a@p200300ef973db1c64086f0a6a24fc4dd.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[04:33:30] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[04:34:14] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:38:47] *** Quits: iqubic (~user@2601:602:9502:c70:3ba1:e05a:f13:1fa6) (Ping timeout: 264 seconds)
[04:42:03] <Axman6> pavonia: take a look at rank/sleect operations over succinct structures -  I couldn't find a good liunk in 2 mins of googling but I might come back to it
[04:43:25] *** Quits: argento (~argent0@168-227-96-26.ptr.westnet.com.ar) (Quit: leaving)
[04:43:33] *** Quits: D4v1d (~D4v1d@user/d4v1d) (Quit: Client closed)
[04:45:42] *** Joins: D4v1d (~D4v1d@user/d4v1d)
[04:47:09] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 244 seconds)
[04:47:23] <awpr> no luck, Stack thinks there are no updates available
[04:48:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:50:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:52:20] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:55:13] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:58:59] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:03:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[05:06:07] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[05:06:58] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[05:07:15] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:07:37] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[05:08:33] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:08:33] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:08:33] *** Joins: wroathe (~wroathe@user/wroathe)
[05:10:55] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::7f76) (Ping timeout: 252 seconds)
[05:14:14] *** Quits: D4v1d (~D4v1d@user/d4v1d) (Quit: updating Firefox)
[05:14:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[05:16:35] *** Joins: Player001 (~Player001@user/player001)
[05:16:38] *** Quits: alx741 (~alx741@186.178.108.74) (Quit: alx741)
[05:16:47] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[05:18:59] *** Quits: xff0x (~xff0x@2001:1a81:52fb:1200:6ff2:1757:36ee:1f2f) (Ping timeout: 264 seconds)
[05:20:33] *** Joins: xff0x (~xff0x@2001:1a81:538f:ce00:2246:a77f:21ad:4c1c)
[05:20:42] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[05:23:17] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:27:25] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 252 seconds)
[05:29:04] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 252 seconds)
[05:29:58] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[05:32:01] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[05:34:57] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:42:43] *** Joins: D4v1d (~D4v1d@user/d4v1d)
[05:43:22] <D4v1d> My issue has been solved! I solved it by building OpenSSL from the canonical master branch instead of using Homebrew and the error message disappears!
[05:43:54] <D4v1d> *The HSOpenSSL build error disappeared
[05:46:56] <kronicmage> does anyone know if there's a 4 bit word/int type?
[05:47:06] <kronicmage> trying to limit inputs to a single base 16 digit
[05:48:36] <ski> <https://hackage.haskell.org/package/leancheck-0.9.10/docs/Test-LeanCheck-Utils-Types.html#t:Int4>,<https://hackage.haskell.org/package/leancheck-0.9.10/docs/Test-LeanCheck-Utils-Types.html#t:Word4> apparently
[05:48:50] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[05:49:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[05:52:43] *** Quits: econo (uid147250@user/econo) (Read error: Connection reset by peer)
[05:52:44] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Read error: Connection reset by peer)
[05:54:13] *** Joins: econo (uid147250@user/econo)
[05:54:14] *** Joins: bitmapper (uid464869@lymington.irccloud.com)
[05:54:30] *** Quits: D4v1d (~D4v1d@user/d4v1d) (Quit: D4v1d)
[05:59:49] <jophish> <kronicmage> "does anyone know if there's a..." <- Also, `Unsigned 4` (or `Signed 4`) from `clash-prelude`
[06:02:06] <jophish> Or https://hackage.haskell.org/package/finite-typelits-0.1.4.2/docs/Data-Finite.html#t:Finite
[06:02:13] *** Joins: jkaye (~jkaye@2601:281:8300:7530:bdc6:f088:1acd:1c4a)
[06:02:36] <awpr> also https://hackage.haskell.org/package/fin-int along the same lines, you could do `Fin 16`
[06:02:50] <awpr> (and it's an `Int` rather than `Integer` under the hood)
[06:03:32] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:04:05] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:06:24] *** Joins: emf (~emf@2620:10d:c090:400::5:b46d)
[06:08:05] *** Quits: td_ (~td@muedsl-82-207-238-060.citykom.de) (Ping timeout: 260 seconds)
[06:09:34] *** Joins: td_ (~td@94.134.91.68)
[06:11:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 244 seconds)
[06:13:32] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:15:41] <awpr> liskin: you were right after all, I just had to make sure the `stack update` was before the `stack setup`, because apparently the latter chooses all the deps and writes a `stack.yaml.lock`, so by having them in the wrong order, it chose the stale .cabal file before the update downloaded it.  thanks!
[06:20:30] *** Quits: Player001 (~Player001@user/player001) (Quit: read Deleuze)
[06:23:22] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 258 seconds)
[06:30:29] *** Quits: MidAutumnMoon (~MidAutumn@user/midautumnmoon) (Quit: Leaving for a break - theLounge)
[06:31:08] *** Joins: MidAutumnMoon (~MidAutumn@user/midautumnmoon)
[06:38:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Remote host closed the connection)
[06:38:41] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[06:41:14] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[06:42:50] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[06:53:08] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:53:47] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bdc6:f088:1acd:1c4a) (Ping timeout: 264 seconds)
[06:55:17] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 244 seconds)
[06:55:20] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[06:56:03] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[07:00:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:02:17] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:03:20] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:03:35] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:09:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[07:10:11] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[07:26:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:26:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:26:11] *** Joins: wroathe (~wroathe@user/wroathe)
[07:30:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:33:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[07:33:54] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[07:36:27] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[07:36:51] *** Joins: Player001 (~Player001@user/player001)
[07:39:23] *** Quits: MQ-17J (~MQ-17J@8.21.10.17) (Ping timeout: 264 seconds)
[07:39:49] *** Joins: mei (~mei@user/mei)
[07:40:08] *** Quits: cjb (~cjbayliss@user/cjb) ()
[07:41:06] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[07:50:43] <dsal> Ick, looks like an attoparsec upgrade is coming and breaks a library I depend on.
[07:53:09] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[07:57:36] *** Joins: delYsid (~user@62-178-101-151.cable.dynamic.surfer.at)
[07:57:43] *** Parts: delYsid (~user@62-178-101-151.cable.dynamic.surfer.at) ()
[07:58:21] *** Joins: MQ-17J (~MQ-17J@8.21.10.17)
[08:01:00] *** Joins: mbuf (~Shakthi@122.174.32.225)
[08:02:15] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[08:02:26] *** Joins: mcglk (~mcglk@131.191.49.120)
[08:04:45] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[08:08:41] <Axman6> what's changed in it?
[08:09:14] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[08:13:34] *** Joins: zaquest (~notzaques@5.128.210.178)
[08:14:05] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[08:14:47] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:5872:8a70:85c4:9bd4) (Ping timeout: 264 seconds)
[08:22:36] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:24:41] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[08:26:13] *** Quits: benin (~benin@183.82.207.116) (Ping timeout: 244 seconds)
[08:27:03] <dsal> I'm not entirely sure.  It broke websockets and I've got a library that depends on that.
[08:27:19] <dsal> I should figure out how to make my library not depend on websockets, but use it if you want it.  That sounds complicated.
[08:28:50] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:30:24] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (*.net *.split)
[08:30:24] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (*.net *.split)
[08:30:24] *** Quits: soft (~soft-matr@2001:470:69fc:105::c75) (*.net *.split)
[08:30:24] *** Quits: dexmad[m] (~dexmadmat@2001:470:69fc:105::e056) (*.net *.split)
[08:30:24] *** Quits: ru0mad[m] (~ru0madmat@2001:470:69fc:105::9b2) (*.net *.split)
[08:30:25] *** Quits: srid[m] (~sridmatri@2001:470:69fc:105::1c2) (*.net *.split)
[08:30:25] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (*.net *.split)
[08:30:25] *** Quits: hsek[m] (~hsekmatri@2001:470:69fc:105::d18f) (*.net *.split)
[08:30:25] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[08:30:25] *** Quits: reddishblue[m] (~reddishbl@2001:470:69fc:105::21eb) (*.net *.split)
[08:30:25] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[08:30:25] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (*.net *.split)
[08:30:25] *** Quits: quantum (~quantum@user/quantum/x-8556232) (*.net *.split)
[08:30:25] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (*.net *.split)
[08:30:25] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (*.net *.split)
[08:30:25] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (*.net *.split)
[08:30:25] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[08:30:25] *** Quits: tomjaguarpaw (~tom@li367-225.members.linode.com) (*.net *.split)
[08:30:25] *** Quits: choucavalier (~choucaval@2001:41d0:a:2158::1) (*.net *.split)
[08:30:25] *** Quits: pie__ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[08:30:25] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[08:30:25] *** Quits: micro_ (~micro@user/micro) (*.net *.split)
[08:30:25] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (*.net *.split)
[08:30:25] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[08:30:25] *** Quits: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0) (*.net *.split)
[08:30:25] *** Quits: defanor (~defanor@tart.uberspace.net) (*.net *.split)
[08:30:25] *** Quits: jassob2 (~jassob@korrob.vth.sgsnet.se) (*.net *.split)
[08:30:25] *** Quits: orcus- (~orcus@user/brprice) (*.net *.split)
[08:30:25] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[08:30:25] *** Quits: lstor (~lstor@user/lstor) (*.net *.split)
[08:30:25] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[08:30:25] *** Quits: nonzen_ (~nonzen@user/nonzen) (*.net *.split)
[08:30:25] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (*.net *.split)
[08:30:25] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[08:30:25] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[08:30:25] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (*.net *.split)
[08:30:25] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (*.net *.split)
[08:30:25] *** Quits: immae (~immae@2a01:4f8:141:53e7::) (*.net *.split)
[08:30:25] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[08:30:25] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[08:30:25] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[08:30:25] *** Quits: liskin (~liskin@xmonad/liskin) (*.net *.split)
[08:30:25] *** Quits: oxytocat (~alloca@user/suppi) (*.net *.split)
[08:30:25] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[08:30:25] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[08:30:25] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[08:30:32] *** Joins: tomjaguarpaw (~tom@li367-225.members.linode.com)
[08:30:34] *** Joins: xerox (~edi@user/edi)
[08:30:34] *** Joins: lstor (~lstor@user/lstor)
[08:30:34] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[08:30:34] *** Joins: micro (~micro@user/micro)
[08:30:35] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:30:36] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[08:30:38] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[08:30:39] *** Joins: defanor (~defanor@tart.uberspace.net)
[08:30:40] *** Joins: Unode (~Unode@194.94.44.220)
[08:30:41] *** Joins: carbolymer (~carbolyme@dropacid.net)
[08:30:43] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[08:30:47] *** Joins: jassob2 (~jassob@korrob.vth.sgsnet.se)
[08:30:51] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[08:30:51] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[08:30:51] *** Joins: polux (~polux@51.15.169.172)
[08:30:55] *** Joins: oxytocat (~alloca@2a03:4000:f:7ca:7407:d1ff:fe34:8cd0)
[08:30:55] *** Joins: liskin (~liskin@ackle.nomi.cz)
[08:30:56] *** Quits: liskin (~liskin@ackle.nomi.cz) (Signing in (liskin))
[08:30:56] *** Joins: liskin (~liskin@xmonad/liskin)
[08:30:57] *** Quits: oxytocat (~alloca@2a03:4000:f:7ca:7407:d1ff:fe34:8cd0) (Signing in (oxytocat))
[08:30:57] *** Joins: oxytocat (~alloca@user/suppi)
[08:30:58] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[08:31:00] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[08:31:02] *** Joins: jocke-l (jocke-l@a.x0.is)
[08:31:16] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[08:31:20] *** Joins: orcus (~orcus@user/brprice)
[08:31:22] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[08:31:26] *** Joins: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0)
[08:31:28] *** Joins: nonzen (~nonzen@user/nonzen)
[08:31:43] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[08:31:46] *** Joins: reddishblue[m] (~reddishbl@2001:470:69fc:105::21eb)
[08:31:49] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[08:32:44] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Client Quit)
[08:33:17] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[08:33:23] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 264 seconds)
[08:33:25] *** Joins: hsek[m] (~hsekmatri@2001:470:69fc:105::d18f)
[08:34:16] *** Joins: Ekho (~Ekho@user/ekho)
[08:34:44] *** Joins: ru0mad[m] (~ru0madmat@2001:470:69fc:105::9b2)
[08:34:51] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[08:34:54] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[08:34:55] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[08:35:05] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[08:35:15] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[08:35:19] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[08:35:33] *** Joins: srid[m] (~sridmatri@2001:470:69fc:105::1c2)
[08:36:59] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:37:10] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[08:37:24] *** Joins: dexmad[m] (~dexmadmat@2001:470:69fc:105::e056)
[08:37:36] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[08:37:41] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[08:38:05] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[08:47:47] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 264 seconds)
[08:53:37] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:58:15] *** Joins: nfip^ (~nfip@wsip-68-227-92-38.mc.at.cox.net)
[09:04:55] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:08:31] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[09:09:42] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[09:18:29] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[09:19:06] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:19:47] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[09:24:10] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Client Quit)
[09:28:36] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[09:31:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:32:50] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[09:35:23] <kronicmage> is there any way to set over two lens setters at once? something like `set (_1 && _2) 5 (undefined, undefined)` to get `(5, 5)`
[09:39:47] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:41:41] <Axman6> % set (_1 <> _2) (undefined, undefined) 5 -- I don't think this will work, but works for getters/traversals
[09:41:42] <yahb> Axman6: ; <interactive>:142:1: error:; * Could not deduce (Field1 s0 t a0 (a1, b)); from the context: (Semigroup t, Field1 s t a (a1, b), Field2 s t a (a1, b), Num s); bound by the inferred type for `it':; forall {t} {s} {a} {a1} {b}. (Semigroup t, Field1 s t a (a1, b), Field2 s t a (a1, b), Num s) => t; at <interactive>:142:1-39; The type variables `s0', `a0' a
[09:42:02] <Axman6> % set (_1 <> _2) 5 (undefined, undefined)
[09:42:02] <yahb> Axman6: ; <interactive>:143:1: error:; * Ambiguous type variable `b0' arising from a use of `print'; prevents the constraint `(Show b0)' from being solved.; Probable fix: use a type annotation to specify what `b0' should be.; These potential instances exist:; instance Show a => Show (ZipList a) -- Defined in `Control.Applicative'; instance Show NestedAtomically -- Defined in
[09:42:12] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[09:42:31] <Axman6> % set (_1 <> _2) 5 (True, False) :: (Int,Int)
[09:42:31] <yahb> Axman6: ; <interactive>:144:6: error:; * Couldn't match type `Int' with `Bool'; arising from a functional dependency between:; constraint `Field1 (Bool, Bool) (Int, Int) Bool Int' arising from a use of `_1'; instance Field1 (a, b) (a', b) a a' at <no location info>; * In the first argument of `(<>)', namely `_1'; In the first argument of `set', namely `(_1 <> _2)'; 
[09:43:27] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Read error: Connection reset by peer)
[09:43:53] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[09:46:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:46:52] *** Joins: lortabac (~lortabac@abayonne-651-1-57-12.w92-156.abo.wanadoo.fr)
[09:48:27] *** Joins: fendor (~fendor@77.119.214.28.wireless.dyn.drei.com)
[09:49:20] *** Joins: alzgh (~alzgh@user/alzgh)
[09:50:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 244 seconds)
[09:54:32] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:54:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[09:54:56] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[09:56:37] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 244 seconds)
[10:04:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[10:09:26] <jackdk> Conduit question: I have a ConduitT () ByteString m r representing a large file, and I want to process it in chunks, where each chunk is between some minimum and maximum (constant) number of bytes. I feel like I would want to write a function like `chunksBetween :: Monad m => Integer -> Integer -> ConduitT i ByteString m r -> ConduitT i (ConduitT i ByteString m ()) m r` that streams smoothly from the input conduit.
[10:09:31] <jackdk> Axman6: ;-)
[10:10:41] <jackdk> Pipes appears to have this operator as in pipes-group, as some kind of crazy lens that lets you look at it as a FreeT or something, and I can't make heads or tails of it
[10:11:07] <jackdk> Streaming should give you a Stream (Of (Stream (Of o))) ...
[10:11:48] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[10:11:49] <Axman6> yeah that pretty much sums up my question, ta :P
[10:12:45] <jackdk> It would be sufficient to ignore i; I'm happy to work over `ConduitT () ByteString m ()`
[10:13:05] *** Joins: hyiltiz (~quassel@31.220.5.250)
[10:16:37] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[10:18:44] <Axman6> streaming does it in a slight weird way, where it has splitAt :: Monad m => Int64 -> ByteStream m r -> ByteStream m (ByteStream m r) (where ByteStream is basically Stream (Of ByteString) m r)
[10:19:19] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[10:19:21] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 244 seconds)
[10:19:55] *** Joins: hyiltiz (~quassel@31.220.5.250)
[10:23:11] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[10:25:30] *** Joins: janus34 (~janus@84-107-171-239.cable.dynamic.v4.ziggo.nl)
[10:25:41] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[10:27:08] *** Joins: michalz (~michalz@185.246.204.41)
[10:29:13] <janus34> Been studying haskell the last couple of weekends and yesterday I thought: "How do you print from a haskell program?"
[10:30:26] <janus34> So a quick search showed that printing is popular and most of it is pretty! : ) After filtering out all the pretty-printers the search came up with ... nothing.
[10:31:34] <janus34> I can come up with some ways to create files that would print pretty, but how do you print to a printer from haskell?
[10:31:57] <jackdk> Axman6: I think you need to seal the conduit and the use Data.Conduit.List.unconsM but that's as far as I've managed
[10:33:49] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[10:38:47] *** Joins: ubert (~Thunderbi@77.119.171.187.wireless.dyn.drei.com)
[10:42:23] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[10:43:19] <Axman6> jackdk: I don't know hwo to print to a printer in any language - personally I would generate HTML or a PDF and then use my OS. There's probably ways to use postscript... but that sounds like not a lot of fun. this is not a simple problem IMO
[10:43:30] <Axman6> uh, janus34
[10:43:33] <jackdk> I think you mean the other `ja<tab>`
[10:43:45] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[10:43:51] <Axman6> `j<tab>`, because I'm a monster, but yeah
[10:47:25] <janus34> I have done PostScript in the past and that is one of the ways I was thinking about. I think I was mostly surprised that a search for it turned up nothing.
[10:48:22] *** Joins: dschrempf (~dominik@2a01-036d-0118-8903-9d8d-f8e1-b377-a2ae.pool6.digikabel.hu)
[10:49:54] <jackdk> Axman6: the other problem is that we want to pass a `ConduitT () ByteString (ResourceT IO) ()` into `chunkedBody`
[10:50:50] <janus34> People are doing financial backend stuff, so I would have expected invoices or inventory or something. It was just a thought, not a need.
[10:51:44] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[10:51:50] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:53:32] *** Joins: ub (~Thunderbi@77.119.171.187.wireless.dyn.drei.com)
[10:53:48] <lortabac> janus34: I guess most people delegate printing to the operating system or the browser
[10:54:37] <lortabac> it's something you generally try to avoid because of all the details that are hard to get right and the  differences between OS's
[10:54:40] *** opqdonut_ is now known as opqdonut
[10:56:35] *** Joins: chele (~chele@user/chele)
[10:58:26] <janus34> Yes and with pandoc you can convert them to multiple other formats. Thank you and I think I will pop in here some more in the future.
[10:59:30] <lortabac> janus34: the only time I really needed to print directly from an application I used QZTray, which gives you a simple API you can call from your browser
[11:00:10] <lortabac> but it was a very specific use case, most of the time you can just let users download the PS/PDF and print it themselves
[11:00:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:01:05] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:01:13] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:01:31] *** Quits: dschrempf (~dominik@2a01-036d-0118-8903-9d8d-f8e1-b377-a2ae.pool6.digikabel.hu) (Quit: WeeChat 3.3)
[11:02:13] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:02:44] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[11:03:20] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[11:09:32] <janus34> lortabac: I can see how that will be useful. Conclusion: Generate something printable and delegate.
[11:10:08] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[11:19:21] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Quit: Leaving)
[11:19:37] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[11:21:36] *** Quits: janus34 (~janus@84-107-171-239.cable.dynamic.v4.ziggo.nl) (Quit: janus34)
[11:23:01] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:24:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:24:59] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:26:46] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[11:29:12] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Read error: Connection reset by peer)
[11:30:05] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:32:57] *** Joins: jess (~jess@libera/staff/jess)
[11:33:19] *** Quits: echoSMILE (~echoSMILE@user/echosmile) (Ping timeout: 256 seconds)
[11:33:24] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Client Quit)
[11:33:51] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 245 seconds)
[11:35:09] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:35:16] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb935575e56a44659e48.dip0.t-ipconnect.de)
[11:35:44] *** Joins: hendursaga (~weechat@user/hendursaga)
[11:38:54] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:40] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:40:59] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[11:41:38] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:43:17] *** Joins: matsurago (~matsurago@p0602591-vcngn.tkyo.nt.ngn.ppp.ocn.ne.jp)
[11:45:22] <merijn> English question: "converges on" or "converges to"?
[11:46:31] <zincy> I like "converges to".
[11:47:34] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[11:47:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[11:47:37] *** allbery_b is now known as geekosaur
[11:48:15] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[11:50:44] <zincy> For building a turn based card game I can't choose between Machines or Streamly to implement the Mealy machines for game state
[11:50:50] <zincy> I am a bit lost in this design space.
[11:51:06] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[11:51:40] <zincy> What is the overlap between Machines and libraries like Streamly/Conduit/Pipes?
[11:52:18] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[11:56:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[12:01:11] *** Joins: jumper149 (~jumper149@80.240.31.34)
[12:01:35] *** Joins: vonfry (~user@116.236.75.238)
[12:02:59] *** Quits: bitmapper (uid464869@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:03:13] *** Joins: dschrempf (~dominik@2a01-036d-0118-8903-9d8d-f8e1-b377-a2ae.pool6.digikabel.hu)
[12:04:53] <tomsmeding> merijn: in maths it's "converges to"
[12:05:03] <tomsmeding> not sure how mathy your sentence is
[12:08:09] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[12:08:31] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[12:10:23] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:11:38] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[12:13:19] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[12:13:35] *** Quits: dschrempf (~dominik@2a01-036d-0118-8903-9d8d-f8e1-b377-a2ae.pool6.digikabel.hu) (Ping timeout: 264 seconds)
[12:18:02] *** Joins: seiryn (~seiryn@pop.92-184-118-190.mobile.abo.orange.fr)
[12:25:48] *** Parts: vonfry (~user@116.236.75.238) (ERC (IRC client for Emacs 27.2))
[12:26:11] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:28:55] *** Quits: juhp (~juhp@128.106.188.220) (Quit: juhp)
[12:33:05] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[12:34:06] *** Joins: juhp (~juhp@128.106.188.220)
[12:37:44] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:38:59] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[12:42:24] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[12:44:11] *** Quits: kritzefitz (~kritzefit@212.86.56.80) (Remote host closed the connection)
[12:47:05] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[12:49:29] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:49:57] *** Quits: matsurago (~matsurago@p0602591-vcngn.tkyo.nt.ngn.ppp.ocn.ne.jp) (Quit: Leaving)
[12:55:18] *** Joins: cfricke (~cfricke@user/cfricke)
[12:59:43] *** Joins: SoF (~skius@user/skius)
[13:03:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Remote host closed the connection)
[13:03:37] *** Joins: fendor_ (~fendor@178.115.73.9.wireless.dyn.drei.com)
[13:06:23] *** Quits: fendor (~fendor@77.119.214.28.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[13:16:01] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[13:18:48] *** Joins: max22- (~maxime@2a01cb08833598009d6e8b94d9b3ffbb.ipv6.abo.wanadoo.fr)
[13:20:31] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[13:23:30] *** Joins: dschrempf (~dominik@2a01-036d-0118-8903-1af3-00e0-6f62-6528.pool6.digikabel.hu)
[13:30:18] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[13:30:32] *** Joins: jgeerds (~jgeerds@55d40de2.access.ecotel.net)
[13:30:35] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:30:51] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:31:17] <liskin> awpr: glad to hear that :-)
[13:32:40] <kuribas> Once again, haskell tooling is driving me completely crazy.
[13:33:01] *** Quits: dschrempf (~dominik@2a01-036d-0118-8903-1af3-00e0-6f62-6528.pool6.digikabel.hu) (Ping timeout: 245 seconds)
[13:33:04] <kuribas> "eff is not a visible construtor field name"
[13:33:08] <kuribas> Yes in fact it is.
[13:33:33] <kuribas> and running with stack gives me other errors.
[13:33:33] *** bens_ is now known as bens
[13:34:16] <kuribas> But emacs flycheck (which also runs stack) gives another (wrong) error.
[13:34:23] *** Joins: __monty__ (~toonn@user/toonn)
[13:34:32] *** fendor_ is now known as fendor
[13:37:42] <jneira[m]> the first error is thrown by cabal?
[13:37:50] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 260 seconds)
[13:38:04] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[13:39:04] <kuribas> nope, both stack.
[13:39:25] <kuribas> maybe solving the errors on the other modules first will help this.
[13:39:48] <jneira[m]> so the error is shown in editor using lsp and hls?
[13:40:06] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[13:41:01] <kuribas> nah, this is flycheck-emacs
[13:41:03] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[13:42:03] <jneira[m]> hmm hls has problems with stack and exe/test components if the main lib does not build
[13:42:27] <jneira[m]> due to known `stack repl` limitations, so maybe it is affecting you too
[13:42:45] <jneira[m]> in the hls case make the lib build and restarting the editor helps
[13:43:06] <xsperry> what stack repl limitations?
[13:43:31] *** Joins: kritzefitz (~kritzefit@212.86.56.80)
[13:44:28] <jneira[m]> mainly https://github.com/commercialhaskell/stack/issues/4616
[13:44:48] <jneira[m]> but also https://github.com/commercialhaskell/stack/issues/5380
[13:45:08] <kuribas> jneira[m]: this is all in the lib.
[13:45:33] <jneira[m]> oh, so it might be not the same issue, sorry
[13:45:58] <kuribas> maybe it has to do with how the modules are loaded.
[13:46:12] <kuribas> Because the relevant records are generated using TH.
[13:47:19] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[13:48:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:49:02] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[13:49:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[13:50:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:51:55] *** Quits: kritzefitz (~kritzefit@212.86.56.80) (Remote host closed the connection)
[13:52:02] *** Joins: kritzefitz (~kritzefit@212.86.56.80)
[13:52:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[13:53:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[13:55:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[13:56:24] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:34d9:c297:fec0:5e7)
[13:56:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:56:45] *** Quits: kritzefitz (~kritzefit@212.86.56.80) (Remote host closed the connection)
[13:57:55] *** Joins: kritzefitz (~kritzefit@212.86.56.80)
[14:01:29] *** skn2 is now known as skn
[14:02:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[14:02:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:02:47] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[14:03:14] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[14:03:34] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[14:07:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[14:08:21] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[14:08:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:08:34] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:08:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Ping timeout: 245 seconds)
[14:09:00] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:10:35] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 264 seconds)
[14:10:46] *** Quits: jgeerds (~jgeerds@55d40de2.access.ecotel.net) (Ping timeout: 265 seconds)
[14:11:09] *** Quits: max22- (~maxime@2a01cb08833598009d6e8b94d9b3ffbb.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[14:11:48] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[14:12:17] *** Joins: Janus86 (~Janus@2001:1c04:3819:7d00:8949:b1fb:9d02:4b40)
[14:12:51] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[14:13:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[14:13:49] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[14:13:55] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:14:13] *** Joins: stef204 (~stef204@user/stef204)
[14:14:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:16:40] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:19:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:20:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:24:55] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[14:24:56] *** Quits: kritzefitz (~kritzefit@212.86.56.80) (Remote host closed the connection)
[14:25:05] *** Joins: kritzefitz (~kritzefit@212.86.56.80)
[14:25:44] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:26:20] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:30:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[14:31:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:32:30] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.3)
[14:32:44] *** Quits: Janus86 (~Janus@2001:1c04:3819:7d00:8949:b1fb:9d02:4b40) (Quit: Client closed)
[14:33:05] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:33:58] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:37:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:37:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:37:31] *** Quits: lortabac (~lortabac@abayonne-651-1-57-12.w92-156.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[14:38:33] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[14:39:03] *** Joins: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr)
[14:40:32] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:43:07] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[14:44:25] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:48:18] *** Quits: seiryn (~seiryn@pop.92-184-118-190.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[14:54:13] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:55:43] *** Quits: nfip^ (~nfip@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 265 seconds)
[14:56:43] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:58:27] *** Joins: seiryn (~seiryn@pop.92-184-118-190.mobile.abo.orange.fr)
[14:58:53] *** Joins: jgeerds (~jgeerds@55d40de2.access.ecotel.net)
[15:01:00] *** Joins: Guest199 (~Guest19@wificampus-098233.grenet.fr)
[15:01:12] *** Quits: Guest199 (~Guest19@wificampus-098233.grenet.fr) (Client Quit)
[15:01:34] *** Joins: Guest85 (~Guest85@wificampus-098233.grenet.fr)
[15:05:56] *** Quits: kritzefitz (~kritzefit@212.86.56.80) (Ping timeout: 245 seconds)
[15:10:03] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:10:19] *** Joins: Cajun (~Cajun@user/cajun)
[15:10:42] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[15:11:28] <maerwald> why are you usint stack again?
[15:11:56] *** Joins: kritzefitz (~kritzefit@212.86.56.80)
[15:14:56] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[15:15:06] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 245 seconds)
[15:21:15] *** Joins: Janus86 (~Janus@2001:1c04:3819:7d00:8949:b1fb:9d02:4b40)
[15:28:40] *** Quits: Janus86 (~Janus@2001:1c04:3819:7d00:8949:b1fb:9d02:4b40) (Quit: Client closed)
[15:34:09] *** Quits: Guest85 (~Guest85@wificampus-098233.grenet.fr) (Ping timeout: 256 seconds)
[15:36:37] *** Guest9608 is now known as deni
[15:38:45] *** Quits: deni (~deni@mail.denibertovic.com) (Changing host)
[15:38:45] *** Joins: deni (~deni@user/deni)
[15:45:10] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[15:45:59] *** Joins: zcombinator (~zcombinat@37.162.185.3)
[15:47:09] *** Quits: zcombinator (~zcombinat@37.162.185.3) (Client Quit)
[15:49:51] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[15:52:25] *** Joins: wren^ (~wren@wsip-68-227-92-38.mc.at.cox.net)
[15:54:41] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 244 seconds)
[15:55:19] *** Joins: hyiltiz (~quassel@31.220.5.250)
[16:05:41] *** Joins: cedeon (~cedeon@97e55b5b.skybroadband.com)
[16:06:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[16:11:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Ping timeout: 264 seconds)
[16:16:05] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[16:16:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:17:18] *** Quits: seiryn (~seiryn@pop.92-184-118-190.mobile.abo.orange.fr) (Quit: WeeChat 3.3)
[16:17:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:20:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 244 seconds)
[16:20:31] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[16:24:40] *** Quits: MQ-17J (~MQ-17J@8.21.10.17) (Ping timeout: 260 seconds)
[16:25:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[16:26:00] *** Joins: ub1 (~Thunderbi@178.165.171.196.wireless.dyn.drei.com)
[16:26:43] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:27:01] *** Joins: max22- (~maxime@2a01cb0883359800bc3e28b13c9f1130.ipv6.abo.wanadoo.fr)
[16:27:04] *** Quits: ub (~Thunderbi@77.119.171.187.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[16:27:11] *** Quits: ubert (~Thunderbi@77.119.171.187.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[16:27:12] *** ub1 is now known as ubert
[16:28:31] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[16:33:54] *** Quits: max22- (~maxime@2a01cb0883359800bc3e28b13c9f1130.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[16:34:07] *** Joins: max22- (~maxime@2a01cb08833598009b46fcde5e7728d6.ipv6.abo.wanadoo.fr)
[16:36:53] *** Joins: juand (~a@p200300ef973db1c64086f0a6a24fc4dd.dip0.t-ipconnect.de)
[16:37:43] *** Quits: mbuf (~Shakthi@122.174.32.225) (Quit: Leaving)
[16:39:51] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb93b90f6dff0b237ca0.dip0.t-ipconnect.de)
[16:41:21] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[16:43:31] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb935575e56a44659e48.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:44:51] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:49:05] *** Quits: deni (~deni@user/deni) (Quit: WeeChat 2.3)
[16:49:13] *** Joins: Guest81 (~Guest81@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:50:11] *** Joins: guniberas (~guniberas@42.191.188.121)
[16:52:40] *** Quits: max22- (~maxime@2a01cb08833598009b46fcde5e7728d6.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:53:20] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[16:57:59] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 260 seconds)
[16:58:15] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[16:59:36] *** Joins: echoSMILE (~echoSMILE@user/echosmile)
[16:59:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 244 seconds)
[17:01:21] *** Joins: mmhat (~mmh@55d48723.access.ecotel.net)
[17:01:51] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:02:24] *** Quits: connrs (~connrs@user/connrs) (Quit: ZNC 1.8.2 - https://znc.in)
[17:02:40] *** Joins: connrs (~connrs@user/connrs)
[17:06:51] *** Quits: mmhat (~mmh@55d48723.access.ecotel.net) (Ping timeout: 260 seconds)
[17:09:09] *** Joins: zebrag (~chris@user/zebrag)
[17:12:45] *** Quits: Guest81 (~Guest81@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[17:12:59] *** Joins: deni (~deni@user/deni)
[17:20:13] *** Joins: mmhat (~mmh@55d48723.access.ecotel.net)
[17:24:41] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:34d9:c297:fec0:5e7) (Ping timeout: 245 seconds)
[17:26:04] *** Joins: max22- (~maxime@2a01cb0883359800961d59787a71faaa.ipv6.abo.wanadoo.fr)
[17:29:38] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[17:32:22] *** Quits: ByronJohnson (~bairyn@mail.digitalkingdom.org) (Ping timeout: 260 seconds)
[17:33:20] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:33:40] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:c90e:2355:f46b:5a5f)
[17:34:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[17:35:43] *** Joins: ub (~Thunderbi@178.115.41.93.wireless.dyn.drei.com)
[17:37:29] *** Quits: ubert (~Thunderbi@178.165.171.196.wireless.dyn.drei.com) (Ping timeout: 244 seconds)
[17:37:30] *** ub is now known as ubert
[17:42:21] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:43:44] *** Quits: echoSMILE (~echoSMILE@user/echosmile) (Quit: Client closed)
[17:44:07] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[17:44:11] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:c90e:2355:f46b:5a5f) (Ping timeout: 264 seconds)
[17:44:24] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[17:46:54] <AWizzArd> I have a function `foo :: Text -> Either String Bool` and `bar` which has the same sig but `Double` instead of `Bool`. Now I would like to put both into a `Typeable a => Map Text (Either Text a)`. How can I do this?
[17:46:58] <AWizzArd> I.e. let myMap = M.fromList [("foo", foo), ("bar", bar)]
[17:47:27] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Ping timeout: 260 seconds)
[17:48:59] <merijn> You can't, the Typeable constraint on Map doesn't change that all values should have the same 'a'
[17:49:19] *** Quits: jgeerds (~jgeerds@55d40de2.access.ecotel.net) (Ping timeout: 260 seconds)
[17:49:22] *** Joins: echoSMILE (~echoSMILE@user/echosmile)
[17:49:23] <merijn> You could use a newtype wrapper with an existential quantification, but that's a mess
[17:49:47] <AWizzArd> When I make foo and bar return `... -> Either String Dynamic` then I can get this running. It would change the implementation of foo and bar, as they would have to make a toDyn call.
[17:50:03] <merijn> Yes
[17:51:54] <AWizzArd> merijn: why would that existential q around a newtype wrapper be messy?
[17:52:06] <merijn> AWizzArd: I mean, Dynamic is an existential wrapper
[17:52:32] <merijn> So, it's messy for the same reason that "modifying everything to wrap/unwrap is messy"
[17:52:42] <AWizzArd> k
[17:52:44] <lortabac> I would only choose the existential solution if I wanted an extensible solution
[17:52:54] <AWizzArd> lortabac: exactly
[17:53:02] <lortabac> that is, if I am making a library
[17:53:10] <AWizzArd> lortabac: yes, this is my usecase.
[17:53:39] <lortabac> however if users of foo and bar have access to the source code, a plain sum type is better
[17:54:05] <AWizzArd> My initial thought tho was that foo and bar could just stay as they are, without a toDyn call.
[17:54:33] <AWizzArd> lortabac: here definitly no sum type as there are infinitely many solutions. I seriously want dynamic typing here.
[17:57:44] <lortabac> depending on what you need to do with these values, you might use Data.Dynamic or introduce a type-class and require users to define an instance
[17:58:38] *** Quits: solomon (~solomon@cpe-76-168-7-139.socal.res.rr.com) (Quit: Ping timeout (120 seconds))
[17:58:47] *** Joins: ByronJohnson (~bairyn@173-13-139-238-sfba.hfc.comcastbusiness.net)
[17:59:09] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:00:03] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb93b90f6dff0b237ca0.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[18:05:14] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[18:05:55] *** Quits: wren^ (~wren@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[18:07:51] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:c4ab:4275:2f29:1458)
[18:07:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[18:08:01] *** Quits: ByronJohnson (~bairyn@173-13-139-238-sfba.hfc.comcastbusiness.net) (Ping timeout: 245 seconds)
[18:09:59] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[18:12:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Ping timeout: 264 seconds)
[18:13:33] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::7f76)
[18:13:55] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:14:48] <AWizzArd> Can I combine the import of specific names and make that module qualified? I.e.   import Data.Map.Strict (Map, fromList) qualified as M
[18:15:29] <AWizzArd> (putting `qualified` at the end, cause this now works from 8.10 on or so)
[18:15:39] <merijn> Sadly, no
[18:15:48] <merijn> You need two separate imports
[18:16:05] <merijn> I would also recommend against postfix qualified, tbh
[18:16:15] <AWizzArd> merijn: okay, will continue doing two. Thanks for confirming.
[18:16:15] <sshine> #tosoon?
[18:16:23] <merijn> It's a bad extension, imo
[18:16:30] <AWizzArd> merijn: why?
[18:16:41] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Quit: leaving)
[18:16:52] <merijn> AWizzArd: It does nothing, essentially
[18:16:59] <geekosaur> encourages sloppiness
[18:17:18] <merijn> Would Haskell have been nicer if the import syntax had been more elegantly designed (for example with postfix qualified?)? Yes
[18:17:36] <sshine> I guess it makes the library names align because half of them don't have 'qualified' in front of them.
[18:17:48] <merijn> However, gratuitous "custom syntax" extensions with no gain in expressivity just fracture the "real syntax" anyone has to learn for no gain in power
[18:17:57] <geekosaur> and at this point all it accomplishes is to force a limit on the number of ghc versions you can support
[18:18:15] <merijn> Various syntactic sugar extensions have a *real* cost
[18:18:18] <merijn> In terms of maintenance
[18:18:23] <sshine> merijn, I agree with that. I remember when someone lent me a scala book, and I realized I need to lift weights to hold the book, just because of the syntactic variation.
[18:18:26] <merijn> In terms of making Haskell harder to learn for beginners
[18:18:36] <merijn> In terms of making people memorise a billion syntax tweaks
[18:18:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:18:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:18:41] *** Joins: wroathe (~wroathe@user/wroathe)
[18:18:50] <AWizzArd> merijn: haha, a billion :)
[18:19:07] <merijn> A consistent, unchanging (albeit slightly clunky/awkward) syntax is better than infinite optional variations
[18:19:47] <merijn> Any syntactical extension should really provide. A considerable gain in expressivity/power to be worth it.
[18:19:53] <geekosaur> AWizzArd, there are quite a few redundant syntaxes even in basic Haskell 98, to say nothing of some of the extensions
[18:20:14] <merijn> This is also why I think RecordDotSyntax, etc. are a mess
[18:20:22] <shapr> I think rarely used extensions need to be deprecated, even if they're really cool.
[18:20:24] <geekosaur> there are people who dislike view patterns because they don't really get you anything, for exanple
[18:20:32] <merijn> They do nothing, but make things worth
[18:20:46] <merijn> geekosaur: And trivially replaceable with pattern guards
[18:21:05] <merijn> shapr: Yeah, but who gets to decide that?
[18:21:11] <shapr> merijn: I'll do it!
[18:21:15] <merijn> Especially since the odds of a new Haskell Report are unlikely
[18:21:24] <shapr> first I shall vote TransformListComp off the island
[18:21:30] <merijn> So any random syntactical extension is likely to just hang around indefinitely
[18:21:39] *** Joins: marinelli (~marinelli@gateway/tor-sasl/marinelli)
[18:21:56] <merijn> I vote for -XNoFieldSelectors -XNamedFieldPuns to become the default Haskell behaviour
[18:22:05] *** Parts: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (WeeChat 3.3)
[18:23:16] *** Joins: jkaye (~jkaye@2601:281:8300:7530:b96c:a192:af21:58d1)
[18:24:44] *** Quits: michalz (~michalz@185.246.204.41) (Read error: No route to host)
[18:26:04] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[18:33:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[18:33:50] *** Joins: dschrempf (~dominik@188-143-59-231.pool.digikabel.hu)
[18:33:59] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::7f76) (Ping timeout: 264 seconds)
[18:35:22] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::7f76)
[18:35:50] <shapr> merijn: we can make a Haskell IRC Report 2021 and just go with it.
[18:36:09] <shapr> like an RFC or whatever
[18:36:25] <geekosaur> not sure fragmenting the language even more is a win either
[18:36:26] <shapr> "We have found these extensions work well together, and these others are inoffensive, and these are never used, so don't use 'em"
[18:36:39] <geekosaur> we already have ghc2021
[18:36:44] <shapr> oh really?
[18:36:46] * shapr searches
[18:36:56] <geekosaur> it's in 9.2
[18:36:56] <sshine> Haskell 1459 Report
[18:37:18] <shapr> oh, it's this one? https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0380-ghc2021.rst 
[18:38:15] <shapr> geekosaur: as long as someone's doing it
[18:40:57] *** Quits: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr) (Quit: WeeChat 2.8)
[18:41:26] <sshine> what's that extension for allowing 1.3e4 for integers as long as it's actually an integer?
[18:41:56] <merijn> NumDecimals
[18:41:59] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[18:42:07] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/num_decimals.html
[18:43:03] <sshine> thanks
[18:43:32] <dminuoso> Im onto a real strange thing here. It seems diffBy in Diff has some fundamental bug.. I get this bizarre behavior of two items being equal in the predicate being listed as *both* First and Second. If I filter the input lists to singleton lists containing the offending items, I get a Both..
[18:43:38] * dminuoso is starting to get headaches
[18:44:03] <dminuoso> Maybe I violated some precondition?
[18:45:26] *** Quits: fendor (~fendor@178.115.73.9.wireless.dyn.drei.com) (Remote host closed the connection)
[18:46:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[18:46:35] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[18:46:39] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.2)
[18:46:59] *** Joins: MQ-17J (~MQ-17J@8.21.10.17)
[18:49:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:49:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:49:48] *** Joins: wroathe (~wroathe@user/wroathe)
[18:54:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:56:04] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[18:56:48] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:57:59] *** Quits: juand (~a@p200300ef973db1c64086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[18:58:21] *** Joins: juand (~a@p200300ef973db1624086f0a6a24fc4dd.dip0.t-ipconnect.de)
[19:01:33] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::7f76) (Quit: Konversation terminated!)
[19:01:58] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::7f76)
[19:09:59] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::7f76) (Quit: Konversation terminated!)
[19:10:18] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::7f76)
[19:11:49] *** Joins: MasseR (~MasseR@51.15.143.128)
[19:11:55] *** Quits: MQ-17J (~MQ-17J@8.21.10.17) (Ping timeout: 260 seconds)
[19:12:07] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[19:12:08] <dminuoso> Yeah, I pretty much confirmed it now.
[19:12:17] <dminuoso> Diff seems to have a fundamental bug.
[19:12:22] <dminuoso> Uh this hurts.
[19:12:31] *** Joins: MQ-17J (~MQ-17J@8.21.10.17)
[19:12:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[19:14:07] *** Quits: dschrempf (~dominik@188-143-59-231.pool.digikabel.hu) (Ping timeout: 244 seconds)
[19:16:52] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[19:20:02] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[19:21:19] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::7f76) (Remote host closed the connection)
[19:21:22] <kritzefitz> is there a version of `traverse` for `Alternative` that ignores `empty` results in the result?
[19:21:23] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 264 seconds)
[19:21:35] <janus> which diff package is that?
[19:21:39] <dminuoso> Diff
[19:21:42] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::7f76)
[19:22:17] <dminuoso> Or I have some pretty deep `text` bug creeping up here.
[19:22:25] <dminuoso> Let me try switching this to string
[19:25:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[19:28:11] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[19:28:43] <janus> kritzefitz: wouldn't it be possible to do "traverse (\x -> do y <- myFun x; guard (y /= empty); pure y)" or is there something more to it?
[19:30:00] <dminuoso> kritzefitz: Yes, it's called Witherable
[19:30:13] <dminuoso> With the contained class method `wither`
[19:30:21] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[19:30:35] <dminuoso> wither :: (Witherable t, Applicative f) => (a -> f (Maybe b)) -> t a -> f (t b)
[19:30:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:30:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:30:42] *** Joins: wroathe (~wroathe@user/wroathe)
[19:31:15] <dminuoso> janus: And no you cant
[19:31:17] <dminuoso> % :t guard
[19:31:17] <yahb> dminuoso: Alternative f => Bool -> f ()
[19:31:21] <dminuoso> % :t traverse
[19:31:21] <yahb> dminuoso: (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
[19:31:29] <janus> ah bummeeeeeer
[19:31:41] <dminuoso> janus: traverse in its laws guarantees that you cant change its chape
[19:31:43] <dminuoso> *shape
[19:32:01] <dminuoso> But Witherable roughly fits what kritzefitz asked for, though it doesnt quite work with Alternative.
[19:32:10] <kritzefitz> Hmm, maybe I'm asking for a too general case. Let me rephrase.
[19:32:52] <dminuoso> Hooray. Okay, I managed to reduce the Diff bug to a test case of comparing two string lists of 5 elements each.
[19:33:28] <dminuoso> And in that degenerate case, I roughly get [First "foo", Second "foo"] as a sublist.
[19:33:31] <dminuoso> This is so broken...
[19:33:41] <kritzefitz> I have a bunch of STM actions (currently in a Set, but I could live with using a list) actions and I want to run them all and get all results that don't retry.
[19:33:53] <janus> to bad the project is on darcs so you'll never find out how many other people emailed Sterling Clover about the same issue ;)
[19:35:11] *** Quits: xff0x (~xff0x@2001:1a81:538f:ce00:2246:a77f:21ad:4c1c) (Ping timeout: 264 seconds)
[19:35:12] <dminuoso> I think Im using it wrong.
[19:35:13] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:35:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[19:35:35] <dminuoso> This is more likely than me discovering a fundamental bug in Diff which seems to drive thousands of projects.
[19:35:45] *** Joins: xff0x (~xff0x@2001:1a81:538f:ce00:3337:5557:9d4:4565)
[19:35:48] <dminuoso> Time to read the paper I guess
[19:35:54] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:36:59] <janus> 79 reverse deps: https://packdeps.haskellers.com/reverse/Diff
[19:37:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Remote host closed the connection)
[19:37:14] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[19:37:41] <dminuoso> janus: The download count suggests this appears on many many projects.
[19:37:46] <dminuoso> Even if transitively
[19:37:47] * Hecate just posted a controversial message on libraries@
[19:37:49] *** Joins: neurocyte0132889 (~neurocyte@212.232.86.211)
[19:37:49] *** Quits: neurocyte0132889 (~neurocyte@212.232.86.211) (Changing host)
[19:37:49] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[19:37:52] <Hecate> pray for my soul
[19:38:05] <dminuoso> Hecate: Are there non-controversial messages on that ml?
[19:38:08] <janus> well aeson depends on Diff. that alone should account for it
[19:38:38] <dminuoso> janus: haha careful
[19:38:40] <janus> but most people probably do not rely on that part of aeson ;)
[19:38:46] <Hecate> dminuoso: hahahaha
[19:38:49] <dminuoso> This is just used in its test suite, in just a single occurence
[19:39:13] <janus> ok, maybe it is from dhall, fourmolu, hledger or pandoc then :P
[19:39:39] <geekosaur> well. nice big bikeshed for everyone to paint
[19:40:03] <geekosaur> flip side, this one actually has a reason, unlike the original proposal
[19:40:17] <Hecate> dminuoso: I've posted about the "single-method Eq" change
[19:40:51] *** Joins: Null_A (~null_a@2601:645:8700:2290:c808:ee5a:46df:cf9)
[19:41:18] * janus opens ML expecting to read about HoTT
[19:41:26] <geekosaur> then, as Ord needs to be changed anyway, might as well go all the way and introduce PartialOrd at the same time
[19:41:29] <Hecate> janus: no, thank go no
[19:41:33] <Hecate> *god
[19:41:39] <dminuoso> janus: Okay, I think Im just holding it wrong.
[19:41:47] <dminuoso> at the very least this is a documentation bug.
[19:42:00] *** Quits: cedeon (~cedeon@97e55b5b.skybroadband.com) (Quit: leaving)
[19:42:10] <Hecate> https://mail.haskell.org/pipermail/libraries/2021-October/031492.html <- this is my email
[19:43:03] <geekosaur> or, since Ord is apparently documented to be a partial order, introduce TotalOrd and let the next wave of bikeshedding wait until it's settled a few versions on
[19:44:04] *** Joins: dschrempf (~dominik@2a01-036d-0118-8903-cceb-e4ad-7ffa-bf77.pool6.digikabel.hu)
[19:44:06] <Hecate> geekosaur: ;_;
[19:44:10] <Hecate> nuh
[19:50:11] *** Quits: xff0x (~xff0x@2001:1a81:538f:ce00:3337:5557:9d4:4565) (Ping timeout: 260 seconds)
[19:50:17] <fryguybob> kritzefitz: All in one transation or running separately?
[19:50:29] <kritzefitz> All in one transaction.
[19:50:57] *** Joins: xff0x (~xff0x@2001:1a81:538f:ce00:ef89:3777:7c2d:5013)
[19:52:09] <Hecate>  /2
[19:54:07] <kritzefitz> Ah, now I understand dminuoso's comment. I not only need "Witherable" but also "optional".
[19:54:11] <shapr>  /3
[19:55:27] <fryguybob> kritzefitz: Something like:  atomically . mapM (\t -> (Just <$> t) `orElse` pure Nothing)
[19:56:36] <dminuoso> kritzefitz: wither + optional sounds fairly expressive :)
[19:56:47] *** Quits: dschrempf (~dominik@2a01-036d-0118-8903-cceb-e4ad-7ffa-bf77.pool6.digikabel.hu) (Ping timeout: 264 seconds)
[19:57:21] <kritzefitz> Yeah, but I'd like to avoid the additional dependency on witherable, so I'm probably gonna go with catMaybes + optional.
[19:57:33] <dminuoso> Absolutely, catMaybes is just wither monomorphized to list.
[19:57:43] <janus> kritzefitz: have you seen `withered` here https://chrispenner.ca/posts/witherable-optics
[19:58:00] <dminuoso> In our project I simply defined `wither` on the spot for the datatype I used rather than depend on witherable too
[19:58:06] <dminuoso> Personally I think `Witherable` should have been in base.
[19:59:11] *** Quits: marinelli (~marinelli@gateway/tor-sasl/marinelli) (Quit: marinelli)
[19:59:24] <dminuoso> kritzefitz: Hold on, the above characterization is wrong.
[19:59:42] <dminuoso> wither f t = catMaybes <$> traverse f t
[19:59:44] <dminuoso> witherAlt f = wither (optional . f)
[19:59:48] <dminuoso> kritzefitz: ^- haha. I even wrote witherAlt too! :)
[19:59:58] <dminuoso> This is straight from our largest project
[20:00:24] <janus> (witherAlt is withered from Chris Penner)
[20:00:58] <dsal> I saw a thing once that described the difference between adding data and functionality in OO vs. FP and can't remember it.  I need that right now for someone who's wanting to "extend" data types.  Anyone have any idea what I'm thinking of?
[20:01:35] <fryguybob> kritzefitz: Note that the order you are running these actions can have an effect on what result you get.
[20:01:37] <dminuoso> dsal: Mmm, sounds like the expressibility problem?
[20:01:44] <dminuoso> Or expression problem its called
[20:02:02] <kritzefitz> fryguybob: even if all the actions are read-only?
[20:02:14] <dsal> dminuoso: Yeah, thanks!
[20:02:44] <dminuoso> kritzefitz: Potentially, yes.
[20:02:51] <fryguybob> kritzefitz: Read-only actions commute with each other.
[20:02:52] <dminuoso> If there's other threads working these things in parallel
[20:03:07] *** Joins: mvk_ (~mvk@2607:fea8:5cc1:300::7f76)
[20:03:20] <dminuoso> That is, even if your wither on the structure causes read-only, if there's mutation operations outside, it could alter the behavior evidently
[20:03:26] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 245 seconds)
[20:03:32] <fryguybob> kritzefitz: But say one action has a lot of reads, if that is at the end, there is a higher probability that the whole transction will succeed, so the performance can change.
[20:03:41] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:03:54] <dminuoso> kritzefitz: Also, since STM is monadic, the read output can influence the further action selection...
[20:04:04] <dminuoso> So yeah. The order can still have an impact.
[20:04:17] <dminuoso> Ah but hold on
[20:04:20] <dminuoso> Nevermin dme
[20:04:20] <janus> dminuoso: where is optional from?
[20:04:26] <dminuoso> janus: base
[20:04:31] <dminuoso> % :i optional
[20:04:31] <yahb> dminuoso: optional :: Alternative f => f a -> f (Maybe a) -- Defined in `Control.Applicative'
[20:04:35] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::7f76) (Ping timeout: 264 seconds)
[20:04:50] <dminuoso> Very useful in parser combinators and STM
[20:05:04] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[20:05:27] <janus> oh i hadn't realized that :info puts a comment on the type
[20:05:29] <janus> how rare
[20:05:47] <Franciman> mundane ^^
[20:05:57] <Franciman> ah no
[20:06:00] <Franciman> not mundane
[20:06:03] <Franciman> ^^
[20:06:09] <Franciman> false friends
[20:06:13] <Franciman> fancy
[20:06:16] <Franciman> I meant
[20:07:09] <janus> Franciman: which language is the false friend in?
[20:07:21] <kritzefitz> Now I'm confused. Does the order of read-only actions in STM matter or does it not?
[20:08:10] <kritzefitz> Apart from performance. I don't think that matters a lot in my case, because the whole transaction is read-only.
[20:08:21] <Franciman> I thought it meant mondano, janus in italian, which means: brillantly and clostly refined
[20:08:23] *** Joins: hyiltiz (~quassel@31.220.5.250)
[20:09:40] <fryguybob> kritzefitz: The only difference if they are all read only would be performance.
[20:12:39] <kritzefitz> Do you have an example of when performance would be affected?
[20:14:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:c808:ee5a:46df:cf9) (Remote host closed the connection)
[20:14:43] <fryguybob> kritzefitz: The one I gave above.  You can think of every transaction as having a probability of committing.  Each read has a probability that the value seen gets overwritten.  If highly likely to be overwritten reads happen first, that decresses the probability of commit vs if they happen last.
[20:16:23] <fryguybob> Failing ot commit means the transaction has to be run again (this is not the same as  retry  ) and that takes time.
[20:17:19] <kritzefitz> Ok, sure. But is there actually a possibility that a transactions has to be run again, if it never "retry"s?
[20:17:35] <fryguybob> kritzefitz: Absolutely.
[20:17:52] <fryguybob> kritzefitz: Any observation of a change in the read leads to running the transaction again.
[20:18:02] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:18:02] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:18:02] *** Joins: wroathe (~wroathe@user/wroathe)
[20:18:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:18:08] <kritzefitz> Ah, right.
[20:19:48] <kritzefitz> Would running multiple transactions actually be better in this case?
[20:20:13] <fryguybob> If you can get a way with it is almost always better to have more smaller transactions than one big one.
[20:20:41] <fryguybob> But there is per-transaction overhead.
[20:21:38] <fryguybob> There is also  readTVarIO  which is much faster than  atomically . readTVar
[20:22:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[20:22:51] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[20:22:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[20:28:07] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[20:28:51] *** Quits: mvk_ (~mvk@2607:fea8:5cc1:300::7f76) (Ping timeout: 245 seconds)
[20:28:56] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:30:26] *** Joins: econo (uid147250@user/econo)
[20:51:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[20:53:51] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[21:05:47] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 260 seconds)
[21:05:50] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[21:06:30] *** Joins: chisui (~chisui@200116b866177f0064c111e1bf5f5ebb.dip.versatel-1u1.de)
[21:07:46] *** Joins: jgeerds (~jgeerds@55d40de2.access.ecotel.net)
[21:12:27] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[21:16:19] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[21:17:43] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:17:55] *** Quits: MQ-17J (~MQ-17J@8.21.10.17) (Ping timeout: 260 seconds)
[21:18:01] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[21:18:31] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:19:05] *** Joins: ubert1 (~Thunderbi@178.115.41.93.wireless.dyn.drei.com)
[21:25:18] <justsomeguy> I'm getting -Wincomplete-patterns warnings on this function https://github.com/kingparra/hpfp/blob/master/08_-_recursion/exercises/8.6.3_-_recursion.rst.d/sum-to/src/Lib.hs
[21:25:39] <justsomeguy> How do I figure out which type it is partial for?
[21:25:59] <monochrom> The same type "a".
[21:26:02] <monochrom> @type signum
[21:26:03] <lambdabot> Num a => a -> a
[21:26:33] *** Joins: Heisen (~Heisen@77.240.67.20)
[21:26:41] <monochrom> It is very unclear that 0, 1, -1 cover all cases, even to humans.
[21:26:45] <awpr> GHC doesn't understand that signum can only ever return {0, 1, -1}, it's just Int
[21:26:55] <monochrom> Indeed, try signum on Complex Double.
[21:27:06] <geekosaur> this is in a way a shortcoming of signum, it should really use an ADT
[21:27:20] <geekosaur> although there is that, yeh
[21:27:48] <awpr> is it a unit vector of the same direction as the input?
[21:27:53] <awpr> (or zero)
[21:28:19] <monochrom> Let's try!
[21:28:37] <monochrom> > signum (3.0 :+ 4.0)
[21:28:38] <lambdabot>  0.6 :+ 0.8
[21:28:52] <monochrom> > 0.6^2 + 0.8^2
[21:28:53] <lambdabot>  1.0
[21:29:05] <justsomeguy> Ok, intersting, I didn't know that Data.Complex existed until just now.
[21:29:20] <awpr> that one worked out pleasingly well as far as decimal arithmetic goes
[21:29:40] <monochrom> I chose pleasing examples :)
[21:30:04] <monochrom> 3,4,5 is a well-known Pythagorean triple :)
[21:30:45] <dolio> Yeah, but is dividing by 5 known to not cause eventual results like 1.000000001?
[21:31:02] *** Quits: jassob2 (~jassob@korrob.vth.sgsnet.se) (Ping timeout: 244 seconds)
[21:31:05] <dolio> :)
[21:31:29] *** Joins: dschrempf (~dominik@2a01-036d-0118-8903-0da8-d413-8f1a-53ab.pool6.digikabel.hu)
[21:31:57] <monochrom> > magnitude (signum (3.0 :+ 4.0))
[21:31:58] <lambdabot>  1.0
[21:32:03] <monochrom> > magnitude (signum (3.0 :+ 4.0)) - 1
[21:32:04] <lambdabot>  0.0
[21:32:11] <monochrom> I'm lucky!
[21:35:00] *** Quits: max22- (~maxime@2a01cb0883359800961d59787a71faaa.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[21:35:40] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:36:23] *** Quits: dschrempf (~dominik@2a01-036d-0118-8903-0da8-d413-8f1a-53ab.pool6.digikabel.hu) (Ping timeout: 264 seconds)
[21:36:42] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:37:42] <Heisen> Good evening, could someone help me get this to work? Ive been stuck for a while. https://paste.tomsmeding.com/m4s9flyC
[21:38:42] <Heisen> Also I am new to IO so no complicated functions
[21:40:01] <monochrom> In what sense does it "not" "work"?
[21:40:19] *** Quits: ubert1 (~Thunderbi@178.115.41.93.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[21:41:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:43:18] <dminuoso> Also what is "copyAll"?
[21:44:12] *** Joins: mvk_ (~mvk@2607:fea8:5cc1:300::4a62)
[21:45:13] *** Quits: mvk_ (~mvk@2607:fea8:5cc1:300::4a62) (Client Quit)
[21:45:30] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::4a62)
[21:46:23] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 260 seconds)
[21:46:24] <Heisen> It only saves the contents from the first file (x) monochrom
[21:46:32] <Heisen> not the other ones
[21:48:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Remote host closed the connection)
[21:51:30] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[21:51:35] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[21:51:47] <monochrom> I think dminuoso's question is also relevant.
[21:52:25] *** aplainze1akind is now known as aplainzetakind
[21:52:43] <Heisen> It takes a couple of .txt files and add the contents together in a new file
[21:53:02] <monochrom> files? filenames?
[21:53:47] *** Joins: alx741 (~alx741@186.178.108.74)
[21:54:47] <dminuoso> Best to share its definition in a paste.
[21:55:13] <monochrom> dminuoso, it is a recursive call.
[21:55:21] <geekosaur> they pasted it earlier
[21:55:22] <dminuoso> Oh.,
[21:55:25] <Heisen> I pasted it already?
[21:55:33] *** Joins: dlss^ (~dlss@wsip-68-227-92-38.mc.at.cox.net)
[21:55:33] <dminuoso> Haha, sorry I actually did not realize that.
[21:55:45] <monochrom> But what's in xs and is it what copyAll should expect?
[21:57:02] <yin> what do we call the ability of a language's function containing references to itself?
[21:57:15] <monochrom> recursion
[21:57:31] <geekosaur> explicit recursion, to be more precise
[21:57:54] <geekosaur> (as distinct from, say, using fix to achieve recursion)
[21:57:59] *** Quits: jkaye (~jkaye@2601:281:8300:7530:b96c:a192:af21:58d1) (Ping timeout: 264 seconds)
[21:58:04] <yin> geekosaur: that's it
[21:58:09] <Heisen> For example you have three .txt files,  a.txt has hello, b.txt has help, c.txt has me. We call copyAll ["a.txt","b.txt","c.txt"] "d.txt"
[21:58:21] <Heisen> and we should expect d.txt to have hello help me
[21:59:05] <monochrom> Have you printed out xs to verify that it looks like ["b.txt", "c.txt"] for example?
[21:59:34] <monochrom> Or rather, more succintly, you evaded my question.
[22:00:02] <monochrom> My questions are guiding questions, if you evade them you learn nothing, you're just stuck with your confirmation bias.
[22:00:45] <maerwald> `(x:xs) <- sequence $ map readFile fromFiles`
[22:01:06] <awpr> #haskell corollary to Betteridge's law: when a question is answered with the question, the answer is the opposite of what you think
[22:01:07] <maerwald> that looks like a partial pattern match
[22:01:19] <awpr> with a question*
[22:01:36] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:02:57] <maerwald> but yeah, it makes no sense
[22:03:29] <monochrom> The whole thing makes no sense, really. For example I wonder why not sequence_
[22:04:19] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[22:04:31] <monochrom> But let's stab this existing solution bit by bit to a slow death first. >:)
[22:04:36] <maerwald> you could fix it by unsafeInterleaveIO xD
[22:04:50] <maerwald> in order to not read unnecessary files
[22:04:55] <monochrom> I think readFile already contains the necessary unsafeInterleaveIO.
[22:05:34] <maerwald> monochrom: well, it causes an open syscall still
[22:05:42] <maerwald> just the contents are lazy
[22:05:52] <maerwald> afaik
[22:06:04] <monochrom> Yes.
[22:06:29] <maerwald> lazy IO in Prelude was a mistak
[22:06:33] <maerwald> lazy IO is hard
[22:07:53] <Heisen>     xs <- sequence $ map readFile fromFiles
[22:07:54] <Heisen>     writeFile toFile (concat xs)
[22:08:04] <Heisen> solved, thanks anyway.
[22:08:07] <maerwald> Heisen: what?
[22:08:19] <maerwald> do you know what that does?
[22:08:30] <Heisen> Yep
[22:08:34] <maerwald> what does it do?
[22:09:20] <monochrom> Uh, I wouldn't ask that question, because any answer would be informationless anyway, in the same sense as...
[22:09:25] *** Joins: tinhatcat (~manjaro-g@2620:103:a000:2201:8e4c:af6a:e11c:11a1)
[22:09:35] <monochrom> <Q> Did you lie?  <A> No.
[22:09:41] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:09:52] <maerwald> Heisen: please check the contents after you've written the files :)
[22:10:06] *** Quits: tinhatcat (~manjaro-g@2620:103:a000:2201:8e4c:af6a:e11c:11a1) (Client Quit)
[22:10:35] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[22:13:19] *** Joins: dschrempf (~dominik@2a01-036d-0118-8903-19ca-cfaa-56ae-bb18.pool6.digikabel.hu)
[22:14:45] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[22:15:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[22:16:23] <Inst> why do I keep on getting parse error on input |?
[22:16:38] <dminuoso> Inst: Share your code.
[22:17:19] <monochrom> "It depends." :)
[22:17:20] <Inst> It's utter noob crap
[22:17:21] <Inst> https://cdn.discordapp.com/attachments/528863657363505159/902267069444292608/unknown.png
[22:17:46] <monochrom> I don't see the parse error.
[22:17:47] <dminuoso> monochrom: haha, I was intent on writing the same thing as a conclusion from the chat in -ot
[22:18:14] <monochrom> In addition to why do you still think a screen crop is a good idea.
[22:18:16] <geekosaur> not` x
[22:18:28] <geekosaur> ` should perhaps be '
[22:19:14] <dminuoso> Mmm, this would require a more sophisticated lexer to error out better right?
[22:19:22] <geekosaur> yeh
[22:20:56] *** Quits: Heisen (~Heisen@77.240.67.20) (Quit: Client closed)
[22:21:47] <Inst> ah, thanks
[22:21:56] <Inst> Still new, can't remember to use grave instead of single quote
[22:22:24] <Inst> oh wait, it should be single quote, not grave, right?
[22:22:40] <dminuoso> Indeed.
[22:22:53] <Inst> thanks
[22:24:30] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:28:05] *** Quits: dschrempf (~dominik@2a01-036d-0118-8903-19ca-cfaa-56ae-bb18.pool6.digikabel.hu) (Ping timeout: 260 seconds)
[22:28:11] *** Joins: max22- (~maxime@2a01cb088335980089ed6f978d54394c.ipv6.abo.wanadoo.fr)
[22:28:12] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[22:30:23] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[22:30:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c) (Remote host closed the connection)
[22:33:44] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:33:46] *** Joins: hippoid (~idris@184.105.6.88)
[22:33:52] <hippoid> :t fmap.return
[22:33:52] <lambdabot> Functor f => b -> f a -> f b
[22:34:16] <hippoid> why is that type class restraint Functor f and not Monad m?
[22:34:24] <hippoid> :t return
[22:34:24] <dminuoso> hippoid: the name is utterly misleading.
[22:34:24] <lambdabot> Monad m => a -> m a
[22:34:41] <dminuoso> Probably some historical accident, something from our dark past better not mentioned.
[22:34:50] <dminuoso> return = <$
[22:34:57] <dminuoso> % :t (<$)
[22:34:57] <yahb> dminuoso: Functor f => a -> f b -> f a
[22:35:29] <hippoid> dminuoso: what name is utterly misleading?
[22:35:32] <monochrom> No, instead, I think a particular Monad instance is forced.
[22:35:53] <tomsmeding> :t \x -> fmap . x
[22:35:54] <lambdabot> Functor f => (a1 -> a2 -> b) -> a1 -> f a2 -> f b
[22:35:55] <dminuoso> Ohh hold on. Somehow I read this as `Data.Functor.return`
[22:35:58] <dminuoso> My mind is playing tricks on me today
[22:36:09] <tomsmeding> :t return :: a -> b -> c
[22:36:10] <lambdabot> error:
[22:36:10] <lambdabot>     • Couldn't match type ‘a1’ with ‘c1’
[22:36:10] <lambdabot>       ‘a1’ is a rigid type variable bound by
[22:36:31] <tomsmeding> :t return :: a -> b -> a
[22:36:32] <lambdabot> a -> b -> a
[22:37:00] <monochrom> Consider in "\x -> fmap (return x)", consider unifying "a -> b" with "return x :: Monad m => m c"
[22:37:25] *** Joins: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl)
[22:37:38] <tomsmeding> yeah, 'return' here is the return of the ((->) b) monad; i.e. it's a -> m b where "m" is "b ->"
[22:37:59] <tomsmeding> :t fmap . const
[22:38:00] <lambdabot> Functor f => b -> f a -> f b
[22:38:03] <tomsmeding> same thing
[22:39:14] <yin> i'm trying to "really" understand the y combinator and i have a question. would this be a good place to ask?
[22:39:16] <Boarders> in my hlint file I have: -ignore: {name: "Move brackets to avoid $"}
[22:39:21] <tomsmeding> :t return :: a -> b -> a
[22:39:21] <lambdabot> a -> b -> a
[22:39:23] <tomsmeding> :t (<*>) :: (a -> b -> c) -> (a -> b) -> (a -> c)
[22:39:24] <lambdabot> (a -> b -> c) -> (a -> b) -> a -> c
[22:39:26] <Boarders> but I keep getting that suggestion, is there something different I am supposed to write?
[22:39:29] <tomsmeding> K and S combinators anyone?
[22:40:03] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[22:40:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a193:fe09:637c:a86c)
[22:40:18] <tomsmeding> yin: probably :)
[22:40:51] <yin> here it goes
[22:40:52] <yin>    Y = λf.(λx.f(x x))(λx.f(x x))
[22:40:52] <yin>    Y = λf.(λx.  x x )(λx.f(x x))
[22:40:52] <yin>               ^
[22:40:54] <monochrom> I wouldn't "understand" the Y combinator.  I would understand the diagonal trick first, e.g., my http://www.cs.utoronto.ca/~trebla/CSCC24-2021-Summer/09-semantics-1.html#rec
[22:40:55] <yin> what difference does this f make?
[22:41:17] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:41:26] <tomsmeding> yin: have you tried just writing out what "Y(f)" evaluates to?
[22:41:41] <tomsmeding> it should be f(f(f(f(....))))
[22:42:05] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[22:43:15] *** Quits: xff0x (~xff0x@2001:1a81:538f:ce00:ef89:3777:7c2d:5013) (Ping timeout: 260 seconds)
[22:43:21] <monochrom> Or Oleg's https://okmij.org/ftp/Computation/fixed-point-combinators.html#Self-application
[22:44:07] *** Joins: xff0x (~xff0x@2001:1a81:538f:ce00:2234:349c:dfdf:94b7)
[22:46:02] <yin> tomsmeding: yes
[22:46:13] <yin> so there is no difference
[22:46:38] <yin> theoretially at least
[22:46:47] <tomsmeding> well, with the additional 'f' you have "one extra f"
[22:46:52] <yin> is there any advantage of using one form over the other?
[22:46:56] <tomsmeding> which doesn't make a difference because there's infinitely many anyway
[22:47:26] <tomsmeding> yin: to speak about advantages, you have to give a use case :)
[22:47:30] <yin> i'm guessing one can be more performant than the other when applied to some language, depending on the implementation?
[22:47:41] <tomsmeding> I don't know any practical of this form of the fixpoint combinator
[22:47:48] <tomsmeding> s/practical/practical uses/
[22:48:07] <hippoid> so how does fmap.const and fmap.return have the same type?  const is a->b->a, and return is a -> M a. Should I think of return as taking two parameters?
[22:48:17] <hippoid> :t fmap.const
[22:48:18] <lambdabot> Functor f => b -> f a -> f b
[22:48:21] <hippoid> :t fmap.return
[22:48:22] <tomsmeding> any language that cares about performance is going to implement the fixpoint combinator differently
[22:48:22] <lambdabot> Functor f => b -> f a -> f b
[22:48:29] <monochrom> <monochrom> Consider in "\x -> fmap (return x)", consider unifying "a -> b" with "return x :: Monad m => m c"
[22:48:53] <monochrom> After that, consider how, for that Monad instance, return = const.
[22:49:04] <tomsmeding> another hint: note that "a -> b" is the same as "(->) a b"
[22:49:14] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 260 seconds)
[22:49:22] <hippoid> ok good stuff, need to chew on that
[22:49:55] <tomsmeding> partial application of (->), always sparkly the first time you taste it :)
[22:50:12] <hippoid> lol
[22:50:23] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[22:50:27] <geekosaur> not to say mind-warping
[22:50:43] *** Quits: chisui (~chisui@200116b866177f0064c111e1bf5f5ebb.dip.versatel-1u1.de) (Quit: Client closed)
[22:50:44] <geekosaur> don't feel bad that it isn't clicking, people always have prolems the first time they hit this
[22:50:58] <geekosaur> and it takes a while to get used to
[22:51:06] *** Joins: chisui (~chisui@200116b866177f0064c111e1bf5f5ebb.dip.versatel-1u1.de)
[22:51:10] <hippoid> and i assume it's worth understanding?
[22:51:17] <monochrom> YES
[22:51:18] <geekosaur> it is, yes
[22:51:27] <tomsmeding> the ((->) a) instance is very useful for pointfree code golfing :p
[22:51:57] <tomsmeding> but disregarding that, understanding this will help a lot in getting a better feel for how Haskell's type system orks
[22:52:00] <tomsmeding> *works
[22:52:10] <tomsmeding> even if you won't use this instance often in particular
[22:52:34] <monochrom> And enriching what you know what "monad" means.
[22:52:50] <hippoid> good to know the path is a worthy one
[22:52:51] <monochrom> Since every surprising example enriches it.
[22:53:16] <zincy> Are there any alternatives to the Machines library if I want a Mealy machine?
[22:54:01] <monochrom> People keep asking "where to read yet another wordy intuition of monad" and miss the mark. To build intuition you confront a million examples, not a million essays.
[22:54:16] <monochrom> Actually true of learning anything.
[22:54:22] <tomsmeding> yeah
[22:54:56] <tomsmeding> I achieved some decent working understanding of Monad after I'd implemented a state monad and then a parser combinator monad
[22:55:13] <monochrom> Another enrichment is to, for example, see the equivalence between "data P a = MkP a a" and "((->) Bool) a". I put that on the exam.
[22:55:14] <tomsmeding> understanding at least for the common cases, that is
[22:56:04] <Inst> why do people claim that pattern matching is hard to learn?
[22:56:05] <tomsmeding> monochrom: where does the monad come in there?
[22:56:29] <geekosaur> Inst, because people expect to compare values, not match structure
[22:56:38] <monochrom> You will be surprised that you write >>= for P the same way you would write >>= for (->)e in general, and then just set e=Bool.
[22:56:43] <Inst> is there something I don't understand about pattern matching?
[22:56:53] <Inst> like, I'm treating it as effectively an overloaded function
[22:56:57] <Inst> it should be intuitive
[22:56:59] <monochrom> And then the even bigger surprise is that this is the only lawful solution for P.
[22:56:59] <geekosaur> in fact "structure" throws them off because this is where ADTs start to show their power
[22:57:08] <monochrom> (I learned it the hard way.)
[22:57:17] <tomsmeding> Inst: maybe because the control flow through pattern matching is non-linear? Like, you go into a pattern, perhaps fail a match, then back outward again and try the next
[22:57:23] <geekosaur> they just look like funny type declarations until you strat to understand this
[22:57:38] <geekosaur> *start to
[22:57:48] <Inst> yeah it's probably because my first language is basic and i haven't done this for years
[22:57:50] *** Joins: Psybur (~Psybur@mobile-166-170-29-12.mycingular.net)
[22:57:51] <tomsmeding> monochrom: ooh, nice, Monad instance for P
[22:58:00] <monochrom> Inst: I claim that pattern matching is easy to learn.  Now please ask those other people back "why do people claim that pattern matching is easy to learn?"
[22:58:05] <Inst> ~"Haskell Is The Best Imperative Language"~
[22:58:29] <monochrom> Pattern matching is so easy to learn, Racket has it.
[22:58:49] <tomsmeding> C has pattern matching!
[22:59:00] <tomsmeding> on all the sum types that it supports, which is only integral values
[22:59:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:c808:ee5a:46df:cf9)
[22:59:17] <dminuoso> tomsmeding: What c has is not real pattern matching.
[22:59:28] <monochrom> I love vacuously true statements :)
[22:59:34] <Inst> Pattern Matching is a better or worse written "Switch", I suppose
[22:59:36] <tomsmeding> okay disregarding that you can goto random places in a switch statement
[22:59:38] <dminuoso> It's way more complex than that because of fallthrough and additional control flow that can easily interrupt it.
[22:59:45] <Inst> the annoying thing about pattern matching seems to be having to type in the function over and over again
[22:59:45] <yin> Inst: nooo
[23:00:01] <dminuoso> tomsmeding: even then, fallthrough is a disgusting thing.
[23:00:01] <tomsmeding> Inst: f x y = case x of
[23:00:04] <monochrom> Also disregard that duff-something device heh
[23:00:09] <tomsmeding> or if it's the last parameter, use \case
[23:00:22] <Inst> oh so there's syntax to avoid having to type all the damn patterns
[23:00:28] <yin> Inst: use pattern guards
[23:00:32] <tomsmeding> Inst: well, just use a case expression :p
[23:00:35] <Inst> yeah i prefer guards to pattern matching
[23:00:42] <monochrom> Yeah people hate "f x = case x of" because it seems to have to type in the "x" over and over again haha
[23:00:54] <yin> Inst: with pattern guards, you get the best of both worlds
[23:00:59] *** Quits: hippoid (~idris@184.105.6.88) (Quit: leaving)
[23:01:03] <Inst> idgi, how bad are commodity coders
[23:01:05] <dminuoso> tomsmeding: and fallthru is problematic because you can create unreadably complex code with it, by carefully placing breaks and interleaving it with effects..
[23:01:09] <dminuoso> And this is repeatedly done.
[23:01:12] <yin> i did ONLY pattern guards for everything for a while. it was "My style" :p
[23:01:18] <tomsmeding> dminuoso: to be honest, Haskell's pattern matching could do with disjunctive patterns, like f (X a | Y a) = ... a ...
[23:01:35] *** Quits: mei (~mei@user/mei) (Ping timeout: 264 seconds)
[23:01:35] <tomsmeding> dminuoso: yes I'm personally guilty of writing such code at some point
[23:01:38] <dminuoso> tomsmeding: Sure, but because C interleaves that with effects, its horrid.
[23:02:04] <monochrom> More seriously, I think the Haskell designers consciously preferred saying "f" over and over again. There is an aesthetic to it when you're the reader.
[23:02:24] <Inst> repetition is an important element of poetry
[23:02:26] <Inst> and prose
[23:02:32] <dminuoso> You can attach side effects to the X case, the Y case, and if the X branch has a fallthrough, then if you provide an X then you have two combined effects, in case of Y you have one.
[23:02:33] *** Joins: vicfred (~vicfred@user/vicfred)
[23:02:34] <tomsmeding> yeah, though that aesthetic quickly wears down when the repeating part is long enough
[23:02:45] <dminuoso> And suddenly you have this non-obvious thing
[23:02:46] <tomsmeding> dminuoso: it's beautiful
[23:02:46] <monochrom> Right? Because like, even when writing factorial, "f 0 = 1; f (n+1) = ..." looks really nice.
[23:02:56] <dminuoso> tomsmeding: If you dont have to maintain that code, sure.
[23:02:58] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[23:03:01] <monochrom> nice to read, of course.
[23:03:02] <tomsmeding> :D
[23:03:13] <tomsmeding> monochrom: is that an NplusKpatterns?
[23:03:22] <monochrom> Yeah that too.
[23:03:26] <monochrom> Old times.
[23:03:29] <tomsmeding> juicy
[23:03:52] <monochrom> We now understand that the computer should simply be telepathic so we need write nothing.
[23:03:55] <tomsmeding> I feel like if I'd confront students with NplusKpatterns, they'd just get more confused
[23:04:36] <monochrom> The only obstacle is that we are still not telepathic so you wouldn't be able to ESP the code that I ESP'ed into the computer!
[23:04:53] *** Quits: phma (~phma@host-67-44-209-31.hnremote.net) (Read error: Connection reset by peer)
[23:05:03] * tomsmeding reads EFI system partition
[23:05:12] <monochrom> Yeah no worries I am not teaching "f (n+1) = ..." to students.
[23:05:45] *** Joins: phma (~phma@host-67-44-208-220.hnremote.net)
[23:07:21] <dminuoso> monochrom: We dont need to be telepathic, we *are* all part of a gigantic planet sized computer built for hyperintelligent, pan-dimensional beings.
[23:07:21] *** Quits: chisui (~chisui@200116b866177f0064c111e1bf5f5ebb.dip.versatel-1u1.de) (Quit: Client closed)
[23:07:58] <dminuoso> Speaking of which, weechat keeps writing your name in yellow. Mmmm.
[23:08:20] * tomsmeding 's weechat doesn't
[23:08:35] <tomsmeding> is that machine-dependent?
[23:08:42] <dminuoso> Curious question.
[23:08:44] <geekosaur> inverse bikeshedding!
[23:09:02] <dminuoso> tomsmeding: Go on a journey and find out?
[23:09:07] * tomsmeding goes
[23:09:22] <byorgey> is there a library function to do  Monad m => [m (Maybe a)] -> m (Maybe a), which runs the computations until the first one which returns Just?
[23:09:43] *** Joins: chisui (~chisui@200116b866177f0062aee6c2cbe59ddd.dip.versatel-1u1.de)
[23:10:12] <monochrom> Some kind of msum or asum may be involved.
[23:10:24] <maerwald> I'd also expect Alternative rather than Maybe a
[23:10:29] <dminuoso> byorgey: `iterateWhile isJust` from monad-loops?
[23:10:36] <dminuoso> Ah not quite
[23:10:55] <dminuoso> Indeed, asum with an appropriate instance seems likely
[23:11:36] <monochrom> If you convert "m (Maybe a)" to "MaybeT m a" you have "sequence :: [MaybeT m a] -> MaybeT m a"
[23:11:50] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[23:11:52] <monochrom> Err no, not sequence.
[23:12:05] <dminuoso> I'd expect it to have a shape of `(Traversable t, Alternative f) => t a -> (a -> f (Maybe b)) -> f b` perhaps?
[23:12:25] <geekosaur> wouldnm't it be asum at that point?
[23:12:33] <monochrom> @type asum
[23:12:34] <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
[23:12:49] <monochrom> asum :: [MaybeT m a] -> MaybeT m a
[23:12:52] <byorgey> ah, asum at MaybeT might do it.
[23:12:58] <monochrom> :)
[23:13:16] <byorgey> thanks!
[23:13:48] <maerwald> https://hackage.haskell.org/package/transformers-0.6.0.2/docs/src/Control.Monad.Trans.Maybe.html#line-165
[23:13:50] <maerwald> looks like it
[23:13:56] <monochrom> You may also like: unsafeCoerce bwhaahahah
[23:14:11] <maerwald> some Alternative instances propagate into the inner monad
[23:14:16] <maerwald> you can never trust classes
[23:14:29] <monochrom> Sure, I said MaybeT very concretely.
[23:14:36] <dminuoso> :s/classes/code/
[23:14:49] <monochrom> s/code//
[23:14:53] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[23:15:05] <maerwald> no, I mean classes... I don't trust classes :)
[23:15:09] <dminuoso> Now we have a trailing space. :(
[23:15:20] <dminuoso> M-x delete-trailing-whitespace
[23:15:24] <dminuoso> Done now?
[23:15:25] <monochrom> "to be continued"
[23:15:29] <maerwald> can't even trust them to be lawful
[23:15:48] <maerwald> and once you enter transformers, is there anything really lawful?
[23:15:57] <monochrom> Yes.
[23:16:01] <tomsmeding> dminuoso: weechat.look.nick_color_hash determines a hash function that indexes into weechat.color.chat_nick_colors
[23:16:06] <tomsmeding> so it's config dependent
[23:16:15] <monochrom> Err, nevermind, I'm not ready to back it up.
[23:16:19] <maerwald> heh
[23:16:27] <maerwald> that was my point
[23:16:47] <dminuoso> tomsmeding: djb2 for me
[23:16:50] <tomsmeding> me too
[23:17:00] <tomsmeding> cyan,magenta,green,brown,lightblue,default,lightcyan,lightmagenta,lightgreen,blue
[23:17:01] <dminuoso> tomsmeding: Does it perhaps insert ones own name into the hash?
[23:17:20] <monochrom> Do you trust parametricity?
[23:17:26] <dminuoso> tomsmeding: Ohh that's it
[23:17:27] <dminuoso> I have more.
[23:17:36] <tomsmeding> oh pardon weechat.look.nick_color_hash_salt is also included
[23:17:59] <tomsmeding> dminuoso: looks like it's just the salt and the nickname to be printed https://github.com/weechat/weechat/blob/950c2bb8985a7c4eccf1c43d34045337fffd3714/src/gui/gui-nick.c#L134
[23:18:15] <dminuoso> We might have different salts too
[23:18:24] <tomsmeding> my salt is an empty string lol
[23:18:31] <dminuoso> Same as well
[23:18:33] <dminuoso> But I have more colors
[23:18:39] <monochrom> Right? Much as you say about uncertainty over "StateT s m" for example, since m is parametric, since StateT's >>= can't even ask "which m am I talking about here?", its naughtiness is very much restricted.
[23:18:42] <dminuoso>   weechat.color.chat_nick_colors  string  "red,lightred,162,167,204,green,lightgreen,035,042,047,084,120,154,148,yellow,brown,165,191,222,208,cyan,045,051,087,117,123,159,lightmagenta,128,171,176,213,111,148"
[23:18:54] <tomsmeding> now that I realise that I could use more colours because my terminal is cool I want more colours, but I'm afraid of getting different colours for nicks I know
[23:19:19] <maerwald> monochrom: that would be fantastic... behavior bubbling up lol
[23:19:44] <maerwald> well
[23:19:47] <maerwald> we can do that
[23:19:57] <maerwald> overlapping instances
[23:20:08] *** Joins: tfeb (~tfb@88.98.95.237)
[23:20:30] <monochrom> You can do that in Java.
[23:20:49] <tomsmeding> haskell too, but you need to explicitly say you want RTTI (i.e. Typeable)
[23:20:50] <monochrom> Yes even when only using the generics part of Java.
[23:23:21] <maerwald> playing hide and seek
[23:23:36] <maerwald> that sums up my experience with Java
[23:23:48] *** Joins: Guest79 (~textual@77.252.63.98)
[23:24:15] <maerwald> I like trees... I can reason about trees.
[23:24:46] <Franciman> maerwald: they also absorb co_2
[23:24:57] <maerwald> depends on the time of the day, no?
[23:24:59] <monochrom> trees are a social construct
[23:25:04] <Franciman> yep
[23:25:24] <Franciman> they also help regulating temperature in their ecosystem
[23:25:33] <maerwald> even on the command line, I have a mind map of trees...
[23:25:46] <maerwald> like, `gcc` won't invoke `make`, right?
[23:26:12] <maerwald> we can't do without trees
[23:26:39] <Franciman> they also make shadow
[23:26:48] <Franciman> Literally awesome objects
[23:27:20] *** Quits: chisui (~chisui@200116b866177f0062aee6c2cbe59ddd.dip.versatel-1u1.de) (Quit: Client closed)
[23:27:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:28:03] <ski> monochrom : oh, curious. i've usually seen it called ⌜ω⌝, never `diagonal'
[23:28:06] *** Joins: chisui (~chisui@200116b866177f0062aee6c2cbe59ddd.dip.versatel-1u1.de)
[23:28:18] <monochrom> OK here is what backs me up: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.2560
[23:28:46] <monochrom> has laws and theorems. includes transformers, e.g., StateT
[23:29:31] <maerwald> but you can't know whether an inner monad of your stack will  be lawful :p
[23:29:34] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[23:29:44] <maerwald> there's no typeclass "LawfulMonad m"
[23:30:11] <monochrom> ski: Well OK, Oleg says delta, didn't say why. So I tried to guess why, eventually I guessed diagonal because the halting problem diagonalization proof also does "run this program with its encoding as input"
[23:30:29] <monochrom> I am aware of that.
[23:30:47] <maerwald> and some instances are deliberately unlawful and so we say "yeah, don't use it this or that way"
[23:31:34] <ski> monochrom : yea, it's reasonable. just i can't recall seeing it before
[23:31:36] <monochrom> You know, I don't even know that mathematics as we know it is consistent.
[23:31:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[23:31:58] <tomsmeding> me neither
[23:32:00] <monochrom> But I can work with "if it's consistent, then my code makes some kind of sense"
[23:32:26] *** Quits: Null_A (~null_a@2601:645:8700:2290:c808:ee5a:46df:cf9) (Remote host closed the connection)
[23:32:55] *** Quits: Guest79 (~textual@77.252.63.98) (Quit: Textual IRC Client: www.textualapp.com)
[23:33:07] <shapr> ghoulguy: Have you ever written a document on tools for competitive programming?
[23:33:17] <shapr> or is there one you'd suggest?
[23:33:18] <maerwald> monochrom: I've heard that even the "mathematical induction" proof method is questioned by some.
[23:33:24] *** Joins: Guest79 (~textual@77.252.63.98)
[23:34:41] *** Quits: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com) (Ping timeout: 245 seconds)
[23:34:44] *** Quits: Guest79 (~textual@77.252.63.98) (Client Quit)
[23:34:51] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[23:35:35] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 260 seconds)
[23:35:54] <maerwald> but as long as the laws of mathematics make my rice cooker work, I think I'm fine with it
[23:36:46] <maerwald> although I'm not sure... they might be running embedded java these days
[23:37:54] *** Joins: juhp (~juhp@128.106.188.220)
[23:40:47] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[23:42:19] *** Joins: hololeap (~hololeap@user/hololeap)
[23:42:51] *** Joins: Hayek (~xxx@2603-8000-b401-6099-b41b-43a8-70e4-3938.res6.spectrum.com)
[23:44:05] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:44:28] *** Joins: jkaye (~jkaye@2601:281:8300:7530:289e:28f2:97ea:9bd4)
[23:44:29] *** Quits: alx741 (~alx741@186.178.108.74) (Ping timeout: 265 seconds)
[23:44:38] *** wrengr_away is now known as wrengr
[23:45:53] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::4a62) (Quit: Konversation terminated!)
[23:47:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:47:16] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::4a62)
[23:49:04] *** Joins: pavonia (~user@user/siracusa)
[23:49:49] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[23:55:06] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[23:56:46] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[23:57:01] *** Joins: alx741 (~alx741@181.196.69.72)
