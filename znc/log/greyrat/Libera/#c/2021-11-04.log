[00:01:41] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[00:03:04] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Quit: Leaving)
[00:03:40] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:08:48] *** Joins: KehrBehr (~KehrBehr@pool-108-15-41-188.bltmmd.fios.verizon.net)
[00:09:13] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[00:09:31] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:10:06] *** Joins: alch (~alch@mi-18-23-15.service.infuturo.it)
[00:11:46] *** Quits: KehrBehr (~KehrBehr@pool-108-15-41-188.bltmmd.fios.verizon.net) (Quit: Quit)
[00:13:18] *** Joins: KehrBehr (~kehrbehr@pool-108-15-41-188.bltmmd.fios.verizon.net)
[00:15:13] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[00:18:27] *** Joins: kexec (~kexec@user/kexec)
[00:19:11] *** Joins: random-nick (~random-ni@87.116.177.136)
[00:19:17] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: see you tomorro)
[00:20:55] *** Joins: kexec17 (~kexec@user/kexec)
[00:21:14] *** Quits: kexec (~kexec@user/kexec) (Killed (NickServ (GHOST command used by kexec17)))
[00:21:17] *** kexec17 is now known as kexec
[00:23:58] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[00:24:51] *** Quits: pgib (~textual@99-148-134-85.lightspeed.knvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[00:25:24] <quartz> sham1: It works perfectly! THank you!
[00:27:22] <kexec> in case of a function which checks whether something (eg string, number) meets certain criterias, is it good practice to return value which is true (1) or false (0) when the criterias are met?
[00:27:43] <rcf> vin: what sort of offset are you talking about? 
[00:31:38] *** Quits: constxo (~brad@192.75.101.178) (Ping timeout: 268 seconds)
[00:32:30] <vin> rcf: so mmap a bunch of files and divide them equally among threads, where each thread is responsible for a X size. So the start and the end address for a given thread can be on a single file or can span N files. The address is the offset I am talking about
[00:32:48] <rcf> kexec: if it is returning an int, zero is customary. If it is returning a bool, true. 
[00:32:54] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:957a:697d:c4c6:fc71)
[00:32:57] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:957a:697d:c4c6:fc71) (Read error: Connection reset by peer)
[00:33:50] <floatcomplex> zero or positive for non-error return of how many whatevers it successfully did, negative for error condition
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:34:54] <rcf> kexec: If it really is just true or false I go for bool to make it unambiguous 
[00:35:40] <rcf> vin: not really, you’d need to store the relevant addresses somewhere. 
[00:35:51] <floatcomplex> in c23, you can check for return code >= BOOL_MEDIAN
[00:35:53] <floatcomplex> :)
[00:36:35] <sham1> I see you still can't get over BOOL_MAX
[00:36:50] <floatcomplex> boolposting
[00:37:03] <nomagno> Is bool an actual type now, or still a #define for _Bool?
[00:37:14] *** Quits: KehrBehr (~kehrbehr@pool-108-15-41-188.bltmmd.fios.verizon.net) (Quit: Quit)
[00:37:21] <sham1> I'd think it more a typedef for _Bool
[00:37:42] <floatcomplex> i highly doubt they would ever change that
[00:39:25] <sham1> Oh, on the GCC-provided stdbool.h it's a #define at least. I wodner why they do it like that
[00:39:34] <kexec> thanks, although i would like to avoid the need of including stdbool.h :D
[00:39:50] <sham1> Well you can always use _Bool
[00:40:43] <floatcomplex> long bool
[00:41:46] <sham1> long short bool
[00:42:25] <floatcomplex> bool complex
[00:44:02] *** Quits: AmR (~AmREiSa@41.232.235.167) (Read error: Connection reset by peer)
[00:44:14] <sham1> That's some lateral thinking
[00:44:29] <floatcomplex> denormal bool
[00:44:44] <floatcomplex> -ffast-bool
[00:45:09] <floatcomplex> eugh that's probably actually a thing
[00:45:24] <sham1> Ah, so that gives C the ability to do True, False, FileNotFound
[00:45:26] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[00:46:04] <floatcomplex> true, false, not-a-bool
[00:46:16] <floatcomplex> signaling not-a-bool and non-signaling not-a-bool
[00:46:18] *** Joins: AmR (~AmREiSa@156.199.92.40)
[00:47:29] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Quit: Textual IRC Client: www.textualapp.com)
[00:47:54] <floatcomplex> ibm and non-ibm variants of bool128
[00:48:03] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[00:48:52] <sham1> What is that a reference to? Does IBM have their own int128s?
[00:49:09] <sham1> Well, as in stuff that would be incompatible with other stuff
[00:49:35] *** Quits: machinehum (~machinehu@45.131.194.253) (Quit: WeeChat 3.3)
[00:49:43] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[00:52:36] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 268 seconds)
[00:52:38] <nomagno> If I have `const char * const mystr`, this means I can't modify what value `mystr` points to, nor modify its dereference. However, does it ALSO mean I can modify the value it points to trough other means, BUT not dereference?
[00:53:00] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[00:53:03] <sham1> In that case you might want to have it be volatile
[00:53:13] <nomagno> How do I do that?
[00:53:21] <sham1> …with volatile
[00:54:11] <nomagno> Why would I want to use volatile?
[00:54:56] <sham1> Because otherwise the compiler might think that the value hasn't changed between dereferences
[00:55:10] <vin> Why do I get a warning [assignment to 'int *' from 'int' makes pointer from integer without a cast] for this? int* fdList; if((fdList = (int*)malloc(sizeof(int) * num_files) == NULL)). 
[00:55:17] <nomagno> Aah
[00:55:52] <sham1> vin: That's the same as fdList = ((int*)malloc(sizeof(int) * num_files) == NULL)
[00:56:01] <sham1> You need to put your parenthesis before the equality check
[00:56:06] <sham1> Also, don't cast the return value of malloc
[00:56:09] <sham1> ,malloc
[00:56:09] <candide> sham1: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[00:56:09] <candide> There is no need to cast the result of library functions that return void *; it makes your code hard to read, adds no value, and can hide a bug if you don't have a valid prototype in scope. See http://c-faq.com/malloc/mallocnocast.html
[00:56:26] <vin> Omg I missed that, thanks sham1 
[00:57:41] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[00:59:01] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[00:59:39] *** Joins: Praise- (~Fat@user/praise)
[01:01:46] <nomagno> Any idea why `void *` as a struct member doesn't seem to error?
[01:02:04] *** Praise- is now known as Praise
[01:02:38] <nomagno> NVM, just me forgetting how I wrote my own code
[01:02:44] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Remote host closed the connection)
[01:03:19] <sham1> Why would a pointer to void be an invalid struct member
[01:03:46] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[01:04:27] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:04:53] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:05:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[01:05:32] *** Quits: |darc| (darc@darcserv.net) (Ping timeout: 268 seconds)
[01:05:41] <nomagno> No, the issue is I have `#define TOP void *`, and I am using it in a macro I forgot the proper usage of
[01:05:45] <nomagno> Added a comment, problem solved
[01:07:43] <sham1> That's an odd macro to have
[01:09:23] <nomagno> #define MsgNewObject_3(name, inherits, field1) typedef struct MsgStruct_##name{inherits super;field1;} MsgObj_##name
[01:09:34] <sham1> Ah, hm
[01:09:55] <nomagno> Then I have that cursed C99 variadic macro wrapper I linked the other day
[01:10:17] <nomagno> ... Then I have a bunch of functions to add public/private member groups as structs, in such a way you can't accidentally confuse them
[01:12:59] <nomagno> `MsgRefObject(Object); MsgSelfRef(object); MsgAddInterface(functype, fieldname, funcparams); MsgAccessPublic(object, type, member); MsgAccessPrivate(object, type, suffix, member); MsgAddPrivate(strname, suffix, par1, ...); MsgAddPublic(strname, par1, ...); MsgNewObject_2(name, inherits, member1, ...)`
[01:13:35] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Remote host closed the connection)
[01:14:06] <nomagno> That is the entire interface so far ^. Basically replace most of the nested struct boilerplate present in OO C with something slightly less ambiguous
[01:14:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:14:38] *** Joins: |darc| (darc@darcserv.net)
[01:15:31] <nomagno> From left to right: Reference an object as a type, reference an object type from within its declaration, add a method as a member, access a public member, access a private member, add a private member list, add a public member list, declare a new object
[01:15:46] <nomagno> s/object type/class/
[01:15:53] *** Joins: John99 (~johnny@87.200.94.90.dynamic.jazztel.es)
[01:16:08] <nomagno> I should definitely replace the 'object' stuff with class there
[01:16:39] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[01:19:46] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:20:25] *** Quits: ckdCreations (~ckdCreati@147.55.130.36) (Read error: Connection reset by peer)
[01:22:23] *** Quits: magla (~gelignite@55d4ce3b.access.ecotel.net) (Quit: Stay safe!)
[01:24:47] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:25:36] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:26:18] *** Joins: ckdCreations (~ckdCreati@147.55.133.134)
[01:27:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[01:27:10] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[01:29:57] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[01:30:50] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[01:33:36] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[01:34:32] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[01:35:43] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:39:31] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com)
[01:40:50] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[01:41:01] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[01:42:04] *** Quits: AmR (~AmREiSa@156.199.92.40) (Quit: Konversation terminated!)
[01:44:18] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:46:20] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:46:42] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Read error: Connection reset by peer)
[01:48:52] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[01:50:59] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:51:26] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[01:54:46] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[01:55:06] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:57:23] *** Quits: x11ff (~x11ff@151.250.201.160) (Ping timeout: 264 seconds)
[01:58:34] *** Quits: rcf (~rcf@mab.sdf.org) (Quit: WeeChat 3.4-dev)
[01:59:05] *** Joins: rcf (rcf@iceland.sdf.org)
[01:59:33] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:59:39] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:00:05] *** Quits: wo0f (~wo0f@user/wo0f) (Remote host closed the connection)
[02:00:05] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:05:20] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[02:05:40] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:07:37] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:10:58] *** Quits: alch (~alch@mi-18-23-15.service.infuturo.it) (Read error: Connection reset by peer)
[02:12:44] *** Quits: ckdCreations (~ckdCreati@147.55.133.134) (Read error: Connection reset by peer)
[02:12:56] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[02:13:08] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 260 seconds)
[02:13:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:14:18] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[02:14:37] *** Joins: alch (~alch@151.36.138.31)
[02:16:25] *** Quits: engest (~engest@50.39.227.149) (Read error: Connection reset by peer)
[02:16:28] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[02:17:01] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:20:13] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:20:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[02:23:32] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:25:46] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:25:51] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[02:26:57] *** Quits: Inline (~Inline@2a02:908:1252:7a80:edec:c289:e267:dbb7) (Ping timeout: 268 seconds)
[02:27:48] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:28:11] *** Quits: Akuli (~Akuli@213.216.208.43) (Quit: Leaving)
[02:28:40] *** Joins: rcm888 (~u1@95.54.115.108)
[02:31:34] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 260 seconds)
[02:31:54] <rcm888> in this example https://bpa.st/E4BA removeing waitpid causes printf be skipped. parent finishing before child doesn't explain such behavior.
[02:33:27] *** Joins: engest (~engest@50.39.227.149)
[02:33:30] *** Quits: pizdets (~pizdets@183.182.115.195) (Ping timeout: 260 seconds)
[02:34:21] *** Joins: RogOne_gg (~igloo@ptr-178-51-201-115.dyn.mobistar.be)
[02:36:17] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[02:36:47] *** Joins: quartz (~quartz@user/quartz)
[02:38:16] <katnis> when do you use declaration and definition at the same time??
[02:38:30] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:38:41] <pragma-> katnis: most of the time.
[02:39:07] <katnis> but i have seen declaration being declared at first and use definition later too
[02:39:11] <katnis> and it made me confused
[02:39:41] <fizzie> You can't have a definition that wouldn't also be a declaration.
[02:39:42] *** Quits: RogOne_gg (~igloo@ptr-178-51-201-115.dyn.mobistar.be) (Quit: Igloo IRC: https://iglooirc.com)
[02:40:17] *** Joins: RogOne_gg (~igloo@178.51.201.115)
[02:40:30] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[02:40:35] <katnis> you use declaration first and definition later, no?
[02:40:45] <katnis> i think i should find an example for this
[02:40:46] <fizzie> A definition is a declaration.
[02:40:52] <katnis> :o
[02:41:06] <katnis> (mind blowing picture)
[02:41:15] <fizzie> C11 6.7p5: "A /definition/ of an identifier is a declaration for that identifier that: [list of criteria]."
[02:41:32] <katnis> is that a law book
[02:41:38] <fizzie> It's the standard.
[02:41:44] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Quit: Leaving)
[02:42:41] <katnis> there is C11??
[02:42:48] <fizzie> There's a C18 as well.
[02:42:52] <katnis> :O
[02:42:53] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com)
[02:42:58] <katnis> all i know is C99
[02:43:04] *** Quits: RogOne_gg (~igloo@178.51.201.115) (Remote host closed the connection)
[02:43:11] <katnis> i guess i need to read C18 if possible
[02:43:35] <fizzie> (But it didn't really add anything new, so I tend to quote C11 by default, because the C18 draft's PDF table of contents only has headings up to three levels deep.)
[02:44:44] <nomagno> Can I start tube-feeding C11 and C23 features back trough time to the C99 standard?
[02:44:52] <nomagno> :P
[02:44:54] <katnis> C23?!?!?
[02:45:06] <katnis> my brain exploded
[02:45:07] <pragma-> ,c23
[02:45:07] <candide> C23 Charter: http://open-std.org/JTC1/SC22/WG14/www/docs/n2611.htm -- Draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf
[02:45:42] <katnis> says C23 but written in 2021
[02:45:49] <fizzie> It's the work-in-progress draft.
[02:45:55] <pragma-> ,change c23 s/Draft/Working Draft/
[02:45:56] <candide> Changed: c23 is /say C23 Charter: http://open-std.org/JTC1/SC22/WG14/www/docs/n2611.htm -- Working Draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf
[02:45:56] <John99> from 0 to 10 how horrible is use a switch as goto replacement?
[02:46:04] <fizzie> The standard doesn't just appear out of the blue, people have to work on it.
[02:46:23] <katnis> then ill stick to C11. thanmk you
[02:46:39] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:46:52] <pragma-> gcc and clang both support much of c23 draft features via -std=c2x
[02:47:22] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com) (Client Quit)
[02:47:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com)
[02:48:48] <fizzie> Anyway, as for the original question, whether you add additional (non-definition) declarations, or just have the definitions act as the only declarations, it's mostly a style thing. As long as you obey the rules that (roughly speaking) say a declaration for a thing must be in scope before you try to use a thing, and that there's only one definition anywhere in the program for things with external
[02:48:49] <fizzie> linkage.
[02:49:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:50:26] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:53:06] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 260 seconds)
[02:54:02] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[02:54:23] *** Joins: ckdCreations (~ckdCreati@147.55.133.140)
[02:55:20] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[02:56:21] <floatcomplex> ,cc --std=c2x printf("%d\n", BOOL_MAX);
[02:56:24] <candide> floatcomplex: 1
[02:56:27] *** Quits: puke (~puke@user/puke) (Quit: puke)
[02:56:49] *** Quits: engest (~engest@50.39.227.149) (Read error: Connection reset by peer)
[02:56:50] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:57:17] *** Joins: engest (~engest@50.39.227.149)
[02:57:39] <dave0> it's not a number, how can there be a maximum?
[02:58:22] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:58:24] <dave0> ,cc #define BOOL_MIN -1
[02:58:27] <candide> dave0: [warning: preprocessor directive not terminated by \n, the remainder of the line will be part of this directive] Success (no output).
[02:59:11] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[02:59:47] <fizzie> It's an integer type.
[03:00:09] <pragma-> BOOL_MIN should be 0, silly.
[03:00:21] <floatcomplex> there is no bool min
[03:00:29] <pragma-> not yet
[03:00:39] <fizzie> None of the other unsigned integer types have _MIN constants either.
[03:00:48] <fizzie> I guess you have to draw the line somewhere.
[03:01:06] <floatcomplex> ,cc --std=c2x printf("%d\n", BOOL_MEAN);
[03:01:07] <candide> floatcomplex: error: 'BOOL_MEAN' undeclared; did you mean 'BOOL_MAX'?
[03:01:39] <katnis> i drank all of my coffee already
[03:02:35] <floatcomplex> did it work
[03:03:40] <pragma-> i'm not really a fan of the long-opt style --std. i prefer -std
[03:03:43] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[03:03:44] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:03:45] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:03:45] *** Joins: wroathe (~wroathe@user/wroathe)
[03:03:58] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[03:04:40] <floatcomplex> somehow i didn't even know that was a thing
[03:04:47] <floatcomplex> other than -ansi
[03:05:27] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:05:37] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Quit: Textual IRC Client: www.textualapp.com)
[03:08:07] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[03:08:26] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 260 seconds)
[03:12:21] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com)
[03:13:47] <dave0> ls -s -t -d
[03:14:18] <dave0> that probably works.. how many options does ls have?
[03:15:19] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:15:36] <omegatron> many
[03:16:20] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:16:54] <fizzie> Those three are not particularly obscure ones either.
[03:17:00] <fizzie> (Print sizes, sort by time, list directories rather than their contents.)
[03:17:31] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 268 seconds)
[03:18:55] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[03:18:57] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:19:18] *** Quits: engest (~engest@50.39.227.149) (Read error: Connection reset by peer)
[03:21:57] <pragma-> dave0: ls has all the options
[03:23:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:23:35] <dave0> ls is an option ho
[03:25:28] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[03:26:04] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:28:16] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Client Quit)
[03:28:25] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[03:29:28] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[03:31:08] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[03:31:39] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[03:35:33] *** Joins: kurahaupo_ (~kurahaupo@pa49-195-121-113.pa.nsw.optusnet.com.au)
[03:35:53] *** Joins: engest (~engest@50.39.227.149)
[03:36:44] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:38:10] *** Quits: kilolympus (~kilolympu@185.65.135.177) (Ping timeout: 252 seconds)
[03:38:31] *** Quits: kurahaupo (~kurahaupo@125.254.29.229) (Ping timeout: 268 seconds)
[03:38:48] *** Joins: kurahaupo (~kurahaupo@203.206.24.213)
[03:40:14] *** Quits: kurahaupo_ (~kurahaupo@pa49-195-121-113.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[03:42:00] *** Joins: loganlee (~Thunderbi@user/loganlee)
[03:42:37] *** Quits: MrFantastik (~f@c-24-6-209-143.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[03:43:26] *** Quits: eXeC64 (~eXeC64@80.1.220.46) (Quit: There goes my bouncer)
[03:44:02] *** Joins: eXeC64 (~eXeC64@80.1.220.46)
[03:46:36] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[03:52:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:52:25] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:53:35] *** Quits: Celelibi (celelibi@user/celelibi) (Ping timeout: 252 seconds)
[03:54:05] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[03:54:30] *** Quits: John99 (~johnny@87.200.94.90.dynamic.jazztel.es) (Quit: Leaving.)
[03:55:34] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[03:57:23] *** Joins: Wulf (~Wulf@user/wulf)
[04:01:22] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[04:01:41] *** Joins: Crescendo (~Crescendo@user/crescendo)
[04:02:33] *** Joins: Celelibi (celelibi@user/celelibi)
[04:02:58] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[04:04:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[04:06:04] *** Quits: neutral (~user@user/neutral) (Remote host closed the connection)
[04:07:22] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Client Quit)
[04:08:05] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 268 seconds)
[04:09:38] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[04:14:55] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[04:15:22] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[04:18:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:20:57] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:20:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:20:57] *** Joins: wroathe (~wroathe@user/wroathe)
[04:21:55] *** Joins: raj (uid72176@user/raj)
[04:22:47] *** Quits: rcm888 (~u1@95.54.115.108) (Remote host closed the connection)
[04:23:44] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[04:24:06] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 268 seconds)
[04:25:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[04:26:53] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[04:27:52] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[04:27:56] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Remote host closed the connection)
[04:28:51] *** Joins: darklands (~darklands@gateway/vpn/pia/darklands)
[04:31:47] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:6d6f:64e2:6bd2:feda)
[04:31:58] *** Joins: Thedarkb1 (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[04:32:13] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com)
[04:33:21] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 268 seconds)
[04:34:57] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[04:35:49] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Ping timeout: 268 seconds)
[04:36:26] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:957a:697d:c4c6:fc71) (Ping timeout: 268 seconds)
[04:36:31] *** Quits: begriffs (~begriffs@user/begriffs) (Remote host closed the connection)
[04:36:52] *** Joins: begriffs (~begriffs@user/begriffs)
[04:37:32] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[04:38:34] *** Joins: frost (~frost@user/frost)
[04:40:23] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:41:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:44:53] *** Quits: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[04:45:29] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[04:45:36] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[04:45:42] *** Quits: darklands (~darklands@gateway/vpn/pia/darklands) (Ping timeout: 268 seconds)
[04:46:51] *** Quits: engest (~engest@50.39.227.149) (Read error: Connection reset by peer)
[04:46:53] *** Joins: darklands (~darklands@gateway/vpn/pia/darklands)
[04:47:02] *** Joins: de-facto (~de-facto@user/de-facto)
[04:47:28] *** Joins: engest (~engest@50.39.227.149)
[04:48:31] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[04:49:14] *** Joins: Famine_ (~Famine@user/famine)
[04:50:01] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[04:51:52] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[04:52:02] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 260 seconds)
[04:53:12] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[04:54:37] *** Joins: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net)
[04:55:05] <caze> _Bool is an unsigned integer type, but it doesn't have the same wraparound behavior as the other unsigned integer types.
[04:57:18] *** Joins: pulse (~pulse@user/pulse)
[04:58:48] *** Church is now known as Wayne
[04:59:00] *** Wayne is now known as Church
[04:59:00] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[05:01:25] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[05:01:40] *** Joins: kexec (~kexec@user/kexec)
[05:01:55] *** Quits: larry87 (~quassel@98.40.245.193) (Remote host closed the connection)
[05:02:23] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[05:02:49] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[05:03:10] *** Joins: HaMsTeRs (~Thunderbi@14-0-175-120.static.pccw-hkt.com)
[05:04:34] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[05:05:10] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[05:05:37] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:05:57] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[05:07:03] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[05:07:16] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[05:10:21] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[05:12:52] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[05:15:17] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[05:16:12] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[05:18:26] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:20:22] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:23:33] *** Joins: johnnyreb (~tth@user/johnnyreb)
[05:25:10] *** Quits: darklands (~darklands@gateway/vpn/pia/darklands) (Ping timeout: 260 seconds)
[05:25:53] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com)
[05:26:41] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[05:26:55] *** Joins: de-facto (~de-facto@user/de-facto)
[05:28:26] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[05:28:52] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 268 seconds)
[05:29:06] *** Joins: BSaboia (~bsaboia@177.190.210.217)
[05:29:11] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 264 seconds)
[05:33:21] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[05:35:42] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[05:36:16] *** Quits: X-Scale (~ARM@46.50.0.1) (Ping timeout: 268 seconds)
[05:37:19] *** Joins: darklands (~darklands@gateway/vpn/pia/darklands)
[05:37:24] *** X-Scale` is now known as X-Scale
[05:40:07] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:40:09] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:44:19] *** Quits: engest (~engest@50.39.227.149) (Quit: Leaving)
[05:47:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:52:26] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[05:56:36] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 268 seconds)
[06:00:12] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[06:02:36] *** Quits: BSaboia (~bsaboia@177.190.210.217) (Quit: This computer has gone to sleep)
[06:05:52] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[06:06:17] *** Quits: darklands (~darklands@gateway/vpn/pia/darklands) (Quit: Leaving)
[06:10:11] *** Quits: alch (~alch@151.36.138.31) (Read error: Connection reset by peer)
[06:12:44] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:13:59] *** Joins: alch (~alch@151.36.155.49)
[06:14:02] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[06:15:30] *** Joins: dutch (~DutchIngr@user/dutch)
[06:18:48] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:19:51] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[06:20:05] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[06:25:13] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[06:28:19] *** Joins: seninha (~seninha@user/seninha)
[06:29:08] *** Joins: Raguile (~Raguile@user/raguile)
[06:29:46] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:30:00] *** Joins: de-facto (~de-facto@user/de-facto)
[06:32:59] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 268 seconds)
[06:33:45] *** Joins: bilegeek (~bilegeek@2600:1008:b00f:bd9f:b35d:f157:9cec:ab62)
[06:37:01] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[06:38:02] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[06:38:15] *** Quits: raj (uid72176@user/raj) (Quit: Connection closed for inactivity)
[06:41:27] *** Quits: HaMsTeRs (~Thunderbi@14-0-175-120.static.pccw-hkt.com) (Quit: HaMsTeRs)
[06:41:35] *** Joins: HaMmY1 (~Thunderbi@14-0-175-120.static.pccw-hkt.com)
[06:43:53] *** HaMmY1 is now known as HaMsTeRs
[06:44:37] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[06:45:09] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[06:45:59] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[06:48:49] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[06:49:01] *** Joins: engest (~engest@50.39.227.149)
[06:49:24] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:49:56] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[06:52:29] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:43] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:3a97:eaba:c01a:d700) (Ping timeout: 268 seconds)
[06:53:06] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: Lost terminal)
[06:53:36] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:25ae:baa7:4680:70ca)
[06:54:56] *** Joins: nostar (~nostar@68.51.221.108)
[06:57:27] *** Joins: ts_ (~ts@114.254.3.5)
[07:03:35] *** Quits: pucara (~i@181.92.84.206) (Quit: Lost terminal)
[07:08:53] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[07:18:13] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[07:27:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com)
[07:31:42] *** Quits: jbauer (~jbauer@146.71.11.98) (Ping timeout: 260 seconds)
[07:32:48] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f154-b17e-788b-9195.res6.spectrum.com) (Ping timeout: 268 seconds)
[07:33:28] *** Quits: rkta (~kt@62.113.246.111) (Remote host closed the connection)
[07:33:36] *** Joins: rkta (~kt@62.113.246.111)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:45:42] *** Joins: kts (~kts@103.73.237.174)
[07:48:22] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[07:48:41] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[07:49:45] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[07:50:06] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 245 seconds)
[07:52:11] *** Joins: raj (uid72176@user/raj)
[07:53:15] *** Joins: vitimiti (~Celtor@2a02:c7f:44ab:3100:1627:8c44:f3ea:4069)
[07:56:22] *** Joins: x11ff (~x11ff@151.250.201.160)
[08:00:12] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[08:00:44] *** Quits: HaMsTeRs (~Thunderbi@14-0-175-120.static.pccw-hkt.com) (Quit: HaMsTeRs)
[08:02:25] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 268 seconds)
[08:02:25] *** jmiehe1 is now known as jmiehe
[08:03:42] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[08:04:17] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[08:07:57] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[08:11:40] *** Quits: mahmutov_ (~mahmutov@37.155.85.233) (Ping timeout: 268 seconds)
[08:14:29] *** Joins: kurahaupo_ (~kurahaupo@pa49-195-121-113.pa.nsw.optusnet.com.au)
[08:15:06] *** Quits: kurahaupo (~kurahaupo@203.206.24.213) (Ping timeout: 260 seconds)
[08:25:07] *** Joins: eeee (~eeee@user/eeee)
[08:25:53] *** Joins: presonic (~presonic@111-22-237-24.gci.net)
[08:26:14] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[08:27:34] *** Quits: eeee (~eeee@user/eeee) (Client Quit)
[08:28:26] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[08:31:16] *** Joins: coruja (~coruja@user/coruja)
[08:32:38] *** Quits: x11ff (~x11ff@151.250.201.160) (Ping timeout: 268 seconds)
[08:33:45] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[08:34:28] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[08:34:28] *** Quits: Thedarkb1 (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Ping timeout: 268 seconds)
[08:35:43] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[08:36:48] *** Joins: simon323 (~simon323@112.49.180.130)
[08:37:02] *** Quits: simon323 (~simon323@112.49.180.130) (Remote host closed the connection)
[08:37:33] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:bdff:ad8d:a586:571d)
[08:40:42] *** Quits: engest (~engest@50.39.227.149) (Ping timeout: 260 seconds)
[08:41:10] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:43:26] *** Joins: x11ff (~x11ff@151.250.201.160)
[08:46:16] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[08:48:12] *** Joins: malloy (~jimery@116.30.220.108)
[08:54:15] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[08:54:30] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[09:03:35] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:05:00] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[09:06:33] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 268 seconds)
[09:06:46] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[09:07:09] *** Joins: joev (~joev@user/joev)
[09:11:29] *** Quits: zwr (~zwr@2804:d45:b966:fb00:e598:c47f:66b:6dcf) (Ping timeout: 268 seconds)
[09:12:26] *** Quits: tm512 (~tm512@user/tm512) (Ping timeout: 260 seconds)
[09:14:00] *** Quits: x11ff (~x11ff@151.250.201.160) (Ping timeout: 256 seconds)
[09:15:52] *** Quits: vitimiti (~Celtor@2a02:c7f:44ab:3100:1627:8c44:f3ea:4069) (Remote host closed the connection)
[09:17:20] *** Joins: vitimiti (~Celtor@2a02:c7f:44ab:3100:1627:8c44:f3ea:4069)
[09:18:11] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:23:14] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Ping timeout: 260 seconds)
[09:23:38] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[09:24:13] *** Quits: vitimiti (~Celtor@2a02:c7f:44ab:3100:1627:8c44:f3ea:4069) (Quit: Leaving)
[09:25:23] *** Joins: vitimiti (~Celtor@2a02:c7f:44ab:3100:1627:8c44:f3ea:4069)
[09:26:17] *** Joins: missogra (~missogra@dynamic-077-010-253-012.77.10.pool.telefonica.de)
[09:26:26] *** Quits: kurahaupo_ (~kurahaupo@pa49-195-121-113.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[09:27:03] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[09:27:40] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:bdff:ad8d:a586:571d) (Ping timeout: 256 seconds)
[09:28:02] *** Joins: zwr (~zwr@2804:d45:b966:fb00:d22d:c6e:3029:6344)
[09:28:37] *** Joins: de-facto (~de-facto@user/de-facto)
[09:33:30] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[09:33:48] *** Joins: de-facto (~de-facto@user/de-facto)
[09:37:23] *** Quits: missogra (~missogra@dynamic-077-010-253-012.77.10.pool.telefonica.de) (Ping timeout: 268 seconds)
[09:38:08] *** Joins: kurahaupo (~kurahaupo@pa49-195-121-113.pa.nsw.optusnet.com.au)
[09:41:02] *** Joins: simon323 (~simon323@112.49.180.130)
[09:43:02] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[09:45:22] *** Joins: puke (~puke@user/puke)
[09:45:51] *** Joins: joev (~joev@user/joev)
[09:47:02] *** Joins: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com)
[09:52:37] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:55:09] *** Quits: kts (~kts@103.73.237.174) (Remote host closed the connection)
[09:57:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[09:59:11] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:59:35] *** Quits: joev (~joev@user/joev) (Ping timeout: 268 seconds)
[10:00:01] *** Quits: bilegeek (~bilegeek@2600:1008:b00f:bd9f:b35d:f157:9cec:ab62) (Quit: Leaving)
[10:03:56] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[10:06:42] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:10:03] *** Quits: alch (~alch@151.36.155.49) (Read error: Connection reset by peer)
[10:13:56] *** Joins: tm512 (~tm512@50.53.132.213)
[10:14:06] *** Quits: tm512 (~tm512@50.53.132.213) (Changing host)
[10:14:06] *** Joins: tm512 (~tm512@user/tm512)
[10:14:18] *** Joins: alch (~alch@151.38.157.141)
[10:15:28] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[10:15:41] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[10:16:08] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[10:19:04] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[10:19:55] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 268 seconds)
[10:20:56] <nomagno> (Note _Bool basically just clamps the values to 0 or 1)
[10:21:42] *** Joins: joev (~joev@user/joev)
[10:32:13] *** Joins: supernova (~quassel@2405:9800:ba11:6207:4b53:4575:18d8:faa9)
[10:36:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:36:34] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 268 seconds)
[10:38:24] *** Joins: mrig (~AdiIRC@user/mrig)
[10:42:20] *** Joins: paulo (paulo@user/paulo/x-9032687)
[10:45:59] <aosync> Does a true expression always evaluate to 1 or can it be anything non-zero ?
[10:46:17] <aosync> it always irks me when someone relies on it
[10:46:50] <vdamewood> I guess it depends on what you mean by 'true expression'.
[10:47:03] <aosync> int x = 5, y = 5;
[10:47:04] <vdamewood> Do you mean the true result of a logical operator? Or do you mean any integer expression?
[10:47:06] <aosync> x == y;
[10:47:38] <aosync> the result of a logical operator is what i meant
[10:48:28] <vdamewood> I think it's implementation defined.
[10:49:08] *** Quits: yama___ (~yama@097-090-153-102.biz.spectrum.com) (Remote host closed the connection)
[10:49:26] <vdamewood> Nope. I'm wrong. The standard says it must yield 1 if it's true.
[10:49:32] <vdamewood> https://stackoverflow.com/questions/18097922/return-value-of-operator-in-c
[10:55:04] <aosync> ah, great
[11:00:58] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Quit: Leaving)
[11:01:15] *** Quits: simon323 (~simon323@112.49.180.130) (Remote host closed the connection)
[11:02:53] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:bdff:ad8d:a586:571d)
[11:04:30] *** Quits: sandman13 (sandman13@jujube.ircnow.org) (Ping timeout: 260 seconds)
[11:04:56] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 268 seconds)
[11:09:15] *** Quits: clamiax (~claudio@net-93-149-158-199.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[11:11:30] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[11:11:53] *** Joins: paulo (paulo@user/paulo/x-9032687)
[11:15:36] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[11:17:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:17:41] *** Joins: rcoote (~rcoote@2a02:908:69a:58a0:f848:3a65:c761:4179)
[11:18:30] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[11:19:14] *** Joins: soul-d (~uknown@user/soul-d)
[11:19:45] *** Joins: Guest0 (~Guest0@114.254.3.5)
[11:19:50] <Guest0> hi
[11:19:50] *** Joins: AmR (~AmREiSa@156.199.92.40)
[11:20:49] <vdamewood> Guest0: That's what they all say.
[11:23:50] *** Joins: extern (~archer@80.246.138.162)
[11:24:56] *** Quits: Guest0 (~Guest0@114.254.3.5) (Quit: Client closed)
[11:27:09] *** Quits: rahl (~rahl@102.114.118.169) (Ping timeout: 268 seconds)
[11:27:52] *** Quits: kurahaupo (~kurahaupo@pa49-195-121-113.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[11:28:08] *** Joins: kurahaupo (~kurahaupo@pa49-195-121-113.pa.nsw.optusnet.com.au)
[11:28:30] *** Joins: rahl (~rahl@102.114.98.151)
[11:29:32] <vin> Can parrent access child's heap? Example parent maintains a list of buffers and each child mallocs and fills the buffer. Now once threads join, can the parent access the filled buffer from it's buffer list?
[11:30:01] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[11:30:10] <vin> I think it can
[11:31:36] <kurahaupo> vin: are you considering threads or processes?
[11:31:43] <vin> threads
[11:41:59] *** Joins: earnestly (~earnest@user/earnestly)
[11:42:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 260 seconds)
[11:42:57] <extern> how to choose a target when using make with -f.
[11:43:00] <extern> ? 
[11:43:52] <extern> make -f target outputs error that there is no target names `target`
[11:44:04] <extern> dave0:
[11:44:58] *** Joins: Rounin (~david@84.212.130.215)
[11:45:01] *** Quits: extern (~archer@80.246.138.162) (Quit: nvm gotta go to work cya)
[11:47:47] *** Joins: aradesh (~aradesh@user/aradesh)
[11:55:04] *** Joins: arinov (~arinov@213.194.126.155)
[11:59:02] *** Quits: supernova (~quassel@2405:9800:ba11:6207:4b53:4575:18d8:faa9) (Ping timeout: 260 seconds)
[12:00:42] *** Joins: Klinda (~superleag@user/klinda)
[12:03:06] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:03:13] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:03:40] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:17:11] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 264 seconds)
[12:17:25] <sham1> vin: the child process and parent process have their own separate heaps
[12:21:06] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[12:27:18] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:36:34] *** Quits: ts_ (~ts@114.254.3.5) (Quit: Leaving)
[12:36:36] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[12:37:25] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:45:12] <Bou> shab1: that's for processes though, and vin is talking about threads
[12:45:27] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[12:45:35] <Bou> *sham1
[12:47:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:48:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:48:55] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:51:18] <sham1> Well in that case the terms "parent" and "child" make no sense
[12:56:15] *** Joins: plastico (~plastico@neomutt/plastico)
[13:05:17] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (Quit: Quit.)
[13:05:40] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[13:08:15] *** Quits: raj (uid72176@user/raj) (Quit: Connection closed for inactivity)
[13:08:38] <floatcomplex> sham1: do you ha
[13:08:56] <floatcomplex> ve a few minutes to talk about structures concurrency
[13:10:02] <floatcomplex> s/structures/structured/
[13:10:45] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[13:13:20] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:15:23] *** Joins: V-T60 (~v@91.203.24.166)
[13:19:50] *** Joins: uidops (uidops@gateway/vpn/protonvpn/uidops)
[13:19:57] *** Quits: uidops (uidops@gateway/vpn/protonvpn/uidops) (Client Quit)
[13:20:05] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (Quit: Quit.)
[13:20:20] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[13:21:38] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (Client Quit)
[13:21:53] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[13:24:49] *** Joins: damxsa_ (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85)
[13:26:39] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (Client Quit)
[13:26:46] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Ping timeout: 268 seconds)
[13:30:54] *** Joins: x11ff (~x11ff@151.250.201.160)
[13:32:59] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[13:33:18] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[13:34:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[13:34:59] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[13:36:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:36:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[13:36:45] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[13:38:20] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[13:43:32] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[13:49:19] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[13:54:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[13:54:49] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[13:56:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:02:33] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Ping timeout: 268 seconds)
[14:03:26] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[14:07:38] *** Joins: akuma (~i.am@user/marlboro)
[14:08:50] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[14:10:41] *** Quits: alch (~alch@151.38.157.141) (Read error: Connection reset by peer)
[14:10:44] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[14:10:56] *** Joins: Guest87 (~Guest87@cpc99568-brnt1-2-0-cust760.4-2.cable.virginm.net)
[14:13:53] *** Parts: Guest87 (~Guest87@cpc99568-brnt1-2-0-cust760.4-2.cable.virginm.net) ()
[14:14:45] *** Joins: alch (~alch@151.36.196.81)
[14:16:59] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[14:17:52] *** Joins: Arthuria (~Arthuria@user/arthuria)
[14:17:58] <Feuermagier> I'm trying to compile a simple program that uses _mm_popcnt_u32(value) - however gcc complains that "error: always_inline function '_mm_popcnt_u32' requires target feature 'popcnt', but would be inlined into function 'main' that is compiled without support for 'popcnt'"
[14:18:07] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:18:15] <Feuermagier> how do I compile main() with support for popcnt?
[14:18:40] *** Joins: Everything (~Everythin@37.115.210.35)
[14:18:54] <vin> Can I write to stdout in parallel threads and flush it once after all threads complete?
[14:19:27] <aosync> you can do this, but why do you want to do this
[14:21:34] <vin> aosync: just a particular requirement. So can I write to stdout like a file at different offsets?
[14:21:36] <BtbN> There's also a chance that it'll flush itself in the meantime, because buffers are full
[14:22:00] <vin> BtbN: what is the buffer size that triggers the flush?
[14:22:09] <BtbN> that's entirely up to the system
[14:22:09] <vin> I can check glibc
[14:22:15] <BtbN> Nothing to rely on
[14:22:28] <BtbN> And no, stdout is not seekable, unless it's a file or something
[14:23:01] <vin> Hmm, so I got to output to stdout but I am thinking how to make it parallel
[14:24:55] <BtbN> That's going to end up like a random mess
[14:25:17] <vin> hmmm..
[14:25:58] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[14:26:30] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[14:26:41] <random-jellyfish> I have the source code, in that source code there is a smoke test which I want to compile, somebody gave the CMakeLists.txt file to compile that smoke test
[14:26:53] <random-jellyfish> how do I use the CMakeLists.txt file?
[14:27:01] <random-jellyfish> can I just run a commad that takes CMakeLists.txt as argument?
[14:27:31] <BtbN> You use cmake
[14:27:44] <random-jellyfish> ok but how?
[14:28:42] <fizzie> Feuermagier: Compile with `-mpopcnt`.
[14:29:11] <Feuermagier> thx
[14:29:18] *** Quits: damxsa_ (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85) (Ping timeout: 260 seconds)
[14:29:40] <fizzie> (Or -march=foo with a foo that inherently supports it.)
[14:29:41] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:17] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:36:06] *** Joins: vilhelmbergsoe (~vilhelmbe@2-104-79-222-cable.dk.customer.tdc.net)
[14:36:27] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[14:37:14] <Twix> random-jellyfish, you enter in your console "man cmake"
[14:37:55] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:40:05] <vilhelmbergsoe> Hi there, I'm trying to learn C and I am currently reading "The C Programming Language (ansi)". I have a question regarding the example of counting digits using arrays. We declare an array with "int ndigit[10];". We then later on compare "c = getchar()" like "if (c >= '0' && c <= '9')" -> and run "++ndigit[c-'0'];". The last line is what I am confused about. It says in the book that we find the numeric
[14:40:06] <vilhelmbergsoe> value of the digit this way. Can someone help me understand how/why?
[14:40:48] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:41:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:42:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:42:45] <fizzie> ,cc printf("%d, %d, %d, %d", '0', '1', '2', '3');
[14:42:48] <Twix> a char is just a integer value. If we assume, that the characters are ascii encoded, their codes are ordered. '1' has a higher code than '0'.
[14:42:48] <candide> fizzie: 48, 49, 50, 51
[14:42:58] <fizzie> It's not a coincidence that those are consecutive numbers; the standard requires it.
[14:43:13] <Twix> and if you substract '0' from '0' you get 0
[14:43:26] <fizzie> So if you have '2' (on that system, 50) and '0' (48), you can do '2' - '0' to get 50 - 48 == 2.
[14:43:49] <Twix> ,cc printf("%d %d", '0'-'0', '1'-'0')
[14:43:52] <candide> Twix: 0 1
[14:43:55] <Twix> :)
[14:44:08] <vilhelmbergsoe> Ah! Thanks so much! Makes sense now :)
[14:44:13] <Twix> ,cc printf("%d %d", '0'-'2', '3'-'0')
[14:44:15] <candide> Twix: -2 3
[14:44:16] <vilhelmbergsoe> thanks for the quick responses btw :)
[14:44:27] <Twix> ,cc printf("%d %d", '2'-'0', '3'-'0')
[14:44:28] <Twix> ups
[14:44:29] <candide> Twix: 2 3
[14:44:31] <Twix> :D
[14:44:50] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[14:45:10] <Bou> ,cc putchar( "0123456789"[3] );
[14:45:15] <candide> Bou: 3
[14:45:31] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:45:35] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[14:45:41] <De4nWhit3> Hello everyone.
[14:45:59] *** Joins: hxztnxt (~javi@218.red-83-54-57.dynamicip.rima-tde.net)
[14:46:12] <Bou> hello De4nWhit3
[14:49:46] *** Joins: seninha (~seninha@user/seninha)
[14:53:32] <LangerJan> hi De4nWhit3 
[14:54:29] <hxztnxt>  /msg NickServ VERIFY REGISTER hxztnxt sb2kjgF1AVrVDlXS
[14:55:31] <Learath2> oof
[14:55:34] <cehteh> hxztnxt: try that without the space in front :D
[14:59:29] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[14:59:56] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[15:01:25] *** Joins: shivesh (~shivesh@user/shivesh)
[15:05:48] *** Parts: hxztnxt (~javi@218.red-83-54-57.dynamicip.rima-tde.net) (Leaving)
[15:08:23] <Bou> ouch
[15:10:40] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[15:10:42] <Learath2> I'd leave after that humiliation too
[15:10:59] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[15:11:11] <Feuermagier> I mean at least his password seems strong
[15:11:18] <Bou> *seemed
[15:11:21] <Feuermagier> ^
[15:11:40] <hxztnxt> how do i change my password
[15:11:42] <hxztnxt> lmao
[15:11:44] <Feuermagier> well, who wants to be the next hxztnxt 
[15:12:53] <hxztnxt> tbh it's not fair. I just copied, it had a space
[15:13:02] <Bou> hxztnxt: /nickserv set password <pass>
[15:13:37] <Bou> ...with no leading space
[15:13:49] <LangerJan> lol
[15:16:41] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 256 seconds)
[15:17:49] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Ping timeout: 256 seconds)
[15:18:32] <sham1> And moveover, when you next time want to do this, please set up SASL authentication so you don't need to mess around with leading spaces and the like
[15:20:40] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (Ping timeout: 260 seconds)
[15:20:55] <hxztnxt> password change, you no longer can hack me (or i guess not that easily) *sigh
[15:20:56] <Bou> luckily IRC replaces your password with ******, so we couldn't see it
[15:21:20] <Feuermagier> yes
[15:21:32] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[15:21:52] <sham1> Now that's an old reference
[15:23:51] *** Parts: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Leaving)
[15:23:51] *** Joins: pucara (~i@181.92.84.206)
[15:24:16] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[15:26:42] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[15:26:48] *** Joins: vysn (~vysn@user/vysn)
[15:27:13] <hxztnxt> i want to compress a file using multiple threads. a producer gives each consumer (there are several) a chunk of the file for it to compress it. However, im not so sure how to append in order those compressed chunks. Any idea?
[15:27:15] *** Joins: high_ground (~yes@129.151.69.173)
[15:28:36] <LangerJan> hxztnxt: interesting. is this a custom compression output format in the end?
[15:30:00] <hxztnxt> i think there's a name for it. I can't seem to recall it. Basically aaaaabbbc -> 5a3b1c
[15:30:16] <clarity> Sounds like RLE
[15:30:22] <hxztnxt> yes, that's it
[15:30:45] <hxztnxt> numbers stored as integers, characters as char
[15:31:00] <LangerJan> I suppose you lose a lot of your multithreading advantage when your threads have to wait for each other for ordering
[15:31:04] <hxztnxt> so every piece is 4bytes + 1byte
[15:31:14] <hxztnxt> yep
[15:31:36] <sham1> You could have a buffer where you append the RLE compressed data and then a "sequence number"
[15:31:42] <clarity> Assuming you can buffer stuff and producer is faster than consumers, they don't have to wait
[15:31:44] <sham1> And then your consumer reorders them
[15:32:04] <movingtxt> hmm if you knew how many pieces would result you could allocate the file, include sequence number for each chunk and then the threads can write to their own offset in the output file
[15:32:06] <LangerJan> a priority based queue seems useful
[15:32:35] *** Quits: x11ff (~x11ff@151.250.201.160) (Ping timeout: 268 seconds)
[15:32:53] <Learath2> Are you sure multithreading gives you any benefit here?
[15:33:03] <clarity> It probably doesn't
[15:33:07] <LangerJan> And I suppose you dont keep the entire file in memory and want to write out to disk ASAP?
[15:33:12] <sham1> Yeah, might be better to just go serially
[15:33:29] <hxztnxt> file is mmap'ed
[15:33:49] <LangerJan> hxztnxt: input or output file?
[15:33:56] <hxztnxt> input
[15:34:07] <hxztnxt> output is sent to stdout
[15:35:06] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[15:35:10] <clarity> Push compressed chunks to a queue.  Your writer will grab a chunk, and write it immediately if it's the next in sequence, or stash it away for later if there's a missing piece.
[15:35:24] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:35:32] *** Joins: Crescendo (~Crescendo@user/crescendo)
[15:36:01] <Learath2> Anyway, you could have each thread write to a buffer of their own and just collect it all into a single file at the end, or you could have your consumers wait until it's their turn to write
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:07] <LangerJan> yes. Order the consumers. Give each consumer a chunk. Go back to the first consumer, take its output, give new chunk, write to file
[15:39:04] <LangerJan> write to stdout, sorry
[15:39:17] <sham1> file, stdout, apples to pears
[15:39:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:39:59] <hxztnxt> but first i need to merge all compressed chunks, meaning 4a5a -> 9a
[15:41:52] <LangerJan> hxztnxt: so you keep your last result just in case there is another <#letters><letter>
[15:42:12] <LangerJan> hxztnxt: only if the letter changes, you write to stdout
[15:42:52] <sham1> If you're doing this, you might as well just do things serially without threads, since every chunk might depend on every chunk after
[15:44:25] <hxztnxt> wouldnt it be faster, anyway
[15:44:26] <hxztnxt> ?
[15:44:50] <LangerJan> hxztnxt: no, multithreading is not free of costs
[15:45:26] <hxztnxt> i know, but all chunks would be compressed at the same time, that would make it faster 
[15:46:05] *** Joins: kadir (~kadir@95.7.9.203)
[15:46:32] *** Quits: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch) (Ping timeout: 260 seconds)
[15:46:53] <LangerJan> would they "all" be compressed or only as many chunks as you have threads available?
[15:47:13] <hxztnxt> the latter
[15:47:26] <LangerJan> your bottleneck is distributing and collecting the compressed output
[15:47:57] <hxztnxt> what if i use many threads?
[15:48:14] <LangerJan> find a sweet spot by experimenting with chunk sizes, number of threads, etc.
[15:48:29] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[15:48:48] <LangerJan> your useful number of threads is limited by your hardware
[15:49:17] <hxztnxt> if i have 4 cpus, how many should i spawn?
[15:50:02] <LangerJan> try it, YMMV. But your task here is not trivially paralliziable
[15:50:24] *** Joins: masterbuilder (~user@user/masterbuilder)
[15:50:39] <hxztnxt> maybe there's another way?
[15:50:53] <LangerJan> since you have to serialize at the end. The more threads you spawn, the more threads may idly wait if the other parameters are not ideally set
[15:52:17] <hxztnxt> can i ask an offtopic q here? or is there a channel?
[15:52:45] *** Joins: constxo (~brad@192.75.101.178)
[15:53:27] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[15:53:31] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 256 seconds)
[15:54:08] <LangerJan> tbh, this topic already was not *that* C related ^^^
[15:56:22] <hxztnxt> mmm okay
[15:56:45] <hxztnxt> why is irc still so used when there are alternatives such as matrix?
[15:57:27] <Feuermagier> hxztnxt, because this is beautiful
[15:57:37] <Feuermagier> simple and reliable
[15:57:47] <kurahaupo> hxztnxt: Because there are lots of independent IRC services, and only one proprietary Twitter or Discord
[15:58:06] *** Joins: constxd (~brad@192.75.101.178)
[15:58:09] <sham1> Matrix is also worse for hardware because it relies on polling the HTTP endpoint for new messages
[15:58:11] <Learath2> "so used" is very subjective, compared to discord the entire irc population is nothing but a blip
[15:58:35] <Feuermagier> matrix causes *horrible* cpu loads
[15:58:58] <sham1> The clients are also nothing to really write home about
[15:59:47] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[15:59:56] *** Joins: x11ff (~x11ff@151.250.201.160)
[16:01:02] <kurahaupo> hxztnxt: Turn the question around. Why should we switch to Matrix?
[16:01:27] *** Quits: constxo (~brad@192.75.101.178) (Ping timeout: 256 seconds)
[16:01:35] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[16:02:03] <hxztnxt> kurahaupo:it stores old messages
[16:02:35] <kurahaupo> hxztnxt: My IRC client stores old messages.
[16:02:49] <hxztnxt> i mean when you are offline
[16:03:23] <kurahaupo> hxztnxt: My ZNC will do that for me
[16:03:54] <LangerJan> I just leave irssi in my tmux open on my raspberry pi at home
[16:04:53] <kurahaupo> hxztnxt: I would rather be in charge of keeping my own archive, not dependent on someone else's hardware
[16:05:42] <kurahaupo> That said, there are far too many messages to read all the scroll back, from even one channel
[16:05:43] <sham1> The message history thing alongside other "modern" matrix features can be brought to IRC either via the IRCv3 extensions or just with client behaviour
[16:06:37] <clarity> I've found matrix to be offline or broken more often than my connection to IRC is down.
[16:07:02] <kurahaupo> This channel has 1500+ messages/day; ##Linux has 5000+ messages/day
[16:07:05] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:07:27] <kurahaupo> hxztnxt: Is there another benefit that you'd propose?
[16:07:39] <clarity> And in a few months of using matrix, i've had to wipe the client's data dir because it shat itself
[16:07:42] <hxztnxt> i like irc most, old school vibes, i guess
[16:07:45] <clarity> That never happened in 20 years of using IRC
[16:08:27] <clarity> Also useless garbage error messages etc
[16:08:35] <clarity> If I can't connect to IRC, I will have an idea why
[16:08:46] <clarity> When Element can't connect?  "unable to connect glhf"
[16:09:27] <clarity> Typical modern joke software.  Obese, unreliable, unhelpful, focus all over the place & keyboard shortcuts work once in a blue moon
[16:09:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[16:09:42] <clarity> At least you can upload videos, except it'll butcher them
[16:09:49] <clarity> So you go back to sending links like on IRC
[16:10:11] *** Quits: joev (~joev@user/joev) (Ping timeout: 268 seconds)
[16:10:52] *** Joins: joev (~joev@user/joev)
[16:11:06] *** Joins: derjanni (~textual@p508ee98f.dip0.t-ipconnect.de)
[16:11:53] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[16:13:04] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[16:13:44] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Client Quit)
[16:14:22] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:15:10] *** Quits: pucara (~i@181.92.84.206) (Quit: Lost terminal)
[16:15:45] *** Quits: jonathanclarke (~jonathanc@202.51.76.91) (Ping timeout: 268 seconds)
[16:15:47] <earnestly> irc is more 'turing complete user', which is cozy: http://contemporary-home-computing.org/turing-complete-user/
[16:17:17] *** akuma is now known as ToDDynho
[16:17:19] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[16:17:40] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[16:17:45] <De4nWhit3> New to C here, when working with arrays, what would be the difference when assigning a value to an element in the array when 1) I append \0 (null at the front), or 2) I just assign a value to it? Is appending \0 best practice or better than just assigning a value?  Code: https://bpa.st/HZQA
[16:18:17] *** Joins: joev (~joev@user/joev)
[16:20:31] <clarity> If you want to assign a value, you assign a value.
[16:20:32] <clarity> That's it.
[16:20:55] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:21:57] <De4nWhit3> @clar
[16:22:16] <De4nWhit3> Oops. clarity so there is no reason to prepend '\0'?
[16:22:19] <fizzie> ('\0' + i) is a weird way to say `i`.
[16:22:24] <fizzie> That doesn't *prepend* anything.
[16:22:28] <clarity> That's just addition
[16:22:48] <De4nWhit3> Ah ok, thank you very much!
[16:22:52] <fizzie> '\0' is exactly the same as 0, so ('\0' + i) is the same as i + 0, which is the same as i.
[16:23:05] <De4nWhit3> Thank you very much! 
[16:23:13] <De4nWhit3> I was baffled by this in the book.
[16:23:28] <fizzie> '0' + i, on the other hand, you might see somewhere, to convert a value between 0 to 9 to its corresponding decimal digit character, '0' to '9'.
[16:23:51] <fizzie> (The inverse of doing i-'0' to go from a decimal digit character to the digit's numeric value.)
[16:25:23] <fizzie> ,cc char arr[11]; for (int i = 0; i < 10; i++) arr[i] = '0' + i; arr[10] = '\0'; puts(arr); // produces the string "0123456789"
[16:25:25] <candide> fizzie: 0123456789
[16:26:59] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[16:27:23] *** Joins: komputilo (~Komputilo@dhcp-077-249-129-116.chello.nl)
[16:27:28] *** Quits: rcoote (~rcoote@2a02:908:69a:58a0:f848:3a65:c761:4179) (Ping timeout: 268 seconds)
[16:27:43] <De4nWhit3> fizzie I am using intelliJ ide, (not sure what is the best), with gcc. When I use that code it prints a blank line. 
[16:29:22] <fizzie> Did you keep the '\0' instead of '0' in the loop? 
[16:29:33] *** Joins: rcoote (~rcoote@ip-176-198-113-0.hsi05.unitymediagroup.de)
[16:29:36] <fizzie> (Because those are two entirely separate things.)
[16:32:00] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[16:32:06] <De4nWhit3> Ah, thank you fizzie. I did not keep the 0.
[16:32:12] <De4nWhit3> Now it is working!
[16:32:41] <fizzie> Doing `arr[i] = '\0' + i;` would print a blank line, because the contents of the array will be {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0} instead of {'0', '1', '2', ..., '9', 0}, so when interpreted as a string (which is what `puts` does) it's just an empty string, due to the initial 0.
[16:35:05] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[16:36:30] *** Joins: constxo (~brad@192.75.101.164)
[16:37:09] *** Joins: sant (~sant@170.81.141.210)
[16:37:54] *** Joins: random-nick (~random-ni@87.116.176.55)
[16:39:11] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Remote host closed the connection)
[16:39:34] *** Quits: constxd (~brad@192.75.101.178) (Ping timeout: 260 seconds)
[16:39:34] <Feuermagier> De4nWhit3, JetBrains has an IDE specifically for close-to-hardware languages (called CLion) - if you are a student you usually get it for free. Feels similar to IntelliJ; the internal tools are better for C though
[16:39:36] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[16:42:25] *** Joins: kilolympus (~kilolympu@185.65.135.177)
[16:43:02] <De4nWhit3> fizzie so its like being forced to be int when you put \0 in front?
[16:43:04] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[16:43:41] <De4nWhit3> Thank you Feuermagier
[16:44:02] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Quit: WeeChat 3.2)
[16:45:50] *** Joins: superboot (~agentgasm@user/superboot)
[16:46:05] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[16:46:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:51:34] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:51:59] <De4nWhit3> Clion is installing. :D  I am excited to try it out. Feurermagier
[16:52:00] <fizzie> It's already an int. And '\0' is an int too, with the value 0. So adding '\0' doesn't really do anything. I just meant by contrast to adding '0', which *does* do something, because the value of '0' is not 0.
[16:53:09] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:54:30] <omegatron> De4nWhit3:  '0' means the (ASCII/Unicode) character DIGIT_ZERO, which has a value of 0x30, while '\0' is 0x00
[16:54:31] <Bou> you only need a '\0' at the end, to let C know where your string ends (but you can simply write 0 too)
[16:54:33] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:55:02] <De4nWhit3> omegatron thank you.
[16:55:45] <gproto23> ```char ptr[0]; ptr[atoi(argv[1])] = 0;``` 1) What does zeros here? 
[16:55:47] <Bou> De4nWhit3: have a look at the ASCII table: https://i.imgur.com/FLQNHLu.gif
[16:56:04] <Bou> these are the values you want in your array, with 0 (NUL) as the last character
[16:56:22] *** Joins: strajder (~strajder@user/strajder)
[16:56:50] <De4nWhit3> Thank you Bou.
[16:57:10] <De4nWhit3> What happens if I do not put \0 as the last element of the array? Will it break the program eventually? 
[16:57:14] <Bou> so you can use, say, char myArr[] = { 48, 49, 50, 0 } and it will print "012"
[16:57:51] <omegatron> this is the reason, why you might find often in source code something like  variable - 'A'  to determine the position of the variable's contents within the latin alphabet  ( 'G' - 'A'  -> 0x47 - 0x41 = 0x06  --> position/offset of 6 )
[16:58:13] <Bou> yes, it will break because it will keep printing (accessing bytes beyond the end of myArr)
[16:58:48] <De4nWhit3> *Mindblown* Thank you Bou that is very cool!
[16:59:15] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[16:59:55] <omegatron> unless the program stores the length of the array/string somewhere else, zero is often used as terminator to end something
[17:00:11] <Bou> well, your example program won't break because you're not actually using the array, but it will if you use puts or printf
[17:00:14] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[17:00:19] <omegatron> which also means, if you want to allow the byte value of 0 in your data/string, you MUST store the length somewhere else
[17:00:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[17:00:54] <De4nWhit3> Would it be a bufferoverflow if it tries to go beyond the last element due to the lack of \0?
[17:01:06] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:01:55] <gproto23> sorry guys someone did answer my question?
[17:02:00] <omegatron> it depends what your program does/expects, but usually it's not what you want
[17:03:51] *** Quits: vilhelmbergsoe (~vilhelmbe@2-104-79-222-cable.dk.customer.tdc.net) (Ping timeout: 268 seconds)
[17:03:51] <omegatron> you could store a bunch of null-terminated strings adjacent to each other and your function knows that and handles this perfectly (though it still needs to know when to stop eventually)
[17:04:17] <omegatron> gproto23: which 0 do you mean? the first or the second?
[17:04:55] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 256 seconds)
[17:06:22] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[17:07:02] *** Joins: engest (~engest@50.39.177.170)
[17:07:27] <gproto23> omegatron both
[17:08:45] <Bou> well, you're writing... somewhere :)
[17:09:16] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[17:09:21] <Bou> but it's a zero-length array (gnu extension) so it doesn't have any space allocated to it so you probably damage something else on your stack
[17:09:38] <enyc> roar
[17:12:01] <De4nWhit3> Bou, I thought I got it but I think I don't truly understand. https://bpa.st/I7GA The first program (A) was how I had it. Which you said translates into { 0, 1 , 2 } etc. Which looks to my untrained eye, like integers. Which would explain why puts doesn't translate it into a string. Whereby using '0' translates into { '0', '1', '2' } etc, which
[17:12:01] <De4nWhit3> looks to me like text char values. Which makes sense why it translates into a string with puts. Why does program A output nothing?
[17:13:37] <Bou> chars are just integers, tiny 1-byte ones
[17:14:05] <omegatron> your  myArr   starts with a zero byte, therefore nothing usable for puts()
[17:14:25] <omegatron> for puts()  myArr has zero length
[17:14:40] <De4nWhit3> omegatron oh my gosh! So the 0 that the array is initialized with terminates the array?
[17:14:47] <omegatron> yes
[17:14:56] <De4nWhit3> Oh my god! I get it now. Thank you. LOL!
[17:15:00] <omegatron> well, it terminates a byte sequence, which is expected to be a string
[17:15:12] <omegatron> (by puts() )
[17:15:34] *** Quits: sant (~sant@170.81.141.210) (Ping timeout: 268 seconds)
[17:15:48] *** Joins: supernova (~quassel@2405:9800:ba11:6207:7337:2116:cd8d:51d9)
[17:16:51] <omegatron> if you look closely to the man page of puts() it says    int puts(const char *s);   yet, you give it a  char[]  as parameter  it works, because   char var[]  and char * var  are equivalent
[17:17:24] <omegatron> that's also why some people use    int main ( int argc, char ** argv )    while others use   int main ( int argc, char * argv[] )    effectively the same
[17:17:34] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[17:18:16] <omegatron> in the end  variable  is the start of a byte sequence
[17:18:39] <omegatron> variable = myArr  in your case
[17:19:30] <De4nWhit3> Ok thank you. And '0' means zero while '/0' means null?
[17:19:43] <Bou> '0' means 48
[17:20:01] <De4nWhit3> Which is 0 in char?
[17:20:13] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[17:20:20] <high_ground> 0 is '\0'
[17:20:52] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[17:22:06] *** Joins: X-Scale` (~ARM@83.223.227.196)
[17:23:19] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:23:22] <De4nWhit3> Just when I thought I had it! So \0 is NOT the escape sequence for NULL? It's simply a numerical zero?
[17:23:26] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[17:23:56] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Read error: Connection reset by peer)
[17:23:57] <Bou> it is both
[17:24:11] <Bou> a numerical 0 denotes the end of your string
[17:24:27] <Learath2> Um, let's be accurate with our terminology. \0 is the escape sequence for the null character, which is defined to be a byte with all it's bits set to 0
[17:24:50] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[17:25:20] <De4nWhit3> Thank you Learath2
[17:26:03] <De4nWhit3> So the '0' would be a numerical 0 then?
[17:26:04] *** X-Scale` is now known as X-Scale
[17:26:08] <Learath2> NULL is a null pointer constant
[17:26:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:26:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:26:14] *** Joins: wroathe (~wroathe@user/wroathe)
[17:26:31] <Bou> the character '0' is in the middle of the ASCII table, at 48
[17:26:51] <Learath2> What do you mean by numerical 0? Treated as an integer the character `\0` (the null character) would indeed have the value 0
[17:26:57] <Bou> just like 'x' is 120 and < is 60 etc
[17:27:51] <De4nWhit3> I am just baffled as to what is the difference between using '\0' and '0'. Because one outsputs nothing with puts and the other outputs the entire array with puts. 
[17:28:24] <floatcomplex> De4nWhit3: in what context? are you compiling with -fsanitize=address,undefined ?
[17:28:29] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[17:28:30] *** Quits: Alhazred (~Alhazred@86.106.74.40) (Ping timeout: 268 seconds)
[17:28:32] <floatcomplex> sounds like one or the other of your uses is badly UB
[17:28:34] <high_ground> '0' is a the ascii character 0, '\0' basically is the integer 0
[17:28:36] <De4nWhit3> floatcomplex :D  
[17:28:38] <Learath2> '\0' is the null character, it's used to terminate c strings. '0' is literally the character 0, as in the print character 0
[17:29:38] <Learath2> ,cc char s[] = { '0' }; puts(s);
[17:29:40] <candide> Learath2: 0
[17:29:43] <Learath2> is this what you tried ^^?
[17:29:53] <omegatron> you have to differentiate between  0 , '0' and "0"    the first is simply 0 (or 0x00), the next is a literal which allows decimal, octal, hexadecimal and dual notation  and  the last is a   char *  ( which usually ends up being a pointer to a read-only NULL-terminated string somewhere in your binary, so you can do something like  char * var = "0" ; )
[17:30:14] <De4nWhit3> floatcomplex : https://bpa.st/X3FA I am making notes to try an understand this wild ride.
[17:31:59] <Learath2> De4nWhit3: I suspect the behaviour you observe with the '\0' and '0' thing is indeed just undefined behaviour. The implementation is allowed to do whatever it wants when you pass something that is not a c string to a function that expects one (e.g. puts)
[17:32:09] <floatcomplex> De4nWhit3: compile with -g -fsanitize=address,undefined and it will tell you exactly what is wrong
[17:32:27] <floatcomplex> there is no mystery here
[17:32:50] <floatcomplex> and it doesn't require a whole lot of esoteric knowledge to figure it out. just use the tool and let it tell you
[17:33:21] <Bou> how would asan help against printing empty strings? I don't see any overflow?
[17:33:33] <floatcomplex> Bou: there are non-null-terminated strings
[17:33:51] <floatcomplex> or, non-null-terminated arrays, being passed to things that expect null-terminated strings
[17:34:01] <floatcomplex> however you want to refer to it, that's what's happening
[17:34:22] <floatcomplex> asan will tell you that puts on line X is reading past the end of myArr from line Y
[17:35:05] <Bou> hm one of us isn't reading the code properly then
[17:35:51] <Bou> `myArr[10] = '\0';` nul-terminates it, he's just trying to print {0,1,2,3,4,5,6,7,8,9,0} which stops immediately at the first NUL
[17:36:09] <floatcomplex> oh lol
[17:36:35] <Learath2> His paste doesn't really have the issue, but the thing he described in a message does have it
[17:36:45] <floatcomplex> ok so there is no actual problem here other than the expectation of what should happen in Program B
[17:36:49] <floatcomplex> err
[17:36:52] <floatcomplex> Program A
[17:36:55] <Learath2> Compiling that example he hasn't shared with asan will indeed show him what is going wrong
[17:37:36] <floatcomplex> this is why every bug report-like utterance should include what you observed to happen AND what you expected to happen, and the relevant code
[17:38:21] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 256 seconds)
[17:39:20] <Bou> Learath2: and amusingly your ,cc didn't throw an error because asan isn't enabled by default
[17:39:44] <floatcomplex> ,cc -fsanitize=address char s[] = { '0' }; puts(s);
[17:39:49] <candide> floatcomplex: ================================================================= ==63073==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc3b16f521 at pc 0x7fa080e3fc39 bp 0x7ffc3b16f4e0 sp 0x7ffc3b16ec90 READ of size 2 at 0x7ffc3b16f521 thread T0     #0 0x7fa080e3fc38 in __interceptor_puts.part.0 (/lib64/libasan.so.6+0x3fc38)     #1 0x4025e0 in main      #2 0x7fa080c2455f in __libc_start_ca... <truncated; https://0x0.st/-5HK.txt>
[17:40:16] <floatcomplex> hmm is it just me or is candide's formatting of asan output worse than it used to be
[17:40:25] <floatcomplex> maybe my terminal is just a different width lol
[17:40:32] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:41:09] <Bou> it's always been wonky, I think an s/^=*// would be nice
[17:41:41] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[17:41:52] <De4nWhit3> I am so confused. 
[17:41:55] *** Joins: wyre (~wyre@user/wyre)
[17:41:58] *** Quits: wyre (~wyre@user/wyre) (Remote host closed the connection)
[17:42:21] <floatcomplex> De4nWhit3: can you tell us specifically what you expected to happen that is not happening
[17:42:30] <Bou> just forget that you can write '\0', it is nothing special, just a weird way of saying 0
[17:42:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:43:12] <De4nWhit3> \0 in my initial program, terminated every element, and 0 didn't terminate it, only on myArr[10] where \0 was placed, did the array terminate? https://bpa.st/FX3Q
[17:43:53] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:4d0e:ce74:c79b:d28a) (Quit: ZNC 1.8.2 - https://znc.in)
[17:44:06] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:8a08:f3ba:6c3c:916a)
[17:44:10] * floatcomplex pours more coffe
[17:44:10] <De4nWhit3> floatcomplex I am just confused why in program A the output with puts is nothing. And in Program b it is 01234 etc. But I think now, I understand that \0 is the terminate indicator in an array?
[17:44:30] <floatcomplex> De4nWhit3: in program A, the first byte is a termination
[17:44:32] <De4nWhit3> So how I understood it was that in Program A, the first element is \0 which terminates.
[17:44:36] <floatcomplex> yes
[17:44:48] <De4nWhit3> Ok thank you so much. T_T 
[17:45:01] <De4nWhit3> I appreciate all of your patience.
[17:45:21] <floatcomplex> De4nWhit3: in this context, writing '\0' in the code is the same as writing 0, without quotes, in the code
[17:45:29] <floatcomplex> you got that right
[17:48:31] <Bou> char hello[] = "Hello";     for(int i = 0; i < sizeof hello; i++) { printf( "%d ", hello[i] ); }
[17:48:34] *** Joins: rcm888 (~u1@95.54.115.108)
[17:48:42] <Bou> ,cc char hello[] = "Hello";     for(int i = 0; i < sizeof hello; i++) { printf( "%d ", hello[i] ); } // whoops
[17:48:45] <candide> Bou: [warning: comparison of integer expressions of different signedness: 'i​nt' and 'long unsigned i​nt' [-Wsign-compare]] 72 101 108 108 111 0
[17:49:17] <De4nWhit3> When you guys type ,cc do you mean gcc?
[17:49:19] <Bou> ugly, but hey, it ran...
[17:49:39] <floatcomplex> De4nWhit3: typing ",cc" in this chat results in candide compiling and running whatever line of code follows it
[17:49:42] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:49:53] <floatcomplex> De4nWhit3: candide doesn't have a day job
[17:49:57] <De4nWhit3> Oooh thank you. :D
[17:50:57] <floatcomplex> ",cc -fsanitize=address" is useful for things involving stringlike arrays that may or may not be properly null terminated
[17:51:24] <floatcomplex> Bou: "sizeof hello" in that context makes me want to pour seawater into my computer a bit
[17:51:35] <floatcomplex> or vice versa idk
[17:51:46] <markand> memory is not bad as well
[17:51:52] <markand> you can combine -fsanitize=address,memory
[17:52:19] <Bou> floatcomplex: sorry, your hardware bill must be insane by now
[17:53:27] <floatcomplex> markand: yeah -fsanitize=address,undefined is a portable set of flags that should be in your muscle memory regardless of platform. unfortunately memory is linux-only
[17:54:55] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[17:55:36] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[17:55:52] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[17:55:59] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[17:56:25] <Feuermagier> a nullpointer dereference will always SIGSEGV, right (for example mystruct==NULL; mystruct.myfiled = 1)
[17:56:41] <caze> No.
[17:56:46] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:57:00] <Feuermagier> caze, what else can happen?
[17:57:01] <floatcomplex> Feuermagier: it's undefined whether it segfaults or not. hence all this discussion about using -fsanitize=address when developing code
[17:57:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[17:57:38] <caze> Feuermagier: Nothing, for instance, if the compiler can prove that you don't ever read mystruct.myfiled.
[17:58:40] <oldlaptop> There's no reason the implementation can't let you read things through a NULL pointer either.
[17:58:44] <floatcomplex> there are platforms on which the zero page is actually valid memory to dereference
[17:59:17] <oldlaptop> there has been at least one linux (kernel) CVE associated with the ability to mmap() things at NULL
[17:59:35] <Feuermagier> I'm attempting to find an exploit with heap overflow, but all I spot is an unchecked calloc()
[17:59:52] *** Joins: Achylles (~Achylles_@2804:431:d725:bb1e:5dd8:3b02:6cc3:2744)
[17:59:55] <Feuermagier> where fields of the struct get set right after
[18:00:47] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[18:01:47] *** Quits: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[18:04:01] <nomagno> Is there an equivalent to `int myint = calloc(sizeof(int))` for stack?
[18:04:05] <nomagno> So, explicitly zero out a variable
[18:04:22] <caze> That's an error.
[18:04:34] <caze> But you can do int myint = 0;
[18:04:35] <Feuermagier> nomagno, int myint = 0;
[18:04:50] <fizzie> The equivalent is to have an initializer. And the `{0}` initializer is technically valid zero initializer for a value of any type.
[18:05:13] <nomagno> Sorry, wasn't clear enough. I would like to have a way to do this for ANY type, including structs
[18:05:16] <nomagno> which... zeroing out a struct is annoying
[18:05:30] <fizzie> Yes, {0} works for any type, including structs.
[18:05:45] <nomagno> OH? TIL
[18:05:48] <nomagno> That is actually insanely useful
[18:05:58] <nomagno> I will use this for every stack declaration ever now
[18:06:02] <fizzie> As long as you have an initializer, the entire object is initialized; fields not initialized explicitly are implicitly initialized as with objects with static storage duration (i.e., to zero).
[18:06:23] *** Joins: pulse (~pulse@user/pulse)
[18:06:28] *** Joins: quartz (~quartz@user/quartz)
[18:06:37] <fizzie> There can be some zealous compiler warnings about too few or too many {}s with the literal `{0}` sometimes. Though at least GCC exempts that from the warnings as a special case.
[18:06:58] <caze> I mean, just type 0 if it's a scalar, and { 0 } if it's an aggregate type?
[18:07:13] <caze> Are you generating code?
[18:07:23] <fizzie> ,cc int scalar = {0}; int arr[4] = {0}; struct { struct { int a, b; }; float c; } complicated_struct = {0};
[18:07:26] <candide> fizzie: no output: scalar = 0; complicated_struct = {{a = 0, b = 0}, c = 0}; arr = {0, 0, 0, 0}
[18:07:56] <nomagno> I am just wondering how to properly initialize something, no special use case
[18:08:11] <nomagno> {0} seems like a nice way to zero ANYHING out for sure!
[18:08:18] <floatcomplex> nomagno: if it's a struct, and you want to initialize one or two fields and zero everything else, then use a c99 designated initializer
[18:09:08] <fizzie> Leaving out the braces is probably a good idea for a scalar initializer, they do look a bit wonky in that context.
[18:09:15] <fizzie> (Still valid, though.)
[18:09:30] *** Quits: alch (~alch@151.36.196.81) (Read error: Connection reset by peer)
[18:10:20] <nomagno> floatcomplex: Good advice, but I would REALLY benefit from zeroing ALL variables out
[18:10:31] <nomagno> I am very prone to messing up the logic paths
[18:11:04] <nomagno> So at least not segfaulting because I forgot to initialize half the program sounds like a nice idea
[18:11:23] *** Joins: wyre (~wyre@user/wyre)
[18:11:50] <floatcomplex> nomagno: again, not to sound like a broken record, but there are tools built into your compiler that can make that whole class of problems go away for you
[18:12:15] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[18:12:38] <nomagno> floatcomplex: This is the first time you say that but OK :D
[18:12:41] <floatcomplex> wtf
[18:12:42] <fizzie> A designated initializer will zero the *rest* of the structure (just like the {0} does), so there's no risk of forgetting to set specific fields, as long as you do have an initializer for the object.
[18:13:04] <fizzie> Convenient for, for example, structs of (callback) function pointers where some of them are optional.
[18:14:06] <Bou> floatcomplex: tell us, what tools do we need exactly?
[18:14:07] <fizzie> foo->callbacks = (struct foo_callbacks){ .on_x = f1, .on_y = f2 }; // initializes .on_z to a null pointer
[18:14:08] *** Joins: alch (~alch@151.36.182.35)
[18:14:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:14:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:14:11] *** Joins: wroathe (~wroathe@user/wroathe)
[18:14:33] <floatcomplex> Bou: -fsanitize=memory, as markand just pointed out
[18:14:41] <floatcomplex> Bou: for that particular class of problem
[18:14:49] <floatcomplex> -fsanitize=address,undefined in general
[18:15:23] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[18:15:54] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[18:16:19] <nomagno> I already compile with `-fsanitize=address,undefined` most of the time. I did not ask about how to debug my program, but about how to prevent having to debug
[18:16:27] <nomagno> This initializer thingy works
[18:17:03] *** Joins: rgrinberg (~textual@200.5.63.76)
[18:19:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:19:44] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:22:04] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[18:23:19] *** Joins: Macuser (~Macuser@216.30.159.201)
[18:23:22] *** Quits: Achylles (~Achylles_@2804:431:d725:bb1e:5dd8:3b02:6cc3:2744) (Remote host closed the connection)
[18:24:03] <Bou> hm... iirc a few weeks ago pragma had to disable gdb for asan to work. but we get a lot of memory related questions
[18:24:20] <Bou> could you do something like if (compile and run with asan triggers it) show that; else compile and run without
[18:24:43] *** Joins: caef^ (~caef@wsip-98-188-242-6.mc.at.cox.net)
[18:25:06] <pragma-> That is exactly what candide does now.
[18:25:34] <pragma-> It detects if -fsanitize=address is provided. If so, candide will run the resulting program directly without gdb.
[18:25:54] <pragma-> Otherwise candide will use gdb.
[18:26:12] <Bou> but it's not on by default, someone did `,cc char s[] = { '0' }; puts(s);`a while ago, no error
[18:26:13] * Feuermagier pets candide
[18:26:22] * candide blushes at F​euermagier
[18:26:37] <pragma-> Right, it's not on by default.
[18:27:17] <pragma-> It's actually LeakSanitizer that prevents using gdb rather than ASAN. Apparently the latest version of Fedora has LeakSanitizer enabled when ASAN is enabled. 
[18:27:55] <pragma-> I suppose I could figure out how to disable LeakSanitizer instead, so we can have ASAN always on.
[18:28:01] <pragma-> LeakSanitizer isn't as important.
[18:28:42] *** Joins: meator (~meator@user/meator)
[18:28:56] <floatcomplex> i'd be kinda surprised if there aren't going to be other ways in which having asan enabled makes gdb useless even if not broken
[18:29:20] <nomagno> Why do char arrays usually need to be null-terminated?
[18:29:32] <nomagno> You'd think the chars tell you how long the char array is
[18:29:34] <sham1> Because they're usually used as strings
[18:29:54] <nomagno> Well and why do strings need to be null-terminated?
[18:29:57] <Bou> nomagno: tell me how long this `char *bla` is then
[18:30:02] <sham1> How could you tell the length from the characters alone if you're not using a sentinel value like '\0'
[18:30:43] <nomagno> I said char array, not char pointer
[18:30:44] <sham1> nomagno: A string in C is defined as a sequence of chars terminated by '\0'
[18:31:07] *** imm__ is now known as imm_
[18:31:26] <nomagno> sham1: HMMM, so if you have an array, everything after the null terminator will be ignored in all cases?
[18:31:30] <sham1> And so if you want to use a char array as a string, you need a null character
[18:31:39] <sham1> If used as a string, yes
[18:31:42] <floatcomplex> nomagno: if it's being passed to a function expecting a c string ,yes
[18:31:57] <floatcomplex> nomagno: sometimes a character array is just an array of characters
[18:31:57] <nomagno> If it just expects a char array, it doesn't care
[18:31:59] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[18:32:14] <pragma-> Oh, I misunderstood Bou. He's suggesting adding another compile/run of the program with ASAN enabled and then to run it outside of gdb to detect any ASAN errors and to show those errors if so, otherwise to compile yet again without ASAN and to run in gdb as normally done.
[18:32:14] <nomagno> Yeah I didn't actually know what
[18:32:31] <pragma-> That would add a second or two of extra time per ,cc snippet :(
[18:32:36] <nomagno> Though the most interesting thing I did NOT know about is the volatile qualifier
[18:33:21] <floatcomplex> nomagno: first rule about volatile is almost every time you think you need volatile, you don't
[18:33:25] <floatcomplex> it does less than you think
[18:33:57] <floatcomplex> the canonical example of volatile actually being needed is if your main loop is doing while (condition);
[18:34:11] <floatcomplex> and you have a volatile sig_atomic_t condition = 1; in global scope
[18:34:20] <floatcomplex> and then a signal handler that sets it to zero
[18:34:30] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[18:34:34] <floatcomplex> without volatile, the compiler is free to optimize while(condition) to if (condition) while(1);
[18:34:35] <candide> floatcomplex: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[18:34:50] *** Quits: x11ff (~x11ff@151.250.201.160) (Ping timeout: 260 seconds)
[18:35:05] <floatcomplex> in almost no other situation is volatile actually helpful
[18:35:33] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Remote host closed the connection)
[18:35:41] <nomagno> You know... I was actually wondering why my program was only working in certain compilers. Could it be it is printing a value in a while loop in main? On TCC the value just doesn't change
[18:35:55] <fizzie> pragma-: `ASAN_OPTIONS=detect_leaks=0` in the environment.
[18:36:30] <pragma-> fizzie: thanks
[18:36:49] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[18:37:07] <floatcomplex> pragma-: i confess to not understanding why gdb is involved in ,cc
[18:37:09] <pragma-> Actually, thinking about it a bit more, candide already does do 2 or 3 compiles of the program to check for print_last_statement() issues. I might be able to work with this to also check for ASAN errors without needing to add an extra compile.
[18:37:28] <pragma-> floatcomplex: to detect and report bugs
[18:37:40] <pragma-> also gdb integration is kind of convenient, especially with ,cc's gdb() macro
[18:37:44] <sham1> ,cc FILE *f = fopen("/etc/os-release", "rb"); char cs[4096]; fgets(cs, 1, sizeof(cs), f); cs[sizeof(cs) - 1] = '\0'; fclose(f); printf("%s\n", cs);
[18:37:45] <candide> sham1: warning: passing argument 3 of 'fgets' makes pointer from integer without a cast [-Wint-conversion] note: expected 'FILE * restrict' but argument is of type 'long unsigned i​nt'  error: too many arguments to function 'fgets'
[18:38:12] <floatcomplex> right but does it automatically do a backtrace or something on a segfault
[18:38:18] <pragma-> Yes.
[18:38:26] <pragma-> And you can manually request one with the gdb() macro
[18:39:19] <fizzie> Also that print-all-locals thing.
[18:39:28] <fizzie> ,cc int x = 1; char c = 'x';
[18:39:30] <candide> fizzie: no output: c = 120 'x'; x = 1
[18:39:41] <pragma-> ,cc void func(char *arg) { *arg = 0; } func(0);
[18:39:44] <candide> pragma-:  runtime error: store to null pointer of type 'char'  Program received signal SIGSEGV, Segmentation fault in func (arg=0x0) at statement: *arg = 0; called by main () at statement: func(0)
[18:40:05] <floatcomplex> ,cc -fsanitize=address void func(char *arg) { *arg = 0; } func(0);
[18:40:07] <candide> floatcomplex: Success (no output).
[18:40:12] <floatcomplex> O_o
[18:40:16] <pragma-> ,cc void func(char *arg) { gdb("bt"); } func(0);
[18:40:19] <candide> pragma-:  #0  gdb () at /usr/include/prelude.h:90 #1  0x00000000004029c5 in func (arg=0x0) at  #2  0x00000000004029e1 in main (argc=1, argv=0x7fffffffe3d8) at
[18:40:31] * pragma- stares at the trailing "at"
[18:40:39] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[18:40:45] <floatcomplex> at stares back
[18:40:51] <sham1> A lot of this stuff will get better once IRCv3 gets multiline message extensions out of the draft stage. A lot more stuff can be output
[18:41:02] <sham1> No more trailing "at"s!
[18:41:16] <floatcomplex> sham1: risc is going to change everything
[18:41:16] *** Quits: kurahaupo (~kurahaupo@pa49-195-121-113.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[18:41:17] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[18:41:41] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[18:42:49] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[18:42:53] <sham1> Well, it did
[18:43:10] <floatcomplex> by the year 2000 we will all be using ipv6
[18:43:53] <pragma-> i heard someone talking about ipv8 for some reason
[18:44:42] <g0z> haha back in college they said that
[18:44:49] <g0z> ipv6 EVERYWHERE within 4 years
[18:45:08] <g0z> my isp doesn't even support ipv6 last I checked
[18:45:15] <floatcomplex> huh
[18:45:18] <pragma-> https://py-ipv8.readthedocs.io/en/latest/
[18:45:19] <candide> Title of pragma-'s link: IPv8 Documentation — IPv8 2.8.0 documentation
[18:45:35] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[18:45:38] <floatcomplex> the biggest part of my life that is stuck in ipv4-only-land is actually aws
[18:45:54] <floatcomplex> here are your 5 static ip addresses, don't f up!
[18:46:03] <pragma-> wow you get 5?
[18:46:15] <pragma-> not just one and NAT?
[18:46:28] <g0z> I'm on verizon fios and as of 2 years ago they had zero ipv6 support on residential lines I don't know if that's changed.
[18:46:50] <nomagno> Yup, the volatile keyword was actually what I was missing in my few-months-old program!
[18:46:50] <nomagno> That's wild
[18:46:58] <floatcomplex> nomagno: please show us
[18:47:03] <floatcomplex> nomagno: i am extremely nervous about this
[18:47:43] <nomagno> Why "nervous"? On it though
[18:48:01] <floatcomplex> just show us
[18:48:10] <sham1> I'd say that wrt. volatile, another canonical example of its usage comes from embedded. Of course like with the atomic thing, this can also be triggered by stuff like interrupts and to have the compiler not be too smart for its own good
[18:48:13] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[18:48:56] <nomagno> https://github.com/Nomagno/NDS-NetworkedInput/tree/master/NDS_server_library
[18:48:57] <floatcomplex> sham1: yeah but almost all uses of volatile in embedded that are ultimately not derivatives of that first example (replacing signal handler with interrupt handler) should be in your manufacturer's headers, not in your old code
[18:49:17] <nomagno> Just pushed a commit, more viewable format than git impossible ^
[18:49:37] <floatcomplex> sham1: an actual more esoteric use of volatile that has nothing to do with signals is to force kahan summation to work correctly when -ffast-math is enabled
[18:49:44] <floatcomplex> but most people shouldn't have to worry about that
[18:49:57] <nomagno> I am concious I might have some insane UB in this program, I was not brilliant at C a few months ago (now now)
[18:50:04] <sham1> Well most people probably don't even know what kahan summation is
[18:50:07] <nomagno> s/now now/nor now/
[18:50:43] <floatcomplex> sham1: it's "how to sum a bunch of floating point numbers" and is a canonical example people usually point to of something that can go badly wrong with -ffast-math
[18:50:52] <floatcomplex> and a correctly placed volatile fixes it
[18:51:47] <nomagno> why is the volatile keyword needed here though? Optimizing functionality away doesn't seem like sound the C standard allows in the first place!
[18:51:50] <floatcomplex> my usual standpoint is that if your code works as expected when -ffast-math is not enabled and not when it is, your expectations are wrong, not the compiler
[18:52:11] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[18:52:34] *** Quits: komputilo (~Komputilo@dhcp-077-249-129-116.chello.nl) (Ping timeout: 256 seconds)
[18:53:47] <nomagno> Is my use of volatile wrong or not, floatcomplex?
[18:54:25] <floatcomplex> it looks wrong
[18:55:21] <floatcomplex> nomagno: there's no signal handling or multithreading here that i can tell
[18:55:29] <floatcomplex> no while loop on a variable that needs to be volatile
[18:55:32] <floatcomplex> unless i'm missing something
[18:55:34] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[18:56:39] <nomagno> Well my issue was pretty much compilers seemed to be caching `groupdef_bool`, and I am not all that sure why
[18:56:47] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:57:11] <nomagno> Either that or my code is so bad it just breaks when you look at it wrong, and I looked at it right today
[18:57:38] <nomagno> I just know it behaves as expected in tcc
[18:57:43] <nomagno> And didn't before
[18:58:06] * markand throws some undefined behaviors into the room
[18:59:46] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[19:05:30] *** Joins: arinov (~arinov@178.240.154.245)
[19:07:20] *** Quits: supernova (~quassel@2405:9800:ba11:6207:7337:2116:cd8d:51d9) (Quit: No Ping reply in 180 seconds.)
[19:08:14] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:08:29] *** Joins: supernova (~quassel@2405:9800:ba11:6207:3dac:6101:b44d:85fe)
[19:09:15] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9dd0:d32d:1cd6:8dc6)
[19:09:15] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9dd0:d32d:1cd6:8dc6) (Changing host)
[19:09:15] *** Joins: skapata (~Skapata@user/skapata)
[19:15:37] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[19:17:29] <Bou> nomagno: for(d = 0; d < 17; d++) { checksum += groupdef_bool[d]; }
[19:17:41] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[19:17:44] <Bou> each groupdef_bool is either 0 or 1, so you're just counting the # of bits?
[19:17:56] <Bou> what if the first message is "left key" and the second is "right key", you'll get the same checksum
[19:20:45] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:21:16] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[19:22:25] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7f0a:96b3:48d4:853a)
[19:23:50] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 268 seconds)
[19:25:41] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[19:26:02] *** topside_ is now known as topside
[19:28:12] *** Joins: karakedi (~eAC53C340@user/karakedi)
[19:29:07] *** Parts: kadir (~kadir@95.7.9.203) (WeeChat 3.3)
[19:34:02] <nomagno> Bou: the message is button presses/releases. The checksum is so the terminal doesn't clog up
[19:36:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[19:36:31] <nomagno> (GCC seems to optimize away the infinite printing for as long as the variable doesn't change. Others compiler don't)
[19:36:47] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 268 seconds)
[19:38:32] *** Joins: humky (~humky@user/humky)
[19:39:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:44:48] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[19:47:02] *** Joins: tradar (~tradar@user/tradar)
[19:47:40] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:48:13] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[19:48:28] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:52:34] *** Joins: magla (~gelignite@55d4c66c.access.ecotel.net)
[19:53:02] <Bou> bug in your program then, compilers don't think that way
[19:54:47] <Bou> nothing checks the return value of recvfrom for example, what if packets don't (fully) arrive
[19:55:38] <floatcomplex> nomagno: ok i see the problem yeah
[19:55:53] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[19:56:17] <floatcomplex> Bou: sort of
[19:56:24] <floatcomplex> err nomagno: sort of
[19:57:30] <Bou> I see an int buffer[1] being cast to int
[19:57:50] *** Joins: mahmutov_ (~mahmutov@37.155.85.233)
[19:58:23] <floatcomplex> nomagno: have you run this code through gcc with like...regular warning stuff
[19:58:36] <floatcomplex> -Wall -Wextra -Wshadow -g -fsanitize=address,undefined
[19:58:41] <floatcomplex> and fixed any resulting warnings ?
[20:00:10] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[20:00:14] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[20:01:10] *** Joins: cadmio (~cadmio@151.37.43.114)
[20:01:12] <cadmio> Hello
[20:01:16] <cadmio> I don't know why I'm getting this https://imgur.com/auioSDE.png the tab should show the filename instead of "Page 1"
[20:01:36] *** Joins: elPuma (~elPuma@2600:1700:40b0:7830:d5aa:ca16:2c84:7185)
[20:01:38] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[20:01:49] <cadmio> I'm setting the tab's label here: https://paste.gnome.org/pnvofshet#line-263
[20:02:01] <cadmio> there must be some issue with char *filename
[20:03:14] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[20:03:29] *** Joins: kurahaupo (~kurahaupo@pa49-195-92-201.pa.nsw.optusnet.com.au)
[20:03:49] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[20:04:02] *** Quits: rcoote (~rcoote@ip-176-198-113-0.hsi05.unitymediagroup.de) (Quit: Konversation terminated!)
[20:04:08] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[20:05:08] *** Quits: derjanni (~textual@p508ee98f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:07:17] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[20:07:50] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[20:08:34] *** Joins: x11ff (~x11ff@151.250.201.160)
[20:08:51] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[20:09:42] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[20:11:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:11:51] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[20:12:36] *** Joins: quartz (~quartz@user/quartz)
[20:13:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:13:41] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[20:14:57] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:15:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:19:15] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:20:50] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Quit: leaving)
[20:20:57] *** Joins: V-T60 (~v@91.203.24.166)
[20:24:05] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[20:24:35] *** Quits: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com) (Remote host closed the connection)
[20:25:26] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:26:07] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 268 seconds)
[20:27:32] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[20:27:49] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[20:30:21] *** Quits: cadmio (~cadmio@151.37.43.114) (Quit: WeeChat 3.0)
[20:31:40] *** Quits: arinov (~arinov@178.240.154.245) (Ping timeout: 268 seconds)
[20:33:20] <elPuma> When pasting code to sprung, is there a way to specify a specific pygment in the url? Just adding '?c' to the end of the url uses the default syntax highlighting colors. I wonder if there is a way to change it. http://sprunge.us/QDJakx?c
[20:37:48] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:42:04] *** Joins: monchi (~m-6uy5ag@lo3.online)
[20:43:46] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:45:55] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[20:48:06] *** Joins: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com)
[20:48:35] *** Quits: Samian (~s@user/samian) (Read error: Connection reset by peer)
[20:49:21] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-21d8-f508-23f8-99f8.inf6.spectrum.com)
[20:50:05] *** Joins: pulse (~pulse@user/pulse)
[20:51:31] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4957:1fad:d24a:4121)
[20:51:31] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4957:1fad:d24a:4121) (Changing host)
[20:51:31] *** Joins: skapata (~Skapata@user/skapata)
[20:52:27] *** Joins: terminalpusher (~terminalp@2a01:586:9810:1:d5c5:51af:c205:6a9c)
[20:53:04] *** Joins: komputilo (~Komputilo@dhcp-077-250-239-118.chello.nl)
[20:53:37] <terminalpusher> hello. If I compile an empty (`void main() {}`) program with `gcc a.c -Ofast` and do `strace ./a.out`, there are a whole lot of syscalls happening which is very weird to me. I'd expect zero overhead and zero syscalls for an empty program. What is causing this?
[20:55:12] *** Joins: arinov (~arinov@178.240.154.245)
[20:56:31] *** Joins: derjanni (~textual@p4ff802a6.dip0.t-ipconnect.de)
[20:56:52] <fizzie> Program loading, dynamic linking, C runtime library initialization.
[20:57:22] <terminalpusher> ah yes, static linking results in a lot less syscalls but still some. can someone explain? https://paste.gg/p/anonymous/da8fcd0def074fd09a1058def33a591e
[20:57:30] *** Joins: reset (~reset@user/reset)
[20:57:52] <terminalpusher> ah, the runtime. But what does it load the runtime for when there's no program?
[20:59:41] *** Quits: monchi (~m-6uy5ag@lo3.online) (Remote host closed the connection)
[21:00:17] <fizzie> It's not all initialized on-demand. And there *is* a program.
[21:00:35] *** Joins: monchi (~m-6uy5ag@lo3.online)
[21:01:05] <HisShadow> even though main is empty, _start isn't
[21:01:17] <sham1> There is a program. It does nothing, successfully
[21:01:29] <fizzie> `main` is not the entry point of the binary, `_start` is. The C library (likely glibc?) will provide the code for `_start` that does the usual initialization steps, then calls `main`, and then gracefully exits.
[21:02:11] <terminalpusher> btw I was wondering, what initialization is there to do apart from taking in argv and argc which I assume is a part of that initialization?
[21:02:31] <terminalpusher> like what are those usual initialization steps specifically?
[21:02:40] <sham1> But even then glibc could probably afford to do more lazy initialization for the runtime stuff. It's overengineered as is, so it probably wouldn't impact it too much
[21:03:05] *** Joins: smlc (~smlc@42.110.163.26)
[21:03:09] *** Quits: smlc (~smlc@42.110.163.26) (Remote host closed the connection)
[21:04:17] <fizzie> That'd be a question for the C library. I imagine it sets up some basic data structures.
[21:04:35] <fizzie> Here's probably the closest you can get to an "empty" program, and it only does two system calls, execve and exit: https://0x0.st/-5XW.txt
[21:05:16] <fizzie> (It's probably not strictly speaking kosher to call the glibc `syscall` wrapper without performing the initialization, but hey, YOLO.)
[21:05:41] <sham1> Hasn't stopped inline assembly before
[21:06:04] <fizzie> Well, yeah, I just couldn't be bothered to go look up the system call number for exit.
[21:06:20] <terminalpusher> ah, interesting. Well, I'm pretty sure it's okay to say it does only one syscall because execve isn't *really* part of the program imo
[21:06:47] <terminalpusher> that's just a detail of how it starts to run the program
[21:06:52] <floatcomplex> it's not strictly kosher to statically link glibc at all
[21:06:58] <floatcomplex> use musl for that
[21:07:28] <HisShadow> or don't use a libc and make do with syscalls via inline assembly
[21:07:46] <sham1> In that case one might as well not even use C
[21:08:00] <floatcomplex> yeah idk where the line is but that's past it
[21:08:23] <HisShadow> why? You call syscalls with asm, everything else is plain old C.
[21:08:41] <floatcomplex> there are times when you don' want crt* stuff but omitting an entire libc just to not have that stuff is a big hammer
[21:10:38] *** Joins: Akuli (~Akuli@82-203-165-175.bb.dnainternet.fi)
[21:10:49] <sham1> Especially when one can just statically link musl and have the amount of stuff reduced by LTO and such
[21:11:30] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[21:12:08] <fizzie> Guess I could've still used the SYS_exit *constant* with something like https://0x0.st/-5Xw.txt and not have to look up the number.
[21:12:26] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:12:48] <nomagno> I have to wonder, what is the minimum amount of headers needed for a comformant C99 libc?
[21:13:26] <sham1> Freestanding
[21:13:56] <fizzie> For a hosted implementation, none of the headers are optional, so the list is just the list of section 7.
[21:13:59] <sham1> Although you wouldn't have much of a libc since they are basically just provided to you by the compiler
[21:14:01] <nomagno> What does 'freestanding' mean?
[21:14:21] <fizzie> For a freestanding one, the minimal set is <float.h>, <iso646.h>, <limits.h>, <stdarg.h>, <stdbool.h>, <stddef.h> and <stdint.h>.
[21:14:41] <nomagno> I meant for a hosting one, so the full list I guess
[21:14:49] <sham1> yeah
[21:14:50] <fizzie> C99 4p6: "The two forms of /conforming implementation/ are hosted and freestanding."
[21:15:04] <floatcomplex> sham1: at least when it comes to musl, -ffunction-sections -Wl,--gc-sections gives you almost all of the benefit of LTO when it comes to shrinking the binary
[21:15:15] <floatcomplex> sham1: almost forgot -Wl,-s 
[21:15:45] <floatcomplex> sham1: sometimes LTO can actually make the binary larger, given that starting point
[21:15:55] <sham1> Hm, I'm gonna need to look into that. Of course, LTO has other benefits as well so I don't know why I wouldn't just use it
[21:16:05] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[21:16:11] <sham1> Since I's be statically linking
[21:16:29] <floatcomplex> sham1: yeah i almost always use it but there are some embedded bsp's that fail silently when LTO is enabled
[21:16:41] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[21:17:19] <nomagno> Hmm, so usually I will have to write most of an OS libC in assembly poor? How do I go about making one?
[21:17:21] <nomagno> Just curious
[21:17:29] <floatcomplex> nomagno: no, you do not do that
[21:18:10] <floatcomplex> if writing a libc were a trivial undertaking there would be a lot more viable libc's. there are only a few
[21:18:40] <nomagno> floatcomplex: I am asking about how, not if
[21:19:04] <sham1> libcs are written in C
[21:19:36] <sham1> You just have to make sure that you rely on OS primitives rather than, well, the libc you're implementing
[21:19:43] <floatcomplex> nomagno: by reading the entire c standard to understand all of the promises it makes to application code, and learning everything about the kernel-userland interface to understand the promises the kernel makes, and connecting the dots
[21:19:43] <nomagno> So, they just interface to the rest of the OS in the "proper" way to get things like memory management and stdout/stdin/arguments right?
[21:20:12] <floatcomplex> that "just" is doing a whole lot of work
[21:20:33] <sham1> But yes, that is "just" what they're doing
[21:20:43] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:20:44] *** Joins: dansan (~daniel@75.81.148.51)
[21:21:02] <nomagno> Why do I have to care about hard it is? I am asking from a purely architectural point of view
[21:21:03] <floatcomplex> nomagno: https://git.musl-libc.org/cgit/musl/tree/
[21:21:15] *** Joins: clamiax (~claudio@net-93-149-158-199.cust.vodafonedsl.it)
[21:21:15] <clamiax> re
[21:22:15] <nomagno> Musl implements POSIX... Not exactly minimal but I'll take it
[21:23:00] <floatcomplex> it would hardly be of interest to anyone to implement a linux-only libc that didn't implement posix :)
[21:23:55] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[21:24:10] <nomagno> well you linked Musl, not me. I will look for some embedded device's libc I guess
[21:24:44] <floatcomplex> nomagno: you probably want newlib, then
[21:25:22] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Quit: awwww)
[21:25:24] <floatcomplex> even newlib implements more of posix than it has to, for embedded targets
[21:25:31] <floatcomplex> idk what you have against posix
[21:25:48] <floatcomplex> are you on windows or something?
[21:27:49] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:29:10] <nomagno> floatcomplex: I am making a posix-restrained terminal game, and I insist on POSIX-compliance everywhere I can. The issue is I want an example of a minimal C99 libc, not a minimal POSIX libc!
[21:29:41] <nomagno> I will look into newlib though, thanks!
[21:30:20] <floatcomplex> you've lost me
[21:30:37] <floatcomplex> i don't know what problem you have and how you're trying to solve it
[21:30:59] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[21:31:24] <nomagno> floatcomplex: I am looking for an example of a hosting libc that ONLY implements what C requires, or at least doesn't implement twenty times what it requires. I have no issues, I am just curious
[21:32:29] <nomagno> I want to see how much code it takes, how they interface with the rest of the system, how much assembly they use (probably very little), and a bunch of other things. Why? Well why not?
[21:33:31] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:34:09] *** Joins: vicfred (~vicfred@user/vicfred)
[21:34:09] <sham1> Technically one could have a separate "libposix" which then is linked by the libc to provide all the things the libc needs to implement stuff like stdio and such, but there's no real point for this. There's a reason they go hand-in-hand and thus you probably won't find what you're looking for
[21:34:11] <floatcomplex> i don't think a libc implementing posix is implementing twenty times what the c standard requires
[21:34:33] *** Joins: Samian (~s@user/samian)
[21:34:56] <nomagno> floatcomplex: was an idiom
[21:35:38] <floatcomplex> (some of) the hard parts of implementing libc are: kernel-userland syscall interface (lots of fucky system dependent stuff), malloc implementation, stdio implementation, libm implementation
[21:35:44] <floatcomplex> those are all required for a pure libc
[21:35:48] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[21:36:13] <Feuermagier> what (potentially exploitable) parts of libc are overwriteable in a heap-buffer-overflow attack?
[21:37:03] <sham1> Heap records would be the most common
[21:37:06] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[21:37:25] *** Joins: neutral (~user@user/neutral)
[21:37:47] <Feuermagier> sham1, what do those do?
[21:38:17] <sham1> Tell you how much you've allocated and where the next free block might be, and all that
[21:39:24] <Feuermagier> hmm, I have almost unlimited read/write access after the heap + mmap region, but essentially nothing else on the heap
[21:39:31] <fizzie> The other kind of a thing (which does depend a *lot* on what else the program keeps in memory) are any function pointers it might be in heap-allocated objects.
[21:39:51] <Feuermagier> ah, interesting idea
[21:40:11] <fizzie> If it's a C++ program, there'll be all those pointers to vtables and such.
[21:40:45] <sham1> Or if you've just linked to a C++ library that masquerades as a C library, et cetera
[21:40:47] <Feuermagier> any chance of leaking a stack address out of libc?
[21:41:24] <floatcomplex> what are you really asking
[21:41:26] <sham1> You might be able to find a pointer to a stack object, if you're lucky
[21:41:54] <sham1> Please don't exploit programs for any malicious purposes
[21:42:05] <nomagno> Feuermafier: well if you overwrite the libc part of the execution environment in memory, you can expect the program or the OS to crash
[21:42:21] *** Joins: FIlystyn (~piotr@user/filystyn)
[21:42:26] <sham1> W^X should protect from that
[21:42:39] <Feuermagier> floatcomplex, I don't really know. I have an overflow... but I'm unsure about what keywords I should type into google to learn more
[21:42:47] <Feuermagier> sham1, yeah, WX is on
[21:42:57] <sham1> Did you try ASAN or LeakSanitizer
[21:43:09] <Feuermagier> (also no malicious intend, just homework
[21:43:19] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[21:43:25] <Feuermagier> sham1, oh, I *know* exactly what causes the leak and where it is
[21:43:39] *** Joins: semeion (~semeion@user/semeion)
[21:43:45] <sham1> I see
[21:43:56] <Feuermagier> i'm trying to get a good old system(/bin/sh) out of it
[21:43:58] *** Joins: Hercules (~Hercules@user/hercules)
[21:45:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7f0a:96b3:48d4:853a) (Ping timeout: 268 seconds)
[21:48:22] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[21:48:41] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[21:49:22] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:bdff:ad8d:a586:571d) (Remote host closed the connection)
[21:52:46] *** Quits: elPuma (~elPuma@2600:1700:40b0:7830:d5aa:ca16:2c84:7185) (Quit: Client closed)
[21:54:15] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[21:55:31] *** Quits: komputilo (~Komputilo@dhcp-077-250-239-118.chello.nl) (Ping timeout: 268 seconds)
[21:59:14] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 268 seconds)
[22:02:16] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Quit: Konversation terminated!)
[22:02:55] *** Quits: arinov (~arinov@178.240.154.245) (Ping timeout: 268 seconds)
[22:04:03] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:12:10] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 268 seconds)
[22:12:16] *** Joins: semeion (~semeion@user/semeion)
[22:12:48] *** Quits: alch (~alch@151.36.182.35) (Ping timeout: 268 seconds)
[22:13:36] <rcm888> can calling printf from 2 processes connected to the same terminal, cause problems?
[22:13:51] *** Joins: kexec (~kexec@user/kexec)
[22:14:14] <Feuermagier> *yes*
[22:14:31] *** Joins: alch (~alch@151.36.216.238)
[22:14:34] <rcf> rcm888: define 'problem'. 
[22:15:43] <Feuermagier> "Hello WoHello, this is Thread 2 speaking, I hope you're having a nice day, byeeeee!
[22:15:47] <Feuermagier> rld!
[22:15:54] <Feuermagier> "
[22:18:21] *** Joins: pucara (~i@host194.181-14-159.telecom.net.ar)
[22:19:04] <floatcomplex> it's only a problem if you define it to be a problem
[22:20:36] <floatcomplex> in practice, interleaved printf statements from different threads that are each newline-terminated will be interleaved per line, not within the lines
[22:20:59] <floatcomplex> pretty sure posix guarantees that
[22:21:29] <floatcomplex> if you don't want the overhead of the locking that makes that possible, you can use the *_unlocked() family of functions
[22:21:40] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Read error: Connection reset by peer)
[22:21:47] *** Quits: neutral (~user@user/neutral) (Quit: (ph high))
[22:22:32] <makersmasher> is there something out there, that will allow me to visualize the stack a something is executed?  Something really simple, with pictures?
[22:22:52] <kexec> when allocating array of strings (which are actually also arrays) and then printing ASCII codes of individiual chars of every string, i get exactly the same output for all arrays. why? malloc() doesnt initialize arrays to \0, so the arrays should be filled with random junk. so shouldnt there be different values for every string? code:
[22:22:53] <kexec> https://bpa.st/CQPA
[22:23:03] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[22:23:05] <floatcomplex> malloc does not initialize anything
[22:24:02] <floatcomplex> sorry, you said that, i parsed your sentence incorrectly
[22:24:29] <floatcomplex> (and don't cast malloc)
[22:24:31] <makersmasher> aren't you setting al your string elements to the same thing with yoru malloc?
[22:25:19] <floatcomplex> kexec: is it printing all zeros?
[22:25:31] <floatcomplex> kexec: your code is UB, one of the possible outcomes is that it prints all zeros
[22:25:47] *** Quits: terminalpusher (~terminalp@2a01:586:9810:1:d5c5:51af:c205:6a9c) (Remote host closed the connection)
[22:25:58] <kexec> i get five times this "80 18 53 -35 87 2 0 0 80 1 53 -35 87 2 0 0 0 0 0 0"
[22:26:15] <floatcomplex> and if you do properly initialize it you get something expected?
[22:27:11] <makersmasher> floatcomplex, what does UB mean?
[22:27:13] <floatcomplex> expecting any particular behaviour, even any particular level of randomness, from reading uninitialized memory, is undefined and actually a source of some pretty serious security issues in the past
[22:27:21] <makersmasher> unbounded?
[22:27:24] <floatcomplex> undefined
[22:27:29] <makersmasher> ty
[22:28:03] <floatcomplex> means it could happen to do exactly what you expect, but only on tuesday morning
[22:28:50] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[22:28:54] <floatcomplex> ,recall me -t neurotoxin
[22:28:54] <candide> [12d21h ago] <f​loatcomplex> undefined behaviour is not defined to not flood the facility with deadly neurotoxin
[22:28:56] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[22:29:03] <De4nWhit3> Hello everyone.
[22:29:19] <sham1> So that's what went wrong with GLaDOS
[22:30:15] <floatcomplex> yeah SF writers are big fans of implying that the robot war happens because of overly-defined behaviour but UB is more likely
[22:30:21] *** Joins: komputilo (~Komputilo@dhcp-077-250-239-118.chello.nl)
[22:31:25] <kexec> floatcomplex: well if i fill the array with strings, then it seems OK. but i expected that there will be "different random junk" in each uninitalized string
[22:31:53] *** Joins: Raguile (~Raguile@user/raguile)
[22:32:34] <floatcomplex> kexec: yeah and it is allowed to do that or literally anything else
[22:33:04] <floatcomplex> kexec: it could be giving each of your mallocs a copy-on-write copy of the same garbage page
[22:33:09] <floatcomplex> for example
[22:34:39] <kexec> alright, thanks
[22:34:52] <floatcomplex> but seriously
[22:35:12] <floatcomplex> using uninitialized memory as a source of entropy is...a famously bad idea
[22:35:32] <floatcomplex> songs are still sung about it
[22:38:52] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:40:49] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:41:31] <nomagno> floatcomplex: "Yoy mean programs don't allocate memory like a gambling addict!?" -the one that had that idea
[22:42:37] <fizzie> Re the interleaved output, the *_unlocked() functions are relevant for output from different *threads*, not from different *processes* as asked.
[22:42:46] <rcm888> rcf: parent process skips printf and exits before child. no prints to terminal from the parent. this happens 1 out of 10 times.
[22:43:36] <fizzie> That said, IIRC POSIX does also have some guarantees about atomicity of (small enough) writes to the same pipe from different processes, not sure about terminals though.
[22:44:13] <rcm888> https://termbin.com/82wo
[22:44:17] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-21d8-f508-23f8-99f8.inf6.spectrum.com) (Read error: Connection reset by peer)
[22:44:37] <rcm888> if waitpid removed - the "hungups" begin to happen
[22:44:51] <floatcomplex> fizzie: the example text said "hello from thread 2" which is why i assumed they were talking about threads, not processes
[22:44:56] <mcf> floatcomplex: is that really undefined behavior? i thought the values were just indeterminate, and character types are excluded from 6.2.6.1p5
[22:45:04] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:21d8:f508:23f8:99f8)
[22:45:19] <fizzie> floatcomplex: Oh, right; yeah, but that example was from someone else than who asked the original question.
[22:46:30] *** Joins: Red (~Red@97.109-247-81.customer.lyse.net)
[22:47:13] <floatcomplex> mcf: perhaps, but i would imagine there's no way it doesn't become undefined behaviour when you do anything other than print them
[22:47:28] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:47:45] <mcf> i think they just have unspecified values
[22:48:23] <floatcomplex> mcf: yeah
[22:48:23] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:51:07] <fizzie> I seem to recall there's another rule about the use of indeterminate values of objects with automatic storage duration, that also applies to character types, though it doesn't apply in the context of allocated storage. But I can never actually *find* it.
[22:51:14] <fizzie> It's the one that J.2p1 non-normatively refers to with: "The behavior is undefined in the following circumstances: -- The value of an object with automatic storage duration is used while it is indeterminate (6.2.4, 6.7.8, 6.8)." But I can't find the specific rule in any of those sections.
[22:51:58] *** Joins: llh (~llh@user/llh)
[22:53:17] <mcf> fizzie: maybe the end of 6.3.2.1p2? it talks about objects with automatic storage, that never had their address taken
[22:53:37] <fizzie> Yeah, that's the one I was thinking of.
[22:53:59] <fizzie> Annoying that it's not referred to from the appendix though.
[22:54:17] *** Parts: FIlystyn (~piotr@user/filystyn) (hue)
[22:54:33] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[22:54:34] <fizzie> Also learned a new (to me) thing while looking, though. 6.2.4p5: "The result of attempting to indirectly access an object with automatic storage duration from a thread other than the one with which the object is associated is implementation-defined."
[22:55:58] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[22:56:17] <fizzie> I was sort of assuming providing a pointer to an object with automatic storage to some other thread might be fine, if you do the necessary synchronization to ensure that any access has provably taken place before that object goes out of scope. But on retrospect, I guess it makes sense it wouldn't be that simple.
[22:57:54] <mcf> interesting. i'd have assumed that as well
[22:58:49] *** Joins: Burgundy (~yomon@86.127.194.72)
[22:59:07] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[22:59:19] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:00:50] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:01:46] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[23:03:02] *** Quits: rcm888 (~u1@95.54.115.108) (Ping timeout: 256 seconds)
[23:04:58] *** Joins: mrig (~mrig@user/mrig)
[23:05:55] *** Quits: tazle (tazle@kapsi.fi) (Ping timeout: 268 seconds)
[23:06:03] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[23:06:31] *** Joins: tazle (~tazle@kapsi.fi)
[23:06:56] *** Joins: kish` (~aqua@user/aqua)
[23:08:41] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:08:44] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[23:08:49] *** Joins: varioust (~varioust@rrcs-76-79-31-136.west.biz.rr.com)
[23:09:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[23:13:06] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:14:07] *** Quits: x11ff (~x11ff@151.250.201.160) (Remote host closed the connection)
[23:14:33] *** Joins: x11ff (~x11ff@151.250.201.160)
[23:15:50] <vin> I am doing RLE of a string but there are cases where the output created is larger than input (Ex: abcdefghijkl), how do I allocate a buffer that can anticipate the output size? I had started of with input/4 but clearly the example shown requires more data but I don't want to randomly set a large value to the output buffer (I am reallocing later). Any thoughts?
[23:16:39] *** Joins: Zophirel (~androirc@93-35-145-197.ip55.fastwebnet.it)
[23:18:17] *** eldritch__ is now known as eldritch
[23:19:02] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[23:20:10] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:22:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ae5d:7719:e7f1:5947)
[23:22:44] *** Quits: varioust (~varioust@rrcs-76-79-31-136.west.biz.rr.com) (Quit: varioust)
[23:23:12] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:24:14] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[23:25:09] *** Joins: rcm888 (~u1@95.54.110.203)
[23:25:10] *** Quits: pucara (~i@host194.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[23:29:07] *** Quits: derjanni (~textual@p4ff802a6.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:30:23] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 246 seconds)
[23:37:53] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[23:40:23] *** Joins: Khoyo (~khoyo@user/khoyo)
[23:42:20] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[23:42:45] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[23:43:07] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:43:08] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[23:43:17] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[23:43:26] *** Quits: AmR (~AmREiSa@156.199.92.40) (Ping timeout: 268 seconds)
[23:45:53] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[23:47:15] *** Joins: varioust (~varioust@rrcs-76-79-31-136.west.biz.rr.com)
[23:48:42] <nomagno> vin: If you are doing 'standard' RLE, you can guarantee the output will be AT MOST twice that of the input, I think
[23:49:51] <vin> nomagno: The example violates that bound
[23:50:32] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[23:51:26] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[23:51:57] <nomagno> ABCDEFGHIJKL -> 12 --- 1A1B1C1D1E1F1G1H1I1J1K1L -> 24
[23:52:06] <nomagno> Are you using a different format?
[23:52:37] *** Joins: engest (~engest@50.39.177.170)
[23:52:41] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[23:54:21] *** Quits: caef^ (~caef@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[23:54:23] <floatcomplex> aborting the encoding of a block when it's used more space than the unencoded input is also valid, and doesn't require you to anticipate the worst case compressed size
[23:54:41] <nomagno> ^
[23:54:57] *** Quits: varioust (~varioust@rrcs-76-79-31-136.west.biz.rr.com) (Quit: varioust)
[23:55:55] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[23:55:57] <nomagno> also you can probably have better efficiency if you do RLE on the individual char bits rather than representing everything as ASCII
[23:56:17] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Quit: leaving)
[23:58:05] <nomagno> If you are using this to save space internally rather than as a utility, you can strip most information off an ASCII character safely as long as you know you are only inputting/allowing a certain kind
[23:58:54] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
