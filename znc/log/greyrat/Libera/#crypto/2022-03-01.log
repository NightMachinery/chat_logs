[00:03:45] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[00:04:11] *** Joins: recyclehero (~alistar@ec2-3-127-140-208.eu-central-1.compute.amazonaws.com)
[00:05:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[00:20:32] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fb4d-184.dhcp.inet.fi) (Ping timeout: 250 seconds)
[00:20:47] *** Joins: Sofia (~sofia@user/sofia)
[00:22:01] <moose> maroon: I never used a slide rule in school and in 1st grade we had computers, just saying. Hope that helps! :D
[00:23:42] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[00:25:54] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-2403-883c-da0e-8eb1.res6.spectrum.com)
[00:27:24] <hg> slide-rules are still so cool to me. I have a cheap little wooden one, but I definitely still want to take https://www.sliderulemuseum.com/SR_Scales.htm and 3d-print my own slide-rule
[00:30:59] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[00:31:21] <hg> Alipha: I'm so tickled that those ciphers break down into two categories: 1) weaknesses found, and 2) not fully analyzed
[00:31:56] <hg> Alipha: tangentially, it's similar to how chemistry friends of mine have talked to me about the safety of substances we know of: 1) definitely carcinogenic, and 2) not fully analyzed ☺
[00:31:57] <maroon> im so tickled about the food in my pantry 1) poison found 2) not analyzed :))
[00:32:07] <hg> maroon: lol
[00:33:35] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:33:51] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[00:36:01] <Alipha> hg: thing is, even though they're "weak", in order to actually crack them, you'd need either A LOT of ciphertext, or an encryption oracle, or other things that aren't going to happen with someone encrypting messages by hand. so, yes, while it would be very ill-advised to incorporate a card cipher algorithm into a computer system, i don't think even the NSA or such would be able to crack messages that you
[00:36:03] <Alipha> write by hand using a card cipher
[00:36:19] *** Quits: karstensrage (~karstensr@user/karstensrage) (Quit: ZNC - http://znc.in)
[00:36:38] *** Joins: karstensrage (~karstensr@nibbler.warped.com)
[00:36:39] <hg> that's also super cool
[00:37:08] <hg> a good reminder of the addage that “perfect security” doesn't exist; only strategies to address particular threat models
[00:37:22] *** Quits: karstensrage (~karstensr@nibbler.warped.com) (Changing host)
[00:37:22] *** Joins: karstensrage (~karstensr@user/karstensrage)
[00:38:22] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[00:41:59] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:42:06] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Read error: No route to host)
[00:42:16] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[00:42:41] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[00:44:25] <maroon> so they need to come up with a different term to use in "perfect forward _____"
[00:44:37] <hg> lol
[00:45:12] <hg> well, to be fair, “forward” can be seen as both a qualifier of what feature is represented, but also a caveat to what is specifically in-scope for protection
[00:45:55] <maroon> so it exempts everyone with access to a time machine? :)
[00:46:18] <int-e> . o O ( retroanalysis-resistant )
[00:48:26] <hg> int-e: that's kind of where my brain was at actually ☺
[00:48:27] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[00:48:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[00:48:46] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:50:18] <hg> mm
[00:50:48] <hg> huh, just noticed a k-line in the log from here on Friday. didn't notice in-the-moment
[00:54:10] <maroon> dont see him active here, so would be for what he's doing in another channel
[00:57:23] <hg> what?
[00:57:34] <hg> maroon: I meant k-line as in the Freenode-wide ban
[00:57:43] <hg> not a person with that handle ☺
[00:57:43] <maroon> all he did here was idle
[00:58:01] <hg> in particular, I saw this: <-- │ Hash (~Hash@hashsecurity.org) has quit (K-Lined)
[00:58:48] <hg> s/freenode/network/
[00:58:56] <hg> (obviously; force-of-habit)
[01:05:47] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[01:10:27] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[01:25:38] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[01:27:27] *** Joins: gproto23_ (~gproto23@user/gproto23)
[01:28:37] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[01:29:36] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[01:33:14] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[01:36:42] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Quit: coding || tired || sleepy)
[01:37:42] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[01:38:05] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:39:05] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Client Quit)
[01:40:08] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[01:41:24] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[01:49:45] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[01:50:41] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[01:51:47] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Client Quit)
[01:54:56] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[01:55:26] *** Quits: hckack (~hckack@user/hckack) (Ping timeout: 272 seconds)
[01:56:18] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[02:26:32] *** Quits: hg (~halosghos@user/halosghost) (Ping timeout: 240 seconds)
[02:29:05] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[02:30:04] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[02:30:17] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:31:21] *** Quits: xx (~xx@user/xx) (Ping timeout: 256 seconds)
[02:33:30] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[02:36:18] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[02:38:04] <TimMc> hmm!
[02:38:15] <TimMc> That explains the "Hash is dead" comment I saw in another channel.
[02:38:44] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Client Quit)
[02:42:49] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[02:47:33] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[02:48:56] *** Joins: semisimple (~semisimpl@user/semisimple)
[02:49:01] *** Quits: Disconsented (~quassel@irc.disconsented.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:49:22] *** Quits: brolin (~brolin@179.13.18.50) (Quit: leaving)
[02:49:38] *** Joins: Disconsented (~quassel@irc.disconsented.com)
[02:50:29] *** Joins: brolin (~brolin@179.13.18.50)
[02:51:23] <cvmn> how can a non-interactive ZKP be log(n) for someone who only trusts the genesis block?  (n is number of blocks in the middle)
[02:51:33] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpxvz3rsojtj9mp.ipv6.telus.net) (Remote host closed the connection)
[02:51:41] <cvmn> or, can it be log(n) for that case?
[02:51:45] <cvmn> i mean, O(log(n))
[02:53:49] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpxmqyy6teokieu.ipv6.telus.net)
[02:54:38] <Alipha> it seems it's either not possible or no one here knows the answer, as you've asked the question (or variations on it) several times now
[02:55:39] <cvmn> previous ones had some fluffy distinctions that were not exactly that.
[02:55:54] <cvmn> the question is slowly evolving every.
[02:55:59] <cvmn> every time i ask it.
[02:56:10] *** Quits: Disconsented (~quassel@irc.disconsented.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:58:02] *** Joins: Disconsented (~quassel@2604:a880:1:4a::3:c000)
[03:03:41] <cvmn> thinking loudly:  information theoretically, since chains of transactions contain new information (i.e. not-predictable from earlier stages), it means that, if we want to preserve full information about the chain, it must be O(n) space and time.
[03:04:58] <cvmn> but, do we need to preserve full information?  maybe just enough information to give us 256 bits of security is perfect.
[03:05:01] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:06:51] <cvmn> this is an example of seemingly random 256 bits:  830b180bf0cceeb9c22c26ee68c37742e5314b8e5c4dbf41392fffbd7658d02b.  the question is:  can it, by simply looking at it, one to conclude ``yup, that must be derived only after a linked list of transactions starting from genesis, each time signed by wallet's owner''?
[03:08:48] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[03:17:05] <ms7821> you might want to look at multisig stuff for that?
[03:18:24] <cvmn> how could multisig help here?
[03:18:50] <ms7821> have you read about multisig?
[03:19:54] <cvmn> is that the same as group signatures?
[03:20:42] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[03:21:18] <cvmn> what i read about multisig is that it's a thing happening after obtaining multiple signatures, by means to increase security.  e.g. thing gets unlocked/approved after 2 people sign it.
[03:21:24] <ms7821> not exactly https://crypto.stanford.edu/~dabo/pubs/papers/BLSmultisig.html
[03:21:50] <ms7821> it doesn't have a concept of the chain of trust that you're after, but maybe that could be added in another way?
[03:22:05] <ms7821> you're still being super fucking cagey about why you need an unlimited number of signatures
[03:23:00] <cvmn> i said i want unlimited number of signatures?  when?
[03:24:15] <ms7821> when you're saying you'll only accept something under O(n). Signatures are ridiculously cheap compared to, say, ZKP
[03:24:30] <ms7821> which suggests you're expecting a LOT of signatures
[03:25:18] <cvmn> i said O(n) is because of baseline approach using a linked list of signed transactions.  if better ways exist: great!
[03:25:32] <ms7821> OK, go write some code
[03:25:46] <cvmn> why.
[03:27:52] <cvmn> what are you trying to say?  that O(n) is ok?
[03:29:49] <ms7821> for most practical purposes, O(n) is fantastic
[03:30:29] <ms7821> if you think you need stronger, go do some reading, crunch some numbers, and explain why you need better than O(n)
[03:30:50] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:30:50] <ms7821> there's some analysis of BLS signatures here if you want https://eprint.iacr.org/2005/335.pdf
[03:31:04] <cvmn> but for crypto-coin ownership, n is number of transactions that coin hopped over since the birth of its cryptocurrency.  meaning, n will be too large eventually.
[03:31:05] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[03:31:24] <ms7821> you've said explicitly that you're not talking about cryptocurrencies
[03:31:33] <cvmn> when?
[03:31:39] <ms7821> ffs, I give up
[03:34:52] <cvmn> maybe weeks ago i said with a slightly different question.  doesn't mean that i'll never talk about it.
[03:35:16] <cvmn> plus, i just answered your question about why is n growing so large.  so i told you about coin ownership use case.
[03:35:57] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:36:37] <cvmn> you need to learn to understand text that you read, and put less guesses in it.
[03:37:30] <ms7821> come back when you've done some reading
[03:39:21] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:40:54] <cvmn> ok.  but, 1st, i'm not seeing how a multi-sig helps here in shortening the proof for a list of transactions concerning a coin.
[03:40:59] *** Joins: Wulf (~Wulf@user/wulf)
[03:41:01] <ms7821> also maybe have a look at how actual cryptocurrencies work, particularly checkpoints
[03:41:06] <cvmn> any tips will be appreciated.
[03:41:09] <ms7821> reading.
[03:41:11] <TimMc> ms7821: I believe he's said not to *assume* he's talking about cryptocurrencies. (Except he always is, these days.)
[03:41:40] <TimMc> (So uh... it's a pretty reasonable assumption, and I will continue to make it. Also, "genesis block" ffs.)
[03:42:29] *** Quits: ua__ (~ua@public-gprs219536.centertel.pl) (Ping timeout: 256 seconds)
[03:42:30] <cvmn> TimMc: i didn't even say that now.  i said it weeks ago for a slightly different question.
[03:43:21] <cvmn> ms7821: i know how cryptocurrencies work.  they work in a non-salable way space-wise.
[03:58:03] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Quit: coding || tired || sleepy)
[03:58:37] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[04:01:16] *** Joins: Gallomimia- (~Gallomimi@node-1w7jra2a2gqpy6vp0r9qxceff.ipv6.telus.net)
[04:01:54] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpxmqyy6teokieu.ipv6.telus.net) (Killed (NickServ (GHOST command used by Gallomimia-!~Gallomimi@node-1w7jra2a2gqpy6vp0r9qxceff.ipv6.telus.net)))
[04:01:58] *** Gallomimia- is now known as Gallomimia
[04:02:28] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[04:08:59] <maroon> if you have 256 bits of information, and you add another 256 bits of information, that requires no less than 512 bits to represent 512 bits of information
[04:12:30] <halosghost> maroon: assuming the new 256 bits have no shared pattern with the initial (else, compression)
[04:12:43] <halosghost> (assuming I'm following)
[04:13:23] <ms7821> well you don't need to preserve all 256 bits of a signature. you could reduce it to, say, 250 bits, and generate 64 signatures
[04:13:56] <halosghost> mmm, I missed that your statement was specifically referring to the signature part of the conversation (my bad)
[04:14:10] <halosghost> I was answering in the general because I thought that's how you were stating it
[04:14:23] <halosghost> (feel free to ignore my previous)
[04:15:34] <maroon> ok let me be more clear, 512 bits of information requires 512 bits of storage
[04:16:06] <piou> better
[04:16:07] <halosghost> haha
[04:16:08] <maroon> and if a string can be compressed shorter, then it did not hold 512 bits of info
[04:16:17] <halosghost> maroon: I agree
[04:16:19] <halosghost> ☺
[04:16:27] <halosghost> maroon: thank you for satisfying my inner-pedant
[04:17:44] <cvmn> maroon: but do we need 512 bits of information to prove with "sufficient security" that the coin is signed item at hand is most likely legit?
[04:18:12] * halosghost rereads (really struggling to parse that)
[04:18:20] <maroon> that's not the same question. if you're keeping the string length at 256 bits, you have to throw away info to keep the length shorter
[04:18:58] <halosghost> has “sufficient security” been defined / bounded? Additionally, “most likely legit”?
[04:19:06] <cvmn> halosghost: typo in it.  delete "coin is"
[04:19:20] <halosghost> cvmn: mm, yes; that's much more parseable
[04:19:57] <halosghost> cvmn: have either “sufficient security” or “most likely legit” been bounded or defined?
[04:21:05] <cvmn> let's say, we just require 256 bits of security to prove that an item traces back to some trusty origin (e.g. think of a linked list of signed items, each time it's signed by previous owner and passed to new owner).  
[04:21:13] <cvmn> in that case, do we need to add up all signatures?  
[04:21:47] <cvmn> a naive way is to have the entire list to prove that it traces to the trusty origin.  
[04:21:51] <halosghost> cvmn: each item in the list is signed by the new owner, or the full list is signed by the new owner? Also, what does “256 bits of security” mean in this case?
[04:22:27] <cvmn> latter means that if an attacker wants to make a lie, he will have brute-forcing space with 2^256 possibilities.
[04:22:42] <maroon> so instead of obtaining the entire list of signatures, we need to trust that each person who signed as part of the chain had verified the earlier portion of the chain?
[04:23:45] <cvmn> no, not trusting them.  
[04:24:28] <danieldg> cvmn: a signature only means that tht signing party signed it, so if all you do is verify a signature, you're trusting the signer
[04:24:37] <cvmn> but have an algorithm that somehow outputs 256 bits that proves that with sufficiently high probability that the last block in that chain is correctly linked to the origin block (correctly linked means signed by owners)
[04:25:00] <danieldg> yep, that's trivial if you have a trusted party
[04:25:54] <halosghost> cvmn: is the history of the list auditable from another source besides the previous owner?
[04:26:25] <halosghost> (I'm assuming “no”)
[04:26:48] <cvmn> this is an example of a linked list by signing by previous ower:  https://gist.github.com/al-caveman/d66c2b3a6108a0d92eedb0b67b6cdcff/raw
[04:26:50] <cvmn> scenario:  we trust block 0.  other steps are "legitimate" because their signatures can be verified by their public keys.
[04:26:55] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Quit: coding || tired || sleepy)
[04:28:11] <cvmn> 'hash next' might be useless.
[04:28:36] <danieldg> cvmn: that only solves the easy half.  Double-spend is the hard half.
[04:29:00] <cvmn> true.  right now i want to find the cheapest solution for the easy half.
[04:29:32] <cvmn> can block 3 be proven without needing to send blocks 1 and 2?
[04:29:33] <maroon> thats like assuming the max profit for a corporation is to max groos revenue
[04:29:53] <danieldg> cvmn: well, if all parties are trusted you just need the last block.
[04:30:33] <maroon> and even if someone is trusted, they're trusted until they're not
[04:30:40] <danieldg> or if someone trusted signs it, the same.  Otherwise, you need a trust chian
[04:30:44] <danieldg> *chain
[04:31:14] <cvmn> danieldg: true.  but i don't want to trust any party by the 0th block.
[04:31:17] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[04:31:41] <halosghost> merkle roots (note: not merkle trees) can offer some information (not all information) in a faster fashion, but only to the level of “this thing exists in this block”
[04:32:09] <cvmn> merke roots will require trusting the root in order to use it to have proofs in log n time/space.
[04:32:22] <cvmn> the root, or some point around the top near the root.
[04:32:40] <cvmn> or, any other point in the tree, i guess.
[04:33:34] <cvmn> yeah.  merkle trees will transform it into O(log n) time/space, only after we extend the trust to contain 1 more block hash.
[04:35:48] <maroon> if you cant prevent the digital printing-press, the whole exercise is pointless
[04:36:04] <sarnold> DEATH TO PRINTERS
[04:36:14] <halosghost> so, if there is a way to audit the list from a separate party than the previous owner, then you can verify the previous block hash and that the current block correctly references the previous block. Thus, you divide your trust
[04:36:18] <ms7821> that's easy, you just use NFTs
[04:36:32] <cvmn> maroon: true.  it's not a complete work.  right now i'm intentionally isolating it, and keeping it simple/basic, to see what options i have to compact the proofs
[04:36:56] <halosghost> and if P(collusion by previous owner and previous-previous owner) < “most likely legit”, then you're set
[04:37:00] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[04:37:09] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[04:37:33] <halosghost> and that's an O(1) check (always two steps)
[04:37:35] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:38:12] <halosghost> (of course, Sybil attacks essentially nullify the potential of that probability being small, but that seems to be out-of-scope for this conversation)
[04:38:16] <danieldg> or just have a committee of k parties that all sign things after inspecting the transaction (maybe after n blocks), then all you need is to trust 1 of the k
[04:38:37] <halosghost> sarnold: well, that's just a stance the industry should take regardless
[04:39:09] <maroon> trust k, trust that k is competent, trust that the system doesnt make it easy to fool k
[04:41:49] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[04:41:49] <danieldg> maroon: well, this verification is pretty 'easy' in terms of computing, so you could maybe even verify that it's correct and impossible to fool
[04:42:08] <danieldg> so the main threat would be that all k parties collude to lie to you
[04:42:11] <halosghost> so, I'm not sure if there's a way to accomplish this (I doubt it), but EC points can be added to make composite keys; I suppose it might be possible to have each owner add their PK and somehow have a commitment based on the more-and-more-composite key as you go
[04:42:18] <cvmn> so, any way to do it with only trusting block 0?
[04:43:23] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:43:32] <halosghost> but it cannot be a standard signature because a signature requires the corresponding SK
[04:43:45] <halosghost> (and, to be fair, I think that's always going to be true which is why this wouldn't work)
[04:44:36] *** Quits: X-Scale (~ARM@89.214.150.15) (Ping timeout: 240 seconds)
[04:44:36] *** X-Scale` is now known as X-Scale
[04:45:04] <halosghost> cvmn: I'm also assuming it's not acceptable to add more information to the initial block?
[04:45:28] <cvmn> possible, but not in the future.
[04:46:44] <halosghost> mm, I wonder if you could create a protocol for signing by a new owner that would reveal their secret-key if they were to “lie” about its provenance
[04:47:02] <TimMc> sarnold: printing press go b-- hmm, what sound *does* a printing press make
[04:47:21] <maroon> ka ching!
[04:47:25] <halosghost> TimMc: “SHHKKK SHHKKK SHHKKK…
[04:47:27] <halosghost> ”
[04:47:47] <sarnold> chckdchkckdchckdchkckdchckdchkckdchckdchkckdchckdchkckdchckdchkckd
[04:48:01] <halosghost> or, if the press operates on a ream (that gets cut afterward), “SHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH”:
[04:48:05] <halosghost> ☺
[04:48:55] <cvmn> that's pure vandalism.
[04:49:05] <danieldg> halosghost: but is revealing your secret key a problem after you've spent the money?  It'd have to have more consequences somehow
[04:49:15] <halosghost> danieldg: 🤷
[04:49:26] <halosghost> danieldg: the context here is intentionally not stated
[04:49:55] <TimMc> according to https://www.youtube.com/watch?v=DLctAw4JZXE it's sclrtch sclrtch sclrtch plrp plrp plrp taka taka taka flfp clck clck plap drr crnnnnnnn
[04:50:31] <halosghost> :P
[04:50:33] <TimMc> frfp
[04:50:41] <cvmn> please guys act like adults.
[04:51:10] <halosghost> there are several people (myself included) that are genuinely trying to help
[04:51:11] <TimMc> I think you should appreciate my printing press impression.
[04:51:48] <halosghost> lol
[04:52:33] <danieldg> cvmn: you can't get a proof of impossibility for complex things like this, but it's likely to be impossible unless you relax a constraint
[04:52:54] <halosghost> cvmn: what did you mean by “pure vandalism”? what were you referring to?
[04:53:07] <ms7821> that's the second best printing press impression I've heard
[04:53:10] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[04:53:47] <danieldg> I personally interpreted it as "revealing someone's private key is pure vandalism"
[04:54:06] <danieldg> you put all that effort into making a private key and someone just reveals it?
[04:54:09] <halosghost> danieldg: that's how I interpreted it as well, though that tactic has been used before in crypto systems
[04:54:18] <sarnold> TimMc: oh that looks cool, thanks :)
[04:55:04] <danieldg> halosghost: yeah, though those protocols are usually quite complicated
[04:55:15] <halosghost> (this is totally off-topic and is therefore in a parenthetical: the fact that non-phonetic languages are incapable of sensibly representing the repeated use of sounds like the above is obvious evidence for their incredible lack. It's high time we all adopt shavian and leave the latin alphabet behind)
[04:55:16] <maroon> so if giving out the wrong hash reveals your private key, couldnt someone then find out your private key by intentionally testing the algorithm using the wrong string?
[04:55:51] <danieldg> maroon: usually in these protocols you have to be careful what you sign/say
[04:55:56] * halosghost nods
[04:56:26] <danieldg> like only signing one message per ID, if signing two with the same ID reveals your key
[04:56:43] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Quit: Surfing the great wave off Kanagawa)
[04:58:07] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[04:59:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: bbl)
[05:04:31] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[05:09:38] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[05:11:43] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[05:13:45] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ae8)
[05:16:33] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:19:02] *** Parts: lainon (~lainon@2601:7c0:c500:4d20::ae8) ()
[05:26:26] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ae8)
[06:15:58] <caveman> halosghost: pure vandalism = the time spent typing silly shit about printer noise.
[06:16:32] <halosghost> caveman: hmm, I suppose I have to disagree
[06:16:50] <halosghost> (then again, I have seemingly-radical views about vandalism, so perhaps I'm not the right person to render judgement there)
[06:18:00] <caveman> <halosghost> or, if the press operates on a ream (that gets cut afterward), “SHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH”: 
[06:18:02] <caveman> ^ vandalism.
[06:18:13] <halosghost> … ok
[06:18:32] <int-e> "Although primarily remembered for the sack of Rome in 455 and their persecution of Nicene Christians in favor of Arian Christianity, the Vandals were also patrons of learning."
[06:19:21] <halosghost> caveman: I don't know if you intended that to come across as “screw you”, but that is indeed what was communicated (no judgement implied, only clarification)
[06:20:33] <caveman> /ignore add halosghost 
[06:20:37] <caveman> vandalism solved.
[06:20:46] <halosghost> …
[06:20:48] <halosghost> k
[06:20:57] <halosghost> (also, I believe this is the second time I've been fake-ignored)
[06:21:01] <int-e> I think cvmn is just unhappy that this gets more interest than their repeated display of zero knowledge in crypto.
[06:21:17] <halosghost> int-e: was that meant to be a pun on zkp?
[06:21:21] <maroon> all work and no play makes jack a dull boy
[06:21:24] <halosghost> int-e: if so, *slow-clap*
[06:21:28] <int-e> halosghost: it was
[06:21:36] * halosghost slow-claps
[06:26:06] <maroon> you can add *@* while you're at it, and then you'll have a sufficiently high probability of solving your problem
[06:26:16] <halosghost> maroon: bloat
[06:26:18] <halosghost> maroon: *
[06:26:48] <halosghost> though, I suppose *@*!* is the most specific; * should match all though ☺
[06:26:53] <caveman> int-e: your thought is false.
[06:28:55] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Ping timeout: 240 seconds)
[06:29:13] <halosghost> https://xyproblem.info/
[06:29:20] <halosghost> there's a new website for it even, that's cool
[06:29:41] <halosghost> ^ fwiw what folks here (myself included) have been talking about when the phrase “X-Y problem” has been mentioned
[06:31:39] <maroon> i want to solve question 'y', which involves preventing double-spending, by asking question 'x' which does not involve preventing double spending
[06:33:02] *** Quits: lithiumpt (~lithiumpt@178.239.165.143) (Ping timeout: 240 seconds)
[06:33:32] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[06:33:37] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[06:33:47] <halosghost> to put it mildly: the best questions come with context ☺
[06:34:28] <ms7821> for someone who makes no effort to study the topic he keeps asking about, caveman is very "fight me"
[06:34:30] <maroon> context is for kings - and we are kings
[06:34:41] <halosghost> lol
[06:37:44] <halosghost> no chance there's an interactive demo of any of those card ciphers is there? that'd be an excellent website
[06:38:25] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:41:43] *** Joins: cwolff (~cwolff@cpe-65-29-181-72.wi.res.rr.com)
[06:42:00] *** Parts: cwolff (~cwolff@cpe-65-29-181-72.wi.res.rr.com) ()
[06:43:59] *** Joins: Vitto (~Vitto@2a01:e0a:26e:28c0:4f09:b3a5:389d:7c8a)
[06:44:45] *** Quits: Vitto (~Vitto@2a01:e0a:26e:28c0:4f09:b3a5:389d:7c8a) (Client Quit)
[06:46:05] <maroon> this claims to demo it, but i'm lost. and also dont understand how they are sharing the state of the shuffled deck https://youtu.be/hMTslXSTcwk
[06:48:35] *** Joins: Vitto (~Vitto@2a01:e0a:26e:28c0:4f09:b3a5:389d:7c8a)
[06:52:18] *** Quits: platta (~platta@pool-96-248-118-42.cmdnnj.fios.verizon.net) (Read error: Connection reset by peer)
[06:53:02] <int-e> maroon: It's not part of the protocol; abstractly it's sharing a symmetric key. In a spy novel context this probably happens well in advance before the spy goes on their mission.
[06:54:25] *** Joins: platta (~platta@pool-96-248-118-42.cmdnnj.fios.verizon.net)
[06:54:46] <int-e> (I'm sure you can come up with ways to derive shuffled decks from passages of text, say.)
[06:55:00] <TimMc> halosghost: I felt a little bad about off-topicking in the middle of an actual discussion, and then I remembered how every caveman discussion eventually ends all on its own, and didn't feel so bad anymore.
[06:57:20] *** Joins: brolin_ (~brolin@179.13.18.50)
[06:57:20] *** Quits: brolin (~brolin@179.13.18.50) (Read error: Connection reset by peer)
[06:57:56] <halosghost> I genuinely keep trying to be helpful
[06:57:59] <halosghost> 🤷
[06:58:07] <halosghost> maroon: yeah… that's why I was hoping for an interactive one ☺
[06:58:31] <int-e> halosghost: you must be new to IRC *runs*
[06:58:41] <halosghost> int-e: lol
[06:58:46] <sarnold> int-e: your thought is false
[06:58:47] * sarnold runs
[06:59:22] <halosghost> int-e: been around on IRC for over a decade now (wow, that's weird to say) and as a mod
[06:59:32] <halosghost> (which is probably why I keep trying ☺)
[06:59:51] <int-e> halosghost: I believe it. But it's really hard (and admirable) to keep that attitude.
[07:00:10] <TimMc> ++
[07:01:35] *** Quits: Vitto (~Vitto@2a01:e0a:26e:28c0:4f09:b3a5:389d:7c8a) (Quit: Leaving.)
[07:01:46] <halosghost> ❤
[07:07:16] *** Joins: lainon_ (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[07:09:54] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ae8) (Ping timeout: 260 seconds)
[07:13:22] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Quit: coding || tired || sleepy)
[07:17:17] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[07:18:41] *** Quits: lainon_ (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[07:25:47] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Quit: coding || tired || sleepy)
[07:25:49] <Alipha> halosghost: have you watched the video on this page? https://aarontoponce.org/wiki/crypto/card-ciphers/solitaire
[07:27:45] *** Quits: brolin_ (~brolin@179.13.18.50) (Remote host closed the connection)
[07:29:15] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[07:35:16] <halosghost> Alipha: I don't think so
[07:35:20] * halosghost queues
[07:45:49] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Quit: coding || tired || sleepy)
[07:47:17] *** Quits: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 240 seconds)
[07:49:46] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[07:51:26] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 260 seconds)
[07:52:35] *** Joins: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney)
[07:54:46] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Quit: coding || tired || sleepy)
[07:58:57] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[08:06:54] *** Joins: arjun (~arjun@user/arjun)
[08:10:29] *** Joins: Starfoxxes (~Starfoxxe@ip-037-201-006-167.um10.pools.vodafone-ip.de)
[08:16:40] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[08:17:08] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpy6vp0r9qxceff.ipv6.telus.net) (Remote host closed the connection)
[08:17:57] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[08:18:09] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpvqpry6w1vq8cy.ipv6.telus.net)
[08:19:30] <caveman> <TimMc> halosghost: I felt a little bad about off-topicking in the middle of an actual discussion, and then I remembered how every caveman discussion eventually ends all on its own, and didn't feel so bad anymore. 
[08:19:32] <caveman> ^ you were right for feeling bad.  then you became wrong again (you shouldn't stop feeling bad simply because of your vandalism was pointed out).
[08:26:14] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[08:28:32] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[08:29:52] <halosghost> well, I'll continue to try and be helpful when you ask questions
[08:30:08] <halosghost> 🤷
[08:30:22] <halosghost> given that I'm not an op, that'd kind of all I can do ☺
[08:30:36] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[08:31:16] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[08:31:42] <halosghost> s/'d/'s/
[08:32:45] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Client Quit)
[08:35:07] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[08:36:47] <snappy> does hpke have anything to do with post quantum crypto? or is it just a standard to describe hybrid public key encryption? I thought we've been doing hybrid public key encryption since the dawn of public key crypto, so why the standard now?
[08:39:41] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:40:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[08:40:42] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[08:48:04] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[08:48:04] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[08:48:16] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[08:48:21] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[08:48:46] <Alipha> snappy: are you referring to this? https://tools.ietf.org/id/draft-barnes-cfrg-hpke-01.html
[08:49:08] <Alipha> Looks like he just wants to standardize the format that is used for HPKE
[08:49:59] <Alipha> According to the second paragraph of the introduction
[08:50:15] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[08:51:24] <Wulf> halosghost: if you mean something else: I think some people use both a pre-quantum and post-quantum algorithm together in case one is broken. E.g. sign a message twice.
[08:52:04] <halosghost> Wulf: think you might have meant snappy?
[08:52:15] <Wulf> indeed.
[08:52:19] <halosghost> :)
[08:52:26] <Wulf> snappy: ^
[08:52:46] <snappy> yeah Alipha  i meant that, admittedly i haven't actually looked at the rfc :) just articles about it
[08:53:37] *** Joins: whataman (~whataman@user/whataman)
[08:53:42] <snappy> "Lack of a single standard makes selection and deployment of a compatible, cross-platform and ecosystem solution difficult to define."
[08:53:44] <whataman> hi ??
[08:53:53] <halosghost> hello
[08:53:54] <snappy> Heh insert pic of xkcd comic on standards
[08:53:59] <Wulf> whataman: greetings!
[08:54:06] <halosghost> snappy: :)
[08:54:18] <whataman> what about mana ??
[08:54:28] <whataman> coin ??
[08:54:32] <halosghost> indeed
[08:54:37] <halosghost> cf. /topic
[08:54:43] <halosghost> (I think…)
[08:55:25] <whataman> hm
[08:56:37] <Alipha> snappy: indeed @ xkcd reference. And none of the algorithms listed in the rfc are post quantum. Not to say they couldn't just easily append to the list. But it doesn't look like the motichas anything to do with post quantum
[08:56:58] <Alipha> *the motivation has anything
[08:57:29] <halosghost> mmm, that reminds me, I should go back and really re-read the Noise Protocol specification
[08:57:29] *** Quits: whataman (~whataman@user/whataman) (Client Quit)
[08:57:55] <halosghost> I could tell that there was a ton there when I first looked at it a while ago, but I don't think I was quite ready to really grasp all of it
[08:57:58] <snappy> yeah i think that's just been a misunderstanding from my part, everytime i've seen "HPKE" I always assumed it had something to do with the post quantum schemes that use both a pre-quantum scheme and a post-quantum scheme together to encrypt
[08:58:01] <halosghost> I think I might be now, which is exciting
[08:58:20] <snappy> probably just my ignorance
[08:58:20] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[08:59:10] <snappy> heh i can say i understand _some_ of the noise protocol, such as the mechanics of how it works, but i get easily lost when it comes to discussing the different security properties of pattern types
[09:00:23] <halosghost> I looked at specific patterns a while ago and understood them reasonably
[09:00:31] <halosghost> so, I think I've made progress ☺
[09:04:11] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[09:08:19] *** Quits: meyer (~nunyuh@user/cosanostra) (Ping timeout: 250 seconds)
[09:08:22] *** Joins: labrador (~labrador@user/labrador)
[09:09:37] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[09:13:42] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Read error: Connection reset by peer)
[09:13:42] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Read error: Connection reset by peer)
[09:13:42] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Read error: Connection reset by peer)
[09:13:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Write error: Connection reset by peer)
[09:13:42] *** Quits: Sofia (~sofia@user/sofia) (Write error: Connection reset by peer)
[09:13:42] *** Quits: labrador (~labrador@user/labrador) (Read error: Connection reset by peer)
[09:13:42] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Read error: Connection reset by peer)
[09:13:42] *** Quits: madage (~madage@user/madage) (Read error: Connection reset by peer)
[09:13:42] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Read error: Connection reset by peer)
[09:14:52] *** Joins: labrador (~labrador@user/labrador)
[09:15:41] <int-e> . o O ( cryptle... seriously? )
[09:16:05] <labrador> whats cryptle
[09:16:17] <int-e> https://cryptle.doesresearch.com/
[09:16:28] <labrador> ok
[09:16:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:16:34] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[09:16:38] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[09:16:55] *** Joins: Sofia (~sofia@user/sofia)
[09:16:57] <int-e> (It has been mentioned... anyway, I dislike the solution for #26)
[09:17:03] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[09:17:54] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:18:59] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[09:21:16] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:21:43] <halosghost> :P
[09:21:59] *** Joins: madage (~madage@user/madage)
[09:27:17] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[09:31:22] *** Joins: lithiumpt (~lithiumpt@178.239.165.148)
[09:32:48] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:47:09] *** Joins: somequeer (~n0@156.67.18.224)
[09:49:35] *** Joins: ua_ (~ua@public-gprs219536.centertel.pl)
[09:50:37] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[09:50:37] *** Quits: Sofia (~sofia@user/sofia) (Remote host closed the connection)
[09:50:37] *** Quits: labrador (~labrador@user/labrador) (Remote host closed the connection)
[09:50:37] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[09:50:37] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Read error: Connection reset by peer)
[09:50:37] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Read error: Connection reset by peer)
[09:50:37] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[09:50:37] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Read error: Connection reset by peer)
[09:50:37] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Read error: Connection reset by peer)
[09:50:37] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Read error: Connection reset by peer)
[09:50:49] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:50:50] *** Joins: madage (~madage@user/madage)
[09:50:56] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[09:51:00] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[09:51:01] *** Joins: Sofia (~sofia@user/sofia)
[09:51:02] *** Joins: labrador (~labrador@user/labrador)
[09:51:02] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:51:02] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[09:51:03] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[09:51:41] *** Quits: labrador (~labrador@user/labrador) (Remote host closed the connection)
[09:54:15] *** Joins: labrador (~labrador@user/labrador)
[09:54:43] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[09:56:49] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[09:56:50] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[09:57:10] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:59:57] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-2403-883c-da0e-8eb1.res6.spectrum.com) (Quit: jarthur)
[10:00:14] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[10:00:36] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[10:00:39] *** Joins: arjun (~arjun@user/arjun)
[10:00:57] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[10:05:07] *** Parts: somequeer (~n0@156.67.18.224) ()
[10:08:48] *** Joins: Wiz1 (~wiz@78.133.92.97)
[10:18:56] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[10:21:06] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[10:35:47] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[10:40:23] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:50:14] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[11:02:27] *** Joins: yauhsienhuangtw (~Yau-Hsien@61-231-39-29.dynamic-ip.hinet.net)
[11:02:32] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[11:02:55] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Client Quit)
[11:03:36] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[11:04:10] *** Joins: yauhsien (~Yau-Hsien@61-231-39-29.dynamic-ip.hinet.net)
[11:04:35] *** Quits: yauhsien (~Yau-Hsien@61-231-39-29.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[11:04:39] *** Joins: xx (~xx@user/xx)
[11:05:03] *** Quits: yauhsien_ (~Yau-Hsien@61-231-39-29.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:06:22] *** Joins: yauhsien (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net)
[11:06:26] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[11:07:00] *** Quits: yauhsienhuangtw (~Yau-Hsien@61-231-39-29.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:08:15] *** Joins: yauhsienhuangtw (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net)
[11:09:23] *** Joins: callq (~callq@2409:4062:2e1f:6d40:bd35:cc34:c5f2:a729)
[11:10:57] *** Quits: yauhsien (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:15:09] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[11:15:25] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[11:17:58] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[11:24:05] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[11:24:39] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[11:30:42] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[11:31:10] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[11:39:47] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:48:55] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[11:50:21] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:51:49] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:02:15] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:03:30] *** Joins: tex (~super@user/dix)
[12:04:54] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[12:05:14] *** Joins: labrador (~labrador@user/labrador)
[12:05:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[12:17:53] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[12:18:37] *** Joins: Sofia (~sofia@user/sofia)
[12:19:57] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:01] *** Joins: MajorBiscuit (~MajorBisc@c-001-025-058.client.tudelft.eduvpn.nl)
[12:39:23] *** Quits: ua_ (~ua@public-gprs219536.centertel.pl) (Ping timeout: 256 seconds)
[12:41:07] *** Joins: ua_ (~ua@public-gprs219536.centertel.pl)
[12:41:56] *** Joins: pineappleperson (~n0@156.67.18.224)
[12:46:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[12:57:45] *** Quits: ua_ (~ua@public-gprs219536.centertel.pl) (Ping timeout: 250 seconds)
[12:59:42] *** Joins: ua_ (~ua@public-gprs219536.centertel.pl)
[12:59:49] *** Joins: andreasbuhr (~quassel@p549db052.dip0.t-ipconnect.de)
[13:00:14] *** Joins: Sofia (~sofia@user/sofia)
[13:01:49] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[13:02:07] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[13:06:09] *** Quits: brick (~br1ck@150.140.193.84) (Quit: Leaving)
[13:15:57] *** Quits: ua_ (~ua@public-gprs219536.centertel.pl) (Ping timeout: 256 seconds)
[13:18:35] *** Joins: ua_ (~ua@public-gprs219536.centertel.pl)
[13:24:29] *** Parts: pineappleperson (~n0@156.67.18.224) ()
[13:26:03] <snappy> i saw this on HN: https://gist.github.com/gmurdocca/88857b58dc4668d88b0d0fae6ebf8b64 -- basically injecting rot13 in a socket stream to obfuscate openssh in the face of deep packet inspection middleboxes
[13:26:43] <wasamasa> lolwut
[13:28:13] <wasamasa> > Thanks to Julius Caesar for first implementing the encoder used in this task back in ~50 B.C. and helping to crack a modern packet inspecting firewall some 2071 years later :)
[13:28:59] <snappy> i was wondering if there was any stream encryption / decryption tools that do this since it's trivial for a vendor to start blacklisting the 25 or so openssh banners you get with rot13; i saw there's obfsproxy and state of the art is obfs4 but they seem to only work with TOR
[13:29:19] <snappy> It'd be nice to just have a tool that encrypt/decrypts a stream given a supplied key
[13:29:50] <wasamasa> like, tr?
[13:30:08] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[13:30:51] *** Joins: ravan (~ravan@42.201.198.151)
[13:30:51] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[13:30:51] *** Joins: ravan (~ravan@user/ravan)
[13:30:53] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:30:56] <snappy> well yeah but does actual encryption of the stream
[13:31:01] <snappy> like using a strong cipher
[13:31:10] <snappy> i don't care if it's ECB though
[13:31:35] <piou> socat supports ssl tcp streams out of the box
[13:32:06] <piou> https://www.pentestpartners.com/security-blog/socat-fu-lesson/
[13:32:10] <snappy> ah nice
[13:32:23] <snappy> though it'd be cool to drop the whole ssl charade and just have a symmetric cipher
[13:33:49] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[13:33:54] <piou> what's the point? If you just want to bypass dpi then rot13 seems to be enough, apparently, and if you want a secure stream then "just a symmetric cipher" isn't enough (encryption isn't everything, you need authentication of the message and the correspondant, etc)
[13:34:05] <wasamasa> obfuscation
[13:34:25] <piou> and that's what ssl/tls provides, although there are other ways to design secure streams
[13:34:54] *** Joins: igemnace (~ian@user/igemnace)
[13:35:13] <snappy> piou: my point is it's not hard for a dpi to defeat rot13 by updating their list of banner checks for rot'd text
[13:36:01] <snappy> the encrypted stream is still used for obfuscation - but you can control both endpoints
[13:36:17] <wasamasa> I dunno, writing a XOR cipher is so trivial, malware does it all the time in machine code
[13:36:51] <snappy> ah yeah, xor would do the trick too, just something more than the keyspace of 26 keys
[13:36:59] <rk4> tbh i'm pretty happy with unauthenticated encryption a lot of the time, for a lot of things i worry more about passive attackers rather than active
[13:37:09] <rk4> </drive by comment>
[13:37:32] <snappy> you won't have a DPI check 256 possible banners, that'd be awfully slow
[13:37:33] <piou> that's a valid point (even though I doubt they'll do that because you'll never see enough people using rot13) but ok. Not hard to do yourself, take your python, open a socket, encrypt with a shared key, send, decrypt on the other side, connect to target socket, deliver info
[13:37:57] <piou> rk4: for storage, ok, but communications?
[13:38:04] <snappy> yeah might whip something up on the weekend
[13:38:10] <piou> mitm are a real thing
[13:38:13] <rk4> yeah, communications
[13:38:22] <wasamasa> well, 255
[13:38:29] <wasamasa> xor with 0 gives you the plaintext
[13:38:45] <rk4> of course mitm is a real thing ;)
[13:38:46] <wasamasa> or does it
[13:39:11] *** Joins: br1ck (~br1ck@150.140.193.84)
[13:39:25] <piou> yes, it does
[13:39:38] <snappy> i've been in a few situations where defeating DPI would be advantageous, mostly restricted enterprise/corporate networks
[13:39:44] <snappy> can't fucking stand them
[13:39:59] <snappy> of course doing any of this kind of stuff would probably be a fireable offence
[13:41:06] <wasamasa> I never thought about it much
[13:41:33] <wasamasa> I occasionally get into the situation of shitty hotel wifi blocking everything but email/web ports
[13:42:07] <wasamasa> would be funny if that could be circumvented by rot13
[13:42:17] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[13:49:36] <snappy> ooh nifty, monocypher has support for elligator2 and an elligator2 PAKE
[13:51:00] <snappy> damn where's riastradh, he had a good c implementation of gimli
[13:56:11] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 272 seconds)
[14:05:41] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[14:09:29] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:11:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:14:32] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[14:31:32] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[14:31:38] *** Quits: Wiz1 (~wiz@78.133.92.97) (Ping timeout: 272 seconds)
[14:35:56] *** Joins: raj (uid72176@user/raj)
[14:46:35] *** Quits: callq (~callq@2409:4062:2e1f:6d40:bd35:cc34:c5f2:a729) (Quit: callq)
[14:52:45] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[14:56:44] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Remote host closed the connection)
[14:57:05] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[15:09:36] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:12:48] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[15:17:29] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:19:32] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[15:27:31] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[15:44:52] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[15:52:25] *** Joins: ardell (~ardell@user/ardell)
[15:59:13] *** Joins: yauhsien_ (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net)
[16:01:47] <snappy> anyone familiar with permutation based crypto like gimli?
[16:02:17] *** Quits: yauhsienhuangtw (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[16:06:31] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[16:06:55] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[16:10:37] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[16:25:35] *** Joins: somequeer (~n0@156.67.18.224)
[16:29:11] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:29:26] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[16:35:53] *** Quits: somequeer (~n0@156.67.18.224) (Excess Flood)
[16:37:30] *** Joins: llorllale (~llorllale@198.98.119.85)
[16:41:52] *** Quits: labrador (~labrador@user/labrador) (Remote host closed the connection)
[16:44:36] *** yauhsien_ is now known as yauhsien
[16:46:31] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:46:48] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[16:47:18] *** Joins: labrador (~labrador@user/labrador)
[16:55:31] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:57:00] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[16:59:47] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[16:59:54] <yawkat> snappy: well, aes is a permutation too? 
[17:00:33] <yawkat> And funny, djb says "Contributors (alphabetical order)", and still comes first :) 
[17:02:06] <river> hah
[17:06:21] *** Joins: brolin (~brolin@179.13.18.50)
[17:09:09] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[17:10:01] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 256 seconds)
[17:22:04] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:23:12] *** Quits: ardell (~ardell@user/ardell) (Ping timeout: 250 seconds)
[17:25:10] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Client Quit)
[17:25:23] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:26:05] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[17:26:22] *** Joins: ravan (~ravan@user/ravan)
[17:28:02] *** Joins: s1b1 (~s1b1@user/s1b1)
[17:28:49] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Client Quit)
[17:29:06] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:29:52] *** Joins: ardell (~ardell@user/ardell)
[17:33:19] *** Quits: ardell (~ardell@user/ardell) (Client Quit)
[17:33:29] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:34:04] <snappy> so i think i'm using gimli correctly, but i'm not being endian-cautious. I take the 12 32-bit words, and load a 32 byte key and a 16 byte iv into the state (just memcpy it in). Then I call the gimli permutation. Then I use the state as a 48-byte pad until it's used up. Then I call gimli(state) to permute the state, and then use it again as a pad. rinse and repeat
[17:34:52] <snappy> I hope I'm doing this correctly.
[17:46:20] *** Joins: sobkas (~sobkas@95.175.17.217)
[17:46:51] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[17:47:15] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[17:47:18] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[17:57:22] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[18:03:39] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[18:07:12] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[18:07:36] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[18:08:09] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[18:09:01] *** Joins: hg (~halosghos@user/halosghost)
[18:09:19] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:10:05] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[18:10:31] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[18:17:45] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[18:17:59] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:21:11] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[18:21:44] *** Joins: X-Scale` (~ARM@83.223.232.175)
[18:23:55] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:23:55] *** X-Scale` is now known as X-Scale
[18:25:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[18:27:32] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[18:27:56] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[18:35:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:37:25] *** Joins: frost (~frost@user/frost)
[18:55:37] *** Quits: raj (uid72176@user/raj) (Quit: Connection closed for inactivity)
[19:02:52] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[19:03:03] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[19:03:08] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[19:03:17] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[19:05:46] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:06:48] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[19:15:56] *** Joins: Guyver2_ (~Guyver@guyver2.xs4all.nl)
[19:17:57] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 240 seconds)
[19:18:06] *** Guyver2_ is now known as Guyver2
[20:03:58] <hg> okay, the video for pocket-RC4 is very instructive; I should probably read the paper to understand why it works ☺
[20:04:39] *** Quits: brown (~brown@user/brown) (Remote host closed the connection)
[20:04:53] *** Joins: brown (~brown@user/brown)
[20:05:15] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Read error: Connection reset by peer)
[20:05:30] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[20:06:15] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[20:07:29] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[20:23:35] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[20:28:21] *** Joins: epony (epony@user/epony)
[20:32:02] *** Joins: Guyver2_ (~Guyver@guyver2.xs4all.nl)
[20:34:15] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 256 seconds)
[20:34:22] *** Guyver2_ is now known as Guyver2
[20:39:44] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[20:41:17] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[20:41:17] *** gildasio is now known as gilidasio
[20:47:43] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c107-df80-8e8d-d75d.res6.spectrum.com)
[20:55:15] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:58:37] *** Joins: bluehoney_ (~bluehoney@gateway/vpn/pia/bluehoney)
[21:00:36] *** Quits: bluehoney (~bluehoney@gateway/vpn/pia/bluehoney) (Ping timeout: 240 seconds)
[21:03:01] *** Quits: andreasbuhr (~quassel@p549db052.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:06:29] *** Quits: semisimple (~semisimpl@user/semisimple) (Quit: WeeChat 3.4)
[21:23:12] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:23:27] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[21:25:58] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[21:28:05] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:33:42] *** Joins: AllMyNames (~AllMyName@user/allmynames)
[21:45:14] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[21:46:51] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[21:47:57] *** Joins: TunnelJ (~TunnelJ@64.201.243.34)
[21:49:42] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Ping timeout: 250 seconds)
[21:54:43] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[21:57:30] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 268 seconds)
[22:02:25] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[22:03:39] *** Joins: WishBoy (~WishBoy@user/wishboy)
[22:05:09] *** Quits: WishBoy (~WishBoy@user/wishboy) (Client Quit)
[22:07:42] *** Quits: brolin (~brolin@179.13.18.50) (Remote host closed the connection)
[22:11:08] *** gilidasio is now known as gildasio
[22:17:21] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:20:54] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 250 seconds)
[22:22:12] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[22:29:13] *** Joins: aleck1 (~aleck@user/aleck)
[22:32:20] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 272 seconds)
[22:38:06] *** Joins: brolin (~brolin@190.29.195.243)
[22:40:03] <cvmn> is there any easy to read/watch material that allow laymen to understand how zk-stark works?
[22:40:28] *** Quits: MajorBiscuit (~MajorBisc@c-001-025-058.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[22:43:05] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[22:48:36] *** Quits: brolin (~brolin@190.29.195.243) (Remote host closed the connection)
[22:48:46] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[22:49:18] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[22:50:47] <aweinstock> cvmn: https://eprint.iacr.org/2018/046.pdf ?
[22:53:00] *** Joins: gabriel1_ (~gabriel1@37.165.80.90)
[22:55:45] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 252 seconds)
[22:56:04] *** Quits: gabriel1_ (~gabriel1@37.165.80.90) (Remote host closed the connection)
[22:56:28] *** Joins: gabriel1_ (~gabriel1@37.165.80.90)
[22:58:40] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:58:57] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[23:02:22] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[23:03:32] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 240 seconds)
[23:05:32] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:05:46] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[23:06:20] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.4)
[23:08:39] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:10:39] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:17:17] *** Joins: semisimple (~semisimpl@user/semisimple)
[23:21:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:21:37] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:24:24] *** Lord_of_Life_ is now known as Lord_of_Life
[23:25:59] *** Quits: ua_ (~ua@public-gprs219536.centertel.pl) (Ping timeout: 252 seconds)
[23:27:05] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[23:27:46] *** Joins: ua_ (~ua@public-gprs219536.centertel.pl)
[23:28:50] *** Joins: Gallomimia- (~Gallomimi@node-1w7jra2a2gqpvqpry6w1vq8cy.ipv6.telus.net)
[23:30:14] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[23:31:18] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpvqpry6w1vq8cy.ipv6.telus.net) (Ping timeout: 260 seconds)
[23:31:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:36:58] *** Quits: gabriel1_ (~gabriel1@37.165.80.90) (Remote host closed the connection)
[23:37:32] *** Joins: brolin (~brolin@190.29.195.243)
[23:40:23] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[23:40:59] *** Joins: ravan (~ravan@user/ravan)
[23:41:33] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[23:41:41] *** Quits: Fusl (fusl@1.0.0.127.in-addr.arpa.li) (Ping timeout: 250 seconds)
[23:49:08] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Read error: Connection reset by peer)
[23:49:47] *** Joins: Guyver2 (~Guyver@2001:985:f3f:1:4535:3ce1:b4ce:8a4a)
[23:50:55] *** Joins: clf059 (~clf059@2601:603:1580:3970::aae1)
[23:51:06] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:51:24] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[23:51:59] *** Quits: clf059 (~clf059@2601:603:1580:3970::aae1) (Client Quit)
[23:52:21] *** Joins: clf059 (~clf059@2601:603:1580:3970::aae1)
[23:53:37] *** Joins: Fusl (fusl@1.0.0.127.in-addr.arpa.li)
