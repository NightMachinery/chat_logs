[00:00:05] <DSpider> do you guys usually indent your switch conditions? Visual Studio seems to like it unindented (closer to the left edge)
[00:00:14] <pulse> i do
[00:00:30] <pulse> makes it cleaner imo
[00:04:58] <DSpider> idk, I feel like I'm breaking a standard or something if I indent them
[00:05:06] <DSpider> it feels dirty
[00:05:18] <rpav> dunno i think i see most code with them indented
[00:05:28] <rpav> probably doesn't matter a lot unless you're inconsistent
[00:05:47] <rpav> i think i might do a 2-space indent for those not full but i'd have to check
[00:06:01] <rpav> nah looks like full indent here
[00:06:41] <rpav> if you have a lot of single-line `case X: foo(); break;` and they're not indented, it could be hard to read
[00:07:55] <Alipha> i put `case` in line with `switch`, but then the part within the case block is indented
[00:08:06] <pulse> i'd say pick one and use the same one consistently in the entire project
[00:08:10] <rpav> ^
[00:08:12] <LordKalma> I do whatever my clang-format does, I forget
[00:08:19] <LordKalma> but it's BasedOnStyle: Microsoft
[00:08:58] <LordKalma> I'd say have a formatter, set it as you want and never worry about consistency again
[00:09:03] <LordKalma> from your or your peers :)
[00:09:09] <rpav> i really wish vector had a reserve ctor
[00:10:07] <LordKalma> Resize to replace?
[00:10:18] <rpav> ?
[00:10:31] <rpav> no like vector<int> v(5); // except reserve instead of resize
[00:10:38] <rpav> err maybe you meant resize not replace
[00:10:40] <rpav> so yea
[00:10:44] <LordKalma> Ah nevermind
[00:11:18] <rpav> vector<int> v(reserve(5)); // let's introduce named-ish parameter ctors
[00:11:23] <LordKalma> Yeah you have to reserve right after and hope your compiler puts it together
[00:12:01] <LordKalma> rpav: that could just have been a static method
[00:12:18] <rpav> auto v = vector<int>().reserve(5); // better maybe if it chained
[00:12:28] <rpav> LordKalma: true
[00:12:45] <LordKalma> Wow, what is this? C#?
[00:12:54] <rpav> but that wouldn't be composable .. not sure how much you could compose with vector, but probably other htings
[00:13:02] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[00:13:26] <LordKalma> Honesty returning references to self is indeed a cool api
[00:13:34] <rpav> yeah chaining APIs are the best
[00:13:39] <LordKalma> But yeah, I watched the talk about composition with bool and int
[00:13:41] <rpav> no good reason not to
[00:13:53] <LordKalma> And I realised I didn't understand composition
[00:14:04] <LordKalma> Apparently returning bool is composition haha
[00:14:11] <rpav> o.O
[00:14:31] <rpav> returning it how and where what
[00:15:01] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[00:15:42] <LordKalma> lemme find the talk
[00:16:24] <LordKalma> https://www.youtube.com/watch?v=zclxRbh4AN0
[00:17:02] <rpav> huh, 2022 too .. i'll add that to my queue
[00:17:53] <rpav> i haven't seen a lot of interesting ones this year.. they have interesting titles then end up being 5-minute talks given in an hour ;/
[00:18:07] <LordKalma> apparently returning bool is composable because you an write like
[00:18:21] <LordKalma> foo(1) and foo(2) and foo(3)
[00:18:21] <LordKalma> or
[00:18:30] <LordKalma> foo(1) or foo(2) or (foo3)
[00:18:33] *** Quits: AmR (~AmREiSa@102.44.191.232) (Quit: Konversation terminated!)
[00:18:41] <LordKalma> and thanks to short circuiting get control flow for free
[00:18:56] <rpav> ðŸ¤”
[00:19:06] <LordKalma> apparently that's composition?
[00:19:15] <rpav> seems dubious
[00:19:25] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:20:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:20:48] <Alipha> template<typename T> std::vector<T> reserved_vector(std::size_t n) { std::vector<T> v; v.reserve(n); return v; } // rpav :-)
[00:21:02] <Alipha> rpav: but i also agree
[00:21:22] <rpav> Alipha: well of course you can write a function, but it's the "having to sucks" and also lacking the composition thing
[00:21:39] <LordKalma> after all, define composition for me in your terms
[00:21:45] <rpav> i think common usage of reserve() is more modern than most of vector though
[00:22:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:23:05] <rpav> LordKalma: hrm good question, and really there are two that are tangentially related at best .. composition of data (i.e. structs) and composition of functionality which i guess is mostly "you can use them together to get the thing you want"
[00:23:17] <rpav> vs "you can use them apart to accomplish the thing you wnat" i guess
[00:23:43] <rpav> zip(from(0), v1, v2) .. composing iteration functionality
[00:24:26] <PJBoy> is the vector move ctor even guaranteed to keep the reserved buffer?
[00:24:40] <PJBoy>  / move assignment
[00:25:01] <rpav> it must because it must keep the same space, or it wouldn't be noexcept?
[00:25:08] <pulse> TIL git has a local cache
[00:25:15] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[00:25:18] <pulse> i thought it was freaking trolling me
[00:25:27] <PJBoy> it could choose to shrink the unused reserved space
[00:25:39] <rpav> that seems exceptionable
[00:26:05] <PJBoy> all vector has to do is reduce its end_reserved pointer
[00:26:18] <LordKalma> !std::vector
[00:26:19] <nolyc> http://en.cppreference.com/w/cpp/container/vector
[00:26:58] <rpav> PJBoy: ok i guess if it goes out of its way to break reservation
[00:27:23] <PJBoy> yeah pretty much
[00:28:00] <LordKalma> it just says After container move construction (overload (8)), references, pointers, and iterators (other than the end iterator) to other remain valid, but refer to elements that are now in *this
[00:29:36] <LordKalma> I don't understand how you can keep all references and pointers and iterators valid
[00:29:39] <LordKalma> except for end()
[00:29:43] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[00:29:54] <rpav> end() may not point to data()+1
[00:30:02] <rpav> but otherwise the data is in the same place
[00:30:07] <LordKalma> ah, interesting
[00:30:10] <LordKalma> thanks
[00:31:05] <rpav> i don't see anything in the draft saying it _must_ specifically in vector, but it's probably an oversight
[00:31:07] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[00:31:37] *** Joins: wyre (~wyre@user/wyre)
[00:31:47] <PJBoy> huh, I never noticed that detail about the end iterator
[00:31:54] <PJBoy> that seems random af
[00:32:31] <LordKalma> I guess a nutjob stdlib implementer could implement a counter and keep state in the iterators instead of comparing pointers to the allocated space?
[00:32:42] <LordKalma> and end() just be a magic thing
[00:32:53] <LordKalma> like I did once of a ring buffer
[00:33:01] <rpav> i thought all end() could be magic things now
[00:33:17] <LordKalma> they probably can, thus the no guarantee
[00:34:44] <rpav> i don't see anything specifically in the draft under vector about that either so i dunno
[00:34:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:34:47] <LordKalma> the requirements to end() is that it compared true with another end() basically
[00:34:51] <LordKalma> *compares
[00:35:01] <LordKalma> no point in specifying how
[00:35:08] <rpav> and != with any other iterator in the container
[00:35:37] <rpav> but in 17 i thought they removed restrictions because they changed the range for restriction
[00:36:22] <rpav> makes implementing some stuff a ton easier but whether like returning nullptr for every end() is useful or not i dunno
[00:37:27] *** Quits: foul_owl (~kerry@207.244.125.36) (Ping timeout: 250 seconds)
[00:37:29] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:38:08] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:38:31] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:40:15] <PJBoy> yeah I don't see any of those reference/pointer/iterator guarantees for vector
[00:40:25] <PJBoy> never mind excluding end()
[00:40:32] <PJBoy> I think cppreference is making stuff up
[00:40:45] <LordKalma> I didn't paste everything ;)
[00:40:45] <LordKalma> The current standard makes this guarantee via the blanket statement in [container.requirements.general]/12, and a more direct guarantee is under consideration via LWG 2321.
[00:41:34] <PJBoy> here's container.requirements.general :/ http://eel.is/c++draft/container.requirements.general
[00:41:41] <LordKalma> yeah, noticed that too
[00:41:48] <PJBoy> must be a hell of a blanket
[00:41:49] <LordKalma> seems eel.is is missing that bit?
[00:42:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:43:00] <PJBoy> https://timsong-cpp.github.io/cppwp/n4868/container.requirements.general#12
[00:43:33] <PJBoy> fair enough haha
[00:43:41] <PJBoy> that *is* a very blanket statement
[00:43:50] <LordKalma> indeed
[00:44:06] <LordKalma> but is that from a published version, or is that the working draft including LWG 2321?
[00:44:24] *** Joins: seninha (~seninha@user/seninha)
[00:44:31] <PJBoy> LWG2321 hasn't been resolved yet
[00:44:53] <LordKalma> but indeed it's a very blanket statement
[00:44:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[00:45:05] <LordKalma> that should give us some appreciation how hard is to write stuff up to the standard
[00:45:15] <LordKalma> the implications of a paragraph somewhere in the whole design
[00:45:26] <PJBoy> the container requirements are horrible
[00:45:55] <PJBoy> super cryptic
[00:46:05] <LordKalma> that's standadese for you
[00:46:27] <PJBoy> yeah but some bits are a lot worse than other bits
[00:46:36] <PJBoy> and I really don't like the container bits haha
[00:46:56] <PJBoy> other parts of the standard add redundant text clarifying things
[00:47:14] <LordKalma> c++ standard cleanup group, when?
[00:47:20] <PJBoy> the containers are super high entropy
[00:48:00] <PJBoy> https://cplusplus.github.io/LWG/issue2321 fyi
[00:48:02] <Alipha> PJBoy: means less chance for conflicting text ;-)
[00:48:15] <PJBoy> sure enough, that is true
[00:48:25] <Alipha> but i agree
[00:48:25] *** gentooclimax is now known as climax
[00:48:29] <LordKalma> PJBoy, all of that is linked in cppref if you actually had go to the webpage
[00:48:45] <PJBoy> d'oh
[00:48:47] <LordKalma> LWG 2321
[00:48:51] <LordKalma> https://en.cppreference.com/w/cpp/container/vector/vector#Notes
[00:49:04] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:49:13] <PJBoy> I hate how the LWGs tend to link to the GIANT page with *every* LWG listed
[00:49:19] <PJBoy> google too
[00:49:29] <LordKalma> also, it does link to the broken eel.is page
[00:49:34] <PJBoy> and then there's a perfectly good cplusplus github version
[00:50:05] <PJBoy> so what I find strange now
[00:50:22] <PJBoy> is that that LWG explicitly lists `end()` as an exception to the non-invalidation
[00:50:26] <PJBoy> why??
[00:50:56] <PJBoy> also why hasn't that text been merged in
[00:51:03] <PJBoy> that's a pretty trivial change
[00:51:03] <LordKalma> since the LWG is an expection to the blanket statement it needs to add back the holes it wants it
[00:51:32] <LordKalma> although that's actually in https://timsong-cpp.github.io/cppwp/n4868/container.requirements.general#note-5
[00:51:38] <LordKalma> 11.6 note 5, not 12
[00:51:57] <PJBoy> that's for swap()
[00:52:02] <LordKalma> yeah, so it's weird
[00:52:08] <PJBoy> weird af
[00:52:14] <LordKalma> paragraph 12 actually would force you to keep end() valid
[00:52:23] <LordKalma> nevermind
[00:52:26] <PJBoy> nah I --
[00:52:28] <PJBoy> yeah
[00:52:35] <LordKalma> iterators to [...] objects within that container.
[00:52:38] <LordKalma> this is hard to read
[00:52:49] <PJBoy> yeah
[00:52:55] <LordKalma> key word being *within*
[00:54:01] <PJBoy> they also need to add wording to say that moved from containers are left empty
[00:54:02] *** Joins: foul_owl (~kerry@207.244.125.36)
[00:54:24] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a4d5:442:9efd:86ed) (Ping timeout: 252 seconds)
[00:54:33] <PJBoy> it's strongly hinted at, but not guaranteed
[00:54:55] *** climax is now known as gentooclimax
[00:54:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:55:06] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a4d5:442:9efd:86ed)
[00:57:40] <rpav> end iterator comparison against a moved-_from_ container would definitely be invalid
[00:58:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:58:29] <PJBoy> yeah for sure
[00:58:29] <rpav> but so would everything else
[01:10:16] *** Quits: robod34 (~Username@79.113.227.62) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:13:37] *** Joins: immibis (~hexchat@62.156.144.218)
[01:15:00] *** Quits: hexingb (~hexingb@2409:8900:284d:c7f0:68ca:ee59:e45e:1c40) (Ping timeout: 240 seconds)
[01:17:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:21:09] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:27:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:27:51] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[01:28:15] *** Joins: ville (~ville@user/ville)
[01:29:59] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[01:35:06] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[01:35:20] *** Quits: magla (~gelignite@55d42258.access.ecotel.net) (Quit: Stay safe!)
[01:36:31] *** Joins: markong (~kvirc@213.146.188.203)
[01:36:41] *** Joins: magla (~gelignite@55d42258.access.ecotel.net)
[01:37:08] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[01:37:16] *** Quits: magla (~gelignite@55d42258.access.ecotel.net) (Remote host closed the connection)
[01:39:29] *** Quits: paul424 (~tom@ip-5-172-232-120.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[01:41:09] *** Quits: gcostigan (~glen.cost@h69-21-84-93.cncrtn.dedicated.static.tds.net) (Ping timeout: 252 seconds)
[01:42:26] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[01:42:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:39] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:39] *** ChanServ sets mode: +v npaperbot
[01:48:04] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:50:45] *** Joins: abf (~abf@user/abf)
[01:54:27] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[01:55:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:55:55] <cheetahw26> I'm building a dll in windows for C# and need to be able to send strings back and forth between functions, looks like there are a few ways to do this, all of the examples I find are old, not sure which is best way
[01:56:53] <Alipha> cheetahw26: can you provide the examples that you're selecting between?
[01:57:00] <cheetahw26> https://stackoverflow.com/questions/683013/interop-sending-string-from-c-sharp-to-c
[01:57:26] <cheetahw26> https://docs.microsoft.com/en-us/troubleshoot/developer/visualstudio/csharp/language-compilers/convert-systemstring-char
[01:58:02] *** Joins: pulse (~pulse@user/pulse)
[01:59:08] <cheetahw26> oops, that 2nd link is wrong, meant to post this one.. https://docs.microsoft.com/en-us/dotnet/framework/interop/default-marshaling-for-strings?redirectedfrom=MSDN
[01:59:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[02:05:59] <Alipha> cheetahw26: yeah, so it looks like you should do the `[DllImport(@"Native3DHandler.dll", EntryPoint = "#22", CharSet = CharSet.Ansi)] private static extern void func1(string path);` method if you want to send a null-terminated string to C++ for C++ to read from. But if you want to "send back" a string from the c++ code to the c# code, you'd use the StringBuilder technique to pass the c++ code a buffer
[02:06:01] <Alipha> which they can fill
[02:06:22] <Alipha> at least, that's my reading of it. perhaps someone else has actual experience doing so
[02:09:20] <Alipha> hm. though in my own code, i did something completely different: https://github.com/alipha/csharp-argon2/blob/master/csharp-argon2/PasswordHasher.cs#L437
[02:09:30] <Alipha> which doing the byte[] way is bidirectional...
[02:09:38] <cheetahw26> Thanks, I'll give it a shot... looks like I have to also learn how to utilize LPTSTR instead of my char*
[02:10:56] <Alipha> cheetahw26: well, using `CharSet = CharSet.Ansi` would mean you'd be able to use char*. unless you actually need to work with unicode.
[02:11:00] <MaddHatter> LP = long pointer (nobody cares about the "long" part anymore) to TSTR = (TCHAR, which is either char or wchar depending on whether it's a unicode build or not). The lack of a C means it's not const.
[02:11:38] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 272 seconds)
[02:11:45] <Alipha> right, so LPTSTR is either a char* or wchar_t*, depending upon if unicode is enabled
[02:11:59] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:12:13] <cheetahw26> I don't... but sending over as StringBuilder from C# has a LPSTR input var in C++, unless that would be an interchangeable parameter type
[02:13:29] <cheetahw26> ok, so for my C++ side, I can do this..Â  Â __declspec(dllexport) void TestStrings(char* lpString, int nMaxCount) ,Â  Â  instead of,Â  Â __declspec(dllexport) void TestStrings(LPTSTR lpString, int nMaxCount)
[02:16:27] * Alipha wonders how the StringBuilder knows how long the string is... just looks for the nul character?
[02:17:00] <cheetahw26> looks like you set that in C#, it's one of the optional parameters
[02:17:12] <cheetahw26> StringBuilder sb = new StringBuilder(256);
[02:17:34] <cheetahw26> CPP.TestStrings(sb, sb.Capacity + 1);Â  Â -- according to msdn anyway
[02:18:15] *** Joins: niko3 (~mmk@198-200-92-92.cpe.distributel.net)
[02:21:05] <Alipha> right... `sb.Capacity + 1` is the maximum length, but how does c# know the actual length? if the c++ code wrote fewer than 256 characters to it.
[02:21:22] <antto> now my sorting for values above 0 is wrong..: https://i.imgur.com/DxspOpK.png
[02:21:36] <cheetahw26> I'm not sure
[02:22:15] <Alipha> cheetahw26: after finding my own code that i wrote a long time ago that i linked above, i'm inclined to just use byte[] :-)
[02:22:50] <cheetahw26> ok, do you have the c++ side of that ?
[02:26:02] <Alipha> cheetahw26: i'm calling these functions: https://github.com/alipha/csharp-argon2/blob/master/libargon2/libargon2.h ... so it's just using __declspec(dllexport) and char*
[02:26:03] <ashafq> << decltype({1,2,3})
[02:26:03] <geordi> error: expected primary-expression before '{' token
[02:26:10] <ashafq> << typeof({1,2,3})
[02:26:10] <geordi> error: 'typeof' was not declared in this scope; did you mean 'typedef'? (fix known)
[02:26:19] <ashafq> how do I get the type?
[02:26:32] <antto> << TYPEOF({1,2,3})
[02:26:32] <geordi> error: 'TYPEOF' was not declared in this scope; did you mean 'TYPE'? (fix known)
[02:26:34] <CarloWood> antto: you mean below 10 - that is alphabetically ordered.
[02:26:51] <ashafq> Or how can I get the generic type of struct { int x, int y, int z };?
[02:26:51] <cheetahw26> Alipha thanks..
[02:26:53] <CarloWood> Err no - I read "R8 R85 R7.."
[02:27:10] <CarloWood> but R6 .. makes no sense I have to agree.
[02:27:11] <antto> CarloWood, no.. that 33.000 should be first, then 100.0, then 220.0 etc..
[02:27:30] <antto> look at the orange numbers with the many zeros
[02:27:57] <CarloWood> look ok to me
[02:28:14] <antto> nope
[02:28:27] <Alipha> ashafq: `{1,2,3}` isn't a type itself. it's an expression that becomes whatever struct (or array or initializer_list) that it needs based upon context
[02:28:38] <CarloWood> It sorts by resistor color code: 1 first, then 1.2 then 1.5, 1.8, 2.2, 2.7, 3.3 etc
[02:29:01] <CarloWood> antto: you all 1* resistors come first: 1, 10, 100, 1000, 10000, ..etc
[02:29:04] <antto> those don't even have colors
[02:29:19] <CarloWood> They do - this is the E12 series :P
[02:29:35] <ashafq> Alipha: I guess what's an elegant way of writing int[3]?
[02:30:06] <CarloWood> Ok - below I see a R50 of 100 Ohm - with my theory that should have been up there with the other 1000*'s
[02:30:23] <antto> https://2.imimg.com/data2/MH/NW/MY-1225448/smd-resistor-250x250.jpg
[02:30:36] <CarloWood> 10k
[02:30:53] <Alipha> ashafq: there's not a way to write a temporary int[3]. you could create a temporary std::array<int, 3> or something
[02:30:54] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:31:11] <antto> sorry, ignore the 100R, that one is at the bottom because it's 0805
[02:31:54] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:32:03] <antto> so it should be 33R, 220R, 1k, 2.2k ...
[02:32:09] <CarloWood> antto: well, it seems to be sorting by scientific notation then.
[02:32:36] <antto> f*cking science
[02:32:40] <antto> >:/
[02:34:05] <CarloWood> Or still, just alphabetically
[02:34:07] <CarloWood> << (std::string("1000.00000") < std::string("33.0000000"))
[02:34:08] <geordi> true
[02:34:15] <CarloWood> Are you comparing strings to sort that?
[02:34:54] <antto> yeah
[02:34:55] <Friithian> so for a c++ library would you guys ever use va_list and vfprintf etc?
[02:35:28] <CarloWood> antto: you'll have to compare the numerical values then.
[02:36:59] <Alipha> Friithian: no. use variadic template arguments instead.
[02:37:07] <Friithian> as I thought, just checking
[02:38:41] <kalven> Friithian: I'm using it now in a context where I'm mindful about the output size of my binary
[02:39:30] *** Joins: Guest193 (~Guest19@2601:647:5280:2a50:346d:814b:4421:eb22)
[02:39:32] <Friithian> but if you didn't have to been mindful about it, would you still use it?
[02:41:23] <kalven> no, then I'd probably use fmtlib for my formatting needs
[02:42:04] <Friithian> yeah makes sense. I'm just being forced to use someâ€¦ c``++'' functions from a library I was given
[02:42:14] *** PJBoy is now known as Guest8353
[02:42:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[02:43:49] <CarloWood> Hmm, I wonder where PJBoy could be. Where would he be? *looks around*
[02:44:13] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[02:44:23] <CarloWood> Nope not under the bed. Also not in the closet.
[02:44:57] *** Quits: Guest8353 (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[02:45:54] <Friithian> he's right behind you!
[02:46:07] <kalven> both iostreams and fmtlib add some chonk to the output
[02:47:52] <pulse> i have a very weird issue, which i just figured out after a lot of trial and error
[02:48:08] <pulse> when i add stuff to git (on windows) it changed lf to crlf
[02:48:28] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
[02:48:35] <pulse> and then if i push to github, and clone into another dir, my dependency folder is slightly larger (125mb instead of 118mb)
[02:48:45] <pulse> but when i build in VS, only the non-crlf converted builds fine
[02:48:48] <pulse> and the other complains about some missing header
[02:48:55] <pulse> does this make any sense whatsoever
[02:49:08] <pulse> wtf is even goging on
[02:50:22] <TinoDidriksen> Tell git to always use LF.
[02:51:10] <TinoDidriksen> In .gitattributes have the first line be: * text eol=lf, and then customize from there - usually just listing which suffixes are binary.
[02:51:31] *** Joins: pulse_ (~pulse@user/pulse)
[02:51:51] <TinoDidriksen> pulse_: Tell git to always use LF. In .gitattributes have the first line be: * text eol=lf, and then customize from there - usually just listing which suffixes are binary.
[02:53:02] <pulse_> TinoDidriksen, tnx, i'll try that
[02:53:32] <TinoDidriksen> Be really careful that if you have binary files, you must list them all - that * really means *, and it will convert all files.
[02:53:57] <TinoDidriksen> But given that source repos are 99% text, this is a fair default.
[02:54:18] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[02:54:40] <pulse_> can i just do it for a specific directory?
[02:55:20] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Ping timeout: 272 seconds)
[02:55:53] <TinoDidriksen> Sure
[02:55:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:56:35] <pulse_> it still says "LF will be replaced by CRLF"
[02:57:58] <TinoDidriksen> .gitattributes takes effect after a checkout/clone. You can also have a .editorconfig to tell IDEs that all files should use LF: https://github.com/GrammarSoft/cg3/blob/main/.editorconfig#L6
[02:59:08] <pulse_> does it even make sense that a build would fail with crlf, what kind of nonsense is that
[02:59:13] *** pulse_ is now known as pulse
[02:59:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:59:59] <TinoDidriksen> It shouldn't, but the fact that something is changing line endings is a problem. I apply .gitattributes and .editorconfig in all my projects to 100% ensure this kind of issue does not happen.
[03:00:17] <TinoDidriksen> Also to enforce UTF-8
[03:01:01] <pulse> ok that did work
[03:01:13] <johnny> a related question. Are there any popular editors/ides these days that don't let you configure line endings anymore?
[03:01:15] <pulse> now let me try to build again after a fresh clone
[03:01:31] <johnny> err
[03:02:14] <johnny> i phrased that wrong. do any popular ides/editors on windows still only use crlf without any option to chagne it?
[03:02:20] <TinoDidriksen> johnny, I don't think so. It's a fairly solved problem. Just have to be mindful of it during project setup.
[03:02:41] <johnny> so visual studio has that option nowadays?
[03:02:48] <TinoDidriksen> Has had for a decade.
[03:03:10] <johnny> i don't use windows, so i didn't know. I remember notepad only recently gained support for that
[03:03:55] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:04:25] <cbreak> that someone changes line endings is not a git problem, it's a someone problem.
[03:04:47] <cbreak> git's job is to track changes, not mess with file encodings. It can do it, but I think it's not good to make it do that.
[03:05:03] <TinoDidriksen> It's also a git problem. Git will "helpfully" follow OS line endings, which is a huge issue if you clone across platforms.
[03:05:15] <johnny> indeed
[03:06:08] <johnny> i assume there were a fair amount of folks with tools dependent on windows specific line endings
[03:06:29] <johnny> if not, it should have been an opt out, not an opt in feature
[03:06:44] <johnny> reverse that*
[03:08:31] <pulse> for some reason it still fails after a clone
[03:08:51] <pulse> so it's not crlf
[03:11:16] <pulse> why would something build just fine but not after you push to github and clone into a different dir
[03:11:53] <pulse> i don't even know how to approach this lol
[03:12:00] <pulse> there's nothing in .gitignore that would make that happen
[03:12:54] <cbreak> TinoDidriksen: only if it's set up that way
[03:13:04] <cbreak> I usually make it not mess with file contents
[03:13:05] <TinoDidriksen> Default is that way.
[03:13:58] <TinoDidriksen> The default is destructive. It sucks.
[03:15:17] <johnny> is that option settable in the global git config? maybe it'd be a good idea to just do it there?
[03:15:35] <TinoDidriksen> Yes, but that won't affect other people. .gitattributes and .editorconfig will.
[03:15:44] <johnny> sure.
[03:17:48] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[03:17:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Read error: Connection reset by peer)
[03:18:16] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:ad66:4f1c:f9e8:2233)
[03:18:16] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:ad66:4f1c:f9e8:2233) (Changing host)
[03:18:16] *** Joins: skapata (~Skapata@user/skapata)
[03:19:31] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[03:20:42] *** Quits: jsbach (~jsbach@dynamic-078-054-122-100.78.54.pool.telefonica.de) (Ping timeout: 252 seconds)
[03:23:22] *** Joins: Preddy (~Preddy@92.44.103.122)
[03:25:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:27:53] *** Joins: krishnac (~krishnac@c-73-189-104-236.hsd1.ca.comcast.net)
[03:28:12] <pulse> i don't freakin get this crap
[03:29:05] <pulse> build works, then you clone it, then it doesn't
[03:33:01] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:34:42] *** Quits: rb (~augh@theguntretort.com) (Ping timeout: 250 seconds)
[03:35:17] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 240 seconds)
[03:35:48] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[03:36:26] *** Joins: k8yun (~k8yun@user/k8yun)
[03:37:18] <pulse> i might just go crazy from this lol. i gotta do something else for a while
[03:37:22] <pulse> stupid git heisenbugs
[03:38:53] <MaddHatter> does std already have a recursive container -- i.e. container<T> contains either an arbitrary number of T or another container<T> (that itself may contain either Ts or more containers)?
[03:39:23] <TinoDidriksen> Standard has no heterogenous containers.
[03:39:47] <MaddHatter> it'd sure be useful if it did
[03:40:07] *** Quits: krishnac (~krishnac@c-73-189-104-236.hsd1.ca.comcast.net) (Remote host closed the connection)
[03:40:29] <MaddHatter> back to variants and ptrs then
[03:41:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[03:42:12] *** Joins: rwb (~augh@209.141.39.190)
[03:42:13] *** Joins: syrius (syrius@titan.stormtek.net)
[03:48:41] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[03:48:51] <MaddHatter> bool aa, bb; if (aa && bb) { } else if (!aa && !bb) { } else if (aa) { } else if (bb) { } // this is not reachable; why doesn't the compiler realize that?
[03:49:42] *** Joins: seninha (~seninha@user/seninha)
[03:50:29] <TinoDidriksen> aa=false, bb=true gets to that?
[03:50:54] <Alipha> MaddHatter: you get a warning?
[03:52:03] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:359c:70e6:9c13:224e) (Ping timeout: 252 seconds)
[03:52:09] <Alipha> or you don't get a warning and you expect to?
[03:53:02] <MaddHatter> TinoDidriksen: that falls through to the final "else if bb"
[03:53:10] <MaddHatter> Alipha: yeah, it warns that not all paths return a value
[03:53:19] *** Quits: emerent (~quassel@p200300cd57044364ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:53:23] <MaddHatter> (there's a return in each of the { } that I guess I left out there)
[03:53:46] *** Joins: emerent (~quassel@p200300cd570443e9ba27ebfffed28a59.dip0.t-ipconnect.de)
[03:53:58] <MaddHatter> two bool variables => four states. If all four states are handled, there's nothing left.
[03:54:01] <TinoDidriksen> Oh, that kind of return analysis is not required. Just put a throw 1; in the final part to silence it.
[03:54:08] <pulse> ok holy cosmonaut jesus, i think i finally figured out what's going on
[03:54:26] <MaddHatter> hm. that's a good idea. Throw makes it pretty obvious.
[03:54:37] <pulse> a dep i bundle has a .gitignore of its own, and it's ignoring libtiff/tiffonc.h and that's causing VS build to fail after cloning it
[03:54:55] <pulse> can i ignore nested gitignores or wtf should i do, just edit that out
[03:55:00] <MaddHatter> why would a .gitignore cause a build failure?
[03:55:15] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[03:55:19] *** Joins: ferdna (~ferdna@user/ferdna)
[03:55:22] <pulse> it causes a failure after a fresh clone
[03:55:36] <TinoDidriksen> That .gitignore should only affect the folder it's in, and surely they ignored it for a reason.
[03:55:38] <pulse> because a certain header hasn't been commited because of the ignore
[03:55:56] <pulse> TinoDidriksen, lol. that doesn't really help me
[03:56:12] <MaddHatter> you're committing generated files? As a necessary prerequisite for a build?
[03:56:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:56:28] <Alipha> TinoDidriksen: MaddHatter: __builtin_unreachable(); would be more appropriate? if you don't mind being non-standard
[03:57:06] <MaddHatter> Alipha: I need something that works (or is at least #ifdef-able) on gcc and msvc
[03:57:40] <TinoDidriksen> throw works. I use that in such cases.
[03:57:56] <Alipha> MaddHatter: yeah, `throw std::logic_error("can't reach here");` then
[03:59:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:04:53] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Quit: Leaving)
[04:07:34] *** Quits: niko3 (~mmk@198-200-92-92.cpe.distributel.net) (Quit: Leaving)
[04:10:12] *** Quits: Preddy (~Preddy@92.44.103.122) (Quit: Leaving)
[04:11:46] *** Quits: DSpider (~DSpider@82.79.237.103) (Quit: Leaving)
[04:15:25] <pulse> oh thank zeus
[04:15:35] <pulse> finally it works
[04:16:34] <pulse> i added the dep with git add --force and it ignored the .gitignores and now it builds on all my windows machines
[04:17:12] <pulse> some kind of VS/cmake weirdness or god knows what
[04:17:30] <pulse> and it builds from a fresh clone too
[04:19:14] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[04:20:17] <hnOsmium0001[m]> pulse: an idea is to use a unix2dos dryrun on your whole project and see which files are currently LF, if that's what's causing the problem
[04:20:29] <hnOsmium0001[m]> I think it's available in the msys2 repository?
[04:21:26] <pulse> yeah that turned out to not be the problem
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:30:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:31:19] <pulse> well, at least i learned about git add --force i guess
[04:31:37] <pulse> i took your suggestion TinoDidriksen and am generating vs solution with cmake rather than making my own
[04:31:52] <pulse> it's not as bad as i thought it woudl be
[04:35:30] <TinoDidriksen> What did you expect to go wrong or not the way you wanted, though?
[04:37:54] <pulse> idk, i expected it to be messier
[04:38:01] <pulse> it works adequately
[04:38:11] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Quit: Leaving)
[04:38:18] <pulse> you're probably still gonna cringe at my CMakeLists.txt a little https://github.com/pulzed/KiwiEd/blob/main/CMakeLists.txt
[04:38:22] <pulse> but at least i trimmed it down somewhat
[04:38:51] <pulse> and it finally builds across all my systems with 0 problems
[04:39:17] <TinoDidriksen> Yup. _OUTPUT_DIRECTORY, GLOB, and unncessary custom strip.
[04:39:57] <pulse> the strip doesn't even work apparently
[04:39:58] <pulse> hmm
[04:40:19] <hnOsmium0001[m]> aside from add_definitions instead of target_compile_definitions, I think it's ok - at least you didn't hardcode a bunch of SHARED into the targets, cough cough openxlsx
[04:40:20] <pulse> the output directory i can justify because i want the executable in a separate dir where i can copy various related files in post
[04:40:35] <pulse> why is glob bad though?
[04:40:38] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a4d5:442:9efd:86ed) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:40:58] <TinoDidriksen> Such a separate dir should happen in an install step, not a build step.
[04:41:38] <hnOsmium0001[m]> personally I'm not against GLOB, especially for adding cmake to a project that doesn't have it
[04:41:53] <pulse> TinoDidriksen, umm, but i want to update certain files _as_ i build. i do the same on windows
[04:42:07] <pulse> if i have datafiles the program depends on for example, i want a fresh copy in /bin/
[04:42:12] <pulse> and i do that in post-build
[04:42:14] <hnOsmium0001[m]> speaking of which - is there some kind of tool that you can run over a directory, and it would generate a CMakeLists.txt for each dir recursively, that you can just include() at the top CMakeLists.txt to get all the files?
[04:45:22] <pulse> i'm very confused about recursive cmakelists
[04:45:25] <pulse> how the f does that even work
[04:45:42] <pulse> just builds while walking down each node in a tree?
[04:45:58] <TinoDidriksen> Pretty much.
[04:47:36] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[04:56:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:00:07] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Quit: Leaving)
[05:00:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[05:01:24] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[05:02:52] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Client Quit)
[05:04:52] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:06:25] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[05:14:10] *** Joins: rajkohaxor (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[05:15:44] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:16:34] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Ping timeout: 272 seconds)
[05:19:59] *** Quits: emerent (~quassel@p200300cd570443e9ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:22:15] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[05:23:06] *** Quits: slavfox (~slavfox@93.158.232.111) (Quit: ZNC 1.8.2 - https://znc.in)
[05:23:56] *** Joins: slavfox (~slavfox@93.158.232.111)
[05:24:04] *** Joins: txtsd (~txtsd@user/txtsd)
[05:24:04] *** Joins: emerent (~quassel@p5b2657e5.dip0.t-ipconnect.de)
[05:26:01] *** Joins: bitrot (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[05:27:53] *** Quits: bitrot (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Client Quit)
[05:29:52] *** Quits: rajkohaxor (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Ping timeout: 272 seconds)
[05:30:30] *** Joins: segnior (segnior@user/segnior)
[05:33:04] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:42:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:40] *** ChanServ sets mode: +v npaperbot
[05:43:42] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:46:25] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:46:36] *** Quits: Tokamak (~Tokamak@172.58.191.81) (Ping timeout: 240 seconds)
[05:52:23] *** Quits: miklcct (~quassel@vps.miklcct.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:52:59] *** Joins: miklcct (~quassel@vps.miklcct.com)
[05:57:12] *** Joins: Tokamak (~Tokamak@172.58.191.81)
[05:57:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:57:24] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:00:34] *** Quits: Tokamak (~Tokamak@172.58.191.81) (Client Quit)
[06:00:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:01:07] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[06:01:14] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[06:01:28] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[06:20:01] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[06:21:06] *** Quits: MatSharrow (~matthew@60.102.9.51.dyn.plus.net) (Ping timeout: 252 seconds)
[06:23:11] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[06:25:13] <yolo> https://github.com/novak-99/MLPP c++ frontend for ML
[06:25:44] <yolo> one guy pulled all these together, quite impressive
[06:26:27] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:35:38] *** Quits: abf (~abf@user/abf) (Quit: Leaving)
[06:36:04] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:48:05] *** Joins: adeliktas9 (~adeliktas@i59F5FF2F.versanet.de)
[06:49:35] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:50:07] *** Quits: adeliktas (~adeliktas@i59F4D79A.versanet.de) (Ping timeout: 250 seconds)
[06:50:07] *** adeliktas9 is now known as adeliktas
[06:56:37] *** Joins: k8yun (~k8yun@user/k8yun)
[06:57:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:01:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[07:07:31] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:10:29] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 250 seconds)
[07:11:58] *** Quits: andrija (uid540053@id-540053.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:20:37] <OnlineCop> I've defined an interface that returns a copy of a vector, and I'd like to add a const ref of that vector. It's throwing an error when I do, and I'm not sure why, or what I should change: https://wandbox.org/permlink/Bn17g68rKeXzdjhk (uncomment `#define CONST_VEC` to see the error).
[07:21:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:21:58] <MaddHatter> you can't overload functions based on return type; only based on its input parameters
[07:22:35] <OnlineCop> Ah. So I'll have to rename the function?
[07:22:35] <MaddHatter> (there's no way for the compiler to know whether you mean the return-by-value getTemp() or the return-const-ref getTemp())
[07:22:59] <OnlineCop> Wouldn't the compiler be able to deduce that I want a const ref to something instead of a copy of the collection?
[07:23:05] <MaddHatter> yes, or just omit the return-by-value version, since if the user wants a copy of it, they can copy from the const-ref themselves
[07:24:03] <MaddHatter> in short, no
[07:24:59] <OnlineCop> If I have `std::vector<double> foo = temperatureInstance->getTemp();` where it returns a const ref, is it correct that the compiler will create a copy?
[07:25:25] <OnlineCop> s/where it returns/where getTemp() returns/
[07:25:34] <MaddHatter> for that example, yes. It will invoke std::vector<double>'s copy-constructor
[07:25:45] <OnlineCop> Good enough for me. Thanks!
[07:26:21] *** Quits: ville (~ville@user/ville) (Quit: kernel)
[07:26:26] <MaddHatter> (do it as const std::vector<double>& foo = ... to avoid the copy)
[07:26:55] <OnlineCop> In some instances, I do want the copy.
[07:26:59] <OnlineCop> But noted.
[07:27:56] *** Joins: ville (~ville@user/ville)
[07:28:26] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[07:28:55] <OnlineCop> Would I need a different signature for a non-const ref for the same structures?
[07:29:54] <OnlineCop> Would `virtual std::vector<double>& getTemp() = 0;` be a different signature than `virtual const std::vector<double>& getTemp() const = 0;` ?
[07:31:25] <MaddHatter> yes, because of the final const (i.e. whether this is const or not)
[07:31:52] <OnlineCop> Okay, so I just need to learn constness and how it affects the signatures.
[07:33:48] <MaddHatter> vector<double>& getTemp() const { return temp; } would be illegal, because you can't return a mutable ref from a const function
[07:35:42] *** Quits: Raziel (~Raziel@user/raziel) (Quit: Leaving)
[07:40:44] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:ddeb:b69c:53b2:54ce) (Quit: Konversation terminated!)
[07:40:53] <ville> MaddHatter: mutable
[07:41:05] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:2f5d:2ac3:7181:23e6)
[07:41:17] <MaddHatter> ville: yeah, there are ways to break the rules, but given where OnlineCop is, I'm trying to stick to the basic stuff
[07:55:05] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:58:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:01:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[08:09:55] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:11:14] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[08:11:50] *** Joins: p-i- (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th)
[08:17:45] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:29:22] *** Joins: rajkosto (~rajkosto@109-92-2-189.dynamic.isp.telekom.rs)
[08:29:44] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 272 seconds)
[08:29:53] *** Joins: LangerJan (~jan@user/langerjan)
[08:41:58] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:44:13] *** Joins: k8yun (~k8yun@user/k8yun)
[08:46:12] *** Quits: rajkosto (~rajkosto@109-92-2-189.dynamic.isp.telekom.rs) (Ping timeout: 272 seconds)
[08:52:47] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[08:56:38] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:58:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:02:19] <AliceMeows> Hey I'm attempting to design a class similar to unique_ptr to manage resource however there are several differences between the two and a few problems. the first problem is lack of 'null' state where the release() function cannot set its internal resource variable to some invalid state as T() might not always be invalid state or perhaps its not default constructible type. the second problem is invalid state validation where a resour
[09:02:19] <AliceMeows> ce might have more than a single value to indicate of failure such as any negative value for example. so my question is how could I possibly solve these issues?
[09:02:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:06:41] *** Quits: Grell (~john@ool-4579c605.dyn.optonline.net) (Remote host closed the connection)
[09:12:47] *** Joins: rajkosto (~rajkosto@109-92-2-189.dynamic.isp.telekom.rs)
[09:19:43] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:28:50] *** Quits: rajkosto (~rajkosto@109-92-2-189.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[09:34:06] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Remote host closed the connection)
[09:34:23] *** Joins: Inline (~Inline@2a02:908:1252:7a80::d7)
[09:35:57] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[09:38:52] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:42:31] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:38] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:38] *** ChanServ sets mode: +v npaperbot
[09:51:12] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[09:52:41] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[09:59:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:59:35] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[10:02:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[10:06:30] *** Joins: teepee (~teepee@openscad/teepee)
[10:23:52] <ville> i just have a bool
[10:25:06] <antto> two bools and one cow
[10:25:27] * antto runs
[10:26:39] <AliceMeows> ville: but then how would reset() work? if I call reset(invalid_value) how would I know that this value is invalid state? this is the problem I had with inout_ptr_t
[10:28:43] <ville> it's a user-problem. just say that the value must always hold a value you can call the deleter with when the object is "engaged"
[10:29:35] <ville> so if it's holding a pointer, the deleter is std::free() it's alright to stick a null there
[10:30:04] <ville> (because std::free(nullptr) is fine)
[10:30:38] <AliceMeows> That is if the resource is a pointer but the resource might as well be any T and not necessarily a pointer. think posix's open() function where it returns int
[10:31:32] <ville> it isn't pointer-specific. just used pointer as example because everyone knows it and understands it has a "invalid" value but their deleter can handle it
[10:31:59] <AliceMeows> You can't always do something like this with other resources though
[10:32:00] <ville> if the held type has an invalid value and the associated deleter can't handle being called with it it's a user error
[10:32:37] <ville> yes i realize that and i am saying don't bother. you can't fool-proof everything
[10:33:09] <ville> sounds like you're desinging a thing in vacuum rather than basing it on actual usage-based requirements
[10:34:12] <AliceMeows> It is usage based, I actually use a library in one of my projects which does not have invalid state and its init function look like this bool init(T*);
[10:34:20] <ville> if the user knows there are invalid values, and the provided deleter can't handle them, then they can always wrap the actual deleter in something that does the check
[10:35:14] <AliceMeows> Shouldn't the resource management class itself take care of it? with unique_resource you don't have to check if the pointer passed to it is nullptr
[10:35:17] <ville> no
[10:35:23] <AliceMeows> unique_ptr*
[10:35:35] <ville> it isn't a property of unique_ptr
[10:35:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5dc1:ef38:a9e4:9c9c)
[10:35:56] <ville> it's a propety of delete/std::free() not caring if you pass in a nullptr
[10:36:16] <ville> which happens to be the default deleter
[10:36:43] <AliceMeows> I was under the impression that it is, am I then supposed to always confirm the pointer in my deleter is nullptr or not?
[10:37:26] <ville> confirm how? you're free to call std::free(nullptr). it's specified that it's a noop
[10:37:40] <AliceMeows> I suppose you're right
[10:38:35] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:38:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:39:29] <ville> even if people call them smart pointers unique_ptr is rather dumb. it just calls a function. doesn't have any "smarts" on top of that
[10:39:48] <AliceMeows> They do make life easier though
[10:40:10] <AliceMeows> Its much better to utilize RAII than manually calling some function each time you exit a function that holds a resource
[10:44:11] <AliceMeows> In a way it seems like the whole point of reset() and release() functions for a unique_resource type of class is pointless and you might as well just turn it into some scoped_resource which narrows down its scope (no pun intended)
[10:45:19] <AliceMeows> Another way to look into this is how unique_resource looks more like std::optional with a few more functions
[10:46:04] <ville> for resources that never leave a function i suggest you should have a defer/scope guard like mechanism available. it's a fairly common pattern. you need resources a, b and c while creating the desired object
[10:46:21] <ville> but you discard a, b, c once you return d
[10:47:36] <ville> a silly example might be reading the contents of a file into a buffer
[10:49:07] <ville> so if you were using std::fopen, std::read and such, you'd then put a defer on the returned file stream
[10:50:12] <ville> err std::fread
[10:51:41] <AliceMeows> I get what you mean, calling fopen, fread and then fclose because the file stream is no longer neeeded
[10:53:36] <ville> ...but you'll see it time and again there's a group of c++ prgrammers that must first wrap the whole c api in their ad-hoc c++ wrapper before they use it. no matter hwat
[10:54:41] <AliceMeows> That is what I was trying to avoid, I wanted to create a class that allows me to manage these resources externally instead of creating some sort of walled garden like c# and java are
[10:56:00] <ville> in my experience then make your self defer as the first thing. then second thing you may to wish to look at is what to do when you want to hold a resource as a member of a struct
[10:56:50] <ville> how can you make your self not hate doing that, which std::unique_ptr's interface fails miserably at
[10:57:03] <AliceMeows> I already do...
[10:58:19] <AliceMeows> I had the idea of storing a bool and a 'validator' object to cover all bases but it seem such an overkill
[10:58:22] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:58:31] <ville> 08:53:52      ville | i just have a bool
[10:59:08] <AliceMeows> Its what I've tried until inout_ptr which sadly got accepted into the next standard ruined it completely
[10:59:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:00:05] <AliceMeows> Which leads again to the same stupid deal of looking into the implementation to get things to work correctly similar to how it was with unique_ptr where it was used to manage resources
[11:02:27] <kalven> what got accepted into the next standard?
[11:02:30] <ville> you should ask your self: "...belong to the solution set rather than to the problem set?". points if you know who's that
[11:02:48] <AliceMeows> kalven: std::inout_ptr
[11:03:10] <ville> where does the problems std::inout_ptr claims to solve come from?
[11:03:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[11:04:42] <AliceMeows> If I use a bool as you've suggested then when inout_ptr_t internally calls reset(T) the assumed state of the resource is valid when it is entirely possible that the C function you just called have failed and didn't affect the state but inout_ptr_t does not know that and that breaks unique_resource
[11:05:28] <ville> the inout_ptr and such are covering up problems created by std::unique_ptr
[11:05:49] <ville> just don't use any of that
[11:07:04] <AliceMeows> There used to be a proposal I think to make some changes to unique_ptr to allow passing it directly to functions that expect T* but the committee was against it because it breaks encapsulation
[11:07:43] <AliceMeows> Due to that I've attempted to get around it by adding a function that returns 'inout_param<T>' which was somewhat similar to inout_ptr_t
[11:08:12] <ville> just make a better, that is does the things you want, resource guard type in the first place and don't by into the poorly fitting types the committee is publishng
[11:09:20] <AliceMeows> I was hoping to design something that could potentially be accepted into the standard at some point
[11:09:56] <AliceMeows> I also couldn't entirely disagree with the notion that returning a pointer to some internal member variable breaks encapsulation
[11:10:04] <ville> i know everyone was waiting with bated breath so i'll reveal the whole quote: "Are you quite sure that all those bells and whistles, all those wonderful facilities of your so-called "powerful" programming languages belong to the solution set rather than to the problem set?" - Dijkstra 1976
[11:10:26] <ville> that's a good thing to wonder about when you see a new wg21 paper
[11:11:57] <AliceMeows> I've been wondering about it for a while but I couldn't decide what the correct answer would be
[11:13:26] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:dd60:a941:ddd9:4bbf)
[11:13:56] <AliceMeows> It seemed as if it'd be possible to reduce the problem of resource management to some LCD and call it a day but its not as easy as it initially seem to be
[11:16:27] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5dc1:ef38:a9e4:9c9c) (Ping timeout: 252 seconds)
[11:26:22] *** Quits: letto (~letto@188.26.157.245) (Quit: Konversation terminated!)
[11:26:58] *** Joins: letto (~letto@188.26.157.245)
[11:28:19] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[11:29:16] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:31:32] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[11:36:45] *** Quits: Guest193 (~Guest19@2601:647:5280:2a50:346d:814b:4421:eb22) (Ping timeout: 256 seconds)
[11:37:19] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:346d:814b:4421:eb22) (Ping timeout: 256 seconds)
[11:37:56] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:39:41] <ville> AliceMeows: look at the problems you're having with resources. solve those problems. not everyone else's. also look where those come from, part of the solution may be to stop doing what you're doing
[11:40:36] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[11:40:53] <ville> AliceMeows: a universal-applies-to-every-situation kind of type is perhaps unrealistic. i'd start with types that solve specific use case and see what comes out of that. you'll get handful of types and after awhile you've used them take a note which get used and how much. what were the reasons why some didn't get used and so on
[11:43:47] *** Joins: |7| (~seachdamh@user/seachdamh)
[11:43:56] <ville> i suppose inout_ptr is doing that, so perhaps it's not all bad
[11:45:24] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:45:33] <AliceMeows> Until it bites you in the ass that is
[11:48:23] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[11:48:29] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[11:50:37] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:50:45] *** LordKalma_ is now known as LordKalma
[11:50:49] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:51:47] *** Joins: andreasbuhr (~quassel@p549dba52.dip0.t-ipconnect.de)
[11:51:47] *** Joins: MatSharrow (~matthew@60.102.9.51.dyn.plus.net)
[11:54:16] *** Joins: proller (~p@80.240.216.69)
[11:57:39] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc4b:a8a7:d17e:91a5)
[11:58:22] <ville> yes you can't make everything impossible to misuse. if you get or need to choose what then dont bother with things that are easily detectable and the usage then fixed
[12:00:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:00:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:00:36] *** Joins: DSpider (~DSpider@82.79.237.2)
[12:04:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[12:06:12] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[12:06:50] *** Joins: darkoccultist (~darkone@user/darkoccultist)
[12:09:45] <xkoncek> tbh, Java does make it quite hard to do low-level errors
[12:10:04] *** Joins: teepee_ (~teepee@openscad/teepee)
[12:10:19] <LordKalma> that's what high level language means I guess
[12:10:21] <xkoncek> for example it even detects if you are modifying a container while iterating over it and throws ConcurrentOperationException
[12:10:43] <LordKalma> morning fellow programmers
[12:10:55] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[12:10:56] *** teepee_ is now known as teepee
[12:11:20] *** Joins: proller (~p@80.240.216.69)
[12:17:52] <xkoncek> what is the point in /etc/shadow using random salt instead of something like concatenating the user name if the salt is stored in the fila anyway?
[12:23:22] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 250 seconds)
[12:23:48] <riv> the salt being random makes it hard to precompute hashes :)
[12:24:09] <riv> if you used username it would help a bit, but not as much as being totally random
[12:25:02] *** Joins: Terminus (~null@user/terminus)
[12:25:50] *** Joins: robod34 (~Username@79.113.227.62)
[12:25:51] <LordKalma> why have less entropy when you can have more entropy, i guess?
[12:28:28] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:29:33] <Shell> xkoncek: if, for example, "user" is a common username, the same salt would get used across many systems, which allows attackers to make attacks that assume the same salt (such as rainbow tables). more generally though, password hash functions are written to assume random salts and not providing said random salts is not using them correctly.
[12:30:06] *** Joins: jsbach (~jsbach@2a01:c23:5c78:5300:87e1:6293:e798:e67c)
[12:30:10] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: You have been kicked for being idle)
[12:31:09] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 250 seconds)
[12:44:08] *** Joins: bobb_ (~bobb_@dslb-088-066-150-081.088.066.pools.vodafone-ip.de)
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:48] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:53:17] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:57:21] *** Joins: plastico (~plastico@neomutt/plastico)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[12:59:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Quit: Quit)
[12:59:56] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Read error: Connection reset by peer)
[13:00:34] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[13:00:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:04:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:21:57] <Haohmaru> once you use, say, std::fixed on a stringstream, how do you turn it off?!
[13:24:38] <Shell> Haohmaru: is it std::defaultfloat?
[13:25:48] <Haohmaru> huh.. if only it was on that page.. https://en.cppreference.com/w/cpp/io/ios_base/fmtflags
[13:25:51] <Haohmaru> >:/
[13:26:05] <Haohmaru> cppreference.com is very cold sometimes
[13:26:50] <AliceMeows> You could always store the state prior to making a change and restore it afterwards
[13:27:55] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:36:47] *** Joins: theArthurDent (~user@nat01.dev.scee.net)
[13:42:31] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:40] *** ChanServ sets mode: +v npaperbot
[13:53:04] <xkoncek> is there a normal working example of usage of openssl?
[13:55:48] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[13:57:58] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:01:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:01:48] *** Joins: immibis_ (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de)
[14:04:12] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[14:04:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[14:06:24] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:09:45] *** Joins: szymon (~ugh@37.120.211.198)
[14:15:32] *** Quits: foul_owl (~kerry@207.244.125.36) (Ping timeout: 272 seconds)
[14:19:56] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[14:23:02] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[14:27:21] *** Joins: markong (~kvirc@213.146.188.203)
[14:37:21] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:40:58] *** Joins: foul_owl (~kerry@207.244.125.36)
[14:45:58] *** Quits: theArthurDent (~user@nat01.dev.scee.net) (Quit: ERC (IRC client for Emacs 27.1))
[14:46:43] *** Joins: theArthurDent (~theArthur@217.18.21.194)
[14:48:10] *** Joins: CaCode (~CaCode@user/cacode)
[14:48:36] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:49:00] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:53:23] *** Quits: baltazar (~baltazar@87-97-81-70.pool.digikabel.hu) (Ping timeout: 256 seconds)
[14:53:41] *** Quits: mitch0 (~mitch@87-97-81-70.pool.digikabel.hu) (Ping timeout: 252 seconds)
[14:55:07] *** Joins: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu)
[14:55:21] *** Joins: mitch0 (~mitch@178-164-240-26.pool.digikabel.hu)
[14:55:23] <ville> you mean one that would be up-to-date and didn't use things that were backdoored or otherwise bruteforceable on a modern toaster? doubt it
[14:56:49] *** Quits: theArthurDent (~theArthur@217.18.21.194) (Changing host)
[14:56:49] *** Joins: theArthurDent (~theArthur@user/theArthurDent)
[14:58:11] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[15:00:36] *** Joins: seninha (~seninha@user/seninha)
[15:00:50] *** Quits: theArthurDent (~theArthur@user/theArthurDent) (Quit: Client closed)
[15:01:25] *** Joins: theArthurDent (~user@user/theArthurDent)
[15:01:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:3c70:5798:e730:7b29)
[15:01:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:3c70:5798:e730:7b29) (Changing host)
[15:01:32] *** Joins: skapata (~Skapata@user/skapata)
[15:01:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:02:56] <PJBoy> I do have an encryption/decryption example
[15:03:11] <PJBoy> for 256-bit AES GCM
[15:04:26] <PJBoy> but yeah it is from ~2017
[15:05:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:08:08] <PJBoy> wow my code doesn't compile anymore
[15:08:18] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[15:09:00] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 240 seconds)
[15:10:30] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:23:12] <xkoncek> i just want to create a shared secret using diffie hellman
[15:23:43] <xkoncek> and then i would also like to find some functions for symmetric cryptography
[15:24:16] <AliceMeows> There is crypto++ which you could use
[15:25:52] <PJBoy> here's my revised code http://codepad.org/0dzXXBcW
[15:27:42] <xkoncek> PJBoy doesn't it require some pre-computed parameters?
[15:27:53] <xkoncek> or does your code generate them?
[15:28:09] <PJBoy> the function requires a key
[15:28:19] <PJBoy> and it generates the IV
[15:28:25] <PJBoy> and that's all you need
[15:28:56] <xkoncek> crypto++ not in Fedora repos, too bad
[15:29:07] <PJBoy> crypto++ isn't worth trying
[15:29:33] <AliceMeows> Why not?
[15:30:38] <PJBoy> just look at this hello world https://stackoverflow.com/questions/12306956/example-of-aes-using-crypto/12307096#12307096
[15:30:58] <PJBoy> > CryptoPP::StreamTransformationFilter stfEncryptor(cbcEncryption, new CryptoPP::StringSink( ciphertext ) );
[15:31:01] *** Quits: szymon (~ugh@37.120.211.198) (Remote host closed the connection)
[15:31:06] <PJBoy> I hate to see it
[15:31:19] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[15:31:19] <AliceMeows> I don't think its too bad
[15:32:14] <PJBoy> `static_cast<CryptoPP::byte>(ciphertext[i])` :/
[15:32:41] <PJBoy> I tried using it once, and I couldn't get as far as that hello world example from the docs alone
[15:32:49] <PJBoy> I probably put about two hours into it
[15:33:00] *** pah is now known as pa
[15:33:50] <PJBoy> maybe it's not *terrible*, but I haven't seen worse yet
[15:34:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:42:11] *** Joins: immibis (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de)
[15:42:50] *** Quits: immibis_ (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[15:45:46] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:54:04] *** Quits: theArthurDent (~user@user/theArthurDent) (Quit: ERC (IRC client for Emacs 27.1))
[15:56:46] *** Quits: immibis (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[15:56:53] *** Joins: immibis (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de)
[16:02:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:04:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[16:06:12] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[16:06:22] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:07:03] *** Quits: ville (~ville@user/ville) (Quit: ville)
[16:09:14] *** Joins: ville (~ville@user/ville)
[16:20:38] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[16:24:41] <cart_man> Anybody ever used the boost beast lib to hit https://chat.googleapis.com ? Is there something specific I should be doing? I am using the simple sync http example wit host=https://chat.googleapis.com; port = "443" ; target = "/v1/pxxxxxx/xxx/messages" but I get  -> "Error: resolve: Host not found (authoritative) [asio.netdb:1]"
[16:26:05] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[16:27:58] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[16:29:24] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[16:31:34] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Read error: Connection reset by peer)
[16:32:02] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[16:36:29] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:57] <BluesBoy> cart_man: shouldn't host be without https:// if you specify port ?
[16:42:14] *** Joins: proller (~p@2a02:6b8:0:40c:8637:6ee9:affd:7e9c)
[16:43:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:49:56] *** gentooclimax is now known as climax
[16:52:32] *** Joins: gcostigan (~glen.cost@h69-21-84-93.cncrtn.dedicated.static.tds.net)
[16:54:00] *** climax is now known as gentooclimax
[16:54:25] *** Joins: irrenhaus3 (~xenon@ip-046-005-003-239.um12.pools.vodafone-ip.de)
[16:54:46] *** Quits: gcostigan (~glen.cost@h69-21-84-93.cncrtn.dedicated.static.tds.net) (Client Quit)
[16:55:57] <cart_man> BluesBoy: Thats true yea. Intersetingly when I do port 80 on my app it does get a response although  a bad one. When I use port 443 I get Error: end of stream [beast.http"1]. Althugh I know that when using postman the https:// is being used
[16:56:19] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[16:56:32] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Read error: Connection reset by peer)
[16:57:34] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[16:58:26] *** test_ is now known as _flood
[16:59:06] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc4b:a8a7:d17e:91a5) (Ping timeout: 252 seconds)
[16:59:58] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[17:00:08] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Read error: Connection reset by peer)
[17:00:41] *** Joins: theArthurDent (~user@user/theArthurDent)
[17:00:50] *** Joins: Raziel (~Raziel@user/raziel)
[17:02:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:05:34] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[17:07:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:08:46] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[17:13:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 272 seconds)
[17:13:30] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[17:15:03] *** Quits: proller (~p@2a02:6b8:0:40c:8637:6ee9:affd:7e9c) (Ping timeout: 252 seconds)
[17:15:11] *** Quits: bobb_ (~bobb_@dslb-088-066-150-081.088.066.pools.vodafone-ip.de) (Quit: Ping timeout (120 seconds))
[17:15:32] *** Joins: bobb_ (~bobb_@dslb-088-066-150-081.088.066.pools.vodafone-ip.de)
[17:16:35] *** Joins: AmR (~AmREiSa@156.207.156.230)
[17:23:23] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Remote host closed the connection)
[17:23:43] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[17:23:46] *** Joins: pulse (~pulse@user/pulse)
[17:25:06] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:27:11] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[17:27:38] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:42:29] *** Joins: gehn (~gehn@user/gehn)
[17:42:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:41] *** ChanServ sets mode: +v npaperbot
[17:48:50] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Remote host closed the connection)
[17:49:10] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[17:51:56] *** Joins: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[17:55:36] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:55:56] *** Quits: p-i- (~Ohmu@mx-ll-183.89.27-225.dynamic.3bb.co.th) (Ping timeout: 272 seconds)
[18:00:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:02:28] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[18:03:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:05:23] *** Joins: Tokamak (~Tokamak@172.58.191.81)
[18:05:24] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:07:20] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[18:13:48] *** Joins: markong (~kvirc@213.146.188.203)
[18:25:20] <LordKalma> I love when I get JIRA updated from bugs I follow on qt and the only change was someone removing themselves out of being assigned to it haha
[18:29:52] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:30:10] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Quit: fa)
[18:30:27] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[18:35:26] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[18:37:24] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[18:38:04] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[18:38:19] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:42:24] <rpav> it's so annoying that there isn't in-class bitfield initialization in 17
[18:43:55] *** Joins: p-i- (~Ohmu@183.89.27.225)
[18:46:57] *** Joins: ivii (~ivan@user/ivii)
[18:53:59] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[18:59:29] <bobb_> LordKalma haha
[19:00:33] <bobb_> rpav will that ever change?
[19:00:41] <rpav> bobb_: it already did in 20 :(
[19:00:54] <rpav> it was the reason i switched to 20 in my own codebase
[19:01:02] <bobb_> oh, i did not recognize that
[19:01:49] *** Joins: arch-angel_ (~quassel@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[19:02:33] *** Quits: arch-angel_ (~quassel@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Client Quit)
[19:03:10] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Quit: Leaving)
[19:03:29] *** Joins: arch-angel (~quassel@user/arch-angel)
[19:03:45] <bobb_> indeed, you are right, there are significant changes
[19:03:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:04:13] *** arch-angel is now known as arch-angel_
[19:04:15] *** arch-angel_ is now known as arch-angel
[19:04:27] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:05:55] *** Quits: bobb_ (~bobb_@dslb-088-066-150-081.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[19:06:27] *** Quits: arch-angel (~quassel@user/arch-angel) (Client Quit)
[19:06:45] *** Joins: arch-angel (~quassel@user/arch-angel)
[19:08:08] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[19:11:08] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Read error: Connection reset by peer)
[19:11:47] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[19:11:52] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Read error: Connection reset by peer)
[19:12:26] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[19:14:48] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:eca0:5756:a32a:9258)
[19:15:34] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:15:54] *** Joins: bobb_ (~bobb_@dslb-088-066-150-081.088.066.pools.vodafone-ip.de)
[19:17:55] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[19:20:44] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: Sayonara!)
[19:21:06] *** Joins: arch-angel (~quassel@user/arch-angel)
[19:27:31] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:28:27] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: Sayonara!)
[19:28:45] *** Joins: arch-angel (~quassel@user/arch-angel)
[19:32:18] *** Quits: arch-angel (~quassel@user/arch-angel) (Client Quit)
[19:32:35] *** Joins: arch-angel (~quassel@user/arch-angel)
[19:33:09] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Read error: Connection reset by peer)
[19:33:24] *** Quits: arch-angel (~quassel@user/arch-angel) (Client Quit)
[19:34:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[19:34:05] *** Joins: arch-angel (~quassel@user/arch-angel)
[19:34:13] *** Joins: xkuru (~xkuru@user/xkuru)
[19:34:49] *** Quits: arch-angel (~quassel@user/arch-angel) (Client Quit)
[19:35:00] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:37:30] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 252 seconds)
[19:37:54] *** Joins: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19)
[19:40:00] *** Joins: magla (~gelignite@d536370e.access.ecotel.net)
[19:41:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:42:12] *** Quits: hexingb (~hexingb@2409:8900:284d:c7af:7d2f:f742:cb2f:6b19) (Ping timeout: 240 seconds)
[19:43:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:50:03] *** Joins: arch-angel (~quassel@user/arch-angel)
[19:52:28] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Ping timeout: 272 seconds)
[19:52:37] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[19:55:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:56:16] *** Joins: Simplar (~quassel@188.163.93.241)
[19:59:19] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:00:05] *** Joins: seninha_ (~seninha@user/seninha)
[20:00:14] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[20:01:20] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 272 seconds)
[20:02:03] *** Quits: ik (uid540109@id-540109.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:04:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:07:19] *** Quits: bobb_ (~bobb_@dslb-088-066-150-081.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:07:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:12:39] *** Quits: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[20:14:51] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[20:15:15] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:15:18] *** Joins: paul424 (~tom@ip-37-248-159-53.multi.internet.cyfrowypolsat.pl)
[20:15:23] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[20:15:39] <Simplar> https://www.youtube.com/watch?v=tas0O586t80
[20:15:40] <Simplar> Gosh.
[20:15:41] <Simplar> XD
[20:18:49] <Simplar> Best C advertisement I have seen
[20:19:47] <kenanmarasli> neat :D
[20:21:23] <rpav> lame
[20:24:27] <rpav> though if that's any indication, pretty sure she goes on to program in C++ (;
[20:27:00] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[20:29:45] <Simplar> rpav: why? XD
[20:30:03] <rpav> you never actually saw the movie?
[20:30:47] <paul424> "Just wait until Ariel gets to the build system and packaging."
[20:31:41] <Simplar> Ah. Ah!
[20:31:46] <Simplar> Lmao, true
[20:36:24] <paul424> The DraggableTileContainer::GameMap  dtc is created AFTER the GameMap gameMap, and it borrows but does not owns the vector<Seat*> ( it copies over the collection of pointers ) .... How this can be expressed with smartpointers and HOW the destructor of each should look like ? Also I am the master of spoiling the inheritance class : the DraggableTileContainer is used in such a way that ~GameMap(){clearAll();} no longer
[20:36:24] <paul424> actually clears after the dtc.
[20:37:12] <paul424> ohh it's  DraggableTileContainer:GameMap  dtc, that's how you express the inheritance properly in C++
[20:37:24] <rpav> what
[20:37:44] <rpav> i don't tihnk any of that is remotely correct
[20:39:45] <paul424> hmm what I can propose is to have ad-hoc polymorpyism in clearAll() method; that is to relay on type of GameMap ( NodeType::GameMap, NodeType::DraggableTileContainer) since already every gamemap holds such a field, and then if else....
[20:40:28] <rpav> gpt-3
[20:41:44] <paul424> but first questions first is having such field inside GameMap class valid practice ?
[20:41:50] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:42:03] <paul424> rpav, and I am not a robot :\
[20:42:11] <rpav> probably it's not what you want in any case, but it's unclear from anything you've said what you're actually doing or why
[20:44:49] <paul424> I have old code which was used for the game Opendungeons. I try to add the hovering feature such as here : https://www.youtube.com/watch?v=dZCcNeGdbeg
[20:45:13] <rpav> probably if you have a tile map, you should simply have a TileMap that has tile chunks, and little else; you shouldn't need much inheritance or polymorphism or anything
[20:45:59] <rpav> yeah i don't see anything i'd use such for
[20:46:12] <rpav> you want a nice interface for "drawing" into the tilemap or stamping one onto another, but that's about it
[20:46:19] <paul424> now the new code Is the class DraggableTileContainer:GameMap. Representing --guess what hovering map bit over the orginal one
[20:46:47] <rpav> why would it be a subclass
[20:47:08] <rpav> it's a tile map, you just happen to be overdrawing a preview that you control with the cursor
[20:47:28] <paul424> because it contains all the mechanism to actually put something onto screen and game space ... hmmm
[20:47:36] <rpav> that's terrible
[20:47:56] <rpav> the "game space" should also be entirely separate, as should anything to do with "put all this on the screen"
[20:49:40] <rpav> one vaguely plausible sounding way to think aobut it is, if you were running a game server, it would want "game space" functionality, but wouldn't care about display or hovering or any of that .. they should not be related
[20:50:39] <rpav> (the more realistic case is "i want something that generates map data and/or deals with it in some way, like repackaging or searching etc, in a batch utility")
[20:53:53] <LordKalma> okay, opinions on this: https://lists.boost.org/boost-users/2022/02/91186.php
[20:53:57] <LordKalma> it's a very interesting question
[20:55:12] <PJBoy> 73 character wrap is bad
[20:57:19] <CarloWood> It is aimed at ppl with monitors from 1980
[20:57:28] <PJBoy> I would use std::launder there for sure
[20:57:38] <PJBoy> and boost should try to uphold that
[20:58:02] <rpav> not at all; people ought to fill to 37 columns if they care about monitors from 1980; vic-20s were pretty popular and only supported 40 column text on most displays
[20:58:03] <PJBoy> I strongly doubt switching to C++17 will cause any optimisations there
[20:58:14] <PJBoy> so I wouldn't be too worried about that
[20:58:50] <PJBoy> probably you need strict aliasing enabled for that optimisation to be applied in either language version
[20:59:09] <PJBoy> and since no one can code correctly, that's usually not the case
[20:59:20] <CarloWood> heh
[20:59:27] <CarloWood> strict aliasing is the default
[20:59:51] <CarloWood> It broke a lot of my code when it became the default - but I think that it is used everywhere now.
[21:00:05] <PJBoy> I do see a lot of -fno-strict-aliasing
[21:00:08] <PJBoy> so I can believe that
[21:00:08] <rpav> it's just there are very few strict-aliasing optimizations, but the language focuses on handling minor hypotheticals by default rather than being useful
[21:00:38] <LordKalma> so std::launder is for you to be able to access stuff that is under a type but you know it's another type?
[21:01:01] <PJBoy> it's complicated
[21:01:05] <PJBoy> but yeah in a nutshell
[21:01:08] <LordKalma> I don't get why it's different from reinterpret cast?
[21:01:22] <PJBoy> if you reinterpret_cast, you're just allowing UB
[21:01:38] <PJBoy> that's your consent to the compiler that UB is allowed
[21:01:50] <LordKalma> std::launder is "oh, this is totally legalll"
[21:02:00] <PJBoy> launder is "make this slow, but well defined"
[21:02:15] <LordKalma> slow how? via RTTI?
[21:02:18] <PJBoy> because now the compiler has to assume the pointer is aliasing another pointer of another type
[21:02:20] <Alipha> AliceMeows: PJBoy: crypto++ is OOP gone wrong. it's overly-engineered and confusing. xkoncek, use libsodium :-)
[21:02:29] <PJBoy> so it's like the opposite of the restrict keyword in C
[21:02:33] <rpav> no, it's a NOP, it's just hypothetically not getting rid of some of your code incorrectly
[21:02:47] <LordKalma> I don't understand any of this crap
[21:03:30] <xkoncek> on the other hand, openssl's documentation is very lacking and obviously not intended for users, who just want something quick
[21:03:42] <xkoncek> libsodium is indeed in Fedora repos...
[21:03:50] <rpav> hypothetically the compiler can see you accessing something that, because of The Standard(tm), can't possibly be the case (UB), and therefore make erroneous deductions, and it would be "fast" and "optimized"
[21:04:05] <rpav> instead you want it to do what you want, which is "slow" because it's not nothing
[21:04:32] <rpav> all this to support some _possible_ cases that almost never occur anyway
[21:04:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:05:04] <rpav> a better standard would have specific optimization notation, and generate correct code by default
[21:05:26] <PJBoy> so like if you had a function `int add(int* x, int* y) { *x += *y; return *y; }`, the compiler can't assume `x` and `y` are different pointers, so when you return `*y`, the compiler has to load from `y` *again* even though it just had it loaded for the addition
[21:05:34] <Simplar> Should one always use boostlib in cpp?
[21:06:01] <PJBoy> but if you had `int add(int* x, long* y) { *x += *y; return *y; }` those types are different, so the compiler assumes they don't alias, and returning `*y` doesn't cost anything extra
[21:06:26] <PJBoy> but you can add `std::launder` into the mix to make it slow again, like the int/int example
[21:06:28] <rpav> e.g. if you had something like `void f(T* a, S* b)` and the compiler compiled your function, it could be like "hey if you used no_alias i could make this faster by ..." and you could write `void f(no_alias T* a, no_alias S* b)` if that was right
[21:07:09] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 252 seconds)
[21:08:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[21:09:08] *** Joins: df00z (~df00z@2607:fb90:de56:5ea9:873:4837:db72:8a9e)
[21:09:20] <LordKalma> this language is fucking insane ffs
[21:09:22] *** Quits: theArthurDent (~user@user/theArthurDent) (Quit: ERC (IRC client for Emacs 27.1))
[21:09:56] <PJBoy> I mean generally speaking you do want the assumption that objects of different types don't alias
[21:10:14] <PJBoy> it's only when you write std::vector that you have to start being careful
[21:10:24] <rpav> no, you don't
[21:10:26] <df00z> C++ doesn't have a built in async framework that takes over like your apps main thread\loop does it?
[21:10:41] <rpav> you want to be able to poke around at the memory however you want, and if you could do it faster by enabling a constraint, then you do so
[21:10:46] <df00z> What language is insane?Â  Heheh
[21:10:48] <PJBoy> nah you don't
[21:10:50] <rpav> df00z: not builtin, but there are plenty
[21:11:06] <PJBoy> poking around memory is generally not a useful thing to do
[21:11:17] <PJBoy> generally you wanna write logic and get things done sensibly
[21:11:30] <rpav> this is the point you've lost all credibility on the issue right there
[21:11:37] <PJBoy> no u
[21:12:13] <rpav> generally this comes up again and again because it _is_ the useful things, and things like `f(T*, S*)` are extremely rare, but we have to deal with it anyway
[21:12:18] <PJBoy> there are exceptions like serialisation where everyone thinks they want to violate aliasing
[21:12:33] <rpav> anyway i'm out
[21:12:46] <PJBoy> and with implicit object creation that's gotten a bit more complicated due to being somewhat more allowed
[21:13:05] <df00z> Gotcha. I wrote a very small library for emscripten that turns WebSocket callbacks and calls equivalent C++ interface\purr virtual functions. Â  I want it to also support native Berkely sockets so I'm prolly just gonna run select() in a thread and make the user if anyone uses it deal with mutexes. Trying to keep it light weight and only use built
[21:13:05] <df00z> in stuff.
[21:13:09] <PJBoy> but that's the exception rather than the rule
[21:15:02] <PJBoy> containers are where you actually need to violate strict aliasing rules, and that's where launder comes in
[21:15:13] <xkoncek> PJBoy that aliasing would make sense if we had a seprate type for raw storage vs character strings
[21:15:35] <PJBoy> that would be pretty sweet
[21:15:50] *** Joins: immibis_ (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[21:16:28] <xkoncek> C guys: "hey, a character is exactly one byte in size, why make a separate type if we can reuse that?"
[21:16:52] <xkoncek> or maybe that was there from older languages like B?
[21:16:52] <df00z> void * or uint_8 * or are::vectors of the latter seem to represent that well imo.Â  I avoid using chars personally.
[21:16:52] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Read error: Connection reset by peer)
[21:17:27] <df00z> There's also std::byte
[21:17:36] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[21:17:54] *** rwb is now known as rb
[21:17:58] <ville> Simplar: such rigid absolutes don't survive very long when they become in contact with reality
[21:18:36] *** Quits: immibis (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[21:18:43] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[21:19:02] <ville> Simplar: if you like the things some of the boost libraries offer, then go ahead and have them as your "first choice", but be prepared with some ideas for alternatives
[21:20:45] <Alipha> xkoncek: to create a shared secret (actually, it's preferred to create two shared secrets, one for each direction, which is what this does) then use https://doc.libsodium.org/key_exchange .  If you really, really want only one shared secret, you can use the older https://doc.libsodium.org/advanced/scalar_multiplication function, but i'd ask why. Then symmetric encryption is:
[21:20:46] <Alipha> https://doc.libsodium.org/secret-key_cryptography/secretbox
[21:21:24] <Alipha> xkoncek: you may also consider asking any further crypto questions in #crypto
[21:22:59] <xkoncek> thanks
[21:25:45] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: Sayonara!)
[21:25:52] <Alipha> xkoncek: and instead of crypto_secretbox_easy, you may want to consider https://doc.libsodium.org/secret-key_cryptography/secretstream or https://doc.libsodium.org/secret-key_cryptography/encrypted-messages depending upon what you're doing with your symmetric encryption
[21:26:19] *** Joins: arch-angel (~quassel@user/arch-angel)
[21:26:51] <xkoncek> the symmetric crpyto should be fast enough because i would like to use it on each udp packet
[21:29:05] <Alipha> xkoncek: how are you ensuring there's not a man in the middle on the diffie hellman key exchange?
[21:29:10] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[21:29:50] <LordKalma> always roll your own crypto
[21:30:06] <PJBoy> especially if your alternative is crypto++
[21:30:12] *** Quits: df00z (~df00z@2607:fb90:de56:5ea9:873:4837:db72:8a9e) (Quit: Client closed)
[21:30:33] <xkoncek> this is what in general... certification authorities are used for... right?
[21:30:33] <LordKalma> isn't DHKE usually protected with another layer to protect against MitM?
[21:30:34] <Alipha> well, i'd still put crypto++ in the "roll your own crypto", since it's lower level than TLS
[21:32:13] <LordKalma> with so many options of tested secure transport protocols people still think thjey are smarter than literally the whole academia and the NSA?
[21:32:27] <Alipha> xkoncek: regarding LordKalma's comment, why not DTLS, which is used to encrypt UDP packets?
[21:32:44] <xkoncek> i haven't heard of that
[21:33:10] <PJBoy> NSA aren't that smart, they came up with DSA :p
[21:33:11] <LordKalma> TLS for UDP?
[21:33:12] <PJBoy> *DES
[21:33:25] <xkoncek> in any case, the client would be sending login info right after setting up a shared secret
[21:33:28] <PJBoy> and RC4
[21:34:15] <LordKalma> I only know crypto from watching computerphile videos featuring Dr Mike Pound
[21:34:24] <xkoncek> openssl implements DTLS
[21:34:36] <Alipha> xkoncek: "client would be sending login info right after setting up a shared secret" ... that's not in response to my question about asking how to prevent man in the middle attacks, is it?
[21:34:37] <xkoncek> i had 2 uni courses about crypto
[21:34:52] <xkoncek> no, i was providing more contexxt
[21:35:35] <xkoncek> tbh. i thought DH is there to prevent mitm, but thinking about it, it probably doesn't work
[21:35:58] <LordKalma> you don't know who you are exchanging keys with
[21:36:54] <xkoncek> yes, that is what asymmetric crypto is there for?
[21:37:14] <xkoncek> but you would still first need to obtain that key thru some safe channel
[21:37:26] <LordKalma> that's when you use a CA?
[21:37:35] <LordKalma> i'm just talking out of my ass
[21:37:40] <LordKalma> I think I've heard about that before
[21:37:46] <LordKalma> but I'm not sure now what the layers are
[21:37:54] <xkoncek> yeah, i think that is what CA is for
[21:37:56] <Alipha> xkoncek: if you can pre-share each other's public keys via some other safe channel, then yes, DH will work
[21:37:59] <LordKalma> oh look: https://www.youtube.com/watch?v=vsXMMT2CqqE
[21:38:00] <LordKalma> :D
[21:38:06] <LordKalma> "Diffie Hellman has a flaw. Dr Mike Pound explains how a man in the middle could be a big problem, unless we factor it in..."
[21:38:56] <xkoncek> or, i will literally just send all data unencrypted
[21:40:02] <LordKalma> the amount of corporate websites there are that don't have https despite the facts CERTIFICATES ARE LITERALLY FREE is astounding
[21:40:08] <Alipha> xkoncek: CAs are used on the web because you don't have pre-shared public keys of all the different websites you access. and so, instead, you have a pre-loaded list of CAs, and then the websites get the CAs to sign their public keys, and so then because their public key is signed by a CA and you trust the CA, you can trust the connection
[21:40:14] <LordKalma> whoever manages a server and doesn't haver LE and SSL redirect is a nutjob
[21:40:46] <LordKalma> I'm using IRC via ZNC and I have it signed with my LE certificate
[21:40:51] <LordKalma> it's so easy there is no reason not to do it
[21:41:20] <PJBoy> DH key exchange gets you a shared secret confidentially, so both parties get a private key that's private from each other and any MitM; so if you know who're you're talking to, you can create a secure channel between yourselves from scratch
[21:41:50] <PJBoy> and knowing who you're talking to is a separate authentication problem
[21:41:51] <LordKalma> the problem is indeed knowing who you are talking to
[21:42:14] <PJBoy> so CAs solve that problem, so do passwords
[21:42:32] <PJBoy> granted sharing a password beforehand is a lot like sharing a key beforehand
[21:42:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:40] *** ChanServ sets mode: +v npaperbot
[21:42:57] <PJBoy> and it can be hard to trust CAs
[21:43:13] <PJBoy> so secure communication's still not completely trivial
[21:43:37] <LordKalma> that's why you just implement services over APIs someone who knows what they are doing wrote
[21:44:04] <Alipha> xkoncek: alternatively, you can generate a shared secret from a password, using a PAKE, and forgo the DH. however, that means sending your username in the clear: https://en.wikipedia.org/wiki/Password-authenticated_key_agreement
[21:44:05] <PJBoy> which'll turn out to be backdoor'd
[21:44:40] <LordKalma> PJBoy, crypto is always a chicken and egg problem
[21:44:43] * Alipha wishes SSH used PAKE
[21:44:48] <LordKalma> you have to establish root of trust somewhere
[21:44:52] <PJBoy> PRISM though
[21:45:09] <PJBoy> kinda makes you not wanna trust people that know more than you
[21:45:25] <LordKalma> well, again, root of trust
[21:45:27] <LordKalma> we do it all the time
[21:45:42] <LordKalma> who knows if your TPM module doesn't ship your keys to china?
[21:46:00] <PJBoy> yeah
[21:46:02] <LordKalma> who knows if AMD Epyc's ARM core for the root-of-trust isn't completely bugged?
[21:46:10] <LordKalma> (yes, a CPU inside a CPU....)
[21:46:30] <PJBoy> there was speculation about intel having some backdoor'd security stuff going on
[21:46:40] <Alipha> xkoncek: or perhaps not bother with DH or PAKE and just create a symmetric key from your password: https://doc.libsodium.org/key_derivation
[21:47:27] <kalven> :|
[21:47:47] <MaddHatter> There have been initiatives toward verifiable hardware security (mostly motivated by supply chain compromise), but they haven't seemed to gain traction outside of niche uses
[21:48:38] <PJBoy> this thing https://en.wikipedia.org/wiki/Intel_Management_Engine
[21:48:45] <MaddHatter> you're still trusting the hardware manufacturer and their opsec, but given that trust, it allows verification of runtime security.
[21:48:52] <LordKalma> yeah, IME is a dumpster fire
[21:49:03] *** Joins: proller (~p@80.240.216.69)
[21:49:11] <LordKalma> I have an AMD processor currently, which has PSP, which is pretty much the same crap
[21:49:35] <Alipha> I mean, if xkoncek is considering forgoing encryption because it's too complicated, then hashing a password to create a symmetric key would be the simplest solution
[21:49:39] <MaddHatter> Even sparc processors have had that since mid-2000s.
[21:49:57] <xkoncek> i will employ something
[21:50:04] <ville> LordKalma: modern intels have 3 486 cores in them
[21:51:11] <MaddHatter> systems are moving away from having "a" CPU to being 8 or 10 cpus coupled together and each doing specialized tasks
[21:51:33] <ville> which is funny to think about if you happen to be old enough that you bought a 486 when it was new. they cost a lot of money. now they're there and don't even get a mention
[21:51:59] <LordKalma> https://en.wikichip.org/wiki/amd/secure_processor  "AMD-SP itself is a 32-bit ARM Cortex-A5 core"
[21:52:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:53:01] <xkoncek> the amd integrated gpus are pretty good, the even run moderate games
[21:53:26] <LordKalma> anyway, point was
[21:53:31] <LordKalma> we trust crap all the time, all day
[21:54:08] <PJBoy> my first contribution to conan <3 https://github.com/conan-io/docs/pull/2397
[21:54:26] <LordKalma> sign the CLA
[21:54:27] <MaddHatter> how LoC is a linux distribution and reasonable set of packages? Nobody personally reviews every line.
[21:55:20] <PJBoy> wtf is this CLA thing
[21:55:22] <LordKalma> PJBoy, CLA, and also, who PRs stuff without making a specific branch? bah :p
[21:55:26] <LordKalma> PJBoy, never saw it?
[21:55:28] <LordKalma> lots of repos have it
[21:55:29] <PJBoy> nah never
[21:55:34] <ville> MaddHatter:  you can think there's "30 million lines of code" between you can the pixels that light up on the screen
[21:55:40] <LordKalma> you basically have to wave copyright
[21:55:52] <PJBoy> that seems a tad unnecessary
[21:55:55] <MaddHatter> contributor license agreement. It's how they make it legally okay to use your work and transfer your copyright
[21:55:56] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[21:56:36] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[21:56:47] <LordKalma> I've signed CLAs in couple repos
[21:56:53] <LordKalma> can't remember which now haha
[21:56:59] <PJBoy> of course I'm gonna sign it, that's not an issue or anything
[21:57:03] <PJBoy> but I don't get it
[21:57:18] <PJBoy> isn't it normal to give someone a PR and that's it?
[21:57:19] <ville> MaddHatter: https://www.youtube.com/watch?v=kZRE7HIO3vk
[21:57:34] <PJBoy> doesn't the project license dictate copyright?
[21:57:38] <LordKalma> no
[21:57:46] *** Quits: AmR (~AmREiSa@156.207.156.230) (Quit: Konversation terminated!)
[21:57:54] <PJBoy> oh oh
[21:57:55] <LordKalma> remember the apache license? it literally says you have to add your identification when you contribute
[21:57:58] <MaddHatter> the project license relies on copyright in order to impose conditions on the other people who use the project
[21:58:03] <LordKalma> to exactly track copyright
[21:58:12] <PJBoy> is this one of those things where normally when you want to relicense, you have to get consent from all contributers
[21:58:22] <PJBoy> but now with the CLA they wouldn't need to do that
[21:58:25] <ville> PJBoy: they can't relicense it for example.
[21:59:22] *** Quits: magla (~gelignite@d536370e.access.ecotel.net) (Quit: Stay safe!)
[21:59:22] <LordKalma> also, a friend of mine did like 90% of the code on a project for a company he had with a dude that turned out to be a cunt and that cunt stole the whole thing
[21:59:23] <MaddHatter> yes, good CLA hygiene can allow relicensing
[21:59:30] <LordKalma> they are now in court about it
[21:59:43] <PJBoy> bah why can't it just be simple
[21:59:43] <MaddHatter> but it also makes it possible to defend the project and enforce its license
[21:59:57] <LordKalma> and yeah, any contributor is a copyright owner
[21:59:59] <LordKalma> so its fucked up
[22:00:00] <MaddHatter> the CLA *is* what makes it simple, or at least that's the goal
[22:00:04] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[22:00:14] <LordKalma> yeah
[22:00:21] <PJBoy> I don't wanna have to force contributers to sign a CLA so that the project copyright stays sane :(
[22:00:40] <LordKalma> https://www.qt.io/community/legal-contribution-agreement-qt
[22:01:00] <LordKalma> if they don't sign a CLA they are legal copyright co-owners of your code
[22:01:04] <PJBoy> also I would have considered thinking that github would have somehow made this implicit with its PR system
[22:01:23] <PJBoy> I guess copyright's just a bitch
[22:01:28] <LordKalma> nah, github couldn't have something like that under the sheets
[22:01:35] <LordKalma> github must be as legally neutral as possible
[22:01:40] <LordKalma> for their own sake
[22:01:47] <MaddHatter> Making "implicit" contracts is legally shaky. Think click-wrap EULAs that give your first-born child to Larry Ellison and such.
[22:01:51] <PJBoy> whilst simultaneously not defining a "fork"
[22:02:05] <LordKalma> hahaha yes, we had that discussion
[22:02:14] <LordKalma> maybe it was a legal strategy and not an oversight
[22:02:24] <PJBoy> who knows
[22:02:38] <LordKalma> because since they didn't define it they can adjust their legal approach if and when the time comes
[22:02:40] <PJBoy> alright well guess I'm OK with CLA
[22:02:49] <PJBoy> I'm just gobsmacked I've never seen this before
[22:03:06] <MaddHatter> I mean, copyright is a huge minefield with nonsensical corners all over the place. But at the level we're talking about, it's pretty simple: you own your work.
[22:03:57] <LordKalma> and JFrog probably doesn't want you co-owning their literal business model .p
[22:04:03] <PJBoy> having people that send in PRs not own their contribution seems super reasonable
[22:04:17] <ville> PJBoy: before you commit better check that the project doesn't have a code of conduct
[22:04:47] <PJBoy> hm, I wonder if it does now that you mention it
[22:04:58] <MaddHatter> depends on the project, but there's no reason someone couldn't contribute code that isn't their own -- as long as they have the right to it
[22:05:13] <PJBoy> doesn't seem to
[22:05:23] <LordKalma> what about CoCs?
[22:05:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:05:45] <MaddHatter> (then it becomes a legal question of how does the project document the existence of that right? Is it perpetual? transferrable?)
[22:07:03] <PJBoy> so if I contribute some code, sign this CLA, they relicense to some nazi license like GPL
[22:07:15] <PJBoy> does that mean they can claim my other uses of that code as stealing from them?
[22:07:48] <LordKalma> what an interesting point
[22:08:25] <xkoncek> LordKalma my favorite CoC https://gitlab.com/night-ripper/nwd/-/blob/master/CODE_OF_CONDUCT.md
[22:08:38] <LordKalma> but what usually is on CoCs?
[22:08:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[22:09:30] <ville> if the code of conduct doesn't contain this single line: don't be a dick"
[22:09:34] <xkoncek> just declarations of your political beliefs
[22:09:40] <LordKalma> PJBoy, maybe not, I'm reading Qt's FAQ on their CLA and it says you grant TQtCo a "copyright license"
[22:09:46] <LordKalma> not a copyright transfer
[22:09:50] <xkoncek> and how you want to enforce your view on everyone else
[22:10:35] <LordKalma> now that I think of it, this happens in academia as well
[22:10:54] <LordKalma> when i publish a paper I do sign wavers of copyright so that the publisher can indeed share my paper
[22:10:59] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:11:01] <LordKalma> but I'm still allowed to distribute my drafts
[22:11:07] <PJBoy> code of conducts are usually "don't be a dick"
[22:11:11] *** Tobbi__ is now known as Tobbi
[22:11:25] <LordKalma> in fact, they usually explicitly say that
[22:11:33] <PJBoy> for example https://www.contributor-covenant.org/version/1/4/code-of-conduct/
[22:11:39] <LordKalma> that we're still allowed to distribute the "technically not final" PDF
[22:11:53] <LordKalma> I assume the C++ standard is the same
[22:11:55] <PJBoy> well shit I said the same thing as ville
[22:11:58] <LordKalma> "drafts" are free
[22:12:06] <LordKalma> even though they are exactly the same as the standard haha :p
[22:12:15] <LordKalma> but you can0t distribute the actual standard pdf
[22:12:33] <PJBoy> yeah that sounds right
[22:12:50] <PJBoy> and then C's like "fucka youuu"
[22:12:53] <xkoncek> poor library writers *have to have* the ISO originals tho
[22:13:02] <LordKalma> yap
[22:13:04] <ville> PJBoy: usually they are something completely different
[22:13:09] <LordKalma> how much does C++ standard cost?
[22:13:18] <PJBoy> like half a grand
[22:13:34] <PJBoy> !14882
[22:13:35] <nolyc> 14882 is http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=38110&ICS1=35&ICS2=60&ICS3=
[22:13:55] <LordKalma> well, again, via the virtues of CLAs only LLVM/GNU/Microsoft legal entities have to have copied
[22:13:58] <LordKalma> *copies
[22:14:05] <LordKalma> not the individual contributors
[22:14:11] <PJBoy> new link: https://www.iso.org/standard/79358.html
[22:14:15] <ville> PJBoy: they get too specific and are easily used as weapons during political jockeying. if a project needs one its a sign people spend way too much on those things rather than the actual code
[22:14:38] <LordKalma> about 200â‚¬ ish after VAT
[22:14:41] <LordKalma> not bad actually
[22:14:51] <PJBoy> I have no idea what a CHF is
[22:14:57] <LordKalma> swiss frank
[22:15:05] <LordKalma> *franc
[22:15:07] <PJBoy> oh
[22:15:12] <ville> cheese franc
[22:15:28] <PJBoy> Â£160, yeah much less than I remember
[22:15:38] <kalven> you can shop around.. https://webstore.ansi.org/standards/iso/isoiecdis148822020
[22:15:41] <ville> it depends where you buy it
[22:15:49] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[22:16:17] *** Joins: eck (~root@user/eck)
[22:16:19] <LordKalma> PJBoy, +VAT if not a company
[22:16:27] <PJBoy> oh
[22:16:34] <PJBoy> man I never think to add VAT
[22:16:54] <PJBoy> !the standard
[22:16:55] <nolyc> http://plasmahh.projectiwear.org/the_standard.jpg
[22:16:59] <kalven> I think I got the c++98 pdf from ansi for something like $30 back in the day
[22:17:06] <PJBoy> imagine that stack of paper but 2.5x as big
[22:17:30] <LordKalma> thanks to brexit I had to pay VAT on a fucking gift from a friend
[22:17:36] <LordKalma> so I don't forget about VAT
[22:19:30] <xkoncek> Alipha isn't the point of any sort of key exchange to compute a shared key for *symmetric* encryption which is much faster than asymetric one?
[22:20:43] <PJBoy> nah you start from nothing and generate asymmetric crypto
[22:20:59] <PJBoy> and then you can opt to convert from asymmetric to symmetric
[22:21:51] <PJBoy> if you had asymmetric crypto set up already, you wouldn't even talk about key exchange
[22:22:06] <PJBoy> you'd just be like "here's the symmetric key"
[22:22:12] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[22:22:31] <xkoncek> aha
[22:22:36] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 240 seconds)
[22:23:05] <MaddHatter> back in the 80s, people did asymmetric because it was faster, but is the difference really enough to matter these days?
[22:23:13] <MaddHatter> er did symmetric because it was faster
[22:23:21] <PJBoy> symmetric is still much much faster
[22:23:33] <PJBoy> especially with AES instructions built into hardware
[22:23:56] <xkoncek> i think if you do thousands of messages per second you will start to notice
[22:23:59] <PJBoy> there's no quick way to do 1024 RSA with all the hardening adjustments
[22:24:11] <PJBoy> or a quick way to do the elliptic curve stuff
[22:25:36] <PJBoy> *1024-bit
[22:29:47] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:30:13] *** Joins: x_kuru (~xkuru@user/xkuru)
[22:33:30] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[22:35:45] *** Quits: Simplar (~quassel@188.163.93.241) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:35:50] *** Joins: proller (~p@2a02:6b8:b081:16::1:24)
[22:38:24] <rpav> could really use ||= and &&=
[22:38:45] <rpav> i guess one could `class Bool` ;)
[22:44:00] *** Quits: andreasbuhr (~quassel@p549dba52.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:45:08] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:46:26] *** Joins: angelacrust (~angelacru@182.68.208.211)
[22:46:46] <angelacrust> how do you upgrade the g++ compiler on wsl - ubuntu?
[22:47:32] <rpav> wait until ubuntu has another out-of-date upgrade or maybe find a PPA that's slightly less out of date
[22:47:52] <xkoncek> can you run podman on wsl?
[22:48:26] <rpav> there is apparently ArchWSL but i'm not sure how good it is
[22:48:34] <xkoncek> i don't think so, i think these docker technologies need a linux kernel to function
[22:49:36] <rpav> doesn't wsl use an actual kernel?
[22:49:40] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:d5ab:7fde:910:2e6b)
[22:52:01] <angelacrust> oh ok
[22:53:39] <MaddHatter> you manage wsl exactly the same as you would a VM or metal
[22:53:59] *** Quits: angelacrust (~angelacru@182.68.208.211) (Quit: Client closed)
[22:54:18] *** Joins: angelacrust (~angelacru@182.68.208.211)
[22:54:21] <MaddHatter> (assuming wsl v2. It's the same for v1 just more potential for errors.)
[22:55:06] <MaddHatter> wslv1 is a container, basically. wslv2 is a VM.
[22:55:34] *** Joins: Burgundy (~NA@86.121.143.206)
[22:57:52] <xkoncek> << 0xdeadbeef
[22:57:52] <geordi> 3735928559
[22:58:07] <rpav> wslv3 will replace ntoskrnl.exe with vmlinuz and run windows in the VM
[22:58:57] <MaddHatter> so what for v4 then?
[22:59:03] <xkoncek> wine
[22:59:12] <rpav> no more windows necessary
[22:59:14] *** Joins: seninha (~seninha@user/seninha)
[22:59:15] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[22:59:37] <rpav> basically we're already 2 versions ahead of WSL now
[23:04:32] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[23:05:20] <kalven> vinniefalco trying his best to stir up shit on r/cpp
[23:05:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:10:04] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[23:11:55] <xkoncek> 0xB16B00B5 ("big boobs") was required by Microsoft's Hyper-V hypervisor to be used by Linux guests as their "guest signature".
[23:12:01] <ville> the whole network thing has become bit of a farce
[23:12:52] <rpav> which whole network thing?
[23:13:06] <ville> network ts
[23:13:12] <xkoncek> no... not on asio
[23:13:19] <rpav> oh
[23:16:30] <PJBoy> r/cpp drama?
[23:16:32] * PJBoy rubs hands
[23:22:19] <xkoncek> i do not enjoy reddit nor twitter
[23:22:25] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[23:23:01] <rpav> so avoid them
[23:25:29] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[23:26:45] <xkoncek> that's what i do, unless i hear about them on IRC
[23:33:15] <rpav> well, change that latter conditional and you're sorted ;)
[23:34:14] <rpav> if(i_hear_about_it) cout << "ha ha";
[23:39:51] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[23:42:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:48:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:56:25] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[23:57:27] *** Joins: magla (~gelignite@d536370e.access.ecotel.net)
[23:58:13] *** Joins: teepee (~teepee@openscad/teepee)
