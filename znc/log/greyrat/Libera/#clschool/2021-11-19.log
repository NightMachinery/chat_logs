[00:10:59] *** Joins: dra_ (~dra@2a04:4540:6409:1500:61c7:e8f2:fc82:e4f6)
[00:29:17] *** Quits: dra_ (~dra@2a04:4540:6409:1500:61c7:e8f2:fc82:e4f6) (Quit: Leaving)
[00:29:26] *** Joins: dra (~dra@2a04:4540:6409:1500:61c7:e8f2:fc82:e4f6)
[00:52:52] *** Quits: dra (~dra@2a04:4540:6409:1500:61c7:e8f2:fc82:e4f6) (Quit: Leaving)
[01:00:12] *** Quits: st_iron (uid370243@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:21:25] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:27:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:00:24] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 268 seconds)
[02:02:03] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[02:03:35] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 250 seconds)
[02:07:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:26:57] *** Joins: Oladon (~olad@98.43.81.226)
[02:38:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:27:42] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:33:17] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 265 seconds)
[04:46:01] *** Joins: random-nick (~random-ni@87.116.180.220)
[04:55:50] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 256 seconds)
[05:31:11] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:31:44] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 268 seconds)
[06:39:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:44:13] <lisp123> Is there a way to write (format stream "~s" lisp-form) such that any symbols are not package qualified (e.g. it returns "DEFSYSTEM" and not "SOME-CURRENT-PACKAGE:DEFSYSTEM")
[06:44:14] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[06:44:14] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[06:44:36] <lisp123> Noting that I need (I think) to use ~s since I want strings to be quoted
[06:50:58] <lisp123> Got it! :) I'll leave this question open as trivia, but can give you guys the answer later on
[06:52:53] *** Parts: light (~light@user/light) ()
[06:57:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:08:26] *** Quits: sts-q (~sts-q@212.53.219.158) (Ping timeout: 265 seconds)
[07:23:57] *** Joins: sts-q (~sts-q@91.200.108.171)
[07:28:36] *** Joins: beach (~user@2a01:cb19:150:3400:19c5:3107:1bdf:7573)
[07:28:36] *** ChanServ sets mode: +o beach
[07:28:52] *** beach sets mode: -o beach
[08:18:47] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[08:19:59] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[08:20:12] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[08:24:20] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Client Quit)
[08:28:11] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[08:33:13] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 268 seconds)
[08:34:30] *** Joins: Oladon (~olad@98.43.81.226)
[08:36:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[08:57:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:50:30] *** Quits: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 256 seconds)
[10:29:53] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[10:35:11] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 264 seconds)
[10:45:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[10:51:22] *** Joins: st_iron (uid370243@uxbridge.irccloud.com)
[11:49:59] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:00:52] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:07:46] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:26:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[12:31:38] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[12:36:32] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 256 seconds)
[13:05:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:26:51] <lisp123> Today I learnt one can overload generic function parameters with something like (defgeneric foo (object &key &allow-other-keys) / (defmethod foo ((object class-b) &key (x 1) (y 2) &allow-other-keys)
[13:26:55] <lisp123> Is that bad style?
[13:53:52] *** Joins: kingofcsu (~kingofcsu@114.249.135.33)
[14:33:20] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[14:38:22] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 256 seconds)
[14:40:57] <lisp123> For those interested, the conclusion I got was to use &allow-other-keys for 'global' generics. E.g. (defgeneric delete-object), which I will keep in its own package 'Global' and write methods for with (defmethod global:delete-object (...) ...). But for most generic functions which relate to a class or its subclasses, I will likely not use &allow-other-keys
[14:42:01] <lisp123> Unless its absolutely necessary, but I think at such points its worth revisiting the code overall
[14:43:16] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[14:59:48] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:15:32] *** Quits: kingofcsu (~kingofcsu@114.249.135.33) (Ping timeout: 240 seconds)
[15:40:54] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[15:43:53] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 250 seconds)
[16:01:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:35:04] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[16:39:42] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 260 seconds)
[17:09:28] *** Joins: kingofcsu (~kingofcsu@114.249.135.33)
[17:12:05] <beach> That's normal style.
[17:22:47] <lisp123> Thanks, that's good to hear
[17:34:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:48:46] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:51:07] *** Joins: defb (~defb@user/defb)
[18:14:59] *** Quits: kingofcsu (~kingofcsu@114.249.135.33) (Quit: Leaving)
[18:20:44] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[18:26:07] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:36:47] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[18:41:28] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 256 seconds)
[19:19:13] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[19:28:33] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[19:32:10] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[19:38:14] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[19:51:26] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 260 seconds)
[19:51:39] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[19:52:56] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[20:00:48] *** Joins: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:01:24] *** Joins: Oladon (~olad@98.43.81.226)
[20:21:09] *** Quits: st_iron (uid370243@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:36:57] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[21:00:27] *** Joins: treflip (~user@95.79.32.99)
[21:05:02] *** Quits: Jing (~hedgehog@115.207.47.111) (Read error: Connection reset by peer)
[21:06:55] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[21:29:11] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:08:01] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:11:12] <kagevf> where did you learn that lisp123 ?
[22:13:08] <lisp123> kagevf: By chance on this SO question: https://stackoverflow.com/a/10167358/10938537
[22:14:08] <lisp123> I just finished version 1 of an article I was trying to write for the last week or so. For those interested: https://lisp.substack.com/p/mixins-in-common-lisp
[22:14:26] <kagevf> oh! you're off of medium now? :) lisp123 
[22:14:31] <lisp123> Gone!
[22:14:46] <kagevf> lisp123: glad to hear that :)
[22:15:28] <kagevf> lisp123: thank you ... I'll read both of your links :)
[22:15:32] <lisp123> 90% of the articles there are discussing how to monetize from Medium and basically click bait people into viewing their posts. Plus I keep getting tricked into reading "exclusive" updates on new Apple hardware which is just someone making up stories
[22:15:50] <lisp123> kagevf: Thanks for reading, and feedback welcome :)
[22:16:01] <kagevf> yeah ... it's not famous for a good signal/noise ratio
[22:16:40] <kagevf> are you going to migrate your articles?
[22:16:53] <lisp123> I will cross post, Medium is good for SEO
[22:17:22] <lisp123> I have the domain "lisp.wiki", my dream is to build a proper wiki, similar to CLiki
[22:18:29] <kagevf> oh, cool ... subscribed to your newsletter btw
[22:18:53] <kagevf> what do you plan to put in your wiki?
[22:18:56] <lisp123> Great, thanks <3. Always 100% free, but its useful to get to know to fellow lispers
[22:19:50] <lisp123> Probably all of my notes on Lisp and then migrate stuff like the Google Lisp Style Guide, Kent Pitman / Norvig Style Guide, hall of fame posts from c.l.l
[22:20:26] <lisp123> It won't be a very serious endeavour, but I want to build some software that is similar to a wiki, so this could be some useful experience along the way
[22:20:48] <kagevf> nice 
[22:21:19] <lisp123> (which is why I am not just adding to CLiki, its selfish in that I need to build my own custom wiki software for my other work, so this is just something to motivate me in that direction)
[22:21:28] <kagevf> even if it's just organizing your own personal info, that could actually be a pretty good project
[22:21:51] <lisp123> I think so. There's a lack of good blogging software imho
[22:22:02] <lisp123> What have you been up to lately?
[22:22:28] <kagevf> I actually just got a copy of SICP so will start to go through it soon
[22:22:40] <kagevf> I'll try to do it as much as possible in CL
[22:22:44] <lisp123> Awesome, that's such a good book!
[22:22:50] <kagevf> so I hear :) 
[22:23:10] <lisp123> You should be able to get through it pretty quickly because of your CL background
[22:23:51] <lisp123> https://www.amazon.com/Foundations-Combinatorics-Applications-Dover-Mathematics/dp/0486446034 is on my reading list currently, so far so good
[22:24:33] <kagevf> oh wow a new book that's not super expensive 
[22:25:07] <kagevf> ... is there any CL in it??
[22:25:10] <lisp123> Yeah, dover books are quite well priced (they are mostly maths / science focused). I saw this one on a bookshelf
[22:25:25] <lisp123> No, but lots of stuff on lists, trees, graphs, etc.
[22:25:36] <lisp123> And recursion
[22:26:06] <lisp123> (my plan is to implement in CL these ideas as an exercise)
[22:27:04] <kagevf> I added it to my WL so at least I have it kicking around ... there's no way I'd be reading it any time soon (reading list too large already)
[22:27:15] <lisp123> I know how you feel :)
[22:27:36] <kagevf> oh, and I was reading On Lisp, but made it to ... Chapter 19? the one on queries, and decided I need to pause that one
[22:28:23] <lisp123> Chapter 19 - that's good (and most of the book). Definitely a lot of useful stuff in On Lisp
[22:28:41] <lisp123> Chapter 7 (I think) on Macros was like a brick wall for me, but I finally got through it
[22:29:21] <kagevf> read the chapter on desctructuring which I thought would be pretty straight-forward because it's a familiar concept, but really struggled through it ... following chapters I'm worried would be the same ... so want to go through SICP and PAIP first before resuming
[22:30:48] <kagevf> one of the key take-aways I've gotten from On Lisp is how useful it is to return lambdas, and actually realizing that lambdas are being returned ... that through me off but once that clicked the code became a lot clearer
[22:31:00] <kagevf> *threw me off
[22:31:59] <pjb> kagevf: "lambdas" here are actually closures in general, which are actually OO objects.  You're saying: how useful it's to return objects.  Yes, objects are useful (because they bring along their methods).
[22:33:47] <kagevf> pjb: yeah, I've been thinking lambdas/closures and objects are different sides of the same coin
[22:35:00] <kagevf> but I think what I missing was that functions (or "lambdas", right?) were being returned a lot in the code examples in On Lisp 
[22:35:12] <kagevf> * what I was missing
[22:35:13] <lisp123> kagevf: Yes I found that part hard to read too (destructuring-bind)
[22:35:56] <kagevf> lisp123: yeah, that was the last full chapter I read
[22:36:13] <lisp123> Lambda functions are different to closures right?
[22:36:32] <pjb> Nope. 
[22:36:33] <lisp123> (in CL they may be the same, but I think the concept is slightly different? I'm not that clear tbh)
[22:36:35] <pjb> Exactly the same.
[22:36:55] <lisp123> I see
[22:37:14] <kagevf> so ... could you say that in CL, "closures are implemented as lambdas"?
[22:37:16] <pjb> in CL, the only operator that creates closures is CL:LAMBDA, which is also the only operator that creates function (used in defun, defmacro, defmethod, defgeneric, flet, labels.
[22:37:59] <pjb> s/cl:lambda/cl:function/ sorry.
[22:38:37] <lisp123> pjb: "only operator that creates closures is CL:LAMBDA" --> Thanks, very useful to know
[22:39:09] <pjb> More precisely, (CL:FUNCTION (CL:LAMBDA … …)) creates a closure.   (cl:function foo) returns the closure that is named foo.  Usually it's a closure in the NIL environment (ie. the global environment), with no enclosed variables.  But you can also use defun to create closure: eg. (let ((x 42)) (defun f (y) (+ x y)))
[22:39:20] <pjb> lisp123: sorry, it's CL:FUNCTION
[22:39:35] <pjb> lisp123: cl:lambda as an operator is just a macro that expands to  (CL:FUNCTION (CL:LAMBDA … …)).
[22:39:58] <lisp123> Got it, thanks! Yes, I recall that part on the dual role of lambda
[22:40:37] <lisp123> Took me a while to get my head around..brings back memories
[22:44:57] <kagevf> I thought FUNCTION was just the "expanded" form of #' ...
[22:45:05] <kagevf> didn't realize it could create things
[22:46:16] <pjb> for example: (mapcar 'funcall (loop for i below 3 collect (let ((i i)) (function (lambda () i))))) #| --> (0 1 2) |# 
[22:46:49] <pjb> the function operator in the loop body creates each time a different function, that returns a different binding.
[22:48:43] <lisp123> interesting
[22:48:44] <kagevf> pjb: ... what if (FUNCTION) was left out of that?
[22:48:55] <kagevf> let me try it ...
[22:49:32] <kagevf> well ... it prints the same
[22:51:46] <kagevf> I tried doing just the loop part too (removed it from the mapcar) and printed results look similar
[22:52:05] <pjb> kagevf: it would still works, since lambda is a macro that expands to function: (prin1 (macroexpand-1 '(lambda () i))) #| #'(lambda nil i) --> #'(lambda nil i) |# 
[22:52:36] <pjb> kagevf: but they're different closures: check the IDs. (loop for i below 3 collect (let ((i i)) (function (lambda () i)))) #| --> (#<ccl:compiled-lexical-closure #x302003F0D6EF> #<ccl:compiled-lexical-closure #x302003F0D69F> #<ccl:compiled-lexical-closure #x302003F0D64F>) |# 
[22:53:21] <pjb> kagevf: obviously, the function (the code) is the same each time: it just returns the value of a variable i in the enclosure.  But the closure is different, with a different variable i.
[22:53:48] <kagevf> pjb: right, I noticed each one was a different closure ... and that's true whether function is used or not ... right? 
[22:54:21] <pjb> the point is that function is always used, to create a new closure, since there's no other operator that creates new closures, but cl:function.
[22:54:33] <kagevf> and that's because (lambda) includes function in its expansion?
[22:54:39] <pjb> Yes.
[22:54:50] <pjb> As do defun, defmacro, defmethod, defgeneric, etc,
[22:55:18] <kagevf> ohhhh right bc (lambda) is really #'(lambda)???
[22:55:26] <pjb> yes.
[22:55:35] <kagevf> ah-ha! ok, that makes sense :) 
[22:56:32] <kagevf> hmmm ... that's definitely a nuance I would have never picked up
[22:57:10] <kagevf> I would have thought "ok, #'(lambda) returns functions/closures" and just would have glossed over the #'==(function) part of it
[23:01:34] <kagevf> when I macro-expand defun and defmacro (in sbcl) I don't see any sign of function or lambda ... just implementation-specific looking things
[23:02:49] <kagevf> let me try it on my phone (ecl) ...
[23:03:06] <lisp123> kagevf: You have lisp on your phone?!
[23:03:11] <lisp123> I need to do that
[23:03:27] <kagevf> heck yeah! :) 
[23:03:43] <kagevf> "CL REPL" is the name of the app ... android and ios
[23:03:46] <kagevf> it's ECL
[23:03:48] <lisp123> thank you!
[23:03:55] <kagevf> and it can run swank so you can connect to it from emacs
[23:04:06] <kagevf> which is what I'm going to do right now ...
[23:04:29] <lisp123> that's awesome
[23:06:17] <lisp123> This app is pretty cool
[23:06:22] <lisp123> Good UI
[23:06:56] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[23:09:06] <kagevf> yeah, it's really nice ... check out some of the examples bundled with it
[23:09:54] <kagevf> unfortunately, though, my phone is new and for whatever reason I can't slime-connect to it :( 
[23:10:11] <kagevf> it worked on all my other devices so far, though ... I'll have to figure out what's wrong later 
[23:11:47] <lisp123> Yep, will check out the examples too
[23:13:12] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:14:17] <kagevf> I have another lisp I can look at on my laptop ... 
[23:15:55] <kagevf> tried macroexpanding defun in clozurecl (is that ccl?) and got similar ... impl-specific plumbing 
[23:16:17] <lisp123> let me try
[23:16:25] <lisp123> What form did you run?
[23:16:47] <kagevf> I just wrote (defun mine (a) a) and then hit C-RETURN on the opening (
[23:16:52] <kagevf> in slime
[23:16:55] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Client Quit)
[23:18:04] <kagevf> sorry ... should have said "C-c RETURN"
[23:19:31] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:20:01] <lisp123> hmmm will let someone more knowledge reply
[23:20:20] <lisp123> I think there may be some functions in between that are stopping you from seeing the final bit
[23:20:28] <lisp123> for example there is this in SBCL:
[23:20:37] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Client Quit)
[23:21:42] <lisp123> https://pastebin.com/PiLyWmF8
[23:23:28] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:25:36] <kagevf> weird ... I don't see anything like that :(
[23:26:23] <lisp123> I did find-definition on  sb-impl::%defun
[23:26:31] <lisp123> M-. if you are using Slime
[23:27:16] <kagevf> ahhh ok
[23:28:30] <kagevf> hmmm ... it just dumps me into "defboot.lisp" and empty file in a directory that doesn't exist yet
[23:28:35] <lisp123> And you would have to keep going down the chain I imagine until you hit a FUNCTION (but I'm not sure)
[23:28:42] <kagevf> I'm probably missing some sbcl source code or something
[23:28:59] <lisp123> Yeah I need to look into that, it doesn't work always for me too
[23:29:31] <lisp123> Anyways, time for bed. nights :)
[23:30:33] <kagevf> (defmacro defmacro  (name arglist &body body &environment env) .... that's interesting (clozure cl)
[23:30:43] <kagevf> lisp123: good night!
