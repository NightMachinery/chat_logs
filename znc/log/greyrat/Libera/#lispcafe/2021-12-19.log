[00:00:15] <ck_> use a hot-water bottle or something for example, put it on your stomach lying down. If you feel no effect, skip the thing
[00:01:44] <ck_> could be that I'm just undernourished and pressing down on the stomach fakes satiation ¯\_( ツ )_/¯
[00:01:54] *** Joins: notzmv (~zmv@user/notzmv)
[00:12:24] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Remote host closed the connection)
[00:13:50] <shka> hayley: btw, have you ever read "The Californian Ideology" essay?
[00:13:57] <hayley> Nope.
[00:14:27] <shka> hayley: http://www.comune.torino.it/gioart/big/bigguest/riflessioni/californian_engl.pdf
[00:14:45] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[00:34:32] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[00:34:35] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[01:05:49] <hayley> Well, it did not take very long to convert from TeX to org-mode, and then rewrite enough that the text works as a standalone article.
[01:13:29] <sm2n> funny how almost everyone on #malleable-systems has [m] at the end of their nick
[01:14:02] <sm2n> ah, they don't have a native bridge
[01:15:48] <hayley> When I used no-defun-allowed as a nick, it was too long for a [m] suffix, so I never had to fix it. 
[01:21:02] <gilberth> My two cents about blankets. I don't know if this is really about some physiologic effect or rather some psychological effect. I for one just need two (sic!) heavy blankets or duvets filled with down to sleep well. When I am at a hotel I ask for a second winter blanket because otherwise I have a hard time to fall asleep.
[01:22:48] <MichaelRaskin> Given weighted blankets are a thing, I wouldn't be surprised if you indeed need the weight of two blankets to sleep well
[01:24:26] <gilberth> Yes, this is why I mentioned that. And what are those weighted blankets anyway? Filled with something extra heavy?
[01:24:36] <shka> gilberth: yes
[01:24:43] <shka> exactly
[01:24:51] <shka> so the blanket weights few kilos
[01:26:09] <shka> it has some heavy beads in it apparently 
[01:26:16] <shka> for maximum CRUSH
[01:26:36] <gilberth> I just checked the label at my blankets. They both say "1.5kg". So 3kg total.
[01:27:26] <gilberth> Would that qualify as weighteed?
[01:28:34] <shka> they are selling blankets weighting almost 7kg
[01:28:53] <gilberth> Wow! That's heavy.
[01:29:15] <shka> yeah
[01:29:20] <shka> for a blanket at least
[01:29:30] <shka> anyway, time to sleep, see you all tomorrow 
[01:29:51] <gilberth> Take care, sleep tight!
[01:30:20] <shka> oh, one more thing
[01:30:45] <shka> i found myself enjoying watching coldfusion videos about the business 
[01:30:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:30:59] <shka> they are covering a lot of different scams
[01:31:45] <shka> https://www.youtube.com/watch?v=64xcgvEJ3Ys
[01:31:45] -ixelp- 'Fake Bitcoin' - How this Woman Scammed the World, then Vanished - YouTube
[01:32:01] <shka> i am not even mad, this is amazing :D
[01:33:14] <shka> cryptocurrency that even didn't had a working blockchain
[01:35:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[01:38:35] <moon-child> I don't know about weighted blankets, but I generally sleep on my stomach, which does presumably put pressure on my abdomen
[01:38:57] <moon-child> terrible for my neck, I presume ... but I have only rarely been able to sleep any other way
[01:40:11] <hayley> shka: Here ya go https://applied-langua.ge/posts/lisp-curse-redemption-arc.html
[01:40:52] * hayley wonders where ixelp is to announce her excellent title.
[01:41:06] <gilberth> This is interesting. My wife is like that; she needs to lie on her stomach to get asleep. I on the other hand feel super uncomfortable and somehow unsecure on my stomach. I always wondered how she could sleep that way.
[01:44:00] <gilberth> hayley: wget says the certificate has run out. And your document is an XML document, not a HTML document. Let's see ...
[01:44:57] <hayley> Firefox says it expires 9 March 2022, and I blame org-mode for exporting XHTML when I asked for HTML5.
[01:45:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[01:46:10] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[01:46:34] <gilberth> ixelp: https://applied-langua.ge/posts/lisp-curse-redemption-arc.html
[01:46:35] -ixelp- The Lisp "Curse" Redemption Arc, or How I Learned To Stop Worrying And Love The CONS
[01:46:42] <gilberth> Works.
[01:47:52] <gilberth> hayley: Common problem. My system has not seen updates for ages. I would need to figure out how to update just the root or what ever they are called certificates.
[01:54:16] <hayley> OTOH, as I hint at the end, an easier counter-argument is just to ask someone to visit #sicl, #sbcl or #clim or similar, because they're going just fine.
[01:54:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:59:57] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[02:00:45] <Aurora_v_kosmose> On debian you can put cert files in /etc/ca-certificates/update.d/ and run update-ca-certificates
[02:01:48] <Aurora_v_kosmose> The syntax is mentioned in the manpage.
[02:03:25] <gilberth> Thanks! You saved me from hours of asking Google.
[02:08:23] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[02:18:11] <Aurora_v_kosmose> You'll probably still need to find some example, but having actionable keywords is helpful.
[02:21:17] <Aurora_v_kosmose> On a user basis rather than system-wide, you can take example from this: https://guix.gnu.org/manual/en/html_node/X_002e509-Certificates.html
[02:21:18] -ixelp- X.509 Certificates (GNU Guix Reference Manual)
[02:40:08] <Aurora_v_kosmose> I'm somewhat annoyed that Debian's hyperspec package just downloads the hyperspec in plaintext without any checksum verification.
[02:44:45] <moon-child> gilberth: hm, I thought you were using macos?
[02:45:00] <moon-child> (or, if you have switched from macos to linux, why not run a recent version?)
[02:45:50] <gilberth> moon-child: Macos is not stable enough to run any kind of server, so ixelp lives on the headless Linux machine of mine sitting in the basement of my evil house.
[02:47:48] <gilberth> And actually a lot of stuff I run or hack is on that Linux machine.
[02:59:00] <moon-child> ah.  Then, again: why not a recent version?
[03:00:01] <gilberth> moon-child: Because otherwise my machine is fine, I see no point in updating.
[03:05:04] <edgar-rft> if you're sick of dating, try updating
[03:12:57] * gilberth won't mind some dating.
[03:18:17] <moon-child> hayley: https://files.catbox.moe/bipg79.pdf
[03:26:58] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Quit: Time to sleep)
[03:32:39] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[03:35:49] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[03:35:58] <hayley> moon-child: I had given this to gilberth before, yes.
[03:36:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:38:07] * hayley goes to post to r/lisp
[03:38:59] * moon-child goes to /r/lisp, sees 'Best Lisp dialect to write a D-Bus service', leaves /r/lisp
[03:40:16] * semz still has no idea what D-Bus is even supposed to do
[03:41:50] <Aurora_v_kosmose> semz: It's basically the standard IPC method for modern Linux stuff (yes, specifically, I think it doesn't, or at least didn't, work on OpenBSD).
[03:41:58] <pjb> semz: it's an IPC between desktop applications.
[03:42:02] <semz> But what are they communicating in practice?
[03:42:13] <pjb> semz: copy-and-paste, notifications, stuff.
[03:42:19] <pl> it's portable, it's just shitty
[03:42:20] <pjb> drag-and-drop.
[03:42:30] <Aurora_v_kosmose> semz: Anything. Pulseaudio control from within an application, for instance, works with it.
[03:42:45] * hayley thinks she should remove some redundant sentences, actually.
[03:43:13] * edgar-rft knows D-Zug (german accronym for corrior train)
[03:43:18] <Aurora_v_kosmose> You can define whatever endpoints you want for your programs. Most of the FreeDesktop stuff integrates with D-Bus
[03:43:26] <edgar-rft> *corridor train
[03:43:46] <Aurora_v_kosmose> Oh, another very important one. Accessibility.
[03:43:50] <pl> semz: D-Bus provides you a way to search for, let's say, "org.example.Service" interface, find that it's available (or start an app that provides it), then connect to it an do operations
[03:43:53] <moon-child> pulseaudio ... freedesktop ... it just gets worse and worse
[03:44:12] <pl> pulseaudio's useful replacement also uses D-Bus
[03:44:13] <Aurora_v_kosmose> AT-STI runs over D-Bus
[03:44:22] <moon-child> afaik on linux the 'correct' way of getting real-time scheduling is to send some message over dbus
[03:44:35] <pl> moon-child: for unprivileged processes
[03:44:39] <moon-child> sure, yes
[03:44:49] <Aurora_v_kosmose> Ah damnit, that's not the right name...
[03:45:22] <semz> I see.
[03:45:46] <Aurora_v_kosmose> https://www.freedesktop.org/wiki/Accessibility/AT-SPI2/
[03:45:47] -ixelp- AT-SPI2
[03:46:03] <pl> the worst side of D-Bus is the convoluted naming scheme it has, and implementation quality
[03:46:13] <Aurora_v_kosmose> GTK & others can be enabled to communicate layout info & such on accessibility APIs so they can be usable from a braille display.
[03:46:28] <Aurora_v_kosmose> Otherwise you're pretty much doing everything on emacspeak.
[03:46:32] <Aurora_v_kosmose> *stuck doing
[03:49:19] <hayley> https://www.youtube.com/watch?v=8RbXIMZmVv8
[03:49:20] -ixelp- Pink Floyd - Set The Controls For The Heart Of The Sun - YouTube
[03:50:17] <semz> I guess I didn't miss all that much by purging it then, but the accessibility stuff explains a lot.
[03:52:01] <hayley> https://freshcodeit.com/freshcode-post/lisp-programming-key-features "Common Lisp (CLisp) is actually a product of the GNU foundation and was developed as a standardized and improved successor of Maclisp"
[03:52:01] -ixelp- LISP and Clojure: What Is The Link?
[03:52:06] <hayley> TIL I was quoted by a bunch of morons
[03:52:43] <Aurora_v_kosmose> Indeed. "Clisp (an implementation of Common Lisp)" is quite different from the above quote.
[03:53:17] <moon-child> 'The first language outside the von Neumann model'
[03:53:21] <moon-child> 'Pioneer of functional programming'
[03:53:32] <moon-child> 'No need for variables'
[03:53:47] <semz> This is advanced blogspam
[03:54:02] * hayley wonders when the language isn't von Neumann. I mean, technically, LISP 1 was just a funny looking eval[] function.
[03:54:16] <moon-child> 'he needed a language that [...] Syntax based on the lambda calculus; S-expression'
[03:54:53] <hayley> Oh, well, I looked to see if people bought their shit, and indeed that's r/clojure for you.
[03:55:01] <Aurora_v_kosmose> kek
[03:55:14] <Aurora_v_kosmose> I gave up on Clojure when I realized its licensing problem and their unwillingness to fix it.
[03:55:27] <hayley> FWIW it's also not as if I just wrote that all because of one dumb blog post; I just needed an excuse to make a HTML version of part of a book I wrote.
[03:55:38] <moon-child> 'Ideas first introduced in Lisp include [...] incremental compilation'
[03:55:48] <Aurora_v_kosmose> It's meant to be a corpo-friendly language, and that's why GPL incompatibility, to them, is a feature, not a bug.
[03:56:06] <moon-child> 'Today [lisp; sorry, "LISP"] is the second-oldest programming language (after Fortran that is older by one year)'  pls
[03:56:12] <hayley> IIRC John McCarthy did describe compiling in-core first, actually.
[03:56:49] <hayley> https://en.wikipedia.org/wiki/Just-in-time_compilation#History "The earliest published JIT compiler is generally attributed to work on LISP by John McCarthy in 1960. In his seminal paper Recursive functions of symbolic expressions and their computation by machine, Part I, he mentions functions that are translated during runtime, thereby sparing the need to save the compiler output to punch cards (although this would be more accurately known as a
[03:56:49] <hayley> "Compile and go system")."
[03:57:20] <moon-child> ah, til
[03:58:05] <moon-child> (though, I guess it depends how you define 'incremental')
[03:58:52] <hayley> Yesterday I asked what Henry Baker's twitter username was, cause someone with a private account keeps liking my tweets on stupid Lisp implementation ideas (don't worry, I work them out in #lispcafe first), and a whole three people from Symbolics follow me.
[03:59:01] <hayley> No answer; but I did get a like from a private account again.
[03:59:04] <moon-child> nice
[03:59:06] <moon-child> 'Let's see what is new [...] Clojure borrowed OOP ideas from Common Lisp'
[03:59:39] <hayley> Don't tell Gilad Bracha that multiple dispatch is object oriented!
[04:05:35] <gilberth> What is commonly called OOP should rather be called subject oriented programming.
[04:06:26] * hayley grabs popcorn box
[04:06:54] <gilberth> I mean, a natural language sentence is composed of a subject doing something (verb) object_s_.
[04:07:48] <gilberth> An so called OOP language based on single dispatch allows you to define what a certain subject/verb combination is without regard to what the objects are.
[04:08:05] <hayley> I remember something from that Usenet thread where Baker just flat out bakes Stroustrup and Ousterhout among others, and there was something about Lisp and SVO/VO/etc...
[04:08:44] <gilberth> Yep.
[04:10:09] <hayley> Google Groups search seems to fail me looking for '"SVO" "VO"' but look in https://groups.google.com/g/comp.lang.functional/c/xLNt2BU34SA/
[04:10:10] -ixelp- Ousterhout and Tcl lost the plot with latest paper
[04:10:29] *** Quits: v3ga (~v3ga@cpe-98-25-21-91.sc.res.rr.com) (Remote host closed the connection)
[04:11:45] <hayley> In another thread: "Hard real-time GC is quite costly." "Costly compared to what?  If you _have_ to do dynamic memory allocation, and the cost of total system failure is non-zero, then hard real-time GC might be considered very cheap."
[04:12:56] <hayley> "You're wrong about both 2x and 5-10x, but since I've got work to do, I don't have time to argue with you anymore.  Go do some peer-reviewed measurements, and then call me in the morning."
[04:14:48] <Aurora_v_kosmose> I liked the way Graham's Ansi Common Lisp book phrased it. @ OO
[04:14:54] <gilberth> I remember a thread on comp.lang.lisp about "subject oriented programming". A pity that DejaNews or what ever it is called was bought. My comp.lang.lisp archives from that time are on my machine with the failed PSU. :(
[04:15:19] <Aurora_v_kosmose> gilberth: HDD uses some legacy connector you lack in other machines?
[04:15:32] <moon-child> gilberth: chuck the hdd in another box?
[04:15:57] <gilberth> I am not there. And it's hdd_s_. A raid array.
[04:16:04] <moon-child> ah
[04:16:46] <Aurora_v_kosmose> Generic Functions vs Message-Passing, as the book went, for OOP models.
[04:17:08] <Aurora_v_kosmose> The conclusion, naturally, is that the former (CL one) is vastly superior.
[04:17:39] <gilberth> Anyhow that must have been somewhen in the 90s. When did CLOS came up?
[04:17:42] <Aurora_v_kosmose> Arrays complicate things, yeah. Especially if it's some hardware RAID.
[04:18:05] <gilberth> I won't touch hardware RAID.
[04:18:13] <Aurora_v_kosmose> Good choice.
[04:18:51] <Aurora_v_kosmose> gilberth: Book's from 1996, so yeah.
[04:18:52] <moon-child> gilberth: internet sez interlisp & mit lisp machine
[04:18:55] <gilberth> The machine is ancient and was for keeping backups and recordings from TV at a time you still could do that.
[04:23:51] <hayley> https://groups.google.com/g/comp.lang.lisp/c/oJju6pBIQig
[04:23:52] -ixelp- cleaning up the Lisp news group
[04:28:04] <semz> lmao those messages
[04:31:53] <hayley> https://www.youtube.com/watch?v=n8L3Uga7x1o
[04:31:54] -ixelp- Shadow the Hedgehogs a Bitch Ass Mother fucker - YouTube
[04:32:18] <Aurora_v_kosmose> semz: lol
[04:52:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:53:03] <hayley> https://www.curseforge.com/minecraft/mc-mods/asbestos-removal
[04:53:33] <Aurora_v_kosmose> lolwut?
[04:54:49] <hayley> Aurora_v_kosmose: You can die of asbestos in Minecraft now.
[04:54:58] <Aurora_v_kosmose> lolwhy
[04:55:11] <hayley> Financial compensation?
[04:55:53] <Aurora_v_kosmose> Quality shitpost I guess
[04:57:13] <hayley> https://www.youtube.com/watch?v=T5XWOOOCg-U
[04:57:13] -ixelp- Heart of the Sunrise (2008 Remaster) - YouTube
[04:57:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:26:16] <hayley> gilberth: Random comments in TeX sources for math papers: <https://twitter.com/at_leaks>
[05:41:01] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[05:51:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:14:34] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[06:38:22] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[06:54:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:59:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[07:23:02] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:24:19] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:28:30] *** Alfr is now known as Guest5008
[07:28:30] *** Quits: Guest5008 (~Alfr@user/alfr) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[07:28:34] *** Joins: Alfr (~Alfr@user/alfr)
[07:36:24] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:36:44] <dave0> maw
[07:49:11] <hayley> maw
[07:50:39] <dave0> hi hayley 
[07:53:07] <hayley> https://www.youtube.com/watch?v=QnTWw-AzCzA
[07:53:08] -ixelp- Freddie Laker (Concorde And Eurobus) (Live At Hemel Hempstead) - YouTube
[07:55:02] <dave0> freshen your coffee, hun?
[07:56:34] * hayley passes dave0 the entire coffee pot
[07:57:49] <dave0> \o/
[07:58:02] * dave0 pours one for hayley 
[07:58:11] * hayley doesn't drink coffee
[07:58:45] <dave0> oh!
[07:58:50] <dave0> juice?
[07:59:17] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[08:01:36] <hayley> I'll pass.
[08:02:23] <dave0> you have to drink something, it's a cafe :-p
[08:04:16] <hayley> Can't, I'm busy wondering why I seem to gradually lose performance on the video games I play.
[08:04:33] <hayley> More specifically, the frames per second drop to garbage levels after ten minutes or so.
[08:05:27] * contrapunctus was wondering what it'd take to implement Android support in ABCL.
[08:05:33] <hayley> FWIW I grew up on machines without good graphics cards, and thus Minecraft at like 15 FPS on lowest settings. But I spent probably about AU$1000 all up on this machine...
[08:05:44] <contrapunctus> Asked #abcl about it last night but didn't quite get the kind of clarity I was after.
[08:06:24] <hayley> Last I recall, the Android VM is just different...somehow.
[08:07:08] * hayley studies HotSpot and the GCs - all the fun stuff is not in the VM frontend.
[08:08:11] <contrapunctus> From what I read, `dx` converts JVM bytecode to Dalvik bytecode, `dex2oat` (?) converts Dalvik bytecode to ELF executables (for ART), and ABCL emits Java bytecode, so...how does it not work already 🤔️
[08:11:02] <hayley> ABCL is done for if it generates JVM bytecode at runtime though.
[08:11:40] *** Joins: semz (~none@user/semz)
[08:12:36] <contrapunctus> oh
[08:12:51] <hayley> https://twitter.com/IneptWeeb/status/1472417742934274049
[08:13:09] <contrapunctus> now I understand the response I got in #abcl 😅️
[08:14:58] <contrapunctus> hayley: I'm guessing it does 😶️ what now?
[08:15:15] <dave0> https://en.wiktionary.org/wiki/craptop
[08:15:15] -ixelp- craptop - Wiktionary
[08:15:39] <hayley> To my knowledge, you could retarget the ABCL compiler to emit Dalvik bytecodes, and then figure out how to load classes at runtime from there.
[08:16:11] <hayley> FOO, Dalvik uses registers and the JVM is stack-based. Not so easy.
[08:16:31] <contrapunctus> hayley: "sugar reassignment surgery" lmao
[08:17:10] <moon-child> hayley: 'gradually lose performance' overheating?
[08:17:20] <Aurora_v_kosmose> The issue with ABCL & Android runs deeper than the bytecode emitted.
[08:17:31] <hayley> I don't think I've noted overheating here, but it is summer now.
[08:17:34] <Aurora_v_kosmose> Android JRE and proper JRE are two different things.
[08:17:50] * hayley notes that the performance hasn't dropped at all. Must be people shitting around on the server.
[08:18:38] <moon-child> maybe memory fragmentation caused by lack of compacting gc! ;)
[08:18:46] <hayley> ):<
[08:19:19] <contrapunctus> bearded bull emoji 😏️
[08:19:46] <hayley> >:(
[08:19:52] <Aurora_v_kosmose> hayley: Throttling can happen, especially with spikes, if the fan curves aren't good.
[08:19:58] * hayley writes sad faces the wrong way around.
[08:20:37] <Aurora_v_kosmose> Note that in pandemic times, a 1k$ GPU isn't actually even a good one. (I hate this. Why did prices go insane?)
[08:20:48] <Aurora_v_kosmose> That GPU, pre-pandemic, was possibly 200$
[08:20:51] <hayley> I moved the curves to run more a few weeks ago, since I don't really mind the fans spinning more.
[08:21:09] <hayley> How much is a RX 580 now? I got mine for M-x mas...2019? for AU$400-ish.
[08:21:14] <Aurora_v_kosmose> hayley: 1.5k
[08:21:24] <moon-child> wot
[08:21:28] <Aurora_v_kosmose> moon-child: irk?
[08:21:30] <Aurora_v_kosmose> *ikr
[08:21:46] <hayley> Seems like AU$550-AU$650 used.
[08:22:03] <moon-child> I saw a decent gpu on craigslist for something like c$800 a bit ago.  Still not sure if I should have sprung for it
[08:22:19] <hayley> ...or worse. And someone has a lot of 6 for AU$4,400 - bets on them being cooked by Ethereum or something?
[08:22:20] <Aurora_v_kosmose> I'm not sure I'd trust a used GPU though, unless I bought from some place that does refurbish & has a return policy in case of trouble.
[08:22:32] <Aurora_v_kosmose> Miners tend to basically burn them out before selling.
[08:22:32] <hayley> "I’ve been mining ethereum at 30mhs per card and having had any issues with them to date." Called it!!
[08:23:19] <moon-child> Aurora_v_kosmose: I saw at least a couple in similar price range that claimed to have receipts
[08:23:31] <hayley> Also "SAPPHIRE AMD RADEON RX 580 DUAL 8GBX2 MINING COMPUTE ACCELERATOR, 2 RX580 GPUS" for AU$1,299. Would say I could think of better things to accelerate, but the only OpenCL code I've written only runs on one device.
[08:23:35] <Aurora_v_kosmose> > having had any issues with them to date | I'm also calling bull on that. They wouldn't be selling them if they weren't having issues with them.
[08:24:33] <hayley> Also, no fans, at around 40-60°C drawing 80W/chip? Am I supposed to stick a fan in front of the machine?
[08:24:33] <moon-child> I can imagine a plausible scenario in which somebody knew eth was switching to pos and wanted to get out ahead of time
[08:24:43] <moon-child> (I think eth is switching to pos?  Vaguely remember hearing that somewhere)
[08:25:00] <hayley> moon-child: Ethereum was switching to POS in a year a year ago. And the year before.
[08:25:18] <hayley> And this year, apparently.
[08:25:58] <Aurora_v_kosmose> hayley: Water-cooled GPUs
[08:26:08] <hayley> Sure.
[08:26:18] <moon-child> hmm.  'I have a bunch of ASUS GeForce GTX 1070 8GB ROG Strix Graphics Card on hand for sale [...] Reason for selling: We switched all of our employees to laptop devices due to pandemics and we no longer need desktop computers'
[08:26:20] <moon-child> do I believe them?
[08:26:41] <moon-child> C$500 is a great price
[08:27:34] <hayley> What employees need GTX 1070s? Graphics design department?
[08:27:44] <Aurora_v_kosmose> That or machine learning devs.
[08:28:06] <moon-child> in the latter case, would laptops do the job?  I guess if they were doing cloud compute
[08:28:11] <hayley> They should get TPUs then...or maybe not.
[08:28:37] <moon-child> TPUs are a restricted ecosystem though
[08:28:44] <Aurora_v_kosmose> moon-child: They'll overheat after a minute or two, but yes.
[08:28:55] <moon-child> and google would lose a lot less by killing tpus than nvidia would by killing cuda
[08:28:56] <hayley> Someone mentioned the idea of mining on a TPU to me, which could work if you know how to compile to them, I guess?
[08:29:03] <Aurora_v_kosmose> It'd be more logical to ship the normal workstations to the employees instead.
[08:30:03] <hayley> But I haven't found any documentation on how to a compile to TPU, perhaps for obvious reasons.
[08:30:18] <Aurora_v_kosmose> TPU?
[08:30:31] <moon-child> tensor processing unit; google hardware ml accelerator
[08:30:34] <hayley> "Tensor processing unit", giant vector unit produced by Google.
[08:30:42] <Aurora_v_kosmose> I see.
[08:34:20] <hayley> I wrote a OpenCL miner once, and it was just a pile of bitwise ops and shifts, mostly. Not sure if a machine learning unit really needs shifts, still.
[08:35:11] <moon-child> I bet it comes up at all, and is cheap enough that it doesn't make a difference either way to support
[08:36:10] * hayley should just piss around with an FPGA first.
[08:36:30] <hayley> "one-more-re-nightmare Verilog backend when"
[08:37:06] *** Joins: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it)
[08:38:51] *** Quits: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it) (Client Quit)
[08:39:08] *** Joins: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it)
[08:39:59] *** Quits: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it) (Client Quit)
[08:40:07] <hayley> Apparently the first TPU had a large pile of 8x8 multipliers. How many bitwise ops can you turn into multiplications?
[08:41:11] <moon-child> i think it's all 16-bit floating-point
[08:41:26] <hayley> Ouch.
[08:42:33] *** Joins: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it)
[08:46:26] *** Quits: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it) (Client Quit)
[08:48:20] <contrapunctus> hayley: oh, I sent some proofreading input for Software and Anarchy in this channel earlier.
[08:48:37] <hayley> Got it, thanks.
[08:49:12] *** Joins: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it)
[08:49:21] *** Quits: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it) (Client Quit)
[08:50:48] *** Joins: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it)
[08:50:48] *** Quits: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it) (Client Quit)
[08:52:05] *** Joins: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it)
[08:54:04] *** Quits: pierpa (~pierpa@host-87-16-221-18.retail.telecomitalia.it) (Remote host closed the connection)
[08:56:49] *** Joins: epony (epony@user/epony)
[09:16:26] <contrapunctus> hayley: moar...page 12, "Note that designing and implementing a dynamic system may be more difficult than ~with~ a static system"
[09:18:36] <moon-child> hm, other rephrases lead to awkward constructions.  Maybe go for 'It may be more difficult to design and implement a dynamic system than a static system'
[09:18:55] <moon-child> aside from avoiding duplication, it also juxtaposes 'dynamic' and 'static' more directly
[09:22:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:23:53] <contrapunctus> Oh, by "~with~" I meant, "remove the 'with'."
[09:24:43] <moon-child> yeah, I got that.  But I think the sentence still reads awkwardly with the 'with' removed
[09:27:27] <sm2n> I don't see what's awkward about it
[09:29:00] <moon-child> how do I put this.  'designing and implementing' doesn't distribute over 'may be more difficult than'.  So it parses as '(designing and implementing a dynamic system) may be more difficult than (a static system)'
[09:30:29] <moon-child> so to make sense that way you would have to  'designing and implementing a dynamic system may be more difficult than designing and implementing a static system'.  Which is fine, but long and duplicated; hence my earlier suggestion
[09:32:28] <contrapunctus> hayley: "It is, however, not feasible to implement or take advantage of, without a dynamic system to [...]" I'd make this - "This adaptability, however, is not feasible to [...]"
[09:33:07] <contrapunctus> hayley: ...can't I make PRs somewhere instead? 😄
[09:34:32] <sm2n> hmm, I didn't parse it that way, but I see how it could be confusing
[09:35:20] <moon-child> I'm pretty sure it's not grammatical.  But I am not a linguist.  I think jcowan is, but he is not in this channel
[09:37:00] <moon-child> contrapunctus: I think that's fine as is.  But meh style
[09:38:45] <contrapunctus> oh, wait
[09:45:04] <contrapunctus> "However, without a dynamic system empowering the users and developers to perform anything more than superficial or cosmetic changes to the software, it is not feasible to implement or take advantage of this adaptability." (fewer pauses, parentheses, and "to"s)
[09:46:54] <moon-child> might get rid of 'anything' too
[09:48:59] * hayley goes to see what Cheney's algorithm might look like in her language idea.
[09:57:43] <contrapunctus> re: cross-platform XMPP client, I can either 1. write/extend a native CL library, or 2. use the minimalist C library via CFFI (probably as much work as #1), or 3. use a Python library via burgled-batteries/py4cl/clpython*, or 4. use a C++ library via Clasp or ECL*, or 5. use a Java library via ABCL**, or 6. use a JavaScript library via Parenscript and ReactNative (I didn't find any instances of PS 
[09:57:43] <contrapunctus> being used with RN for cross-platform development)
[09:58:25] <contrapunctus> *Probably does not work on mobile platforms **Almost certainly does not work on mobile platforms
[10:13:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:21:45] <hayley> contrapunctus: You could send them into <https://gitlab.com/cal-coop/software-anarchy>.
[10:21:46] -ixelp- Cooperative of Applied Language / Software and Anarchy · GitLab
[10:22:04] <contrapunctus> cool!
[10:22:37] <hayley> https://plaster.tymoon.eu/view/2782 Amazing how well Haskell syntax highlighting "works" for this syntax.
[10:26:33] <moon-child> hmm, why 'swap a b' but also 'copy(object)' and 'swap tospace, fromspace'?
[10:27:57] <hayley> Right. I just wanted to have foo a, b and foo(a, b). So foo a b is a bug.
[10:28:26] <moon-child> ok
[10:29:18] <hayley> And then paren-free would be used for macros and control flow things (maybe).
[10:29:54] <moon-child> why distinguish?
[10:29:55] <hayley> I don't know how to design syntax, admittedly, and I am trying to get somewhere between normie languages and ML...somehow. And probably failing.
[10:30:09] <moon-child> (well, I might also ask why use something other than sexps, but)
[10:30:29] <moon-child> (in particular macros seem more annoying without uniform syntax, when you neeed to actually do something with the tree you're passed)
[10:30:54] <hayley> Well, otherwise, swap(a, b) might look like a function, and I am not intending to implement something like C++ void swap(int& a, int& b) cause that's evil.
[10:31:45] <moon-child> that c++ is evil.  But you might as well say that (if c t f) looks like a function call
[10:32:53] <hayley> Sure.
[10:32:56] <hayley> https://www.reddit.com/r/DataHoarder/comments/rjiljg/solid_snakeoil_storage_this_ssd_is_aimed_at/ lol wtf
[10:32:58] -ixelp- Solid Snake-Oil Storage: This SSD Is Aimed at Audiophiles : DataHoarder
[10:34:01] <moon-child> haha, yeah, I saw that earlier
[10:34:06] <easye> hayley: awesome article as usual!  Waking up and reading it over my coffee.
[10:34:24] <easye> More of an essay, I suppose.
[10:34:54] <moon-child> (on the topic of macros: might be nice to have a pattern-matching thingy in prelude or similar, to make it easier to unpeel annoying syntax trees)
[10:34:58] <hayley> I intend to have syntax like "if C then T [else F]" like ML, and this would desugar to "C.if(() -> T, () -> F)".
[10:35:50] <sham1> Smalltalk-ish?
[10:35:54] <hayley> Right. I'm thinking about pattern matching, but it is perhaps tricky because I don't want to be too coupled to representations, but (traditionally) pattern matching just pulls apart representation.
[10:36:40] <sham1> You could try to do what Scala does, where you can have an "unapply" method for some type, and then you can use that type like a pattern
[10:37:04] <hayley> sham1: The language/VM has semantics like Smalltalk, except with more lexical scoping, and this syntax I just made up hopefully looks like ML without freaking anyone out.
[10:37:06] <moon-child> you kinda need to care about your representation if you want you rmacros not to suck
[10:37:55] <hayley> .oO("The pictured device has a Realtek SSD controller, a company better known for its sound processors even though it began making SSD controllers a few years ago." I didn't know Realtek made audiophile hardware though. Thought they just did the on-board sound.)
[10:38:59] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 268 seconds)
[10:40:08] <hayley> Yes, but generally what I mean is that, if I have a CONS implementation, and then another one (for whatever reason), I'd like to be able to match on either with the same pattern. So I guess pattern matching would...somehow work with interface information, and so would retrieving macros.
[10:41:05] <hayley> Or I could use first-class patterns as they do in Newspeak, but I know very little of those. But macros are still a pain in the ass, if I want to late bind like that, as they are only compile-time things.
[10:41:41] <hayley> easye: More of part of a book that I edited to stand on its own. Still, thanks!
[10:42:19] <moon-child> unless you want extensible syntax (which is a large kettle of sardines), I think it's fine to restrict that end of things
[10:42:35] <hayley> Okay.
[10:42:57] <easye> I got the link to _Software and Anarchy_, and eagerly await reading that as well.  Is that a draft text or is that work complete as well?
[10:43:22] <hayley> It's about as complete as it was in April.
[10:43:48] <moon-child> (well, idk, maybe.  Like in cl you can put arbitrary objects in parse trees with #. or eval or w/e.  Which is neat.  But idk how useful that is in practice)
[10:44:25] <moon-child> (problem is it's going to be coupled regardless, because both the user of the macro and the macro itself will need to know about a given type of object, the only things they can assume are those which are built in)
[10:44:34] <sham1> I suppose it depends on if the language would be primarily a batch language or not
[10:44:46] <sham1> Macros can be weird for batch languages
[10:45:56] <hayley> I guess the syntax tree can afford to be coupled, sure. But generally, I don't want to couple so much.
[10:52:54] <hayley> moon-child: My favourite co-conspirator and I have planned a S-expression language, too, but if people are seriously as stupid about paren management as they sound sometimes, then we better have a backup plan.
[10:53:21] <hayley> They'd compile to the same bytecode, and run on the same VMs, so neither of us really mind the effort.
[10:53:57] <moon-child> see, this is why I think it's not worthwhile to bother with users
[10:55:19] <hayley> c.f. https://twitter.com/whitequark/status/1453297295076773890 I'd rather do the "making hardware do the impossible" role.
[10:58:56] <hayley> ...although arguably one-more-re-nightmare performance is kinda meh w.r.t SIMD, and I am not good at hardware diddling. "Born too late to write HAKMEM, born too early for Symbolics 2, born just in time to get confused reading Intel intrinsic list" 
[11:33:13] *** Joins: treflip (~user@user/treflip)
[12:21:16] <hayley> Apparently I am talking with a OpenDylan developer who hacks the GC.
[12:24:54] *** Joins: shka (~herr@109.231.0.226)
[12:35:49] *** Joins: dra (~dra@2a04:4540:6417:aa00:5c15:bc98:888d:644b)
[12:35:53] <dra> Hello!
[12:42:52] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:43:33] <hayley> Hello dra!
[12:43:50] * hayley reads someone say "The C language makes the world tick." Like a time bomb ticks?
[12:55:03] *** Joins: makomo (~makomo@user/makomo)
[12:59:34] <Duuqnd> I was going to say that C is like asbestos, but I don't think anybody ever thought C performed miracles.
[12:59:46] <hayley> lol
[13:01:28] <dra> hayley: I finally got around to reading the Lisp "Curse" Redemtion Arc.
[13:01:54] <hayley> Well, I only made the web version about 10 hours ago.
[13:03:31] <dra> Hmm. I faintly recall putting a HN discussion in my bookmarks a while ago...? Did you publish it elsewhere?
[13:04:22] * hayley wonders how that happened.
[13:04:24] <dra> Or maybe not. Anyway, nice write up!
[13:05:08] <hayley> Thanks!
[13:06:27] <hayley> Google only comes up with the book, and r/lisp.
[13:08:18] <dra> I must have bookmarked something else then.
[13:10:50] * dra can't help but read all those Lisp discussions, even though they rarely come close to enlightening.
[13:18:53] <gilberth> Good morning #lispcafe!
[13:22:09] * gilberth is tired of all those Lisp discussions as this is all the same for decades.
[13:40:51] <dra> Good morning, gilberth!
[13:41:11] <dra> Yes, it's always the same. No use reading them, but I can't help it. ;)
[13:42:12] <sham1> Most language discussions can get rather inane, especially when the languages are older
[13:46:12] <gilberth> Well, I am tired of language wars in particular, as this always boils down into our faction and the other with the mindset "Ah, we don't know how to implement feature X in an efficient way and believe that it is not possible and thus cripple our language to forbid X."
[13:47:05] <gilberth> X could be multiple dispatch, garbage collection, or dynamic typing, or a dynamic runtime.
[13:47:30] * moon-child whispers: continuations
[13:47:48] <gilberth> Or my favorite: X = lexical closures. Real closures, which also closes over TAGBODY tags. My favorite.
[13:48:12] <dra> But didn't you know? We need to limit what can be done with language X in order to protect us from ourselves.
[13:48:29] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[13:50:24] <gilberth> dra: Apart from moon-child getting me here, though it's not that simple with call/cc as this also is about modularity; that's only an excuse. In reality the language designers are just lazy. See: BCPL aka B aka C. Compare that to CPL.
[13:51:00] * dra feels the urge to mention that this point is exactly what makes hayley's article worth reading.
[13:51:18] <dra> gilberth: Exactly. I was being snarky.
[13:51:46] <moon-child> continuations add modularity, though.  They let you be polymorphic over push/pull stream apis
[13:52:20] <gilberth> moon-child: unwind-protect?
[13:52:30] <moon-child> ?
[13:52:52] <gilberth> You can't have a sane unwind-protect with call/cc.
[13:53:01] <moon-child> ah, yes
[13:53:37] <hayley> I guess I mention async/await, continuations, monads and green threads in the article, sure.
[13:53:38] <moon-child> s7 has 'with-baffle', limiting the scope past which continuations can escape
[13:53:40] <gilberth> And, yes, streams are very nice, but call/cc is an overkill for that.
[13:53:41] <sham1> Yeah, you do also need another callback there to re-enstate stuff
[13:54:18] <moon-child> gilberth: how without some form of continuation can I make a push stream into a pull one, or vice versa?
[13:54:47] <hayley> ...as an example of how going further with language features makes you less reliant on specific implementations.
[13:54:48] <sham1> Which is why dynamic-wind is the way it is
[13:57:15] <gilberth> moon-child: Idk, do I look like a language designer? But: with a traditional co-routine aka stream interface there are certain promises. It's just that I don't like the implications of branching dynamic environments. With call/cc a function could return at any time, from anywhere, even from another thread.
[13:58:51] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:59:20] <gilberth> If you could kill off those alternate universes, like a closed over GO tag becomes stale, when the dynamic scope ceases to exist, that would be fine with me.
[14:01:39] <moon-child> heh, at one point I considered stale GO tags--or, actually, it was stale BLOCKs, but same principle--as a backwards-compatible, syntactically obvious way of _adding_ continuations to cl
[14:02:41] <gilberth> This is just weird, if you think about it. Suppose you have an unwind-protect that says "do the clean up when my dynamic scope ceases to exist" and call/cc you would need to invoke the cleanup as a finalizer of the continuation. And finalizers are bad as you never know when they are run.
[14:03:22] <gilberth> moon-child: In presence of call/cc the logical step would be that GO tags don't become stale.
[14:03:22] <moon-child> yes, I see the problem
[14:03:27] <moon-child> gilberth: right, exactly
[14:05:07] <gilberth> moon-child: Didn't I say that I am tired of language wars? And yet you triggered me. :-/
[14:05:17] <moon-child> sorry
[14:05:42] <gilberth> No problem, I just find it kind of funny. And you made a very good point!
[14:05:43] <moon-child> I try to avoid such things too, but I ended up in another one recently
[14:07:46] <dra> Language wars are a kind of DDOS attack on the collective productivity of programmers.
[14:08:15] <dra> Well, of programmers who take part in such language wars, anyway...
[14:08:48] *** Joins: mzan (~quassel@mail.asterisell.com)
[14:08:49] * moon-child stumbles upon https://web.archive.org/web/20200223122526/http://www.ccs.neu.edu/home/dorai/uwcallcc/uwcallcc.html
[14:09:02] <gilberth> Languages itself could be attacks on the productivity.
[14:10:02] <moon-child> (another option: say good-bye to the real world and operate only in a silo where UNWIND-PROTECT is not necessary)
[14:10:36] <moon-child> I should stop.  Somebody will take me seriously
[14:13:01] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[14:15:20] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:49:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[14:51:03] <hayley> moon-child: No non local transfer of control -> no UNWIND-PROTECT necessary.
[14:51:10] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[14:51:42] <moon-child> hayley: sure, but you don't get call/cc that way either.  Worst of both worlds!
[14:51:58] <hayley> Ask gilberth about that one.
[15:02:41] <hayley> Funny, a F# hacker came into r/lisp and sounded impressed. I am starting to think the last three articles on applied-langua.ge seem to be more successful than I anticipated.
[15:03:59] <hayley> But FWIW I'm not sure how to answer. One question was to start programming a startup in Lisp or F#. I guess that picking the language one is most familiar with, and with the most support, is the most sensible option, and it is probably F# these days if I had to guess.
[15:04:50] <hayley> So who starts doing the dirty work for Lisp? I find compilers, threading, GC, etc, fun in an only slightly concerning way.
[15:17:23] <shka> F# is probably one of few languages with less programmers then lisp :D
[15:17:24] <shka> but
[15:17:42] <shka> it has access to libs written in C#
[15:17:47] <shka> and that is a big deal
[15:20:10] <shka> anyway
[15:20:13] <hayley> Still, don't make a business in something you don't know with tools you don't know.
[15:21:04] <shka> commercial viability is directly related to number and quality of libraries in place
[15:21:37] <hayley> Then they have all of .NET as you said.
[15:21:51] <shka> plus i guess portability, but that has been already somewhat addressed in every major platform
[15:22:07] <shka> hayley: or use ABCL
[15:22:32] <shka> i personally would love to see .net CL but that is impossible from what i heard 
[15:22:53] <gilberth> hayley: SUP, SUB { line-height: 0 }
[15:23:26] <shka> i think that lisp is slowly becoming more viable, but the movement is slow
[15:23:29] <gilberth> Saying 1 is too tall, as your default line-height is too tight for that.
[15:26:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[15:27:07] * hayley wonders if that will make superscripts and subscripts overlap with other characters.
[15:27:54] * gilberth points out that this is the whole idea of line-height > 1.
[15:28:08] <hayley> Sure.
[15:28:10] <gilberth> BTW TeX defaults to line-height: 1.25.
[15:28:45] <gilberth> But it's SUB and SUP are a bit smaller than the default HTML style sheet have them.
[15:28:56] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[15:29:07] *** Joins: random-nick (~random-ni@87.116.181.93)
[15:29:22] <gilberth> Ooops, a single quote fell out of my pocket.
[15:41:33] <shka> https://player.fm/series/main-engine-cut-off-2663026/t202-the-geopolitics-of-asat-weapons-and-space-debris-with-brian-weeden?xhr_reloaded=true&bust=8997260109950672
[15:41:34] -ixelp- T+202: The Geopolitics Of ASAT Weapons And Space Debris (with Brian Weeden) Main Engine Cut Off podcast
[15:41:37] <shka> interesting episode
[15:47:48] *** Joins: winningluser (~wl@2601:8c1:80:70d0::e17b)
[16:03:07] <treflip> shka: Calling C# from F# isn't as pleasant as it is advertised :(
[16:58:48] <shka> treflip: shame about that
[16:59:07] <shka> cool stuff https://www.youtube.com/watch?v=NnivFz2rbM4
[16:59:07] -ixelp- Scientists Create Artificial Life That Reproduces In a Strange Way - YouTube
[16:59:20] <shka> a little bit scary perhaps :-)
[17:11:13] <gilberth> I wonder how you could format numbers nicely. In the sense that (/ 3d0) comes up as 1/3. And I want to round to perhaps two significant digits. I have the idea to gather recipes. I want to be able to scale the recipes.
[17:11:16] <gilberth> I came up with this as my wife sent me my mother's recipes for fondue souces. With my prototype <http://clim.rocks/gilbert/fondue.html>  you could click on a quantity to scale the whole thing. Works nicely when you scale for say 250ml mayonnaise, but not so much for 200ml.
[17:11:16] -ixelp- Fonduesoßen
[17:12:57] <gilberth> I do match some regular expressions (sic!) to get sth. like "2 1/3". I would like to have a more general approach.
[17:16:13] <gilberth> Say you want 1 tablespoon tomato ketchup, you would need 93 3/4 ml mayonnaise. Which is quite odd, could be 100ml as well, you won't die from the extra 6.25ml.
[17:25:43] <Alfr> gilberth, I'd like to file a bug, it doesn't accept pi nor π as a number. :(
[17:26:12] <gilberth> Yes, and it also doesn't accept "five" or "1/2" even.
[17:26:52] <ck_> it works perfectly for NaN
[17:26:59] <gilberth> lol
[17:27:01] <Alfr> ck_, :D
[17:27:35] <gilberth> Hey, it's a quick and dirty prototype.
[17:27:38] <Alfr> gilberth, but at the same time, it's file to take a non-integer for the number of persons.
[17:28:10] <gilberth> Yep, which makes sense if you count children as half persons.
[17:28:11] <Alfr> s/it's file to take/it takes/
[17:28:58] <ck_> this is a neat game: https://store.steampowered.com/app/1759440/Babble_Royale/
[17:28:59] -ixelp- Babble Royale on Steam
[17:29:00] <Alfr> gilberth, do we leave the pinkie or that toe attached?
[17:29:42] <gilberth> It should perhaps allow for an error of perhaps 10%. Recipes aren't that precise.
[17:29:48] <gilberth> Alfr: Neither.
[17:31:47] <gilberth> They are: You find measure as "one onion". Onions differ in size by a large margin already.
[17:32:57] <gilberth> But classical recipes don't work for me anyway. Too much prose. I would need a clear set of instructions with a time index. Like: t = -20min: Chop onions
[17:33:28] <Alfr> You certainly missed the glossary entry exactly defining the standardized onion.
[17:33:56] <gilberth> I am pretty sure there is some EU standard for onions.
[17:35:02] <gilberth> Anyhow, I want that as nice as possible numbers turn up.
[17:35:08] <Alfr> gilberth, I don't think that instruction will help, some people may be painfully slow when cutting onions into small pieces.
[17:37:15] <gilberth> Alfr: Well. When I prepare some meal I first make a time table in my head. You also need to prioritize which needs to be on the spot as another five minutes would ruin it. Other things like rice don't mind sitting there for some extra 10 minutes, rice can wait. I need deadlines.
[17:37:40] *** Joins: notzmv (~zmv@user/notzmv)
[17:37:58] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 256 seconds)
[17:39:44] <Alfr> gilberth, how about round to two significant digits, output as fraction if the denominator is sufficiently nice, otherwise output it as decimal?
[17:40:46] <gilberth> With classical recipes you face a wall of text. And it says "chop onions" in the text. You need to look at the list of ingredients to learn how many. While you do that, you lose your position in the prose. There is no c-space ; c-x c-x on paper.
[17:41:43] <Alfr> gilberth, and also consider the time you need to reclaim space in the kitchen ... (ask hayley).
[17:41:46] * shka thinks that he just implemented OMP for multiple outputs
[17:42:37] <gilberth> Alfr: I was thinking along that line. I would round more coarsely even. This could be brute force, try with base 1/8, 1/4, 1/3, maybe 1/6 and pick the one with the least digits.
[17:44:34] <Alfr> gilberth, you may want to hold off on that. I my experience, I'm quite accurate when halving some quantity, taking thirds isn't.
[17:44:49] <Alfr> s/I my/In my/
[17:45:56] <gilberth> Alfr: It does need to be GF compatible --- not that I would have one --- otherwise I would just go with decimal and two significant digits.
[17:46:03] <Alfr> gilberth, just saying that some denominators may be more practical than others.
[17:47:00] <gilberth> Doesn't it also depend on the ingredient? 1/3 egg doesn't make sense. While 1/3 liter of sth may.
[17:48:12] <Alfr> gilberth, I don't know.
[17:48:49] <gilberth> Alfr: Ok. That is a useful hint. It may be better to say sth as a multiple of 1/4 instead 1/3, even if the latter would be more precise. Thanks!
[17:49:46] <Alfr> gilberth, I'm only saying since you're rounding anyway, if the error introduced isn't too large, choosing a power of 2 for the denominator may be worthwhile.
[17:50:11] <gilberth> I agree.
[17:50:40] <gilberth> It also is easier to physically chop sth into two halfes than into thirds.
[17:52:14] <gilberth> At times you also see ranges mentioned like "3 or 4 onions".
[17:56:38] <Alfr> gilberth, the recipe may simply try to accommodate the non-standard but commercially available onions with that.
[17:57:42] <gilberth> Yes. And recipes also allow for personal taste.
[17:58:43] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[18:01:04] <gilberth> I better first fix the markup. The quantity is mentioned three times in the HTML. Bad. Markup should also be easy enough that my wife could write that. And, yes, she feels quite comfortable with plain HTML.
[18:02:45] <gilberth> .oO(I could steal the Q tag eg. You say "<Q>4</Q> onions". The JS could do the rest.)
[18:44:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[18:50:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:17:42] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[19:41:58] <dave0> nite all
[19:42:02] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:05:17] *** Joins: makomo (~makomo@user/makomo)
[21:31:49] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:32:15] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:36:53] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[22:13:20] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[22:23:26] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[22:40:11] *** Quits: dra (~dra@2a04:4540:6417:aa00:5c15:bc98:888d:644b) (Quit: Leaving)
[22:41:02] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[22:43:10] *** Joins: pjb (~pjb@user/pjb)
[23:23:41] *** Joins: rogersm (~rogersm@90.166.177.48)
[23:27:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:31:34] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[23:56:56] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
