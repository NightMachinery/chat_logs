[00:04:54] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[00:07:09] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:09:12] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[00:10:47] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:34:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:42:50] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e0b4:325e:50ed:8971)
[00:42:50] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e0b4:325e:50ed:8971) (Changing host)
[00:42:50] *** Joins: skapata (~Skapata@user/skapata)
[00:44:03] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:47:01] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[00:47:30] <mike18> Alipha: https://gist.github.com/Arnold1/bf34652d235c8d49749521c40881fd18#file-competitive-coding-cpp ... for the unit test is a std::vector<std::string> good here or should i just do string compare?
[00:47:36] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[00:49:35] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:58:29] *** Joins: pulse (~pulse@user/pulse)
[01:07:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:08:39] *** Quits: rond_ (~rond_@90.251.109.52) (Quit: Client closed)
[01:10:22] <LordKalma> spent the day ranting about conan... oh welll
[01:11:25] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:13:59] <LordKalma> the conclusion is that recipes, while amazingly great and all, hermetically seal packages
[01:18:10] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:27:00] *** Quits: andreasbuhr (~quassel@p548dd961.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:27:31] *** Joins: markong (~kvirc@213.146.188.203)
[01:43:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:35] *** ChanServ sets mode: +v npaperbot
[01:45:32] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[01:45:43] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:45:48] *** Joins: pulse (~pulse@user/pulse)
[01:46:57] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[01:47:16] *** Joins: pulse (~pulse@user/pulse)
[01:48:58] *** Quits: jsbach (~jsbach@2a01:c22:35f9:d600:5e51:5873:87b:9224) (Remote host closed the connection)
[01:52:02] *** Quits: magla (~gelignite@55d44ff4.access.ecotel.net) (Quit: Stay safe!)
[01:53:32] *** Quits: p-i- (~Ohmu@mx-ll-183.89.32-62.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[01:55:18] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48)
[01:55:18] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Quit: Leaving)
[02:08:36] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:09:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:12:28] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[02:16:06] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[02:23:44] <Alipha> ashafq: std::string does dynamic allocation. And the rules with constexpr is that dynamic memory allocated in a constexpr context must then be freed within that same constexpr context. And so, you can create a std::string in a constexpr function as a local variable, as long as that std::string doesn't live beyond the constexpr context. You're trying to create a constexpr std::string that will live while
[02:23:46] <Alipha> the program is executing. You can't do that
[02:23:50] *** Quits: lispy (~lispy@user/lispy) (Ping timeout: 250 seconds)
[02:24:25] <Alipha> ashafq: you either want a const std::string, or more likely, a std::string_view
[02:24:43] <Alipha> constexpr std::string_view
[02:26:08] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[02:27:53] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:33:14] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[02:33:32] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[02:34:51] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:36:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (erbium.libera.chat (Nickname regained by services)))
[02:36:12] *** vinleod is now known as vdamewood
[02:36:43] *** Joins: lispy (~lispy@user/lispy)
[02:37:24] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:37:36] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[02:38:31] <mike18> hi Alipha https://gist.github.com/Arnold1/bf34652d235c8d49749521c40881fd18#file-competitive-coding-cpp ... for the unit test is a std::vector<std::string> good here or should i just do string compare?
[02:42:47] <Alipha> mike18: I prefer the vector
[02:43:01] <mike18> what about the deque for returning the data?
[02:57:10] *** Joins: pulse (~pulse@user/pulse)
[03:00:57] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:08:14] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:09:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:13:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[03:18:20] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[03:21:27] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[03:34:02] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[03:39:29] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[03:45:33] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[03:50:12] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[03:50:24] *** Quits: ymwm__ (~yingmanwu@27.153.167.245) (Ping timeout: 256 seconds)
[03:54:11] *** Joins: ymwm__ (~yingmanwu@27.153.167.245)
[03:56:50] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[04:01:17] *** Quits: proller (~p@2a02:6b8:b081:31::1:27) (Ping timeout: 240 seconds)
[04:07:52] *** Joins: Soni (~quassel@autistic.space)
[04:09:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:13:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:15:02] *** Joins: proller (~p@80.240.216.69)
[04:20:24] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[04:20:47] *** Joins: proller (~p@2a02:6b8:b081:8009::1:b)
[04:24:50] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:28:53] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:15dc:e22a:9981:6e85) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:06] <Alipha> mike18: I generally wouldn't bother with a deque unless you need push_front or pop_front
[04:32:12] *** Joins: lispy (~lispy@user/lispy)
[04:51:10] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:58:54] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[05:01:31] *** immibis_ is now known as immibis
[05:03:22] *** Quits: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:04:43] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:10:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:11:42] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[05:11:59] *** Joins: flynn (~mcbloch@user/flynn)
[05:13:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:14:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:43:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:36] *** ChanServ sets mode: +v npaperbot
[05:52:57] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Remote host closed the connection)
[06:01:44] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Ping timeout: 272 seconds)
[06:04:08] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:10:36] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[06:11:19] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:14:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:16:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:17:17] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[06:18:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:18:50] *** Joins: Inline__ (~Inline@p200300cd4708ce00867bc6986b1102af.dip0.t-ipconnect.de)
[06:19:20] *** Joins: pulse (~pulse@user/pulse)
[06:21:11] *** Quits: Inline (~Inline@p200300cd473dda00d9049d80a70df8bf.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:34:26] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:38:53] *** Quits: proller (~p@2a02:6b8:b081:8009::1:b) (Ping timeout: 252 seconds)
[06:58:06] *** Quits: emerent (~quassel@p200300cd5743c34aba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:58:59] *** Joins: emerent (~quassel@p200300cd5743c306ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:59:21] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 256 seconds)
[07:01:21] <yolo> does c++ have strict-aliasing problem like c?
[07:03:33] <ville> even more so
[07:05:36] <yolo> then should I do -fno-strict-aliasing or -fstrict-aliasing by default, I will pick no-UB over optimization, so I should do -fstrict-aliasing correct? I'm confused by the strict-aliasing vs no-strict-aliasing, my current setting is -fno-s..-a..
[07:06:29] <yolo> is this correct: strict-aliasing means gcc/g++ will warn if you mixed pointers that will lead to UB
[07:06:47] <yolo> (i understand gcc won't be able to catch it all the time)
[07:08:10] *** Quits: c4017_ (~c4017@S0106c0943583f893.vf.shawcable.net) (Ping timeout: 256 seconds)
[07:09:31] <RandomReader> no, gcc assumes you are following the language rules by default, and that you did not write code that has undefined behavior
[07:09:49] <RandomReader> the -fno-strict-aliasing option disables one of gcc's optimizations that makes that assumption
[07:10:15] <RandomReader> it's only one possible way the assumption can appear, it doesn't have any effect on whether the code is undefined or not
[07:10:33] <RandomReader> code that would be affected by it is incorrect either way
[07:10:57] <yolo> so fno-* disables optimization, which should be 'safer' than -fstrict-aliasing then, at leat my default flag is 'correct'
[07:11:11] <RandomReader> I wouldn't call it any safer, just less likely to *show* a problem
[07:11:45] <RandomReader> the problem itself mostly comes from abusing casts, reinterpret_cast specifically (or a C-style cast that results in reinterpret_cast behavior)
[07:12:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:12:04] <RandomReader> or I should say, the UB itself mostly comes from -- as in, that's the way you violate strict aliasing
[07:12:27] <yolo> right, typecasting is the problem mostly
[07:12:39] <RandomReader> strict aliasing is fairly straightforward: if you have a pointer of type A, it's not referring to an object that's really unrelated type B
[07:13:07] <RandomReader> it takes effort (and maybe some misunderstanding) to violate that, since by default the compiler is going to complain that these things aren't the same type
[07:13:13] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4150.pdf is possibly the last time the committee had a paper about getting restrict-like for c++. been awhile since i read it, but recall it highlights why c++ needs something different from restrict
[07:13:38] <yolo> it's this type of thing make me nervous enough to wonder, can rust avoid all the UBs
[07:13:48] <RandomReader> no of course not
[07:13:56] <yolo> so no reinterpret-cast unless you absolutely know what you're doing
[07:14:06] <RandomReader> Rust simply has different rules, some of them happen to be easier for people to follow for various things
[07:14:07] <yolo> in C casting is more common, thus more dangerous
[07:14:43] <RandomReader> UB as a concept isn't unique to C++ or ever going away, it exists in pretty much any program you'll ever write, regardless of language
[07:15:16] <yolo> restrict is a bit like unique_ptr(without the move()), in that one ptr will point to one thing, two ptrs will never point to the same thing
[07:15:50] <yolo> maybe C should call it unique instead restrict ...
[07:15:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:15:59] <RandomReader> "restrict" is an enhancement to strict-aliasing: it says these two pointers never refer to the same object, even though they are the same type
[07:16:10] <RandomReader> it can be used for optimization in some circumstances
[07:17:14] <RandomReader> it doesn't say there won't ever be multiple pointers to an object, somewhere, just that this particular pointer doesn't duplicate others in the same scope
[07:17:20] <yolo> i must misunderstand restrict then, so it's to avoid two same-type ptr to refer to the same data?
[07:17:43] <RandomReader> the canonical example is in function arguments:   void foo(int* a, int* b)
[07:17:50] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:17:59] <yolo> then it does not solve the two different types of ptr refer to the same data problem(i.e. strict aliasing)
[07:18:02] <RandomReader> a and b don't refer to the same object (and some extra bits by inference, like overlapping arrays)
[07:18:38] <RandomReader> it's not really related to strict aliasing, other than maybe building on it, since strict aliasing already says the same thing restrict does if the types are different
[07:19:11] <RandomReader> sorry, that should have read:  void foo(int restrict * a, int restrict * b)
[07:19:25] <RandomReader> (I haven't used it much, I rarely deal with C these days)
[07:20:10] *** Joins: xkuru (~xkuru@user/xkuru)
[07:20:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:21:57] <yolo> very informative, thank you.
[07:21:59] <RandomReader> anyway, what the "these things don't alias" information enables is caching and vectorizing optimizations .. if the compiler knows that two things don't overlap, it can cache and do bulk operations in parallel, without worrying about making them fit together
[07:22:16] <yolo> i will keep my -fno-strict-aliasing for now and be more careful for mixing ptr types
[07:22:31] *** Joins: xkuru (~xkuru@user/xkuru)
[07:22:37] *** Joins: adeliktas1 (~adeliktas@i59F4D720.versanet.de)
[07:22:43] <RandomReader> if it doesn't know that, it has to assume they're related, and carefully fit them together (which may be slower in some way)
[07:23:11] <ville> sounds silly
[07:24:34] *** Quits: adeliktas (~adeliktas@i59F5FA8E.versanet.de) (Ping timeout: 250 seconds)
[07:24:34] *** adeliktas1 is now known as adeliktas
[07:24:35] <yolo> i think -O2|-O3 turns on -fstrict-aliasing by default, you must put -fno-strict-aliasing explicitly to tell gcc back off, don't assume all my code has no mixted ptr types
[07:25:33] <ville> depends how you do your casts, but it should be fairly easy to grep for them
[07:26:30] <yolo> the key is still: don't cast your pointers unless it's char/unsigned-char
[07:27:11] <yolo> i assume cat (void *) to same type is safe, until you cast the same (void*) to two ptrs of different types?
[07:27:21] <yolo> s/cat/cast/
[07:27:38] <yolo> s/until/unless/
[07:29:20] <ville> yolo: are these problems you are actually having?
[07:29:31] <yolo> https://wiki.sei.cmu.edu/confluence/display/c/EXP39-C.+Do+not+access+a+variable+through+a+pointer+of+an+incompatible+type
[07:30:03] <yolo> no right now, but good to know(i actually noted this down a while ago, but keep forgetting in practice)
[07:31:58] <yolo> my actual question was about -fstrict-aliasing vs -fno-strict-aliasing, i was confused by which one to use
[07:33:01] <yolo> -fstrict-aliasing: will warn many code that break strict aliasing rule, which is what I need; then -fno-strict-aliasing is to make my code 'safer', in that it will not warn the broken code, by not optimizing. is this correct?
[07:33:58] <yolo> if the above is true, i will stay with the default, i.e. do nothing as -O2 will turn on strict-aliasing warning(-Wall), I'd better fix the code plus enjoy some optimizations.
[07:38:38] *** Quits: lispy (~lispy@user/lispy) (Ping timeout: 272 seconds)
[07:40:20] <ville> i am not sure -fstrict-aliasing controls warnings. it's an optimizer flag
[07:40:52] <ville> hmm maybe i've seen some output that says "use -fno..."
[07:44:17] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[07:57:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:59:12] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:59:16] *** Joins: xkuru (~xkuru@user/xkuru)
[08:03:08] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:05:14] *** Joins: xkuru (~xkuru@user/xkuru)
[08:12:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:16:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:38:45] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:41:13] *** Joins: xkuru (~xkuru@user/xkuru)
[08:48:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:49:33] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:51:36] *** Joins: xkuru (~xkuru@user/xkuru)
[09:03:04] *** Inline__ is now known as Inline
[09:10:48] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[09:12:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:13:29] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:16:14] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[09:16:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:18:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:21:17] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:23:03] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:27:08] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[09:31:23] *** Quits: foul_owl (~kerry@23.82.193.89) (Quit: WeeChat 2.3)
[09:32:34] <ent58> Anyone have a recommendation for a good decimal32/64/128 library? (at least until it becomes baked into the language)
[09:33:32] *** Joins: foul_owl (~kerry@174-21-76-71.tukw.qwest.net)
[09:39:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[09:39:32] *** Joins: jsbach (~jsbach@46.183.103.17)
[09:41:56] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[09:43:29] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:38] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:38] *** ChanServ sets mode: +v npaperbot
[09:48:32] *** Joins: Burgundy (~NA@86.121.143.206)
[09:49:24] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[09:52:35] *** Joins: malloy (~jimery@116.30.220.175)
[09:57:02] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:57:58] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[10:02:31] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:04:19] <malloy> hello, does gdb bt command print exactly the thread which cause breakdwon?
[10:08:00] <malloy> my programe terminate with std::length_error  what():  basic_string::_M_create, and bt prints 'setjmp'. but i see another thread is contructing a std::string.
[10:14:11] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:17:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:19:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48) (Ping timeout: 240 seconds)
[10:26:45] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[10:27:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:28:19] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48)
[10:34:32] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48) (Ping timeout: 240 seconds)
[10:35:43] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[10:38:04] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48)
[10:41:07] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6971)
[10:41:55] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:44:02] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48) (Ping timeout: 240 seconds)
[10:48:26] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48)
[10:50:50] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:53:10] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:06:21] *** Joins: gentooclimax (~gentoocli@91.13.23.93.rev.sfr.net)
[11:07:31] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[11:08:37] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:14:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:17:38] *** gentooclimax is now known as climax
[11:19:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:26:52] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[11:27:15] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:29:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[11:29:53] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:32:48] *** Joins: teepee_ (~teepee@openscad/teepee)
[11:32:55] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[11:32:57] *** teepee_ is now known as teepee
[11:37:00] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48) (Ping timeout: 240 seconds)
[11:40:54] *** climax is now known as gentooclimax
[11:44:15] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[11:46:10] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:48:04] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8dc0:ef0f:d832:35ec)
[11:50:54] *** gentooclimax is now known as climax
[12:00:12] *** Quits: foul_owl (~kerry@174-21-76-71.tukw.qwest.net) (Ping timeout: 272 seconds)
[12:00:41] *** climax is now known as gentooclimax
[12:03:51] *** Joins: andreasbuhr (~quassel@p549db363.dip0.t-ipconnect.de)
[12:06:09] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48)
[12:14:01] *** Joins: foul_owl (~kerry@23.82.193.87)
[12:15:10] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:15:32] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48) (Ping timeout: 240 seconds)
[12:17:15] *** Quits: jsbach (~jsbach@46.183.103.17) (Remote host closed the connection)
[12:18:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:18:47] *** Quits: ymwm__ (~yingmanwu@27.153.167.245) (Remote host closed the connection)
[12:19:16] *** Joins: ymwm__ (~yingmanwu@27.153.167.245)
[12:22:30] <LordKalma> !rq
[12:22:30] <nolyc> LordKalma: <mort> I hate that the best solution to this problem is to use vector<bool>
[12:23:53] *** gentooclimax is now known as climax
[12:23:55] *** Quits: andreasbuhr (~quassel@p549db363.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:24:34] *** climax is now known as gentooclimax
[12:25:06] *** Joins: andreasbuhr (~quassel@p549db363.dip0.t-ipconnect.de)
[12:29:27] *** Joins: robod34 (Username@79.113.243.73)
[12:31:07] *** Joins: ivii (~ivan@user/ivii)
[12:38:32] *** Joins: zen_coder (~zen_coder@ip5f5bf6a9.dynamic.kabel-deutschland.de)
[12:40:00] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:42:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[12:42:23] *** gentooclimax is now known as climax
[12:45:37] *** climax is now known as gentooclimax
[12:46:39] *** Quits: gentooclimax (~gentoocli@91.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:48:21] *** Joins: gentooclimax (~gentoocli@91.13.23.93.rev.sfr.net)
[12:48:43] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48)
[12:56:18] *** Joins: paul424 (~tom@ip-5-172-232-233.multi.internet.cyfrowypolsat.pl)
[13:01:08] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48) (Ping timeout: 252 seconds)
[13:13:10] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:15:00] *** Quits: zen_coder (~zen_coder@ip5f5bf6a9.dynamic.kabel-deutschland.de) (Quit: Konversation terminated!)
[13:15:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:18:08] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[13:19:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:19:26] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48)
[13:26:34] *** Joins: proller (~p@2a02:6b8:b081:b646::1:9)
[13:33:54] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:40:29] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Quit: you can't fire me!)
[13:40:39] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[13:40:48] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Client Quit)
[13:42:43] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[13:43:29] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:37] *** ChanServ sets mode: +v npaperbot
[13:51:04] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:05:57] *** Quits: ymwm__ (~yingmanwu@27.153.167.245) (Ping timeout: 240 seconds)
[14:16:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:19:58] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:19:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:28:59] *** gentooclimax is now known as climax
[14:32:44] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:34:10] *** climax is now known as gentooclimax
[14:46:10] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:47:25] *** Joins: cursey (~cursey@user/cursey)
[14:59:38] *** Quits: gentooclimax (~gentoocli@91.13.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[15:09:50] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:10:15] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:13:32] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 240 seconds)
[15:14:52] *** Joins: anaahat (~anaahat@116.74.181.161)
[15:16:50] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:20:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:29:45] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:31:56] *** Quits: paul424 (~tom@ip-5-172-232-233.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:32:05] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[15:34:37] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[15:42:31] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[15:43:24] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:55:56] *** Joins: markong (~kvirc@213.146.188.203)
[15:56:15] *** Quits: anaahat (~anaahat@116.74.181.161) (Quit: Connection closed)
[16:09:08] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:10:01] *** Joins: ymwm (~yingmanwu@27.153.167.245)
[16:15:43] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[16:16:01] *** Joins: xcm (~xcm@user/xcm)
[16:17:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:21:14] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:27:15] <mort> I'm using the webrtc C++ library. Its build system sets a ton of compiler options, many of which I suspect affect things like headers. I get linker errors when using the library if the code using the library is compiled with slightly different compiler options.
[16:27:35] <mort> What's the best way to somehow get the user of libwebrtc to know what options it needs?
[16:28:01] <mort> I could write .pc files, but I don't really know which compiler options are necessary and which aren't, and I don't know which compiler options it will choose on different systems
[16:31:22] *** Joins: john99 (~john99@175.246.103.34.bc.googleusercontent.com)
[16:32:02] <mort> the set of flags which I suspect affect compilation are: https://p.mort.coffee/qSS -- obviously a ton of those are very specific to my particular system
[16:34:04] <mort> tbh this whole thing seems ripe with ODR violations
[16:34:20] *** Joins: ymwm_ (~yingmanwu@117.26.70.231)
[16:34:52] *** Quits: ymwm_ (~yingmanwu@117.26.70.231) (Max SendQ exceeded)
[16:35:00] *** Quits: dld (~davidlowr@2601:197:600:1210:fddb:e1db:6b56:f9d3) (Ping timeout: 240 seconds)
[16:35:18] *** Joins: ymwm_ (~yingmanwu@117.26.70.231)
[16:37:36] *** Quits: ymwm (~yingmanwu@27.153.167.245) (Ping timeout: 272 seconds)
[16:40:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:84ab:e3a9:1ea3:da7a) (Ping timeout: 240 seconds)
[16:40:57] <mort> anyone got any hints?
[16:41:08] <mort> it's not exactly a webrtc-specific problem, webrtc is just especially annoying with it
[16:50:23] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[16:54:04] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 272 seconds)
[16:59:22] <lxsameer> hey folks, I have some static data that I want to include in my program (bunch of objects that has 3 string members) they should be immutable and I want to keep a pointer to each of them in a static array. what's your suggested way to implement such thing ?
[17:00:54] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[17:03:37] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[17:04:10] *** Quits: rg (~r-g@51.15.187.53) (Read error: Connection reset by peer)
[17:04:21] <lxsameer> btw it is a shared lib
[17:06:05] *** Joins: bobb_ (~bobb_@dslb-092-074-254-001.092.074.pools.vodafone-ip.de)
[17:10:34] *** Joins: plastico (~plastico@neomutt/plastico)
[17:11:02] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:a11a:9fad:b169:74bb)
[17:15:05] *** Quits: LordKalma (~LordKalma@server.portaldoradioamador.pt) (Quit: The Lounge - https://thelounge.chat)
[17:15:42] *** Joins: LordKalma (~LordKalma@server.portaldoradioamador.pt)
[17:15:53] *** Quits: LordKalma (~LordKalma@server.portaldoradioamador.pt) (Client Quit)
[17:16:42] *** Joins: LordKalma (~LordKalma@server.portaldoradioamador.pt)
[17:17:48] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:19:14] <furrymcgee> perhaps they have some hints on https://ftp.snt.utwente.nl/pub/software/cygwin/x86/release/webrtc-audio-processing/
[17:21:04] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[17:21:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:24:02] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[17:27:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:fc09:57a0:d89c:b417)
[17:30:23] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:31:34] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:32:24] *** Joins: undephin3d (~undephin3@158.181.80.35)
[17:42:52] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Quit: leaving)
[17:43:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:38] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:38] *** ChanServ sets mode: +v npaperbot
[17:47:38] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:50:33] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[17:59:00] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:00:11] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[18:06:57] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 252 seconds)
[18:17:48] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:2da8:9bab:92f4:7c48) (Ping timeout: 240 seconds)
[18:17:55] <lxsameer> b
[18:18:03] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:1f05:adc1:9aab:893:2eec)
[18:18:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:20:02] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[18:20:58] *** Joins: pulse (~pulse@user/pulse)
[18:21:04] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:21:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:23:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:25:55] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:30:43] *** Joins: dld (~davidlowr@192.91.235.243)
[18:30:48] <xkoncek> !b
[18:30:50] <nolyc> /b/ is for tards
[18:31:11] <xkoncek> i meant B language
[18:31:51] <BurumaSerafuku> woot
[18:32:45] <lxsameer> :))
[18:32:56] <lxsameer> sorry it was a shortkey miss
[18:46:22] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:48:57] *** Joins: lispy (~lispy@user/lispy)
[18:51:25] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[18:53:02] <xkoncek> !c++
[19:00:28] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:00:45] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:09:22] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:18ed:159e:a9f9:33bb)
[19:10:33] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[19:10:47] *** Joins: Xardas (~Xardas@149.233.51.127)
[19:11:06] *** Joins: magla (~gelignite@55d48440.access.ecotel.net)
[19:13:26] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:18ed:159e:a9f9:33bb) (Client Quit)
[19:13:28] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (Quit: WeeChat 3.4)
[19:13:56] *** Quits: john99 (~john99@175.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[19:14:32] *** Quits: norias (~jaredm@c-98-219-195-163.hsd1.pa.comcast.net) (Ping timeout: 240 seconds)
[19:15:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:3119:cbb9:a9db:3cc5)
[19:15:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:3119:cbb9:a9db:3cc5) (Changing host)
[19:15:04] *** Joins: skapata (~Skapata@user/skapata)
[19:18:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:20:10] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[19:22:01] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[19:22:16] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[19:27:16] *** Quits: ymwm_ (~yingmanwu@117.26.70.231) (Remote host closed the connection)
[19:27:37] *** Joins: ymwm_ (~yingmanwu@117.26.70.231)
[19:28:21] <pulse> !rquote
[19:28:22] <nolyc> pulse: Error: "rquote" is not a valid command.
[19:28:49] *** Quits: ymwm_ (~yingmanwu@117.26.70.231) (Client Quit)
[19:28:56] * Haohmaru pulls nolyc's left ear
[19:28:57] <pulse> !rq
[19:28:57] <Haohmaru> !rq
[19:28:57] <nolyc> pulse: <PJBoy> pull it, pull harder, keep pulling
[19:28:58] <nolyc> Haohmaru: <PJBoy> `bool _(true); for ( ;_; ) {}`
[19:29:14] <Haohmaru> oh wow, almost ^
[19:29:16] <pulse> omg the bot is sentient
[19:29:51] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[19:30:42] <LordKalma> {bool _(true); for ( ;_; ) {}}
[19:30:52] <geordi> CPU time limit exceeded
[19:31:03] <LordKalma> curious output
[19:31:13] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[19:31:32] *** Quits: bobb_ (~bobb_@dslb-092-074-254-001.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[19:32:37] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[19:34:30] *** Joins: john99 (~john99@175.246.103.34.bc.googleusercontent.com)
[19:34:50] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[19:36:04] <OnlineCop> Is it preferable to have the namespace prepended to a return type? Example: `namespace NS{ struct A; class B { A getA() const; }; }` vs. `namespace NS{ struct A; class B { NS::A getA() const; }; }`
[19:38:44] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 272 seconds)
[19:38:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:39:55] <Alipha> OnlineCop: i guess i don't know why you'd bother specifying it while you're inside the namespace
[19:40:24] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[19:40:50] <LordKalma> there's only one good reason to fully-qualify return types, and it's a bad reason: string-based signals in Qt haha
[19:41:19] <OnlineCop> Would there be any ambiguity if I have `namespace NS2{ struct A; NS::B b; auto val = b.getA(); }`
[19:41:44] <LordKalma> no
[19:41:48] <OnlineCop> Would `val` become `NS::A` or have the potential to become `NS2::A` ?
[19:42:05] <LordKalma> val would be of type NS::A
[19:42:14] <LordKalma> the namespace is part of the typename
[19:42:40] <OnlineCop> Cool. Thanks!
[19:42:46] <LordKalma> in that case you have a variable NS2::var that's of type NS::A
[19:42:48] <Alipha> getA's return type was determined at the point you declared getA. it doesn't matter where you call getA
[19:42:55] <LordKalma> it's the *var* that's attached to NS2
[19:47:21] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[19:50:40] <Haohmaru> LordKalma that was PJBoy's "saddest infinite loop ever"
[19:50:46] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 272 seconds)
[19:51:08] <PJBoy> infinite sadness
[19:51:15] <Haohmaru> don't look at what it does, look at how it looks
[19:51:21] <Haohmaru> it's crying
[19:57:12] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:57:28] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:59:43] <Shell> very sad
[20:05:19] *** Quits: john99 (~john99@175.246.103.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[20:06:16] <LordKalma> here I was thinking about FFTs. so, like, there's a lot of dicussion about depth-first or breath-first, and especially memory locality
[20:06:49] <LordKalma> but, like, if you have a memory location to read the input, a memory location to write the output, and a memory location with the twiddle factors... hasn't the memory locality went to shit anyway?
[20:07:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[20:09:40] <Haohmaru> no one said DSP is convenient for your CPU
[20:10:02] <LordKalma> sure,
[20:10:28] <LordKalma> I'm just wondering why these arguments come up in a vacuum, but then they fall short facing the reality of the rest of the program
[20:10:46] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:10:50] <LordKalma> like this book says recursive, depth-first, implementatiosn are often argued for because of their memory locality
[20:11:01] <LordKalma> but that is just valid on a vacuum
[20:11:11] <LordKalma> the twiddle factor must come from somewhere
[20:11:14] <LordKalma> the output must be written
[20:11:37] *** Joins: john99 (~john99@175.246.103.34.bc.googleusercontent.com)
[20:13:28] <LordKalma> sure saying `input[0]*input[1]` is better than `input[0]*input[432]`, but like, `output[0] = input[0]*factors[3]*input[1]` isn't exactly the same as just the original operation
[20:13:49] <LordKalma> as with most things, the conclusion is everybody talks out of their ass, and without measuring, nothing is better.
[20:16:22] <ashafq> !rq
[20:16:23] <nolyc> ashafq: <cbreak> rmd: welcome back to c++. Here you can log with confidence to not download DLLs from a random third party and execute it.
[20:16:39] <LordKalma> Haohmaru, of course I always use PCIe Gen4 FPGAs to implement my DSP algorithms
[20:16:54] <PJBoy> memory locality is still valid when you do stuff like `out[i] = op(in0[i], in1[i])` or whatever
[20:17:06] <ashafq> LordKalma: O that sounds exciting. Video?
[20:17:21] <LordKalma> ashafq you clearly missed the sarcasm :p
[20:17:30] <PJBoy> you don't (necessarily) lose the cache holding in0 when you load from in1
[20:17:32] <LordKalma> but my SDRs often do have on-board FPFAs
[20:17:58] <ashafq> <Alipha> constexpr std::string_view: thanks
[20:18:49] <LordKalma> https://www.ettus.com/all-products/ub210-kit/ this is the best toy I have. It has a Spartan 6 XC6SLX150 FPGA
[20:19:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:19:28] <ashafq> DSPs are cool if you're doing fixed point signal processing
[20:20:00] <LordKalma> honestly, CPUs are fast
[20:20:14] <ashafq> Yes, CPUs are really fast.
[20:20:16] <LordKalma> like, of course even the SIMD pipeline is limited. but the old stories of OMG AVOID MULTIPYING don't hold
[20:20:36] <LordKalma> Intel intrinsincs multiply a vector of 4 floats in half-a-cycle
[20:20:58] <Haohmaru> who even uses intel
[20:21:03] <ashafq> I do?
[20:21:04] * Haohmaru hides
[20:21:25] <PJBoy> clearly this year is the year of the ARM desktop
[20:21:26] <LordKalma> https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#techs=AVX2&ig_expand=27
[20:21:27] <Haohmaru> fixedpoint isn't fun
[20:21:49] <LordKalma> latency 1, CPI 0.5
[20:21:52] <LordKalma> can't be faster than that
[20:21:58] <Haohmaru> PJBoy this year (as well as last year) is the year of global IC shortage
[20:22:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[20:22:19] <PJBoy> there's more metrics to measure execution time than just cycles and latency
[20:22:22] <ashafq> LordKalma: Did I mention that I wrote a hand optimized 256 point complex FFT just over 1 microsecond
[20:22:43] <LordKalma> cool
[20:22:46] <ashafq> Well, I didn't write it in a microsecond. The benchmark was 1 microsecond 😊
[20:22:50] <LordKalma> PJBoy just an example
[20:22:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:23:01] <PJBoy> not arguing that it's stupid fast though
[20:23:14] <PJBoy> because it most certainly is stupid fast
[20:23:15] <LordKalma> ashafq I'm writing some naive code, and see what comes out :)
[20:24:10] <LordKalma> if it's 25% of pffft it's a win
[20:24:36] <ashafq> LordKalma: The trick is to use higher order radix to compute FFT
[20:24:47] <LordKalma> I'm starting with a radix-2
[20:24:51] <ashafq> I pretty much used the famous 4-step metho
[20:24:53] <ashafq> method*
[20:24:55] <LordKalma> i'm just learning and doing stuff for fun
[20:25:04] <LordKalma> famous not for me hahah
[20:25:15] <ashafq> Radix-2 is proably the slowest in intel/arm
[20:25:28] <Haohmaru> what was this radix even about
[20:25:40] <LordKalma> Haohmaru it's the smallest butterfly you use
[20:25:52] <Haohmaru> i recently had to write "radix" something in my code
[20:26:03] <Haohmaru> oh, in my silly BOM tool
[20:26:07] <ashafq> LordKalma: https://github.com/ashafq/bina-fft/tree/v0.0.1 that was 10 years ago, so excuse bad code.
[20:26:17] <ashafq> That was radix-2
[20:26:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[20:27:37] <LordKalma> cool!
[20:29:06] <ashafq> LordKalma: Also, I think this is probably the Bible for FFTs in Intel/ARM https://www.nas.nasa.gov/assets/pdf/techreports/1989/rnr-89-004.pdf
[20:29:44] <ashafq> Page 7 contains the TL;DR; steps 😊
[20:30:28] <ashafq> LordKalma: Sorry, I get excited about FFTS 😊
[20:30:43] *** Joins: AmR (~AmREiSa@156.199.236.198)
[20:31:03] <LordKalma> thanks :) I'm very very very very far from any of this :)
[20:31:03] <LordKalma> but thanks
[20:31:05] <Haohmaru> you could say, fft twiddles his bits
[20:31:29] * Haohmaru hides
[20:31:34] <ashafq> LOL
[20:31:40] <LordKalma> oh why did you do the /me before I could !grab :(
[20:32:14] <Haohmaru> meh, live for the moment ;P~
[20:34:03] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:a11a:9fad:b169:74bb) (Remote host closed the connection)
[20:34:27] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b1b7:fbcf:dd90:fada)
[20:37:00] *** Joins: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at)
[20:37:15] *** Joins: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi)
[20:38:57] <malinus> ashafq: I would expect every FFT library is already optimized with those thoughts in mind
[20:40:50] <ashafq> malinus: Yes, most libraries are optimized. I write FFTs for fun, not really useful for production. Unless you need that N point FFT on that specific hardware.
[20:42:34] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:42:52] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:43:14] <malinus> ashafq: yeah I've done SIMD optimization for cortex-m based products myself for specific FFT lenghts.
[20:43:19] *** Quits: ville (~ville@user/ville) (Quit: ville)
[20:46:09] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[20:46:10] <malinus> ashafq: one of the few cases I found it easier to write asm than fighting with C++ and compiler/hardware specific stuff
[20:48:28] *** Joins: ville (~ville@user/ville)
[20:49:48] <CarloWood> Does anyone know of a VERY good bit mangler for 64 bits (64bit in and out) that is header only?
[20:51:01] <LordKalma> what's a bit mangler?
[20:51:22] <CarloWood> It should behave as if you generate a table of 2^64 large with all numbers between 0 and 2^64 in it; then randomize it with a true random generator - and then hash values by returning what is in that table at the given index.
[20:51:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:52:28] <Haohmaru> sounds so simple according to the description ;P~
[20:52:49] <LordKalma> "true random generator"
[20:52:54] <LordKalma> do you have a laser and a beam splitter?
[20:53:04] <CarloWood> I guess that was I need is a random generator with an internal state of 64 bits that repeats after 2^64 - 1 times... hmm.  Lemme find an irreducible polynomial of degree 64.
[20:53:12] <LordKalma> and two single-photon counters
[20:55:08] *** Quits: john99 (~john99@175.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[20:56:30] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[20:58:37] <kalven> CarloWood: i believe some version of murmurhash meets that requirement for 64 bit inputs
[21:00:46] <CarloWood> https://www.hpl.hp.com/techreports/98/HPL-98-135.pdf gives: 62,29 63,1 64,4,3,1 65,18 66,3  (from its table)
[21:00:55] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:01:36] *** Joins: k8yun (~k8yun@user/k8yun)
[21:02:16] <CarloWood> So, t^64 + t^4 + t^3 + t + 1  is irreducible.
[21:03:25] *** Joins: gehn (~gehn@user/gehn)
[21:03:53] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[21:04:09] * PJBoy is still skeptical of true randomness
[21:05:14] <Haohmaru> !flipcoin
[21:05:14] <nolyc> Haohmaru: Error: "flipcoin" is not a valid command.
[21:05:20] <Haohmaru> !coinflip
[21:05:22] <nolyc> Haohmaru: Error: "coinflip" is not a valid command.
[21:05:30] <Haohmaru> huh, how was it
[21:06:01] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:06:11] <PJBoy> << (experimental::randint(0, 1) ? "heads" : "tails")
[21:06:12] <geordi> tails
[21:07:35] <PJBoy> how has that not been merged yet
[21:07:38] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:08:03] <PJBoy> that's been in experimental for 7 years
[21:08:05] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:08:11] <rpav> too useful, not enough boilerplate
[21:09:17] <CarloWood> Hmm t^64 + t^4 + t^3 + t + 1, with t = 2 is 27 (mod 2^64)...
[21:10:57] <PJBoy> << t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t + t*t*t*t + t*t*t + t + 1; uint64_t t = 2;
[21:10:58] <geordi> 27
[21:11:01] <PJBoy> can confirm
[21:16:34] <CarloWood> This should do the trick then
[21:16:37] <CarloWood> { uint64_t s = 1; for (int n = 0; n < 10000; ++n) { auto v = gen(s); if (n % 1000 == 0) cout << hex << v << ' '; } } uint64_t gen(uint64_t& s) { uint64_t os = s; for (int i = 0; i < 64; ++i) { s <<= 1; if ((s & 0x8000000000000000ULL)) s ^= 27; } return os; }
[21:16:37] <geordi> 1 f096e66f435b4985 1e08a4f32bfaf65e c61f9f6d05b08733 3c7d58c90e7a1fba 845ffc146c884f3d e3a97d03f818b389 adeee9d25f2adf89 e0b795915adba8e9 c4d701d7c988e02b
[21:17:34] <CarloWood> err no... that test is wrong.
[21:18:36] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:1f05:adc1:9aab:893:2eec) (Ping timeout: 240 seconds)
[21:18:45] <PJBoy> double parentheses if :/
[21:19:50] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:20:16] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Quit: Quit)
[21:21:14] <LordKalma> dumb question: can you have like local helper functions with the same name across multiple TUs?
[21:21:25] <LordKalma> assuming they are only declared/defined/used on a single cpp file
[21:21:29] <LordKalma> (each)
[21:21:49] <kalven> if they have internal likage, sure
[21:21:50] <PJBoy> if it has internal linkage, yeah
[21:21:55] <kalven> HIGH FIVE
[21:22:15] <kalven> left hanging..
[21:22:30] <LordKalma> so I have to declare them static?
[21:22:45] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:49c3:3805:b874:d1c)
[21:22:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:23:12] * PJBoy waits for kalven to shamefully high five himself
[21:23:16] <kalven> or put them in an anonymous namespace
[21:23:28] <LordKalma> ah yes, great idea
[21:23:29] * Friithian high fives kalven 
[21:24:06] <PJBoy> alternatively put the function in a module and don't export it
[21:24:44] <LordKalma> yeah, I'm doing old-school C++,. sorry
[21:24:51] <LordKalma> when cmake supports modules, I'll think about it :)
[21:24:59] <PJBoy> inexcusable, I will never help you again
[21:25:22] <LordKalma> hahaha who will you ask conan questions then?
[21:25:46] <PJBoy> shit
[21:25:50] <LordKalma> speaking of, I have a RFC to write
[21:26:00] <LordKalma> tomorrow
[21:26:10] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b1b7:fbcf:dd90:fada) (Ping timeout: 268 seconds)
[21:26:13] *** Joins: paul424 (~tom@ip-5-172-236-96.multi.internet.cyfrowypolsat.pl)
[21:26:30] <PJBoy> a request for comments or a remote function call?
[21:26:54] <Friithian> requesting a function call
[21:28:07] <LordKalma> radical functional coding
[21:28:33] <LordKalma> (request for comment. Conan uses the RFC system, and I raised an issue I was told to move to github for formal discussion)
[21:31:11] <PJBoy> ah right
[21:35:11] *** Joins: Guest7453 (~Guest@host236.190-137-37.telecom.net.ar)
[21:37:06] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[21:40:55] <CarloWood> kalven: I am baffled by this - maybe you have a smart idea :/.  I wrote a hash(i1, i2) function that has two 64bit ints as input and one 64bit int as output.  I generate a table of 200 values and calculate the hash(0, val) for each of them using my function.  I then find the two hash values that have to most number of bits that are the same.
[21:41:01] <rpav> PJBoy: std::pow? =P
[21:41:23] <LordKalma> I have vector<vector<T>> foo; and to add a new vector<T> to foo, with N elements, I'm writing foo.emplace_back(vector<T>(N)); Is there a better way without that explicit constructor there?
[21:41:23] <CarloWood> This gives me ~45 bits are the same.
[21:41:56] <PJBoy> rpav, doubtful that it would work
[21:42:19] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[21:42:35] <rpav> also with uint64_t, isn't t^64 probably 0 in any case
[21:43:06] <PJBoy> if t were 1 for example, it wouldn't be 0
[21:43:21] <rpav> errrrr, ^ is xor here
[21:43:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:36] <kalven> CarloWood: why are you writing your own hash function?
[21:43:39] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:39] *** ChanServ sets mode: +v npaperbot
[21:43:43] <PJBoy> then it would only be 0 if t were 64
[21:43:59] <CarloWood> I guess this can be explained... we have "random values" but pairing up 2 out of a group of 200 is kinda like the birthday paradox - so we expect a lot more bits to be equal than half of them, which would be the case when you just compare two random numbers period.
[21:44:07] <rpav> yea i read that as t^x = pow(t,x);
[21:44:15] <rpav> rather than xor
[21:44:22] <PJBoy> it is pow, yeah
[21:44:39] <rpav> oh rihgt because you multiplied it
[21:45:25] <PJBoy> std::pow is problematic because it does floaty point stuff
[21:45:45] <rpav> probably not an issue with integers, esp with double
[21:45:55] <CarloWood> Next I generate the hash of each pair (200 * 199 pairs) of those 200 values, so that gives 39800 hash values - and then pair THOSE up to get 1584000200 pairs and find the pair with the largest number of equivalent bits. Now I get ~54 bits that are the same.
[21:45:59] <gehn> speaking of writing ones own hash functions, is there some good centralized catalog of various known ways of writing hash functions? I may actually need to do this
[21:46:03] <PJBoy> I think it would be in general
[21:46:08] <CarloWood> The question now is: why 54? :)
[21:46:26] <LordKalma> https://xkcd.com/221/
[21:47:06] <PJBoy> << t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t*t, uint64_t(pow(3, 64)) ; uint64_t t = 3;
[21:47:07] <geordi> 8733086111712066817, 0
[21:47:43] <PJBoy> 3^64 requires a shitload of precision
[21:47:45] <CarloWood> kalven: I then replaced my hash by applying murmur_hash_64 100000 times on each of the input values - in order words - EXTREME random mangling. Can't do it better right?  Now I get 56 bits that are the same... two more than with my hash function :/
[21:48:10] <kalven> CarloWood: okay, what's the point of this exercise?
[21:48:51] <CarloWood> The question is: why does this happen. Don't answer my question with a 'why' question. You always do that :/
[21:49:33] <PJBoy> `uint64_t(remainder(pow(3, 64), 0x1'0000'0000'0000'0000.0p0))` is probably a better attempt
[21:49:46] <kalven> because I'm curious.. I don't know what you're going for with pairing up hash values
[21:50:29] <CarloWood> To test the hash function of course.
[21:50:31] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[21:50:56] <PJBoy> << numeric_limits<double>::digits // this is 54ish
[21:50:57] <geordi> 53
[21:51:13] <PJBoy> did you accidentally use a double somewhere?
[21:51:26] <CarloWood> I don't want the hash values to be equal - obviously - that would give collisions.  But by just looking at the number of bits that are equal I can get an idea of how well it performs too.
[21:51:28] <PJBoy> such as via std::pow
[21:51:54] <kalven> okay.. if you are writing your own hash function and want to test it, plug it into smhasher
[21:52:04] <kalven> and stop dicking around with other stuff
[21:52:36] *** Quits: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at) (Ping timeout: 240 seconds)
[21:52:46] <CarloWood> no - because my input values are not uniformly distributed (at ALL)
[21:53:13] <kalven> uh, yeah.. that's typically why you want a hash.. turn something that isn't uniform to something that is
[21:53:22] <CarloWood> I want to test how well it performs for values that are representable for memory allocation pointers.
[21:54:09] <CarloWood> Thus, I have to give a lot more weight to bits 2,3,4,5...etc than to bits 0,1,63,62,61,... etc
[21:55:16] <CarloWood> A really good hasher that would mangle ALL 128 input bits equally would perform less good than my hash function I think.
[21:55:41] <CarloWood> Maybe that is the reason that I get 54 bits that are the same, and murmur gives me 56.
[22:01:19] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[22:02:12] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:49c3:3805:b874:d1c) (Ping timeout: 240 seconds)
[22:02:21] *** Joins: eck (~root@user/eck)
[22:04:01] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0)
[22:05:27] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:06:25] *** Joins: gareppa (~gareppa@user/gareppa)
[22:08:24] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[22:08:34] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0) (Ping timeout: 250 seconds)
[22:10:20] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0)
[22:14:27] *** Quits: ville (~ville@user/ville) (Quit: ville)
[22:14:36] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0) (Ping timeout: 240 seconds)
[22:15:32] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:15:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:15:47] <cbreak> with a perfect hash function, changing any single bit will have about 50% chance to change every single bit in the hash
[22:15:57] *** Joins: ville (~ville@user/ville)
[22:16:49] <cbreak> so, on average, 50% of the bits should stay the same
[22:16:52] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0)
[22:20:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:20:17] <cbreak> CarloWood: https://en.wikipedia.org/wiki/Binomial_distribution
[22:20:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[22:21:18] *** Quits: Tokamak (~Tokamak@172.58.188.181) (Quit: Textual IRC Client: www.textualapp.com)
[22:21:53] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[22:22:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:22:20] *** Joins: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[22:22:25] *** Joins: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[22:22:31] *** Quits: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Client Quit)
[22:22:41] <cbreak> I'm not that great with statistics, but I think there are significance tests you can use to either accept or reject the null hypothesis (which would be that the hashes are uncorrelated)
[22:22:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[22:24:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:24:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[22:24:51] <kalven> smhasher is the gold standard for testing hash functions, but CarloWood is convinced that he needs something that weighs certain bits differently
[22:25:18] <Friithian> why would you want differents bits weighted differently
[22:25:20] <Friithian> I smell xy
[22:25:25] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:25:43] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:26:10] *** Joins: soman (~soman@83.139.179.68)
[22:26:27] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[22:27:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[22:29:00] <rpav> there's no way with c++20 auto templates to relate the types?
[22:30:52] *** Quits: meicceli (meicceli@kapsi.fi) (Quit: WeeChat 3.3)
[22:31:40] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:32:16] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 272 seconds)
[22:35:18] *** Quits: soman (~soman@83.139.179.68) (Quit: Client closed)
[22:37:59] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:38:12] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[22:40:27] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[22:47:25] <ville> decltype?
[22:53:55] <rpav> not usefully i think
[22:55:53] *** Quits: undephin3d (~undephin3@158.181.80.35) (Ping timeout: 256 seconds)
[22:56:18] <rpav> ok you can for this i guess, it's just fugly
[22:58:03] *** Joins: meicceli (meicceli@kapsi.fi)
[22:58:23] <rpav> i feel like there ought to be an symbolic operator for decltype
[23:00:38] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Ping timeout (120 seconds))
[23:01:00] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0) (Ping timeout: 240 seconds)
[23:02:50] <ville> or just have a reasonable syntax for naming without template prelude. void f($T x, T y); would kill two birds with one stone. you have a name for the type and you now also have said that the two types are the same, and the first one is used for deduction. removing the need for identity
[23:02:57] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:03:04] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0)
[23:03:23] <rpav> yea
[23:03:27] *** Joins: xkuru (~xkuru@user/xkuru)
[23:03:32] <ville> *replace $ with your favourite sigil)
[23:03:48] <rpav> i sortof hate $ but mostly because perl
[23:03:53] <rpav> it works there
[23:04:18] <rpav> $T f(T x, T y)
[23:05:08] <rpav> next, $ alone can replace auto ;)
[23:05:13] <rpav> `$ x = ...`
[23:06:47] <rpav> we need a C++ equivalent of Twain's(?) "plan for improvement of english"
[23:07:30] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0) (Ping timeout: 250 seconds)
[23:12:06] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[23:13:30] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0)
[23:17:08] *** Quits: proller (~p@2a02:6b8:b081:b646::1:9) (Ping timeout: 252 seconds)
[23:18:20] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[23:19:18] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:19:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0) (Ping timeout: 240 seconds)
[23:20:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:21:26] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0)
[23:22:36] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[23:23:58] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[23:29:54] *** Joins: proller (~p@2a02:6b8:b081:b583::1:33)
[23:30:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0) (Ping timeout: 240 seconds)
[23:32:25] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:bc27:5786:5d33:eaa0)
[23:32:41] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[23:35:45] <pulse> !rq
[23:35:46] <nolyc> pulse: <PJBoy> nah I read correctly, I thunked incorrectly
[23:36:41] <rpav> witness bitness
[23:39:52] *** Joins: ivii (~ivan@user/ivii)
[23:41:03] <Alipha> CarloWood: what are you using this hash function for? For use in unordered_map and related?
[23:42:59] <Alipha> LordKalma: foo.emplace_back(N); though I'd rather be more explicit, I think, as emplacing back an integer which actually is creating a vector looks odd
[23:49:48] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 240 seconds)
[23:50:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:50:39] <LordKalma> so you agree like i did it?
[23:50:56] <LordKalma> I was just wondering if that would invoke the move constructor from the temporary
[23:51:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:52:49] <Alipha> LordKalma: yes, the move ctor will get called, unless the compiler optimizes it out
[23:53:16] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:d94a:5af7:3b65:8539) (Ping timeout: 245 seconds)
[23:53:26] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[23:53:54] <LordKalma> okay, my intuition was right then
[23:54:21] <Alipha> Maybe add a comment? `foo.emplace_back(N); // emplace_back a std::vector<T>(N)`
[23:57:48] <LordKalma> https://godbolt.org/z/4cejfKv1a
