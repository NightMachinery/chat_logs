[00:00:09] *** Joins: bomb (~bomb@user/bomb)
[00:25:13] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (Ping timeout: 252 seconds)
[00:35:03] *** Joins: ratchetfreak_ (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be)
[00:36:34] <RhodiumToad> lua_lock is available to be defined to something else if you're building a multithreaded lua
[00:37:04] <RhodiumToad> by default, the assumption is that a single lua_State is not shared between threads
[00:38:14] *** Quits: ratchet_freak (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be) (Ping timeout: 268 seconds)
[00:45:55] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[00:56:34] *** Joins: pony (~ed@smol/hors)
[01:08:04] *** Quits: kurfen (~kurfen@37.120.204.67) (Quit: WeeChat 2.3)
[01:13:53] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 264 seconds)
[01:16:04] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[01:16:12] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[01:16:56] *** Quits: bomb (~bomb@user/bomb) (Quit: o/)
[01:22:35] *** Quits: bjne (~bjne@2a01:799:a9e:3400:1cd3:7f89:d92c:a586) (Ping timeout: 264 seconds)
[01:26:20] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:3c81:12c5:ede2:fb22) (Quit: Textual IRC Client: www.textualapp.com)
[01:27:07] *** Quits: Elw3 (~Elw3@dynamic-002-247-241-044.2.247.pool.telefonica.de) (Quit: Leaving)
[01:31:12] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[01:50:59] *** Quits: magla (~gelignite@55d44e8b.access.ecotel.net) (Quit: Stay safe!)
[02:03:57] *** Quits: ArRay (~ArRay_@user/array/x-1947090) (Ping timeout: 276 seconds)
[02:12:21] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[02:16:53] *** Joins: ArRay (~ArRay_@user/array/x-1947090)
[02:18:31] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (Ping timeout: 252 seconds)
[02:20:19] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:3c81:12c5:ede2:fb22)
[02:32:30] *** Quits: pizdets_ (~pizdets@183.182.114.178) (Ping timeout: 250 seconds)
[02:33:49] *** Joins: pizdets (~pizdets@183.182.110.175)
[02:42:08] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[02:42:35] *** Joins: pony (~ed@smol/hors)
[03:09:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[03:14:53] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:25:43] *** Quits: reset (~reset@user/reset) (Quit: reset)
[03:28:26] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[03:29:34] *** Joins: caoliver (~caoliver@047-026-150-227.res.spectrum.com)
[03:35:20] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:40:27] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Read error: Connection reset by peer)
[03:40:45] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[03:46:52] *** Quits: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr) (Quit: bye)
[03:47:49] *** Joins: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be)
[04:34:17] *** Quits: unclutter (~gentoo@60.81-166-246.customer.lyse.net) (Ping timeout: 264 seconds)
[04:52:25] *** Quits: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be) (Ping timeout: 265 seconds)
[05:00:42] *** Joins: unclutter (~gentoo@60.81-166-246.customer.lyse.net)
[05:01:37] *** Joins: gggpkm (~gggpkm@li2015-124.members.linode.com)
[05:04:37] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[05:05:10] *** Quits: Munto (~Munto@80.214.25.217) (Ping timeout: 252 seconds)
[05:05:42] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[05:06:21] *** Quits: fcr (~fran@r167-60-96-107.dialup.adsl.anteldata.net.uy) (Ping timeout: 245 seconds)
[05:10:14] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Client Quit)
[05:11:22] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[05:11:22] *** Joins: fcr (~fran@r186-48-131-239.dialup.adsl.anteldata.net.uy)
[05:12:58] *** Joins: reset (~reset@user/reset)
[05:13:02] *** Joins: kiril (~kiril@85.91.153.163)
[05:19:21] *** Joins: Munto (~Munto@120.51.3.93.rev.sfr.net)
[05:36:46] *** Quits: chewbranca (sid35447@couchdb/committer/chewbranca) (Ping timeout: 245 seconds)
[05:52:37] *** Joins: chewbranca (sid35447@couchdb/committer/chewbranca)
[06:31:27] *** Joins: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be)
[06:35:35] *** Quits: ratchetfreak_ (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be) (Ping timeout: 260 seconds)
[06:44:27] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:16:35] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 264 seconds)
[07:33:19] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[07:33:48] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[07:47:00] *** Quits: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be) (Read error: Connection reset by peer)
[07:49:04] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[07:49:32] *** Joins: ano (~ano@user/ano)
[08:24:51] *** Quits: caoliver (~caoliver@047-026-150-227.res.spectrum.com) (Quit: Leaving)
[08:55:29] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:13:55] *** Quits: low-key (~low-key@2400:6180:0:d1::6fb:1) (Quit: connection reset by purr)
[09:18:44] *** Joins: kurfen (~kurfen@37.120.204.67)
[09:31:20] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[09:41:48] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:43:15] *** Joins: caoliver (~caoliver@047-026-150-227.res.spectrum.com)
[10:53:32] *** Joins: netlynx (~jan@94-226-69-15.access.telenet.be)
[11:03:08] *** Joins: bjne (~bjne@2a01:799:a9e:3400:3822:913b:bd1:1d0e)
[11:17:27] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-07a5-9100-21af-c140-9338-0d68.dyn.netcomnetz.de)
[11:20:56] *** Quits: bjne (~bjne@2a01:799:a9e:3400:3822:913b:bd1:1d0e) (Ping timeout: 245 seconds)
[11:22:52] *** Quits: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net) (Ping timeout: 268 seconds)
[11:36:31] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:46] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[11:37:07] *** Joins: ksynwa (~ksynwa@5.45.111.57)
[11:37:38] <ksynwa> Anyone knows if lua supports some code like python's `b = [n*2 for n in a]`? Wanting to do something like this for a table of numbers.
[11:38:10] *** Joins: parv (~quass@user/parv)
[11:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:02] <MattJ> ksynwa, this feature is known as "list comprehension", and no, Lua doesn't have that
[11:40:15] <ksynwa> MattJ: Thanks.
[11:40:36] <MattJ> You'll find that Lua's syntax is kept very minimal, which many consider a feature
[11:40:50] <MattJ> But if you're used to Python, you'll find many things like that to be "missing"
[11:41:26] <ksynwa> MattJ: Makes sense. Thanks for the explanation.
[11:42:21] <RhodiumToad> in general assigning a lot of elements to a table requires explicit looping and assignment of individual elements
[11:42:49] <RhodiumToad> (there are exceptions)
[12:03:33] *** Joins: fling (~fling@user/fling)
[12:04:59] *** Joins: Lemniscate (~sauvin@about/linux/staff/sauvin)
[12:07:34] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 252 seconds)
[12:10:50] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[12:39:50] <kakolainen[m]> you could use a dirty functional methamethod like b = setmetatable({},{__index=function(_,n) if n<=a then return n*2 end})
[12:40:56] <kakolainen[m]> but since __ipairs was removed it might get buggy
[12:41:32] <RhodiumToad> I don't think the __ipairs removal would affect that
[12:42:14] <RhodiumToad> rather the reverse in fact
[12:43:38] <kakolainen[m]> if it was infinite table then __ipairs removal wouldn't matter but since a is limit then ipairs can work
[12:46:35] <kakolainen[m]> I think in Python you can iterate infinite arrays
[12:53:08] <RhodiumToad> ipairs now just iterates until it finds a nil.
[12:53:34] <RhodiumToad> but it respects __index when fetching those values
[12:58:16] <kakolainen[m]> oh you are right it works perfectly in 5.4
[12:59:49] <RhodiumToad> the reason why __ipairs was added originally was because ipairs() wasn't respecting __index
[13:00:27] <RhodiumToad> but that was changed, which led roberto to conclude (incorrectly in my opinion) that __ipairs was no longer needed
[13:05:20] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:10:57] *** Joins: Elw3 (~Elw3@dynamic-002-247-243-075.2.247.pool.telefonica.de)
[13:12:15] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:12:29] <avih> RhodiumToad: i presume you refer to this in 5.3? " The ipairs iterator now respects metamethods and its __ipairs metamethod has been deprecated. "
[13:12:40] <avih> what's a practical implication of this?
[13:14:14] <avih> (i didn't use 5.3, and didn't try to consider what it implies)
[13:17:05] <furq> mostly that ipairs respects __index
[13:17:50] <furq> %5.2 local t = setmetatable({}, { __index = function(t, i) if i < 10 then return i end end }) for i, v in ipairs(t) do print(i, v) end
[13:17:50] <yalb> furq: 
[13:17:53] <furq> %5.3 local t = setmetatable({}, { __index = function(t, i) if i < 10 then return i end end }) for i, v in ipairs(t) do print(i, v) end
[13:17:53] <yalb> furq: 1 1; 2 2; 3 3; 4 4; 5 5; 6 6; 7 7; 8 8; 9 9
[13:18:52] <pony> nice
[13:19:48] <furq> 5.1 had no way of doing anything like that, 5.2 had __ipairs which would specifically be called by ipairs
[13:20:08] <furq> then 5.3 just made __ipairs check index which is not quite the same but i guess covers the use cases roberto imagined for it
[13:20:14] <furq> made ipairs check __index
[13:21:53] <avih> furq: thx.
[13:22:21] <avih> and which use cases become harder with this change?
[13:22:36] <avih> (i.e. not what "roberto imagined")
[13:23:07] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:23:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:24:38] <furq> you might want to provide a custom iterator with __ipairs without affecting the other stuff __index implies
[13:24:49] <furq> you can just provide the iterator another way though
[13:25:12] <avih> by the way, can a table be created which ignores its __index key and similar? e.g. if one wants to create a table to hold arbitrary string keys? (without hacks like using a fixed prefix for all keys)
[13:25:39] <furq> __index doesn't do anything unless it's in a metatable
[13:25:50] <avih> hmm
[13:26:09] <furq> you can use __ prefixed keys all you want in a plain table
[13:26:37] <furq> and you shouldn't be setting arbitrary keys in a metatable anyway
[13:26:46] <avih> sure
[13:26:58] <furq> in spite of what PiL says
[13:27:06] <avih> PiL?
[13:27:10] <furq> programming in lua
[13:27:15] <furq> the official book
[13:27:29] <furq> i think they might have changed that in the newest one, i forget now
[13:27:58] <furq> but the __index examples in that book reuse the metatable for the __index table
[13:28:10] <furq> i don't think it's a recommendation it's just laziness
[13:28:28] <pony> Roberto
[13:28:31] <avih> didn't read it. i only read the reference manuals.
[13:29:01] <furq> i only ever read the c api section 
[13:29:08] <avih> (and i'm not yet 100% fluent in lua)
[13:29:47] <furq> it's a fine book but lua isn't exactly ornate enough to require a k&r
[13:30:38] <avih> well, i prefer a reference.
[13:30:49] <furq> yeah the manual is much more useful
[13:30:51] <kakolainen[m]> if you want the new 5.4 ipairs in old Lua you can probably just override the global ipairs with  local ipairs=function(tbl) return (function(tbl,i) i=i+1;if tbl[i]~=nil then return i,tbl[i] end end),tbl,0 end
[13:30:54] <avih> assuming it's the most accurate description of the language.
[13:31:02] <avih> (and apis etc)
[13:34:01] <avih> kakolainen[m]: right, though currently i don't have plans for 5.4. it was just mentioned here, i looked it up, and wasn't sure what it implies in practice, but thanks.
[13:36:19] <RhodiumToad> avih: the main thing with __ipairs being gone is that it's no longer possible to produce optimized integer iterations on userdata
[13:37:33] <avih> i understand the words i don't think i even understand what it means :)
[13:38:09] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:38:12] <avih> what are "integers iterations over user data"? how it can be optimized? what why does this change prevent this?
[13:38:34] <avih> (i didn't start it ;) )
[13:38:53] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:39:32] <RhodiumToad> ok, suppose you have a userdata that represents some external buffer, say a sequence of variable-length strings
[13:39:43] <avih> yup
[13:39:48] <RhodiumToad> and buf[1] gets the first string, buf[2] the second, etc.
[13:40:00] <avih> from lua, yes?
[13:40:03] <RhodiumToad> but those slow down because of having to skip over the first n values
[13:40:51] <RhodiumToad> with an __ipairs metamethod, you could keep track of the position through the loop, rather than having to do each lookup from scratch
[13:41:29] <avih> you mean that the c "backend" implementation of virtual indexes is linear depending on n?
[13:41:41] <RhodiumToad> yes (in this example)
[13:41:46] <avih> yeah
[13:42:19] <RhodiumToad> i.e. the __index metamethod is linear in n, and that makes ipairs() quadratic in n
[13:42:30] <RhodiumToad> whereas before you could provide a linear __ipairs
[13:43:00] <avih> ok, i got all this (thanks), but i haven't used __ipairs, so i don't grasp it yet
[13:43:18] <avih> (obviously i did use ipairs)
[13:43:59] <avih> wait, let me read the docs on __ipairs
[13:44:57] <kakolainen[m]> are you using some "statefull" __ipairs to achieve that  linear ipairs?
[13:45:59] <avih> you remember the position of the last n at the c dtastructure, and you start from there instead of from 1
[13:46:08] <avih> last used* n
[13:46:43] <RhodiumToad> not in the C datastructure itself, but in the closure that you return from __ipairs
[13:46:52] <avih> yeah
[13:47:03] <avih> at the state of _ipairs
[13:47:23] <RhodiumToad> obviously by returning a closure you can keep as much state as you need, you're not limited to one state variable
[13:48:03] <avih> so how is it different now? because you don't get to keep a state per iterator?
[13:48:12] <furq> there's a nice section on stateful vs stateless iterators in pil
[13:48:36] <furq> https://www.lua.org/pil/7.3.html and the page after
[13:49:54] <furq> regular ipairs is always stateless
[13:50:02] <avih> "you're not limited to one state variable" <- right, so a state per iterator
[13:50:10] <avih> (can't do anymore)
[13:51:03] <RhodiumToad> avih: ipairs(t) now always returns ipairs_aux,t,1  and ipairs_aux just increments the index until t[i] is nil
[13:51:06] <furq> yeah and it's always 1..n
[13:51:16] <furq> or 1..#t rather
[13:52:54] <furq> like i said you can always provide your own iterator function 
[13:53:21] <avih> (apologies for using you guys as teachers for things i don't know. usually i prefer to ask only things i don't understand)
[13:54:05] *** Quits: gggpkm (~gggpkm@li2015-124.members.linode.com) (Read error: Connection reset by peer)
[13:55:12] <kakolainen[m]> last time I complained about iterators functionality because of the messy example how to recursively iterate throught metatables but then realized it's fairly easy to fix by setting an extended state in __pairs when creating the iterator  http://lua-users.org/wiki/NextMetamethodForIndexTable 
[14:03:15] <kakolainen[m]> ipairs is never reliably 1..#t, # can return any hole, ipairs stops at first hole
[14:08:45] <kakolainen[m]> also like in earlierl example when __index is function # doesn't work at all, even a __len methamethod would be very hard to do
[14:29:11] *** Quits: unclutter (~gentoo@60.81-166-246.customer.lyse.net) (Ping timeout: 264 seconds)
[14:32:11] *** Quits: Elw3 (~Elw3@dynamic-002-247-243-075.2.247.pool.telefonica.de) (Ping timeout: 268 seconds)
[14:38:51] *** Joins: Elw3 (~Elw3@dynamic-002-247-240-010.2.247.pool.telefonica.de)
[15:03:40] *** Joins: Guest10 (~Guest10@146.56.100.202)
[15:23:00] *** Quits: parv (~quass@user/parv) (Quit: parv)
[15:26:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:956a:a2ae:851e:8c1a)
[15:26:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:956a:a2ae:851e:8c1a) (Changing host)
[15:26:13] *** Joins: skapata (~Skapata@user/skapata)
[15:27:02] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[15:33:58] *** Quits: Guest10 (~Guest10@146.56.100.202) (Quit: Client closed)
[15:36:30] *** Joins: Guest10 (~Guest10@146.56.100.202)
[16:10:06] *** Joins: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr)
[16:25:03] *** Joins: Erska (~ErskaCont@mobile-access-5672e3-105.dhcp.inet.fi)
[16:25:35] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[16:26:03] *** Joins: unclutter (~gentoo@60.81-166-246.customer.lyse.net)
[16:55:17] *** Joins: bomb (~bomb@user/bomb)
[16:58:48] *** Joins: ratchetfreak_ (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be)
[16:59:03] *** Joins: bjne (~bjne@2a01:799:a9e:3400:3822:913b:bd1:1d0e)
[17:05:56] *** Quits: fcr (~fran@r186-48-131-239.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[17:13:45] *** Quits: bjne (~bjne@2a01:799:a9e:3400:3822:913b:bd1:1d0e) (Ping timeout: 260 seconds)
[17:17:16] *** Joins: fcr (~fran@r167-56-30-33.dialup.adsl.anteldata.net.uy)
[17:30:30] *** Joins: Vornicus (~Vornicus@cpe-23-243-151-111.socal.res.rr.com)
[17:32:42] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[17:37:05] *** Quits: Yorlik (~Yorlik___@ip6-2a03-7500-07a5-9100-21af-c140-9338-0d68.dyn.netcomnetz.de) (Ping timeout: 260 seconds)
[17:50:15] *** Quits: Erska (~ErskaCont@mobile-access-5672e3-105.dhcp.inet.fi) (Quit: Leaving)
[18:00:02] *** Quits: orthoplex64 (~crm@70.120.0.94) (Quit: Leaving)
[18:24:59] *** Joins: Yorlik (~Yorlik___@ip6-2a03-7500-07a5-9100-dd8f-1001-3e9e-f9c6.dyn.netcomnetz.de)
[18:42:22] *** Quits: Guest10 (~Guest10@146.56.100.202) (Quit: Client closed)
[19:01:53] *** Quits: bomb (~bomb@user/bomb) (Quit: ‏‏‎ ‎)
[19:24:27] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[20:30:21] *** Quits: reset (~reset@user/reset) (Read error: Connection reset by peer)
[20:31:32] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[20:36:38] *** Quits: ard (~ard@2001:984:74c7:1:21e:6ff:feff:ff03) (Ping timeout: 268 seconds)
[20:37:00] *** Joins: ard (~ard@2001:984:74c7:1:21e:6ff:feff:ff03)
[20:46:30] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[21:18:14] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:18:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:32:16] *** Quits: Elw3 (~Elw3@dynamic-002-247-240-010.2.247.pool.telefonica.de) (Remote host closed the connection)
[21:38:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:38:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:07:38] *** Quits: Bombo_ (atom@p2e58ef40.dip0.t-ipconnect.de) (Changing host)
[22:07:38] *** Joins: Bombo_ (atom@user/bombo)
[22:07:38] *** Bombo_ is now known as Bombo
[22:09:49] *** Quits: mniip (~mniip@libera/staff/mniip) (Ping timeout: 252 seconds)
[22:10:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:10:47] *** Joins: mniip (mniip@libera/staff/mniip)
[22:10:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:17:05] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[22:18:55] *** Quits: AndrewYu (~andrew@user/andrewyu) (Remote host closed the connection)
[22:19:39] *** Joins: AndrewYu (~andrew@user/andrewyu)
[22:23:02] *** Joins: reset (~reset@user/reset)
[22:28:32] *** Joins: magla (~gelignite@55d4f7e4.access.ecotel.net)
[22:29:14] *** Joins: JanC (~janc@user/janc)
[22:29:47] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:3c81:12c5:ede2:fb22) (Quit: Textual IRC Client: www.textualapp.com)
[23:12:10] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:28:50] *** Quits: ratchetfreak_ (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be) (Ping timeout: 260 seconds)
[23:30:10] *** Joins: Elw3 (~Elw3@dynamic-002-247-242-007.2.247.pool.telefonica.de)
[23:35:18] *** Joins: graywolf (~wolf@user/graywolf)
[23:36:05] *** Quits: Rue (~rue@2001-b011-1000-1a43-da47-348a-6a91-701c.dynamic-ip6.hinet.net) (Ping timeout: 264 seconds)
[23:37:43] *** Joins: Rue (~rue@2001-b011-1000-18ff-fb3e-5834-f648-5c3f.dynamic-ip6.hinet.net)
[23:48:04] *** Joins: ratchetfreak_ (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be)
[23:51:59] *** Quits: Xeago (~Xeago@user/xeago) (Ping timeout: 250 seconds)
