[00:08:09] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7)
[00:15:08] *** Quits: jellyknight (~gelignite@55d48808.access.ecotel.net) (Quit: Stay safe!)
[00:16:52] *** Quits: plantroon (~plantroon@91.236.69.232) (Quit: WeeChat 3.2)
[00:23:05] *** Joins: plantroon (~plantroon@91.236.69.232)
[00:28:40] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7) (Ping timeout: 252 seconds)
[00:30:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[00:34:39] *** Quits: guido (~guido@host-79-46-249-55.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[00:40:55] *** Joins: rainmanj_ (~rainmanja@216.161.85.62)
[00:41:15] <rainmanj_> Anyone know of a way to generate UML Diagrams from PHP code?
[00:41:56] <__adrian> https://packagist.org/?query=uml
[00:42:55] <stenno> building a naive code-to-uml generator sounds like a fun hobby task
[00:43:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[01:05:19] *** Quits: stenno (~stenno@user/stenno) (Quit: WeeChat 3.2)
[01:05:29] *** Joins: stenno (~stenno@user/stenno)
[01:09:01] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7)
[01:13:16] <daoumilseitek> rainmanj_: in laravel there is schematics : https://github.com/mtolhuys/laravel-schematics
[01:13:37] <daoumilseitek> it keeps models synchronized with diagram view
[01:14:11] <daoumilseitek> also handles DB migrations i think
[01:29:10] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7) (Ping timeout: 252 seconds)
[01:44:57] *** Joins: bobdobbs (~user@14.137.23.74)
[01:45:02] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[01:53:53] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:19:54] *** Quits: tex (~super@user/dix) (Ping timeout: 245 seconds)
[02:34:36] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[02:38:29] *** Joins: semeion (~semeion@user/semeion)
[02:38:38] *** Quits: daoumilseitek (~daoumilse@164.96.146.77.rev.sfr.net) (Remote host closed the connection)
[03:00:13] *** Quits: bytestream (~bytestrea@user/bytestream) (Read error: Connection reset by peer)
[03:00:53] *** Joins: starz (starz@ns378512.ip-37-59-36.eu)
[03:18:48] *** Joins: ferdna (~ferdna@user/ferdna)
[03:20:29] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[03:28:56] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7)
[03:53:16] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7) (Ping timeout: 252 seconds)
[03:57:05] *** Quits: mr_gant_ (~mr_gant@144.48.37.134) (Ping timeout: 264 seconds)
[04:11:54] *** Joins: mr_gant_ (~mr_gant@203-206-182-122.perm.iinet.net.au)
[04:15:19] *** Quits: ArchNoob (~maotora@user/archnoob) (Ping timeout: 245 seconds)
[04:30:27] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:45:17] <znf> In the context of php-fpm, and most specifically it's status page, what exactly is "max active processes"
[04:46:05] <znf> I had the impression that 'max active processes' will always be as high as pm.max_children will allow (with pm=ondemand)
[04:47:01] <znf> but I'm looking at the status page and somehow even if I limited it to 4, I get "total processes:      22" and "active processes:     22"
[04:52:21] <znf> Also, whatever I use for listen.backlog, it doesn't reflect it in the status page, keeps saying 0 :-/
[04:52:59] <znf> oh, ok, I'm not crazy https://bugs.php.net/bug.php?id=80739
[04:59:47] *** Joins: vlm (~vlm@user/vlm)
[05:02:34] *** Quits: mr_gant_ (~mr_gant@203-206-182-122.perm.iinet.net.au) (Ping timeout: 252 seconds)
[05:02:58] *** Joins: mr_gant_ (~mr_gant@144.48.37.133)
[05:44:22] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[05:47:52] *** Joins: Rockwood (~Rocky@user/rocky)
[05:51:16] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7)
[05:54:44] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 246 seconds)
[06:01:13] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[06:04:07] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[06:19:40] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7) (Ping timeout: 252 seconds)
[06:22:25] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 252 seconds)
[06:28:39] *** Joins: Rockwood (~Rocky@user/rocky)
[06:29:41] *** Joins: Rockwood_ (~Rocky@user/rocky)
[06:30:13] *** Joins: ___Rockwood__ (~Rocky@user/rocky)
[06:33:30] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 260 seconds)
[06:34:26] *** Quits: Rockwood_ (~Rocky@user/rocky) (Ping timeout: 260 seconds)
[06:35:29] *** ___Rockwood__ is now known as Rockwood
[06:44:29] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[06:46:05] *** Joins: Rockwood_ (~Rocky@user/rocky)
[06:49:50] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 260 seconds)
[06:57:58] *** Joins: semeion (~semeion@user/semeion)
[07:04:34] *** Rockwood_ is now known as Rockwood
[07:23:52] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7)
[07:41:26] <Rockwood> hi
[07:41:30] <Rockwood> any active?
[07:51:25] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7) (Ping timeout: 252 seconds)
[07:59:12] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:17:13] *** Joins: Hiccup (cHoy@user/hiccup)
[08:25:49] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:36:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[08:42:18] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[08:43:04] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[08:43:58] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[08:53:51] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:01:47] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[09:03:29] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[09:04:47] *** Quits: LuKaRo_ (~LuKaRo@p4fc32be7.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[09:06:17] *** Joins: guido (~guido@host-79-52-253-238.retail.telecomitalia.it)
[09:08:44] *** Joins: LuKaRo (~LuKaRo@p4fc33c32.dip0.t-ipconnect.de)
[09:08:51] *** Joins: mactron (~mactron@APN-123-214-101-gprs.simobil.net)
[09:11:07] *** Quits: mactron_ (~mactron@apn-123-214-101-gprs.simobil.net) (Ping timeout: 252 seconds)
[09:33:55] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[09:34:57] *** Joins: tex (~super@user/dix)
[09:35:26] *** Quits: guido (~guido@host-79-52-253-238.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[09:39:16] *** Joins: ArchNoob (~maotora@user/archnoob)
[09:49:24] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7)
[09:53:04] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[09:57:56] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[10:00:34] *** Joins: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[10:09:55] *** Quits: jgrim2362 (~jgrim@d60-65-99-197.col.wideopenwest.com) (Read error: Connection reset by peer)
[10:18:55] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7) (Ping timeout: 252 seconds)
[10:35:33] *** Joins: stenno (~stenno@user/stenno)
[10:37:38] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[10:39:44] <brvadiraj46> hi
[10:40:01] <brvadiraj46> what is the difference between include and require
[10:41:33] <AllenJB> require will error if the specified file cannot be included, while include will not (still issues a warning if I recall correctly)
[10:42:22] <TinoDidriksen> You should pretty much always use require_once. There is a tiny usecase for plain include, but you almost certainly will never run into that. Just forget the other 3 exist and use require_once.
[10:45:02] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7)
[10:47:26] <Naktibalda> require_once for files containing classes or files, require for scripts or template files.
[10:47:34] <Naktibalda> classes or functions ^
[10:48:41] <biberu> shouldn't need to require class defs manually
[10:49:41] <TinoDidriksen> I still absolutely loathe that autoloaders can't understand a file full of namespaced free functions. Such a design flaw.
[10:50:19] <biberu> you still have to work around that with classes full of statics?
[10:52:54] *** DuckThom is now known as aloy
[10:53:56] <TinoDidriksen> Yup, and I refuse to do that.
[10:54:37] <biberu> hehe
[11:04:00] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Remote host closed the connection)
[11:14:36] *** Joins: fahrradToken (~fahrradTo@212.7.190.34)
[11:33:49] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7) (Quit: Leaving...)
[11:34:03] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7)
[11:48:21] *** Joins: delboy1978uk (~delboy197@202.42-132-109.adsl-dyn.isp.belgacom.be)
[11:57:39] *** Joins: mactron_ (~mactron@apn-123-214-101-gprs.simobil.net)
[12:01:07] *** Quits: mactron (~mactron@APN-123-214-101-gprs.simobil.net) (Ping timeout: 252 seconds)
[12:03:02] *** Joins: Warped (~Warped@user/warped)
[12:10:35] *** Joins: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch)
[12:14:37] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[12:40:40] *** Quits: mactron_ (~mactron@apn-123-214-101-gprs.simobil.net) (Ping timeout: 252 seconds)
[12:47:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:04:48] <dag> TinoDidriksen: do you use composer's "files" autoloading strategy for free functions? just curious
[13:10:31] <TinoDidriksen> No, I needed an autoconf.php anyway to set up some environment stuff, so I just have every file require_once that, and that will in turn pull in autoload.php and the other files. I did not see the point in editing a JSON file and having to regenerate Composer when I could just have PHP do it directly.
[13:11:33] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:17:40] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[13:31:31] *** Joins: bytestream (~bytestrea@user/bytestream)
[13:43:39] *** Quits: fahrradToken (~fahrradTo@212.7.190.34) (Ping timeout: 245 seconds)
[13:46:40] <ordos> TinoDidriksen, 100% agreed
[13:55:46] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[14:18:46] *** Joins: fahrradToken (~fahrradTo@212.7.190.34)
[14:28:11] *** Quits: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.3)
[14:29:11] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:30:54] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[14:38:12] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[14:41:30] *** Quits: d3sync (~d3sync@62.1.158.148) (Read error: Connection reset by peer)
[14:41:58] *** Joins: d3sync (~d3sync@62.1.158.148)
[14:43:39] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 245 seconds)
[14:48:47] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:54:22] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[15:28:28] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[15:28:30] *** Quits: Hiccup (cHoy@user/hiccup) (Remote host closed the connection)
[15:29:33] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:33:34] *** Joins: guido (~guido@host-79-52-253-238.retail.telecomitalia.it)
[15:38:14] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 245 seconds)
[15:42:44] *** Joins: pmercado (~pmercado@186.107.35.198)
[15:43:40] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[15:44:42] *** Joins: kenoba (~kenoba@user/kenoba)
[15:52:39] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[15:53:39] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 245 seconds)
[15:55:56] *** Quits: grawity (grawity@star.nullroute.eu.org) (Quit: grawity)
[16:12:24] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 245 seconds)
[16:13:13] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[16:20:17] *** Taripe is now known as ePirat
[16:23:28] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[16:23:50] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[16:26:04] *** Joins: semeion (~semeion@user/semeion)
[16:28:17] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[16:39:45] *** Joins: stenno (~stenno@user/stenno)
[16:42:43] *** Quits: ArchNoob (~maotora@user/archnoob) (Ping timeout: 252 seconds)
[16:54:28] *** Joins: chao (~stenno@user/stenno)
[16:55:55] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[16:58:55] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[17:03:37] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Client Quit)
[17:03:37] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 252 seconds)
[17:08:01] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[17:08:41] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[17:14:26] *** Joins: chao (~stenno@user/stenno)
[17:19:32] *** Quits: nicolai10 (~nicolai.f@xdsl-213-196-249-25.nc.de) (Quit: WeeChat 3.3)
[17:19:34] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 252 seconds)
[17:20:40] *** Joins: chao (~stenno@user/stenno)
[17:35:46] <DevAntoine> Does someone uses behat IntelliJ/PHPStorm under Docker? I'm having a hard time running  tests inside IntelliJ and using the CLI I'm not able to debug anything.
[17:37:42] <bytestream> Yeah PhpStorm/Docker compose/xdebug all working fine, only ran into 1 phpstorm which affects the $PWD env var
[17:46:32] *** chao is now known as stenno
[17:47:30] <DevAntoine> bytestream: you're able to directly launch a test my clicking on the green arrow inside PHPStorm ?
[17:47:53] <bytestream> DevAntoine, yep
[17:54:54] *** Quits: fahrradToken (~fahrradTo@212.7.190.34) (Ping timeout: 245 seconds)
[17:57:21] <DevAntoine> gosh, any idea why I've got the following error?
[17:57:27] <DevAntoine> > No specifications found at path(s) `/srv/app/features/job/job.feature:239`. This might be because of incorrect paths configuration in your `suites`
[17:57:32] <DevAntoine> (the path is the right one)
[17:57:54] <DevAntoine> If I run the command directly inside my container I've got no error.
[18:01:52] <DevAntoine> wow, never mind, I just updated behat and it's now working
[18:02:04] <DevAntoine> (we have locked deps, it's not easy to update project's deps)
[18:02:42] <DevAntoine> But I still have no clue on how to run xdebug with behat using phpstorm
[18:10:33] <DevAntoine> FOund it
[18:10:34] <DevAntoine> https://intellij-support.jetbrains.com/hc/en-us/community/posts/360009770579-Docker-debug-problem-Remote-file-path-home-www-Standard-input-code-is-not-mapped-to-any-file-path-in-project-?page=1#community_comment_360002303619
[18:10:37] <DevAntoine> This is tricky
[18:13:05] <DevAntoine> (but I'd still like to know how to debug behat directly inside phpstorm)
[18:25:41] *** Joins: olle (~olle@p5785bfee.dip0.t-ipconnect.de)
[18:54:08] *** Quits: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch) ()
[18:58:56] *** Joins: sybariten (~jake@157.90.217.120)
[18:59:00] <sybariten> salut
[18:59:38] <sybariten> can i say <!-- <?php include("incl/byline.php"); > -->  in PHP?  I want to comment out this php include for now, but i notice that in VS Code it stays syntaxcoloured. How will this be parsed?
[19:00:58] <stenno> <?php /* include(...) */ >
[19:01:01] <AllenJB> PHP is processed before HTML, so you have to comment out within the <?php tags. HTML comments have no effect.
[19:03:50] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: Make it idiot proof and someone will make a better idiot.)
[19:04:57] <sybariten> so i turn it into an "empty" php "command"
[19:05:38] <sybariten> or whatever the correct term is. Not tag is it?
[19:11:19] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[19:17:25] *** Joins: genom (~g@37.214.31.255)
[19:19:05] <bytestream> DevAntoine, yeah it's a bit fiddly. I'm not using behat so can't help with that
[19:23:59] <DevAntoine> bytestream: ok, thanks anyway :)
[19:24:20] <DevAntoine> Which PHP exception would make sense when not excepting null value?
[19:24:24] <DevAntoine> LogicException?
[19:25:06] <da_wunder> https://www.php.net/manual/en/class.unexpectedvalueexception.php ?
[19:27:14] <DevAntoine> da_wunder: perfect!
[19:32:20] *** Quits: ramsey[m] (~ramsey@phpc/ramsey) (Ping timeout: 246 seconds)
[19:32:41] *** Joins: ramsey[m] (~ramsey@phpc/ramsey)
[19:35:50] *** Joins: magla (~gelignite@55d4575c.access.ecotel.net)
[19:38:11] *** Joins: ms49434 (~ms49434@user/ms49434)
[19:43:37] <__adrian> sybariten: it's a code block (as opposed to your html, which is literal _output_).
[19:43:45] <__adrian> and yes, it would just be empty
[19:45:16] *** Quits: olle (~olle@p5785bfee.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:46:07] <__adrian> (which also hints why html comments don't have any effect - think of it this way:  <!-- <?php foo(); ?> -->  is exactly the same as  <?php echo "<!-- ", foo(), " -->"; ?>)
[19:52:58] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[19:59:34] *** Quits: luva (~luva@5.180.62.230) (Ping timeout: 252 seconds)
[20:00:05] *** Joins: jeffrey (~jeffrey@145.15.244.232)
[20:03:15] *** Joins: luva (~luva@5.180.62.229)
[20:11:51] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[20:14:25] *** Joins: ArchNoob (~maotora@user/archnoob)
[20:15:08] *** Quits: delboy1978uk (~delboy197@202.42-132-109.adsl-dyn.isp.belgacom.be) (Quit: delboy1978uk)
[20:17:10] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[20:17:25] *** Quits: jeffrey (~jeffrey@145.15.244.232) (Quit: Client quit)
[20:18:12] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[20:33:15] *** Joins: Red_ (~Red@97.109-247-81.customer.lyse.net)
[20:34:17] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 246 seconds)
[20:34:20] *** Red_ is now known as Red
[20:40:44] *** Quits: luva (~luva@5.180.62.229) (Ping timeout: 250 seconds)
[20:41:31] *** Joins: luva (~luva@5.180.62.229)
[20:46:11] *** Joins: Rockwood (~Rocky@user/rocky)
[20:52:11] *** Quits: magla (~gelignite@55d4575c.access.ecotel.net) (Quit: Stay safe!)
[20:52:13] <Rockwood> o/
[20:55:49] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:44a:23ff:b756:6fe7) (Remote host closed the connection)
[20:56:09] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[20:56:24] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:11:28] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:98d4:befb:7573:9f1e)
[21:15:50] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:98d4:befb:7573:9f1e) (Ping timeout: 250 seconds)
[21:29:38] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[21:46:49] *** Joins: delboy1978uk (~delboy197@109.132.42.202)
[22:01:39] *** Joins: magla (~gelignite@55d4575c.access.ecotel.net)
[22:02:03] <fakuve> Hi guys , hope you all well hehe . I'm just back again today , checking this autoload thing  I was checking the PSR-4 Actually , but you that you have more experience . Can you link in here an example of PHP project from github , with a well structured Directory System ?
[22:19:08] *** nick1 is now known as winlundn
[22:25:14] <da_wunder> I would check out eg. Symfony projects
[22:26:41] *** Joins: junktext (~junktext@109.201.152.163)
[22:29:42] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (Ping timeout: 260 seconds)
[22:33:10] <Sammitch> fakuve: pick a package from packagist and click through to their git repo
[22:33:10] *** Joins: xSavitar (~xSavitar@user/xsavitar)
[22:33:11] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[22:33:36] <Sammitch> but "well-structured" is highly subjective
[22:35:46] <fakuve> Sammitch: alright thats a good idea cheers
[22:35:52] <fakuve> da_wunder: cheer
[22:38:14] *** Quits: genom (~g@37.214.31.255) (Remote host closed the connection)
[22:38:24] <Rockwood> lol glass is here :D
[22:39:14] <__adrian> fakuve: https://www.nikolaposa.in.rs/blog/2017/01/16/on-structuring-php-projects/  might interest you
[22:40:12] <Rockwood> __adrian, hi, how are you sir?
[22:40:44] <fakuve> __adrian: yep I've read it already
[22:41:05] *** Joins: mactron (~mactron@APN-123-214-101-gprs.simobil.net)
[22:41:13] <__adrian> though note, classnames do not _have to_ correspond directly to project/directory structure
[22:42:13] <__adrian> hi
[22:42:24] <fakuve> For instance this project . https://github.com/ramsey/uuid/blob/main/src/Uuid.php . It has everything in one file? No requires ?
[22:42:42] <fakuve> There is not even a require_once for autoload ?
[22:42:57] <__adrian> it's a small project
[22:43:06] <ramsey> Nope. Use composer to require it
[22:43:13] <__adrian> it's a library. libraries do not register autoloaders
[22:43:44] <__adrian> *generally do /*should not
[22:43:49] <ramsey> Some do, but that one has other Composer dependencies, so you can’t use it as a standalone
[22:43:51] <fakuve> mm but they need to isnt it?
[22:44:05] <fakuve> How the code is able to tell about those requires then?
[22:44:10] <__adrian> fakuve: _your project_ uses composer to load the library.
[22:44:17] <Rockwood> __adrian, can i do PM you?
[22:44:22] <__adrian> sure
[22:44:52] <__adrian> you generally don't want/need libraries to be in charge of loading things on your filesystem
[22:44:53] <ramsey> Composer creates an autoloader and keeps track of the location on all the files
[22:44:56] <fakuve> __adrian: yep but you need at least to specify a line such as `¦•••require_once('vendor/autoload.php');` isnt it?
[22:45:26] <ramsey> That’s the autoloader managed by Composer, yes
[22:45:41] <__adrian> fakuve: yes, _you_ do. not the library.
[22:45:51] <__adrian> _your code_, not the library code.
[22:46:02] <fakuve> __adrian: basically because the library is creating all the functions from the scratch?
[22:46:11] <fakuve> no need for them to do includes ?
[22:46:16] <fakuve> (requires )
[22:46:36] <__adrian> no - consider the distinction betweena  _library_ and an _application_ or other kind of project
[22:46:52] <ramsey> No. They are not standalone, so they need your code to require the autoloader
[22:47:40] <__adrian> an _application_ is a standalone package. a _library_ is some code that's NOT meant to be standalone - it's always _used_ by some other project.
[22:48:10] <__adrian> take ramsey/uuid for example - on it's own, it's not useful. it _does_ nothing.
[22:48:15] <ramsey> If you look at the tests bootstrap file for the ramsey/uuid library you’re looking at, you’ll see that it requires the same autoloader in order for the tests to run properly and find all the classes
[22:48:39] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[22:48:47] <ramsey> __adrian: that’s, like, your opinion, man ;-)
[22:48:50] <fakuve> oh shit btw you are the same ramsey? ww
[22:48:52] <fakuve> wow
[22:48:57] <ramsey> Yes :-)
[22:49:00] <__adrian> but if I have an application that needs to make UUIDs, it's very useful. i'd install it, and then my code could "just use" those functions.
[22:49:05] <fakuve> hahaha that was lol
[22:49:17] <__adrian> :p
[22:49:40] <__adrian> i suppose some people might want an application that just spits out uuids all day.
[22:49:41] <ramsey> When you pasted the link to the Uuid class, IRC pinged me :-)
[22:50:04] <ramsey> I created ramsey/uuid-console, which does just that
[22:50:10] <__adrian> there we go
[22:50:34] <fakuve> ahh lol
[22:50:35] <__adrian> uuid-console is the _application_; uuid is the _library_ (used by the application)
[22:50:43] <ramsey> But, yeah, you can’t really do anything with ramsey/uuid by itself. You need something that calls it
[22:51:09] <__adrian> also note if my application wanted to make UUIDs, i'd want the library, not the application.
[22:51:21] <fakuve> Ok but so , for instance in `uuid.php` on `/src` which I believe it always host all the project .php code
[22:51:26] <ramsey> If you look at `bin/uuid` in uuid-console, you’ll see it also requires the Composer autoloader
[22:51:50] <ramsey> No. It’s just one class. It doesn’t have all the code in it.
[22:52:27] <fakuve> it has many `use` `use Ramsey\Uuid\Converter\TimeConverterInterface;` , what is the point of having a use , if there are not any other files required , with their respective namespaces
[22:52:55] <fakuve> Not even that file has namespaces defined on it
[22:53:11] <ramsey> They are required, but they’re only invoked by the Composer autoloader in your application
[22:53:13] <__adrian> https://github.com/ramsey/uuid/blob/main/src/Uuid.php#L15
[22:53:21] <__adrian> it has namespaces
[22:53:27] <__adrian> *is namespaced
[22:53:34] <fakuve> oh yeah
[22:53:41] <fakuve> I missed it
[22:53:48] <Sammitch> oh snap are we smack talkin libraries with their author in the room? :3c
[22:54:01] <__adrian> and i didn't check _all_ of those `use` statements, but pretty sure they're all used
[22:54:15] <__adrian> Sammitch: not my fault the author's in the room  :p
[22:54:18] <fakuve> Oks I see
[22:54:27] <ramsey> We don’t need to use require_once in every file because Composer’s autoloader does it for us
[22:54:31] <__adrian> ^
[22:54:43] <__adrian> this is literally what autoloading is for
[22:55:42] <fakuve> yeah well , but you need to somehow tell the code , isnt it? Or composer just download and place the dependencies in their respective subdirectories to be loaded perfectly upon usage?
[22:55:56] <ramsey> The first time you use a class in PHP, it checks the internal symbol table to see if it already knows about it. If not, it checks to see if an autoloader in s registered, and then it tries to autoload it.
[22:56:18] <fakuve> Ok I'm gonna try requiring some third party library in an own project on mine , load it with composer and see what it does
[22:56:41] <__adrian> "fakuve> load it with composer"  you may be conflating two things here
[22:56:57] <Sammitch> composer does at least 3 things: dependency resolution, package download/management, and autoloader creation.
[22:57:00] <__adrian> when you `composer require the/project` that installs it
[22:57:07] <ramsey> Composer registers an autoloader that keeps track of that for you. Only your application’s bootstrap file needs to call require_once on that autoloader
[22:57:28] <__adrian> when you `<?php require "vendor/autoload.php";` you set up composer's autoloader.
[22:58:10] <da_wunder> and usually that is enough for to use those libraries that you've installed via composer
[22:58:29] <__adrian> s/usually/should be/
[22:58:45] <__adrian> if it's not "enough" then the library was not well designed
[22:59:08] <fakuve> ok so basically
[22:59:35] <fakuve> blank project , requiring `ramsey/uuid` with the consent of the author :D https://termbin.com/djr0
[22:59:54] <__adrian> https://github.com/ramsey/uuid/blob/main/src/Uuid.php#L10  ← author's consent  ;)
[23:00:14] <fakuve> If now I were to create say , index.php . I can just call any function,method,class from there ? without requiring anything?
[23:00:27] <fakuve> as long as I place it index.php in my projects subdirectory ?
[23:00:27] <__adrian> no
[23:00:37] <__adrian> you need to register composer's autoloader.
[23:00:54] <__adrian> require __DIR__ . "/vendor/autoload.php"
[23:00:59] <fakuve> yep
[23:01:06] <fakuve> That was my point
[23:01:25] <fakuve> And why the library not? if I guess the library is using 3rd party resources as well
[23:01:32] <__adrian> _from there_, yes, nothing further. i.e., neither you nor ramsey need to require individual class definition files before using those classes in your code.
[23:02:09] <fakuve> Yeah well thats the magic of composer , I get it . But we need still one line of code
[23:02:54] <ramsey> Yep
[23:03:56] <ramsey> If you want to see what Composer’s doing, you can look at the file generated in vendor/composer/autoload_classmap.php (I think that’s the name of it)
[23:04:31] <ramsey> That file is auto-generated and updated whenever you require a new library, update a library, remove a library, etc.
[23:05:18] <ramsey> By requiring vendor/autoload.php, it finds that file and through it, essentially calls require_once on all the files, as needed
[23:05:44] <fakuve> ramsey: yep but where is /vendor in your library ?
[23:05:56] <ramsey> It’s not in my library
[23:06:16] <fakuve> you are using composer there as well
[23:06:33] <ramsey> my library will be installed in your project at vendor/ramsey/uuid/
[23:06:34] <da_wunder> that `vendor` is just a directory that is not in VCS - composer installs all depedencies under that directory
[23:06:34] <fakuve> and I see not a single require in the whole project (for what I have read)
[23:06:52] <ramsey> The require doesn’t need to be in my project
[23:06:53] <fakuve> oks
[23:07:01] <fakuve> ahh ok
[23:07:19] <fakuve> So basically is a way for composer to be called recursively
[23:07:38] <ramsey> It’s not called recursively, though
[23:07:40] <fakuve> To load other libraries that are dependencies of your library at the same time
[23:08:14] <da_wunder> you don't really need to think about other libraries - just let composer to handle that
[23:08:31] <fakuve> When composer is called from my computer , it downloads your library , and check as well for the other libraries needed to run your library (dependencies)
[23:09:03] <ramsey> PHP has autoloader functionality built-in, but you have to tell it how to autoload. Composer is one way of doing this,. It registers its autoloader with PHP, so whenever you use a class the first time, it uses the autoloader to call require_once for that class
[23:09:52] <fakuve> ramsey: yep , I understand
[23:10:20] <fakuve> Difficult for me to understand that your library is using 3rd party resources without a single `require`
[23:10:49] <fakuve> Ah ok , because it will be built in my computer
[23:10:59] <fakuve> Is a different treatment , ok
[23:11:16] <ramsey> It doesn’t need it because *you’re* application handles requiring them because my library isn’t an application that can *run*
[23:11:37] <fakuve> ok yeah I see
[23:11:41] <ramsey> Your, I meant. Not you’re :-)
[23:11:49] <fakuve> I understand now yeah
[23:12:06] <fakuve> I'm not an App yet , although I'm becoming closer to source code lol
[23:12:11] <fakuve> just one question more
[23:13:03] <fakuve> The test subdirectory , that is for Developer Colleages (whoever is collaborating) to check if the functionalities they add actually blend with the whole project?
[23:13:16] <ramsey> I do use require_once, but only in my tests because that’s the only place my library runs anything. https://github.com/ramsey/uuid/blob/main/tests/bootstrap.php
[23:14:03] <fakuve> I see hehem , we found it
[23:14:10] <ramsey> The tests are all for making sure the code does what it’s supposed to do. All the test runs are located here: https://github.com/ramsey/uuid/actions
[23:14:34] <ramsey> When you require it with Composer, you won’t get the tests
[23:15:07] <da_wunder> and that is because you should only test your own application not 3rd library
[23:15:12] <fakuve> Okk
[23:15:48] <fakuve> ./docs subdirectory I reckon it should be for sort of `manpages`
[23:15:56] <ramsey> Sometimes you might test your integration with a 3rd party library ;-)
[23:15:58] <fakuve> You got some human readable , like README
[23:16:09] <fakuve> What is the rest?
[23:16:25] <fakuve> oh well they are all pretty readable
[23:16:25] <ramsey> The docs generates these pages: https://uuid.ramsey.dev/en/stable/
[23:16:52] <fakuve> Ahh ook
[23:17:05] <da_wunder> ramsey: yes sure integration tests for that 3rd party library - but not actual 3rd party library testing
[23:17:28] <fakuve> so it generates a github page
[23:17:49] <fakuve> Is like a yekyll site
[23:18:06] <ramsey> Those are hosted on Read the Docs instead of GitHub, but similar, yeah
[23:18:15] <fakuve> I was just wondering this file I saw a Python file on there https://github.com/ramsey/uuid/blob/main/docs/conf.py
[23:18:46] <ramsey> If you’re interested in learning more about the project structure, I put together this project for creating libraries: https://github.com/ramsey/php-library-starter-kit
[23:19:36] *** Joins: brunohcs (~Thunderbi@2804:14c:87b2:8618:1940:32:30c9:a568)
[23:20:06] <fakuve> Oh thats pretty usefull
[23:20:34] <fakuve> But I'm humble yet , I have to first understand to do a regular project
[23:21:04] <fakuve> I see now though the dycotomy in between : A regular project , and a library
[23:21:21] <fakuve> Ok ramsey: many thanks really
[23:21:29] <ramsey> The Python file is for Read the Docs https://readthedocs.org
[23:22:26] <fakuve> ok thats massive
[23:22:37] <fakuve> so thats a super repository of documentation
[23:23:17] <ramsey> Lots of projects post their docs there
[23:23:28] <da_wunder> I would recommend you to just start with small - and just refactor stuff in your project to change things
[23:24:05] <ramsey> Here’s another good resource that tells more about why my library is structured like it is. https://github.com/php-pds/skeleton
[23:24:18] <ramsey> There’s nothing special about it. It’s just a preference.
[23:24:54] <da_wunder> eg. that read the docs stuff, I would first skip - make simple things first - try things out and learn - and after all that start to think improvements
[23:24:59] <fakuve> yeahh thats kind of like the link __adrian sent me before
[23:25:32] <fakuve> how come would you insert binaries in your php project
[23:25:42] <fakuve> Is it because they can be compilled ?
[23:26:33] <fakuve> I pretty much thougth of PHP as a web-server designed language
[23:26:45] <ramsey> No. “Binary” in this sense doesn’t mean compiled :-)
[23:27:27] <ramsey> They shell scripts or even PHP scripts. “Executables” is a better word for them
[23:27:43] <fakuve> ahh ok ok
[23:28:27] <fakuve> I quite understand now the structure yeah
[23:28:31] <ramsey> PHP is mostly web, but it can be used for any server side scripting or processes, etc.
[23:28:56] <fakuve> yeahh
[23:29:09] *** Quits: magla (~gelignite@55d4575c.access.ecotel.net) (Quit: Stay safe!)
[23:29:11] <fakuve> for instance , `nextcloud` is full of `php` code
[23:29:54] <fakuve> It runs everything in the `apache2` even if the application is actually doing things that are not really `html` GUI related
[23:30:26] <ramsey> This is all good for learning and demystifying things, but like da_wunder said, start small
[23:30:54] <ramsey> Some people even run web servers written in PHP itself :-)
[23:31:19] <fakuve> (at least that is how I saw it) , I installed `nextcloud` , I had an issue with file transfers , and it was `apache2` the service that was generating the problem , even though it was related to some pure file transfers
[23:31:23] <fakuve> thats amazing
[23:31:32] *** Joins: christianPHP (~christian@190.232.168.7)
[23:31:58] <fakuve> I always thought it as "The stuff that runs in the background on a server that is gonna end up as html output"
[23:32:10] <fakuve> ok guys
[23:32:16] <fakuve> So Thanks so much for the insight
[23:32:36] <fakuve> A pleasure ramsey , that was really revealling
[23:32:51] <fakuve> (if that is an actual word ) hehem
[23:32:57] <Sammitch> some people juggle geese
[23:33:01] <ramsey> Many people use Apache as the web server for PHP. It’s easy because you can use a PHP module in Apache, and you don’t have to worry about running a bunch of PHP processes to handle requests
[23:34:00] <fakuve> but I gues to process php you need one web-server service running , isnt it?
[23:34:09] <fakuve> call it `apache2` call it `ngix`
[23:34:30] <fakuve> or is there a rawer way of doing things then?
[23:37:23] <fakuve> anyways I'm shooting /home , hehem I leave this opened , many thanks for the insight really , see you later
[23:37:57] <Sammitch> read the HTTP spec and write your own server, but the devil is in the details and that's why the existing HTTPd projects are as large and complex as they are
[23:47:55] <ramsey> PHP doesn’t require a web server. It requires something that can parse PHP. Often, that’s a web server. But for many of the projects I work on, it’s just php itself.
[23:52:34] <Sammitch> oh I misread the intent of the question. Yeah PHP is just a language and can run wherever there's an interpreter and output whatever format you tell it to.
[23:53:02] <Sammitch> I've written more than a few CLI utilities with PHP
[23:53:55] <Sammitch> when the new gTLDs came out I was miffed that centos' whois utility wouldn't look up .horse domains so I cobbled together my own :P
