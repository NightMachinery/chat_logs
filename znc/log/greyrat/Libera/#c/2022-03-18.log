[00:00:34] *** Quits: kuber (~kuber@75-172-6-223.tukw.qwest.net) (Quit: leaving)
[00:01:31] <rcf> And the end result is that every time someone chooses a language that doesn't adhere to the cult of undefined behavior and the fetishization of gleefully breaking the programmer's expectations, the world gets better software.
[00:02:18] *** Quits: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[00:02:31] *** Joins: chair1 (~nero@187.109.23.121)
[00:02:51] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[00:03:51] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:04:07] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[00:04:31] *** Joins: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d)
[00:04:58] <chair1> Say I want to test if my program survives when malloc returns NULL randomly, should I write a malloc wrapper and use it instead of malloc (e.g. mymalloc), or is there a way to "override" stdlib's malloc with something else?
[00:05:38] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[00:06:10] <caze> Yes.
[00:06:47] <rcf> chair1: it is best to test things in an environment with actual memory constraints to see how, say, libraries fare.
[00:07:40] *** Quits: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d) (Client Quit)
[00:09:23] <cehteh> chair1: glibc allows to instrumentate/hook malloc
[00:09:41] *** Joins: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d)
[00:10:05] *** Joins: clamiax (~clamiax@net-109-116-207-212.cust.vodafonedsl.it)
[00:11:38] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[00:12:05] <cehteh> and malloc returning NULL is pretty rare on modern OS'es, usually other problems occur earlier (swap to death) but it can be caused when you restrict the memory with rlimit/cgroups on linux for example
[00:13:41] *** Parts: Bruda (~Bruda@172.58.62.241) (*waves* "The self-righteous scream judgments against others to hide the noise of skeletons dancing in their own closets.")
[00:20:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109) (Ping timeout: 250 seconds)
[00:20:58] <chair1> rcf abd cehteh: thanks for the insight, I'll check the malloc hooks
[00:24:52] *** Joins: ian| (~kvirc@cpe-104-228-101-152.stny.res.rr.com)
[00:25:06] <ian|> why is this valid C++ but not valid C
[00:25:24] <ian|> struct foo { int a; char c; }; struct foo my_foo; my_foo = {0, 1};
[00:26:19] <ian|> the type inference is dead easy, yet you can't do it in C
[00:26:57] *** Quits: kurahaupo (~kurahaupo@pa49-182-116-249.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[00:27:19] <twkm> as you implied, c doesn't infer types.
[00:28:16] <cehteh> fyi:  my_foo = (struct foo){0, 1};    will work
[00:28:16] <twkm> nor can an initializer occur other than in a definition, i.e., not an assignment where the syntax isn't "this is an initializer".
[00:28:36] <ian|> an initializer can appear outside a definition
[00:28:38] *** Quits: LuKaRo_ (~LuKaRo@p57b157e5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[00:28:39] <ian|> i just tested it
[00:28:50] <ian|> struct foo f; 10         f = (struct foo) {0, 1, 2, 3}; 11         f = (struct foo) {3, 2, 1, 0};
[00:28:53] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[00:29:00] <twkm> that's not an initializer.
[00:29:06] <twkm> that's a compound literal.
[00:29:32] <twkm> i just looks like an initializer and a cast.
[00:29:43] <ian|> ok, i see
[00:30:47] <ian|> also compound literals can be array type or aggregate type right?
[00:31:09] <ian|> or are arrays aggregates
[00:31:32] *** Quits: marderIII (~MarderIII@86.88.74.111) (Ping timeout: 240 seconds)
[00:32:15] <chair1> How do I reference the standard here?
[00:32:36] <twkm> arrays are aggregates.  a compound literal can be any type.
[00:33:36] <ian|> is there any way to write into the beginning of an array, with a compound literal array?
[00:33:39] <ian|> i tried *params = (uint32_t[]) {x, y};
[00:33:48] <twkm> 6.5.2.5
[00:34:21] *** Quits: egm (~egm@user/egm) (Quit: leaving)
[00:34:26] <fizzie> You can memcpy from a compound literal array to another array, assuming it's big enough.
[00:34:27] <ian|> i guess memcpy is the only way?
[00:34:51] <ian|> what about *params = *(uint32_t[]) {x, y}; ?
[00:35:20] *** Joins: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net)
[00:35:22] <twkm> an array doesn't copy using assignmet.
[00:35:51] <ian|> so `*params = *(uint32_t[]) {x, y};` only sets [0] ?
[00:36:39] <twkm> yes.
[00:37:44] <fizzie> If the destination was an array within a struct, you could assign the entire struct type and it would copy the array-typed field too. But if it's not, you can't.
[00:39:04] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:42:46] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[00:46:26] *** Joins: nahcetan (~nate@98.45.167.61)
[00:48:44] *** Joins: malloy (~jimery@120.235.172.170)
[00:52:24] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[00:52:45] *** Quits: moog_ (~moog@98.97.86.136) (Ping timeout: 256 seconds)
[00:53:39] *** Joins: LuKaRo (~LuKaRo@p4fc3382e.dip0.t-ipconnect.de)
[00:56:18] *** Joins: kuber (~kuber@75-172-6-223.tukw.qwest.net)
[00:57:51] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Ping timeout: 256 seconds)
[00:58:02] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 240 seconds)
[00:58:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:39ff:e2ca:cb20:103) (Ping timeout: 240 seconds)
[00:58:31] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[00:59:13] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[00:59:18] *** Joins: zwr (~zwr@2804:d45:b966:fb00:cd2d:c396:a30e:b814)
[00:59:24] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 250 seconds)
[00:59:57] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[01:01:15] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[01:01:17] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:01:34] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:03:23] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:07:02] *** Quits: nexus (~nexus@178-164-235-215.pool.digikabel.hu) (Ping timeout: 240 seconds)
[01:07:37] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[01:07:48] *** Joins: uidops (~uidops@ip249.ip-51-38-16.eu)
[01:07:51] *** Parts: uidops (~uidops@ip249.ip-51-38-16.eu) ()
[01:08:47] *** Joins: nexus (~nexus@87-97-2-198.pool.digikabel.hu)
[01:12:24] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 250 seconds)
[01:16:01] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a161-049d-edaf-1b31.res6.spectrum.com) (Quit: Leaving)
[01:17:11] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:22:40] *** Quits: magla (~gelignite@d5364d83.access.ecotel.net) (Quit: Stay safe!)
[01:23:41] *** Joins: rgrinberg (~textual@177.241.245.222)
[01:24:23] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[01:25:08] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:31:26] *** Joins: moog (~moog@107.126.53.83)
[01:38:34] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:39:48] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[01:42:03] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[01:46:32] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[01:46:45] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:47:58] *** Joins: foul_owl (~kerry@23.82.193.89)
[01:50:32] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[01:52:49] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[01:53:27] *** Quits: johnnyre1 (~tth@user/johnnyreb) (Ping timeout: 252 seconds)
[01:53:35] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[01:54:09] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[01:54:22] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109)
[01:55:24] *** Joins: johnnyre1 (~tth@user/johnnyreb)
[01:56:32] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[01:59:25] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf)
[01:59:47] <Guest19> hello, running into weird issue. My ld search_dir has /lib/x86_64-linux-gnu . I pass --sysroot = /home/mysysroot as an argument. When linking a file, it finds some shared libraries in /home/mysysroot/lib/x86_64-linux-gnu as expected but for some other shared library, ld isn't even checking that directory.
[01:59:59] <Guest19> Why is that? Can someone help. I verified that my so is available in /home/mysysroot/lib/x86_64-linux-gnu but ld isn't checking there and throwing errors
[02:01:50] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-170-9be0cae1 - https://znc.in)
[02:06:41] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[02:07:11] *** Joins: moog_ (~moog@98.97.86.136)
[02:09:42] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:d146:edfe:652:4044) (Quit: This computer has gone to sleep)
[02:09:57] *** Quits: moog (~moog@107.126.53.83) (Ping timeout: 252 seconds)
[02:10:22] *** Joins: Telvana (~capo@user/telvana)
[02:10:52] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:11:46] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 250 seconds)
[02:13:20] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[02:13:21] *** gonogo__ is now known as gonogo
[02:15:32] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.197)
[02:20:10] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:20:21] <Xgc> Guest19: Try removing the spaces.  Command line arguments/options can be sensitive to that.
[02:20:44] <Guest19> Xgc : tried with removing spaces, still same issue
[02:20:46] <Xgc> Guest19: --blah=whatever
[02:21:06] <Guest19> Xgc : but confusing part is some .so files are found by ld in that sysroot folder but lot of them aren't
[02:21:13] <Xgc> Guest19: Without a complete test case, it's tough to diagnose.
[02:21:14] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[02:22:17] *** Quits: mahmutov_ (~mahmutov@37.155.17.18) (Ping timeout: 240 seconds)
[02:22:27] <Xgc> Guest19: One of the first rules is to never/ever take the posters word for anything.  Always show proof, usually with a test case.
[02:23:07] <Guest19> Xgc : it's quite complicated build so difficult to create a test case
[02:23:13] <Xgc> Guest19: Sometimes even a verbose / exact log of the output can be telling.
[02:23:15] *** Joins: ferdna (~ferdna@user/ferdna)
[02:25:02] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[02:26:08] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:27:43] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[02:28:31] *** Quits: ian| (~kvirc@cpe-104-228-101-152.stny.res.rr.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[02:28:32] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.197) (Ping timeout: 240 seconds)
[02:29:14] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:30:11] *** Joins: pendarsoheil (~pendarsoh@172.58.27.159)
[02:30:13] <pendarsoheil>       smlPointer = &ptrDupe->ptrLine[i];
[02:30:15] <pendarsoheil>       smlPointer = duplicateSML(&(somePtr->ptrLine[i]));
[02:30:23] <pendarsoheil> Is there another way of doing this?
[02:31:30] <pendarsoheil> nvmd
[02:31:32] <pendarsoheil> doing something wrong
[02:31:35] *** Quits: pendarsoheil (~pendarsoh@172.58.27.159) (Client Quit)
[02:32:24] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf) (Quit: Client closed)
[02:32:40] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf)
[02:32:50] <Guest19> Xgc : let me try to grab it
[02:33:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 240 seconds)
[02:34:02] *** Quits: pizdets (~pizdets@183.182.110.150) (Ping timeout: 240 seconds)
[02:34:05] *** Joins: pizdets_ (~pizdets@183.182.111.218)
[02:34:45] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 256 seconds)
[02:35:19] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[02:36:01] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.197)
[02:36:23] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-170-9be0cae1 - https://znc.in)
[02:38:41] *** Joins: greeter_ (~greeter@47.55.187.128)
[02:39:30] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 250 seconds)
[02:39:40] *** Quits: kuber (~kuber@75-172-6-223.tukw.qwest.net) (Quit: leaving)
[02:40:23] *** Joins: Telvana (~capo@user/telvana)
[02:44:57] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.197) (Ping timeout: 256 seconds)
[02:46:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:46:38] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 260 seconds)
[02:51:16] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.198)
[02:52:13] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:52:40] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[02:53:45] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[02:54:49] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:55:21] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Ping timeout: 245 seconds)
[02:55:24] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.198) (Ping timeout: 240 seconds)
[02:56:08] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:57:04] *** Joins: hiroshi_ (~freedom@151.37.35.191)
[02:57:38] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[03:02:21] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[03:03:11] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.196)
[03:03:51] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 252 seconds)
[03:04:05] *** Quits: kurfen_ (~kurfen@176.119.195.9) (Quit: ZNC 1.8.2 - https://znc.in)
[03:05:04] *** Quits: alch (~alch@mi-18-33-112.service.infuturo.it) (Ping timeout: 250 seconds)
[03:05:18] *** Quits: hiroshi_ (~freedom@151.37.35.191) (Quit: hiroshi_)
[03:05:27] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:05:49] *** Quits: chair1 (~nero@187.109.23.121) (Quit: leaving)
[03:06:56] *** Joins: alch (~alch@to-18-70-250.service.infuturo.it)
[03:06:58] *** Joins: kurfen (~kurfen@176.119.195.9)
[03:07:24] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.196) (Ping timeout: 240 seconds)
[03:13:57] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[03:15:52] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:20:30] *** Joins: pnbeast (~pnbeast@2601:140:4280:3800::1)
[03:20:39] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Ping timeout: 256 seconds)
[03:21:04] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:21:48] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:25:53] *** Quits: ckdCreations (~ckdCreati@147.55.130.34) (Read error: Connection reset by peer)
[03:25:56] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[03:28:37] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 240 seconds)
[03:29:13] *** Joins: Torr (~Torr@user/torr)
[03:29:49] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[03:31:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 240 seconds)
[03:33:43] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:34:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:34:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:34:25] *** Joins: wroathe (~wroathe@user/wroathe)
[03:34:55] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:36:07] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[03:36:11] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:39:59] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.198)
[03:42:02] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-cca0-ac82-6720-78cd.fixed6.kpn.net)
[03:43:26] *** Quits: Torr (~Torr@user/torr) ()
[03:43:36] *** Joins: Torr (~Torr@user/torr)
[03:46:40] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.198) (Ping timeout: 250 seconds)
[03:46:45] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-cca0-ac82-6720-78cd.fixed6.kpn.net) (Ping timeout: 252 seconds)
[03:49:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:51:57] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:54:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[04:01:36] *** Joins: korg815 (~korg815@user/korg815)
[04:02:01] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 256 seconds)
[04:02:36] *** Quits: nexus (~nexus@87-97-2-198.pool.digikabel.hu) (Ping timeout: 240 seconds)
[04:02:40] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Quit: later)
[04:04:21] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[04:04:34] *** Joins: nexus (~nexus@79-120-162-157.pool.digikabel.hu)
[04:06:12] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:06:37] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Client Quit)
[04:07:15] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[04:07:49] *** Quits: Torr (~Torr@user/torr) ()
[04:07:59] *** Joins: Torr (~Torr@user/torr)
[04:11:21] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[04:11:32] *** Joins: Torr (~Torr@user/torr)
[04:13:13] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[04:13:55] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:14:14] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[04:16:19] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[04:16:37] *** Quits: Thedarkb (~Thedarkb@92.40.196.70.threembb.co.uk) (Ping timeout: 240 seconds)
[04:18:24] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Remote host closed the connection)
[04:18:43] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[04:18:43] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[04:19:54] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Remote host closed the connection)
[04:20:13] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[04:20:21] *** Joins: zmt00 (~zmt00@user/zmt00)
[04:21:15] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:21:20] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Ping timeout: 250 seconds)
[04:21:33] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[04:21:54] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Remote host closed the connection)
[04:22:31] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[04:23:24] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Remote host closed the connection)
[04:23:30] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[04:23:57] *** Joins: Rynn (~rynn@216.30.158.198)
[04:24:29] *** Joins: malloy (~jimery@120.235.172.170)
[04:25:08] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[04:25:38] *** Joins: MsPants (~MsPants@S01069050ca4e3573.cg.shawcable.net)
[04:27:32] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Ping timeout: 240 seconds)
[04:31:44] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[04:33:02] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[04:33:31] *** Joins: Wulf (~Wulf@user/wulf)
[04:41:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[04:43:32] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 240 seconds)
[04:47:53] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4.1)
[04:49:56] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 250 seconds)
[04:50:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 240 seconds)
[04:51:39] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[04:53:40] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:56:34] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[04:59:12] *** Quits: pulse (~pulse@user/pulse) (Quit: Join us at https://indiedevs.net/)
[04:59:27] *** Joins: pulse (~pulse@user/pulse)
[04:59:32] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[05:00:28] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[05:02:12] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:ca00:a7f3:60c8:c144:5351) (Ping timeout: 240 seconds)
[05:07:09] *** Quits: raym (~raym@user/raym) (Quit: afk for sometime)
[05:09:46] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:15:38] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:15:51] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[05:16:16] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:19:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:22:18] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:23:25] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:26:02] *** Joins: mixfix41 (~sdenynine@user/mixfix41)
[05:26:24] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[05:27:01] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[05:27:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[05:27:16] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.196)
[05:28:50] *** Quits: Torr (~Torr@user/torr) ()
[05:29:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[05:30:01] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Quit: ZNC - http://znc.in)
[05:30:03] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[05:30:18] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[05:32:49] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[05:34:57] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.196) (Ping timeout: 256 seconds)
[05:36:17] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 240 seconds)
[05:37:47] *** Quits: MsPants (~MsPants@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[05:39:51] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[05:41:48] *** Joins: eddof13 (~eddof13@192.154.196.154)
[05:46:32] *** Quits: eddof13 (~eddof13@192.154.196.154) (Ping timeout: 240 seconds)
[05:51:28] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 250 seconds)
[05:53:30] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[05:53:39] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 256 seconds)
[05:55:32] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:55:47] *** Joins: greeter (fresh@2604:180:2:117:cafe:babe:dead:beef)
[05:56:12] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[05:58:44] <greeter_> oh there i am
[05:59:02] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 240 seconds)
[06:00:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:00:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:00:17] *** Joins: wroathe (~wroathe@user/wroathe)
[06:03:34] *** Quits: davidlowryduda (~davidlowr@2601:197:600:1210:b19d:d8f1:1756:fb98) (Ping timeout: 260 seconds)
[06:05:33] *** Joins: davidlowryduda (~davidlowr@73.61.8.157)
[06:08:02] *** Joins: Inline__ (~Inline@p200300cd470af600c32f3b3744c2844b.dip0.t-ipconnect.de)
[06:10:13] *** Quits: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:12:47] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[06:17:02] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 250 seconds)
[06:17:38] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[06:17:54] *** Joins: fe23 (~fe23@2409:8a34:466:6010:8a0:c1ab:cd1d:344a)
[06:20:01] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:22:54] *** Joins: CCCG2022 (~dell@120.245.30.75)
[06:23:00] *** Parts: CCCG2022 (~dell@120.245.30.75) ()
[06:24:00] *** Joins: CCCG2022 (~dell@120.245.30.75)
[06:24:00] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Read error: Connection reset by peer)
[06:24:55] *** Joins: SaltHilStroller_ (~SaltHillS@199.249.111.186)
[06:26:06] *** Joins: SaltHillStroller (~SaltHillS@thunderhill.nvidia.com)
[06:29:36] *** Quits: SaltHilStroller_ (~SaltHillS@199.249.111.186) (Ping timeout: 250 seconds)
[06:34:13] *** Joins: vysn (~vysn@user/vysn)
[06:34:25] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[06:34:37] *** Quits: banc (~banc@217.138.195.27) (Ping timeout: 240 seconds)
[06:36:33] *** Quits: greeter_ (~greeter@47.55.187.128) (Quit: Leaving)
[06:37:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:38:21] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[06:39:08] *** Quits: nexus (~nexus@79-120-162-157.pool.digikabel.hu) (Ping timeout: 250 seconds)
[06:41:00] *** Joins: nexus (~nexus@77-234-86-159.pool.digikabel.hu)
[06:42:25] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-b409-678c-49f6-3fbd.res6.spectrum.com)
[06:42:52] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-b409-678c-49f6-3fbd.res6.spectrum.com) (Remote host closed the connection)
[06:43:31] *** Quits: SaltHillStroller (~SaltHillS@thunderhill.nvidia.com) (Ping timeout: 256 seconds)
[06:46:48] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:49:44] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:52:54] *** Joins: banc (~banc@217.138.195.27)
[06:56:23] *** Joins: eddof13 (~eddof13@2806:102e:12:64:994e:c256:6228:a886)
[06:59:52] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.198)
[07:03:02] *** Quits: alch (~alch@to-18-70-250.service.infuturo.it) (Read error: Connection reset by peer)
[07:07:16] *** Joins: alch (~alch@151.82.94.43)
[07:07:31] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Read error: Connection reset by peer)
[07:09:01] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.198) (Ping timeout: 256 seconds)
[07:10:02] *** Joins: rustytaco (~eltaco@168.235.111.65)
[07:10:41] <rustytaco> Its been a long time since i done it and cant remember what its called besides bit shifting.. I have an unsigned int i need to break into 2 bytes
[07:17:12] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[07:17:32] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[07:17:35] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[07:18:18] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:30:10] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:30:32] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[07:32:54] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[07:34:09] <wroathe> rustytaco: 2 halves, or 2 bytes? Does your target system use 16 bit integers?
[07:36:24] <wroathe> fg
[07:36:54] <rustytaco> Got it - unsigned int sum = this->CRC(); EEPROM.write(EEPROM.length() - 1, (unsigned char)(sum & 0xff)); EEPROM.write(EEPROM.length(), (unsigned char)(sum >> 8));
[07:37:23] <rustytaco> is avr little or big endian?
[07:38:30] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[07:38:36] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 240 seconds)
[07:40:24] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[07:42:38] *** Joins: Akiva (~Akiva@user/Akiva)
[07:42:45] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-cca0-ac82-6720-78cd.fixed6.kpn.net)
[07:43:42] *** Quits: asdflkj_sh (asdflkj@2605:6400:10:fe:bebd:57ba:41a5:636d) (Ping timeout: 250 seconds)
[07:43:57] *** Quits: Impulsif (impulsif@impulsif.us2.ircnow.org) (Ping timeout: 240 seconds)
[07:44:41] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[07:44:49] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[07:46:19] <rustytaco> LE. very good
[07:46:28] *** Joins: SorryBeauty (~SorryBeau@103.76.184.42)
[07:47:06] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-cca0-ac82-6720-78cd.fixed6.kpn.net) (Ping timeout: 252 seconds)
[07:47:06] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[07:48:23] *** Quits: pulse (~pulse@user/pulse) (Quit: Join us at https://indiedevs.net/)
[07:49:18] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Ping timeout: 252 seconds)
[07:51:17] *** Parts: CCCG2022 (~dell@120.245.30.75) ()
[07:53:02] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[07:56:59] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[08:01:17] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Ping timeout: 240 seconds)
[08:02:25] *** Joins: rgrinberg (~textual@177.241.245.222)
[08:03:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:05:32] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 272 seconds)
[08:07:09] *** Joins: asdflkj_sh (asdflkj@2605:6400:10:fe:bebd:57ba:41a5:636d)
[08:07:37] *** Joins: dsrt^ (~dsrt@65.240.140.18)
[08:07:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 240 seconds)
[08:09:08] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:09:14] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[08:13:15] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 240 seconds)
[08:17:21] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[08:18:09] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Ping timeout: 256 seconds)
[08:24:27] *** Joins: kdc (~kdc@196.211.197.133)
[08:25:37] *** Quits: kdc (~kdc@196.211.197.133) (Max SendQ exceeded)
[08:26:32] *** Joins: kdc (~kdc@196.211.197.133)
[08:30:42] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:31:18] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[08:34:12] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[08:37:45] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[08:44:04] *** Joins: Impulsif (impulsif@impulsif.us2.ircnow.org)
[08:46:35] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[08:46:58] *** Joins: tejr (~tejr@user/tejr)
[08:47:03] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 256 seconds)
[08:48:02] *** Quits: nexus (~nexus@77-234-86-159.pool.digikabel.hu) (Ping timeout: 240 seconds)
[08:48:54] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[08:49:05] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[08:49:05] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[08:49:05] *** Joins: Teukka (~teukka@user/Teukka)
[08:49:15] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 252 seconds)
[08:49:24] <caze> Shouldn't matter for bit shifting.
[08:49:56] *** Joins: ekathva (~ekathva@n16j078fgylxou88w-1.v6.elisa-mobile.fi)
[08:49:58] *** Joins: nexus (~nexus@84-236-10-61.pool.digikabel.hu)
[08:50:14] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:54:49] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[08:58:09] *** Joins: zer0x (~zer0x@58.186.50.2)
[09:01:02] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[09:04:39] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[09:04:44] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Ping timeout: 250 seconds)
[09:05:10] *** Quits: Trot (~Trot@107.147.149.155) (Ping timeout: 250 seconds)
[09:09:22] *** Joins: neo1 (~neo@103.144.161.8)
[09:10:24] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[09:11:25] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[09:12:33] *** Quits: neo1 (~neo@103.144.161.8) (Client Quit)
[09:15:12] *** Joins: moog__ (~moog@98.97.83.146)
[09:17:51] *** Quits: moog_ (~moog@98.97.86.136) (Ping timeout: 252 seconds)
[09:18:58] *** Joins: neo1 (~neo@103.144.161.13)
[09:20:16] *** Joins: lleo (~leo@89-200-4-50.mobile.kpn.net)
[09:20:46] *** Quits: moog__ (~moog@98.97.83.146) (Ping timeout: 250 seconds)
[09:22:32] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[09:23:53] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 256 seconds)
[09:26:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109) (Quit: Quit)
[09:27:47] *** Joins: crankslider (~slidercra@user/slidercrank)
[09:29:36] *** Joins: tejr (~tejr@user/tejr)
[09:32:28] *** Quits: e36freak (~e36freak@user/e36freak) (Ping timeout: 250 seconds)
[09:37:01] *** Joins: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net)
[09:38:27] *** Joins: n0x (~gamer@h-94-254-37-241.A357.priv.bahnhof.se)
[09:38:35] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[09:39:00] *** Joins: tejr (~tejr@user/tejr)
[09:39:09] *** Joins: nitrix_ (~nitrix@user/nitrix)
[09:39:45] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:40:07] *** Quits: tejr (~tejr@user/tejr) (Client Quit)
[09:40:21] *** Joins: lwhjp` (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[09:40:31] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Read error: Connection reset by peer)
[09:40:40] *** Quits: gtlsgamr (~gtlsgamr@user/gtlsgamr) (Quit: Goodbye!)
[09:40:40] *** Quits: dakshiq (~dakship@2400:8904::f03c:92ff:feee:b97d) (Quit: Goodbye!)
[09:40:59] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[09:41:30] *** Joins: dakship_ (~dakship@172-105-52-34.ip.linodeusercontent.com)
[09:42:02] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[09:42:25] *** Quits: nitrix_ (~nitrix@user/nitrix) (Client Quit)
[09:42:38] *** Joins: angelacrust (~angelacru@223.233.74.100)
[09:43:39] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:43:50] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[09:44:10] <angelacrust> Hi, I can't spot the logical flaw in this code. Can someone help me out?
[09:44:10] <angelacrust> https://bpa.st/O33A
[09:44:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[09:44:11] <angelacrust> The order of values remains the same.
[09:44:17] *** Joins: e36freak (~e36freak@user/e36freak)
[09:45:48] *** Joins: nitrix (~nitrix@user/nitrix)
[09:48:08] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:ca00:67fe:b14c:d83a:53d8)
[09:49:32] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[09:51:01] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:51:39] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:55:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:57:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[09:57:05] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4.1)
[10:02:55] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[10:06:57] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 256 seconds)
[10:08:47] *** Joins: Enitin (~Enitin@82.180.145.228)
[10:09:14] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (*.net *.split)
[10:09:14] *** Quits: brdb (~alarm@24.61.226.255) (*.net *.split)
[10:09:14] *** Quits: rcf (~rcf@sdf.org) (*.net *.split)
[10:09:14] *** Quits: biotty (~coien@li35-173.members.linode.com) (*.net *.split)
[10:09:14] *** Quits: pranshukhandal (~ghost@envs.net) (*.net *.split)
[10:09:14] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[10:09:14] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[10:09:14] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (*.net *.split)
[10:09:14] *** Quits: n1000_ (~n1000@user/n1000) (*.net *.split)
[10:09:14] *** Quits: finalsummer_ (~finalsumm@user/finalsummer) (*.net *.split)
[10:09:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[10:09:15] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[10:09:15] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[10:09:15] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[10:09:15] *** Quits: aesin (~aesin@81.211.127.107) (*.net *.split)
[10:09:25] <Maxdamantus> angelacrust: if I've got a string like "ab" and I first swap the first and last characters then swap the last and first characters, what string do I have?
[10:09:42] <angelacrust> The same string.
[10:09:47] <Maxdamantus> Exactly.
[10:09:50] *** Joins: rcf (rcf@sdf.org)
[10:10:21] <angelacrust> Um yeah
[10:10:43] <Maxdamantus> You're doing the same thing. By the time you're at j = width/2, the row is flipped horizontally, but then you continue and flip it again.
[10:11:00] <angelacrust> Hmm.
[10:11:05] *** Quits: Zeturic (~Orimendix@50.26.218.162) (Quit: Leaving)
[10:11:11] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.223)
[10:11:55] <angelacrust> Oh yeah. The upper limit of inner loop should be till `width / 2`
[10:12:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:12:33] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.223) (Max SendQ exceeded)
[10:13:01] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.223)
[10:13:17] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[10:13:35] <angelacrust> Thank you.
[10:13:52] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.223) (Max SendQ exceeded)
[10:14:23] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.103)
[10:14:34] *** Joins: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk)
[10:14:34] *** Joins: brdb (~alarm@24.61.226.255)
[10:14:34] *** Joins: biotty (~coien@li35-173.members.linode.com)
[10:14:34] *** Joins: pranshukhandal (~ghost@envs.net)
[10:14:34] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[10:14:34] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[10:14:34] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[10:14:34] *** Joins: n1000_ (~n1000@user/n1000)
[10:14:34] *** Joins: finalsummer_ (~finalsumm@user/finalsummer)
[10:14:34] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[10:14:34] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[10:14:34] *** Joins: Phil-Work (~phil@62.3.100.20)
[10:14:34] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[10:14:34] *** Joins: aesin (~aesin@81.211.127.107)
[10:14:58] *** Quits: ssiyad (~ssiyad@user/ssiyad) (Max SendQ exceeded)
[10:14:58] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Max SendQ exceeded)
[10:15:02] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.103) (Max SendQ exceeded)
[10:15:05] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[10:15:10] *** Quits: pnbeast (~pnbeast@2601:140:4280:3800::1) (Quit: WeeChat 2.7.1)
[10:15:17] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[10:15:22] *** Quits: n0x (~gamer@h-94-254-37-241.A357.priv.bahnhof.se) (Ping timeout: 250 seconds)
[10:15:27] *** Quits: SorryBeauty (~SorryBeau@103.76.184.42) (Ping timeout: 256 seconds)
[10:15:30] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.223)
[10:17:15] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[10:18:21] *** Joins: zer0x (~zer0x@58.186.50.2)
[10:24:53] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[10:25:23] *** Joins: Wh0 (~V@43.241.144.151)
[10:25:30] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[10:25:57] *** Quits: sudden (~cat@user/sudden) (Quit: Lost terminal)
[10:26:51] *** Joins: sudden (~cat@user/sudden)
[10:28:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[10:28:57] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 240 seconds)
[10:29:18] *** Joins: Enitin (~Enitin@82.180.145.230)
[10:30:51] *** Quits: neo1 (~neo@103.144.161.13) (Quit: WeeChat 3.4)
[10:33:59] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:35:45] <Kerr> is there a language way to have packed arrays of bits, and refer to their value with an index?
[10:36:39] <Kerr> I know that I can use bit fields and structs to get a finite number of packed data memebers... but what about a variable size array?
[10:36:41] *** Joins: vysn (~vysn@user/vysn)
[10:37:09] <dave0> i don't know any other languages but you can do it in c easy enough
[10:37:59] <dave0> Kerr: https://termbin.com/hyrn
[10:38:33] <angelacrust> damn, that's some advanced level code
[10:39:45] <dave0> angelacrust: it's just fiddly because c doesn't have it built-in
[10:40:05] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[10:40:07] <angelacrust> looks so foreign to me lol
[10:40:42] <dave0> angelacrust: think of putbit(array, n, bit) as   array[n] = bit
[10:40:59] <angelacrust> oh
[10:41:26] <angelacrust> is it a fancy way of writing array[n] = bit?
[10:41:35] <Kerr> Try programming a microcontroller just with the register descriptions, it's this type of thing all day long
[10:41:42] <dave0> angelacrust: yep
[10:41:48] <angelacrust> hmm
[10:42:06] <dave0> angelacrust: except it simulates an array of bits, instead of an array of chars or ints
[10:42:15] <angelacrust> I see
[10:42:21] *** Joins: neo1 (~neo@103.144.161.8)
[10:42:35] <angelacrust> I feel like I've learned nothing all this time
[10:42:35] <dave0> angelacrust: similarly    bit = getbit(array, n)   is like   bit = array[n]
[10:43:37] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[10:43:42] <angelacrust> I got it dave0, thanks for explaining
[10:43:51] <dave0> cool :-)
[10:44:42] <dave0> another dig against _Bool ... wouldn't it have been nice if an array of _Bool was an array of bits... that would have been truly useful
[10:44:52] <Kerr> ^
[10:45:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:46:02] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[10:46:45] <Kerr> That's what I was looking for. "obviously" we have ways of retrieving the values of individual bits, but it takes many LOC to do it
[10:47:32] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 240 seconds)
[10:48:18] *** Joins: iomari891 (~iomari891@102.91.5.94)
[10:51:17] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[10:51:54] *** Quits: kdc (~kdc@196.211.197.133) (Ping timeout: 252 seconds)
[10:52:36] *** Quits: kurfen (~kurfen@176.119.195.9) (Ping timeout: 240 seconds)
[10:54:32] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.223) (Ping timeout: 240 seconds)
[10:54:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:55:25] *** Quits: eddof13 (~eddof13@2806:102e:12:64:994e:c256:6228:a886) (Remote host closed the connection)
[10:56:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:57:50] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 250 seconds)
[10:59:44] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:02:44] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[11:02:50] *** Joins: tejr (~tejr@user/tejr)
[11:03:13] *** Quits: angelacrust (~angelacru@223.233.74.100) (Quit: Client closed)
[11:05:53] *** Quits: alch (~alch@151.82.94.43) (Ping timeout: 256 seconds)
[11:06:17] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[11:06:42] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[11:06:57] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Changing host)
[11:06:57] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[11:07:04] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[11:07:04] <Dean> hello!
[11:07:22] *** Quits: nexus (~nexus@84-236-10-61.pool.digikabel.hu) (Ping timeout: 250 seconds)
[11:07:40] *** Joins: alch (~alch@mi-18-34-41.service.infuturo.it)
[11:09:08] *** Joins: nexus (~nexus@77-234-80-151.pool.digikabel.hu)
[11:12:08] *** Joins: foul_owl (~kerry@23.82.193.87)
[11:12:48] *** Quits: Wh0 (~V@43.241.144.151) (Quit: Leaving)
[11:15:31] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[11:25:06] *** Joins: frost (~frost@user/frost)
[11:29:02] *** Quits: lleo (~leo@89-200-4-50.mobile.kpn.net) (Ping timeout: 250 seconds)
[11:29:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:30:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:31:29] *** Joins: moog (~moog@98.97.81.132)
[11:31:47] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[11:32:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:32:36] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[11:33:26] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:33:36] *** Joins: aradesh (~aradesh@user/aradesh)
[11:34:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[11:35:02] *** Joins: CCCG2022 (~dell@120.245.30.75)
[11:37:53] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:39:51] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[11:40:56] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[11:42:24] <krissmaster> Yes
[11:43:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:45:30] *** Joins: lleo (~leo@89-200-4-50.mobile.kpn.net)
[11:45:50] * greeter nods
[11:46:01] <pony> hi
[11:46:08] <greeter> greetings
[11:46:39] <pony> thank you greeter
[11:46:47] <pony> greetings to you too!
[11:46:57] <greeter> thank you :-) how's your day going so far?
[11:47:18] <pony> pretty good, yours?
[11:47:54] <greeter> not bad. a bit disappointed with the coding i got to do today, but there were extenuating circumstances. tomorrow should definitely be better :-D
[11:48:09] <pony> :)
[11:48:30] <greeter> incidentally my fiancee said i'm doing all the boring bits first. which kind of works for me because i haven't found it boring at all :-D
[11:48:49] <pony> ;)
[11:50:24] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[11:51:36] *** Joins: loganlee (~Thunderbi@user/loganlee)
[11:52:52] *** Joins: HaMsTeRs (~Thunderbi@210.3.201.132)
[11:53:22] *** Joins: SorryBeauty (~SorryBeau@103.76.184.42)
[11:55:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[11:56:00] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:ca00:67fe:b14c:d83a:53d8) (Remote host closed the connection)
[11:56:45] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[11:58:28] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:00:42] *** Quits: lleo (~leo@89-200-4-50.mobile.kpn.net) (Quit: butterflies in 1024 bits mobius trumpets)
[12:00:46] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[12:01:12] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:01:40] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:02:53] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[12:03:03] *** Joins: Rounin (~david@84.212.130.215)
[12:03:08] *** Joins: meator (~meator@user/meator)
[12:05:36] *** Quits: Posterdati (~posterdat@user/Posterdati) (Read error: Connection reset by peer)
[12:06:07] *** Joins: arinov (~arinov@213.194.126.155)
[12:06:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[12:09:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[12:10:28] *** Quits: neo1 (~neo@103.144.161.8) (Quit: WeeChat 3.4)
[12:10:58] *** Quits: pranshukhandal (~ghost@envs.net) (Quit: the lounge - https://webirc.envs.net)
[12:11:24] *** Joins: pranshukhandal (pranshukha@envs.net)
[12:16:23] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[12:16:37] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[12:16:42] *** Joins: meator (~meator@user/meator)
[12:16:56] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:17:08] *** Joins: yetoo (~yetoo@user/yetoo)
[12:17:39] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:18:00] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[12:21:11] *** Quits: meator (~meator@user/meator) (Ping timeout: 245 seconds)
[12:22:42] *** Joins: ztx (~ztx@user/ztx)
[12:23:06] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[12:24:33] *** Joins: novns (~novns@user/novns)
[12:25:33] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:26:02] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:27:21] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[12:27:48] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:28:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:28:35] *** Quits: tusko (~yeurt@user/tusko) (Ping timeout: 240 seconds)
[12:29:26] *** Joins: tusko (~yeurt@user/tusko)
[12:32:36] *** Joins: Posterdati (~posterdat@user/Posterdati)
[12:34:02] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[12:34:42] *** Joins: nishant (~Nishant@49.37.242.151)
[12:35:22] *** Quits: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu) (Remote host closed the connection)
[12:36:09] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[12:36:35] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Ping timeout: 240 seconds)
[12:36:55] *** Joins: Oddity (~Oddity@user/oddity)
[12:37:05] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[12:37:19] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[12:37:30] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[12:37:32] *** Quits: SorryBeauty (~SorryBeau@103.76.184.42) (Quit: Client closed)
[12:40:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:41:28] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:44:10] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:46:33] *** Joins: kts (~kts@103.73.237.22)
[12:47:00] <yetoo> so I'm compiling something with -Wconversion with code in = fgetc(stdin) and I get an error like  conversion from ‘int’ to ‘char’ may change value . Does this mean were I to explicitly cast (char) to fgetc(stdin) that the information lost with the int implicitly converting to char would somehow be saved by explicitly converting to char?
[12:48:13] *** Quits: cart_ (~cart@host-78-144-125-214.as13285.net) (Ping timeout: 256 seconds)
[12:50:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:52:22] <jjido> yetoo what is the return type of fgetc? What are you copying it to?
[12:52:41] *** Joins: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu)
[12:52:51] <gnoo> fgetc can return -1 as well so if you check for EOF and then only explicitly cast it, it should be fine
[12:52:54] <yetoo> jjido: in is char and fgetc returns int
[12:53:06] <jjido> See what gnoo said
[12:53:39] <jjido> the reason it returns an int is so that it can return -1 on EOF
[12:57:52] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[12:59:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:59:27] *** Quits: kts (~kts@103.73.237.22) (Quit: Konversation terminated!)
[13:02:55] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:10:41] *** Quits: alch (~alch@mi-18-34-41.service.infuturo.it) (Read error: Connection reset by peer)
[13:10:57] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[13:11:17] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[13:11:42] *** Joins: kdc (~kdc@196.211.197.130)
[13:13:16] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[13:13:34] <yetoo> It's not undefined behavior if I do char *string = NULL; then subsequently do string = "asd"; string = "a"; ?
[13:13:41] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:07] *** Joins: alch (~alch@to-18-88-211.service.infuturo.it)
[13:14:31] <dave0> yetoo: that's fine
[13:14:56] <yetoo> *as well as subsequently string = malloc(1024); string = "asd"; free(string); ?
[13:15:19] <dave0> nah can't do that
[13:15:28] <dave0> but you could possibly strcpy
[13:15:45] <dave0> string = malloc(1024); strcpy(string, "asd"); free(string);
[13:15:57] *** Quits: zer0python (jk@user/zer0python) (Ping timeout: 240 seconds)
[13:17:07] <yetoo> how come I could change strings on the stack without strcpy but cant do so with heap
[13:17:41] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[13:18:38] <yetoo> *change strings->assign strings
[13:19:17] <dave0> when you use a string literal   "asd" or "a"  the compiler automatically allocates space for it
[13:19:32] <dave0> so your pointer points to memory that the compiler allocated
[13:19:50] <dave0> when you malloc, your pointer points to dynamic memory
[13:20:09] <dave0> you must deallocate dynamic memory with free()
[13:21:09] <dave0> if you do    pointer = malloc(100); pointer = "test";   you first assign the dynamic memory allocated by malloc to pointer
[13:21:27] <dave0> but then you assign the compiler allocated memory for the string "test" to pointer
[13:21:30] *** Joins: SorryBeauty (~SorryBeau@103.25.241.127)
[13:21:33] <dave0> the malloc'ed pointer is lost
[13:22:00] <dave0> if you then free(pointer) you are actually calling it with a pointer to the compiler allocated memory
[13:22:10] <dave0> free("this is not allowed")
[13:22:45] <dave0> memory allocated by the compiler for strings cannot be written to, which is what strcpy would do
[13:23:07] <dave0> but you are free to copy whatever you like to memory allocated by malloc
[13:23:43] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[13:26:32] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[13:26:33] *** Quits: ekathva (~ekathva@n16j078fgylxou88w-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[13:26:51] *** Joins: ekathva (~ekathva@n16iyq1129bfzcbqr-1.v6.elisa-mobile.fi)
[13:27:24] <yetoo> dave0 thanks for the clarity. So if I had a char *string2 = NULL; and then pointed that to malloced string via string2 = string; if string2 was change to compiler allocated string like "asd", the malloced pointer wouldn't be lost, right?
[13:27:57] <dave0> yetoo: correct
[13:28:11] <yetoo> awesome
[13:28:59] <greeter> could you then later free that pointer?
[13:29:10] <dave0> yes
[13:29:20] <greeter> good to know :-D
[13:29:22] <dave0> but you have to be careful to NULL string2
[13:29:45] <greeter> makes sense
[13:30:01] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (Quit: Lost terminal)
[13:30:06] <yetoo> wait could you free(string2) while it is poitning to malloced string
[13:30:16] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[13:31:14] <dave0> when you make a copy of a pointer to memory, it's called aliasing... if you have   pointera = malloc(1000); pointerb = pointera;     pointerb 'aliases' pointera ... they are freely exchangable, BUT if you free(pointera) you must never refer to the memory through pointera OR pointerb
[13:32:32] <dave0> yetoo: whatever you pass to free() must have at some point come from malloc()
[13:33:40] <dave0> yetoo: probably the simplest is dedicate a variable for malloc/free, and use another pointer
[13:34:24] *** sweetsymph is now known as bittersweetsymph
[13:34:42] <dave0> ,cc char *mymemory = malloc(1000); char *pointer = mymemory; strcpy(pointer, "hello"); puts(pointer); pointer = "world"; puts(pointer); pointer = NULL; free(mymemory); mymemory = NULL;
[13:34:44] <candide> dave0: hello world
[13:35:10] *** Joins: unknow (~i.am@user/marlboro)
[13:35:14] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[13:35:18] <dave0> setting the variables to NULL is not necessary, but it might help tame some bugs
[13:35:39] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:36:03] <dave0> these memory bugs are notoriously difficult and lead to many exploits
[13:36:54] <dave0> "memory safety"
[13:37:04] <dave0> they don't exist in garbage collected languages
[13:37:10] <greeter> definitely sounds like it's easier to just NULL the variables once you're done with them. i know i'd find a way to mess things up otherwise
[13:37:14] <dave0> and rust does it's thing whatever it is
[13:37:24] <dave0> greeter: it can never hurt
[13:37:32] *** Quits: HaMsTeRs (~Thunderbi@210.3.201.132) (Quit: HaMsTeRs)
[13:39:26] <greeter> learned a lot just watching the chat about strings and pointers :-D
[13:39:43] *** Quits: nq (~nq@2a02:2f08:e015:a900:40da:1589:cc07:ab3) (Quit: Leaving)
[13:39:43] <dave0> if you were to not set `pointer` to NULL before free'ing `mymemory` and you accessed memory through `pointer` it is called "use after free" and it is a source of exploits
[13:40:45] <dave0> forgetting to free(mymemory) is called a "memory leak" which is not directly exploitable but if your program runs a long time, it will slowly use up all the memory and possibly get killed
[13:40:58] <greeter> makes sense. because that memory can contain anything now, right?
[13:41:17] <dave0> yes it could be reused for something else
[13:41:35] <dave0> even reading the memory after it has been free()'d is exploitable
[13:42:00] <greeter> i would imagine such memory could contain executable code that the programmer never intended to use
[13:42:05] <dave0> the memory may have been recycled and there is a secret that you shouldn't normally be able to see
[13:42:30] <dave0> i only hear about high profile exploits, i personally can't do them
[13:42:36] *** Quits: nexus (~nexus@77-234-80-151.pool.digikabel.hu) (Ping timeout: 240 seconds)
[13:42:57] <dave0> c memory handling is a can of worms
[13:43:02] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[13:43:23] <greeter> indeed. i understand an exploit in gets() resulting in a buffer overrun is one way that the morris worm spread
[13:43:32] *** Quits: drbeco (~beco@user/beco) (Ping timeout: 240 seconds)
[13:44:33] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[13:44:33] *** Joins: z4r4 (~z4r4@89.36.78.230)
[13:44:33] *** Joins: nexus (~nexus@193-110-63-52.cable-modem.hdsnet.hu)
[13:46:03] <dave0> ah yes it only took 30 years to remove gets from the c language :-)
[13:46:30] <LeoNerd> Just imagine what we can get rid of in another 30
[13:46:46] *** Joins: ztx (~ztx@user/ztx)
[13:46:51] <z4r4> Are fixed point numbers better for representing elapsed time than floating point numbers even if I'm going to perform many math operations on it?
[13:47:15] <LeoNerd> Most likely. I usually store time in integer nanoseconds.. or some other small suitable unit
[13:47:54] <z4r4> I have the seconds and nanoseconds and I was thinking if I should store them as fixed point numbers or just convert everything to a double
[13:48:10] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:48:37] <LeoNerd> If these are POSIX epoch times in seconds, then a double doesn't have nanosecond resolution
[13:48:52] <LeoNerd> You lose a lot of precision in the small bits, because of the large ones
[13:51:56] <z4r4> But a double has 52 bits in the fraction and the nanoseconds can be stored in 30 bits, and I'm representing small elapsed times (usually less than 10 seconds, my program is going to invalidate events that occur in larger time spans)
[13:55:05] *** Joins: crankslider (~slidercra@user/slidercrank)
[13:56:45] *** Joins: frost (~frost@user/frost)
[13:57:28] *** Joins: vysn (~vysn@user/vysn)
[13:58:03] *** Quits: kdc (~kdc@196.211.197.130) (Quit: Leaving)
[13:59:49] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[14:00:05] <yetoo> how well can valgrind catch memory leaks/errors? I'm trying to use these options -s -v  --leak-check=full --show-leak-kinds=all --track-origins=yes --default-suppressions=no  but I read that theres a good amount of false positives
[14:00:55] *** Joins: Enitin (~Enitin@82.180.145.223)
[14:00:59] *** Quits: SorryBeauty (~SorryBeau@103.25.241.127) (Ping timeout: 256 seconds)
[14:03:58] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[14:05:14] *** Joins: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt)
[14:06:11] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[14:06:32] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[14:06:59] *** Joins: shivesh (~shivesh@user/shivesh)
[14:07:32] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 240 seconds)
[14:09:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[14:10:27] *** Quits: myon98 (~myon98@user/myon98) (Ping timeout: 265 seconds)
[14:18:10] *** Quits: malloy (~jimery@120.235.172.170) (Ping timeout: 265 seconds)
[14:18:20] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:19:25] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[14:19:44] *** Joins: malloy (~jimery@120.235.172.170)
[14:26:57] *** Joins: myon98 (~myon98@user/myon98)
[14:27:02] *** Quits: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se) (Ping timeout: 240 seconds)
[14:27:04] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[14:30:06] *** Quits: Elladan (~elladan@user/elladan) (Quit: ZNC - http://znc.in)
[14:30:42] *** Parts: CCCG2022 (~dell@120.245.30.75) ()
[14:31:24] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[14:31:40] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[14:31:56] *** Joins: Elladan (~elladan@user/elladan)
[14:32:48] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:29] *** Joins: csrf (~csrf@user/csrf)
[14:34:25] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:34:30] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:35:03] *** Joins: NeoCron (~NeoCron@p200300e47f277d00ff410b6acd6256a7.dip0.t-ipconnect.de)
[14:47:37] *** Quits: milesrout (ce261f06ff@2604:bf00:561:2000::257) (Remote host closed the connection)
[14:47:47] *** Joins: milesrout (ce261f06ff@2604:bf00:561:2000::257)
[14:49:20] *** Quits: Khoyo_ (~khoyo@user/khoyo) (Quit: ZNC 1.8.2 - https://znc.in)
[14:50:02] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 240 seconds)
[14:50:26] *** Joins: Khoyo (~khoyo@user/khoyo)
[14:51:10] *** Joins: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se)
[14:52:04] *** Joins: Enitin (~Enitin@82.180.145.228)
[14:54:06] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[14:54:14] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Remote host closed the connection)
[14:57:19] *** Joins: Optimus (~risto@87.227.227.147)
[14:58:28] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[15:00:02] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[15:03:02] *** Joins: kurfen (~kurfen@176.119.195.8)
[15:03:04] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[15:03:48] *** Quits: yggdrasil (~yggdrasil@67-0-3-112.albq.qwest.net) (Ping timeout: 240 seconds)
[15:04:19] *** Joins: Oddity (~Oddity@user/oddity)
[15:05:36] *** Joins: yggdrasil (~yggdrasil@67-0-63-174.albq.qwest.net)
[15:10:49] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:11:33] *** Quits: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:13:24] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[15:13:39] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf) (Quit: Client closed)
[15:14:17] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[15:17:01] *** Joins: arinov (~arinov@213.194.126.155)
[15:19:23] *** Joins: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt)
[15:20:43] *** Joins: drbeco (~beco@user/beco)
[15:24:11] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.4)
[15:26:44] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[15:28:49] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:31:30] *** Joins: myusername (~myusernam@user/myusername)
[15:31:47] *** Quits: davidlowryduda (~davidlowr@73.61.8.157) (Quit: WeeChat 3.0)
[15:33:32] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 240 seconds)
[15:35:26] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[15:36:40] *** Joins: Elladan (~elladan@user/elladan)
[15:37:01] *** Joins: cincoswim (~cincoswim@cm-72-241-113-163.buckeyecom.net)
[15:37:19] *** Joins: AmR (~AmREiSa@156.207.194.71)
[15:37:33] *** Quits: arinov (~arinov@213.194.126.155) (Remote host closed the connection)
[15:41:24] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[15:41:46] *** Quits: mjh4386_ (~mjh4386@165.22.53.231) (Ping timeout: 268 seconds)
[15:41:48] <rindolf> hi all
[15:43:05] *** Quits: ekathva (~ekathva@n16iyq1129bfzcbqr-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[15:43:10] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[15:43:25] *** Joins: ekathva (~ekathva@n16j10whr3kjy4awe-1.v6.elisa-mobile.fi)
[15:43:36] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[15:45:09] *** Quits: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:47:49] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[15:49:27] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 252 seconds)
[15:49:32] *** Quits: cincoswim (~cincoswim@cm-72-241-113-163.buckeyecom.net) (Ping timeout: 240 seconds)
[15:52:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[15:54:16] <yetoo> how should i check for EOF from fgetc in a while loop? I had while (charvar = (fgetc(stdin) != -1)) but the program looked like it was in a loop. I know I should use EOF instead of -1, but that doesn't seem like it would make different didnt test though
[15:56:08] <dave0> yetoo: int c; while(c = fgetc(stdin), c != EOF) {     or the more common but not my favorite   int c; while((c = fgetc(stdin)) != EOF) {
[15:56:26] <gnoo> while(((intvar = fgetc(stdin)) != EOF ) && ( charvar = intvar )) {
[15:58:26] <gnoo> hmm, this will fail in NUL character. assigning at the beginning of loop should work
[15:58:40] <yetoo> if I did while (!feof(stdin)) and then charvar = fgetc(stdin) in the body, is that safe enough to avoid malformed EOF
[15:58:43] *** Joins: ztx (~ztx@user/ztx)
[15:59:05] <fizzie> That will give you one iteration of the loop where charvar == (char) EOF, most likely.
[15:59:23] <fizzie> Because `feof(stdin)` will be true only after you've tried to read, and failed.
[15:59:55] <dave0> yetoo: it's the intuitive way, but not the c way
[16:00:01] <fizzie> ,cc while (!feof(stdin)) { char c = fgetc(stdin); printf("%d ", c); } -stdin=foo
[16:00:03] <candide> fizzie: 102 111 111 10 -1
[16:00:48] <fizzie> See the extra -1. (Or, on a system with a different EOF or an unsigned plain `char` type, some other value.)
[16:00:59] *** Joins: somlis (~somlis@user/somlis)
[16:01:28] <dave0> yetoo: you must try to read something, and if you get an exception (signalled by returning a constant) then the file ended or some other condition
[16:01:47] <dave0> it's an exceptional value, not a java type exception or trap
[16:02:02] <dave0> yetoo: the constant is confusingly named EOF
[16:02:19] <dave0> it's really a signal that you have reached the end of file, or some error
[16:03:13] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:c15a:336e:8189:5a46)
[16:03:25] <dave0> and the confusingly named feof() distinguishes the end of file condition from an error
[16:04:14] *** Quits: nexus (~nexus@193-110-63-52.cable-modem.hdsnet.hu) (Read error: Connection reset by peer)
[16:05:02] <dave0> yetoo: try and read a character, if the EOF constant is returned, break out of your loop, and use feof or ferror to check for errors (no one does that, i've never seen it done ;-)
[16:05:34] <dave0> kinda like no one ever checks the result of printf
[16:08:00] <yetoo> thanks
[16:08:30] <yetoo> why would  (charvar = (fgetc(stdin) != -1)) infinite loop
[16:09:19] <fizzie> It wouldn't. `while ((charvar = fgetc(stdin)) != -1)` might, if EOF isn't representable as the type of `charvar`.
[16:09:26] <dave0> the brackets make it evaluate != and the result of not-equals is assigned to your variable
[16:09:48] *** Joins: nexus (~nexus@84-236-55-5.pool.digikabel.hu)
[16:10:55] <fizzie> It does that all right (so you don't get the characters that you'd presumably want), but that still wouldn't cause an infinite loop (unless EOF != -1, of course).
[16:12:07] <fizzie> ,cc -w char charvar; while (charvar = (fgetc(stdin) != -1)) printf("%d ", charvar); /* not an infinite loop */ -stdin=hello there
[16:12:09] <candide> fizzie: 1 1 1 1 1 1 1 1 1 1 1 1
[16:12:21] <ioxzev1z> yetoo, doesn't that assign to charvar the boolean value of the check?
[16:12:45] <ioxzev1z> (fgetc(stdin) != -1), if true charvar is true, else false
[16:13:09] <ioxzev1z> You want (charvar = fgetc(stdin)) != -1
[16:13:59] *** PublicWifi is now known as PublicWiFi
[16:15:03] *** Quits: Optimus (~risto@87.227.227.147) ()
[16:16:03] *** Joins: Klinda (~superleag@user/klinda)
[16:19:08] <NRK> `charvar` just call it `c`
[16:19:32] <NRK> though i can almost see why it was named like that
[16:20:17] <NRK> "hmm, okay so i'll store the char in this variable named 'char'... oh wait that's a keyword, uhhh, i'll just append 'var' and call it 'charvar' instead"
[16:20:26] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:20:38] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:20:40] *** Quits: rany (~rany@user/rany) (Quit: The Lounge - https://thelounge.chat)
[16:20:56] *** Joins: rany (~rany@user/rany)
[16:21:13] <sham1> The next level of Hungarian notation: we just include the entire name of the type
[16:22:20] <yetoo> fizzie: later down, it's supposed break when newline comes from stdin, so when I was doing  (charvar = (fgetc(stdin) != -1)) it wasnt breaking out of the loop
[16:22:26] <sham1> Although doing something like `int charval; while ((charval = fgetc(stdin)) != -1) { unsigned char c = charval; }` doesn't seem that unreasonable
[16:23:13] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[16:25:10] <NRK> yetoo: because you're not getting the char from stdin
[16:25:34] <NRK> ,cc printf("%d -- %d", 5 != 0, 5 != 5);
[16:25:36] <candide> NRK: 1 -- 0
[16:26:18] <NRK> in your code, charvar will always be either 0 or 1. see what ioxzev1z suggested
[16:27:36] *** Quits: myusername (~myusernam@user/myusername) (Quit: Leaving)
[16:29:33] <dave0> yetoo: int c; while(c = fgetc(stdin), c != EOF && c != '\n') {
[16:29:43] <dave0> this is why i like comma
[16:30:08] <dave0> while((c = fgetc(stdin)) != EOF && c != '\n') {     is way worse
[16:30:11] <NRK> ahh yes, tricks with the comma operator
[16:30:44] <NRK> i pull them off time to time, to avoid having to put {} around an if/for/while blocks
[16:30:44] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:31:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[16:31:04] <dave0> ah yes
[16:31:20] <dave0> if(file == NULL) perror("fopen error"), exit(1);
[16:32:29] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[16:32:32] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 240 seconds)
[16:32:38] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 260 seconds)
[16:33:11] <NRK> `dirname = ((*strrchr((tmp = estrdup(abspath)), '/')) = '\0', tmp);`
[16:33:19] <cassepipe> Hi ! Does I think we may have had that discussion here already but I can't remember the specifics ... It does not make sense to ever return(errno) right ?
[16:33:42] <NRK> return where?
[16:33:44] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[16:33:50] <cassepipe> In a program
[16:33:58] <cassepipe> exit(errno)
[16:34:01] <cassepipe> rather
[16:34:09] <dave0> cassepipe: eh there is .. oh not exit
[16:34:20] <NRK> yes, i was asking if you meant exiting with that or returning it to the parent function
[16:34:39] <dave0> in posix, pthread_* stuff tends to return errno-ish values.. not exit() though
[16:34:55] <dave0> so there is existing practise
[16:35:15] *** Joins: neo1 (~neo@103.144.161.8)
[16:36:11] <cassepipe> I seem to remember the reason was in some system the value returned by exit can't carry as much bits as erno has but that was long...
[16:36:53] <cassepipe> dave0: What's errno-ish ? do pthreads have their own error flag system ?
[16:37:34] <fizzie> Yes, it's not uncommon that the value passed through exit is limited to 8 bits, while some errno values are bigger than that.
[16:37:41] <dave0> afaik it's not a direct    return(errno)    rather it just returns return(ENOMEM); or whatever
[16:38:00] *** Quits: In0perable (~PLAYER_1@fancydata.science) (Quit: All your buffer are belong to us!)
[16:38:15] <dave0> i don't think the pthread_* stuff modifies errno
[16:38:20] <dave0> i'd have to look it up
[16:38:33] <dave0> whereas errno is sprinkled throughout c
[16:38:56] <dave0> and created headaches when unix got threads
[16:40:48] <yetoo> thanks
[16:43:01] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:45:40] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[16:46:16] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[16:48:40] *** Joins: Psybur (~Psybur@mobile-166-171-56-243.mycingular.net)
[16:49:22] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[16:49:57] *** Quits: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se) (Ping timeout: 252 seconds)
[16:53:39] *** Joins: Masklin__Gurder (~joel@pool20.nat.lunet.lu.se)
[16:54:29] *** Joins: Masklin_Gurder (~joel@bioinf-serv.biol.lu.se)
[16:54:55] *** Quits: Masklin_Gurder (~joel@bioinf-serv.biol.lu.se) (Client Quit)
[16:55:51] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 256 seconds)
[16:55:53] *** Joins: missogra (~missogra@p200300d0971410ba5a2d35473331f2b1.dip0.t-ipconnect.de)
[16:56:20] <dmlloyd> pthreads tends to return an error number, but irrespective of that, pretty much everyone uses thread locals for errno and has for decades
[16:56:55] *** Joins: ekathva_ (~ekathva@2001:999:51:1ac7:eb43:36ae:d67e:26d9)
[16:58:48] *** Quits: ekathva (~ekathva@n16j10whr3kjy4awe-1.v6.elisa-mobile.fi) (Ping timeout: 250 seconds)
[16:58:57] *** Joins: ekathva__ (~ekathva@2001:999:40c:dc3f:ea31:ce58:5320:d00e)
[16:59:30] *** Joins: zer0x (~zer0x@58.186.50.2)
[17:00:52] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[17:01:12] <dave0> not on the robot
[17:01:23] <dave0> ,cc #define xx(a) #a \n #define x(a) xx(a) \n puts(x(errno));
[17:01:24] *** Quits: ekathva_ (~ekathva@2001:999:51:1ac7:eb43:36ae:d67e:26d9) (Ping timeout: 240 seconds)
[17:01:25] <candide> dave0: (*__errno_location ())
[17:01:39] <dave0> but that doesn't prove anything :-(
[17:04:27] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:05:41] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[17:06:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[17:06:37] *** Quits: ekathva__ (~ekathva@2001:999:40c:dc3f:ea31:ce58:5320:d00e) (Ping timeout: 240 seconds)
[17:07:19] <yetoo> so I have this line inputsize = i * ( sizeof(char) * sizeof(*ptr) ); where inputsize is a size_t and i is an integer. -Wconversion says conversion to ‘long unsigned int’ from ‘int’ may change the sign of the result. 1. Is the right thing to do here to cast i as long unsigned int 2. If so would that require checking to make sure there isn't a overflow (i mean a regular integer is just as susceptible but I'm feeling like unsigned is more vulnerable/nee
[17:07:20] <yetoo> d error checking
[17:09:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[17:10:10] <dmlloyd> dave0, looks like glibc, which uses a thread local for errno :)
[17:10:47] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[17:11:24] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 252 seconds)
[17:12:30] *** Quits: alch (~alch@to-18-88-211.service.infuturo.it) (Ping timeout: 252 seconds)
[17:13:44] *** Joins: alch (~alch@to-18-75-253.service.infuturo.it)
[17:14:49] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[17:15:16] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Ping timeout: 250 seconds)
[17:17:08] *** Joins: malloy (~jimery@120.235.172.170)
[17:17:50] <cassepipe> dave0: fizzie : Thanks for your insights
[17:18:00] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Remote host closed the connection)
[17:18:56] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[17:20:08] *** Joins: haliucinas (~haliucina@5.20.153.21)
[17:20:31] *** Joins: ekathva__ (~ekathva@2001:999:40c:dc3f:363e:180f:158e:5648)
[17:20:38] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:21:32] <sham1> Well nowadays you have to use a thread-local value for errno
[17:21:37] <sham1> The standard mandates it
[17:23:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:25:14] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:25:37] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[17:26:20] <sham1> Of course that's only really relevant if the target supports threads in the first place
[17:29:37] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 240 seconds)
[17:34:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:35:30] *** Joins: zer0x_ (~zer0x@58.186.50.2)
[17:36:37] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[17:37:08] *** Quits: neo1 (~neo@103.144.161.8) (Quit: WeeChat 3.4)
[17:37:56] *** Joins: neo1 (~neo@103.144.161.8)
[17:38:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:39:12] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:39:17] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 240 seconds)
[17:40:34] *** Quits: neo1 (~neo@103.144.161.8) (Client Quit)
[17:42:02] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[17:42:02] *** Joins: neo1 (~neo@103.144.161.10)
[17:42:03] <fizzie> Okay, I usually don't comment on regular `sizeof (char)` use, but `sizeof(char) * sizeof(*ptr)` is just too much to bear.
[17:42:41] * pragma- shakes fist in the air and shouts "COMMENT ON ALL THE THINGS!"
[17:43:06] * clarity shakes tail in the ground
[17:43:51] <edk> that sounds difficult, unless you're shaking with enough force to induce liquefaction
[17:46:34] <clarity> If there is a fox den in the ground, is it in the ground?  If there is a tail in the den, is it in the ground?
[17:47:36] <pragma-> The fox den is in the ground but your tail is in the fox den.
[17:47:39] * pragma- nods.
[17:50:14] * fluter chuckles.
[17:50:22] *** Quits: ekathva__ (~ekathva@2001:999:40c:dc3f:363e:180f:158e:5648) (Quit: Leaving)
[17:52:58] *** Joins: badsektor (~badsektor@user/badsektor)
[17:54:38] *** Joins: SaltHillStroller (~SaltHillS@thunderhill.nvidia.com)
[17:54:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:55:33] *** Quits: jakesyl__ (sid56879@2a03:5180:f:4::de2f) (Ping timeout: 250 seconds)
[17:55:33] *** Quits: sunarch (sid526836@user/sunarch) (Ping timeout: 250 seconds)
[17:55:33] *** Quits: ltm (sid222641@id-222641.tinside.irccloud.com) (Ping timeout: 250 seconds)
[17:55:59] *** Quits: sa (sid1055@2a03:5180:f::41f) (Ping timeout: 250 seconds)
[17:56:04] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[17:56:25] *** Quits: glowcoil (sid3405@2a03:5180:f::d4d) (Ping timeout: 250 seconds)
[17:56:31] *** Quits: nikomo (~quassel@nikomo.fi) (Remote host closed the connection)
[17:56:49] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[17:56:56] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[17:57:02] *** Joins: sunarch (sid526836@user/sunarch)
[17:57:03] *** Joins: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com)
[17:57:22] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[17:57:23] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[17:57:39] *** Joins: nikomo (~quassel@nikomo.fi)
[17:58:43] *** Joins: ltm (sid222641@id-222641.tinside.irccloud.com)
[17:59:32] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 240 seconds)
[18:01:15] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[18:01:49] <yetoo> fizzie: the *ptr was because a stackoverflow post on doing realloc correctly used *ptr as part of the calculation
[18:02:58] *** Joins: Torr (~Torr@user/torr)
[18:03:10] *** Joins: haliucinas (~52b4903d@5.20.153.21)
[18:04:20] <sham1> Taking the size of a char can come up when allocating arrays, although writing it out directly as sizeof(char) is quite weird. I tend to however get stuff like `char *foo_arr = calloc(sizeof(*foo_arr), length_expression);` which while redundant since sizeof(char) is by definition zero, it also means that `foo_arr` can change its type and make it not break as easily. But yeah, `sizeof(char) *
[18:04:22] <sham1> sizeof(*ptr)` is definitely odd
[18:04:58] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:05:14] <Inline__> it's a pointer but since it's derefernced it's an object
[18:05:44] <fizzie> It's not the `sizeof (*ptr)` part that's odd, it's multiplying that by `sizeof (char)` (i.e., 1).
[18:05:45] <Inline__> ptr is the pointer and *ptr is the object
[18:06:28] *** Inline__ is now known as Inline
[18:06:28] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[18:06:44] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:06:52] <yetoo> the size will most likely always be 1 * 1 but I'm not sure if that would change on another system unless im incorrect about *ptr size
[18:07:18] <Inline> *ptr is the object size
[18:07:24] <Inline> ptr would be the pointer size
[18:07:38] <fizzie> `sizeof *ptr` depends on the type of `ptr`. `sizeof (char)` is just a verbose way of saying 1.
[18:08:02] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Changing host)
[18:08:02] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[18:08:32] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[18:08:37] *** Quits: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com) (Quit: leaving)
[18:09:09] <Inline> ? sure ?
[18:09:34] <Inline> sizeof(object) depends on the type of object
[18:09:42] <Inline> sizeof(pointer) depends on the type of pointer
[18:09:50] <fizzie> You can argue that `sizeof (char)` can make sense for consistency sometimes (maybe the type will change, and you wouldn't want to forget the non-redundant `sizeof`) but I don't think even that argument can apply to `sizeof *ptr * sizeof (char)`.
[18:12:20] *** ColdKeybo[a]rd is now known as ColdKeyboard
[18:14:43] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[18:15:25] *** Joins: lleo (~leo@89-200-4-50.mobile.kpn.net)
[18:15:41] *** Joins: SaltHilStroller_ (~SaltHillS@thunderhill.nvidia.com)
[18:16:50] <Bou> I wonder, what kind of system would have `sizeof(char*) != sizeof(int*)`... Does anything like that even exist?
[18:17:16] <Inline> Use the type char for character and string data.
[18:17:27] <Inline> "Use the type unsigned char as the atom of all object types."
[18:17:44] <fizzie> Bou: The canonical hypothetical example is a word-addressed system where `char *` needs to indicate the address of a word + an offset within a word, but `int *` only needs the first part. I don't know if one exists though.
[18:18:14] *** Joins: Enitin (~Enitin@82.180.145.226)
[18:18:23] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1192:1a3c:917b:5b02)
[18:18:23] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1192:1a3c:917b:5b02) (Changing host)
[18:18:23] *** Joins: skapata (~Skapata@user/skapata)
[18:18:26] <NRK> Bou: i think there were some systems where that was the case, or i've read something along those lines.
[18:18:33] <pragma-> I get really annoyed when people write `sizeof(object);` instead of `sizeof object;` since the parens are required only for types.
[18:18:33] <NRK> i'll see if i can find the link
[18:18:51] <fizzie> http://c-faq.com/null/machexamp.html mentions some Crays that have a scheme a little like that, but that "represent int * in the lower 48 bits of a word; char * additionally uses some of the upper 16 bits to indicate a byte address", which sort of suggests they're still the same size, just incompatible(-ish) representations.
[18:19:00] <NRK> muh consistency
[18:19:03] <pragma-> and with types, I get annoyed when they write 'sizeof(type);` instead of `sizeof (type);` since sizeof is a keyword rather than a function.
[18:19:26] <pragma-> Thanks for coming to my Pragma Talk.
[18:19:30] *** Quits: SaltHillStroller (~SaltHillS@thunderhill.nvidia.com) (Ping timeout: 260 seconds)
[18:19:35] *** Quits: z4r4 (~z4r4@89.36.78.230) (Quit: Leaving.)
[18:19:50] <Bou> `return(0); // sorry pragma`
[18:19:51] <NRK> pragma-: it's a good way to blend in with the mortals :)
[18:19:58] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[18:19:58] *** Quits: divine (~divine@2001:470:8247:1::31) (Ping timeout: 260 seconds)
[18:20:02] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:20:07] * pragma- eye twitches at Bou.
[18:20:09] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:20:11] *** Joins: meator (~meator@user/meator)
[18:20:15] *** Joins: divine (~divine@2001:470:8247:1::31)
[18:20:34] <fizzie> If also name-drops a few other (ancient) systems with different formats for "word pointers" vs. "byte pointers", but doesn't explicitly say if they're different sizes as well.
[18:21:57] <fizzie> The addendum -- http://c-faq.com/null/wierdptrs.ct.html -- makes it sound like at least some of those were more of the same "different and incompatible format, but same size" though.
[18:23:03] <pragma-> is that really spelled wierd?
[18:23:11] * pragma- eye twitches again.
[18:23:12] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[18:23:25] <fizzie> No, it's a wierd spelling of weird.
[18:23:38] *** Quits: treble (~treble@user/treble) (Read error: Connection reset by peer)
[18:23:40] *** Quits: luca0N_ (~luca0N@nautilus.luca0n.com) (Ping timeout: 272 seconds)
[18:24:03] <NRK> lol
[18:24:51] *** Joins: pulse (~pulse@user/pulse)
[18:26:54] *** Quits: lleo (~leo@89-200-4-50.mobile.kpn.net) (Read error: Connection reset by peer)
[18:27:12] <Inline> "Every object A can be viewed as unsigned char[sizeof A]."
[18:27:22] *** Joins: luca0N (~luca0N@nautilus.luca0n.com)
[18:27:39] <pragma-> This is called object representation.
[18:27:46] *** luca0N is now known as Guest7149
[18:28:45] <Inline> "A pointer must point to a valid object, one position beyond a valid object
[18:28:46] <Inline> or be null."
[18:30:09] *** Joins: treble (~treble@user/treble)
[18:30:50] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:31:37] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[18:31:58] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[18:32:47] *** Quits: Guest7149 (~luca0N@nautilus.luca0n.com) (Ping timeout: 252 seconds)
[18:40:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:43:48] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 252 seconds)
[18:44:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:46:41] <ioxzev1z> How does the one beyond work? Surely it'll segfault
[18:47:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[18:47:34] *** Quits: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 250 seconds)
[18:47:38] *** Joins: lispy (~lispy@user/lispy)
[18:47:45] <dave0> so you can   int a[10], *ptr; for(ptr = a; ptr < a + 10; ptr++)
[18:47:56] <NRK> a pointer can POINT to one element beyond a valid object, but not de-reference it
[18:47:56] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[18:48:03] *** Joins: angelacrust (~angelacru@223.233.74.100)
[18:48:27] <lispy> is that a challenge?
[18:48:34] <dave0> a[9] is okay, a[10] is not, &a[10] is okay
[18:48:42] <ioxzev1z> oic
[18:48:50] <NRK> u can dereference it, it's just UB :)
[18:49:11] <cryptonector> Is there a way to tell valgrind programmatically (i.e., not with a suppressions file) that some allocation is meant to be leaked and it's OK?
[18:49:35] <cryptonector> (yes, I know, that's not really a C question, but I figured someone here might know)
[18:50:08] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:50:46] *** Quits: neo1 (~neo@103.144.161.10) (Quit: WeeChat 3.4)
[18:51:21] <angelacrust> hello, I was calculating the average using three different variables of type `int` a few hours back, and I was getting the correct result.
[18:51:22] <angelacrust> I've changed the code to use a structure variable that's supposed to perform the same operation, but the result isn't correct.
[18:51:22] <angelacrust> https://bpa.st/LJIQ
[18:52:09] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:52:50] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[18:53:24] *** Joins: strajder (~strajder@user/strajder)
[18:54:03] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Quit: Konversation terminated!)
[18:54:24] <dragonmaster> Maybe I'm missing something but it looks like you're printing the averages before calculating them
[18:55:28] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Changing host)
[18:55:28] *** Joins: ullbeking_ (sid5364@user/ullbeking)
[18:55:29] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[18:55:40] *** flooded is now known as _flood
[18:56:16] <angelacrust> oh, ignore the `printf`s -- I didn't want to initialize an extra variable to store the sum of values
[18:56:16] <angelacrust> so the first loop should store the sums of all values, not average
[18:56:18] <cryptonector> or, is there a channel where questions about valgrind might be best sent?
[18:57:25] <angelacrust> there's a logical flaw which I can't seem to point out
[18:57:45] <Bou> might be overflow, what's the type of rgbtBlue etc?
[18:57:57] <angelacrust> It's `uint8_t`
[18:58:22] <Bou> see, that's not enough to add all pixels together
[18:58:33] <angelacrust> ah
[18:58:48] <angelacrust> damn it:(
[18:59:17] *** ullbeking_ is now known as ullbeking
[18:59:38] <clarity> And this is why I'm annoyed by everyone who whines about the UBness of signed int overflow..
[18:59:56] <clarity> Even if you make it defined, your program is still likely to be wrong if it overflows.
[19:00:43] *** Joins: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder)
[19:02:29] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[19:02:32] <angelacrust> well, what if I keep the values of those `int`s within the range 0-255? is that a correct approach? Or, should I use three different variables again?
[19:03:18] *** Quits: nosolls (~nosollsma@user/nosolls) (Quit: Reconnecting)
[19:03:34] *** Joins: nosolls (~nosollsma@user/nosolls)
[19:03:35] <angelacrust> and, IIRC, I was using three variables of the type `uint8_t` to calculate average earlier
[19:03:37] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[19:03:55] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 240 seconds)
[19:04:06] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[19:04:10] * pragma- squints.
[19:04:22] <clarity> You need to change the type of rgbtBlue & co such that they can hold the sum
[19:04:24] <pragma-> &a[10] doesn't seem ok to me
[19:04:26] <Bou> you're calculating the sum first, you probably have thousands or millions of pixels, that number will reach a few hundred million easily
[19:04:30] <pragma-> &(a + 10), sure.
[19:04:43] <pragma-> or is that just (a + 10)
[19:05:52] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:06:10] <angelacrust> ok so I'll calculate the average inside the loop so that the pixels remain well within range
[19:06:23] *** Quits: zer0x_ (~zer0x@58.186.50.2) (Ping timeout: 250 seconds)
[19:06:34] <pragma-> I hate that not using C for 5+ years is long enough to introduce doubts about whether & behaves like sizeof in that dereferences don't apply.
[19:06:42] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Client Quit)
[19:07:23] <pragma-> I used to be very confident in my C knowledge. But lately I'm second-guessing far too many things.
[19:07:26] <pragma-> What an ambiguous language.
[19:07:37] <angelacrust> :(
[19:07:57] *** Joins: cassepipe (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr)
[19:08:55] <clarity> pragma-: >if the operand is the result of a [] operator, neither the & operator nor the unary * that is implied by the [] is evaluated and the result is as if the & operator were removed and the [] operator were changed to a + operator
[19:09:00] *** Quits: X-Scale (~ARM@89.214.146.79) (Ping timeout: 240 seconds)
[19:09:10] * pragma- squints
[19:09:35] <pragma-> ,c11 were removed
[19:09:37] <candide> http://www.iso-9899.info/n1570.html#6.5.3.2p3 [Address and indirection operators] The unary & operator yields the address of its operand. If the operand has type ``type'', the result has type ``pointer to type''. If the operand is the result of a unary * operator, neither that operator nor the & operator is evaluated and the result is as if both were omitted, except that the constraints on the operators s... <truncated; https://0x0.st/oNZR.txt>
[19:09:53] *** Joins: X-Scale (~ARM@92.250.103.125)
[19:10:05] <pragma-> THERE IS TOO MUCH FUCKING ENGLISH PROSE IN THE C STANDARD! I CAN'T READ THIS BULLSHIT! USE A LESS AMBIGUOUS LANGUAGE, LIKE GERMAN OR SOEMTHING, I DON'T KNOW.
[19:10:08] * pragma- SLAMS DOORS.
[19:10:59] *** Quits: dsrt^ (~dsrt@65.240.140.18) (Remote host closed the connection)
[19:11:13] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[19:11:15] <angelacrust> :')
[19:13:33] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:13:45] *** Joins: badsektor (~badsektor@user/badsektor)
[19:15:02] *** Joins: Enitin (~Enitin@82.180.145.226)
[19:15:22] *** Joins: ztx (~ztx@user/ztx)
[19:15:31] <cryptonector> clarity: well, yes, but the UBness of signed overflow is not annoying just because all fixed-width integer overflow is annoying -- the UBness of signed overflow is annoying because optimizers decide to do things like delete your code because it has UB ("so it's like your code is not even there, because you know, UB, so f**k off and die! muahahahahaha")
[19:16:09] <cryptonector> and, really, at this point there's no reason not to provide a defined behavior for signed integer overflow in the next C
[19:16:53] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[19:18:21] *** Quits: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[19:19:33] *** Joins: rgrinberg (~textual@177.241.245.222)
[19:20:07] *** Quits: rgrinberg (~textual@177.241.245.222) (Client Quit)
[19:20:22] <strajder> if a is a "int* a", a+10 is still int*; &(a+10) is a int**; a[10] is int; &a[10] is int*
[19:21:34] <cryptonector> to answer _my_ question about valgrind... it's unclear, but maybe, just maybe I can use VALGRIND_MALLOCLIKE_BLOCK() to mark some memory as allocated, immediately mark it free'd with VALGRIND_FREELIKE_BLOCK(), then immediately mark it defined with VALGRIND_MAKE_MEM_DEFINED() to suppress leak errors about that memory, but I've not tested it, so I don't know
[19:21:48] <angelacrust> I've finally solved this problem. Thank you everyone!
[19:22:54] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:25:18] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[19:26:36] <cryptonector> however, that is not quite what I'm after -- I want to suppress entire leak reports programmatically as if I had generated suppressions files
[19:26:41] <cryptonector> bah
[19:27:00] *** Quits: missogra (~missogra@p200300d0971410ba5a2d35473331f2b1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:29:14] *** Joins: Artea (~Lufia@artea.com.pt)
[19:29:57] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[19:32:49] <Bou> \
[19:33:27] <Bou> (sorry, cat walked on keyboard)
[19:34:12] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[19:34:45] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[19:35:08] <angelacrust> your cat only pressed one key
[19:35:15] <NRK> it's the cat's keyboard now
[19:35:30] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[19:35:38] *** Joins: ckdCreations (~ckdCreati@147.55.133.139)
[19:35:40] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[19:36:57] <Bou> angelacrust: hundreds actually, I managed to remove the threat before he found his way to <enter> again
[19:37:28] <angelacrust> I see
[19:37:41] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Quit: heiner)
[19:38:12] *** Quits: boreas (~heiner@94.31.85.196) (Read error: Connection reset by peer)
[19:38:46] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[19:41:22] *** Quits: angelacrust (~angelacru@223.233.74.100) (Quit: Client closed)
[19:42:21] *** Quits: SaltHilStroller_ (~SaltHillS@thunderhill.nvidia.com) (Read error: Connection reset by peer)
[19:43:59] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[19:46:59] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:47:49] *** Quits: meator (~meator@user/meator) (Ping timeout: 268 seconds)
[19:47:57] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 240 seconds)
[19:48:11] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:48:14] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[19:51:21] *** Joins: SaltHillStroller (~SaltHillS@199.249.111.186)
[19:51:50] *** Joins: badsektor (~badsektor@user/badsektor)
[19:55:32] *** Quits: nexus (~nexus@84-236-55-5.pool.digikabel.hu) (Ping timeout: 240 seconds)
[19:55:49] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[19:56:24] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[19:57:15] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[19:57:23] *** Joins: nexus (~nexus@92-249-150-160.static.digikabel.hu)
[20:01:27] *** Parts: cdman (~dcm@user/dmc/x-4369397) (Leaving)
[20:02:05] <Inline> mebbeh we should switch to verses stead of prose!
[20:02:08] <Inline> lol
[20:03:11] <fizzie> `&(a+10)` might in a type-analysis sense be an `int **`, but in actual fact it isn't anything, because the operand of the unary & must be an lvalue or the result of the [] or unary * operator (or a function designator).
[20:04:10] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[20:04:12] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[20:05:05] *** Joins: meator (~meator@user/meator)
[20:06:09] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:06:10] <SamuelMarks> hi
[20:08:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:11:00] <cassepipe> Can I assume that **envp is collection of pointers that point to a continuous chunk of memory ?
[20:12:27] <cassepipe> In a way that if I read over \0 of a env-var string I will get the 1st letter of the next ? (unless it's the last one of course))
[20:12:45] <cassepipe> (Don't panic I am not going to actuallay do that)
[20:13:46] *** Joins: seninha (~chatzilla@user/seninha)
[20:14:50] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[20:17:18] *** Quits: utis (~utis@84.208.160.26) (Ping timeout: 252 seconds)
[20:17:49] <SamuelMarks> cassepipe - Careful, you might reach `auxv`
[20:17:59] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[20:18:09] <strajder> fizzie, yes
[20:18:12] <cassepipe> SamuelMarks: Is it a joke or does that exist ?
[20:18:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:19:53] <SamuelMarks> cassepipe - https://stackoverflow.com/a/10321515
[20:20:03] <cassepipe> SamuelMarks: Turns out it is not, least you wrote that internet blog post for the purpose of the joke
[20:20:13] <cassepipe> SamuelMarks:
[20:20:17] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[20:20:22] <cassepipe> SamuelMarks: Thanks
[20:20:28] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[20:20:44] *** Joins: bindu (~bindu@user/bindu)
[20:20:48] <strajder> fizzie: I think people might get confused about & due to C++, but it is a different language which just might look like C
[20:20:49] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[20:20:56] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:21:08] *** Quits: SaltHillStroller (~SaltHillS@199.249.111.186) (Ping timeout: 252 seconds)
[20:21:14] <SamuelMarks> strajder - provide a reference :P
[20:21:33] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 256 seconds)
[20:23:53] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Ping timeout: 252 seconds)
[20:24:12] *** Quits: joev (~joev@user/joev) (Ping timeout: 250 seconds)
[20:24:30] <cassepipe> cassepipe: Another question. Is the memory passed through envp mine or will my program be able to modify the env of the calling process ?
[20:24:50] *** Joins: magla (~gelignite@55d49742.access.ecotel.net)
[20:24:59] *** Joins: nq (~nq@2a02:2f08:e015:a900:af55:b21:1105:35cc)
[20:25:23] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-8902-68c6-ecc8-5f4e.inf6.spectrum.com)
[20:25:57] <koollman> cassepipe: can't modify the caller, it is in your own process
[20:26:07] *** Joins: joev (~joev@user/joev)
[20:26:43] <cassepipe> koollman: Right. It makes sense. Each process has its own virtual memory.
[20:26:51] <cassepipe> koollman: Thks
[20:27:05] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[20:27:09] *** Quits: fe23 (~fe23@2409:8a34:466:6010:8a0:c1ab:cd1d:344a) (Quit: fe23)
[20:27:21] <SamuelMarks> What's the cause of `Bad value for ai_flagsserve()`? - Only on Linux [not macOS or Windows] does that error occur, from around here:  https://github.com/offscale/cauthflow/blob/71149a5/cauthflow/cauthflow_server.c#L141
[20:28:21] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8902-68c6-ecc8-5f4e.inf6.spectrum.com) (Ping timeout: 256 seconds)
[20:29:49] *** Joins: kuber (~kuber@75-172-6-223.tukw.qwest.net)
[20:30:08] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.196)
[20:30:51] *** Joins: kuber_ (~kuber@75-172-6-223.tukw.qwest.net)
[20:31:02] <ioxzev1z> SamuelMarks, no semicolon
[20:31:05] *** Quits: kuber_ (~kuber@75-172-6-223.tukw.qwest.net) (Client Quit)
[20:31:56] <ioxzev1z> ah nvm
[20:32:00] <ioxzev1z> it's after the if
[20:32:02] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[20:32:05] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:32:34] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[20:33:25] *** Joins: joev (~joev@user/joev)
[20:33:34] <ioxzev1z> Why do you diffentiate between recv and read on 212 - 216? Windows has recv, as does *nix
[20:34:22] <SamuelMarks> ioxzev1z - Windows is weird with its read and recv seems to actually finish processing whatever is on the pipe
[20:34:45] <ioxzev1z> Right, but the correct function to use is recv
[20:34:55] <ioxzev1z> You don't need read()
[20:35:39] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Quit: Leaving)
[20:35:44] <ioxzev1z> in fact man recv tells you that the only difference is the presence of the flags argument
[20:35:50] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[20:37:59] <ioxzev1z> Is 149 not the wrong way round?
[20:38:34] <ioxzev1z> return code == EXIT_SUCCESS ? EXIT_FAILURE : code; should that not be code : EXIT_FAILURE?
[20:38:35] <SamuelMarks> Ok trying that recv thing, just wiating for an fs lock (something else is using my package manager)
[20:38:49] <SamuelMarks> ioxzev1z - No actually that's the right way around, I want it to give a fail error code no matter what
[20:38:55] <ioxzev1z> Ok
[20:39:00] <SamuelMarks> Because `getaddrinfo` failed
[20:39:58] <SamuelMarks> "getaddrinfo() returns 0 if it succeeds" https://man7.org/linux/man-pages/man3/getaddrinfo.3.html - but EXIT_SUCCESS isn't guaranteed to be 0
[20:40:35] <SamuelMarks> Ok `recv` didn't break macOS build, going to try in Linux now
[20:40:35] <ioxzev1z> Your recv seems a bit weird, with 228 reallocing 1 byte per time. Why not just char buf[4096] or something like that
[20:40:56] <SamuelMarks> ioxzev1z - Because I don't know how much data I'm bringing in
[20:41:36] <ioxzev1z> SamuelMarks, right, but reallocing +1 is a bad idea, just make some buf (e.g. 4096), read into it, if the data is not complete then just read again
[20:42:06] <SamuelMarks> It's actually adding PIPE_BUF worth each time
[20:42:20] <SamuelMarks> The +1 is for NUL char, so would welcome an alternative
[20:42:39] <ioxzev1z> 228 is reallocing response_buf by 1
[20:42:45] <SamuelMarks> I suppose I can allocate just one initial char at the very end, after the loop
[20:42:51] <SamuelMarks> but that seems expensive
[20:43:15] <SamuelMarks> ioxzev1z - No it's not, see `const size_t new_size = total_bytes + bytes + 1;`
[20:43:31] <ioxzev1z> oic, missed that
[20:44:03] <ioxzev1z> How long is each message at max?
[20:44:12] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[20:44:30] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[20:45:25] <SamuelMarks> `bytes = recv(client_fd, pipe_buf, PIPE_BUF, 0);` - though usually just one loop will work as the whole message is less than 2*PIPE_BUF
[20:45:33] <ioxzev1z> Also you should be calling close(socket) on recv returning 0
[20:45:35] <SamuelMarks> but I don't want to assume that for future purposes
[20:45:35] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 240 seconds)
[20:46:01] <SamuelMarks> ok closing that socket now
[20:46:16] <ioxzev1z> SamuelMarks, I mean that in the protocol, what is the maximum possible size of a single message? 2 * PIPE_BUF ?
[20:47:01] <SamuelMarks> It's HTTPS so whatever the specification says I guess
[20:47:10] <ioxzev1z> Also if you're setting non-blocking sockets, recv returning 0 needs to then check if it would have returned a wait rather than close
[20:47:14] <SamuelMarks> But I want to avoid static allocating it, otherwise I'll likely overallocate
[20:47:35] <ioxzev1z> 0 on recv means the connection is closed, but that behaviour depends on a blocking socket
[20:47:49] <SamuelMarks> Oh I have a passive socket
[20:47:55] <ioxzev1z> SamuelMarks, you might want char buf[4096]; read(buf, ...); for line in buf: do
[20:49:06] <ioxzev1z> SamuelMarks, passive socket iirc means a listening socket. recv on any connected socket returning 0 means connection closed
[20:49:44] <ioxzev1z> Unless non-blocking
[20:49:55] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:a5ba:2fa3:99b1:4dae)
[20:50:31] *** Joins: Trashlord (~trash@user/trashlord)
[20:50:57] *** Joins: Akiva (~Akiva@user/Akiva)
[20:51:01] <ioxzev1z> Actually nvm: man recv -> When a stream socket peer has performed an orderly shutdown, the return value will be 0 (the traditional "end-of-file" return).
[20:51:16] <ioxzev1z> It doesn't mention non-block for that so I assume 0 is always close
[20:51:28] <ioxzev1z> -1 might be that it would block, so check errno
[20:51:43] <ioxzev1z> -1 is any failure, need more details if you get that
[20:52:04] <ioxzev1z> Yeah I think errno will be EAGAIN or EWOULDBLOCK
[20:53:16] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.196) (Ping timeout: 245 seconds)
[20:54:02] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.101)
[20:55:40] *** Joins: mahmutov_ (~mahmutov@37.155.60.34)
[20:57:10] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[20:58:17] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.101) (Ping timeout: 240 seconds)
[20:59:25] *** Joins: mm302 (~mm302@32.5.90.146.dyn.plus.net)
[21:01:14] *** Quits: nishant (~Nishant@49.37.242.151) (Quit: Leaving)
[21:01:22] *** Joins: jellie (~luv_panda@user/jellie)
[21:01:43] <ioxzev1z> Also wrt allocating a buffer, assuming you're not working on a microcontroller, pretty much any value up to 8192 is perfectly fine
[21:01:58] <ioxzev1z> No need for expensive realloc calls
[21:02:23] <mm302> can I do a static initialization of a multidimensional array using a lower dimension array? like `Type Array1D[8]; Type Array2D[8][8] = { Array1D, Array1D, ... }` ? Doesn't seem possible, just trying to avoid repeating
[21:03:21] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[21:03:53] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[21:04:04] <ioxzev1z> ,cc char a1d[8] = { 0 }; char a2d[8][8] = { a1d };
[21:04:06] <candide> ioxzev1z: [warning: initialization of 'char' from 'char *' makes integer from pointer without a cast [-Wint-conversion]  note: (near initialization for 'a2d[0][0]')  warning: missing braces around initializer [-Wmissing-braces]] no output: a1d = ""; a2d = {"\b", "", "", "", "", "", "", ""}
[21:04:12] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[21:04:35] <ioxzev1z> mm302, Do you need a2d init to 0?
[21:04:55] <ioxzev1z> ,cc char a2d[8][8] = { 0 };
[21:04:57] <candide> ioxzev1z: no output: a2d = {"", "", "", "", "", "", "", ""}
[21:05:03] <pragma-> nice "\b"
[21:06:10] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[21:06:11] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:1a76:2017:77ff:dd44)
[21:06:30] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[21:06:37] <mm302> ioxzev1z: thanks, although maybe it's a gcc extension not working with clang
[21:06:57] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:2181:1fae:1c0b:d04f)
[21:07:48] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:07:49] <fizzie> If you just want to avoid repetition, there's always the preprocessor.
[21:09:11] <mm302> I use gcc, but code completion with clang flags it as an error, but never mind I'll expand it, thank you that was a good try
[21:09:41] *** Joins: wovixo (~wovixo@128.104.205.49)
[21:09:55] <fizzie> ,cc #define ROW {1,2,3,4,5,6,7,8} \n int a2d[8][8] = {ROW, ROW, ROW, ROW, ROW, ROW, ROW, ROW}; \n #undef ROW \n
[21:09:57] <candide> fizzie: no output: a2d = {{1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}}
[21:10:22] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[21:11:45] <pragma-> what a great bot. just needs a bit more polish.
[21:11:59] <mm302> that's more elegant, good idea
[21:12:15] <constxd> man
[21:12:34] <constxd> the rules for initializing objects in C++ alone are more complicated than all of C
[21:13:16] *** Quits: alch (~alch@to-18-75-253.service.infuturo.it) (Ping timeout: 245 seconds)
[21:15:05] *** Joins: alch (~alch@mi-18-53-48.service.infuturo.it)
[21:17:22] <mm302> true
[21:20:05] *** Joins: Trot (~Trot@107.147.149.155)
[21:20:14] *** Quits: Trot (~Trot@107.147.149.155) (Client Quit)
[21:20:36] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 240 seconds)
[21:20:57] *** Joins: Trot (~Trot@107.147.149.155)
[21:21:17] *** Joins: Trashlord__ (~trash@user/trashlord)
[21:21:48] *** Quits: bleb (~cm@user/bleb) (Ping timeout: 240 seconds)
[21:22:25] *** Joins: rgrinberg (~textual@177.241.245.222)
[21:22:41] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[21:24:12] *** Joins: oriba (~oriba@dynamic-078-054-218-125.78.54.pool.telefonica.de)
[21:26:45] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) ()
[21:29:55] *** Quits: Trashlord (~trash@user/trashlord) (Quit: "True ignorance is not the absence of knowledge, but the refusal to acquire it.")
[21:30:12] *** Joins: moog_ (~moog@107.126.53.19)
[21:30:19] *** Trashlord__ is now known as Trashlord
[21:30:46] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[21:31:10] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[21:31:25] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[21:31:45] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[21:32:05] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[21:32:40] *** Quits: moog (~moog@98.97.81.132) (Ping timeout: 250 seconds)
[21:34:13] *** Joins: moog__ (~moog@98.97.81.132)
[21:36:34] *** Quits: moog_ (~moog@107.126.53.19) (Ping timeout: 250 seconds)
[21:36:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:36:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:36:47] *** Joins: wroathe (~wroathe@user/wroathe)
[21:38:07] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.101)
[21:38:17] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:38:47] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[21:40:09] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[21:40:14] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[21:40:22] *** Joins: Techcable (~Techcable@168.235.93.147)
[21:40:46] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[21:42:35] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.101) (Ping timeout: 256 seconds)
[21:42:35] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 256 seconds)
[21:44:58] *** Joins: vekay (~vekay@user/vekay)
[21:45:25] *** Joins: Zeturic (~Orimendix@50.26.218.162)
[21:45:47] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:46:09] *** Joins: kurahaupo (~kurahaupo@pa49-182-116-249.pa.qld.optusnet.com.au)
[21:47:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[21:49:41] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[21:50:00] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[21:50:45] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:50:55] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:51:44] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:55:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[21:56:03] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 250 seconds)
[21:56:56] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 250 seconds)
[21:57:16] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:00:04] <NRK> i think they recently added designated initializers as well :'D
[22:00:12] *** Quits: nq (~nq@2a02:2f08:e015:a900:af55:b21:1105:35cc) (Quit: Leaving)
[22:01:00] *** Quits: kuber (~kuber@75-172-6-223.tukw.qwest.net) (Quit: leaving)
[22:02:08] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[22:02:39] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:02:44] *** Quits: mm302 (~mm302@32.5.90.146.dyn.plus.net) (Quit: WeeChat 2.8)
[22:04:30] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:06:02] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[22:06:05] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:07:10] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:07:17] *** Joins: Akuli (~Akuli@87-94-109-66.bb.dnainternet.fi)
[22:08:20] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Quit: mcleuder)
[22:09:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[22:10:22] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[22:11:07] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:11:32] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[22:11:57] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[22:12:28] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:2181:1fae:1c0b:d04f) (Quit: Quit)
[22:13:14] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[22:14:49] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:15:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:15:43] *** Quits: g2anj_ (~v@58.228.230.4) (Quit: .)
[22:18:56] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: brb)
[22:20:13] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:20:25] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[22:21:12] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 250 seconds)
[22:25:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:25:05] <pragma-> I was pretty surprised that C++ still didn't have designated initializers the last time I checked.
[22:25:53] *** Quits: slavfox_ (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:26:01] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[22:27:26] *** Quits: iomari891 (~iomari891@102.91.5.94) (Read error: Connection reset by peer)
[22:27:36] *** whatsupboy is now known as skipper
[22:29:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[22:30:44] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[22:31:23] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:31:31] *** Joins: wlemuel_ (~wlemuel@210.22.124.110)
[22:32:24] *** Quits: wlemuel_ (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:34:53] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:35:13] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[22:36:21] *** Quits: moog__ (~moog@98.97.81.132) (Ping timeout: 250 seconds)
[22:36:24] <sham1> IIRC they have them in C++2020. As to how well it's supported, dunno
[22:36:28] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Client Quit)
[22:36:30] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[22:36:48] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[22:37:13] <sham1> But from what I recall reading about it, it's a lot less nice to use than the C ones, because you need to specify your fields in a specific order and so on, IIRC
[22:37:59] *** Joins: Alhazred (~Alhazred@68.208.127.209)
[22:38:17] <NRK> ,cc int a[] = { [0] = 0, 1, 2, [1] = 3, 4, 5 };
[22:38:20] <candide> NRK: [warning: initialized field overwritten [-Woverride-init]  note: (near initialization for 'a[1]')  warning: initialized field overwritten [-Woverride-init]  note: (near initialization for 'a[2]')] no output: a = {0, 3, 4, 5}
[22:39:09] <NRK> what real world use is there for this behavior?
[22:39:24] <fizzie> "Default values", sort of.
[22:39:32] <sham1> Probably none. It's most likely just easier to support it and give a warning about it
[22:40:17] <NRK> fizzie: elaborate
[22:40:26] <fizzie> You can have a FOO_DEFAULTS macro that sets all members to some (better than zero) defaults, and then go with `struct foo x = { FOO_DEFAULTS, .except_this = 123 };` to override one of them.
[22:40:43] <fizzie> With the obvious drawback that you may get warnings like the above.
[22:42:02] <fizzie> ,cc -Wno-override-init struct foo { int a, b, c; }; #define FOO_DEFAULTS .a = 1, .b = 2, .c = 3 \n struct foo x = { FOO_DEFAULTS, .b = 222 };
[22:42:04] <candide> fizzie: no output: x = {a = 1, b = 222, c = 3}
[22:42:58] <fizzie> Most of the time you'd probably get away with just `struct foo x = FOO_INIT; x.b = 222;` instead, but not if it's an object with static storage duration that you're trying to initialize.
[22:44:50] <NRK> aha, that makes sense
[22:46:07] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:46:16] <fizzie> FWIW, it's an explicit feature of the standard. C11 6.7.9p19: "-- each initializer provided for a particular subobject overriding any previously listed initializer for the same subobject; 151) --".
[22:46:18] *** Joins: pulse (~pulse@user/pulse)
[22:46:25] <fizzie> (The footnote leaves it to the implementation to decide whether initializers so overridden are evaluated at all.)
[22:47:44] <fizzie> ,cc -w int f(int x) { printf("%d ", x); return x; } struct { int a, b, c; } x = { .a = f(1), .b = f(2), .c = f(3), .b = f(222) }; // out of curiosity
[22:47:46] <candide> fizzie: 1 222 3
[22:47:54] <fizzie> Yeah, f(2) wasn't called.
[22:50:49] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[22:50:55] <fizzie> In fact, the warning even calls it out explicitly. It's "initialized field with side-effects overwritten" rather than just "initialized field overwritten", and the warning flag is different. And the corresponding Clang warning even calls out the side effects will not happen.
[22:52:00] <NRK> how would it know it had side effect if the function is outside the TU?
[22:54:33] *** Joins: _wovixo_ (~wovixo@128.104.205.49)
[22:54:48] *** Joins: Oddity (~Oddity@user/oddity)
[22:55:26] *** Quits: nexus (~nexus@92-249-150-160.static.digikabel.hu) (Ping timeout: 250 seconds)
[22:56:16] <fizzie> I would imagine a function call counts as a side effect, as a first-order approximation.
[22:57:12] *** Joins: nexus (~nexus@85-238-77-75.pool.digikabel.hu)
[22:59:32] *** Quits: osXnut (~osXnut@77.125.126.151) (Remote host closed the connection)
[23:00:18] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (Quit: ZNC - https://znc.in)
[23:00:49] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[23:01:27] *** Joins: badsektor (~badsektor@user/badsektor)
[23:01:50] *** Quits: Alhazred (~Alhazred@68.208.127.209) (Ping timeout: 260 seconds)
[23:02:14] *** Quits: kurahaupo (~kurahaupo@pa49-182-116-249.pa.qld.optusnet.com.au) (Quit: Quit)
[23:02:32] *** Joins: kurahaupo (~kurahaupo@pa49-182-116-249.pa.qld.optusnet.com.au)
[23:03:29] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[23:03:44] *** Joins: luckyxxl (~luckyxxl@185.209.196.175)
[23:03:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:03:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:03:58] *** Joins: wroathe (~wroathe@user/wroathe)
[23:04:30] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:06:07] <Inline> an expression with multiple assignment sequences is side effective
[23:06:36] <Inline> only one assignment per expression is allowed for it to be pure
[23:06:41] <Inline> hmm
[23:07:13] <Inline> err s/side-effective/ is not pure/
[23:07:17] <Inline> meh
[23:07:54] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[23:09:30] <Inline> so a struct initialization with an initialization sequence as opposed to a struct initialization with only one initialized field is not pure ?
[23:10:55] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[23:11:09] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:11:32] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[23:13:01] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[23:13:51] <Inline> omg
[23:14:12] * Inline invents the ever deleting google
[23:14:50] *** Quits: _wovixo_ (~wovixo@128.104.205.49) (Quit: Leaving)
[23:18:17] <pragma-> close enough https://i.redd.it/dsg2uyo305o81.jpg
[23:18:37] <pony> a hors
[23:20:26] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[23:21:00] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[23:21:25] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[23:27:24] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[23:28:09] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:33:37] *** Joins: pgib (~textual@173.38.117.89)
[23:34:12] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[23:34:22] <clarity> nice horse
[23:34:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[23:34:39] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:37:00] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[23:41:38] <sham1> 'orse
[23:41:46] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:42:54] <Inline> and anything with comma (,) in it is side effectful
[23:43:20] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:43:33] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:43:57] <Inline> but that's only the syntactic level, a jump instruction (anything close to it) or an inline assembler instruction has side effects too (cause it may involve jumps) ?
[23:44:07] <Inline> right ?
[23:47:27] *** Joins: PrincessCelestia (~princess@user/princessalicorn)
[23:48:17] *** Quits: cassepipe (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr) (Remote host closed the connection)
[23:48:36] *** Joins: cassepipe (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr)
[23:48:51] *** Joins: Enitin (~Enitin@82.180.145.228)
[23:49:11] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:50:35] <ws2k3> C n00b here. can anyone explaine me what this exacly does? if(com_useFastfiles->integer){ i am trying to wrap my head around the ->integer
[23:51:53] <greeter> i believe that com_useFastfiles->integer is a pointer to a structure member named integer
[23:52:23] <caze> (*com_useFastfiles).integer
[23:53:32] *** Joins: moog__ (~moog@mobile-166-173-186-209.mycingular.net)
[23:57:18] *** Joins: nq (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e)
[23:57:22] *** Joins: nq_ (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e)
[23:57:28] *** Quits: nq_ (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e) (Remote host closed the connection)
[23:58:15] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 256 seconds)
[23:59:48] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
