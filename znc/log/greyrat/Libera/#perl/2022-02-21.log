[00:01:44] *** Quits: deadmarshal (~deadmarsh@95.38.116.229) (Ping timeout: 272 seconds)
[00:06:37] *** Joins: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com)
[00:07:15] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:07:54] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[00:08:12] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:08:39] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[00:10:24] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[00:11:57] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[00:12:17] *** Joins: Gry (~quassel@botters/gry)
[00:14:09] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:16:59] *** Joins: krismatrix (~krismatri@12.182.97.5)
[00:17:11] *** Quits: cooper_ (~mitchell@user/cooper) (Quit: leaving)
[00:17:51] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[00:18:20] <krismatrix> Do you guys know of a web tool for documentation that I can integrated into a site. Basically, I am looking for something like pgadmin, which is a interface to your postgres database, but in this case, I want a pretty much pre-built tool that allows me to logon and write markdown format text and save it to a database.
[00:18:50] *** Joins: cooper (~mitchell@user/cooper)
[00:19:20] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:b40c:806a:27ba:87ae) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:22:06] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 256 seconds)
[00:22:30] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc4-git-8b97cae-Pogorze-Karpackie-CUSTOM-KERNEL)
[00:23:43] <LeoNerd> I shouldn't really complain, but I'm interested to know why my shellbox is soooo much faster to build/test modules against perls. It can do an `eachperl test .` of Feature-Compat-Defer with 12 different perl versions in 8.7 seconds. My laptop takes 8.6 seconds to do just three.
[00:24:19] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:25:47] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[00:27:02] <choroba> LeoNerd: Number of CPU cores?
[00:27:37] <LeoNerd> It's not being distributed. In any case, my laptop has 4 and the shellbox has 2
[00:30:39] <pragma-> spinning rust versus ssd? faster RAM? faster CPU?
[00:31:08] <LeoNerd> Oddly, my laptop is the one with the SSD
[00:31:15] <LeoNerd> It might be a CPU thing yeah.. hrmm
[00:31:26] * GumbyPAN CPAN Upload: Feature-Compat-Defer-0.02 by PEVANS https://metacpan.org/release/PEVANS/Feature-Compat-Defer-0.02
[00:31:26] * GumbyPAN CPAN Upload: Syntax-Keyword-Defer-0.07 by PEVANS https://metacpan.org/release/PEVANS/Syntax-Keyword-Defer-0.07
[00:31:29] * GumbyPAN CPAN Upload: Crypt-OpenSSL-X509-1.913-TRIAL by JONASBN https://metacpan.org/release/JONASBN/Crypt-OpenSSL-X509-1.913-TRIAL
[00:31:30] <LeoNerd> Anyway, there's more code
[00:39:37] *** Joins: Trigon (~reuben@144.39.114.115)
[00:39:55] *** Quits: krismatrix (~krismatri@12.182.97.5) (Quit: Leaving)
[01:02:19] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:18:50] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:447b:39c4:735e:5310) (Quit: ccntrq)
[01:20:42] *** Quits: magla (~gelignite@55d46ecf.access.ecotel.net) (Quit: Stay safe!)
[01:30:06] *** Quits: Kulrak (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[01:31:45] *** Joins: rgrinberg (~textual@2806:101e:7:7728:3011:c885:e5d4:9fdd)
[01:31:58] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[01:38:02] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[01:42:00] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[01:43:11] <simcop2387> ah they left, they want a CMS like yancy
[01:43:11] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[01:44:19] <simcop2387> LeoNerd: almost certainly IOPs.  not raw speed but actually how many IO operations per second can be performed.  try building/testing on tmpfs on your laptop and you should beat the shell box
[01:45:00] <simcop2387> compiling software involves a couple metric fucktons of tiny bits of IO for every file
[01:47:46] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:48:12] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[01:54:13] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[02:00:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d50:ed7b:88e6:c382) (Read error: Connection reset by peer)
[02:02:15] <Adura> Just put it all in one file.
[02:04:50] *** Quits: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com) (Remote host closed the connection)
[02:05:48] <simcop2387> Adura: that helps too if you can actually.  not always possible with C though
[02:07:17] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[02:08:19] <Adura> Hehe...
[02:12:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[02:14:39] *** Joins: tejr (~tejr@user/tejr)
[02:16:22] *** Joins: whynot (~whynot@88.155.58.110)
[02:18:21] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[02:28:21] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[02:32:34] *** Quits: pizdets_ (~pizdets@183.182.110.129) (Ping timeout: 250 seconds)
[02:33:49] *** Joins: pizdets (~pizdets@183.182.114.226)
[02:35:39] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:38:10] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[02:53:39] *** Quits: rgrinberg (~textual@2806:101e:7:7728:3011:c885:e5d4:9fdd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:00:14] *** Joins: Kulrak (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au)
[03:02:35] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[03:07:41] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[03:10:33] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[03:25:33] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:29:48] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 240 seconds)
[03:38:58] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[03:51:47] * GumbyPAN CPAN Upload: Crypt-OpenSSL-VerifyX509-0.17-TRIAL by TIMLEGGE https://metacpan.org/release/TIMLEGGE/Crypt-OpenSSL-VerifyX509-0.17-TRIAL
[04:01:41] *** Quits: Gry (~quassel@botters/gry) (Ping timeout: 256 seconds)
[04:04:42] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[04:05:20] <vms14> I have some tiny, buggy and bad implemented sort of forth
[04:05:26] <vms14> https://termbin.com/kcg9
[04:05:37] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 240 seconds)
[04:05:56] <vms14> I had troubles with the return stack, I think now it works, but I'm not sure if it does properly
[04:06:37] <mst> missing newline before 'sub execute'
[04:06:55] <mst> (completely irrelevant to execution but it spoils the prettyness ;()
[04:07:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:08:15] <vms14> xd sorry it's cause I'm taking away some parts of code
[04:08:17] *** Joins: Gry (~quassel@botters/gry)
[04:08:23] <vms14> it's not finished
[04:08:41] <vms14> have to do the outer interpreter which is who reads the input
[04:08:56] <vms14> and I'm missing some important stuff like defer postpone and more
[04:09:27] <mst> I use https://ex-vi.sf.net/ a lot of the time so no synhi, no clever, no anything (in an 80x24 terminal, because of course ;) so I'm quite religious about keeping stuff formatted to aid skim reading
[04:11:11] <vms14> I use emacs :O
[04:11:53] <vms14> I used the vi NetBSD has which is Nex/vi until I finally decided to waste the time to start with emacs
[04:11:55] <mst> I keep trying to learn emacs but never quite getting to the point where it's comfortable
[04:12:13] <mst> nvi is nice, my first ever home unix install was NetBSD
[04:12:23] <vms14> I didn't "learn" emacs, just the usual hotkeys and some little configuration
[04:12:32] <vms14> I'm lazy, but using emacs pays off
[04:12:50] <vms14> anyways I would like to change it for another editor
[04:13:13] <vms14> I'm not much of a fan but I use it every day
[04:13:15] <mst> given how few vi keybindings I use, I should probably try emacs with one of the vi modes since I likely will barely notice the difference
[04:13:27] <mst> also I actually happen to like lisp
[04:13:48] <vms14> mst you can make you a repl in emacs for perl with your eval with lexicalls
[04:13:52] <vms14> lexicals*
[04:14:10] <vms14> actually that was what I made when you recommended me the module xD
[04:14:21] * mst grins
[04:14:55] <vms14> now I try to learn forth and implement it in perl at the same time
[04:15:18] <mst> implementing forth yourself is arguably an important part of learning forth
[04:15:48] <vms14> I want to use the sdl bindings and play around and when it gets a shape I'll try it in C
[04:16:22] <mst> if you want to be truly silly, I'm about 99% sure that perl being a stack based VM that allows custom opcodes you could actually implement a forth that runs on the perl5 VM directly
[04:16:26] <vms14> yes mst, is the easiest language to implement (usable language) and I think just this fact is a great source of power
[04:16:41] <vms14> mst I don't want to die
[04:16:54] <vms14> but it's interesting
[04:16:56] * mst grins and laughs
[04:17:01] <mst> yeah, fair enough :D
[04:17:57] <mst> I keep considering it basically as an exercise to learn more C and perlguts
[04:18:24] <vms14> mst if you really want to "practice" seems like the best way
[04:18:50] <vms14> people usually implement forth in something to learn the host language
[04:18:59] <vms14> and viceversa
[04:19:22] <mst> but my current fun project is an fexpr based lisp with JS/perl/tcl inspired syntax because ... because.
[04:19:52] <vms14> a stack based lisp :D
[04:20:08] *** Quits: Pali (~pali@user/pali) (Ping timeout: 272 seconds)
[04:20:16] <vms14> nah with the stack the most logical step is use reverse notation
[04:20:40] <mst> this is lisp style, but the compilation stage is parser -> expander -> weaver
[04:20:49] <mst> the weaver could theoretically do macros but doesn't yet
[04:20:54] <vms14> will it have macros?
[04:21:03] <mst> fexprs mean you don't actually need macros
[04:21:34] <mst> macros are effectively just a limited constant folded form of fexpr
[04:21:45] <vms14> https://en.wikipedia.org/wiki/Fexpr
[04:21:46] <Paperbot> Link title(s): [ Fexpr - Wikipedia ]
[04:21:56] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:22:00] <vms14> Never saw this term before
[04:22:25] <mst> some early lisps had them, macros were invented because fexprs didn't perform very well on 70s hardware
[04:22:54] <vms14> I've tried once make an interpreter of lisp in perl
[04:23:04] *** Joins: zgu|skaro (~zgu@rrcs-208-125-82-158.nys.biz.rr.com)
[04:23:14] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[04:23:21] <vms14> didn't get too far but got annoyed to see how much you have to traverse the environments for every symbol lookup
[04:24:49] <mst> so the OG modernish fexpr based lisp spec is called 'kernel' (great choice of name, so googlable ;) and the spec and the phd thesis that came out of it are in here: http://trout.me.uk/lisp/
[04:24:49] <Paperbot> Link title(s): [ Index of /lisp ]
[04:24:49] <vms14> they were hashes of hashes and when I've put a debugging print to see the environments it revealed how much it has to traverse
[04:25:12] <vms14> mst so fexpr are like the forth of lisp?
[04:25:17] <mst> somebody put together a kernel-inspired JS embedded lisp: https://github.com/manuel/wat-js
[04:25:18] <Paperbot> Link title(s): [ GitHub - manuel/wat-js: Concurrency and Metaprogramming for JS ]
[04:25:25] <mst> and I ported it to perl: https://github.com/shadowcat-mst/wat-pl
[04:25:26] <Paperbot> Link title(s): [ GitHub - shadowcat-mst/wat-pl: Perl implementation of the Wat operative lisp (see manuel/wat-js) ]
[04:25:31] <vms14> in the sense of easy of implementation
[04:25:36] <mst> it was hilariously impractical but very good fun
[04:26:43] <mst> though that's some seriously weird perl code because I made it conform as close as possible to the shape of the javascript code, hence linking that first
[04:26:49] <vms14> I have to rewrite this forth, but I think the return stack now works
[04:27:21] <vms14> I still wonder if I'll like forth
[04:27:42] <mst> it has a serious elegance to it
[04:27:52] <mst> I'm unsure if I'll ever like writing non-toy programs in it
[04:27:57] <vms14> if I have the same metaprogramming power I have in lisp, it's better than lisp
[04:28:14] <vms14> just for the reason is so easy to implement that I can put it wherever I want
[04:28:38] <vms14> be it a machine with assembly, in android with java/kotlin, in perl, etc
[04:28:43] <mst> xcl (the thing I'm working on) is not going to be -trivial- to implement but I'm absolutely working on making sure I can port it to other environments without too much annoyance
[04:28:55] <vms14> and even another plus is it will be my "own" language
[04:29:06] <vms14> a language I can fully understand and model
[04:29:16] <vms14> I see power in this
[04:29:41] <vms14> for example implementing it in perl gives it automagically all the cpan power
[04:29:58] <vms14> and I could define perl-words by using dirty evals :D
[04:30:26] <mst> https://metacpan.org/pod/Sub::Quote
[04:30:26] <Paperbot> Link title(s): [ Sub::Quote - Efficient generation of subroutines via string eval - metacpan.org ]
[04:30:44] <mst> that's what powers the constructor and accessor generation in Moo
[04:30:53] <mst> so it's pretty battle tested :D
[04:30:57] <vms14> mst you'll do it by bootstraping itself?
[04:31:09] <vms14> like implement a few core set and build from this
[04:31:29] <vms14> or just separation of machine independent code?
[04:31:53] <vms14> oh
[04:32:33] <vms14> how can be efficient eval?
[04:33:07] <mst> it isn't amazingly efficient but the point is you eval to get a perl subroutine and then call that so you only do the eval once
[04:33:46] <mst> re xcl, I've not entirely decided yet, currently focusing on getting the semantics of the language itself right in the perl prototype, then I'm going to build out a bunch of spectests to validate implementations, -then- I'll start on a second implementation and use the fact that I own every line of code involved to change things around to make my life easier any time I need to and see where I end up
[04:34:07] <vms14> mst but that's what I was going to do anyways
[04:34:13] <vms14> I mean eval can return a subref
[04:34:38] <mst> yes. Sub::Quote is not doing anything you can't do anyway, it's just it already does it
[04:35:15] <vms14> so $dictionary{newperlword}=eval("sub{" . shift() . "}");
[04:35:19] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[04:35:27] <vms14> oh dirty is that now that I see
[04:35:31] <vms14> how*
[04:36:24] <vms14> well my code was always dirty
[04:36:31] <mst> nothing wrong with that, but for example https://metacpan.org/pod/Sub::Quote#quote_sub handles compiling stuff with some closed-over lexicals for state and things like that
[04:36:32] <Paperbot> Link title(s): [ Sub::Quote - Efficient generation of subroutines via string eval - metacpan.org ]
[04:36:42] <vms14> I was born to torture people by writing and drawing
[04:37:09] <vms14> to implement closures you mean?
[04:37:26] <vms14> just add a { before sub{}
[04:37:33] <vms14> and the variables there
[04:37:38] <vms14> it becomes a closure
[04:37:55] <mst> yes. the point is that when writing Moo I needed to do that more than once so I turned it into a subroutine that did it for me.
[04:37:57] <vms14> { my $a=1; sub {$a}}
[04:38:34] <mst> quote_sub '$a', { '$a' => \1 };
[04:38:51] <vms14> mst how about writing objects as packages directly
[04:38:52] <mst> this massively reduces the number of times I broke something by messing up escaping things or whatever
[04:39:03] <vms14> I mean instead of $a = new object()
[04:39:18] <vms14> {package a; my $x = 0;}
[04:39:47] <vms14> how would be having 100 instances of a new object() compared with 100 {package ...}
[04:40:01] <mst> generally if I'm wanting to do something like that, I tend to have a template and therefore use p3rl.org/Package::Variant
[04:40:07] <vms14> would be this expensive<
[04:40:26] <vms14> in the sense of how perl internally manages a package vs an object
[04:40:43] <mst> a package is really just a hash of typeglobs
[04:41:02] <mst> so you'd use a bit more memory but it probably wouldn't be that awful otherwise
[04:41:06] <vms14> so it's likely it would even be cheaper than an object instance?
[04:41:14] <vms14> oh
[04:41:27] <mst> no, more expensive and also bloody confusing, but not -that- much more expensive
[04:41:28] <vms14> but the object would be likely a blessed hash ref
[04:41:52] <mst> right, but a package is going hash -> glob -> value
[04:41:58] <mst> whereas an object is going hash -> value
[04:42:11] <vms14> hmm
[04:42:31] <vms14> actually I like it, but wondered if it was too expensive
[04:42:33] <mst> blessed-ness is just saving the string of the class you blessed it into alongside the hash
[04:42:52] <vms14> I'm lazy and this way no dependencies and shorter than making a class
[04:43:20] <vms14> stills feeling bad to encode object properties inside a hash ref
[04:43:45] <vms14> use moo for a helloworld like program does not seem nice
[04:44:42] <vms14> thanks for explaining me this, I wanted to know
[04:44:43] <mst> in theory, I agree with the thought process, though in practice, Moo is lightweight enough that it performs just fine for that sort of thing, I put years of work into making sure that was true
[04:45:24] <mst> "viable to use in command line programs and CGI scripts without the startup time annoying me" was a key goal
[04:45:38] <mst> though for really tiny stuff I've since written p3rl.org/Mu::Tiny
[04:45:59] <vms14> what about object pad
[04:46:29] <mst> that's absolutely superior for some use cases
[04:46:55] <mst> but it's significantly written in C/XS
[04:47:20] <mst> when I write tiny code I tend to stick to pure perl so I can use p3rl.org/App::FatPacker to bundle it into a single file
[04:47:56] <mst> e.g. http://hermit1.scsys.co.uk/~matthewt/tinyrepl is the Eval::WithLexicals example repl as a single pure perl file you can just wget and run
[04:48:33] <vms14> if I want to create a tiny object I put {package object; sub new{...}} in the same file and then start using this objects
[04:48:55] <vms14> usually for objects that are more like a defined type than a real object
[04:48:56] <mst> also if I stick to pure perl I can run the module on any computer I can ssh to with zero installation using p3rl.org/Object::Remote
[04:49:19] <vms14> mst I like when a script runs with a fresh perl install
[04:49:27] <vms14> perl is very portable
[04:49:41] <mst> App::FatPacker means you can turn any script with only pure perl cpan modules into a script that runs on a fresh perl install
[04:50:00] <vms14> mst except xs stuff I suppose
[04:50:10] <mst> I said 'only pure perl cpan modules' for a reason, yes :D
[04:50:12] <vms14> xd
[04:50:31] <mst> though I have a proof of concept that works with XS as well
[04:50:52] <mst> only problem is then your packed file is architecture dependent
[04:52:12] <mst> but I totally managed to create a single-file perl script that embedded DBI and DBD::SQLite using it (tested by scp-ing it to a different debian install with the same perl ;)
[04:52:31] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:52:54] <vms14> sounds like a way to distribute different "binaries" by building them in different machines/system
[04:53:51] <mst> yep, it embeds the .so files as base64 and then http://hermit1.scsys.co.uk/~matthewt/xspacktest
[04:53:58] <vms14> wow
[04:54:21] <mst> hijack DynaLoader to pull from there instead of the filesystem and it just works
[04:54:47] <mst> note that that version relies on linux having /dev/fd/<$fdno> but freebsd 13+ has the ability to do it directly
[04:54:58] <mst> and I figure if I can support linux and freebsd I've not done too badly
[04:55:24] <vms14> haha you're crazy
[04:55:37] <mst> I haven't finished the freebsd version yet but I did upgrade my freebsd dev server to 13.0 specifically so I -could- do that
[04:55:51] <vms14> I like the fact you're encoding .so in base 64
[04:56:10] <mst> it's not a perfect solution but it was good enough to test out all the crazy parts
[04:57:12] <mst> probably a more efficient approach would be preferable but that's an after the fact optimisation when I have everything else working to taste
[04:57:33] <vms14> I remember how shocked I was when I saw we can copy whole directories remotely by using tar and netcat
[04:57:57] <mst> tar czf - <directory> | ssh host tar xzf -
[04:58:03] <vms14> yes
[04:58:17] <buZz> or straight through netcat
[04:58:23] <mst> I mean, Object::Remote is basically the same spirit
[04:58:31] <mst> it runs 'ssh user@host perl -'
[04:58:40] <mst> fires a fatpack of its core logic over the wire to the far side
[04:58:53] <mst> then sends __END__ which tells the perl compiler to stop reading and start executing
[04:59:04] <mst> then from then on the far side just asks for modules as it needs them
[04:59:13] <mst> (by trapping require() calls)
[05:01:11] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 256 seconds)
[05:01:23] <mst> in your perl code you just do
[05:01:39] <mst> my $thing = My::Thing->new::on('user@host', <args to new>);
[05:01:55] <mst> and calling methods on it transparently sends them across the wire over the ssh connection
[05:01:58] <mst> works nicely
[05:02:10] <vms14> my $eval = Eval::WithLexicals->new::on($conn); ahahaha
[05:02:24] <vms14> it's nice
[05:02:35] <vms14> maybe you like the idea of metacall
[05:02:54] <vms14> the author is a spanish guy and always tries to sell it to me
[05:03:14] <vms14> because somehow I always end asking him how to implement metacall without knowing it
[05:03:32] <vms14> and he says "use metacall" and me *uses sockets*
[05:04:05] <vms14> metacall.io if you want to know about
[05:04:34] <vms14> I'm not really interested because I want to mix languages, but I think I want to do it in the same process
[05:04:48] <vms14> and I want to make them blend instead of have a clear separation
[05:04:56] <mst> yeah, Object::Remote comes with https://metacpan.org/release/HAARG/Object-Remote-0.004001/source/bin/remoterepl
[05:04:57] <Paperbot> Link title(s): [ bin/remoterepl - metacpan.org ]
[05:05:00] <vms14> which is somehow reverse to what metacall does
[05:05:02] <mst> which last I checked definitely worked
[05:05:09] <mst> but it's been years since I checked
[05:05:17] <mst> so if it's broken now feel free to point and laugh ;)
[05:05:33] <vms14> I don't think it is
[05:05:44] <vms14> should it be broken? I mean was bad code or alike?
[05:06:30] <mst> it was a quick example I put together to test that things worked, so I never wrote real tests for it, so I'm being honest that I don't know
[05:07:04] <vms14> I want to have this forth implemented just to start adding funny stuff like sdl and sockets
[05:07:12] <vms14> but I don't want to cry later
[05:07:29] <vms14> anyways I'll have to rewrite it from scratch
[05:07:39] <mst> that generally happens
[05:07:56] <vms14> It has to happen because now I don't know what I'm doing xD
[05:08:08] <mst> that's what makes this sort of thing fun
[05:08:20] <mst> amusingly, xcl is actually a yak
[05:08:20] <vms14> but a bit of thought can make this happen a bit later
[05:08:31] <vms14> yet another what?
[05:08:34] <mst> and it's on its second implementation now
[05:08:40] <mst> yak as in "yak shaving"
[05:09:21] <vms14> Yak shaving refers to a task, that leads you to perform another related task and so on, and so on - all distracting you from your original goal. 
[05:09:30] <vms14> didn't know the term
[05:09:51] <vms14> actually it's what I do all the time even if the task let's me or not
[05:09:54] <mst> basically I was working on something else that required a repl friendly scripting language, I'd originally been using an embedded tcl interpreter, but it started to get fugly, so I ended up coming up with the xcl idea as a way to sort that out
[05:09:56] <vms14> I cannot stop jumping 
[05:10:09] <vms14> but in my case it's I just like to overcomplicate stuff
[05:10:37] <mst> larry wall often talks about -Ofun
[05:10:39] <vms14> I want to make a website, then I want to make a framework to build a website, then I want to build a language for building that framework...
[05:11:03] <aquanight> step 1: learn quantum mechanics to build your own CPU...
[05:11:07] <mst> and for stuff you're doing in your own time for enjoyment, -Ofun is absolutely the way to go
[05:11:12] <vms14> also the reason I end using perl is because at least I have some shitty code done before I jump to another task
[05:11:30] <Kobaz> does this look okay?  creating a new hashref to a hash and sticking something in the hash? https://dpaste.com/6VQA6C7SW
[05:11:31] <Paperbot> Link title(s): [ dpaste: 6VQA6C7SW ]
[05:11:37] <mst> larry also talks about the key goals of perl being whipuptitude and manipulexity
[05:11:39] <mst> and he's not wrong
[05:11:43] *** Joins: Trigon (~reuben@144.39.114.115)
[05:11:51] <aquanight> also can you call it programming if you aren't squirrelling every 10 minutes?
[05:12:07] <Kobaz> squirrel!
[05:12:12] <mst> GABS, NO
[05:12:25] <Kobaz> mst: did i totally get this wrong? heh
[05:13:12] <mst> Kobaz: that was a reaction to 'squirrel!' not to your code
[05:13:39] <pragma-> FENTON!
[05:15:12] <vms14> perl will still be my scripting language until I make my own
[05:15:20] <vms14> and I'm making it in perl xd
[05:15:38] <vms14> but If you want to make a scripting language makes sense to implement it in perl
[05:15:39] <aquanight> hmm
[05:15:40] <mst> vms14: https://github.com/shadowcat-mst/nxcl/blob/master/t/quicktest.transcript
[05:15:41] <Paperbot> Link title(s): [ nxcl/quicktest.transcript at master · shadowcat-mst/nxcl · GitHub ]
[05:15:46] <zgu|skaro> please don't unleash another php on the world
[05:16:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:17:02] <vms14> mst oh it has oop?
[05:17:30] <vms14> it's real oop or "syntax sugar"?
[05:17:32] <mst> vms14: fexprs -and- OO yes, I might have got carried away but it's working so far
[05:17:38] <mst> actually the OOP is core
[05:17:42] <vms14> oh
[05:18:14] <mst> evaluating an expression is actually an fexpr method call to <the expr>.EVALUATE()
[05:18:35] <vms14> this let is like labels of common lisp not?
[05:18:40] <aquanight> Kobaz: that looks right, but keep in mind that since you've local()ized FNsv, your hash will be deleted when you LEAVE;
[05:18:44] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[05:18:55] <vms14> defines a function inside that let environment that only exists there?
[05:19:18] <vms14> I don't get what is $
[05:19:28] <vms14> thought was the prompt
[05:19:44] <mst> vms14: the leading $ on some lines is the prompt yes
[05:20:01] <aquanight> Kobaz: if you need 'hv' after your next LEAVE, you'll need to instead use newRV_inc and also sv_2mortal(hv); -- this will put off deletion until FREETMPS;
[05:20:03] <mst> vms14: then leading = is the return value
[05:20:45] <vms14> and let fexpr { stuff } more stuff } (fexpr args)
[05:21:04] <vms14> does it only exist for the next expression?
[05:21:12] <vms14> which is (fexpr args)
[05:21:19] <aquanight> if you need it even longer than that, put off the sv_2mortal until you're done with it.
[05:22:26] <mst> vms14: not sure which example you're thinking about
[05:22:36] <vms14> xd nvm
[05:22:45] <aquanight> mst: sometimes half the reason I want a B::Emit library is so that perl can generate executable optrees without needing to convert to perl source and eval "" it.
[05:22:50] <vms14> mst what will you do with this language?
[05:22:53] <aquanight> but can instead just directly build perlsubs
[05:23:14] <vms14> it's only exploratory stuff? but even if it is, it's because you want to do something
[05:23:15] <mst> vms14: think of 'let x = fexpr ...' or 'let x = fun ...' as being like 'my $x = sub ...'
[05:23:56] <mst> aquanight: B::Generate is prior art for this but also mostly made of unmaintainium at this point - might provide some ideas though
[05:25:10] <aquanight> blegh. See I would go at it by ignoring "opcode types" and instead going from the opcodes themselves.
[05:26:32] <mst> vms14: primarily, three things
[05:26:56] <mst> vms14: firstly, DSL hosting type stuff, being able to write complicated config files will be -much- more pleasant this way
[05:27:14] <mst> vms14: secondly, embedded command shells inside daemon applications to make it easy to monitor and debug then
[05:27:22] <aquanight> E.g. B::Emit::Entersub(B::Emit::GV(*STDERR), B::Emit::const("The %s jumped over the %s"), B::Emit::padsv($padsv_jumper), B::Emit::padsv($padsv_leaper), B::Emit::method_named("printf")); would be the sort of thing I'm going for.
[05:27:45] <vms14> mst for dsl maybe forth was also a good choice
[05:27:55] <vms14> with less effort
[05:28:03] <mst> vms14: thirdly, the project this was a yakshave for, which is a sufficiently complicated explanation I'm not gonna right now
[05:29:13] <aquanight> the inspiration behind it would be .NET's S.Reflection.Emit
[05:29:30] <aquanight> for better or for worse I guess
[05:30:01] <aquanight> .NET's is geared more toward a linear oplist rather than perl's tree-based approach
[05:34:24] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[05:35:09] <aquanight> of course
[05:35:40] <aquanight> OP_CUSTOM just swoops in and shanks me in the ass on the whole idea.
[05:35:48] <aquanight> but B::Generate can't deal with that either.
[05:36:01] <mst> vms14: DSL wise, consider: http://paste.scsys.co.uk/596558
[05:36:02] <Paperbot> Link title(s): [ magnet_web paste from Someone at 217.168.150.38... ]
[05:36:06] *** Quits: whynot (~whynot@88.155.58.110) (Quit: leaving)
[05:36:07] <aquanight> and one particular gratuitous offender
[05:36:21] <aquanight> LeoNerd made his pp_* methods static so I can't even use dlsym to find them.
[05:36:23] <mst> vms14: that's valid xcl syntax and with suitable host bindings can function as a config file
[05:36:38] <aquanight> I'd have to rely on splicing them out of preparsed subs to find their pp_addr
[05:37:24] <Kobaz> aquanight: k
[05:38:22] <mst> vms14: but now consider: http://paste.scsys.co.uk/596559
[05:38:22] <Paperbot> Link title(s): [ magnet_web paste from Someone at 217.168.150.38... ]
[05:38:24] *** Joins: R2robot (~R2robot@user/r2robot)
[05:39:22] <aquanight> oh interesting I just have to figure out how to get at the XOPs
[05:39:38] <mst> right, the op definition array is there anyway
[05:40:00] <mst> also if you write something convincing I'm sure you can get LeoNerd to provide an API to get that information
[05:40:08] <aquanight> unfortuantely that doesn't tell me how to build OP_CUSTOMs outside the modules that define them.
[05:40:44] <mst> Kobaz: for the record, generally assume that if your code is XS I won't actually have an opinion
[05:40:44] <aquanight> e.g. what optype to assign them, anything about what the child node(s) should look like, etc.
[05:46:19] <mst> aquanight: bear in mind that what killed B::Generate was the answers to those questions changing between perl versions
[05:46:35] <aquanight> I could just not care about OP_CUSTOM
[05:46:39] <aquanight> not like it's used often
[05:47:01] <mst> I would suggest starting off by not caring but making sure to leave room in the design
[05:47:11] <mst> and then somebody who does care can help you add it later
[05:47:55] <mst> said somebody might even be me, because this sounds like the sort of crack I'd love to use and while my ability at C code is sufficiently terribad you probably wouldn't want me as a committer I'm sure I can scare up enough help we could figure it out if I ever find myself motivated ;)
[05:50:04] *** Quits: Su-Shee (~Susanne@p4ff4967e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[05:51:33] *** Joins: Su-Shee (~Susanne@p4ffc7f83.dip0.t-ipconnect.de)
[05:55:07] <aquanight> crazy thought: is it possible to tell if a particular SV* lives in the global symbol table vs. is a lexical, given a reference to it?
[05:56:08] <aquanight> the theory being if the emitted opcode uses padsv($padsv), but then the setup attaches $padsv as an OUTER and ties it to a global variable (basically, a closed-over 'our' declaration), then the proper response is to change the padsv op to gvsv
[05:56:30] <mst> sure, you just walk all symbol tables in the process
[05:56:57] <mst> with sufficient caching it might perform fine
[05:57:34] <aquanight> yuuuuk.
[05:57:47] <aquanight> and it's no guarantee. refaliasing can do silly things.
[06:00:41] <mst> with great flexibility comes great capacity to shoot yourself in both feet, yeah
[06:00:44] <mst> welcome to perl :D
[06:01:23] <aquanight> shoot all the feets!
[06:04:31] *** Sauvin is now known as Vieillard
[06:05:01] <vms14> don't lie, the reason you like perl is because everything becomes funny when you start using regex
[06:05:04] <vms14> elsif ($word_name =~ /\#\$\^.*?\#\$\^/)
[06:05:27] <mst> vms14: btw, did those examples make sense?
[06:05:36] <vms14> mst sadly yes
[06:05:53] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:05:57] <vms14> I've just put this comment in the code # I apologize
[06:06:24] <vms14> I'm marking strings with those characters internally
[06:06:45] *** Joins: justAstache (~justache@user/justache)
[06:06:46] <vms14> hoping no one will notice nor get to use them for some reason
[06:07:14] <vms14> it's  a hardfix to encode strings because I'm spliting words by spaces
[06:07:50] <vms14> and strings aren't discaarded so I convert them into #$^random-text-with-spaces#$^
[06:08:19] <vms14> hotfix *
[06:08:27] <mst> vms14: why sadly?
[06:11:07] *** Joins: llh (~UPP@user/llh)
[06:20:10] <vms14> mst sorry I missunderstood you I was afk and didn't notic
[06:20:50] <vms14> http://paste.scsys.co.uk/596558 oh
[06:20:51] <Paperbot> Link title(s): [ magnet_web paste from Someone at 217.168.150.38... ]
[06:21:24] <vms14> in lisp you had to create reader macros and alike
[06:21:35] <vms14> anyways it resembles so much the forth way
[06:21:52] <vms14> it seems more like a forth dsl than a lisp one
[06:22:05] <mst> vms14: right, and then given repeated blocks http://paste.scsys.co.uk/596559
[06:22:06] <Paperbot> Link title(s): [ magnet_web paste from Someone at 217.168.150.38... ]
[06:23:25] <vms14> mst are them real servers executing or just examples of a dsl?
[06:25:06] <mst> vms14: examples - real code would be binding the vhost blocks to perl to configure an application
[06:25:07] <vms14> I mean did you add yet this functionality
[06:25:28] <mst> vms14: though the previous prototype already did have that functionality, I just haven't added it again to the new one
[06:25:31] <vms14> haha apache perlsections
[06:25:47] <vms14> actually apache perlsections can work with a perl source filter
[06:26:18] <mst> *augh*
[06:26:19] <vms14> use fexpr; and your code from there
[06:26:19] <mst> :D
[06:26:27] <mst> oh yes I already implemented that once
[06:26:28] <mst> sec
[06:28:23] <mst> so I wrote a module (needs one more rewrite before I ship it) to do remote control of an irssi instance from perl code
[06:28:34] <vms14> oh now that i remember modperl
[06:28:44] <mst> https://github.com/shadowcat-mst/Irssi-Instance/blob/master/sketches/rel2
[06:28:45] <Paperbot> Link title(s): [ Irssi-Instance/rel2 at master · shadowcat-mst/Irssi-Instance · GitHub ]
[06:28:50] <vms14> this forth could run in apache :O
[06:29:10] <mst> that's just enough perl to bind to xcl, then from 'use xcl::script;' onwards the code is xcl
[06:29:23] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:29:39] <mst> uses a source filter that slurps the rest of the file then evals it in an xcl interpreter rather than perl
[06:31:32] <vms14> yes i see the change in syntax from use xcl script
[06:31:57] <vms14> perl source filters are weird but funny stuff
[06:32:31] <vms14> they've implemented the dirtiest lisp like macros
[06:32:52] <vms14> instead of an ast you modify source code :D
[06:34:10] <vms14> btw mst i wanted in the past represent the lisp ast with xml dom libraries
[06:35:22] <vms14> xml is the best known thing from perl that is close to an ast
[06:35:54] <vms14> you can even put callbacks instead of reading
[06:37:24] <vms14> it sounds a weird and inefficient idea, but I think it can have some benefits
[06:40:07] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[06:41:22] <vms14> mst you always seem to do the same stuff I want to do but in a higher level
[06:41:32] <vms14> that's why I end using your modules :D
[06:42:19] <mst> vms14: oh, hey, you should look into SXML and SXSLT - xml parsing and transformation in scheme syntax, not necessarily directly useful but fun stuff to learn
[06:42:39] <mst> since it did representing the xml dom with lisp asts
[06:44:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:47:49] *** Joins: gast0n (~g4570n@user/gast0n)
[06:59:00] <vms14> nah, I try to focus in forth
[06:59:19] <vms14> I love common lisp because of the function format and specially because of macros
[06:59:38] <vms14> but forth seems to have the same features lisp macros provide
[06:59:51] <vms14> and I can afford to implement it
[07:00:21] <vms14> in a way that I could have a much more stable and usable implementation than if I try to implement lisp
[07:00:47] <vms14> I'm not a very good programmer so I know if I implement a language will be shit
[07:01:08] <vms14> and I have no idea about interpreters/compilers 
[07:01:46] <vms14> but forth is very "simple" to implement, the stack really makes it easy and you just need to process words one by one
[07:02:58] <vms14> if I can have my own language and has lisp macro features, I think there is nothing better than that
[07:03:13] <mst> https://leahneukirchen.org/blog/archive/2020/04/brute-forthing-minimal-programs-for-stack-arrangements.html might be interesting
[07:03:14] <Paperbot> Link title(s): [ leah blogs: Brute forthing minimal programs for stack arrangements ]
[07:03:24] <vms14> specially if I try to bootstrap it, could make it very portable
[07:04:35] <mst> that shows how to build lots of normal forth words out of a minimal set
[07:05:40] <vms14> mst it is interesting
[07:05:45] <vms14> thanks for the link
[07:06:03] <vms14> yes, that's bootstrapping taken to the extreme
[07:06:12] <vms14> that's why I see only benefits
[07:06:32] <vms14> also I don't really need to make it handle memory if I'm in a gc language
[07:06:50] <vms14> and I can push strings and objects directly on the stack
[07:07:30] <vms14> also with dirty eval I can define "native" word at runtime
[07:07:51] <vms14> and it's likely stills being faster than python xD
[07:07:59] <mst> I would probably write a generic wrapper to do FFI to perl
[07:08:32] <vms14> mst for now I'm in exploratory prototiping phase
[07:08:44] <vms14> I have to learn forth and rewrite this shit several times
[07:09:03] <vms14> but it seems it can really pay off in the future
[07:09:08] <vms14> doesn't?
[07:10:41] <vms14> but if I'm writing it in perl my goal is make it blend to perl
[07:11:08] <vms14> which is nice, the stack can get scalars
[07:11:19] <vms14> that's the universal type, a scalar
[07:12:25] <vms14> just need syntax sugar for method calls and alike
[07:12:36] <vms14> and somehow I should be able to use perl oop
[07:12:46] <vms14> creating packages at runtime
[07:12:48] <mst> sub make_native ($code, $num_args) { sub { push @stack, $code->(pop @stack, $num_args) } }
[07:13:06] <vms14> mst  'perl-word' => sub {$dictionary{pop(@stack)}=eval('sub{' . pop(@stack) . '}')},   
[07:13:29] <mst> vms14: mine assumes taking a perl subref for the main code but sure
[07:14:15] <vms14> that's a dictionary entry
[07:14:30] <vms14> and immediate is a dirty hack
[07:14:33] <mst> aye
[07:14:57] <vms14> the compiler saves the last compiled word in $latest
[07:15:13] <vms14> immediate just pushes $latest in %immediate
[07:15:28] <vms14>  immediate => sub {$immediate{$latest}=1}, 
[07:15:41] <vms14> ahaha how dirty is my code
[07:16:25] <vms14> and the worst part is you understand perl, usually people don't so they don't see the level of dirtyness
[07:16:44] <mst> it's awful, but it's "I am prototyping and ignoring this while I get everything else right" awful and I do the same thing myself :D
[07:18:49] <vms14> i don't even know if immediate words work btw
[07:24:40] <vms14> ohh  shell => sub{my $text=pop(@stack); push(@stack, `$text`)}
[07:24:50] <vms14> it's useful now :D
[07:25:36] <vms14> this is fun
[07:27:08] * GumbyPAN CPAN Upload: PDL-NDBin-0.026 by ETJ https://metacpan.org/release/ETJ/PDL-NDBin-0.026
[07:34:31] <vms14> https://termbin.com/qt1q this is what I have atm
[07:34:40] <vms14> you can run it it's a repl
[07:35:08] <vms14> has the compile function but it's not available from the repl
[07:35:47] <vms14> can add a perl-word concatenate strings with .
[07:35:56] <vms14> can "ls" shell
[07:36:04] <vms14> pushes on the stack the result xD
[07:36:21] <vms14> but it's shit atm
[07:36:36] <vms14> and I think if I play for a while it will break
[07:38:31] <vms14> if you add a [] word manually in the $dictionary hash (can be a sub ref or array ref) you have to add "leave" at the end as in the oh example oh => [qw/1 2 + + print leave/],
[07:39:14] <vms14> sub refs are native words and [] are the forth ones
[07:42:59] <vms14> you can also compile(qw/oh 1 2 + + print/); i think
[07:45:14] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 256 seconds)
[07:54:43] <mst> FORTH LOVE? IF HONK ELSE FORTH LEARN THEN
[07:55:25] * pragma- gets confused and swerves into a tree
[07:55:52] *** Joins: Martchus_ (~martchus@dynamic-077-009-098-144.77.9.pool.telefonica.de)
[07:56:38] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.4)
[07:57:00] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[07:57:08] *** Quits: Martchus (~martchus@dynamic-095-114-074-044.95.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[07:58:02] <vms14> HONK
[07:58:18] <vms14> i'm liking it a lot
[07:58:33] <vms14> color => sub { print color(take())},
[07:58:51] <vms14> I've added Term::ANSICOLOR
[07:58:53] <vms14> xd
[07:59:03] <vms14> now "blue bold" color
[07:59:05] <Kobaz> mst: it's not XS... this is inside postgresql
[07:59:08] <vms14> and it changes
[07:59:48] <mst> Kobaz: ok, it's perlguts C, same diff, I'm still crap at it :P
[07:59:54] <vms14> actually is the funniest toy language
[08:00:02] <Kobaz> ah
[08:00:15] <vms14> not so hard to boring you while implementing it, and kind of useful
[08:01:10] <vms14> I don't actually need metaprogramming as I'm who creates the language
[08:01:26] <Kobaz> mst: my next c project is to be able to add triggers to postgres functions
[08:04:02] <mst> Kobaz: huh?
[08:05:42] <Kobaz> i know it sounds either insane or dumb
[08:05:43] <Kobaz> but
[08:05:45] <Kobaz> it will be cool
[08:05:58] <Kobaz> you know how you can add triggers to views, right?
[08:06:06] <mst> ayup
[08:06:12] <Kobaz> imagine a trigger on a function, same thing
[08:06:39] <mst> I had to use the rules system to fake them before those existed and it was ... annoying
[08:06:50] <Kobaz> pass in NEW/OLD records, and execute a function... update foobar() set blah = 1 where blarg = 2;
[08:07:26] <Kobaz> create trigger on update to foobar() for each row execute function  foobar_update();
[08:08:00] <Kobaz> and your natural response is: <mst> but views already have that, why not use those?
[08:08:32] <mst> actually, my natural response is "I don't get this -yet- but I'm interested to hear more"
[08:08:32] <Kobaz> and my response is, yes sir, they do exist, BUT. views are treated like relations, and are not MVCC friendly on the DDL side of things
[08:08:52] <Kobaz> you cannot drop a view while it's being used and recreate it without blocking readers/writers of said view
[08:08:59] <Kobaz> functions however, do not have this limitation
[08:09:27] <Kobaz> you can entirely rip out the guts behind the scenes... everything uses the old versions of the functions until you COMMIT the new stuff
[08:09:37] <Kobaz> and then the very next invocation uses the new stuff
[08:09:40] <mst> just like views with renaming
[08:09:45] <Kobaz> yes, exactly
[08:09:51] <Kobaz> fucking hell
[08:10:07] <Kobaz> views are completely locked up and you can't do anything until after-hours when people stop using them
[08:10:28] <Kobaz> and then #postgres is all like: "well put your business logic in functions, or in the app server"
[08:10:46] <Kobaz> i dont want bloody 50 paramter functions so i can update things, i want to use tables/columns
[08:11:14] <Kobaz> so, triggers on functions, that would entirely solve the issue
[08:11:20] <mst> function foo (ROWTYPE mytable) -> mytable.foo
[08:11:26] <Kobaz> no lockups, 'views' are stored in the database
[08:11:33] <Kobaz> we call them view-functions
[08:11:44] <Kobaz> i wrote a transpiler to convert all our views to view-functions that can be inlined
[08:11:58] <Kobaz> rowtype ?
[08:12:18] <mst> the postgres type for a table row shaped thing?
[08:12:25] <vms14> https://termbin.com/823n now it can compile : words like this ;
[08:12:34] <Kobaz> ah
[08:12:42] <vms14> and does not print shit except the stack
[08:12:49] <Kobaz> that's kind of cool but then you lock up the table still, no?
[08:12:58] <Kobaz> the function would have a dependency on the table definition
[08:13:26] <Kobaz> we transpile all our views to functions with explicitly defined RETURNS TABLE(x, y, z, ...)
[08:13:41] <Kobaz> so you can modify the underlying table, like add a new column and not break the function
[08:13:58] <Kobaz> obviously you can't change types, but who changes types on existing columns during production hours, that's just bad anyway
[08:14:27] <Kobaz> we need to add new columns anywhere and rebuild view-functions any time of day, no matter if there's query traffic or not
[08:15:03] <mst> I don't immediately know, I have a postgres expert on zero hours contract for questions like this
[08:15:26] *** Joins: deadmarshal (~deadmarsh@95.38.117.184)
[08:15:37] <Kobaz> i think i have the answer, and it's adding triggers to functions.. heh
[08:15:57] <Kobaz> i've done a shit ton of experiments and talked to the know-it-alls in #postgres and what i want "can't be done"
[08:16:08] <Kobaz> (without modifying postgres)
[08:16:28] <mst> last time they told me that I did it anyway
[08:17:02] <mst> the first time I did that, the resulting conference talk scared the shit out of several pg core developers
[08:17:08] <Kobaz> haha
[08:17:39] <Kobaz> i'll see how my plpgperl backend changes go, and then see about adding that
[08:17:58] <Kobaz> a friend of my brother's did a shit ton of work for amazon on their postgres db spinoff
[08:18:02] <mst> then by the end of the talk they were all nodding (while wincing) because they'd determined what I'd done, while heinous, was actually the least awful thing that would work
[08:18:11] <Kobaz> i was gonn ask him some stuff about that
[08:19:37] <Kobaz> he wrote the original Aurora 
[08:30:32] *** Joins: toastloop (~toastloop@user/toastloop)
[08:53:51] *** Joins: akaWolf (~akaWolf@akawolf.org)
[09:03:23] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[09:06:18] * GumbyPAN CPAN Upload: Mac-SystemDirectory-0.14 by ETHER https://metacpan.org/release/ETHER/Mac-SystemDirectory-0.14
[09:07:34] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:08:18] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[09:11:19] * GumbyPAN CPAN Upload: B-Hooks-EndOfScope-0.26 by ETHER https://metacpan.org/release/ETHER/B-Hooks-EndOfScope-0.26
[09:11:19] * GumbyPAN CPAN Upload: Package-Stash-0.40 by ETHER https://metacpan.org/release/ETHER/Package-Stash-0.40
[09:15:06] *** Quits: bluray (~bluray@user/zapdos) (Quit: Konversation terminated!)
[09:19:01] *** Quits: deadmarshal (~deadmarsh@95.38.117.184) (Ping timeout: 256 seconds)
[09:19:11] *** Joins: mexen (uid495612@user/mexen)
[09:20:40] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:26:56] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:31:40] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:32:34] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[09:33:03] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:46:13] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Read error: Connection reset by peer)
[09:46:45] *** Joins: art1 (~romeyke@p200300ccdf07b800b52ece9abe0359a4.dip0.t-ipconnect.de)
[09:47:02] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:53:05] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2022/02/20 UTC) 64 Bit)
[09:53:25] *** Joins: Tempesta (~Tempesta@user/tempesta)
[09:53:33] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:55:00] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 252 seconds)
[10:02:18] *** Joins: japh (~scp1@user/japh)
[10:09:30] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[10:11:48] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[10:13:12] *** Quits: randir (~randir@2.92.196.208) (Remote host closed the connection)
[10:13:46] *** Joins: randir (~randir@2.92.196.208)
[10:13:52] *** Joins: deadmarshal (~deadmarsh@95.38.117.184)
[10:16:26] * GumbyPAN CPAN Upload: Mojo-Redis-3.28 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojo-Redis-3.28
[10:18:14] *** Quits: randir (~randir@2.92.196.208) (Ping timeout: 256 seconds)
[10:23:23] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:25:49] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:26:12] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[10:27:14] *** Joins: randir (~randir@93.159.239.42)
[10:30:08] *** Joins: KnoP (~KnoP@p4ff5676f.dip0.t-ipconnect.de)
[10:30:10] *** Joins: jplesnik (~jplesnik@83.240.60.87)
[11:03:34] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[11:09:17] *** Quits: pizdets (~pizdets@183.182.114.226) (Ping timeout: 240 seconds)
[11:12:49] *** Joins: pizdets (~pizdets@183.182.115.230)
[11:19:44] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[11:20:51] *** Joins: tobybl_ (~tobybl@214.242.200.146.dyn.plus.net)
[11:24:15] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Ping timeout: 256 seconds)
[11:29:19] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:30:08] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:30:25] *** Joins: zln (~zln@c83-249-48-11.bredband.tele2.se)
[11:31:34] * GumbyPAN CPAN Upload: PDL-Opt-NonLinear-0.08 by ETJ https://metacpan.org/release/ETJ/PDL-Opt-NonLinear-0.08
[11:37:46] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[11:47:29] *** Quits: Perun696 (~perun@xaphon.chao5.net) (Ping timeout: 256 seconds)
[11:47:36] *** Joins: Perun (~perun@xaphon.chao5.net)
[11:52:33] *** Joins: jayray (~jayray@user/jayray)
[11:55:57] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[11:57:34] *** Joins: Pali (~pali@user/pali)
[11:58:20] *** Joins: k8yun (~k8yun@user/k8yun)
[11:58:43] *** Quits: k8yun (~k8yun@user/k8yun) (Remote host closed the connection)
[11:59:54] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:01:37] * GumbyPAN CPAN Upload: Inline-Perl6-0.10 by NINE https://metacpan.org/release/NINE/Inline-Perl6-0.10
[12:12:48] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.4)
[12:13:50] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[12:15:03] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Remote host closed the connection)
[12:15:24] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[12:15:48] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[12:16:54] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:18:57] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[12:19:27] *** Joins: toastloop (~toastloop@user/toastloop)
[12:28:12] *** Quits: Gry (~quassel@botters/gry) (Ping timeout: 240 seconds)
[12:38:16] *** Vieillard is now known as Sauvin
[12:43:41] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[13:06:28] *** Joins: gry (~quassel@botters/gry)
[13:11:16] *** Joins: Darkcoal (~user@user/Darkcoal)
[13:12:44] *** Joins: Markow (~Markow@176.122.215.103)
[13:19:07] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[13:19:27] *** Parts: toastloop (~toastloop@user/toastloop) (Leaving)
[13:21:24] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:26:55] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[13:29:46] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 256 seconds)
[13:41:57] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 256 seconds)
[13:44:10] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[13:44:24] <vague> perlbot, utf8 ☕
[13:44:25] <perlbot> vague: U+2615 (e2 98 95): HOT BEVERAGE [☕] 
[13:46:50] *** Joins: choroba (~E.Choroba@88.146.255.106)
[13:51:54] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:768b:1849:a78b:4ad)
[13:56:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[14:07:50] <japh> is it possible, somehow, do dump all variables defined in a block at the end of the block? I mean all variables in that specific scope
[14:10:28] <Botje> whew. good question.
[14:11:12] <last1> so I am having an issue where Email::MIME can't process non-breaking spaces, and I suspect it's because of Mojo::DOM::HTML
[14:11:33] <tm604> sweval: use PadWalker qw(peek_my); my $x; { %::SCOPE_VARS = peek_my(0)->%*; my $y; my $z = "you get the idea"; print join(",", sort grep !exists $::SCOPE_VARS{$_}, keys peek_my(0)->%*) }
[14:11:35] <perlbot> tm604: $y,$z
[14:11:40] <Botje> tm604++
[14:11:42] <last1> should I open an issue on metacpan ?
[14:11:51] <last1> or within Email::MIME ?
[14:12:11] <Botje> last1: do you have a short-ish reproduction script?
[14:12:40] <Botje> Email::MIME does not have any dependencies on things that eat HTML, so why do you suspect it?
[14:12:59] <japh> I have a sub, calculate_price, that's... 22k lines, with hundreds of nested if/elses, and, well, it doesn't calculate the price correctly. So to make the debugging faster I'd like to dump the variables defined in their own scopes
[14:13:09] <last1> basically I'm trying to ingest a raw e-mail via STDIN into Email::MIME and it errors out
[14:13:12] <last1> "\x{00a0}" does not map to ascii at /usr/local/lib/perl5/site_perl/Email/MIME.pm line 705, <STDIN> line 81.
[14:13:36] <last1> I can solve this by doing: local *Mojo::DOM::HTML::xml_escape = \&HTML::Entities::encode_entities;
[14:13:47] <last1> but that has its own set of problems
[14:20:28] <Botje> last1: can you put (relevant parts of) the script on the paste site in topic?
[14:20:38] <Botje> It sounds like you're missing an encoding flag somewhere.
[14:20:45] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[14:20:51] <Botje> or maybe the mail is rotten and you need to override the enoding or somesuch.
[14:21:58] <last1> I've tried with a whole bunch of e-mails, but let me show you my code
[14:22:18] <Botje> the error message is correct though, ASCII does not specify characters above 0x7f.
[14:22:27] *** Joins: diskin (~diskin@185.49.242.58)
[14:22:36] <Botje> so if somebody snuck in a A0 byte in there, you're dealing with latin1 instead of ascii
[14:23:30] <last1> https://i.perl.bot/p/inrxnq
[14:23:31] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[14:23:43] <last1> I've commented out a few things that I thought might be interfering
[14:24:52] <aquanight> japh: might be something in https://perldoc.pl/perlrun#-Dletters if your perl is debuggable
[14:24:53] <Paperbot> Link title(s): [ perlrun - how to execute the Perl interpreter - Perldoc Browser ]
[14:25:35] <Botje> last1: why did you disable quoted-printable encoding?
[14:25:56] <Botje> that is _the_ way to ensure your part only contains ASCII, regardless of the underlying encoding of unicode to bytes
[14:27:16] <last1> I know, and I was using that in production
[14:27:33] <last1> but I started disabling stuff, adding nothing, to track another bug
[14:27:44] <Botje> concretely, the Unicode character 'BLACK HEART SUIT' (U+2665) maps to the UTF-8 bytes e2 99 a5
[14:27:45] <last1> basically Email::MIME adds a trailing = with qp 
[14:28:00] <last1> and now I realized it does that even without qp
[14:28:16] <Botje> and in QP encoding that becomes the ASCII string "=C2=99=A5"
[14:28:22] <kjetilho> last1: the trailing = is a continuation character
[14:28:29] <last1> I thought it might be from my use of HTML::Entities::encode_entities
[14:28:52] <kjetilho> last1: to preserve long lines when unquoted-printabled
[14:28:54] <last1> kjetilho: it adds it at the end of the message
[14:29:06] <last1> it makes no sense
[14:29:36] <kjetilho> it also sometimes used to protect a trailing space
[14:30:10] <last1> I use Email::MIME to add a signature 
[14:30:20] <last1> and it ends up looking like this: <p>This is a private message</p></body></html>=^M
[14:30:33] <last1> I only work within the <body> tag if present
[14:30:45] <last1> but the code I pasted above adds that trailing =
[14:30:57] <last1> even with all those comments
[14:31:03] <last1> it basically deos nothing but still adds an =
[14:31:06] <last1> *does
[14:32:13] <kjetilho> last1: that means your existing file had no linefeed at its end
[14:32:48] <kjetilho> so in order to not introduce a new line ending, it has to put in the trailing "=".
[14:33:35] <last1> so I should add myself a linefeed after what I read from STDIN ?
[14:33:47] <kjetilho> that's up to you.
[14:38:31] <last1> genius, that fixed the original bug
[14:38:46] <last1> I knew that e-mails had to end with CRLF , but I thought it was only during SMTP conversation
[14:39:25] <kjetilho> yes, but this is unrelated, really
[14:39:28] <last1> I added a simple: $rawemail.="\r\n";  and voila
[14:39:57] *** Quits: tobybl_ (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[14:40:08] <kjetilho> quoted-printable (and base64) are supposed to be binary proof.  they should not change a single bit
[14:41:28] <last1> I see, but why does it expect a linefeed ?
[14:41:29] <kjetilho> and then, to express the lack of a terminating linefeed, they need to code that fact.  if they just put in "</html>\r\n" - it would introduce an extra byte at the end of the message.
[14:41:44] <last1> why not just end with </html> ?
[14:42:26] <kjetilho> the last linefeed in text/plain is part of the data, too.
[14:42:55] <kjetilho> I don't see why you care, though.  if you had used base64 instead, you would not have noticed this "bug" at all.
[14:43:41] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:43:48] <last1> because that trailing = shows up in the visible e-mail
[14:44:44] <kjetilho> then the e-mail client is not decoding q-p correctly
[14:45:15] <last1> exactly
[14:45:19] <last1> it works fine in Gmail
[14:45:28] <last1> but guess who doesn't decode q-p correctly: MS 365
[14:45:31] <last1> so I've got a big problem
[14:45:33] <kjetilho> haha
[14:45:37] <kjetilho> ok, I see
[14:46:06] <last1> you can test if you have the inclination for such a waste of time: send a trailing = to @hotmail / @outlook and see what happens
[14:46:24] <kjetilho> I don't have any such account available, but I trust you! 
[14:46:44] <last1> let me try without CRLF but using base64
[14:46:49] <last1> it might end up being more elegant
[14:49:57] <last1> yeah, that works without the CRLF
[14:50:10] <last1> I'll leave it to that, as to not mess with the original e-mail
[14:51:12] <last1> thanks buddy, been chasing this bug for a bit - glad to to have it solved!
[14:51:21] <kjetilho> :-)
[14:53:15] *** Joins: proller (~p@2a02:6b8:0:40c:e354:206b:1d2f:beea)
[14:58:57] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[14:59:18] *** Quits: fstd (~fstd@xdsl-81-173-174-103.nc.de) (Read error: Connection reset by peer)
[14:59:35] *** Joins: fstd (~fstd@xdsl-81-173-174-103.nc.de)
[15:04:58] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc4-git-8b97cae-Pogorze-Karpackie-CUSTOM-KERNEL)
[15:07:31] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 256 seconds)
[15:07:38] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[15:11:39] *** Quits: muhlio (~Thunderbi@188.254.215.199) (Quit: Are Begai)
[15:17:35] <Botje> kjetilho++
[15:27:21] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:35:31] <rindolf> kjetilho
[15:35:53] <rindolf> kjetilho++ # free karma
[15:36:13] <El_Che> karma has always strings attached
[15:37:47] <rindolf> El_Che: heh. sup?
[15:38:04] <El_Che> just being karmatic
[15:38:43] <rindolf> my karma has a lengthy EULA
[15:40:27] <El_Che> or the EULA is just karma
[15:42:28] <rindolf> \o/
[15:42:39] * rindolf is now playing: 11file:///home/shlomif/Music/dosd-mp3s/Louis%20Armstrong%20-%20What%20A%20Wonderful%20World.mp3 [0800:33/0702:21]
[15:43:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32)
[15:45:46] *** Quits: deadmarshal (~deadmarsh@95.38.117.184) (Ping timeout: 256 seconds)
[15:46:24] *** Joins: txtsd (~txtsd@user/txtsd)
[15:51:29] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:55:22] *** Joins: frost (~frost@user/frost)
[16:02:46] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[16:10:36] *** Joins: KnoP_ (~KnoP@p4ff5676f.dip0.t-ipconnect.de)
[16:14:32] *** Quits: KnoP (~KnoP@p4ff5676f.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[16:15:09] *** Quits: KnoP_ (~KnoP@p4ff5676f.dip0.t-ipconnect.de) (Client Quit)
[16:15:27] *** Joins: KnoP (~KnoP@p4ff5676f.dip0.t-ipconnect.de)
[16:18:30] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:27:06] * GumbyPAN welcomes JAGUART - Jeff Armstrong to CPAN!
[16:27:37] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[16:27:44] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:29:29] *** Joins: haj (~haj@ip5f5beb98.dynamic.kabel-deutschland.de)
[16:31:46] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:34:30] *** Quits: Woodzy (~quassel@198.204.246.228) (Ping timeout: 256 seconds)
[16:35:06] *** Joins: Woodzy (~quassel@198.204.246.228)
[16:35:33] *** Joins: deadmarshal (~deadmarsh@95.38.117.184)
[16:44:25] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[17:08:43] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:15:17] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[17:19:37] *** Quits: Masklin_Gurder (~joel@h-5-150-226-94.A230.priv.bahnhof.se) (Read error: Connection reset by peer)
[17:26:28] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[17:26:28] *** Quits: diskin (~diskin@185.49.242.58) (Killed (tantalum.libera.chat (Nickname regained by services)))
[17:26:28] *** diskin_ is now known as diskin
[17:27:07] <pragma-> hmmm https://i.redd.it/z8cg4fh5n5j81.png
[17:28:06] *** Joins: bmeneg (~quassel@2001:1284:f01c:1258:a003:878c:242e:760f)
[17:29:03] *** Joins: Masklin_Gurder (~joel@h-5-150-226-94.A230.priv.bahnhof.se)
[17:29:33] *** Quits: bmeneg (~quassel@2001:1284:f01c:1258:a003:878c:242e:760f) (Client Quit)
[17:29:47] <Botje> :rolleyes:
[17:29:50] *** Joins: bmeneg (~quassel@2001:1284:f01c:1258:a003:878c:242e:760f)
[17:30:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:30:43] *** Joins: bmeneg_ (~bmeneg@2001:1284:f01c:1258:a003:878c:242e:760f)
[17:33:52] *** Quits: zgu|skaro (~zgu@rrcs-208-125-82-158.nys.biz.rr.com) (Ping timeout: 250 seconds)
[17:35:00] <El_Che> C if you don't count the costs for heating and extra meals :)
[17:35:32] *** Quits: bmeneg_ (~bmeneg@2001:1284:f01c:1258:a003:878c:242e:760f) (Client Quit)
[17:35:43] <revhippie> Wasn't that debunked?
[17:36:07] <Botje> also not sure why somebody thought to blank out the name of the person who posted it
[17:36:28] <simcop2387> Botje: sitewide rules, it's required.
[17:36:40] <El_Che> to avoid angy Perl programming setting his/her house on fire?
[17:36:52] <Botje> oh
[17:36:55] <simcop2387> selectively enforced of course but it's still part of the rules
[17:37:49] <Botje> that "study" basically tells you to not use Perl for computationally intensive stuff like HPC.
[17:38:01] <Botje> Well, gee, thanks :P
[17:46:02] <simcop2387> if it was even done properly in the first place
[17:47:15] <simcop2387> https://www.reddit.com/r/programming/comments/ffu7rv/will_c_ever_be_beaten_this_paper_presents_a_study/ # appears to be the original source
[17:47:18] <Paperbot> Link title(s): [ Will C ever be beaten? This paper presents a study of the runtime, memory usage and energy consum... ]
[17:48:05] <LeoNerd> perlbot: deparse grep { A() } { B() }
[17:48:07] <perlbot> LeoNerd: ERROR: Undefined subroutine &main::B called at (IRC) line 1. 
[17:48:09] <kjetilho> C is for amateurs.  handcrafter 6502 assembly FTW!
[17:48:30] <LeoNerd> Hrm. Annoyingly that does mean `} {` can appear in valid syntax
[17:49:00] <Botje> (also $some_hashref{foo} {bar}_
[17:50:21] <LeoNerd> Oh, wellyes but there we syntactically know it's a hashref
[17:50:36] <LeoNerd> I'm trying to work out what tree-sitter should do with   wibble { CODE HERE } { MORE CODE ... }
[17:52:02] <Botje> are you certain the compiler doesn't see { B() } as a hashref?
[17:52:12] <huf> LeoNerd: what, like a new keyword that takes two code blocks?
[17:52:19] <LeoNerd> In this case, yes it does. Because the compiler knows that grep takes a list
[17:52:31] <LeoNerd> huf: Well this is the problem. The tree-sitter doesn't know about "new keywords" :(
[17:52:39] <huf> LeoNerd: yeah but also dont do that :)
[17:52:44] <alh> What's `tree-sitter`?
[17:52:46] <huf> dont support wibble { } { }
[17:52:55] <LeoNerd> alh: An easily-googlable term
[17:53:00] <LeoNerd> huf??
[17:53:16] <LeoNerd> class Foo {here is my class code} {and now here is a totally regular normal block of code that might call it}
[17:53:20] <huf> ah
[17:53:26] <huf> so already-existing stuff, aight
[17:53:30] <huf> then you have no choice
[17:53:37] <LeoNerd> https://metacpan.org/release/PEVANS/Object-Pad-0.61/source/t/01method.t#L17
[17:53:38] <Paperbot> Link title(s): [ t/01method.t - metacpan.org ]
[17:53:40] <LeoNerd> ^-- e.g. this line
[17:53:41] <alh> Ah, okay
[17:53:46] <huf> thought this was about introducing new syntax stuff :)
[17:53:47] <alh> Thought this was the name of some tool you had come up with
[17:54:37] <LeoNerd> -currently- it believes that class { ... starts a "list-function" whatevercrap that is ((the tree-sitter-perl was written by someone who has almost no idea about Perl, apparently))
[17:55:07] <LeoNerd> Which means it thinks it wants to eat more things afterwards.. it eats the first regular block thinking maybe it's a hashref constructor then gets upset that there isn't a comma after line 23, and gets all in a huff
[17:55:30] <Botje> treating the second {} as a regular code block seems to be your best bet.
[17:56:06] <LeoNerd> OK, but then how do we handle  any { keys $_->%* } { one => 1 }, { two => 2 }, {}    ?
[17:56:35] <Botje> tears and/or alcohol?
[17:56:53] <simcop2387> tears of alcohol
[17:57:04] <kjetilho> elided parentheses FTL.
[17:57:15] * GumbyPAN CPAN Upload: Parser-FIT-0.04 by GHANDI https://metacpan.org/release/GHANDI/Parser-FIT-0.04
[17:57:16] <Botje> I don't think that would come up often.
[17:57:42] <simcop2387> Botje: leonerd is intending to fix that
[17:57:56] <LeoNerd> I suppose an author could   any { keys ... } +{ one => 1 }, ...  to force the issue
[18:01:41] <simcop2387> yay, 15% through a scrub without causing issues with disks being reset
[18:03:21] <veesh> Moo question: can a Moo::Role supply a BUILD method to be invoked by the consuming class?
[18:03:41] <veesh> from what I'm seeing the answer is no,  and that is making me confused
[18:06:34] <ilmari> sweval: package MyRole { use Moo::Role; sub BUILD { say "role build called" } } package MyClass { use Moo; with 'MyRole' } 
[18:06:36] <perlbot> ilmari: No output.
[18:06:45] <ilmari> sweval: package MyRole { use Moo::Role; sub BUILD { say "role build called" } } package MyClass { use Moo; with 'MyRole' } MyClass->new
[18:06:47] <perlbot> ilmari: role build called 
[18:07:07] <ilmari> veesh: but if a class already has a BUILD method, that will override the role-provided one, just like any other method
[18:07:19] <veesh> ah, that's where i'm confused
[18:07:29] <veesh> i have a role that consumes another, and defines an additional BUILD
[18:07:40] <veesh> so it's getting overwritten
[18:07:42] <ilmari> sweval: package MyRole { use Moo::Role; sub BUILD {} after BUILD => sub { say "role build called" }; } package MyClass { use Moo; with 'MyRole'; sub BUILD { "class build called" } } MyClass->new
[18:07:44] <perlbot> ilmari: role build called 
[18:07:49] <ilmari> sweval: package MyRole { use Moo::Role; sub BUILD {} after BUILD => sub { say "role build called" }; } package MyClass { use Moo; with 'MyRole'; sub BUILD { say "class build called" } } MyClass->new
[18:07:51] <perlbot> ilmari: class build called role build called 
[18:08:05] <ilmari> veesh: that's the common pattern to work around that ^^
[18:08:11] *** Quits: henry40408 (~henry4040@175.181.177.116) (Quit: The Lounge - https://thelounge.chat)
[18:08:13] <veesh> i just switched it to use 'before', and I guess it'll just crash horrifically if the parent role ever stops using a BUILD
[18:08:25] <veesh> that's annoying, but okay b/c i control all the code
[18:08:27] <ilmari> provide an empty one in the role
[18:09:02] <LeoNerd> .oO(( Or use Object::Pad where roles can provide more BUILD/ADJUST blocks anyway ;) *ahem* ))
[18:09:12] <veesh> points for O::P
[18:10:18] *** Joins: henry40408 (~henry4040@175.181.177.116)
[18:11:22] *** Quits: henry40408 (~henry4040@175.181.177.116) (Client Quit)
[18:11:32] <haarg> the pattern ilmari showed will work reliably
[18:12:10] <haarg> and doesn't rely on the class or a parent class defining a BUILD
[18:16:32] <simcop2387> doing an upgrade of all cpan modules on perlbot, will take a while but might cause an occasionaly odditiy if you happen to hit it just at the right time while a module is overwriting itself
[18:16:46] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Ping timeout: 272 seconds)
[18:21:16] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[18:23:00] *** Quits: proller (~p@2a02:6b8:0:40c:e354:206b:1d2f:beea) (Ping timeout: 240 seconds)
[18:25:24] <japh> perlbot, cookie?
[18:25:24] <perlbot> japh: Thank you!
[18:29:42] *** Joins: monkey_ (~user@190.104.116.153)
[18:30:06] <veesh> haarg: but it would overwrite a BUILD method from a role that it consumes
[18:30:18] <veesh> in my case, i have a role that consumes a role that gets mixed into a class
[18:30:28] <veesh> and the middle role was overriding the first role's build
[18:30:56] <haarg> the point of the empty BUILD is that it doesn't matter if it gets overwritten
[18:31:12] <haarg> the modifier still gets applied to the final method
[18:33:06] <veesh> no, my middle role overrides the first role's build
[18:33:12] <veesh> i can't put an empty role in the middle one
[18:33:26] <veesh> but i guess if i'm my own consumer, i don't have to worry about upstream changes
[18:33:28] <veesh> from myself
[18:34:00] <veesh> sorry, not communicating well right now
[18:36:15] *** Joins: proller (~p@2a02:6b8:0:40c:6697:86eb:bf8a:e77e)
[18:38:57] *** Joins: henry40408 (~henry4040@175.181.177.116)
[18:39:01] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:40:23] <haarg> veesh: https://perlbot.pl/p/7ge95n
[18:40:24] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[18:40:51] <veesh> oh, that makes sense
[18:40:57] <veesh> empty BUILDs all the way down
[18:41:06] <veesh> thanks!
[18:41:06] <haarg> and if ClassA doesn't have a BUILD, it will still work fine
[18:42:46] *** Joins: mattil (~mattil@87-92-28-123.bb.dnainternet.fi)
[18:43:22] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[18:44:32] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 268 seconds)
[18:44:47] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[18:45:26] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:45:58] *** Joins: randir (~randir@93.159.239.42)
[18:47:06] *** Quits: mattil (~mattil@87-92-28-123.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[18:47:06] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:50:11] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[18:50:58] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 272 seconds)
[18:54:24] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[18:54:49] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Write error: Connection reset by peer)
[18:54:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Write error: Connection reset by peer)
[18:54:49] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Write error: Connection reset by peer)
[18:55:03] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:55:26] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:56:10] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 256 seconds)
[19:00:37] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[19:07:37] *** Joins: randir (~randir@2.92.196.208)
[19:17:17] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[19:19:04] *** Joins: gast0n (~g4570n@user/gast0n)
[19:19:19] *** Joins: bluray (~bluray@user/zapdos)
[19:20:14] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:24:47] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[19:26:25] * GumbyPAN CPAN Upload: Crypt-OpenSSL-VerifyX509-0.18-TRIAL by TIMLEGGE https://metacpan.org/release/TIMLEGGE/Crypt-OpenSSL-VerifyX509-0.18-TRIAL
[19:31:21] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[19:34:30] *** Quits: jplesnik (~jplesnik@83.240.60.87) (Quit: Leaving)
[19:36:26] * GumbyPAN CPAN Upload: Crypt-OpenSSL-VerifyX509-0.19-TRIAL by TIMLEGGE https://metacpan.org/release/TIMLEGGE/Crypt-OpenSSL-VerifyX509-0.19-TRIAL
[19:44:32] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0)
[19:50:30] *** Quits: japh (~scp1@user/japh) (Ping timeout: 272 seconds)
[19:51:46] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 272 seconds)
[19:52:01] *** Joins: japh (~scp1@user/japh)
[19:56:36] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[20:00:31] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[20:02:52] <Ovid_>  
[20:10:37] <mmlj4> hola
[20:11:56] *** Parts: art1 (~romeyke@p200300ccdf07b800b52ece9abe0359a4.dip0.t-ipconnect.de) ()
[20:20:16] *** Quits: veesh (~veesh@89.237.103.133) (Ping timeout: 272 seconds)
[20:21:24] *** Joins: veesh (~veesh@89.237.97.172)
[20:25:54] *** Quits: veesh (~veesh@89.237.97.172) (Ping timeout: 260 seconds)
[20:26:01] *** Joins: veesh (~veesh@89.237.97.208)
[20:30:27] *** Quits: vrurg (~vrurg@45.74.95.181) (Remote host closed the connection)
[20:31:19] *** Joins: vrurg (~vrurg@45.74.95.181)
[20:36:07] *** Quits: henry40408 (~henry4040@175.181.177.116) (Quit: The Lounge - https://thelounge.chat)
[20:36:20] *** Joins: wilk_ (~wilk@user/wilk)
[20:36:45] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 256 seconds)
[20:36:51] *** wilk_ is now known as wilk
[20:39:03] *** Joins: henry40408 (~henry4040@175.181.177.116)
[20:46:19] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875)
[20:50:41] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32) (Ping timeout: 256 seconds)
[20:51:15] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:52:05] *** Joins: Shells (~michelle@2407:8800:bc20:200a:997f:e5cc:1114:dd48)
[20:53:00] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 240 seconds)
[20:54:19] *** Joins: trillp (~trillp@149.28.241.196)
[20:55:03] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[20:55:12] <vms14> mst I have a second iteration
[20:55:24] <vms14> it's much different than the previous one
[20:56:05] <vms14> I got rid of the return stack and from forth I only take the concept of a stack and the reverse notation
[20:56:25] <vms14> but instead I've added macros and I can quote words
[20:56:47] <vms14> if I quote them they become a string pushed on the stack
[20:57:06] <vms14> and I build list by pushing delimiters on the stack
[20:57:08] <vms14> XDD
[20:57:32] <vms14> but for generating a list, you could swap rotate over the delimiter
[20:57:57] <vms14> https://termbin.com/6c1d
[20:58:21] <vms14> it's much weird than the other one and it has 3 ways of make a list
[20:59:07] <vms14> [ 1 2 3 ] would push the start delimiter the numbers and the end delimiter and call "list" which builds a list from that 
[20:59:30] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 260 seconds)
[20:59:39] <vms14> {} does the same whithout calling list so you can move the delimiters
[20:59:45] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[21:00:03] <vms14> and ( ) quote every word inside and build a list 
[21:01:10] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:02:39] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[21:03:44] <vms14> "( 'oh print ) 'print_stuff fun" creates a function
[21:04:20] <vms14> the quotes can be nested
[21:04:25] <vms14> xd
[21:04:41] <vms14> I think is the dirtiest language I've ever seen
[21:06:45] *** Joins: Trigon (~reuben@144.39.114.115)
[21:07:30] *** Joins: Markow (~Markow@176.122.215.103)
[21:07:49] <mst> vms14: that's probably a mistake, it's actually a semi-common thing in forth to (ab)use the return stack within a word to stash values that you need to not be on the main stack for a few words
[21:08:45] <mst> vms14: admittedly, e.g. factorcode.org avoids needing that trick but it does so by having per-word lexical variables, which is a whole different set of complications - "pick your poison" applies as ever
[21:11:02] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 256 seconds)
[21:12:53] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[21:16:16] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[21:18:08] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[21:20:37] <vms14> I don't see the need of a return stack once I can quote words and have macros
[21:21:04] *** Quits: vrurg (~vrurg@45.74.95.181) (Ping timeout: 272 seconds)
[21:21:19] <vms14> the only things I have to take from forth are words, stack, rpn
[21:22:14] <vms14>  I have a way to control evaluation and do some metaprogramming so forth cannot give me more
[21:22:37] <vms14> I don't need immediate words, defer, postpone, I have macros and quote
[21:22:49] <vms14> and the worst list implementation 
[21:23:20] <vms14> but I think taking more from forth would be an error in my case
[21:23:47] <vms14> now I have a language easy to implement with lisp macros and the whole cpan
[21:23:53] <vms14> :D
[21:24:17] <vms14> but it's weird and still I'm trying stuff
[21:24:28] <vms14> anyways I prefer this version much more
[21:24:35] <mst> having -somewhere- to temporarily stash values other than the main stack can be really helpful is my point
[21:24:51] <vms14> mst I have a word named set
[21:24:59] <vms14> 1 'oh set
[21:25:15] <vms14> creates a word named oh that will push 1 when called
[21:25:36] <vms14> it's actually a closure so it saves the value, being it an object or whatever a scalar can represent
[21:25:51] <vms14> can be a list, etc
[21:26:09] <vms14> set => sub { my ($word,$value)=(get(),get());$words{$word}=sub{put($value)};},   
[21:26:17] <vms14> it's very similar to 'fun'
[21:26:29] <vms14>  fun => sub { my ($word,$value)=(get(),get());$words{$word}=$value},       
[21:27:03] <vms14> mst about this I also was thinking about async code
[21:27:47] <vms14> I could give a stack for the callback and have aa flag for when the other code finishes so I can look at this stack
[21:28:21] <vms14> and I could somehow wrap the functions get and take to operate temporarily in this thread stack so all words should work on this stack
[21:28:35] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[21:28:50] <vms14> get and put*
[21:29:29] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[21:29:35] <vms14> and the same concept for having a secondary stack
[21:29:42] <vms14> but I don't think I need it
[21:29:54] <vms14> if I need variables I have set
[21:30:13] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:32] *** Quits: proller (~p@2a02:6b8:0:40c:6697:86eb:bf8a:e77e) (Ping timeout: 240 seconds)
[21:31:23] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[21:37:46] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[21:43:51] *** Joins: alex11 (~alex11@user/alex11)
[21:47:35] <vms14> oh I forgot in perl we had magick hashes with DB_File
[21:47:39] <vms14> I love them
[21:50:57] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc4-git-8b97cae-Pogorze-Karpackie-CUSTOM-KERNEL)
[21:53:52] <mst> vms14: DBM::Deep is even cooler
[21:54:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:54:52] <vms14> not in core
[21:55:59] <mst> I've spent over ten years of my life making 'not in core' irrelevant so your opinion is invalid :P
[21:56:27] <vms14> and there is nothing cooler than this
[21:56:35] <vms14> 'oh.db magick-hash 'oh set
[21:56:52] <vms14> but I cannot access to hash yet xD
[21:57:20] <vms14> and I've done a dirty trick to avoid having "strings"
[21:58:11] <mst> DBM::Deep can do multilevel hashes and stuff and the file backend fatpacks fine
[21:58:21] <vms14> 4 ^oh-my~%cat-has-~a-paws
[21:58:48] <vms14> - are spaces ~% newlines and ~a get an item from the stack
[21:59:09] <mst> and ~~ is a literal ~ I presume?
[21:59:29] <vms14> just a part of a regex
[21:59:46] <vms14> elsif ($word =~ /^\^.*/)  
[21:59:49] <mst> my point is you still need to be able to write ~ sometimes
[22:00:03] <vms14> then use '
[22:00:12] <vms14> or push it on the stack like '~
[22:00:18] <mst> http://trout.me.uk/mstcat3.jpg
[22:00:42] <vms14> you can use it I think, but not just before an 'a' or a '%'
[22:01:01] <mst> which is why you should handle ~~ just like perl strings handle \\
[22:01:57] <vms14> the string handling has to evolve
[22:02:10] <vms14> but I like the ~a is like the lisp format function
[22:02:26] <vms14> I have to provide a way to iterate in lists 
[22:03:00] <vms14> in lisp I can (format nil "~{ ~a ~}" '(some list))
[22:03:51] <vms14> and every ~a inside those ~{ ~} will be used from that list depending on the number of ~a and the items of the list
[22:04:20] <vms14> and you can ~^, that would put a comma except in the last item
[22:04:37] <vms14> I'd like to have this, but didn't want to do it now
[22:06:25] <vms14> I'll try to make a todo app with this shit
[22:08:05] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[22:08:57] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[22:13:22] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[22:18:37] *** Quits: furrymcgee (~devuan@cgn-89-1-211-93.nc.de) (Ping timeout: 240 seconds)
[22:19:01] *** Joins: furrymcgee (~devuan@cgn-213-196-210-217.nc.de)
[22:23:37] *** Quits: furrymcgee (~devuan@cgn-213-196-210-217.nc.de) (Ping timeout: 240 seconds)
[22:24:35] *** Joins: furrymcgee (~devuan@cgn-213-196-210-179.nc.de)
[22:26:13] *** Joins: proller (~p@80.240.216.69)
[22:28:10] *** jmjl is now known as jmjl_
[22:32:36] *** Quits: deadmarshal (~deadmarsh@95.38.117.184) (Ping timeout: 240 seconds)
[22:33:44] *** Quits: jmjl_ (fc1d143dc2@user/jmjl) (Quit: Switching programs, using jmjl. internal will be restarted in a few minutes.)
[22:40:35] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[22:40:57] *** Joins: proller (~p@2a02:6b8:b081:b40d::1:18)
[22:45:18] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[22:46:45] * GumbyPAN CPAN Upload: Net-DNS-Resolver-Unbound-1.08 by RWF https://metacpan.org/release/RWF/Net-DNS-Resolver-Unbound-1.08
[22:51:08] *** Joins: vrurg (~vrurg@45.74.95.181)
[22:52:11] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 256 seconds)
[22:53:32] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:55:59] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[22:59:36] *** Joins: Tempesta (~Tempesta@user/tempesta)
[23:06:59] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:768b:1849:a78b:4ad) (Ping timeout: 252 seconds)
[23:08:51] *** Quits: magla (~gelignite@d5361f17.access.ecotel.net) (Quit: Stay safe!)
[23:14:44] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Remote host closed the connection)
[23:22:02] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:2870:9332:aacb:6d94)
[23:29:14] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 250 seconds)
[23:31:53] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d0ec:d248:3a49:15e0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:33:32] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:33:54] <veesh> Lol @ python. 3.10 broke old versions of virtualenv bc they renamed a private API
[23:39:00] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[23:39:02] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[23:40:53] <mst> virtualenv continues to make my code look like even more of a work of genius than even my high opinion of my own abilities justifies
[23:46:13] *** Joins: asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7)
[23:46:42] *** Joins: whynot (~whynot@37.73.8.80)
[23:50:48] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:56:20] *** Joins: Tempesta (~Tempesta@user/tempesta)
[23:59:23] *** Quits: KnoP (~KnoP@p4ff5676f.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
