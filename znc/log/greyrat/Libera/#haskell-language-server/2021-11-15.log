[02:56:28] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:06:06] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[03:14:21] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:51:10] *** Joins: libertyprime (~libertypr@118-92-79-220.dsl.dyn.ihug.co.nz)
[04:23:19] *** Joins: hololeap_ (~hololeap@user/hololeap)
[04:23:21] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[05:01:24] *** hololeap_ is now known as hololeap
[07:06:06] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[07:23:23] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[08:54:31] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[09:14:52] *** Quits: libertyprime (~libertypr@118-92-79-220.dsl.dyn.ihug.co.nz) (Ping timeout: 268 seconds)
[09:27:46] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[09:34:35] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[11:29:12] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:4f7e:a333:a04f:8257)
[13:24:06] <expipiplus1> err, finding references for a word in a comment seems to highlight the whole file
[13:24:11] <expipiplus1> which my editor really doesn't like
[13:27:40] <fendor[m]> expipiplus1: can not reproduce, just "Go to References" for a word in a comment?
[13:28:15] <expipiplus1> yeah, and not just comments. Seems to happen for the `module` keyword for example 
[13:28:38] <expipiplus1> or "find all references"
[13:28:59] <fendor[m]> expipiplus1: still nothing
[13:29:03] <expipiplus1> hmm
[13:29:04] <expipiplus1> weird
[13:29:12] <expipiplus1> I can reproduce in nvim and codium
[13:29:14] <jneira[m]> what is your editor?
[13:29:23] * expipiplus1 sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/e4d846f18c1535aa9556a8cd89f8b8bd6f35d1a2
[13:29:26] <jneira[m]> ah
[13:29:27] <jneira[m]> hls version?
[13:29:38] <jneira[m]> he you are faster
[13:29:44] <fendor[m]> I am using vscode, doesn't have this behaviour
[13:30:26] * expipiplus1 uploaded an image: (758KiB) < https://libera.ems.host/_matrix/media/r0/download/monoid.al/icyRPeyDHIjjyKSszYHXLRoN/Screenshot%20from%202021-11-15%2017-57-12.png >
[13:30:26] * expipiplus1 uploaded an image: (729KiB) < https://libera.ems.host/_matrix/media/r0/download/monoid.al/ImOKnlyXnOBACdCNZtQQOVBP/Screenshot%20from%202021-11-15%2017-57-08.png >
[13:30:34] <jneira[m]> btw we have a new plugin proposal: https://github.com/haskell/haskell-language-server/pull/2355
[13:30:43] <jneira[m]> reviews very welcomed :-) 
[13:36:28] <expipiplus1> hmm, I can't reproduce in a different project with 8.10 or 9.10
[13:44:38] <jneira[m]> you can see in the log the bad response data for find references?
[13:46:13] <fendor[m]> BTW, @jneira, can we think of a way to reduce maintenance burden of cabal.project/stack.yaml files? It is ridiculous how many files I have to update to get one dependency updated
[13:47:16] <jneira[m]> one way could be convert cabal-ghcversion.project in cabal.project.local and put there only the relevant info (without repeating packages for example)
[13:47:51] <jneira[m]> for stack i dont have a good plan
[13:48:16] <fendor[m]> can't we get away with only having one stack.yaml (+ special stack.yamls such as for ghc 9.2)?
[13:48:25] <jneira[m]> there are two kind of stack.yamls: obsolete lts and alive ones
[13:48:42] <jneira[m]> the old ones only gets extra-deps bounds updates / ne libs
[13:49:06] <jneira[m]> the alive ones needs periodical resolver changes and the previous one
[13:49:21] <fendor[m]> right, but do we really need the old ones for example?
[13:49:21] <jneira[m]> s/ne/new/
[13:49:38] <jneira[m]> jumm the install script needs them
[13:49:51] <fendor[m]> their previous purpose of being install plans for the installation script is not really necessary anymore, no?
[13:50:14] <jneira[m]> we encoded the supported ghcs for stack and cabal using the stack-ghcver.yaml
[13:50:29] <jneira[m]> (although i tried to not using them for that :-P )
[13:51:26] <fendor[m]> right, but that's not the only way to achieve that. Having a supported ghc-version in .cabal file seems just as sensible
[13:51:33] <fendor[m]> * Having a list of supported ghc-version
[13:51:39] <jneira[m]> agree
[13:51:48] <jneira[m]> so we should change the install script...
[13:52:21] <fendor[m]> well, first we would have to ask who is using stack for development and how
[13:52:26] <jneira[m]> otoh i suppose they are handy for stack devs... ü§î
[13:52:50] <jneira[m]> ailrun iirc
[13:52:52] <fendor[m]> and whether one stack.yaml would satisfy their needs 
[13:53:19] <fendor[m]> the issue that definitely creeps up is how stack devs can check locally that all supported versions compile
[13:55:28] <jneira[m]> and circleci is using it to check the project is buildable for supported ghc versions...
[13:55:38] <jneira[m]> s/it/them/
[13:56:08] <jneira[m]> it is not usual but happened the build was succesful for cabal and no for stack
[13:56:47] <jneira[m]> iirc there was a way to extract out extra-deps
[13:56:55] <jneira[m]> maybe i dreamed about :-P 
[13:57:20] <jneira[m]> another way would be some form of templating
[13:57:26] <jneira[m]> but i dont like templating
[13:57:34] <jneira[m]> another piece of magic around
[13:58:09] <jneira[m]> (like using stack-ghcver.yaml to determine ghc supported versions for cabal .-P )
[13:59:07] <jneira[m]> maybe a tool to update all of them in a row
[13:59:57] <jneira[m]> if `stack init --resolve=x` would work reliably... :-/
[14:14:47] <jneira[m]> we have circleci builds blocked for spurious checks btw ü§¶‚Äç‚ôÇÔ∏è
[14:36:24] <fendor[m]> <jneira[m]> "if `stack init --resolve=x..." <- if that worked it would be called cabal üòõ
[14:36:56] <fendor[m]> <jneira[m]> "it is not usual but happened the..." <- that's definitely happening, but I argue that we shouldn't care about it in that case, as long as there *is* a build-plan
[14:38:04] <jneira[m]> a succesful build plan for stack?
[14:39:53] <jneira[m]> not sure if i follow, how could we know that such build-plan exists or is valid without cheking it?
[14:42:23] <fendor[m]> no, not for stack, just in general. E.g. if cabal proves there is a build-plan that compiles for, e.g. ghc 8.6.5, then it is good enough for us.
[14:43:11] <fendor[m]> if people really need a stack build with ghc 8.6.5, they can derive it partially from cabal's build-plan
[14:47:56] <jneira[m]> hmm iirc that is not trivial and even having them the build can fail for stack for other reasons
[14:48:23] <jneira[m]> so having stack.yaml is a convenience for stack devs, to not have to fight with those things
[14:48:52] <jneira[m]> (but we have to keep it up to date in exchange)
[14:50:12] <jneira[m]> jneira[m]: stack uses directly setup.hs underneath, like nix
[14:50:36] <jneira[m]> setup.hs or whatever is named :-P 
[14:51:41] <jneira[m]> but i we could get a way to create a stack.yaml on the fly given a working cabal plan, that would be a nice solution, sure
[15:38:58] <expipiplus1> <jneira[m]> "you can see in the log the bad..." <- err, no. How can I make the log more verbose?
[15:39:56] * expipiplus1 sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/d02418dfac79d4329cfe300e09ab246b9e0d914e
[15:40:02] <expipiplus1> s/\///
[15:41:01] <expipiplus1> I have "haskell.trace.client": "debug" and "haskell.trace.server": "messages"
[15:41:32] <expipiplus1> And I'm reading from haskell.logFile
[16:12:32] *** Quits: juhp (~juhp@128.106.188.220) (Quit: juhp)
[16:27:22] *** Joins: juhp (~juhp@128.106.188.220)
[16:28:01] <jneira[m]> the messages thing is misleading, it used to print the lsp json messages between the editor and the server, but it does not anymore
[16:29:15] <jneira[m]> not sure how to trigger them now, as `LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true` seems to be a lsp-test specific thing
[16:29:51] <jneira[m]> i should have add a issue about 
[16:30:57] <jneira[m]> <expipiplus1> "err, no. How can I make the..." <- hlint for example logs more info, maybe the ghcide code about finding refs is more laconic
[16:31:14] <maerwald> how long does "Consulting the cradle to get project GHC version..." take? It seems HLS is stuck at that stage
[16:31:42] <jneira[m]> with ghcup?
[16:31:48] <maerwald> no
[16:32:31] <jneira[m]> it triggers a full build including dependencies so it can take some time if you did not build them already
[16:32:42] <maerwald> there is no output
[16:32:51] <jneira[m]> (but the build is logged iirc)
[16:32:52] <maerwald> I'm running `haskell-language-server-wrapper typecheck`
[16:32:57] <maerwald> it does nothing
[16:33:39] <maerwald> ah, now it does... so it seems it was stuck reading 635 files from places that are not in the .cabal file
[16:34:00] <jneira[m]> what is typecheck?
[16:34:10] <jneira[m]> ah reading the help
[16:34:45] <jneira[m]> i usually execute them without the subcommand (it does that by default)
[16:36:46] <jneira[m]> you can tell it load a specific file with `haskell-language-server-wrapper ./path/to/Module.hs`
[17:13:32] <fendor[m]> HLS cli just looks for any .hs file that is in a directory
[18:37:29] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[18:37:34] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:54:52] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:4f7e:a333:a04f:8257) (Quit: WeeChat 2.8)
[22:04:55] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 250 seconds)
[22:30:32] *** Joins: juhp_ (~juhp@128.106.188.82)
[22:32:13] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 268 seconds)
[22:32:14] *** juhp_ is now known as juhp
[22:32:43] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[23:35:31] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 265 seconds)
[23:37:18] *** Joins: juhp (~juhp@128.106.188.82)
