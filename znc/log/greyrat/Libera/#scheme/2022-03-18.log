[00:01:01] <jcowan> The idea of the PFN is that data structure libraries shouldn't be automatically registering themselves with the defaualt comparator, which is meant for user convenience.
[00:01:30] <dpk> i see
[00:02:52] <jcowan> set-replace  example: you have a set s = {1, 2, 3} with equality predicate `=`.  You can then use (set-replace s 2.0), which rather than throwing an error will give you {1, 2.0, 3}.
[00:03:53] *** Joins: badkins (~badkins@136.56.92.199)
[00:05:42] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[00:10:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:10:59] <gwatt> When have you found that to be useful?
[00:18:21] <mnieper> You can implement a map-like structure based on a set with it.
[00:18:32] *** Quits: nestor_ (~nestor@46.166.88.43) (Ping timeout: 240 seconds)
[00:18:59] <mnieper> You model a key/value pair as a pair and the equality predicate for such pairs is just the equality on its car.
[00:19:51] <mnieper> With set-replace you can replace a value with a different one without retrieving the pair first.
[00:21:39] *** Joins: civodul (~user@guix/contributor/civodul)
[00:29:08] <jcowan> Always useful to have someone around who knows what he's talking about!
[00:35:39] <sham1> I feel that there usually is a reason why sets are based on maps instead of other way around
[00:36:53] <Zipheir> Implementations of sets?
[00:37:13] <Zipheir> Because abstract maps are sets.
[00:40:29] <mnieper> What is the value of a key/value pair if you implement your sets in terms of maps?
[00:41:38] <mnieper> Zipheir: At least in suitable categories. :)
[00:42:11] <Zipheir> mnieper: Yes.
[00:43:20] <Zipheir> jcowan: Seconded.  Now I can rely on mnieper to answer the hard questions. :)
[00:45:33] <jcowan> Well, everybody needs maps, so you can take it for granted that they're around.  If you want a set, it's trivial to do: it's just a map where the values are arbitrary.  SRFI 113 uses 1 as the value because it also has bags, where the value is the number of instances of a given object in the bag.
[00:46:15] <mnieper> Right, I forgot about bags.
[00:46:16] <jcowan> so sets and bags are trivial wrappers around "sobs" which do all the real work, except that a set bounds the values by 1
[00:46:55] <jcowan> There are warnings that what you get out of a set/bag is not necessarily eqv? to what you put in, just the same in the sense of the comparator.
[00:46:56] *** Quits: cedb (~ced@user/ouestbillie) (Read error: Connection reset by peer)
[00:51:27] <jcowan> Unlike lists, vectors, annd variables, where what you get out *is* eqv? to what you put in.
[00:53:18] <Zipheir> Funky.
[00:55:38] <Zipheir> I wish I'd thought to say something about that in SRFI 224.
[00:55:57] <Zipheir> Whatever the right "something" is.  I'm not really sure.
[00:58:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:39ff:e2ca:cb20:103) (Ping timeout: 240 seconds)
[00:59:18] *** Joins: zwr (~zwr@2804:d45:b966:fb00:cd2d:c396:a30e:b814)
[01:03:11] *** Joins: cedb (~ced@user/ouestbillie)
[01:07:52] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[01:09:47] *** Quits: cedb (~ced@user/ouestbillie) (Read error: Connection reset by peer)
[01:10:30] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[01:10:38] *** Quits: mnieper (~user@212.30.36.90) (Quit: ERC (IRC client for Emacs 27.1))
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:44] *** Joins: cedb (~ced@user/ouestbillie)
[01:19:25] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:24:02] <gwatt> oops, mnieper has gone. jcowan: I'd thought of the functionality of using set-replace to implement map-like structures, but at that point I'd rather have actual maps specified.
[01:26:18] *** Joins: casmajavi_ (~casmajavi@user/casmajavi)
[01:27:36] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Ping timeout: 252 seconds)
[01:38:59] *** Quits: cedb (~ced@user/ouestbillie) (Read error: Connection reset by peer)
[01:43:21] *** Joins: cedb (~ced@user/ouestbillie)
[01:50:16] *** Joins: karlosz (~karlosz@12.129.159.198)
[01:55:34] *** Quits: cedb (~ced@user/ouestbillie) (Quit: WeeChat 3.4)
[01:56:32] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[01:57:23] *** Joins: cedb (~ced@user/ouestbillie)
[01:57:28] *** Quits: karlosz (~karlosz@12.129.159.198) (Quit: karlosz)
[01:59:47] *** Quits: cedb (~ced@user/ouestbillie) (Remote host closed the connection)
[02:03:21] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:04:11] *** Joins: cedb (~ced@user/ouestbillie)
[02:04:17] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[02:06:32] *** Quits: cedb (~ced@user/ouestbillie) (Read error: Connection reset by peer)
[02:09:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[02:12:23] *** Joins: jao (~jao@89.45.90.164)
[02:14:26] *** Joins: cedb (~ced@user/ouestbillie)
[02:16:46] *** Quits: cedb (~ced@user/ouestbillie) (Remote host closed the connection)
[02:19:18] *** Joins: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au)
[02:19:18] *** Quits: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au) (Changing host)
[02:19:18] *** Joins: mange (~user@user/mange)
[02:24:17] *** Joins: cedb (~ced@user/ouestbillie)
[02:24:32] *** Joins: robin (~robin@user/terpri)
[02:26:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:33:04] *** Joins: bacteriummourner (~bacterium@37.19.221.133)
[02:40:49] *** Joins: klovett (~klovett@107.116.92.97)
[02:42:37] *** Quits: klovett_ (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[02:43:11] *** Joins: badkins (~badkins@136.56.92.199)
[02:47:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[02:53:22] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 250 seconds)
[03:05:05] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:09:15] *** Joins: richardio02 (~richardio@99-125-205-147.lightspeed.jcvlfl.sbcglobal.net)
[03:09:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[03:09:35] *** Parts: richardio02 (~richardio@99-125-205-147.lightspeed.jcvlfl.sbcglobal.net) ()
[03:11:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:16:02] *** Quits: jao (~jao@89.45.90.164) (Ping timeout: 240 seconds)
[03:18:22] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[03:30:54] *** Quits: casmajavi_ (~casmajavi@user/casmajavi) (Remote host closed the connection)
[03:32:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[03:34:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:38:42] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:58:03] *** Joins: irontom (~user@38.81.106.9)
[04:04:23] *** Joins: badkins (~badkins@136.56.92.199)
[04:08:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:09:03] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[04:10:54] *** Joins: badkins (~badkins@136.56.92.199)
[04:16:38] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[04:17:10] *** alMalsamo is now known as lumberjack123
[04:36:23] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[04:49:18] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:55:44] *** Joins: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl)
[04:56:13] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[05:02:47] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[05:02:53] *** Quits: kori (kori@user/kori) (Quit: zzz)
[05:05:24] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Ping timeout: 240 seconds)
[05:06:18] *** Joins: kori (kori@dfg.rocks)
[05:07:04] *** Quits: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[05:23:55] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:27:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[05:27:20] *** Joins: robin (~robin@user/terpri)
[05:31:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[05:33:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:42:04] *** Joins: eddof13 (~eddof13@192.154.196.154)
[05:46:32] *** Quits: eddof13 (~eddof13@192.154.196.154) (Ping timeout: 240 seconds)
[05:53:48] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 252 seconds)
[05:54:55] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[05:59:02] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 240 seconds)
[06:01:15] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[06:03:15] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:07:49] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[06:08:04] *** Joins: robin (~robin@user/terpri)
[06:14:50] *** Quits: klovett (~klovett@107.116.92.97) (Quit: ZZZzzzâ€¦)
[06:22:39] *** Quits: Zipheir (~wcm@98.4.178.27) (Quit: BRB)
[06:25:02] *** Joins: Zipheir (~wcm@98.4.178.27)
[06:26:57] *** Quits: daviid (~user@179.210.58.162) (Ping timeout: 240 seconds)
[06:28:37] *** Joins: klovett (~klovett@107.116.92.97)
[06:34:25] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[06:41:51] *** Joins: daviid (~user@2804:18:5853:dbd2:a031:a08a:7084:12ea)
[06:49:52] *** Joins: badkins (~badkins@136.56.92.199)
[06:54:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:56:04] *** Joins: eddof13 (~eddof13@2806:102e:12:64:994e:c256:6228:a886)
[07:07:30] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 252 seconds)
[07:08:22] *** Joins: irontom (~user@38.81.106.9)
[07:08:28] *** Joins: cromyr (~user@1.128.107.82)
[07:28:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:29:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:31:24] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[07:43:48] *** Quits: Menchers (Menchers@user/menchers) (Ping timeout: 240 seconds)
[07:50:57] *** Quits: Zipheir (~wcm@98.4.178.27) (Ping timeout: 256 seconds)
[08:02:39] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[08:17:35] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 256 seconds)
[08:43:27] *** Quits: chris2 (cky@meredith.poweredbytaylor.com) (Quit: WeeChat 2.8)
[08:43:44] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.0)
[08:44:49] *** Joins: weechat1 (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[08:49:07] *** Joins: cky (cky@meredith.poweredbytaylor.com)
[08:49:55] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[08:57:16] *** Joins: Menchers (~Menchers@user/menchers)
[08:57:59] *** Joins: Zipheir (~wcm@98.4.178.27)
[09:01:02] *** Quits: daviid (~user@2804:18:5853:dbd2:a031:a08a:7084:12ea) (Ping timeout: 240 seconds)
[09:06:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[09:09:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:20:14] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[09:21:59] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:31:04] *** Joins: nestor_ (~nestor@46.166.88.43)
[09:40:17] *** Joins: lwhjp` (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[09:40:23] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[09:40:31] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Read error: Connection reset by peer)
[09:41:01] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:45:59] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:46:42] *** Joins: badkins (~badkins@136.56.92.199)
[09:51:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:51:25] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[09:54:50] *** Quits: mange (~user@user/mange) (Remote host closed the connection)
[10:09:14] *** Quits: wingo (~wingo@li270-233.members.linode.com) (*.net *.split)
[10:09:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[10:14:34] *** Joins: wingo (~wingo@li270-233.members.linode.com)
[10:14:34] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[10:14:45] *** Parts: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (ERC (IRC client for Emacs 27.1))
[10:23:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:25:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:25:30] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[10:25:57] *** Quits: sudden (~cat@user/sudden) (Quit: Lost terminal)
[10:26:51] *** Joins: sudden (~cat@user/sudden)
[10:33:22] <dpk> so, i think i am going to make an executive decision for Codeberg. i will send them a mail to ensure we get 'preserved' status from the beginning so they don't delete our repo if it goes inactive when we're done
[10:34:05] <dpk> on the whole, i think it's a major advantage that they're a German e.V., so anyone can become a member and have an equal say in the governance of the site, including what happens to projects (including ours) if the org or the site were to close down
[10:34:53] <dpk> and unlike other orgs, especially commercial ones (even sourcehut), we have a legal guarantee through the German civil code of our right to be involved in decisions such as that
[10:53:33] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[10:54:52] *** Joins: mnieper (~user@137.250.162.24)
[10:55:25] *** Quits: eddof13 (~eddof13@2806:102e:12:64:994e:c256:6228:a886) (Remote host closed the connection)
[10:57:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[11:04:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:25:09] *** Joins: frost (~frost@user/frost)
[11:32:36] *** Quits: nestor_ (~nestor@46.166.88.43) (Ping timeout: 252 seconds)
[11:32:36] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[11:33:29] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[11:34:07] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[11:35:51] <wasamasa> wait, wait
[11:35:57] <wasamasa> codeberg deletes repositories?
[11:38:06] <ecraven> well, you could always sync it from codeberg to other git hosters, such as sourcehut or gitlab
[11:38:24] <ecraven> also, one of the hetzner backup boxes ;)
[11:39:35] <dpk> wasamasa: i don't know if they actively delete repositories, but their terms of use allows them to after certain amounts of inactivity
[11:39:45] <wasamasa> ok
[11:39:53] <dpk> ecraven: it's as much the issue tracker as the actual repo contents
[11:40:09] <ecraven> well, sync that too, there should be a backup anyway, right?
[11:40:31] <ecraven> if they don't provide a decent API, maybe they are the wrong choice ;) [I hadn't heard of them before right now, so no idea]
[11:41:01] <wasamasa> I guess you're refering to https://codeberg.org/Codeberg/org/src/branch/main/TermsOfUse.md#4-cancellation-and-termination
[11:41:06] <wasamasa> > (2) Abandoned user accounts or organizations with no (or extremely few) all-time contributions may be deleted after being unused for 365 days. A warning via email is sent 1 month in advance.
[11:41:41] <wasamasa> which reads to me like database maintenance
[11:42:46] <dpk> ecraven: they're Gitea, and the Gitea API does seem to provide decent access to stuff like that. thanks for volunteering to use it to build a backup tool for us ;-)
[11:43:11] <ecraven> dpk: ask me when everything is set up, I like this kind of smallish tasks
[11:43:21] <ecraven> Everything: sorry, didn't mean to wake you :P
[11:44:02] <dpk> hehe. we'll see what Codeberg says, as i also asked if they could give us backups directly. but (this time sincerely) thanks for the offer!
[11:44:41] <ecraven> I'm cautious to offer more than small amounts of help, as I'm always motivated, but history has shown (see r7rs-benchmarks) that my time is more limited than I'd like it to be :-/
[11:44:57] <ecraven> for example, I (once again) didn't get back to ArneBab about a new run of the benchmarks
[11:57:55] *** Joins: badkins (~badkins@136.56.92.199)
[12:02:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[12:03:05] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:165e:68ad:c281:975a)
[12:18:00] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[12:34:42] *** Joins: nishant (~Nishant@49.37.242.151)
[12:44:21] *** Joins: civodul (~user@guix/contributor/civodul)
[13:04:33] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[13:08:21] <dickbar__> Can somebody explain from "Software Design for Flexibility" the program (define ((iterate n) f) ... How does (interate n) work where usually a symbol is used at that position?
[13:08:54] <dickbar__> chapter 2.1.1. ^^
[13:10:26] *** Joins: daviid (~user@179.210.58.162)
[13:13:33] <dpk> dickbar__: see https://srfi.schemers.org/srfi-219/srfi-219.html
[13:13:56] <ecraven> dickbar__: this defines a function iterate, that takes one argument n, and returns a function that takes one argument f
[13:13:59] <dpk> it defines a function called iterate (taking one argument n) which itself returns a function (taking one argument f)
[13:14:10] <ecraven> as dpk says, it's syntax for easier currying
[13:14:26] <dpk> that final returned function runs the actual body of of the define when called
[13:14:58] <sjamaan> dickbar__: On page 383, this is explained
[13:15:08] <sjamaan> Oddly, I couldn't find it in the MIT/GNU Scheme reference manual
[13:16:35] <dickbar__> Thanks people for your quick  help!
[13:22:49] *** Quits: civodul (~user@guix/contributor/civodul) (Read error: Connection reset by peer)
[13:40:29] <mnieper> ecraven: While SRFI 219 can be used to define curried procedures, it doesn't define curried procedures in general.
[13:41:26] <ecraven> that's just what I've most often seen it used for (even though even the word "currying" might be incorrect here ;)
[13:42:34] *** Joins: civodul (~user@guix/contributor/civodul)
[13:56:49] *** Joins: frost (~frost@user/frost)
[13:58:17] <mnieper> Formally, the word "currying" makes sense when applied to a judgment in natural deduction. The curried judgment is then the resulting judgment from applying the introduction rule for the implication iteratively until the antecedent is empty.
[14:06:11] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[14:07:51] <edgar-rft> I think the word "currying" makes most sense when applied to chicken
[14:09:40] <dpk> why?
[14:15:39] <edgar-rft> because of chicken curry?
[14:16:02] <edgar-rft> -> https://www.allrecipes.com/recipes/15940/main-dish/curries/chicken/
[14:16:56] <edgar-rft> -> https://www.food.com/recipe/best-chicken-curry-414548
[14:17:38] <edgar-rft> -> https://www.yummly.com/recipes/simple-chicken-curry
[14:18:27] <edgar-rft> -> https://www.recipetineats.com/chicken-curry/
[14:22:15] <dpk> oh.
[14:26:09] *** Joins: nestor_ (~nestor@46.166.88.144)
[14:29:20] *** Joins: badkins (~badkins@136.56.92.199)
[14:33:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[14:35:04] *** Joins: NeoCron (~NeoCron@p200300e47f277d00ff410b6acd6256a7.dip0.t-ipconnect.de)
[14:54:36] *** Joins: vats (~vats@103.16.30.139)
[14:56:20] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[15:04:26] *** Quits: vats (~vats@103.16.30.139) (Ping timeout: 260 seconds)
[15:04:48] <jcowan> And as we know, natural deduction rulez.  Not for us these highly unintuitive axioms!
[15:10:24] <jcowan> (I actually learned logic via natural deduction first, and I do feel that it is more, well, natural.  One may be forgiven for wondering if a given set of axioms is actually fit for purpose, but if you deny that A implies A or A, I can only conclude that you do not know what the word "or" means.)
[15:14:01] *** Quits: nestor_ (~nestor@46.166.88.144) (Quit: Leaving)
[15:32:01] <sham1> edgar-rft: did you come up with that yourself
[15:34:18] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[15:37:12] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[15:41:40] <edgar-rft> sham1: no, duckduckgo helped me finding the links
[15:42:02] *** Joins: badkins (~badkins@136.56.92.199)
[15:45:40] <sham1> No, but I mean the connection of chicken to currying
[15:46:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[15:48:08] <edgar-rft> sham1: that's somehow not possible because chicken curry existed long before I was even born, maybe I came up with it in a former life
[15:49:24] <sham1> Fair enough
[16:13:35] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:165e:68ad:c281:975a) (Ping timeout: 256 seconds)
[16:17:38] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:40:51] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[16:41:33] <edgar-rft> On the other hand, even alone that fact that chicken curry isn't mentioned in the Book of Enoch makes me think that it could be a more modern thing.
[16:42:51] <mnieper> jcowan: For Scheme, sequent calculus may be even more natural than natural deduction.
[16:43:28] <mnieper> To recapitulate: a judgment in natural deduction is of the form A, B, C |- D
[16:44:38] <mnieper> Asserting that when A, B, and C, then D.
[16:45:09] <mnieper> In Scheme, it could be interpreted as a procedure, taking three values (of types A, B, and C) and returning a value of type D.
[16:45:27] <mnieper> A judgment in sequent calculus is of the form A, B, C |- D, E, F.
[16:45:49] <mnieper> In standard interpretation asserting that when A, B, and C, then D, E, or F.
[16:46:43] <mnieper> Now Scheme has procedures of the form A, B, C |- D, E, F. To see this, we just have to remind us of the existence of the amb operator (implementable with call/cc).
[16:48:03] <mnieper> Tentatively, a Scheme procedure could give us a result of type D.  When it can be proven (during runtime) that this is not the right result, we call amb and are suddenly delivered a result of type E, ...
[16:48:40] *** Joins: Psybur (~Psybur@mobile-166-171-56-243.mycingular.net)
[16:48:48] <jcowan> I'll read up on it when I get a chance ... afk
[16:48:49] <mnieper> The point is that while natural deduction naturally models intuitionistic logic, sequent calculus naturally models classical logic.
[16:49:35] <mnieper> And adding call/cc (Peirce's law) to intuitionistic logic allows to derive the rule of the excluded middle and thus gives classical logic.
[16:50:03] <mnieper> (professor-mode #f)
[16:50:07] <jcowan> Whoo.  News to me, although I was born a Peircean, you might say.
[16:50:56] <jcowan> Peirce > Edgar Singer > Thomas Cowan > John Cowan is my Stammbaum (informally)
[16:51:21] <jcowan> s/</>/g
[16:52:51] *** Joins: s-liao (~s-liao@101.86.164.158)
[17:03:07] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[17:03:28] <edgar-rft> \me sings something towards jcowan
[17:04:27] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:05:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:15:55] *** Joins: badkins (~badkins@136.56.92.199)
[17:32:59] *** Quits: mnieper (~user@137.250.162.24) (Quit: ERC (IRC client for Emacs 27.1))
[17:52:11] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[17:54:09] *** Joins: vats (~vats@103.16.30.139)
[18:00:00] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[18:03:35] <amazigh> Changing the code of Chez was a piece of cake... but now I have dozens of failing tests =D
[18:04:31] <mnieper> amazigh: What do your code changes implement?
[18:08:42] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[18:08:46] *** Quits: vats (~vats@103.16.30.139) (Ping timeout: 260 seconds)
[18:09:27] <amazigh> They are all syntax related: a) number in library names b) library (foo bar) will be looked up in foo/bar/bar.sld, and c) the beginning of `define-library` support.
[18:09:37] <amazigh> the very beginning of `define-library`
[18:09:57] <amazigh> I am wondering whether using unsyntax will be an easier or better path at least for me
[18:10:19] <mnieper> Numbers in library names are incompatible with some of Chez's native extensions.
[18:10:56] <amazigh> the funny thing is that it manage to compile Chez with the changes, so it is not all wrong.
[18:10:57] <mnieper> The problem is that numbers do not carry a lexical environment as symbols do.
[18:10:58] <amazigh> re unsyntax, is it possible to make it work with REPL?
[18:11:14] <mnieper> Unsyntax has a REPL.
[18:11:51] <amazigh> Then I will investigate that path
[18:12:08] <mnieper> It can make sense to port it to R6RS; then you can run that on Chez for efficiency reasons.
[18:13:24] *** Joins: irontom (~user@38.81.106.9)
[18:13:49] <amazigh> problem is that work I started with Chez was supposed to be an easy-to-grab fruit, and I had other plans.
[18:14:57] <mnieper> I think, the problem with modifying Chez directly is that the code is so well-maintained and strict about just any kind of error (just look at the number of tests and test iterations and permutations they use), that modifying it will likely result in a worse product unless you have great resources. 
[18:15:38] <amazigh> yep, definitly.
[18:15:39] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:16:48] <mnieper> It's simpler not to break GCC by adding a non-trivial patch.
[18:16:57] <mnieper> :)
[18:18:23] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1192:1a3c:917b:5b02)
[18:18:23] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1192:1a3c:917b:5b02) (Changing host)
[18:18:23] *** Joins: skapata (~Skapata@user/skapata)
[18:26:07] *** Joins: badkins (~badkins@136.56.92.199)
[18:29:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:30:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:31:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:32:14] *** Joins: badkins (~badkins@136.56.92.199)
[18:36:33] <gwatt> amazigh: I found it relatively easy to teach chez to have a define-library form, but allowing chez to intermingle definitions and expressions looks much harder
[18:36:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:37:23] *** Joins: badkins (~badkins@136.56.92.199)
[18:41:57] *** Joins: catties (~catties@user/catties)
[18:42:21] *** Joins: subnut (~subnut@user/subnut)
[18:44:06] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[18:45:42] <mnieper> It allows this for program bodies; now you just have to copy-and-paste this code to the parser for library bodies. :D
[18:45:52] *** Parts: subnut (~subnut@user/subnut) ()
[18:46:28] <gwatt> It allows for r6rs programs to do that?
[18:47:38] *** Joins: lispy (~lispy@user/lispy)
[18:48:28] <mnieper> Expressions and definitions in an R6RS program body can be mixed.
[18:49:16] *** Joins: schulze (~schulze@dynamic-077-000-216-114.77.0.pool.telefonica.de)
[18:49:43] <gwatt> neat
[18:49:59] *** Quits: schulze (~schulze@dynamic-077-000-216-114.77.0.pool.telefonica.de) (Client Quit)
[18:50:53] *** Joins: schulze (~schulze@dynamic-077-000-216-114.77.0.pool.telefonica.de)
[18:55:28] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Changing host)
[18:55:28] *** Joins: ullbeking_ (sid5364@user/ullbeking)
[18:57:55] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[18:58:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[18:58:37] *** evdubs_ is now known as evdubs
[18:59:11] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:59:17] *** ullbeking_ is now known as ullbeking
[18:59:52] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:59:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:07:16] <amazigh> in my toy scheme to js compiler, I used a pass in the compiler to convert bodies to (letrec* ((foo (do-something) (ignore.1 (some-procedure)) (out (something-else)) out)
[19:08:40] <sham1> Do you use any of the things from "Fixing letrec"?
[19:09:00] *** Quits: X-Scale (~ARM@89.214.146.79) (Ping timeout: 240 seconds)
[19:09:28] *** Quits: klovett (~klovett@107.116.92.97) (Quit: ZZZzzzâ€¦)
[19:10:01] <amazigh> no
[19:10:15] <amazigh> I mean yes, I used the trivial transformation.
[19:11:06] *** Joins: X-Scale (~ARM@92.250.103.125)
[19:12:37] <mnieper> (ignore.1 (some-procedure)) is only correct if your compiler ignores numbers-of-values-mismatches. If not, it has to be (ignore.1 (begin (some-procedure) <unspecified>)). But your example was probably already abbreviated.
[19:13:19] <sham1> But letrec* doesn't do multiple value expressions
[19:14:36] <mnieper> No, but I think amazigh described how to convert
[19:14:47] <mnieper> (define foo (do-something))
[19:14:53] <mnieper> (some-procedure)
[19:15:06] <mnieper> as a program body into an equivalent letrec* expression.
[19:16:24] <sham1> Yeah
[19:17:08] *** Parts: catties (~catties@user/catties) ()
[19:17:15] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:19:55] <theseb> question about implementing a tiny lisp...when I append to a list....not sure if need to create a NEW copy of element to append or just add to the argument.......Reason I'm unsure is what if you append something in the ENVIRONMENT? won't the environment get scrubbed of that bit after the function invocation? See what i mean?
[19:20:11] <theseb> just add the argument*
[19:20:58] <theseb> in short...stuff in environments are ephemeral during function calls and that's a problem?
[19:22:07] <amazigh> you mixed several questions
[19:23:10] <amazigh> append without bang ! will not mutate the first argument, and in any case does need to mutate other in (append objs other)
[19:24:24] <amazigh> when you use append! yes the environment is "scrubbed" other procedure having a reference to OBJS will see something unspecified
[19:25:02] <theseb> amazigh: ug...thanks..you confirmed what i suspected..if you want to save something in the environment you need to clone it
[19:25:10] <theseb> and put it somewhere else outside the env
[19:25:12] <theseb> thanks again
[19:25:30] <amazigh> it depends of the semantic you use
[19:26:06] <amazigh> the behavior you describe is the default behavior in javascript, python etc...
[19:26:29] <mnieper> I'm not sure whether I have understood the question at all.
[19:27:53] <amazigh> theseb: what do you mean "put it somewhere outside the env"?
[19:28:37] *** Joins: klovett (~klovett@107.116.92.97)
[19:29:49] <amazigh> I think another way to ask the same question is: a) does `append` mutate its arguments, and b) how to avoid that other references to those arguments see something "unspecified" after a call to `append`
[19:31:43] <theseb> mnieper, amazigh: let me make it more concrete w/ code!... my mental model from SICP is that ( (lambda (a b) (+ a b)) 4 5 ) will create a TEMPORARY 'mini-env' to hold a=4 and b=5...then after the invocation a=4 and b=5 will get blown away along with that little 'mini-env' no?
[19:31:56] *** Quits: Kooda (~kooda@natsu.upyum.com) (Remote host closed the connection)
[19:32:00] <theseb> is that wrong?
[19:33:36] <dpk> no, that's correct
[19:34:24] <amazigh> how is that related to append?
[19:35:05] <theseb> amazigh: sec...i want to word my reply correct
[19:35:07] *** Joins: Kooda (~kooda@natsu.upyum.com)
[19:36:41] <sham1> Yeah, when executing the lambda like that, the formal parameters `a` and `b` get the values from the expressions `1` and `2` that are used as the actual parameters
[19:36:46] <theseb> amazigh: (append '(1 2) a) <==== suppose a was in a mini-env like i said above...when that mini-env gets erased the result of that append will lose its new element
[19:37:16] <amazigh> yes.
[19:37:26] <theseb> amazigh: ok...we're getting somethwere
[19:37:59] <theseb> amazigh: so to implement an append i need to make a copy of value of a 
[19:38:11] <theseb> amazigh: and put it outside the mini-env so it doesn't get erased?
[19:38:22] <amazigh> what is the host language for your lisp?
[19:38:34] <theseb> amazigh: python and C
[19:39:05] <theseb> amazigh: my python implementation makes new copies...now i'm doing C and deciding what to do here
[19:39:23] <amazigh> (append '(1 2) a) is not enough to have an env or mini-env
[19:39:24] <theseb> amazigh: i think i need to get copy crazy like in python
[19:39:35] <sham1> You could implement append in Scheme
[19:40:05] <theseb> sham1: how?
[19:40:12] <amazigh> ((lambda (a) (append '(1 2) a)) '(3 4)) will return (1 2 3 4)?
[19:40:47] <dpk> theseb: how have you implemented lists?
[19:40:52] <amazigh> sham1: I think the problem is unrelated to append in particular, the problem is how to deal with the environment that holds variables and how it relates to calling procedures
[19:41:02] <sham1> Mmm
[19:41:06] <dpk> Python list (dynamically sized array) â‰  Scheme list (singly-linked list)
[19:41:13] <theseb> dpk: in C as a linked list
[19:41:15] <dpk> the latter can share a tail so it doesn't need to copy
[19:41:18] <dpk> okay, right
[19:41:42] *** Joins: solrize (~solrize@user/solrize)
[19:41:53] <theseb> amazigh: thanks..exactly..maybe i shouldn't have brought up append at all
[19:42:00] <solrize> does scheme have something like destructuring-bind?  i think i've asked before but don't remember
[19:42:02] <amazigh> theseb: how did you represent the environment with python?
[19:42:14] <theseb> amazigh: dictionary
[19:42:16] <sham1> solrize: no, although you can define it yourself
[19:42:23] <theseb> amazigh: aka hash table
[19:42:41] <amazigh> theseb: yes, what happens when you call a procedure wrt to the environment?
[19:44:51] <amazigh> sorry, bizarre sentence, let me fix it: what happens to the environment when you call a procedure?
[19:45:19] <solrize> the parameters get bound to the proc args?
[19:45:35] <theseb> amazigh: when you call a procedure...
[19:46:03] <mnieper> solrize: Yes; let-values.
[19:46:03] <theseb> amazigh: you bolt on some temporary key value pairs that are quickly removed after the invocation
[19:46:16] <amazigh> theseb: a lambda like ((lambda (a b) (+ a b 3)) 1 2) what the environment looks like outside the lambda and inside the lambda?
[19:46:18] <amazigh> ok
[19:46:23] <amazigh> that is not how it work
[19:46:24] <theseb> amazigh: so the env is left pristine as it was before the invocation
[19:46:40] <amazigh> yes, you do not need to remove the kv pairs
[19:46:58] *** Joins: TCZ (~tcz@91.150.178.124)
[19:47:11] <theseb> amazigh: wait..but to use your example...after the invocation we do NOT want a=1 and b=2 in the env
[19:47:20] <amazigh> the environment looks like [{}, {}, {}] when you enter a procedure you push a dict with the arguments, when you exit, you pop the dict you added
[19:47:51] <theseb> yes
[19:48:22] <amazigh> so, inside the lambda it looks like [{a:1, b:2}, top-level-environment] then when you exit the lambda, remains only [top-level-environment]
[19:48:25] <theseb> amazigh: and if you want to store something "post-pop" it has to be copied somewhere
[19:48:40] <amazigh> post-pop, is returning the value
[19:49:07] <theseb> e.g. b = 2.....if you want to remember the 2 you need to copy it somewhere else
[19:49:16] <amazigh> yes, return it :)
[19:49:35] <sham1> solrize: I think this should work fine: https://gist.github.com/sham1/35aa8cb90fccd77b26db17e23df46ff3
[19:49:42] <amazigh> so you pop the env, but the lambda return (+ 1 2 3)
[19:49:49] <sham1> It worked with that trivial example, but I suggest seeing if it breaks
[19:50:02] <amazigh> the result of the above: 5.
[19:50:12] <solrize> sham1, wow thanks
[19:50:20] <theseb> amazigh: but what if you also want to remember 1 and 2 in addition to 5?
[19:51:08] <sham1> Also I somehow now know how to use syntax-rules. It wasn't as difficult as it looked
[19:51:39] <amazigh> theseb: you need to assign 1 and 2, to variables that lives outside the last mini-env that was pushed
[19:52:31] *** Joins: cromyr` (~user@1.128.105.238)
[19:52:50] <amazigh> e.g. (define my-var 42) ((lambda (a b) (set! my-var a) (+ a b 3)) 1 2) then my-var will hold 1
[19:53:25] <theseb> amazigh: perfect..thanks a million
[19:53:46] <amazigh> solrize: look into call-with-values maybe it does what you need
[19:53:50] <amazigh> or receive
[19:54:18] <sham1> You'd have to somehow turn a list into (values ...)
[19:54:18] *** Quits: cromyr (~user@1.128.107.82) (Ping timeout: 250 seconds)
[19:54:21] <amazigh> call-with-values is more verbose but builtin, where receive is https://srfi.schemers.org/srfi-8/
[19:54:29] <amazigh> ah yes.
[19:54:45] <amazigh> (apply values (my-proc))
[19:56:04] <sham1> Yeah. Shows that there are many ways of doing this stuff
[19:57:09] <amazigh> (apply values objs) is one of my favorite line of code :)
[19:57:16] <amazigh> idk why
[19:57:25] <sham1> A compiler probably doesn't like that
[19:57:30] <amazigh> ^^'
[19:57:39] *** Joins: badkins (~badkins@136.56.92.199)
[19:57:41] <mnieper> In general, Scheme does not really need destructuring lists into values because the usual strategy would be to define procedures that return multiple values where a, say, C++ function would return a std::pair or a std::tuple.
[19:58:24] <sham1> It's still useful. I tend to use it when I'm in CL land because list surgery at sufficient depth of cars and cdrs is painful
[19:58:34] <Zipheir> Pattern matching!
[19:58:41] <amazigh> ^^
[19:58:46] <mnieper> +1
[19:58:54] * Zipheir checks if SRFI 204 ever completed
[19:59:04] <mnieper> You can use syntax-case.
[19:59:22] <sham1> Yes. Although I'd argue that destructuring a value like this is a quite primitive version of pattern matching
[19:59:24] <Zipheir> Oh, it was withdrawn. :-/
[19:59:38] <amazigh> Zipheir: it is not, SRFI-200 should take back the goal of SRFI-204, with smaller set of features.
[20:01:07] <Zipheir> amazigh: Oh, maybe so, but SRFI 204 is indeed withdrawn.
[20:01:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[20:01:50] <sham1> SRFI-200 mentions the Wright-Cartwright-Shinn pattern matcher anyway, so I'm not sure if 204 would be needed if 200 is finalised
[20:02:06] <mnieper> IMO, the SRFI 204 matcher is "too untyped". What is really needed is a way to define abstract codata types that then come with their corresponding "typed" matcher.
[20:03:42] <sham1> The example of `palindrome?` in the srfi-200 text is quite nice with how recursively it's defined. It almost looks like Haskell except with parens
[20:03:53] <mnieper> See this for a specialised example for what I have in mind: https://docs.racket-lang.org/nanopass/index.html
[20:04:15] *** Joins: cromyr`` (~user@1.128.107.34)
[20:04:17] <amazigh> what is codata types?
[20:04:22] <amazigh> I am familiar with nanopass
[20:04:46] <sham1> Codata is the opposite of data
[20:04:58] <solrize> codata usually means lazily generated or externally streamed infinite lists
[20:05:18] <solrize> look at "total functional programming" by mike turner iirc
[20:05:34] <Zipheir> http://blog.sigfpe.com/2007/07/data-and-codata.html
[20:05:44] *** Quits: cromyr` (~user@1.128.105.238) (Ping timeout: 252 seconds)
[20:05:46] <solrize> aha
[20:06:52] <mnieper> You can call codata also a co-inductive data type.  It's a type that comes with destructors.
[20:07:06] <mnieper> An inductive types comes with constructors.
[20:07:23] <mnieper> The natural numbers are inductive. You have the constructors 0 and S: N->N.
[20:07:50] <solrize> was there an article about how manopass works?  what all the passes do i mean
[20:08:07] <mnieper> Infinite lists form a co-inductive data type. You can destruct them into head and tail.
[20:09:02] <mnieper> solrize: The nanopass framework is just a big macro package that helps destruct and construct grammar elements.
[20:09:16] <mnieper> It does not define any passes, but can be used inside a compiler.
[20:09:25] <mnieper> It is used inside Chez, for example.
[20:09:27] <solrize> oh i thought it had a set of compiler passes 
[20:09:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[20:09:40] <sham1> It is quite weirdly named
[20:09:48] <gwatt> https://github.com/nanopass/nanopass-framework-scheme
[20:09:56] <gwatt> It's a framework for defining passes
[20:09:59] <Zipheir> solrize: The general idea is a tool that makes it possible to write a compiler as a series of more-or-less minute transformations.
[20:10:21] <amazigh> nanopass provides strict type checking unlike using `match` with symbols and lists. 
[20:10:42] <mnieper> For concrete passes, take a look at Chez's cpnanopass.ss, for example.
[20:10:49] <solrize> yes but i thought it was sort of like gcc where it included an IR and a bunch of IR passes so a real compiler would come out after you wrote a grammar
[20:10:59] <solrize> aha looking at chez sounds good
[20:11:10] <sham1> Yeah, nanopass doesn't do IR stuff
[20:11:10] <mnieper> solrize: No, it is much more primitive.
[20:11:17] <solrize> oh well thanks
[20:11:29] *** Joins: aeth (~aeth@user/aeth)
[20:11:49] <mnieper> But we really want this in more generality in Scheme.
[20:12:13] <mnieper> The use cases of an untyped SRFI 204 are really small.
[20:12:26] <mnieper> (When such other framework is available.)
[20:13:59] <mnieper> Using SRFI 213 and syntax-case, it can be realised. I may write such a thing one day.
[20:14:00] *** Joins: seninha (~chatzilla@user/seninha)
[20:14:00] <Zipheir> mnieper: Would you compare this to the practice of writing a quick "typed" matching macro, e.g. if I have a type (Ï„ bar baz) then the matcher would be (match-Ï„ (bar-pattern baz-pattern) <body>), or something like that.
[20:14:56] <mnieper> Yes, I think of something like (define-union-type foo (tau bar baz) (sigma quux))
[20:15:06] <mnieper> Which defines foo-case
[20:15:29] <Zipheir> Right.  Nice idea.
[20:15:31] <mnieper> (foo-case ((tau x y) ...) (sigma u v))
[20:15:41] <mnieper> Syntax is probably broken, but that's the idea.
[20:15:50] <Zipheir> Very much like Racket's define-datatype.
[20:16:04] <mnieper> I have to take a look at that. Didn't know about it.
[20:16:50] <Zipheir> It's a similar idea.  It defines a (cases ...) macro with clauses for each constructor.  It's used extensively in Friedman & Wand's EOPL.
[20:17:03] <mnieper> Maybe we should stop here and just turn all to Racket. :) Everything that's inventable, is seemingly already there.
[20:17:45] <Zipheir> It can probably be defined in terms of R6RS records.
[20:20:47] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[20:21:55] <edgar-rft> anybody holding the R6RS world record?
[20:23:17] <gwatt> what does that mean?
[20:23:55] <edgar-rft> exactly *that* is the question :-)
[20:28:51] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[20:36:36] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:165e:68ad:c281:975a)
[20:45:17] <jcowan> The problems wiith 204 were procedural.  I intend to try to revive it; I  haven't announced this anywhere but here (and in my mailbox drafts)
[20:47:52] <Zipheir> Maybe a smaller spec. would have gone better.
[20:47:58] <sham1> 204 would probably be better than 200 
[21:01:14] *** Quits: nishant (~Nishant@49.37.242.151) (Quit: Leaving)
[21:15:35] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[21:40:14] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[21:40:22] *** Joins: Techcable (~Techcable@168.235.93.147)
[21:45:47] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:49:48] *** Joins: Menchers_ (Menchers@user/menchers)
[21:50:12] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[21:51:31] <amazigh> rudybot: dum de dum
[21:51:32] <rudybot> amazigh: DUM de dum
[21:51:35] <amazigh> ahah
[21:51:58] <amazigh> rudybot: I have an idea for a grand scheme plan plot machination!
[21:52:39] *** Menchers is now known as Mencherino
[21:52:50] <rudybot> amazigh: standard political machination.  nothing new.
[21:52:54] *** Menchers_ is now known as Menchers
[21:53:17] *** Quits: Mencherino (~Menchers@user/menchers) (Quit: *BLAM* Clone terminated.)
[21:53:20] <amazigh> no my style rudybot not my style
[21:59:28] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[22:02:49] *** Joins: vats (~vats@103.16.30.139)
[22:05:22] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[22:08:36] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[22:09:35] *** Joins: klovett (~klovett@107.116.92.97)
[22:27:32] *** Quits: bacteriummourner (~bacterium@37.19.221.133) (Ping timeout: 240 seconds)
[22:28:17] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 240 seconds)
[22:31:24] *** Joins: badkins (~badkins@136.56.92.199)
[22:38:32] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[22:55:24] *** Quits: vats (~vats@103.16.30.139) (Ping timeout: 240 seconds)
[22:58:03] *** Joins: badkins (~badkins@136.56.92.199)
[23:04:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[23:11:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:12:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:16:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:18:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:19:29] *** Joins: badkins (~badkins@136.56.92.199)
[23:20:26] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[23:24:02] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[23:24:49] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[23:29:17] *** Joins: amk (~amk@109.255.169.126)
[23:31:06] *** weechat1 is now known as Spawns_Carpeting
[23:35:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[23:37:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:49:11] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:58:15] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 256 seconds)
