[00:04:21] *** Quits: amb007 (~a_bakic@2.246.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:06:23] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:20:11] *** Quits: Inline (~Inline@p200300cd472f640099b8655dd3230f42.dip0.t-ipconnect.de) (Quit: Leaving)
[00:21:19] *** Joins: eddof13 (~eddof13@185.153.177.238)
[00:22:15] *** Joins: Inline (~Inline@p200300cd472f640099b8655dd3230f42.dip0.t-ipconnect.de)
[00:26:17] *** Joins: jeosol (~jeosol@user/jeosol)
[00:29:18] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[00:49:40] *** Quits: eddof13 (~eddof13@185.153.177.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:04:16] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:09:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:09:54] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:10:44] *** Joins: eddof13 (~eddof13@185.153.177.233)
[01:11:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:18:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:07:12] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[02:10:45] *** Quits: eddof13 (~eddof13@185.153.177.233) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:13:57] *** Joins: eddof13 (~eddof13@185.153.177.233)
[02:16:15] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:20:21] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[02:24:05] *** Quits: eddof13 (~eddof13@185.153.177.233) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:25:39] *** Joins: hashfunc803 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:27:10] *** Joins: eddof13 (~eddof13@185.153.177.233)
[02:27:28] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:31:06] <hashfunc803> is there a way to access the field of a currently-being-constructed object?
[02:33:16] <hashfunc803> meaning, in pseudo-code: (make-person :name "hashfunc" :nickname (subseq (<-:name) 0 4))
[02:34:00] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[02:34:12] <hashfunc803> where :NICKNAME will evaluate to "hash"
[02:35:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:37:26] *** Quits: eddof13 (~eddof13@185.153.177.233) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:37:54] <pjb> hashfunc803: depends on what kind of object, and where?
[02:38:36] <pjb> hashfunc803: in general, one uses LET.
[02:38:49] <pjb> (let ((name "hashfunc")) (make-person :name name" :nickname (subseq name 0 4)))
[02:38:57] <pjb> (let ((name "hashfunc")) (make-person :name name :nickname (subseq name 0 4)))
[02:40:35] *** Joins: Oladon (~olad@98.43.81.226)
[02:40:57] <pjb> hashfunc803: with defstruct: (defstruct (person (:constructor make-person (&key name (nickname (subseq name 0 4))))) name nickname)    (make-person :name "hashfunc") #| --> #S(person :name "hashfunc" :nickname "hash") |#
[02:41:57] <hashfunc803> pjb: ok thanks
[02:42:01] <pjb> hashfunc803: or with boa constructors:  (defstruct (person (:constructor make-person (name &aux (nickname (subseq name 0 4))))) name nickname)   (make-person "hashfunc") #| --> #S(person :name "hashfunc" :nickname "hash") |# or use &optional instead of &aux if you want to be able to pass a nickname.
[02:42:30] <pjb> hashfunc803: in the case of standard-object, you would do that in the initialize-instance or shared-instance method.
[02:44:06] <hashfunc803> clhs &aux
[02:44:06] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/03_da.htm
[02:46:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[02:54:37] *** Quits: hashfunc803 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[02:56:34] *** Joins: eddof13 (~eddof13@185.153.177.231)
[03:05:28] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[03:08:16] *** Quits: eddof13 (~eddof13@185.153.177.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:20:46] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[03:22:53] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:23:00] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[03:24:40] *** Joins: eddof13 (~eddof13@185.153.177.240)
[03:34:40] *** Quits: eddof13 (~eddof13@185.153.177.240) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:48:56] *** Joins: lisp123 (~lisp123@120.154.103.52)
[03:49:03] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[03:54:12] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[03:57:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:05:00] *** Joins: eddof13 (~eddof13@185.153.177.231)
[04:05:02] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:14:45] *** Quits: eddof13 (~eddof13@185.153.177.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[04:37:42] *** Joins: eddof13 (~eddof13@185.153.177.241)
[04:44:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:49:07] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[04:59:38] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 256 seconds)
[05:01:19] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[05:08:37] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[05:36:22] <dbotton> beach much appreciated
[05:37:35] *** Joins: zacque (~zacque@175.143.120.93)
[05:39:21] <dbotton> I agree, and will do my best refine it and thank you.
[05:43:47] *** Joins: akoana (~ah@user/akoana)
[05:50:53] <dbotton> <lisp123>  I am just writing it, that was the intro, I have notes I have taken while teaching myself and a few other resources. My plan is to put out something every week. I really lack much of the skills for this (and time) but my target audience are 3 of my sons (middle / high school) that are not as academic as my older boys (they are both very accomplished authors, books, journals etc not in English though)
[05:52:14] <dbotton> and others that tasting the joy of writing software may seek something more than HTML and JS....
[05:53:55] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[05:57:12] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[06:00:30] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 252 seconds)
[06:04:04] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[06:06:22] *** Quits: eddof13 (~eddof13@185.153.177.241) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:14:50] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[06:15:07] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[06:18:55] *** Joins: Inline__ (~Inline@p200300cd473dda00d9049d80a70df8bf.dip0.t-ipconnect.de)
[06:21:49] *** Quits: Inline (~Inline@p200300cd472f640099b8655dd3230f42.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:35:37] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[06:41:13] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[07:30:06] <beach> Good morning everyone!
[07:41:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:42:29] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:50:53] *** Joins: semz_ (~semz@user/semz)
[07:53:16] *** Quits: semz (~semz@user/semz) (Ping timeout: 245 seconds)
[07:56:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:16:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:17:24] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:24:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:47:02] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:07:18] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[09:07:55] *** Joins: epony (epony@user/epony)
[09:10:32] <dbotton> Good evening :)
[09:13:06] <dbotton> beach, I worked a bit on the start of the next part of the tutorial (on symbols), I would really like your input on it
[09:13:23] <dbotton> https://docs.google.com/document/d/1eiaFmKfTTUxjhphgcOM9-5eioenaFR91rw4ME9jCL30/edit?usp=sharing
[09:19:34] <beach> dbotton: You need to re-read your own stuff several times.  It is not "emacs", "slime" and "sbcl".  It is "Emacs", "SLIME", and "SBCL".
[09:20:07] <beach> dbotton: And you need to figure out how to either connect your phrases with conjunctions, or use full stops.
[09:20:41] <beach> But again, maybe this is your style.
[09:21:23] <beach> To me it is very distracting, so it is hard for me to read your writing for its contents.
[09:21:40] *** Quits: epony (epony@user/epony) (Remote host closed the connection)
[09:21:59] <beach> dbotton: What is your native language?
[09:23:35] <dbotton> English if my first language but I spend more time in Hebrew plus after my stroke creates some issues
[09:23:56] <beach> Ah, yes, I see.
[09:24:30] <beach> I'm off for a while.  Back in half an hour or so.
[09:25:38] <dbotton> I will for sure reread it again a few times. I just wanted to know your thoughts on presenting of symbols from start
[09:25:50] <dbotton> Mostly if can
[09:26:36] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[09:37:05] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:41:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[09:48:07] <opcode> I'm running an SBCL timer that calls into Dexador to query a REST API, and when the timer fires I get the error "WARNING: Starting a select(2) without a timeout while interrupts are disabled."  Followed by a ("bogus stack frame") and a stack trace that doesn't give me any clues.  Can anyone point me in the right direction for debugging this?
[09:51:41] *** Joins: epony (epony@user/epony)
[10:02:44] <beach> dbotton: For code and natural language alike, I find it very difficult to forget about superficial distractions, and my experience is that when I have some problem like that, I am not alone.  So the first thing to do (in my opinion of course) is to get rid of those distractions.
[10:06:55] <beach> So when you write "I am glad I have not scared you off, we are going to train hard and fast", I must pause and reread the phrases, because they are not connected right.  I don't know whether you mean "I am glad I have not scared you off.  We are going to train hard and fast" or "I am glad I have not scared you off, because we are going to train hard and fast", "I am glad I have not scared you off, but we are going to train hard and
[10:06:55] <beach> fast", "I am glad I have not scared you off, which is good because we are going to train hard and fast", or something else.
[10:08:01] <beach> dbotton: And if a text is full of that kind of stuff, I get so irritated that I keep searching for similar problems rather than reading the text for its contents.
[10:11:03] <beach> dbotton: The key binding for the Emacs command find-file is not C-x-f.
[10:11:10] <beach> dbotton: it is C-x C-f.
[10:11:31] <beach> And saving is not C-x-s, it is C-x C-s.
[10:12:37] <beach> "Unlike other languages, files have no semantic meaning" suggests that "files" is another language.
[10:13:02] <beach> I am just skimming the text and there are dozens of distractions like that.
[10:14:15] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:15:41] <beach> dbotton: Symbols are created by the reader, and a function is not a symbol.
[10:16:38] <beach> dbotton: And you can't save symbols in a file.  You can save a sequence of characters that, when read by READ, will create a symbol.
[10:17:27] <beach> dbotton: The macro DEFUN will definitely not create the symbol MAIN.
[10:18:21] <lisp123> dbotton: Might be useful to read 'A gentle introduction to Common Lisp' or whatever it is called, I think that will help in giving you the key points for an introductory text
[10:19:59] <lisp123> A Gentle Introduction to Symbol Computation* it is called
[10:20:21] <beach> minion: Please tell lisp123 about gentle.
[10:20:22] <minion> lisp123: look at gentle: "Common Lisp: A Gentle Introduction to Symbolic Computation" is a smoother introduction to lisp programming. http://www.cs.cmu.edu/~dst/LispBook/
[10:21:04] <lisp123> beach & minion: thanks!
[10:21:13] <beach> minion: Thanks!
[10:21:13] <minion> np
[10:22:36] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:cfdc:46b6:d3d6:d388) (Ping timeout: 240 seconds)
[10:23:16] <lisp123> CL:AGISC doesn't have a great description of symbols
[10:24:33] <beach> As I recall, that's the one that assumes that a symbol has slots for the function it might name, the variable it might name, the plist, etc.
[10:24:50] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:c731:e273:a007:5879)
[10:25:56] <lisp123> Yes, to some degree. CLTL2e also does the same
[10:26:15] <beach> Sad.
[10:26:35] <lisp123> I don't know how accurate this is, but this seemed a good introductory line: In LISP, a symbol is a name that represents data objects and interestingly it is also a data object.
[10:26:44] *** Quits: zacque (~zacque@175.143.120.93) (Quit: Goodbye :D)
[10:27:01] <lisp123> Source: https://www.tutorialspoint.com/lisp/lisp_symbols.htm
[10:27:09] <beach> It is accurate, but perhaps not terribly helpful to a newbie.
[10:28:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:31:26] <lisp123> It's a tricky definition to get right. I don't think I've ever read a good one
[10:31:29] <beach> lisp123: That site looks pretty bad.
[10:31:43] <beach> Look at "Basic Syntax".
[10:32:36] <beach> "An atom is a number or string of contiguous characters".  What???
[10:33:09] <lisp123> Wow! LISP programs are made up of three basic building blocks - atom, list and string.
[10:33:10] <beach> Bad spacing.
[10:33:17] <beach> Yeah.  Very bad.
[10:33:39] <White_Flame> anything that still capitalizes LISP is insta-suspect
[10:34:21] <beach> Indeed.
[10:38:24] <dbotton> Beach what creates the symbol main in this case?
[10:38:32] <beach> The reader.
[10:39:40] <dbotton> So defun instructs the reader to create it?
[10:39:51] <beach> No, it is read way before DEFUN sees it.
[10:39:59] <beach> dbotton: Sometimes you write "Lisp" and sometimes "lisp".
[10:40:13] <White_Flame> source code is already made up of lists, symbols, etc before the compiler or evaluator ever sees it
[10:41:33] <beach> dbotton: You say a alot about the REPL.  Well, that's what happens.  READ first turns all those characters into nested lists with symbols and other atoms at the leaves.
[10:43:50] <dbotton> So how would you simply express in one line the process going from source code to a symbol pointing to code object
[10:45:05] <beach> Well, to begin with symbols don't "point to" anything, and certainly not to a "code object", because there is no such thing.  So...
[10:45:42] <beach> READ turns the sequence of characters into a data structure of nested lists and atoms.
[10:46:35] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:46:50] <beach> But the rest is very complicated since DEFUN is already a macro.
[10:46:57] <beach> One can perhaps simplify it.
[10:48:14] <beach> Then EVAL looks at the CAR of the resulting list and decides that it is the operator DEFUN.  That operator turns the nested list structure into a function and associates that name with the function it creates.
[10:50:32] <dbotton> Ok. I’ll give a try in my morning to rewrite it. Thanks!
[10:51:17] <beach> Sure.  I suspect that, since you don't have a clear idea of how the REPL works, you may well introduce similar problems later on.
[10:56:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:59:42] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:09:46] *** semz_ is now known as semz
[11:11:31] <dbotton> I think the issue is how to relate the idea in a simple practical way and still be technically correct.
[11:12:41] <beach> Yes, and that is not an easy thing.
[11:32:01] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:35:57] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:36:11] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:37:23] *** Joins: admich (~user@ip-129-52.sn-213-198.clouditalia.com)
[11:37:59] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:52:43] *** Joins: s-liao78 (~s-liao@101.86.96.21)
[11:56:16] <pjb> lisp123: strings are atoms, and some lists are atoms too!
[11:56:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:56:26] <pjb> lisp123: there are only two kinds of building blocks: atoms and cons cells.
[12:00:22] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[12:01:24] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[12:02:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[12:10:41] *** Joins: epony (epony@user/epony)
[12:19:17] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[12:31:59] *** Quits: admich (~user@ip-129-52.sn-213-198.clouditalia.com) (Remote host closed the connection)
[12:48:26] <gin> Which lists are atoms? I only know NIL.
[12:52:38] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:54:13] <edgar-rft> NIL is the only list you know?
[12:57:05] <pjb> gin: indeed, NIL is the only list which is an atom.
[12:57:24] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[12:58:35] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:03:00] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[13:04:42] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[13:04:57] *** Joins: aartaka (~aartaka@217.76.12.175)
[13:06:52] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:07:14] <lisp123> pjb: Yeah
[13:07:16] <lisp123> pjb: That site had 3 (atoms, lists and strings)
[13:07:46] <lisp123> Although I start to get where they come from - what they could have said was there were four - numbers, strings, symbols and lists
[13:08:14] <lisp123> Not that that is right, but its another way to look at things
[13:08:24] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[13:10:51] <edgar-rft> in ome very old Lisps strings were lists of characters
[13:10:56] <edgar-rft> *some
[13:11:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[13:11:53] <edgar-rft> but *not* in Common Lisp (what is topic of this channel :-)
[13:13:20] *** Quits: aartaka (~aartaka@217.76.12.175) (Read error: Connection reset by peer)
[13:13:33] <lisp123> edgar-rft: as in (e d g a r - r i f t)?
[13:13:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:14:10] <lisp123> or I guess more likely (string e d g a r - r i f t)
[13:15:53] <edgar-rft> strings were lists of fixnums representing code-points, like Emacs Lisp represents charaters until today
[13:21:04] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[13:21:44] *** Quits: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:22:19] *** Joins: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de)
[13:22:58] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:23:01] *** Quits: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:23:06] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:24:58] *** Joins: shka (~herr@109.231.3.55)
[13:33:06] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[13:34:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:34:55] <jackdaniel> lisp is like love, it is /you/ who gives this word a meaning! ,)
[13:35:04] <jackdaniel> that's why we have so many 'acceptable lisps' around
[13:36:02] <edgar-rft> an how many 'inacceptable lisps' do we have? :-)
[13:36:02] <jackdaniel> common lisp on the other hand is like a dull cube - something is a cube or isn't
[13:36:32] <jackdaniel> ditto, like with love - if you  don't like it then it is not acceptable ,_)
[13:37:09] <jackdaniel> the language should be called pl - particular lisp ,p
[13:38:19] <jackdaniel> or "apl", "a particular lisp"
[13:38:39] <edgar-rft> people who don't love love will be inacceptably accepted
[13:39:05] * jackdaniel gasps (and gets back to other thigns)
[13:44:37] *** Quits: s-liao78 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:50:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:57:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[14:16:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:17:35] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:25:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[14:26:28] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:28:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:35:43] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[14:38:54] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[14:41:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:46:08] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[14:51:56] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[15:08:33] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:15:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:28:31] *** Joins: kpoeck (~kpoeck@business-176-095-230-162.static.arcor-ip.net)
[16:02:46] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[16:08:16] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 272 seconds)
[16:09:00] *** Joins: MajorBiscuit (~MajorBisc@c-001-021-050.client.tudelft.eduvpn.nl)
[16:16:35] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[16:16:56] *** Quits: kpoeck (~kpoeck@business-176-095-230-162.static.arcor-ip.net) (Quit: Client closed)
[16:18:36] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[16:18:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:18:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:23:47] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[16:27:30] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[16:30:13] *** Joins: lisp123 (~lisp123@120.154.103.52)
[16:34:36] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[16:37:24] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[16:53:58] *** Joins: yewscion (~yewscion@52.94.133.128)
[16:58:25] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[16:58:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[17:04:57] *** Joins: Brucio-61 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:05:32] *** Quits: Brucio-61 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[17:05:45] *** Joins: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:06:02] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:09:30] *** Quits: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[17:09:43] *** Joins: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:11:08] *** Quits: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[17:11:20] *** Joins: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:16:39] *** Quits: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[17:16:52] *** Joins: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:19:23] *** Quits: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Client Quit)
[17:19:36] *** Joins: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:21:33] *** Quits: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Client Quit)
[17:22:40] *** Joins: Brucio-61 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:23:03] *** Quits: Brucio-61 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Excess Flood)
[17:25:02] *** Joins: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt)
[17:34:56] *** Joins: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:35:25] *** Quits: Brucio-95 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Client Quit)
[17:37:07] *** Joins: Brucio-61 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:44:04] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:44:57] *** Joins: aartaka (~aartaka@212.34.242.242)
[17:45:03] *** Quits: aartaka (~aartaka@212.34.242.242) (Read error: Connection reset by peer)
[17:45:18] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:56:04] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Remote host closed the connection)
[17:56:13] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[17:58:49] *** Quits: Brucio-61 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[17:59:38] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:00:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:05:32] *** Joins: Brucio-61 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[18:06:59] <beach> I just uploaded an updated index of SICL papers here: http://metamodular.com/SICL and also the final version of this year's ELS paper.  It is final in that it can no longer change, so there is no point in giving me remarks that require modifications to be acted upon.
[18:07:03] *** Quits: Brucio-61 (~Brucio-95@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[18:07:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:09:58] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[18:10:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:16:53] *** Joins: Brucio-61 (~Brucio-49@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[18:19:24] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 268 seconds)
[18:19:37] *** Joins: psf (~pi@206.55.172.18)
[18:20:24] *** Quits: Brucio-61 (~Brucio-49@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[18:20:52] *** Joins: Brucio-61 (~Brucio-49@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[18:23:50] *** Quits: Brucio-61 (~Brucio-49@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[18:44:08] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[18:44:43] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:46:11] *** Joins: Oladon (~olad@98.43.81.226)
[18:54:07] <Xach> mfiano: is algae still a valid project?
[19:02:41] *** Joins: igemnace (~ian@user/igemnace)
[19:06:55] <dbotton> What is the correct way of saying this - "(setf *cool* 123) Now the variable associated with our symbol *cool* contains the number 123."
[19:07:19] <pjb> the variable *cool* is bound to the number 123.
[19:07:38] <pjb> The variable named with the symbol *cool* is bound to the number 123.
[19:08:19] <dbotton> I assume the second version the more technically correct
[19:11:12] <dbotton> thanks!
[19:13:07] <Alfr> dbotton, or rather say, changes value of *cool* to ..
[19:13:58] <Alfr> dbotton, is someone says bind in CL, I involuntarily think that such a binding is introduced, and that isn't the case for setf.
[19:14:25] <Alfr> s/is someone/if someone/
[19:16:42] <dbotton> so the symbol is bound to the variable and the variable's value is 123 is correct?
[19:19:55] <dbotton> I am trying to use the correct lingo, sorry if seems I am being difficult
[19:21:15] <Alfr> dbotton, say *cool* is intended to be a dynamicly bound, e.g. introduced via defvar, defparameter, or let with with a special declaration; then the binding is established by those forms. A subsequent setf would only modify such a binding, not introduce a one.
[19:21:16] <dbotton> If I say (defvar *cool*) and I type in the repl *cool* I get ; Evaluation aborted on #<UNBOUND-VARIABLE *COOL* {1002E3BAA3}>.
[19:21:32] <pjb> dbotton: there's a whole glossary in the CLHS to let you find the right words.
[19:22:11] <pjb> DEFVAR doesn't bind the variable, if it's not given an initial value, or if the variable is already bound.
[19:26:28] *** Joins: Everything (~Everythin@37.115.210.35)
[19:27:14] <random-nick> maybe "the value of the binding of the symbol *cool* is changed to 123"
[19:27:27] <random-nick> or something like that
[19:33:13] <Xach> mfiano: actually, i can't update any of your libraries due to an ssl name mismatch
[19:37:15] *** Joins: Bike (~Glossina@71.69.170.70)
[19:37:57] <beach> dbotton: No, the symbol is not bound to the variable.
[19:38:48] <beach> dbotton: The symbol is just the name of the variable.  Symbols are not bound to anything.  They are just objects that serve as the names of other things (among other things).
[19:55:58] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[20:00:15] *** Joins: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de)
[20:17:26] *** Quits: citizenandrew (~citizenan@216.13.217.230) (Quit: Client closed)
[20:25:15] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:30:19] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[20:41:41] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[20:42:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:44:36] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[20:47:07] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[20:48:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:05:46] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[21:07:11] *** Quits: MajorBiscuit (~MajorBisc@c-001-021-050.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:14:38] *** Joins: nature (~nature@45.32.235.173)
[21:14:58] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[21:23:02] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 272 seconds)
[21:25:57] *** Parts: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[21:30:29] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[21:30:29] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[21:30:29] *** Joins: tane (~tane@user/tane)
[21:36:44] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[21:42:48] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:47:09] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Read error: Connection reset by peer)
[21:47:23] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:47:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:05:57] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[22:10:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:11:04] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:12:55] *** Joins: dirtcastle (~dirtcastl@2409:4072:188:ed97:b47d:62ff:feb9:cec0)
[22:18:40] *** Inline__ is now known as Inline
[22:21:29] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[22:23:26] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[22:26:05] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[22:28:33] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:29:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:29:36] <_73> The pattern (SETF (SYMBOL-FUNCTION 'FOO) ...) makes a lot of sense when you want to define a lexical closure. Prior to discovering this pattern I would have a function INIT-FOO-CLOSURE that I would use to define a dynamic variable like (DEFPARAMETER *FOO* (INIT-FOO-CLOSURE)). This way the code is much clearer and I don't have to use FUNCALL to use the closure.
[22:29:53] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a120:b8c7:d412:19c8)
[22:30:01] *** Quits: dirtcastle (~dirtcastl@2409:4072:188:ed97:b47d:62ff:feb9:cec0) (Ping timeout: 250 seconds)
[22:34:02] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 240 seconds)
[22:34:59] *** Joins: vats (~vats@103.216.143.6)
[22:35:30] *** Joins: dirtcastle (~dirtcastl@2409:4072:188:ed97:b82f:27ff:fee1:e00f)
[22:37:10] *** Joins: lispy (~lispy@user/lispy)
[22:39:37] *** Quits: dirtcastle (~dirtcastl@2409:4072:188:ed97:b82f:27ff:fee1:e00f) (Ping timeout: 240 seconds)
[22:39:47] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[22:40:26] *** Joins: dirtcastle (~dirtcastl@2409:4072:188:ed97:685e:27ff:fe58:8394)
[22:40:35] *** Quits: dirtcastle (~dirtcastl@2409:4072:188:ed97:685e:27ff:fe58:8394) (Client Quit)
[22:45:32] *** Quits: vats (~vats@103.216.143.6) (Ping timeout: 256 seconds)
[22:45:40] *** Joins: Oladon (~olad@98.43.81.226)
[22:48:39] *** Joins: lisp123 (~lisp123@120.154.103.52)
[22:53:28] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[22:54:47] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[22:55:57] <gin> Why does PROGN exist? Isn't LAMBDA sufficient where we normally use PROGN?
[22:56:20] *** Joins: pjb (~pjb@user/pjb)
[22:57:49] <ck_> well, many things are superfluous if you have lambda already, but would you like to program in such a restriction?
[22:59:25] <dbotton> lambda would be fairly restrictive without the implicit progn
[23:01:59] <dbotton> A better question is what something adds to a language, not why it exists.
[23:02:42] <dbotton> Sometimes it is convenience, sometimes optimizations, etc.
[23:03:18] <gjvc> anyone here used ecl and got any thoughts / verdict ?
[23:04:47] <dbotton> I love it.
[23:06:09] <dbotton> So I think on opinion alone you are good to go. Create something amazing :)
[23:06:50] <jackdaniel> on one hand it produces slower machine code for portable cl than sbcl and ccl, on the other hand it has much smaller memory footprint and is more portable
[23:07:16] <jackdaniel> it is possible to link other applications with libecl.so and incorporate common lisp in your average C runtime
[23:07:41] <jackdaniel> also inlining C code in CL functions comes handy at times (both for optimization and for integration purposes)
[23:07:44] <NotThatRPG> givc: In my experience, it's prohibitively slow.
[23:08:15] <NotThatRPG> Also for development I hate the compile-to-C model for interactive development.
[23:08:28] <jackdaniel> NotThatRPG: under some particular workload or is this a general remark?
[23:10:07] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[23:10:09] *** Quits: knusbaum (~knusbaum@23.249.37.254) (Ping timeout: 256 seconds)
[23:10:32] <_73> How would you reccomend structuring a lambda-list/parsing the arguments for a macro that allows an optional docstring as an argument in the middle of the argument list? For example (DEFMACRO MY/DEFUN (NAME DOC &body BODY) `(DEFUN ,NAME ,DOC ,@BODY)) does not work if you omit the DOC argument.
[23:12:00] <jackdaniel> gjvc: if you decide to use ecl and hit some problems that are specific to this implementation you may ask on the channel #ecl
[23:12:54] <NotThatRPG> Most things I do involve pretty substantial computation, often needing tail recursion optimization and I like incremental compilation, neither
[23:13:59] <Alfr> _73, you may want to use alexandria:parse-body .
[23:14:06] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[23:15:02] <_73> Alfr: ok Ill look at this. I am using Alexandria in my project already as well.
[23:17:50] <gjvc> dbotton excellent!
[23:17:54] <gjvc> NotThatRPG damn, sucks
[23:17:58] <jackdaniel> NotThatRPG: afaik ecl slow points are gf dispatch (so clos in general), lack of type inference (there is type propagation though) and slow compilation
[23:18:45] <jackdaniel> gf dispatch is being addressed. that said when there are proper tail calls ecl makes it possible for the c compiler to optimize that
[23:19:07] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:19:11] <jackdaniel> (and number crunching for properly declared types and speed declarations is quite fast)
[23:19:18] <jackdaniel> I'm sorry that you had such poor experience with it
[23:19:36] <jackdaniel> s/sorry/sorry to hear/
[23:23:00] <NotThatRPG> I should try again. For the SHOP3 project, we gave up testing because it was prohibitively slow.
[23:24:06] *** Joins: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d)
[23:24:25] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:25:16] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:27:11] *** Lord_of_Life_ is now known as Lord_of_Life
[23:37:21] *** Joins: sbodin (~sbodin@185.12.224.124)
[23:43:53] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:44:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:50:36] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 272 seconds)
[23:56:07] *** Joins: Maxc4m (~Maxc4m@5.167.13.137)
