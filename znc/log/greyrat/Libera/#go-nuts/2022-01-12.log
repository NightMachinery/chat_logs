[00:00:30] <b0nn> There are no shortcuts (despite me trying every single one I can think of)
[00:01:36] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:04:56] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[00:05:30] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:245f:c7f1:323e:a236)
[00:05:54] <dan01> What does []byte("Hello World!") do?
[00:06:21] <davidkrauser> dan01: makes an array of bytes containing "Hello World!"
[00:06:24] <noord> dan01: byte array representation of hello world
[00:06:26] <dan01> Is that the way to do casting in go? Does it work universally, where ti makes sense?
[00:06:48] <davidkrauser> dan01: in many cases, yes. For example int(123.10)
[00:06:57] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 240 seconds)
[00:07:06] <dan01> Ok, so how do you know when it works and when not?
[00:07:20] <dan01> Also can I do something like that for my type? :D
[00:08:04] <davidkrauser> dan01: this might be useful: https://yourbasic.org/golang/type-assertion-switch/
[00:09:11] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[00:10:24] <dan01> thanks!
[00:10:28] *** imm__ is now known as imm_
[00:11:25] <noord> b0nn: isn't go straight forward verbose language?
[00:11:26] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:11:49] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[00:14:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[00:15:43] *** Joins: zZen33 (~cpk33@2605:a601:ab34:3f00:4006:3784:4be2:3e2f)
[00:19:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[00:22:10] *** Joins: fikran (~fikran@user/fikran)
[00:25:23] *** Quits: klaas (~klaas@simply.kla.as) (Quit: ZNC 1.8.2 - https://znc.in)
[00:26:48] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:26:54] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Quit: KonaArctic)
[00:30:33] *** Joins: klaas (~klaas@simply.kla.as)
[00:31:28] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:31:49] *** Quits: dr0n (~nabromov@92.40.255.113.threembb.co.uk) (Ping timeout: 240 seconds)
[00:32:02] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:2077:7436:c790:796d) (Read error: Connection reset by peer)
[00:33:29] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[00:33:30] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Quit: WeeChat 3.4)
[00:34:11] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[00:38:15] <b0nn> noord: Why are you always picking fights
[00:41:22] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[00:41:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:42:24] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[00:46:26] <b0nn> FTR I recall a blog post (that I cannot find) where one of the reasons Go was chosen as a name was that, like Go (the game) its rules were relatively simple, but the implementations could be very complex
[00:47:01] <b0nn> WRT picking a fight: YOu are asking a subjective question with only one outcome : if the answer doesn't meet with yours, and argument will ensue
[00:48:30] *** Quits: tomeaton17 (~tomeaton1@2a02:c7f:16cc:cf00:88cd:8104:b736:335c) (Ping timeout: 256 seconds)
[00:48:36] <b0nn> Finally, Go (the game) has (I think) several orders of magnitude more possible moves at every point, than Chess does (that's why the AI for playing it took so long to build), in fact, Go (the game) has the chance of repeating states because pieces captured can be removed
[00:49:56] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[00:51:09] <b0nn> IIRC the Go (game) AI works by first trimming down the number of exit nodes for a given state by looking at all the human games that have entered that state, and looking for the set of exits that have led to the optimal outcomes
[00:51:28] <b0nn> s/exit nodes/exit paths
[00:51:45] <b0nn> But the rules for the game are /very/ simple
[00:59:52] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:05:16] <dan01> When you embed a type
[01:05:35] <dan01> What happens if you don't initialize the embedded type?
[01:05:55] <fizzie> The same as would happen to any named field of that type.
[01:05:57] *** Quits: anandn (~anandn@2601:600:a27f:d92d:4c9a:7729:efdf:f7c5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:05:57] <b0nn> it depends :)
[01:06:19] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:8d5b:699f:1bf:4a88)
[01:06:27] <davidkrauser> you get the zero value of that type. Go has rules for what the zero value is for all of the things
[01:06:57] <davidkrauser> https://yourbasic.org/golang/default-zero-value/
[01:07:35] <dan01> Wow ok
[01:08:00] <b0nn> https://go.dev/play/p/yF3BY91aP8p
[01:08:38] <dan01> So not sure here: https://go.dev/play/p/R2NmC3SSCzN
[01:08:56] <dan01> When line 21 is called, is the j receiver on line 11 nil or what?
[01:08:59] <dan01> Looks like not
[01:09:10] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[01:10:16] <b0nn> This is why I said it depends - the embedded type has a field that requires explicit instantiation https://go.dev/play/p/eG5Hx5Kmuwd
[01:11:23] <dan01> Ah I see
[01:11:47] <davidkrauser> dan01: woker is a struct, so all of it's fields get their zero value. One of those fields is Job, which is also a struct, so it gets it's zero values
[01:11:49] <dan01> But still the ToEmbed itself is not nil, because it's a struct
[01:11:53] <davidkrauser> that's why nothing is nil in your case
[01:11:58] <dan01> Yes, I see
[01:12:06] <dan01> Had it been a pointer, it would have been nil
[01:12:07] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:2d06:fff0:d105:7c1) (Ping timeout: 268 seconds)
[01:12:07] <davidkrauser> change one of those to a *Job and you'll get a nil as the zero value
[01:12:11] <davidkrauser> exactly
[01:12:31] <dan01> Thanks a lot guys, you rock!
[01:16:38] *** Quits: zZen33 (~cpk33@2605:a601:ab34:3f00:4006:3784:4be2:3e2f) (Quit: Client closed)
[01:17:43] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:245f:c7f1:323e:a236) (Remote host closed the connection)
[01:18:12] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:245f:c7f1:323e:a236)
[01:19:34] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:20:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:21:02] *** Joins: mickey8 (~user@user/mickey)
[01:21:05] *** Quits: thorsager (~mit@green.krakow.dk) (Quit: Lost terminal)
[01:21:09] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:21:20] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:22:28] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[01:26:44] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:245f:c7f1:323e:a236) (Remote host closed the connection)
[01:27:08] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:245f:c7f1:323e:a236)
[01:29:15] *** Joins: x28girl (~x28girl@user/x28girl)
[01:29:56] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[01:31:17] *** Joins: thorsager (~mit@green.krakow.dk)
[01:31:21] *** Joins: rcernin (~rcernin@101.189.141.138)
[01:31:26] *** Joins: x28_girl (~x28girl@user/x28girl)
[01:33:20] *** Joins: x28__girl (~x28girl@user/x28girl)
[01:34:35] *** Quits: Batzy (~quassel@user/batzy) (Read error: Connection reset by peer)
[01:35:01] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 240 seconds)
[01:35:06] *** Quits: x28girl (~x28girl@user/x28girl) (Ping timeout: 256 seconds)
[01:35:25] *** Quits: alwyn (~alwyn@user/alwyn) (Ping timeout: 240 seconds)
[01:39:17] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:245f:c7f1:323e:a236) (Ping timeout: 240 seconds)
[01:39:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Read error: Connection reset by peer)
[01:42:16] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[01:42:18] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:45:55] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[01:47:31] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[01:47:57] *** Joins: x28__girl (~x28girl@user/x28girl)
[01:48:18] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[01:48:58] *** Quits: x28__girl (~x28girl@user/x28girl) (Max SendQ exceeded)
[01:49:27] *** Joins: x28__girl (~x28girl@user/x28girl)
[01:50:45] *** Quits: x28__girl (~x28girl@user/x28girl) (Max SendQ exceeded)
[01:51:55] *** Joins: x28__girl (~x28girl@user/x28girl)
[01:53:10] *** Parts: cobber (~protorom@213.240.182.77) ()
[01:53:27] *** Joins: cobber (~protorom@213.240.182.77)
[01:56:37] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[01:57:10] <jemaclus> I'm on a Mac and I'm trying to deploy an app with github.com/mattn/go-sqlite3 as the sqlite3 driver, but when I build with `CGO_ENABLED=1 go build main.go` I get some errors. My Google-fu has turned up nothing but a bunch of spam sites. Can someone point me in the right direction to figure out how to compile this? Feels weird that this seems so hard, given how popular this driver is...
[01:57:27] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[02:00:42] <fogobogo> "errors"?
[02:01:53] *** Quits: fogobogo (~fogobogo@user/fogobogo) (Quit: reboot)
[02:03:15] <b0nn> also "deploy"?
[02:03:28] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[02:03:34] *** Joins: fogobogo (~fogobogo@user/fogobogo)
[02:03:36] <b0nn> I mean, is it to a mac, to a x86 machine, inside a docker container...
[02:04:54] <fizzie> As an aside, `go build file.go` is always a little suspicious. It'll probably _work_ for a one-file package, but naming individual files with `go build` tends to be a bit iffy.
[02:05:18] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Client Quit)
[02:05:42] <b0nn> unless you have files in the directory that you do not want to be built
[02:05:46] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[02:05:57] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:06:15] <b0nn> although build constraints are a better option (I often have files during development/refactor that I don't want to build)
[02:06:52] <fogobogo> strictly speaking just wildcard whatever and building it could be a security concern
[02:07:51] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Client Quit)
[02:08:06] *** Joins: megamus_prime (~megamus_p@46.101.47.16)
[02:08:39] *** Joins: anandn (~anandn@98.232.3.180)
[02:14:07] *** Joins: walterwhip (~www@user/walterwhip)
[02:14:13] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[02:17:26] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[02:18:13] <cobber> fogabogo: within a go module? you're building the whole module - how could a security risk get in which isn't in the module already?
[02:24:01] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:27:33] <b0nn> uhhh how do modules protect you from .go files in your directory
[02:28:40] <b0nn> like, I'm not 100% across modules, but, I thought that they grabbed the most recent non-breaking version of a given project
[02:29:15] <b0nn> and go.sum merely tells you what the version of dependencies was at the time that go.sum was last committed
[02:29:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:30:27] <fizzie> MVS selects the _least_ recent version that satisfies all the requirements of all the dependencies. And you don't get any version bumps without explicitly asking for them.
[02:31:17] <cobber> sure, but how do you tell go build NOT to get the latest and greatest? To build a project, how does building specific go files help - you need to build everything, so you need wildcards - unless its a really simple project
[02:31:31] *** Joins: fikran (~fikran@user/fikran)
[02:32:45] <fizzie> I like that about Go modules. Means you could hypothetically be just as diligent about vetting your dependencies as you can by vendoring them. With a given go.mod file, the versions you get for all dependencies are fixed for all time, and go.sum takes care of verifying the contents of those versions don't change either.
[02:33:05] *** Quits: anandn (~anandn@98.232.3.180) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:33:14] <fizzie> But I don't think building specific .go files is all that related to that.
[02:33:40] <fizzie> With the built-in build system, for better or for worse, packages are directories. Don't see any real security advantage in specifying the files of _one_ package (the single one you're building) explicitly, when everything it imports is still going to use the default "all non-test .go files in the directory, modulo build constraints" rules.
[02:34:21] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[02:38:06] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:41:04] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:45:15] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[02:51:49] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[02:51:53] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[02:53:43] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:55:26] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:55:57] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[02:56:54] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:58:03] *** Quits: gbmor (gbmor@gbmor.org) (Quit: reboop the box)
[02:58:44] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[02:59:22] *** Joins: gbmor (gbmor@gbmor.org)
[02:59:26] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:01:32] *** Joins: anandn (~anandn@98.232.3.180)
[03:05:16] <b0nn> 10:00 < fizzie> MVS selects the _least_ recent version   <<--- uhhh, most recent is the highest non-breaking version
[03:06:05] <b0nn> least recent is the oldest - and modules is optimised to get the most recent because that theoretically includes bug fixes that have been pushed
[03:08:29] <fizzie> MVS doesn't take the most recent version _available_. It takes the highest version required by any module in the transitive dependency tree.
[03:08:38] <b0nn> ...
[03:08:48] <b0nn> you missed something
[03:08:54] <fizzie> That's what I meant by "least recent version that satisfies all the requirements".
[03:09:12] <b0nn> " most recent non-breaking version"
[03:09:49] <fizzie> Well, what do you mean by "non-breaking"? Normally that would mean "highest of the same major version", which MVS does _not_ select.
[03:10:18] <b0nn> Right, so your argument is that MVS will prefer 1.7.0 over 1.9.0?
[03:10:52] <fizzie> It will prefer 1.7.0 if that's the highest version required by anything in the dependency tree.
[03:11:10] <fizzie> It will prefer 1.7.0 over 1.7.1 as well, if 1.7.0 is the highest version required.
[03:11:23] <b0nn> WOW
[03:11:36] <b0nn> The dependency tree is preferring broken versions?
[03:12:28] <fizzie> The whole point of MVS is that it doesn't spuriously upgrade.
[03:12:40] <fizzie> https://research.swtch.com/vgo-mvs "Minimal version selection provides high-fidelity builds by using the oldest version available that meets the requirements. The release of a new version has no effect on the build. In contrast, most other systems, including Cargo and Dep, use the newest version available that meets requirements listed in a “manifest file.” The release of a new version changes
[03:12:42] <fizzie> their build decisions."
[03:12:42] <b0nn> So, like I said, it's preferring broken version?
[03:13:22] <fizzie> Yes. It relies on people to make explicit decisions on when to upgrade versions.
[03:13:35] *** Joins: roshanavand (~roshanava@185.213.155.232)
[03:13:36] <foobaz> is it broken, if the author explicitly vetted it?
[03:13:41] *** Quits: anandn (~anandn@98.232.3.180) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:13:59] <b0nn> Assuming you understand that the patch version means a fix
[03:14:09] <bookworm> can*
[03:14:09] <foobaz> it's supposed to, but consider the recent npm colors fiasco
[03:14:16] <bookworm> it can also wreck your CI
[03:14:28] <bookworm> say like a recent npm package ;P
[03:14:53] <b0nn> I avoid npm like the plague, so have no visibility on that
[03:15:03] <foobaz> a wise decision :)
[03:15:09] <bookworm> it's fun, you should read up on it
[03:15:14] <bookworm> there's also
[03:15:36] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[03:15:44] <bookworm> https://research.swtch.com/npm-colors
[03:16:00] <bookworm> if you'd rather get a go view on the matter
[03:16:27] <fizzie> If a module version is found to be severely broken post-release, there _is_ a retract mechanism. but it still won't cause automatic upgrades, it will just cause notifications.
[03:16:33] *** Quits: SuperLag (~akulbe@user/superlag) (Remote host closed the connection)
[03:18:31] <foobaz> semantic versioning is great but it has never been as widely adhered-to as we would like
[03:18:37] *** Joins: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net)
[03:19:03] <foobaz> pretending like humanity will do better in the future, and setting traps that trigger when we don't, seems dangerous
[03:19:48] <foobaz> consider how long our industry persisted in believing that the solution to security holes was to write better C
[03:19:59] <b0nn> I had thought that the choice that module designers had was : Pin to the version specified, or get the most recent version, which includes bug fixes
[03:20:02] <bookworm> they still do
[03:20:02] <foobaz> turns out, no one writes sufficiently good C
[03:20:49] <b0nn> I mean, what's been said here seems to be the worst of both worlds
[03:21:14] <bookworm> how come you never touched versions?
[03:21:19] <b0nn> "At build time getthe minimum version, who cares if there have been bug fixes"
[03:21:37] <bookworm> I mean you ought to have noticed while using modules how it works
[03:21:49] <b0nn> me?
[03:21:50] <foobaz> "at build time get the known-good version, who cares if there have been untested versions"
[03:22:22] <bookworm> it simply puts the choice in your hand as a dev, want the most recent version great but then say so
[03:22:31] <bookworm> explicitly
[03:23:04] <b0nn> This is problematic
[03:23:12] <fizzie> Yeah, I do like the fact that the selected versions won't depend on the passage of time.
[03:23:20] <b0nn> The dev has to know a new version exists
[03:23:29] <bookworm> that's how it always worked, they considering this the optimal way it should work
[03:23:45] <bookworm> yeah? That's your job if you pull in deps
[03:24:06] <bookworm> you also need to make sure to track advisories and what have you
[03:24:15] <bookworm> so nothing really new is there?
[03:24:20] <b0nn> ROFL - I am not walking through every dep of every dep of every dep checking versions
[03:24:38] <bookworm> sure, but that's a problem
[03:24:43] <b0nn> That's what computers are for
[03:24:52] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[03:24:53] <foobaz> i just run "go get -u ./..." every week
[03:24:53] <bookworm> that's what fucked a whole bunch of people the last few days
[03:25:13] <b0nn> right... and everyone that hasn't been upgrading log4j?
[03:25:29] <b0nn> I'm sure that building with an older version might be.. undesirable
[03:25:29] <bookworm> different problem, not the same solution
[03:25:35] <evilop> the nodejs debacle was also fun
[03:25:41] <bookworm> tradeoffs as usual
[03:25:44] <b0nn> same problem - devs have to know that a new version is out
[03:25:52] <evilop> er.. npn
[03:25:57] <bookworm> cves, news...
[03:26:18] <bookworm> you gotta have to live under a rock to miss that
[03:26:24] <b0nn> wait, you check for cves every time you build now?
[03:26:48] <b0nn> you think that, because I point to a well known issue I live under a rock???
[03:26:52] <bookworm> I'm subscribed to oss-sec
[03:27:09] <evilop> https://blog.sonatype.com/npm-libraries-colors-and-faker-sabotaged-in-protest-by-their-maintainer-what-to-do-now
[03:27:21] <bookworm> depends on how large it is but  yes for stuff I use I track cves, say nodejs just today
[03:27:27] *** Quits: wnd (wnd@extirc.katei.fi) (Quit: Disconnecting from stoned server.)
[03:27:39] <b0nn> evilop: those things are written /after/ people have dopwnloaded (and broken)
[03:27:44] <foobaz> one good strategy is to simply avoid dependencies
[03:27:45] *** Joins: wnd (wnd@extirc.katei.fi)
[03:28:10] <bookworm> and to vet amy dep you pull in by at least running your CI tests
[03:28:30] <bookworm> I mean there should have been no breakage other than a test failing in dev
[03:28:33] <foobaz> not saying to forsake them altogether, but stick to the stdlib as much as you can, people get a little trigger happy on dependencies when they don't understand the ongoing maintenance cost
[03:28:35] <b0nn> which requires your CI to be running tests for the new issues...
[03:28:39] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[03:28:56] <b0nn> and that's impossible, unless you know in advance that the issue exists
[03:29:03] <fizzie> If you want _your_ build to use the latest versions of everything, you can of course still do that. `go get -u ./...` was mentioned already; that would update all dependencies required by any package of the thing you're building.
[03:29:05] <foobaz> or, in a larger organization, maybe the ongoing maintenance is someone else's problem, and they're not incentivized to care about it
[03:29:35] <b0nn> This is the dep management nightmare
[03:29:48] <b0nn> why maven is such a pig
[03:29:49] <fizzie> (And then you'd hopefully also verify what actually changed.)
[03:30:01] <evilop> and if your multi-million busyness depends on some free software project, maybe throw some money/resources their way
[03:30:05] <b0nn> and the other  java one that slips my mind right now... gradle
[03:30:14] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:30:45] <b0nn> evilop: nobody ever thinks until a wheel squeaks
[03:31:01] <b0nn> I mean heartbleed should have warned those big orgs
[03:31:05] <foobaz> i do, i've donated company money to debian and other open source projects
[03:31:29] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[03:33:06] <b0nn> To be fair, Google, Amazon, Microsoft *do* put a lot of time, effort, and $ into FOSS, it's just that there is a lot of projects that are missed
[03:33:22] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Client Quit)
[03:34:57] *** Joins: Batzy (~quassel@user/batzy)
[03:35:43] *** Joins: leonarth (~leonarth@82.76.59.132)
[03:37:40] *** Quits: leonarth (~leonarth@82.76.59.132) (Changing host)
[03:37:40] *** Joins: leonarth (~leonarth@user/leonarth)
[03:38:10] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[03:38:49] <cobber> I just created a global var map[...]int with values 1...n as a symbol-lookup table - iota is only for constants and i++ is a statement, any other ideas? (not critical - n < 30)
[03:39:41] <fizzie> An `init` function right after the variable declaration initializing it?
[03:40:52] <fizzie> You could then use a `for i, v := range []T{a, b, c, d} { thatMap[v] = i+1 }` inside.
[03:40:55] <cobber> that's basically what I've done, but var lookup = map[string]int { "a": 1, "b": 2, ...} can't be done with i++
[03:40:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[03:41:02] <cobber> ah
[03:41:37] <cobber> so set up the keys in an ordered slice, then range...
[03:41:48] <cobber> iota would have been nice ;-)
[03:41:49] <cobber> thanks
[03:42:07] <fizzie> https://go.dev/play/p/kn-8Dj9gPJF for reference. But yeah, it's not as... declarative.
[03:42:24] <fizzie> Alternatively, just put the numbers in. :)
[03:42:59] <cobber> yup - thanks
[03:43:46] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:44:06] <fizzie> Actually in retrospect, since it's just the one variable to initialize, perhaps it's better to call a function in its initializer rather than use an init func: https://go.dev/play/p/FpNzC53tZev
[03:45:12] <cobber> even better!
[03:46:53] <cobber> I would tweak it a bit for 30 values, e.g.: https://go.dev/play/p/OKZLwakow7n (easier for my eyes to find the missing/wrong key :-))
[03:46:58] <cobber> nice solution - thanks
[03:47:24] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:48:56] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:49:15] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[03:49:56] *** Joins: Batzy (~quassel@user/batzy)
[04:01:01] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[04:01:54] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[04:09:37] <greatgatsby> Hi.  I'm working without an internet connection.  To vendor, can I simply extract source-code for packages I want to use in the vendor/github.com/foo/bar directory of my project?  I feel I should also update go.mod somehow, but in an offline way?
[04:14:01] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[04:14:25] *** Joins: x28_girl (~x28girl@user/x28girl)
[04:14:35] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:16:44] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[04:17:37] *** Joins: adip (~adip@user-188-33-250-10.play-internet.pl)
[04:19:36] *** Joins: roshanavand_ (~roshanava@p200300d47f01a300b4bb863d00c8cc82.dip0.t-ipconnect.de)
[04:21:40] <b0nn> greatgatsby: Yeah, that's all that's required
[04:21:49] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 240 seconds)
[04:21:55] <b0nn> you can run `go mod vendor` if you want modules to do it for you
[04:22:16] *** Parts: l (launchd@bitbot/launchd) ()
[04:23:32] <greatgatsby> I'm trying to use `go mod vendor` with GOPROXY set to a local directory.  Does that mean I have to setup the /@v/list file for every package?
[04:24:36] <greatgatsby> it might be best to explain what I'm trying to accomplish.  I have an ubuntu machine without internet.  I can copy zip files of the packages I'd like to use in my project to this machine.  What's the best thing to do next, just extract them in vendor, or setup a filesystem proxy?
[04:25:35] <greatgatsby> the only thing I don't like about simply extracting them into vendor is all the package info that would normally be described in go.mod is not there
[04:26:03] *** Joins: itsalexjones_ (~itsalexjo@82.4.99.241)
[04:26:19] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Quit: Leaving)
[04:33:44] <b0nn> All I know is that I have vendor/ in my project, and under it is github/user/proj for a number of users and projects
[04:34:10] <b0nn> including the .git/config file for each project (which holds the tags and commist hashes)
[04:35:00] <b0nn> hrm, belay the .git dir, it's not there
[04:37:26] *** Quits: effprime (~effprime@user/effprime) (Ping timeout: 260 seconds)
[04:37:40] *** Joins: effprime_ (~effprime@user/effprime)
[04:37:55] <greatgatsby> perfect, thanks
[04:38:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[04:40:52] *** Joins: fikran (~fikran@user/fikran)
[04:43:48] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[04:45:53] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:51:41] *** Joins: walterwhip (~www@user/walterwhip)
[04:54:56] *** Joins: leonarth_ (~leonarth@user/leonarth)
[04:56:53] *** Quits: itsalexjones_ (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:58:13] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 240 seconds)
[04:59:31] *** Joins: rds (~rd@user/rds)
[05:01:03] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:02:13] <cobber> does anyone here use a naming convention to help make interfaces easier to see? filling a []Thing with &ThingA{}, &ThingB{} etc. feels wrong, but is required if the various things have pointer functions
[05:02:19] <cobber> eg.: https://go.dev/play/p/SgdgZrJdOGj
[05:03:32] <cobber> PS: I know about the ...er convention... doesn't always fit though
[05:06:11] <foobaz> your code says "slice is []<non-pointer>" but this is not true
[05:06:17] <foobaz> the interface values wrap a pointer
[05:06:29] <foobaz> so it's a pointer with some metadata about the pointer type
[05:06:50] <foobaz> a "fat pointer" as they are sometimes called
[05:07:05] <cobber> that's why it feels wrong - the []Animal declaration doesn't *look* like it should take pointers... you have to go look for the definition of Animal to find out
[05:08:04] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[05:08:07] <foobaz> your issue is with style, so there is no objectively correct solution to your issue
[05:08:13] <foobaz> but there other styles you could adopt
[05:08:33] <foobaz> for example, you don't need to use a pointer receiver, you could do (h Hamster) instead
[05:08:36] <foobaz> then you don't need the &
[05:09:11] <foobaz> that changes how the code works, so it has the potential to change behavior, but in the specific example of the code you pasted, it would behave the same
[05:09:15] <fizzie> It doesn't feel wrong to me. Or at least any more wrong with passing `&foo` (where `var foo bytes.Buffer`) to a function taking an `io.Reader`. That too arguably "doesn't look like it should take pointers", yet you often call it with one, when it's the pointer type that implements the interface.
[05:09:46] <fizzie> (Of course that one's got the `...er` tell for an interface, fair enough.)
[05:10:45] <cobber> ok
[05:10:46] <fizzie> I guess you could always call it `type IAnimal interface {...}` to make all .NET developers feel right at home. </kidding>
[05:11:33] <cobber> :-) I was thinking of something like ...er but for generic things... like animals
[05:12:27] *** leonarth_ is now known as leonarth
[05:12:33] <foobaz> if you simply want to avoid the &, you could use new() instead: https://go.dev/play/p/KEMUrTvjq9L
[05:12:38] <cobber> in my case at the moment I've got a stack of parsing tokens... so they all share the same interface but they're very different... animals
[05:12:49] <foobaz> but i'm with fizzie, i think the original with the & is the best way to do it
[05:13:12] <cobber> nope, got no problems with &... more the llack of * in the slice definition
[05:13:27] <foobaz> if you're uncomfortable with it, maybe it's because you lack experience with go
[05:13:48] <cobber> true... it's not my first language :-)
[05:15:58] <cobber> thanks again for your thoughts f & f
[05:18:47] *** Quits: roshanavand_ (~roshanava@p200300d47f01a300b4bb863d00c8cc82.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:32:23] *** Quits: adip (~adip@user-188-33-250-10.play-internet.pl) (Ping timeout: 256 seconds)
[05:33:21] <b0nn> FTR there was a Foo1, Foo2,... Foon thing pasted to /r/Golang a day or two ago - have a look at it (ignore the +ve or -ve reddit comments) and imagine using it
[05:34:27] <b0nn> https://www.reddit.com/r/golang/comments/s0snbz/gotuple_tuples_for_go_118/
[05:40:37] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:42:53] <jemaclus> fogobogo b0nn: sorry, I asked my question and then disappeared. My bad. I'm building the binary on my Mac, but I'm deploying it (via scp) to my remote Ubuntu server. The error message is "error: implicit declaration of function 'setresgid' is invalid in C99".
[05:43:05] *** Joins: califax- (~califax@user/califx)
[05:43:48] <jemaclus> command to build is: GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -o bin/myapp main.go
[05:43:55] <jemaclus> but it looks like the CGO_ENABLED=1 is causing problems
[05:45:03] <jemaclus> the deploy part doesn't matter I guess. I just can't seem to build it with CGO_ENABLED=1
[05:46:37] <b0nn> I'm not that across cgo, but it counds like a cross compile issue, and I don't know if you can /do/ that with cgo
[05:46:51] <jemaclus> hmm
[05:47:00] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:47:01] *** califax- is now known as califax
[05:47:08] <jemaclus> then how the heck do people use this package? https://github.com/mattn/go-sqlite3
[05:47:16] <jemaclus> I guess they build it on an actual Linux machine?
[05:47:22] <jemaclus> or Docker container, I guess
[05:47:25] <jemaclus> sounds... awkward.
[05:47:28] <b0nn> I mean, the mac is running on arm64 (I presume) with various c libs, and you want to deploy to an x86_64, with a different OS that has (presumably) different C libs
[05:47:59] <b0nn> Does it not work with cgo=0?
[05:48:06] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[05:49:15] <jemaclus> well, it does if I compile for my mac on my mac
[05:49:35] <jemaclus> but if I do GOOS=linux GOARCH=amd64 go build, then when I run it on the Linux machine it complains that CGO_ENABLED must be 1
[05:49:54] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[05:50:05] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[05:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-114.dsl.bell.ca)
[05:52:17] <jemaclus> I guess I'll need to Dockerize it somehow and build it that way.
[05:52:24] <jemaclus> annoying. thanks.
[05:53:48] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:55:49] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-114.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:57:29] *** Joins: neurocyte09170 (~neurocyte@IP-046243084168.dynamic.medianet-world.de)
[05:57:29] *** Quits: neurocyte09170 (~neurocyte@IP-046243084168.dynamic.medianet-world.de) (Changing host)
[05:57:29] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[05:57:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[05:59:44] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:59:44] *** neurocyte09170 is now known as neurocyte0917
[06:03:44] <fizzie> If you just want SQLite3 database support, there's also the CGo-free option, https://pkg.go.dev/modernc.org/sqlite -- based on (AIUI) mechanical translation of the SQLite3 C code into Go.
[06:06:08] <fizzie> (I believe cross-compiling with CGo is supposedly possible, but you'll have to supply the C cross-compiler yourself.)
[06:09:20] *** Quits: x28_girl (~x28girl@user/x28girl) (Read error: Connection reset by peer)
[06:09:45] *** Joins: x28_girl (~x28girl@user/x28girl)
[06:11:32] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[06:21:50] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:22:02] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[06:25:15] *** Joins: walterwhip (~www@user/walterwhip)
[06:30:27] *** Quits: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net) (Quit: Leaving.)
[06:31:00] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[06:32:46] *** Joins: x28_girl (~x28girl@user/x28girl)
[06:33:02] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[06:33:30] *** Joins: x28_girl (~x28girl@user/x28girl)
[06:34:18] *** Quits: souvik (~souvik@103.59.73.33) (Ping timeout: 256 seconds)
[06:40:44] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:41:20] *** Joins: walterwhip (~www@user/walterwhip)
[06:45:26] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[06:47:40] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:48:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:50:13] *** Joins: fikran (~fikran@user/fikran)
[06:51:13] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:52:57] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[06:55:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[06:56:49] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 256 seconds)
[07:02:33] *** Joins: jackneill (~jackneill@20014C4E181DC8008732AFADA4BAB47A.dsl.pool.telekom.hu)
[07:04:13] *** Quits: jackneilll (~jackneill@20014C4E181DC800B16B7E98DCB43E06.dsl.pool.telekom.hu) (Ping timeout: 240 seconds)
[07:08:40] *** Quits: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net) (Quit: Leaving.)
[07:09:18] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[07:09:50] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[07:13:58] *** Quits: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net) (Ping timeout: 256 seconds)
[07:19:02] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[07:19:02] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[07:19:26] *** Joins: x28__girl (~x28girl@user/x28girl)
[07:19:26] *** Joins: x28_girl (~x28girl@user/x28girl)
[07:19:48] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[07:20:04] *** Joins: mickey8 (~user@user/mickey)
[07:23:32] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[07:23:32] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[07:23:38] *** Quits: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net) (Client Quit)
[07:24:04] *** Joins: x28__girl (~x28girl@user/x28girl)
[07:24:57] *** Quits: x28__girl (~x28girl@user/x28girl) (Max SendQ exceeded)
[07:25:26] *** Joins: x28__girl (~x28girl@user/x28girl)
[07:29:20] *** Joins: walterwhip (~www@user/walterwhip)
[07:32:05] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:33:02] *** Quits: moog (~moog@107.126.53.135) (Remote host closed the connection)
[07:39:46] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:49:54] *** Joins: Leon_ (~Leon@249.sub-174-198-197.myvzw.com)
[07:50:18] *** Leon_ is now known as Guest442
[07:52:57] *** Quits: leonthemisfit (~Leon@user/leonthemisfit) (Ping timeout: 240 seconds)
[07:53:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:01:52] *** Joins: walterwhip (~www@user/walterwhip)
[08:02:56] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[08:05:13] *** Joins: walterwhip (~www@user/walterwhip)
[08:05:23] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[08:12:04] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[08:14:45] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:15:35] *** Quits: walterwhip (~www@user/walterwhip) (Ping timeout: 256 seconds)
[08:16:30] *** Joins: mbuf (~Shakthi@223.178.108.186)
[08:17:39] <mbuf> Is there an API available to query for golang package meta-information such as available versions, description, maintainer, releases etc.?
[08:20:49] <seebs> not generically, i think
[08:20:56] *** Joins: bluedust (~bluedust@61.3.70.137)
[08:21:04] <seebs> there's no centralized source, ultimately
[08:30:00] *** Joins: souvik (~souvik@103.59.73.33)
[08:32:31] <mbuf> seebs, I see
[08:32:58] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[08:41:47] *** Joins: souvik_ (~souvik@80.179.69.245.cable.012.net.il)
[08:41:58] *** Joins: fef (~thedawn@user/thedawn)
[08:43:55] *** Quits: souvik (~souvik@103.59.73.33) (Ping timeout: 256 seconds)
[08:47:02] <b0nn> the nearest would be the proxy wouldn't it?
[08:47:28] *** Joins: bluedust_ (~bluedust@185.248.85.40)
[08:51:01] *** Quits: bluedust (~bluedust@61.3.70.137) (Ping timeout: 240 seconds)
[08:51:33] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[08:51:33] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[08:52:06] *** Joins: x28__girl (~x28girl@user/x28girl)
[08:52:06] *** Joins: x28_girl (~x28girl@user/x28girl)
[08:54:51] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[08:54:56] *** Joins: Leon_ (~Leon@249.sub-174-198-197.myvzw.com)
[08:55:06] *** Joins: crm (~crm@70.120.0.94)
[08:55:19] *** Leon_ is now known as Guest4072
[08:56:03] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[08:56:03] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[08:56:09] *** Joins: grumb2 (~grumb@rint.osaka)
[08:56:15] *** Joins: acosta5 (~acosta@163.172.62.165)
[08:56:19] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[08:56:19] *** Joins: lazyreader6 (~lazyreade@user/lazyreader)
[08:56:20] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[08:56:22] *** Joins: tofran7 (~tofran@37.189.158.134)
[08:56:25] *** Joins: monoxane2 (~monoxane@user/monoxane)
[08:56:27] *** Joins: SoF4 (~skius@user/skius)
[08:56:31] *** Joins: x28_girl (~x28girl@user/x28girl)
[08:56:32] *** Joins: x28__girl (~x28girl@user/x28girl)
[08:56:32] *** Joins: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[08:56:59] *** Joins: markkuit_ (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[08:57:09] *** Joins: dmgk_ (~dmgk@user/dmgk)
[08:57:11] *** Joins: Fremean (~Freman@185.83.217.144)
[08:57:11] *** Joins: haniaF_ (~haniaF@79.191.101.105.ipv4.supernova.orange.pl)
[08:57:11] *** Joins: sztanp3t (sztanpet@user/sztanpet)
[08:57:12] *** Joins: hedon_ (~hedon@user/hedon)
[08:57:16] *** Joins: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[08:57:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:57:18] *** Joins: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:57:45] *** Joins: megamus_prime_ (~megamus_p@46.101.47.16)
[08:58:03] *** Joins: ryu_ (~ryusaku@c6A334BC1.dhcp.as2116.net)
[08:58:04] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[08:58:25] *** Joins: GJdan_ (~quassel@107-190-26-133.cpe.teksavvy.com)
[08:58:42] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[08:58:47] *** Joins: jramsay (~lack@user/lack)
[08:59:24] *** Joins: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[08:59:38] *** Joins: nullheroes1 (~nullheroe@168.235.66.22)
[08:59:39] *** Joins: tnez_ (~el@179.50.90.141)
[08:59:55] *** Joins: ztx1 (~ztx@user/ztx)
[09:00:00] *** Joins: art_vandelay_ (~art_vande@142.126.234.156)
[09:00:03] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[09:00:03] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[09:00:08] *** Joins: aku_ (~aku@163.172.137.34)
[09:00:10] *** Joins: blinux2 (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[09:00:12] *** Joins: d42- (~root@user/d42)
[09:00:26] *** Joins: g2anj_ (~v@58.228.230.4)
[09:00:27] *** Joins: x28__girl (~x28girl@user/x28girl)
[09:00:27] *** Joins: x28_girl (~x28girl@user/x28girl)
[09:00:39] *** Joins: [Pokey] (~pokey@spikeyCactus/hoosky)
[09:01:58] *** Joins: t0xicCode_ (~t0xicCode@user/t0xiccode)
[09:02:00] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:02:46] *** Joins: cfjk9 (~cfjk@user/cfjk)
[09:04:35] *** Joins: aram_ (~aram@9front.army)
[09:04:35] *** ChanServ sets mode: +v aram_
[09:04:44] *** Joins: haliucin1s (~haliucina@5.20.153.21)
[09:05:10] *** Quits: souvik_ (~souvik@80.179.69.245.cable.012.net.il) (*.net *.split)
[09:05:10] *** Quits: Guest442 (~Leon@249.sub-174-198-197.myvzw.com) (*.net *.split)
[09:05:10] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (*.net *.split)
[09:05:10] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (*.net *.split)
[09:05:11] *** Quits: predmijat (~predmijat@mail.strogopro.com) (*.net *.split)
[09:05:11] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (*.net *.split)
[09:05:11] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (*.net *.split)
[09:05:11] *** Quits: megamus_prime (~megamus_p@46.101.47.16) (*.net *.split)
[09:05:11] *** Quits: rcernin (~rcernin@101.189.141.138) (*.net *.split)
[09:05:11] *** Quits: lack (~lack@user/lack) (*.net *.split)
[09:05:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[09:05:11] *** Quits: eyJhb (~eyJhb@user/eyjhb) (*.net *.split)
[09:05:11] *** Quits: siXy (~jfindley@centos/ops/sixy) (*.net *.split)
[09:05:11] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[09:05:11] *** Quits: d42 (~root@user/d42) (*.net *.split)
[09:05:11] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[09:05:11] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[09:05:11] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[09:05:11] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (*.net *.split)
[09:05:11] *** Quits: Piraty (~irc@user/piraty) (*.net *.split)
[09:05:11] *** Quits: soxhlet (~soxhlet@81.171.29.137) (*.net *.split)
[09:05:11] *** Quits: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca) (*.net *.split)
[09:05:11] *** Quits: Freman (~Freman@185.83.217.144) (*.net *.split)
[09:05:11] *** Quits: bader (~Bader_Lej@freeshell.de) (*.net *.split)
[09:05:11] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[09:05:11] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[09:05:11] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[09:05:11] *** Quits: haliucinas (~haliucina@5.20.153.21) (*.net *.split)
[09:05:12] *** Quits: seebs (~seebs@24.196.59.174) (*.net *.split)
[09:05:12] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[09:05:12] *** Quits: atstefan (~stefan@99-41-248-215.lightspeed.rcsntx.sbcglobal.net) (*.net *.split)
[09:05:12] *** Quits: transacid (~transacid@transacid.de) (*.net *.split)
[09:05:12] *** Quits: avakand (~avakand@static.164.226.201.195.clients.your-server.de) (*.net *.split)
[09:05:12] *** Quits: casastorta (~casastort@neo1.krivokuca.net) (*.net *.split)
[09:05:12] *** Quits: art_vandelay (~art_vande@142.126.234.156) (*.net *.split)
[09:05:12] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (*.net *.split)
[09:05:12] *** Quits: aram (~aram@9front.army) (*.net *.split)
[09:05:12] *** Quits: acosta (~acosta@163.172.62.165) (*.net *.split)
[09:05:12] *** Quits: trewq (~trewq@li70-4.members.linode.com) (*.net *.split)
[09:05:12] *** Quits: lazyreader (~lazyreade@user/lazyreader) (*.net *.split)
[09:05:12] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (*.net *.split)
[09:05:12] *** Quits: cfjk (~cfjk@user/cfjk) (*.net *.split)
[09:05:12] *** Quits: erhandsome (~erhandsom@user/erhandsome) (*.net *.split)
[09:05:12] *** Quits: eau (~chat@user/eau) (*.net *.split)
[09:05:12] *** Quits: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net) (*.net *.split)
[09:05:12] *** Quits: haniaF (~haniaF@79.191.101.105.ipv4.supernova.orange.pl) (*.net *.split)
[09:05:12] *** Quits: sneak (~sneak@datavi.be) (*.net *.split)
[09:05:12] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (*.net *.split)
[09:05:12] *** Quits: kyshoc (~kyshoc@user/kyshoc) (*.net *.split)
[09:05:12] *** Quits: et (~et@user/et) (*.net *.split)
[09:05:12] *** Quits: teasea (~teasea@user/teasea) (*.net *.split)
[09:05:12] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (*.net *.split)
[09:05:12] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (*.net *.split)
[09:05:12] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (*.net *.split)
[09:05:12] *** Quits: sztanpet (sztanpet@user/sztanpet) (*.net *.split)
[09:05:13] *** Quits: ztx (~ztx@user/ztx) (*.net *.split)
[09:05:13] *** Quits: ajfriesen72 (~ajfriesen@cable-78-35-98-50.nc.de) (*.net *.split)
[09:05:13] *** Quits: hedon (~hedon@user/hedon) (*.net *.split)
[09:05:13] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[09:05:13] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[09:05:13] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (*.net *.split)
[09:05:13] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[09:05:13] *** Quits: babilen (~babilen@user/babilen) (*.net *.split)
[09:05:13] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[09:05:13] *** Quits: coc0nut_ (~coc0nut@user/coc0nut) (*.net *.split)
[09:05:13] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[09:05:13] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[09:05:13] *** Quits: t0xicCode (~t0xicCode@user/t0xiccode) (*.net *.split)
[09:05:13] *** Quits: dmgk (~dmgk@user/dmgk) (*.net *.split)
[09:05:13] *** Quits: dove (~jordan@li1158-85.members.linode.com) (*.net *.split)
[09:05:13] *** Quits: gctl (~gctl@143.198.147.213) (*.net *.split)
[09:05:13] *** Quits: c10l (~c10l@user/c10l) (*.net *.split)
[09:05:13] *** Quits: popey (~popey@ubuntu/member/popey) (*.net *.split)
[09:05:13] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (*.net *.split)
[09:05:13] *** Quits: vhost- (~vhost@65.102.48.134) (*.net *.split)
[09:05:13] *** Quits: monoxane (~monoxane@user/monoxane) (*.net *.split)
[09:05:13] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[09:05:13] *** Quits: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com) (*.net *.split)
[09:05:13] *** Quits: aku (~aku@163.172.137.34) (*.net *.split)
[09:05:13] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:05:13] *** Quits: orthoplex64 (~crm@70.120.0.94) (*.net *.split)
[09:05:13] *** Quits: grumb (~grumb@rint.osaka) (*.net *.split)
[09:05:14] *** Fremean is now known as Freman
[09:05:14] *** acosta5 is now known as acosta
[09:05:14] *** lazyreader6 is now known as lazyreader
[09:05:14] *** tofran7 is now known as tofran
[09:05:14] *** dmgk_ is now known as dmgk
[09:05:17] *** SoF4 is now known as SoF
[09:05:29] *** cfjk9 is now known as cfjk
[09:05:35] *** monoxane2 is now known as monoxane
[09:05:36] *** sztanp3t is now known as sztanpet
[09:05:46] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:07:42] *** Joins: shka (~herr@109.231.0.226)
[09:08:31] *** Joins: t0xicCode (~t0xicCode@user/t0xiccode)
[09:08:51] *** Quits: t0xicCode_ (~t0xicCode@user/t0xiccode) (Ping timeout: 256 seconds)
[09:08:51] *** Quits: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 256 seconds)
[09:09:25] *** Quits: haliucin1s (~haliucina@5.20.153.21) (Ping timeout: 256 seconds)
[09:09:59] *** Quits: aram_ (~aram@9front.army) (Ping timeout: 256 seconds)
[09:10:00] *** Joins: babilen (~babilen@user/babilen)
[09:10:13] *** Joins: fikran_ (~fikran@pool-108-28-108-199.washdc.fios.verizon.net)
[09:10:13] *** Joins: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[09:10:13] *** Joins: vj--_ (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca)
[09:10:13] *** Joins: souvik_ (~souvik@80.179.69.245.cable.012.net.il)
[09:10:13] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[09:10:13] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[09:10:13] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[09:10:13] *** Joins: siXy (~jfindley@centos/ops/sixy)
[09:10:13] *** Joins: sus (zero@user/zeromomentum)
[09:10:13] *** Joins: Piraty (~irc@user/piraty)
[09:10:13] *** Joins: soxhlet (~soxhlet@81.171.29.137)
[09:10:13] *** Joins: bader (~Bader_Lej@freeshell.de)
[09:10:13] *** Joins: transacid (~transacid@transacid.de)
[09:10:13] *** Joins: avakand (~avakand@static.164.226.201.195.clients.your-server.de)
[09:10:13] *** Joins: casastorta (~casastort@neo1.krivokuca.net)
[09:10:13] *** Joins: trewq (~trewq@li70-4.members.linode.com)
[09:10:13] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[09:10:13] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[09:10:13] *** Joins: eau (~chat@user/eau)
[09:10:13] *** Joins: sneak (~sneak@datavi.be)
[09:10:13] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[09:10:13] *** Joins: et (~et@user/et)
[09:10:13] *** Joins: teasea (~teasea@user/teasea)
[09:10:13] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[09:10:13] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[09:10:13] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[09:10:13] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:10:13] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[09:10:13] *** Joins: gctl (~gctl@143.198.147.213)
[09:10:13] *** Joins: dove (~jordan@li1158-85.members.linode.com)
[09:10:13] *** Joins: c10l (~c10l@user/c10l)
[09:10:13] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[09:10:13] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[09:10:13] *** Joins: flynn (~mcbloch@user/flynn)
[09:10:30] *** Joins: aram (~aram@9front.army)
[09:10:30] *** ChanServ sets mode: +v aram
[09:10:32] *** Joins: haliucinas (~haliucina@5.20.153.21)
[09:10:42] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[09:10:45] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[09:10:51] *** Joins: atstefan (~stefan@99-41-248-215.lightspeed.rcsntx.sbcglobal.net)
[09:11:04] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:11:34] *** Quits: x28__girl (~x28girl@user/x28girl) (Remote host closed the connection)
[09:11:35] *** Joins: seebs (~seebs@24.196.59.174)
[09:11:39] *** Joins: koolazer (~koo@user/koolazer)
[09:11:42] *** Joins: vhost- (~vhost@65.102.48.134)
[09:17:41] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[09:21:34] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[09:22:00] *** Joins: x28_girl (~x28girl@user/x28girl)
[09:22:49] *** Quits: x28_girl (~x28girl@user/x28girl) (Max SendQ exceeded)
[09:23:19] *** Joins: x28_girl (~x28girl@user/x28girl)
[09:31:11] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[09:34:20] *** crm is now known as orthoplex64
[09:39:36] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:43:32] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[09:49:41] *** Joins: souvik (~souvik@80.179.69.241.cable.012.net.il)
[09:52:04] *** Quits: souvik_ (~souvik@80.179.69.245.cable.012.net.il) (Ping timeout: 256 seconds)
[09:52:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[09:52:46] *** Joins: bluedust (~bluedust@61.3.70.137)
[09:55:25] *** Quits: bluedust_ (~bluedust@185.248.85.40) (Ping timeout: 240 seconds)
[09:56:20] *** Joins: egy (egy@tilde.team)
[10:00:22] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[10:03:46] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:04:16] *** Joins: fef (~thedawn@user/thedawn)
[10:08:10] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[10:10:33] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[10:13:13] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Quit: mikoto-chan)
[10:16:31] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[10:16:40] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:20:21] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:20:32] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[10:21:28] *** Joins: koo5_ (~quassel@51.140.155.227)
[10:24:51] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:25:57] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[10:26:42] *** Joins: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe)
[10:34:23] *** Quits: bluedust (~bluedust@61.3.70.137) (Remote host closed the connection)
[10:34:59] *** Joins: bluedust (~bluedust@61.3.70.137)
[10:35:15] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:36:11] *** Joins: cpk33 (~cpk33@2605:a601:ab34:3f00:84d8:e222:8b8d:5b1f)
[10:39:31] *** Quits: bluedust (~bluedust@61.3.70.137) (Ping timeout: 256 seconds)
[10:39:31] *** Joins: adip (~adip@user-188-33-250-10.play-internet.pl)
[10:40:21] *** Joins: EdFletcher (~PKD@user/edfletcher)
[10:40:53] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[10:44:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[10:45:53] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[10:50:39] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 250 seconds)
[10:52:13] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[10:54:43] *** Quits: cpk33 (~cpk33@2605:a601:ab34:3f00:84d8:e222:8b8d:5b1f) (Quit: Client closed)
[10:54:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:55:04] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[10:56:09] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[10:57:09] *** Joins: bluedust (~bluedust@61.3.70.137)
[10:57:14] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:05:24] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[11:07:26] *** Quits: fikran_ (~fikran@pool-108-28-108-199.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[11:09:19] *** Joins: fikran_ (~fikran@user/fikran)
[11:12:22] *** Joins: x28girl (~x28girl@user/x28girl)
[11:16:02] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[11:16:55] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[11:16:55] *** Joins: Leon_ (~Leon@249.sub-174-198-197.myvzw.com)
[11:17:04] *** Quits: x28girl (~x28girl@user/x28girl) (Remote host closed the connection)
[11:17:18] *** Leon_ is now known as Guest7231
[11:17:30] *** Joins: x28girl (~x28girl@user/x28girl)
[11:20:19] *** Quits: Guest4072 (~Leon@249.sub-174-198-197.myvzw.com) (Ping timeout: 256 seconds)
[11:20:35] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[11:24:15] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[11:25:08] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[11:26:41] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[11:26:52] *** Joins: rendar (~rendar@user/rendar)
[11:28:16] *** Joins: dan01 (~dan01@2a02:2f0f:320f:8200:84ba:8bbd:571a:4b18)
[11:28:27] *** Joins: Alina-ma- (~Alina-mal@37.252.83.224)
[11:28:36] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Read error: Connection reset by peer)
[11:29:51] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:32:25] *** Joins: cpk33 (~cpk33@2605:a601:ab34:3f00:459b:d979:72a5:3c8a)
[11:32:25] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:33:18] *** Joins: absc (~absc@81.31.144.28)
[11:33:21] *** Quits: carlavilla (~carlavill@188.26.219.17) (Ping timeout: 256 seconds)
[11:34:36] *** Quits: dan01 (~dan01@2a02:2f0f:320f:8200:84ba:8bbd:571a:4b18) (Quit: Leaving)
[11:37:44] *** Quits: bluedust (~bluedust@61.3.70.137) (Remote host closed the connection)
[11:41:08] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[11:41:08] *** Quits: fdv (sid27570@id-27570.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[11:41:16] *** Joins: fdv (sid27570@id-27570.helmsley.irccloud.com)
[11:41:45] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:1822:334c:96ba:1b07)
[11:42:17] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 240 seconds)
[11:42:22] *** Quits: redlegion (sid429547@id-429547.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[11:42:22] *** Quits: telemachus (sid2004@id-2004.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[11:42:22] *** Quits: Duns_Scrotus (sid262565@id-262565.tinside.irccloud.com) (Ping timeout: 268 seconds)
[11:42:27] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[11:42:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:43:30] *** Joins: redlegion (sid429547@id-429547.ilkley.irccloud.com)
[11:43:46] *** Joins: Duns_Scrotus (sid262565@id-262565.tinside.irccloud.com)
[11:43:57] *** Joins: telemachus (sid2004@id-2004.helmsley.irccloud.com)
[11:45:42] *** Quits: Alina-ma- (~Alina-mal@37.252.83.224) (Quit: !be back soon)
[11:46:07] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[11:50:25] *** Joins: bluedust (~bluedust@61.3.70.137)
[11:52:36] *** Joins: Batzy (~quassel@user/batzy)
[11:52:52] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[11:54:50] *** Quits: cpk33 (~cpk33@2605:a601:ab34:3f00:459b:d979:72a5:3c8a) (Quit: Client closed)
[11:55:58] *** Joins: cobber (~protorom@213.240.182.77)
[11:56:05] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:1822:334c:96ba:1b07) (Ping timeout: 250 seconds)
[11:56:16] *** Joins: mrig (~mrig@user/mrig)
[11:56:44] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[11:57:14] *** Joins: dan01 (~dan01@2a02:2f0f:320f:8200:84ba:8bbd:571a:4b18)
[11:57:31] <dan01> when you do a go get, it will download go source code files, right?
[11:57:42] <dan01> How do you download a binary?
[11:58:23] *** Joins: ys (~ys@user/ys)
[11:58:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[11:59:42] <b0nn> dan01: assuming that someone has compiled a binary for your architecture/operating system?
[11:59:53] <b0nn> I would use curl or wget :)
[12:00:39] <b0nn> maybe scp
[12:00:47] *** Joins: roshanavand_ (~roshanava@p200300d47f01a300da0feab4c78c09e1.dip0.t-ipconnect.de)
[12:00:58] <dan01> Not but like, when I've installed the VS Code extension for Go, it installed some binaries under my GOPATH/bin, how did it do that?
[12:02:07] <b0nn> pass - grabbed the source and compiled?
[12:02:13] <dan01> Ahh ok
[12:02:18] <dan01> Think you're right
[12:02:18] <b0nn> then put the output into bin
[12:02:32] <dan01> pass is that a go command or something?
[12:02:53] <b0nn> oh, it's an idiom - pass this question
[12:03:11] <b0nn> pass on account that I have no idea on what the answer is
[12:04:29] <dan01> go install
[12:04:37] <dan01> Ok, I think that's how they did it
[12:13:35] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[12:14:13] *** Quits: roshanavand_ (~roshanava@p200300d47f01a300da0feab4c78c09e1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:15:12] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[12:16:04] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[12:17:58] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:21:30] *** Quits: sus (zero@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[12:21:45] *** Joins: sus (zero@user/zeromomentum)
[12:23:09] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[12:23:23] *** Joins: henry404089 (~henry4040@175.181.155.165)
[12:24:57] *** Quits: henry40408 (~henry4040@175.181.188.127) (Ping timeout: 240 seconds)
[12:24:58] *** henry404089 is now known as henry40408
[12:25:09] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[12:30:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: You have been kicked for being idle)
[12:33:56] *** Joins: mnx|aw (~nabromov@92.40.255.113.threembb.co.uk)
[12:34:02] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Ping timeout: 240 seconds)
[12:36:13] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 240 seconds)
[12:37:17] *** Joins: sagax (~sagax_nb@user/sagax)
[12:43:23] *** Quits: bluedust (~bluedust@61.3.70.137) (Remote host closed the connection)
[12:48:48] *** Quits: ys (~ys@user/ys) (Read error: Connection reset by peer)
[12:49:28] *** Joins: ys (~ys@user/ys)
[12:50:08] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[12:50:59] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[12:51:54] *** Quits: batdog (batdog@lnsq.elkins.co) (Quit: Bye)
[12:52:17] *** Joins: batdog (~batdog@lnsq.elkins.co)
[12:58:37] *** Joins: jjido (~Denis@94.9.124.97)
[13:00:41] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[13:03:00] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Quit: The Lounge - https://thelounge.chat)
[13:03:41] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[13:04:13] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[13:07:15] *** Quits: jjido (~Denis@94.9.124.97) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:10:13] *** Joins: Leon_ (~Leon@249.sub-174-198-197.myvzw.com)
[13:10:32] *** Joins: andlabs_ (~andlabs@70.107.171.168)
[13:10:37] *** Leon_ is now known as Guest1499
[13:11:55] *** Joins: bluedust (~bluedust@61.3.70.137)
[13:12:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[13:13:05] *** Quits: Guest7231 (~Leon@249.sub-174-198-197.myvzw.com) (Ping timeout: 256 seconds)
[13:13:39] *** Quits: andlabs (~andlabs@70.107.171.168) (Ping timeout: 256 seconds)
[13:16:38] *** Quits: fikran_ (~fikran@user/fikran) (Ping timeout: 256 seconds)
[13:18:40] *** Joins: fikran_ (~fikran@user/fikran)
[13:18:46] *** Joins: zalt (~zalt@user/zalt)
[13:26:37] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:29:17] *** Joins: nucks (~nucks@2400:4050:83c3:1e00:3863:935c:730:e416)
[13:31:24] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:1822:334c:96ba:1b07)
[13:32:04] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[13:32:31] *** Joins: x28_girl (~x28girl@user/x28girl)
[13:32:36] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[13:35:17] *** Quits: dan01 (~dan01@2a02:2f0f:320f:8200:84ba:8bbd:571a:4b18) (Ping timeout: 240 seconds)
[13:36:12] *** Joins: bluedust_ (~bluedust@59.89.219.209)
[13:36:13] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:1822:334c:96ba:1b07) (Ping timeout: 240 seconds)
[13:36:19] *** Quits: bluedust (~bluedust@61.3.70.137) (Ping timeout: 256 seconds)
[13:36:34] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[13:36:58] *** Joins: x28_girl (~x28girl@user/x28girl)
[13:37:36] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[13:38:29] *** Joins: alwyn (~alwyn@user/alwyn)
[13:48:50] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Remote host closed the connection)
[13:54:24] *** Parts: mnx|aw (~nabromov@92.40.255.113.threembb.co.uk) ()
[13:54:35] *** Joins: dr0n (~nabromov@92.40.255.113.threembb.co.uk)
[13:55:11] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[13:56:04] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[13:56:57] *** Quits: bluedust_ (~bluedust@59.89.219.209) (Remote host closed the connection)
[13:57:32] *** Joins: bluedust (~bluedust@103.161.144.94)
[14:02:13] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[14:03:06] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Quit: KonaArctic)
[14:04:49] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:05:12] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[14:06:12] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:09:54] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[14:10:47] *** Joins: rendar_ (~rendar@user/rendar)
[14:10:51] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 250 seconds)
[14:16:22] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:2056:b705:3607:12f8)
[14:17:12] *** Joins: leonarth (~leonarth@user/leonarth)
[14:19:57] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[14:21:02] *** Joins: teasea (~teasea@user/teasea)
[14:25:42] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:1822:334c:96ba:1b07)
[14:27:58] *** leonarth is now known as defined_bob
[14:28:26] *** Joins: rcernin (~rcernin@101.189.141.138)
[14:30:46] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:1822:334c:96ba:1b07) (Ping timeout: 245 seconds)
[14:31:21] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[14:34:21] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:2056:b705:3607:12f8) (Remote host closed the connection)
[14:34:45] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:2056:b705:3607:12f8)
[14:36:04] *** Quits: x28_girl (~x28girl@user/x28girl) (Remote host closed the connection)
[14:36:28] *** Joins: x28_girl (~x28girl@user/x28girl)
[14:38:18] *** Quits: x28girl (~x28girl@user/x28girl) (Quit: Leaving)
[14:38:18] *** Quits: x28_girl (~x28girl@user/x28girl) (Client Quit)
[14:38:47] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[14:41:34] *** Quits: tnez_ (~el@179.50.90.141) (Changing host)
[14:41:34] *** Joins: tnez_ (~el@user/tnez)
[14:41:41] *** Joins: virtx (~virtx@host-79-36-161-7.retail.telecomitalia.it)
[14:41:45] *** tnez_ is now known as tnez
[14:41:47] <virtx> hi
[14:44:42] *** Quits: anandn (~anandn@2601:600:a27f:d92d:151d:1f53:302f:b5fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:47:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[14:48:17] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[14:50:48] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:51:22] *** Joins: mrig_ (~mrig@lfbn-orl-1-706-249.w86-220.abo.wanadoo.fr)
[14:51:32] *** Joins: wre^ (~wre@wsip-98-188-246-242.mc.at.cox.net)
[14:55:05] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 256 seconds)
[14:59:21] *** Joins: bluedust_ (~bluedust@59.89.219.209)
[15:02:32] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 240 seconds)
[15:03:10] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[15:04:09] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:2056:b705:3607:12f8) (Ping timeout: 250 seconds)
[15:05:30] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[15:05:53] *** Quits: ys (~ys@user/ys) (Remote host closed the connection)
[15:13:47] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[15:13:47] *** Quits: adip (~adip@user-188-33-250-10.play-internet.pl) (Ping timeout: 256 seconds)
[15:16:41] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[15:18:19] *** Quits: shtirlic_ (~shtirlic@167.71.15.181) (Ping timeout: 256 seconds)
[15:20:33] *** Quits: nucks (~nucks@2400:4050:83c3:1e00:3863:935c:730:e416) (Remote host closed the connection)
[15:21:18] *** Joins: shtirlic (~shtirlic@167.71.15.181)
[15:21:43] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[15:26:15] *** Quits: fikran_ (~fikran@user/fikran) (Ping timeout: 256 seconds)
[15:28:01] *** Joins: fikran_ (~fikran@user/fikran)
[15:30:03] *** Joins: ys (~ys@user/ys)
[15:32:07] *** Quits: mrig_ (~mrig@lfbn-orl-1-706-249.w86-220.abo.wanadoo.fr) (Changing host)
[15:32:07] *** Joins: mrig_ (~mrig@user/mrig)
[15:32:07] *** mrig_ is now known as mrig
[15:34:45] *** Quits: ys (~ys@user/ys) (Ping timeout: 256 seconds)
[15:35:52] <mickey8> how would you multiply a big.Int by a float? because (big.int).Mul only accepts big.Ints
[15:36:17] <mickey8> i'm trying to multiply a big.Int by 1.5 for instance. i don't care for the float precision
[15:36:28] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:2056:b705:3607:12f8)
[15:36:57] <mickey8> e.g. 55 would be 82 or 83, either is ok
[15:38:27] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[15:43:31] <fizzie> You can go via a big.Float, which has conversion methods to/from both big.Int and float64. Or you could decompose the float64 with math.Frexp, and separately scale by the fraction (turn it into an integer by multiplying with a suitable power of 2) and the exponent (see Lsh, Rsh) for a more "low-level" approach.
[15:44:32] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[15:45:03] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[15:47:39] *** Joins: et (~et@user/et)
[15:56:56] <fizzie> https://go.dev/play/p/-WFO8GHDgOb shows both ways in action.
[16:00:17] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:2056:b705:3607:12f8) (Ping timeout: 240 seconds)
[16:00:56] <KirkMcDonald> Alternatively, multiply by 3 then divide by 2.
[16:01:53] <fizzie> Yeah, I was kind of assuming it's not a known constant 1.5 but an arbitrary float64 value.
[16:02:48] <KirkMcDonald> I suppose this would generalize to converting the float to a rational.
[16:03:27] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:2056:b705:3607:12f8)
[16:04:35] <KirkMcDonald> I wonder if the Go standard library has a thing for that.
[16:05:34] <fizzie> "Multiply by 3 then divide by 2" is essentially what the second way in the paste is doing, except in the case of 1.5 for example, it does multiply by 3458764513820540928 (3*2^60) and divide by 2305843009213693952 (2*2^60).
[16:06:31] <KirkMcDonald> Ah, sure.
[16:06:57] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[16:07:14] *** Joins: Sam (b8f15a4bbd@golang/sam)
[16:07:14] *** ChanServ sets mode: +o Sam
[16:10:27] *** Joins: bluedust (~bluedust@185.248.85.10)
[16:13:16] *** Joins: shtirlic_ (~shtirlic@178.70.131.230)
[16:13:17] *** Quits: bluedust_ (~bluedust@59.89.219.209) (Ping timeout: 240 seconds)
[16:15:19] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[16:15:25] *** Joins: adip (~adip@did68.neoplus.adsl.tpnet.pl)
[16:15:59] *** Quits: bluedust (~bluedust@185.248.85.10) (Remote host closed the connection)
[16:17:02] *** Quits: shtirlic (~shtirlic@167.71.15.181) (Ping timeout: 240 seconds)
[16:18:43] *** Joins: ys (~ys@user/ys)
[16:19:51] *** [Pokey] is now known as Pokey
[16:20:32] *** Quits: ys (~ys@user/ys) (Remote host closed the connection)
[16:20:46] *** Quits: noonien (~noonien@86.127.212.246) (Quit: Ping timeout (120 seconds))
[16:21:06] *** Joins: noonien (~noonien@user/noonien)
[16:24:37] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[16:25:37] *** Joins: zim (~zim@dynamic-089-012-185-100.89.12.pool.telefonica.de)
[16:27:04] *** Joins: rcernin (~rcernin@101.189.141.138)
[16:28:41] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:2056:b705:3607:12f8) (Read error: Connection reset by peer)
[16:32:08] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[16:33:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[16:39:28] *** Quits: Arsen (arsen@managarm/dev/Arsen) (Quit: Quit.)
[16:39:46] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[16:40:53] *** Joins: ys (~ys@user/ys)
[16:42:12] *** Joins: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689)
[16:45:04] *** Quits: shtirlic_ (~shtirlic@178.70.131.230) (Remote host closed the connection)
[16:47:09] *** Quits: ys (~ys@user/ys) (Remote host closed the connection)
[16:49:45] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[16:55:17] *** Quits: adip (~adip@did68.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[16:55:25] *** Joins: bluedust (~bluedust@185.248.85.10)
[16:57:17] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[16:57:23] *** Joins: adip (~adip@aedr186.neoplus.adsl.tpnet.pl)
[16:58:24] *** Joins: neurocyte09170 (~neurocyte@IP-046243084168.dynamic.medianet-world.de)
[16:58:24] *** Quits: neurocyte09170 (~neurocyte@IP-046243084168.dynamic.medianet-world.de) (Changing host)
[16:58:24] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[17:04:51] *** Quits: whaley (~whaley@2603-6080-a301-33d1-0c5f-5454-d0c6-78ae.res6.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[17:04:55] *** Joins: ys (~ys@user/ys)
[17:06:13] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:11:08] <zim> In google's SRE book "Building Secure & Reliable Systems" an internal framework for microservices and webapplications is mentioned to "to streamline the development and operation of applications and services for large organizations", "provide out-of-the-box automation for many common development and deployment tasks—from scaffolding for new components, to automated setup of continuous integration (CI) environments, t
[17:11:08] <zim> o largely automated production deployments." + web app support for common vulns.
[17:11:33] <zim> I've found a couple of available frameworks, but those seem to have a way more limited scope and I've found several opinions that those can be problematic: go-kit, go-micro, go-kratos. Can anyone recommend something?
[17:11:51] *** Quits: ys (~ys@user/ys) (Quit: Leaving...)
[17:12:01] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:14:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:17:00] *** Quits: defined_bob (~leonarth@user/leonarth) (Read error: Connection reset by peer)
[17:17:43] *** Joins: leonarth (~leonarth@user/leonarth)
[17:20:05] <noord> zim: go monolith or soa
[17:26:21] *** Joins: cgoguy (~cgoguy@pool-138.248.176.62.dynamic.wobline-ip.de)
[17:26:51] *** Quits: cgoguy (~cgoguy@pool-138.248.176.62.dynamic.wobline-ip.de) (Remote host closed the connection)
[17:28:05] <zim> thank you, noord
[17:35:36] *** Quits: fikran_ (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:36:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[17:37:22] *** Joins: fikran_ (~fikran@user/fikran)
[17:40:15] *** Joins: lechner (~lechner@debian/lechner)
[17:47:22] *** Joins: bluedust_ (~bluedust@59.89.219.209)
[17:50:46] *** Quits: bluedust (~bluedust@185.248.85.10) (Ping timeout: 245 seconds)
[17:55:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[17:55:25] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[18:00:33] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:04:19] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869)
[18:07:32] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:08:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869) (Ping timeout: 240 seconds)
[18:12:26] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[18:14:01] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:18:32] *** Quits: wre^ (~wre@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[18:21:41] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:27:45] *** Joins: zanshin (~zanshin@user/zanshin)
[18:34:10] *** Joins: bancharo (~bancharo@user/bancharo)
[18:38:02] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[18:41:20] *** Quits: rds (~rd@user/rds) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:49:14] *** Joins: noonien2 (~noonien@user/noonien)
[18:49:44] *** Quits: noonien (~noonien@user/noonien) (Read error: Connection reset by peer)
[18:49:45] *** noonien2 is now known as noonien
[18:50:17] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 240 seconds)
[18:53:02] *** Joins: moog (~moog@107.77.244.71)
[18:54:00] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:58:05] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[18:58:12] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[18:58:34] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[19:01:31] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[19:08:03] *** megamus_prime_ is now known as megamus_prime
[19:22:37] *** Quits: souvik (~souvik@80.179.69.241.cable.012.net.il) (Ping timeout: 240 seconds)
[19:24:26] *** Joins: analogsalad (~analogsal@user/analogsalad)
[19:32:50] *** Joins: edrocks (~Ed@user/edrocks)
[19:41:36] *** Joins: cobber (~protorom@213.240.182.77)
[19:41:47] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[19:43:20] <cobber> am I doing anything wrong by instanciating maps with {} instead of make() other than starting with a capacity of 0? e.g. m := map[string]int{}
[19:43:45] <KirkMcDonald> Nah.
[19:44:04] <cobber> cool, thanks
[19:44:39] *** Quits: fikran_ (~fikran@user/fikran) (Ping timeout: 256 seconds)
[19:44:44] *** Quits: bancharo (~bancharo@user/bancharo) (Quit: low on battery!)
[19:46:43] *** Joins: fikran_ (~fikran@user/fikran)
[19:49:41] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:52:40] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869)
[19:55:00] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[19:55:55] *** Quits: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net) (Quit: ZNC 1.9.x-git-167-81df4dec - https://znc.in)
[19:56:18] *** Quits: bluedust_ (~bluedust@59.89.219.209) (Remote host closed the connection)
[19:56:22] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:57:14] *** Joins: xlei (~akans@pool-71-125-19-142.nycmny.fios.verizon.net)
[19:57:19] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869) (Ping timeout: 250 seconds)
[20:00:14] *** Joins: marlinc (~marlinc@user/marlinc)
[20:06:08] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:07:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[20:09:52] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:14:17] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[20:16:22] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[20:21:32] *** Quits: greypw254 (~greypw2@grey.pw) (Quit: I'll be back!)
[20:22:53] *** Joins: greypw254 (~greypw2@grey.pw)
[20:22:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[20:23:27] *** Joins: bluedust (~bluedust@59.89.219.209)
[20:27:25] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[20:30:14] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[20:31:49] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[20:33:13] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:34:45] *** Quits: greypw254 (~greypw2@grey.pw) (Quit: I'll be back!)
[20:36:18] *** Quits: halden (~halden@lden.im) (Quit: Bye)
[20:37:22] *** Joins: greypw254 (~greypw2@grey.pw)
[20:40:30] *** Joins: halden (~halden@lden.im)
[20:41:31] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:43:31] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[20:45:03] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[20:46:22] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[21:00:52] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:07:57] *** Quits: g2anj_ (~v@58.228.230.4) (Ping timeout: 256 seconds)
[21:12:19] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Quit: Leaving)
[21:13:03] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[21:14:18] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[21:16:41] *** Joins: g2anj (~v@58.228.230.4)
[21:18:52] *** Quits: bluedust (~bluedust@59.89.219.209) (Ping timeout: 256 seconds)
[21:27:22] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:27:39] *** Joins: mickey8 (~user@user/mickey)
[21:30:38] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:09] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:31:32] *** Quits: marlinc (~marlinc@user/marlinc) (Read error: Connection reset by peer)
[21:36:32] *** Joins: bluedust (~bluedust@59.89.219.209)
[21:38:33] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 256 seconds)
[21:39:52] *** Joins: hanzo (uid532183@user/hanzo)
[21:40:23] *** Quits: virtx (~virtx@host-79-36-161-7.retail.telecomitalia.it) (Quit: Client closed)
[21:41:01] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[21:41:10] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869)
[21:42:00] *** Quits: mbuf (~Shakthi@223.178.108.186) (Quit: Leaving)
[21:42:22] *** Joins: darkapex (~darkapex@user/darkapex)
[21:42:23] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[21:45:25] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869) (Ping timeout: 240 seconds)
[21:45:44] *** Quits: bluedust (~bluedust@59.89.219.209) (Remote host closed the connection)
[21:45:49] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[21:46:32] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[21:46:50] *** Joins: shka (~herr@109.231.0.226)
[21:51:53] *** Joins: marlinc (~marlinc@user/marlinc)
[21:52:07] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:53:50] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[21:57:34] *** Joins: LiENUX (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net)
[21:57:49] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Client Quit)
[22:00:22] *** Joins: fgau_ (~fgau@mail.berliner-termindienst.de)
[22:01:16] *** Quits: marlinc (~marlinc@user/marlinc) (Read error: Connection reset by peer)
[22:03:34] *** Joins: kremlin1 (~kremlin@uglyman.kremlin.cc)
[22:05:15] *** Quits: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (*.net *.split)
[22:05:15] *** Quits: Arsen (arsen@managarm/dev/Arsen) (*.net *.split)
[22:05:15] *** Quits: vhost- (~vhost@65.102.48.134) (*.net *.split)
[22:05:15] *** Quits: seebs (~seebs@24.196.59.174) (*.net *.split)
[22:05:15] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[22:05:16] *** Quits: kodah (~kodah@user/kodah) (*.net *.split)
[22:05:16] *** Quits: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (*.net *.split)
[22:05:16] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:78c1:741e:24d7:1bb) (*.net *.split)
[22:05:16] *** Quits: khyr0n (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f) (*.net *.split)
[22:05:16] *** Quits: kulak (~kulak@user/kulak) (*.net *.split)
[22:05:16] *** Quits: decartes (sid240036@id-240036.helmsley.irccloud.com) (*.net *.split)
[22:05:16] *** Quits: NOTevil (~notevil@user/notevil) (*.net *.split)
[22:05:16] *** Quits: syg (sid521913@id-521913.lymington.irccloud.com) (*.net *.split)
[22:05:16] *** Quits: ddevault (e7b4bb6755@sourcehut/staff/ddevault) (*.net *.split)
[22:05:16] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[22:05:16] *** Quits: purpleidea (~james@user/purpleidea) (*.net *.split)
[22:05:16] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[22:05:16] *** Quits: lowhope_ (~lowhope@cow9.org) (*.net *.split)
[22:05:17] *** Quits: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net) (*.net *.split)
[22:05:17] *** Quits: Shimmy (~Shimmy@user/shimmy) (*.net *.split)
[22:05:17] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[22:05:17] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (*.net *.split)
[22:05:17] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[22:05:17] *** Quits: tumdum (uid783@id-783.helmsley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: AsenMx (~asen@user/asenmx) (*.net *.split)
[22:05:17] *** Quits: lord4163 (~lord4163@90-230-194-205-no86.tbcn.telia.com) (*.net *.split)
[22:05:17] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[22:05:17] *** Quits: _rubik (~rubik@user/rubik/x-6853868) (*.net *.split)
[22:05:17] *** Quits: hwm4rgs (~hwm4rgs@user/hwm4rgs) (*.net *.split)
[22:05:17] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: mikeputnam1 (~mikeputna@wilug/mikeputnam) (*.net *.split)
[22:05:17] *** Quits: TDT (~TDT@20.118.225.139) (*.net *.split)
[22:05:17] *** Quits: pinky__ (pinky@minime.fef.net) (*.net *.split)
[22:05:17] *** Quits: Kane (~Kane@portal.yarg.fr) (*.net *.split)
[22:05:17] *** Quits: icy (~icy@user/icy) (*.net *.split)
[22:05:17] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (*.net *.split)
[22:05:17] *** Quits: ziofork (~ziofork@fr.worn.eu) (*.net *.split)
[22:05:17] *** Quits: OnkelUlla (~uol@ptx.hi.pengutronix.de) (*.net *.split)
[22:05:17] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (*.net *.split)
[22:05:17] *** Quits: mdel (~mdel@user/mdel) (*.net *.split)
[22:05:17] *** Quits: DreamweaverN (~Dreamweav@2001:1af8:4700:b0d0:a800::) (*.net *.split)
[22:05:17] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: shibumi (~shibumi@archlinux/trusteduser/shibumi) (*.net *.split)
[22:05:18] *** Quits: xoebus (sid61319@id-61319.uxbridge.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: riverdc (river@2600:3c01::f03c:92ff:fed1:4643) (*.net *.split)
[22:05:18] *** Quits: Nspace (~Nspace@user/nspace) (*.net *.split)
[22:05:18] *** Quits: rabbitear (~juice@142.93.115.104) (*.net *.split)
[22:05:18] *** Quits: sshow (~sshow@neo.hackeriet.no) (*.net *.split)
[22:05:18] *** Quits: tpr (~tpr@user/tpr) (*.net *.split)
[22:05:18] *** Quits: prime- (~prime@user/prime) (*.net *.split)
[22:05:18] *** Quits: marcel (~marcel@user/marcel) (*.net *.split)
[22:05:18] *** Quits: liam_ (sid7517@id-7517.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: kremlin (~kremlin@uglyman.kremlin.cc) (*.net *.split)
[22:05:18] *** Quits: psb_ (sid500598@id-500598.ilkley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: kubblai (sid478659@fedora/kubblai) (*.net *.split)
[22:05:18] *** Quits: flukes (sid527792@user/flukes) (*.net *.split)
[22:05:18] *** Quits: jzelinskie (sid17772@user/jzelinskie) (*.net *.split)
[22:05:18] *** Quits: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[22:05:18] *** Quits: bbear (~znc@21212.s.t4vps.eu) (*.net *.split)
[22:05:18] *** Quits: mort (~mort@188.166.114.29) (*.net *.split)
[22:05:18] *** Quits: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex) (*.net *.split)
[22:05:18] *** Quits: Meroje (~Meroje@user/meroje) (*.net *.split)
[22:05:18] *** Quits: fgau (~fgau@mail.berliner-termindienst.de) (*.net *.split)
[22:05:18] *** Quits: lvlinux (~ruel@150.136.4.160) (*.net *.split)
[22:05:18] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[22:05:18] *** Quits: buffet (~buffet@buffet.sh) (*.net *.split)
[22:05:18] *** Quits: samf (~root@159.65.228.88) (*.net *.split)
[22:05:18] *** Quits: argonel (argonel@KDE/argonel) (*.net *.split)
[22:05:18] *** Quits: KBme (~KBme@ra.ndom.dev) (*.net *.split)
[22:05:18] *** Quits: gsthnz (~gsthnz@user/gsthnz) (*.net *.split)
[22:05:19] *** Quits: buz (~buz@damn.serious.im) (*.net *.split)
[22:05:19] *** Quits: longsleep (~quassel@2a02:c207:3001:216:1000::1) (*.net *.split)
[22:05:19] *** Quits: couture (~couture@user/couture) (*.net *.split)
[22:05:19] *** Quits: mickey8 (~user@user/mickey) (*.net *.split)
[22:05:19] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (*.net *.split)
[22:05:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[22:05:19] *** Quits: fef (~thedawn@user/thedawn) (*.net *.split)
[22:05:19] *** Quits: califax (~califax@user/califx) (*.net *.split)
[22:05:19] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[22:05:19] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (*.net *.split)
[22:05:19] *** Quits: pztrn (~pztrn@user/pztrn) (*.net *.split)
[22:05:19] *** Quits: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7) (*.net *.split)
[22:05:19] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (*.net *.split)
[22:05:19] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (*.net *.split)
[22:05:19] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (*.net *.split)
[22:05:19] *** Quits: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69) (*.net *.split)
[22:05:19] *** Quits: meain (~meain@2001:470:69fc:105::2db) (*.net *.split)
[22:05:19] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (*.net *.split)
[22:05:19] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[22:05:19] *** Quits: aead (~aead@user/aead) (*.net *.split)
[22:05:20] *** Quits: earthbre| (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[22:05:20] *** Quits: Thinkofname (~thinkthin@37.205.12.211) (*.net *.split)
[22:05:20] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[22:05:20] *** Quits: jlaffaye (~jlaffaye@user/jlaffaye) (*.net *.split)
[22:05:20] *** Quits: aaaaanews (~a@65.79.136.69) (*.net *.split)
[22:05:20] *** Quits: Wessie- (~Wessie@static.226.41.47.78.clients.your-server.de) (*.net *.split)
[22:05:20] *** Quits: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) (*.net *.split)
[22:05:20] *** Quits: hwrd (aa272caead@2604:bf00:561:2000::137) (*.net *.split)
[22:05:20] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[22:05:20] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[22:05:20] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (*.net *.split)
[22:05:20] *** Quits: Anderson-D (sid146635@id-146635.tinside.irccloud.com) (*.net *.split)
[22:05:20] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[22:05:20] *** Quits: eggsampler (~ur@s.id-rsa.pub) (*.net *.split)
[22:05:20] *** Quits: KDDLB (kevin@user/kddlb) (*.net *.split)
[22:05:20] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[22:05:20] *** Quits: alyx (alyx@atheme/alyx) (*.net *.split)
[22:05:20] *** Quits: mattikus (sid161707@user/mattikus) (*.net *.split)
[22:05:20] *** Quits: tomasfarias (~tomasfari@user/tomasfarias) (*.net *.split)
[22:05:20] *** Quits: chemsmith (~chemsmith@user/chemsmith) (*.net *.split)
[22:05:20] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (*.net *.split)
[22:05:20] *** Quits: bailsman (~Mm1@xls01.freecult.org) (*.net *.split)
[22:05:20] *** Quits: shadowchaser (~Shadowcha@liox.eu) (*.net *.split)
[22:05:20] *** Quits: particleflux (~particlef@ircb.hackthe.codes) (*.net *.split)
[22:05:20] *** Quits: martin_ (nobody@188.113.85.137) (*.net *.split)
[22:05:20] *** Quits: Nex8192 (~Nex8192@user/nex8192) (*.net *.split)
[22:05:20] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (*.net *.split)
[22:05:20] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[22:05:20] *** Quits: jjcm (~j@li263-105.members.linode.com) (*.net *.split)
[22:05:20] *** Quits: amodo (~derf@naeon.org) (*.net *.split)
[22:05:20] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[22:05:20] *** Quits: belak (~belak@user/belak) (*.net *.split)
[22:05:20] *** Quits: espero (~espero@ucitelonline.pedf.cuni.cz) (*.net *.split)
[22:05:20] *** Quits: nekron (~nekron@noordsee.de) (*.net *.split)
[22:05:21] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[22:05:21] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[22:05:21] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[22:05:21] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[22:05:21] *** Quits: qaisjp (sid26374@user/qaisjp) (*.net *.split)
[22:05:21] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[22:05:21] *** Quits: philmacfly (~philmacfl@galaxie.weltraumhochofen.space) (*.net *.split)
[22:05:21] *** Quits: goplay (uQokv148jU@user/goplay) (*.net *.split)
[22:05:21] *** Quits: SmokedCheese (nyoroon@2a01:7e01::f03c:91ff:fed1:d9ef) (*.net *.split)
[22:05:21] *** Quits: gueorgui (~gueorgui@user/gueorgui) (*.net *.split)
[22:05:21] *** Quits: vulp1ne (16abab341f@foxes.are.allowed.org) (*.net *.split)
[22:05:21] *** Quits: eloy (~quassel@2001:bc8:182c:650::1) (*.net *.split)
[22:05:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[22:05:21] *** Quits: borring (~borring@2001:470:69fc:105::1:532b) (*.net *.split)
[22:05:21] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (*.net *.split)
[22:05:21] *** Quits: MarkWatson[m] (~markwatso@2001:470:69fc:105::1:5be8) (*.net *.split)
[22:05:21] *** Quits: wkalt (~wkalt@user/wkalt) (*.net *.split)
[22:05:21] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[22:05:21] *** Quits: bougyman (~bougyman@user/bougyman) (*.net *.split)
[22:05:21] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[22:05:21] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[22:05:21] *** Quits: mjanssen (~mpcjansse@2a01:4f9:c011:75e6::1) (*.net *.split)
[22:05:22] *** Quits: eric_hill (sid323132@id-323132.tinside.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: Patater (~patater@104.248.173.85) (*.net *.split)
[22:05:22] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[22:05:22] *** Quits: nebiros (~nebiros@user/nebiros) (*.net *.split)
[22:05:22] *** Quits: seds (sid492514@user/seds) (*.net *.split)
[22:05:22] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[22:05:22] *** Quits: jimcroft_______ (sid148498@id-148498.uxbridge.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: nikki93 (sid200244@id-200244.tinside.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: Tharro (~Tharro@2001:bc8:1824:1623::1) (*.net *.split)
[22:05:22] *** Quits: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi) (*.net *.split)
[22:05:22] *** Quits: wmo (~quassel@2604:a880:2:d0::1df0:b001) (*.net *.split)
[22:05:22] *** Quits: mgubyt (u@mgub.yt) (*.net *.split)
[22:05:22] *** Quits: cultpony (~cultpony@user/cultpony) (*.net *.split)
[22:05:22] *** Quits: nachoes (~nachoes@user/nachoes) (*.net *.split)
[22:05:22] *** Quits: soren (sid124229@id-124229.uxbridge.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: theckman (sid295081@user/theckman) (*.net *.split)
[22:05:22] *** Quits: Shrike (sid305680@id-305680.helmsley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: lebster (sid17131@id-17131.hampstead.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: sam1 (~sam1@molly.millions.slask.me) (*.net *.split)
[22:05:22] *** Quits: marahin (~marahin@3lab/marahin) (*.net *.split)
[22:05:22] *** Quits: jezebel (jezebel@user/jezebel) (*.net *.split)
[22:05:22] *** Quits: mastardet (~mastardet@user/mastardet) (*.net *.split)
[22:05:22] *** Quits: muesli (~muesli@fribbledom.com) (*.net *.split)
[22:05:22] *** Quits: st3fan (sid43079@id-43079.lymington.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: nescafe1001 (sid211018@id-211018.tinside.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: jaguar (jag@maddshark.com) (*.net *.split)
[22:05:22] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[22:05:22] *** Quits: sjas (~sjas@irc.sjas.de) (*.net *.split)
[22:05:22] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[22:05:22] *** Quits: darkapex (~darkapex@user/darkapex) (*.net *.split)
[22:05:22] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[22:05:22] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (*.net *.split)
[22:05:22] *** Quits: halden (~halden@lden.im) (*.net *.split)
[22:05:22] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (*.net *.split)
[22:05:23] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (*.net *.split)
[22:05:23] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[22:05:23] *** Quits: fikran_ (~fikran@user/fikran) (*.net *.split)
[22:05:23] *** Quits: analogsalad (~analogsal@user/analogsalad) (*.net *.split)
[22:05:23] *** Quits: moog (~moog@107.77.244.71) (*.net *.split)
[22:05:23] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (*.net *.split)
[22:05:23] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (*.net *.split)
[22:05:23] *** Quits: Sam (b8f15a4bbd@golang/sam) (*.net *.split)
[22:05:23] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[22:05:23] *** Quits: mrig (~mrig@user/mrig) (*.net *.split)
[22:05:23] *** Quits: rogersm (~rogersm@90.166.180.250) (*.net *.split)
[22:05:23] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[22:05:23] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (*.net *.split)
[22:05:23] *** Quits: dr0n (~nabromov@92.40.255.113.threembb.co.uk) (*.net *.split)
[22:05:23] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[22:05:23] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[22:05:23] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (*.net *.split)
[22:05:23] *** Quits: aram (~aram@9front.army) (*.net *.split)
[22:05:23] *** Quits: cfjk (~cfjk@user/cfjk) (*.net *.split)
[22:05:23] *** Quits: aku_ (~aku@163.172.137.34) (*.net *.split)
[22:05:23] *** Quits: art_vandelay_ (~art_vande@142.126.234.156) (*.net *.split)
[22:05:23] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[22:05:23] *** Quits: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[22:05:23] *** Quits: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com) (*.net *.split)
[22:05:23] *** Quits: sztanpet (sztanpet@user/sztanpet) (*.net *.split)
[22:05:23] *** Quits: markkuit_ (~markkuit@93-43-234-84.ip94.fastwebnet.it) (*.net *.split)
[22:05:23] *** Quits: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (*.net *.split)
[22:05:23] *** Quits: monoxane (~monoxane@user/monoxane) (*.net *.split)
[22:05:23] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[22:05:24] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (*.net *.split)
[22:05:24] *** Quits: gbmor (gbmor@gbmor.org) (*.net *.split)
[22:05:24] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (*.net *.split)
[22:05:24] *** Quits: fogobogo (~fogobogo@user/fogobogo) (*.net *.split)
[22:05:24] *** Quits: thorsager (~mit@green.krakow.dk) (*.net *.split)
[22:05:24] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[22:05:24] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (*.net *.split)
[22:05:24] *** Quits: pgloor (~petergloo@mix.cubus.space) (*.net *.split)
[22:05:24] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[22:05:24] *** Quits: danderson (~dave@tailscale/danderson) (*.net *.split)
[22:05:24] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[22:05:24] *** Quits: Nixieboluo (~Nixiebolu@47.93.220.75) (*.net *.split)
[22:05:24] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[22:05:24] *** Quits: yelnah (~felix@193-119-99-118.tpgi.com.au) (*.net *.split)
[22:05:24] *** Quits: Ugrastil2 (~Ugrastil@89.40.112.204) (*.net *.split)
[22:05:24] *** Quits: alm (~alm@user/alm) (*.net *.split)
[22:05:24] *** Quits: pjs (~pjs@user/pjs) (*.net *.split)
[22:05:24] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (*.net *.split)
[22:05:24] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[22:05:24] *** Quits: skrzyp (~skrzyp@skrzyp.net) (*.net *.split)
[22:05:24] *** Quits: kinduff (~kinduff@user/kinduff) (*.net *.split)
[22:05:24] *** Quits: edr (~edr@user/edr) (*.net *.split)
[22:05:24] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (*.net *.split)
[22:05:24] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (*.net *.split)
[22:05:24] *** Quits: foobaz (~oofabz@199.58.97.156) (*.net *.split)
[22:05:24] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (*.net *.split)
[22:05:24] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (*.net *.split)
[22:05:24] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[22:05:24] *** Quits: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl) (*.net *.split)
[22:05:24] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (*.net *.split)
[22:05:24] *** Quits: RayS (~raysl@sdf1.xen.prgmr.com) (*.net *.split)
[22:05:24] *** Quits: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net) (*.net *.split)
[22:05:24] *** Quits: synfinatic (~synfinati@mail.synfin.net) (*.net *.split)
[22:05:24] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[22:05:24] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (*.net *.split)
[22:05:24] *** Quits: Jmainguy (~Jmainguy@mail.soh.re) (*.net *.split)
[22:05:25] *** Quits: Rudde (~rudde@netboot.io) (*.net *.split)
[22:05:25] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[22:05:25] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (*.net *.split)
[22:05:25] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[22:05:25] *** Quits: redquasar (~redquasar@redquasar.xyz) (*.net *.split)
[22:05:25] *** Quits: pztrn15 (~pztrn1@aurora.pztrn.name) (*.net *.split)
[22:05:25] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[22:05:25] *** Quits: mohan43u (~mohan@user/mohan43u) (*.net *.split)
[22:05:25] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[22:05:25] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[22:05:25] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (*.net *.split)
[22:05:25] *** Quits: defn- (~n0b0dy@user/defn) (*.net *.split)
[22:05:25] *** Quits: jay_wild (~very@138.68.15.221) (*.net *.split)
[22:05:25] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[22:05:25] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[22:05:25] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[22:05:25] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[22:05:25] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (*.net *.split)
[22:05:25] *** Quits: cim (~cim@205.185.117.110) (*.net *.split)
[22:05:25] *** Quits: jhchabran_ (~jhchabran@user/jhchabran) (*.net *.split)
[22:05:25] *** Quits: pvalenta (~petr@mail.open-system.cz) (*.net *.split)
[22:05:25] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (*.net *.split)
[22:05:25] *** Quits: Kaivo (~Kaivo@user/kaivo) (*.net *.split)
[22:05:25] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[22:05:25] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[22:05:25] *** Quits: sgarciapdx (~serge@irc.shork.io) (*.net *.split)
[22:05:25] *** Quits: iivvoo (~l@m3r.nl) (*.net *.split)
[22:05:25] *** Quits: sailorTheCat (~sailorCat@mail2.gajsin.name) (*.net *.split)
[22:05:25] *** Quits: achilleas (~ach@user/achilleas) (*.net *.split)
[22:05:25] *** Quits: nj (nicholas@stop.disconnecting.me) (*.net *.split)
[22:05:25] *** Quits: muirrum_ (~muirrum@sourcehut/user/muirrum) (*.net *.split)
[22:05:25] *** Quits: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net) (*.net *.split)
[22:05:25] *** Quits: Dieterbe (~Dieterbe@user/dieterbe) (*.net *.split)
[22:05:25] *** Quits: Louis (~Louis@my-hostna.me) (*.net *.split)
[22:05:25] *** Quits: PedroG1 (~android@45.77.216.181) (*.net *.split)
[22:05:25] *** Quits: gsora (~gsora@140.238.174.213) (*.net *.split)
[22:05:26] *** Quits: babilen (~babilen@user/babilen) (*.net *.split)
[22:05:26] *** Quits: t0xicCode (~t0xicCode@user/t0xiccode) (*.net *.split)
[22:05:26] *** Quits: klaas (~klaas@simply.kla.as) (*.net *.split)
[22:05:26] *** Quits: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne) (*.net *.split)
[22:05:26] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (*.net *.split)
[22:05:26] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (*.net *.split)
[22:05:26] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (*.net *.split)
[22:05:26] *** Quits: noord (noord@user/noord) (*.net *.split)
[22:05:26] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[22:05:26] *** Quits: slowtyper (~slowtyper@user/slowtyper) (*.net *.split)
[22:05:26] *** Quits: mrcus (mpirg@sourcehut/user/mirg) (*.net *.split)
[22:05:26] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (*.net *.split)
[22:05:26] *** Quits: averell (~averell@user/averell) (*.net *.split)
[22:05:26] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[22:05:26] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (*.net *.split)
[22:05:27] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[22:05:27] *** Quits: Archwyrm (~archwyrm@archwyrm.net) (*.net *.split)
[22:05:27] *** Quits: glider (~glider@user/glider) (*.net *.split)
[22:05:27] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (*.net *.split)
[22:05:27] *** Quits: jchase (~jeremycha@130.115.138.34.bc.googleusercontent.com) (*.net *.split)
[22:05:27] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[22:05:27] *** Quits: mathis (~mathis@user/mathis) (*.net *.split)
[22:05:27] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (*.net *.split)
[22:05:27] *** Quits: avery (sid501608@id-501608.uxbridge.irccloud.com) (*.net *.split)
[22:05:27] *** Quits: fnk (fnk@hswaw/fox/fnk) (*.net *.split)
[22:05:27] *** Quits: gildarts (16abab341f@user/gildarts) (*.net *.split)
[22:05:27] *** Quits: mika (~mika@odysseus.grml.info) (*.net *.split)
[22:05:27] *** Quits: crowbar (~crowbar@user/crowbar) (*.net *.split)
[22:05:27] *** Quits: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (*.net *.split)
[22:05:27] *** Quits: mic4ael (~mic4ael@kolodzie-pc.cern.ch) (*.net *.split)
[22:05:27] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[22:05:28] *** Quits: wielding (~wielding@user/wielding) (*.net *.split)
[22:05:28] *** Quits: mambang[m] (~mambang@user/mambang) (*.net *.split)
[22:05:28] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (*.net *.split)
[22:05:28] *** Quits: MD87 (~MD87@user/md87) (*.net *.split)
[22:05:28] *** Quits: akelly (24aca7a63b@2604:bf00:561:2000::152) (*.net *.split)
[22:05:28] *** Quits: Vigdis (~danj@2001:19f0:b001:9ee:5400:2ff:fec5:18cb) (*.net *.split)
[22:05:28] *** Quits: derfj (sid19429@id-19429.tinside.irccloud.com) (*.net *.split)
[22:05:28] *** Quits: yonson (~yonson@2600:8801:d900::16db) (*.net *.split)
[22:05:28] *** Quits: benji (~benji@user/benji) (*.net *.split)
[22:05:28] *** Quits: Lost (cold@user/lost) (*.net *.split)
[22:05:28] *** Quits: jda (~jadra@chai.0xbad.coffee) (*.net *.split)
[22:05:28] *** Quits: else- (sid23924@id-23924.tinside.irccloud.com) (*.net *.split)
[22:05:28] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[22:05:28] *** Quits: Logiar (~logiar@nerdsluts.net) (*.net *.split)
[22:05:28] *** Quits: Tykling (~tykling@irc.tyknet.dk) (*.net *.split)
[22:05:28] *** Quits: coder_kalyan (2c72974719@user/coderkalyan) (*.net *.split)
[22:05:28] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[22:05:28] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[22:05:28] *** Quits: mjl (sid16781@2a03:5180:f::418d) (*.net *.split)
[22:05:29] *** Quits: mendelmaleh (e58b23db5e@2604:bf00:561:2000::22b) (*.net *.split)
[22:05:29] *** Quits: tom5760 (73d4025b14@user/tom5760) (*.net *.split)
[22:05:29] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[22:05:29] *** Quits: toothlessgear (2c15493d69@user/toothlessgear) (*.net *.split)
[22:05:29] *** Quits: respite (~efekt@ec2-44-232-32-190.us-west-2.compute.amazonaws.com) (*.net *.split)
[22:05:29] *** Quits: stmuk (~steve@15.43.187.81.in-addr.arpa) (*.net *.split)
[22:05:29] *** Quits: zsnes (~dead@173.82.46.220) (*.net *.split)
[22:05:29] *** Quits: avoozl2 (~avoozl@escaflowne.hro.nl) (*.net *.split)
[22:05:29] *** Quits: arusso-alt (~arusso@nubsicle.aaron-russo.com) (*.net *.split)
[22:05:29] *** Quits: qzio_ (~qzio@198.167.223.200) (*.net *.split)
[22:05:29] *** Quits: huf (huf@user/huf) (*.net *.split)
[22:05:29] *** Quits: simoneb_ (~simone@static.39.20.203.116.clients.your-server.de) (*.net *.split)
[22:05:29] *** Quits: corby (~corby@c0rby.de) (*.net *.split)
[22:05:29] *** Quits: penguwin (~penguwin@fribbledom.com) (*.net *.split)
[22:05:29] *** Quits: scjosh (~scjosh@206.189.79.69) (*.net *.split)
[22:05:29] *** Quits: pots9038 (~pots@20.51.220.66) (*.net *.split)
[22:05:29] *** Quits: danieln (~danieln@erebor.danieln.de) (*.net *.split)
[22:05:29] *** Quits: A_Dragon (A_D@libera/staff/dragon) (*.net *.split)
[22:05:29] *** Quits: Xizor_ (~Xizor@151.ip-51-68-121.eu) (*.net *.split)
[22:05:29] *** Quits: notepad7 (~notepad@129.159.46.243) (*.net *.split)
[22:05:29] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (*.net *.split)
[22:05:29] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[22:05:29] *** Quits: schaeffer (~schaeffer@user/schaeffer) (*.net *.split)
[22:05:29] *** Quits: CRThaze1 (~weechat@188.166.44.58) (*.net *.split)
[22:05:30] *** Quits: epony (~epony@user/epony) (*.net *.split)
[22:05:30] *** Quits: Latrina (~Latrina@user/latrina) (*.net *.split)
[22:05:30] *** Quits: ugjka (~ugjka@ugjka.net) (*.net *.split)
[22:05:30] *** Quits: avemestr (~avemestr@2a01:4f8:121:228f::2) (*.net *.split)
[22:05:30] *** Quits: teocle (~t@hex.plasm.in) (*.net *.split)
[22:05:30] *** Quits: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb) (*.net *.split)
[22:05:30] *** Quits: yodajelly (~p@2001:470:69fc:105::1:e8) (*.net *.split)
[22:05:30] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (*.net *.split)
[22:05:30] *** Quits: hhes (sid420846@id-420846.ilkley.irccloud.com) (*.net *.split)
[22:05:31] *** Quits: Thedarkb1-Work (~Thedarkb@62.232.253.82) (*.net *.split)
[22:05:31] *** Quits: mncheck (~mncheck@193.224.205.254) (*.net *.split)
[22:05:31] *** Quits: karl (~Karlssel@2001:41d0:8:9a4b::1) (*.net *.split)
[22:05:31] *** Quits: dale (dale@user/dale) (*.net *.split)
[22:05:31] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (*.net *.split)
[22:05:31] *** Quits: nemesis91 (~nem@user/nemesis91) (*.net *.split)
[22:05:31] *** Quits: jsanford (~jsanford@user/jsanford) (*.net *.split)
[22:05:31] *** Quits: misuto (~misuto@h-155-4-73-21.A192.priv.bahnhof.se) (*.net *.split)
[22:05:31] *** Quits: ds (~ds@user/ds) (*.net *.split)
[22:05:31] *** Quits: glats (~glats@45.77.73.141) (*.net *.split)
[22:05:31] *** Quits: hgl (hgl@user/hgl) (*.net *.split)
[22:05:31] *** Quits: franitor (~frank@user/franitor) (*.net *.split)
[22:05:31] *** Quits: welt (~welt@willow.spiderden.net) (*.net *.split)
[22:05:31] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[22:05:31] *** Quits: 068AAC0VA (Rhys@help.lux.melted.me) (*.net *.split)
[22:05:31] *** Quits: pyzozord (pyzozord@user/pyzozord) (*.net *.split)
[22:05:31] *** Quits: znpy (~znpy@user/znpy) (*.net *.split)
[22:05:31] *** Quits: caverton (~caverton@ercro.tech) (*.net *.split)
[22:05:31] *** Quits: chder (~chder@user/chder) (*.net *.split)
[22:05:32] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[22:05:32] *** Quits: j416 (~j416@user/j416) (*.net *.split)
[22:05:32] *** Quits: daved (~daved@162.67.197.35.bc.googleusercontent.com) (*.net *.split)
[22:05:32] *** Quits: wim (~wim@42.be) (*.net *.split)
[22:05:32] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[22:05:32] *** Quits: _\_ (~o@user/ding) (*.net *.split)
[22:05:32] *** Quits: gl (~x@pwn.lu) (*.net *.split)
[22:05:32] *** Quits: arcanez (~arcanez@warpedreality.org) (*.net *.split)
[22:05:32] *** Quits: xzr (xzar@shell.troopers.fi) (*.net *.split)
[22:05:32] *** Quits: Xu_R (~dev-dsk-x@user/xu-r/x-9187770) (*.net *.split)
[22:05:32] *** Quits: jesk (~jesk@stakka.errxtx.net) (*.net *.split)
[22:05:32] *** Quits: Eren[m]1 (~hellstabb@2001:470:69fc:105::f056) (*.net *.split)
[22:05:32] *** Quits: anonton (~anonton@user/anonton) (*.net *.split)
[22:05:32] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[22:05:32] *** Quits: gio[m] (~giolekvam@2001:470:69fc:105::1:16a) (*.net *.split)
[22:05:33] *** Quits: loggingbot (~loggingbo@user/loggingbot) (*.net *.split)
[22:05:33] *** Quits: jemaclus (~jemaclus@64.227.108.73) (*.net *.split)
[22:05:33] *** Quits: frebib (~frebibcha@nerdhouse.io) (*.net *.split)
[22:05:33] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[22:05:33] *** Quits: evilop (~Urist@archlinux/op/MrElendig) (*.net *.split)
[22:05:33] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[22:05:33] *** Quits: houze (~houze@user/houze) (*.net *.split)
[22:05:33] *** Quits: DHowett (~dustin@kaus.howett.net) (*.net *.split)
[22:05:33] *** Quits: nakedeyes (~nathan@user/nandormagyar) (*.net *.split)
[22:05:33] *** Quits: cooper_ (~mitchell@user/cooper) (*.net *.split)
[22:05:33] *** Quits: clee_ (~clee@tali.t0k.org) (*.net *.split)
[22:05:33] *** Quits: Foxboron (~fox@archlinux/trusteduser/Foxboron) (*.net *.split)
[22:05:33] *** Quits: zwindl (~abc@user/abc) (*.net *.split)
[22:05:33] *** Quits: connor_goodwolf_ (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[22:05:33] *** Quits: oznt (~oznt@vmd62887.contaboserver.net) (*.net *.split)
[22:05:33] *** Quits: pez_ (~pez@user/pez) (*.net *.split)
[22:05:33] *** Quits: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001) (*.net *.split)
[22:05:33] *** Quits: clemens3 (~clemens@225.40.150.83.ftth.as8758.net) (*.net *.split)
[22:05:33] *** Quits: thinkofher (~thinkofhe@user/thinkofher) (*.net *.split)
[22:05:34] *** Quits: m-kad (~quassel@2a02:c207:2043:4525::1) (*.net *.split)
[22:05:34] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[22:05:34] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (*.net *.split)
[22:05:34] *** Quits: trollixx (sid289131@id-289131.uxbridge.irccloud.com) (*.net *.split)
[22:05:34] *** Quits: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com) (*.net *.split)
[22:05:34] *** Quits: recursion (sid504862@id-504862.ilkley.irccloud.com) (*.net *.split)
[22:05:34] *** Quits: nickster (~nickster@67.207.91.6) (*.net *.split)
[22:05:34] *** Quits: zunk (~zunk@user/zunk) (*.net *.split)
[22:05:34] *** Quits: jdrab (~jdrab@user/jdrab) (*.net *.split)
[22:05:34] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[22:05:34] *** Quits: GinjaNinja32 (~nyx@thanatos.gn32.uk) (*.net *.split)
[22:05:34] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[22:05:34] *** Quits: ollien (~ollien@ollien.com) (*.net *.split)
[22:05:34] *** Quits: frobnitz (~ian@photon.remmler.org) (*.net *.split)
[22:05:34] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[22:05:34] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (*.net *.split)
[22:05:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (*.net *.split)
[22:05:34] *** Quits: rendar_ (~rendar@user/rendar) (*.net *.split)
[22:05:34] *** Quits: alwyn (~alwyn@user/alwyn) (*.net *.split)
[22:05:34] *** Quits: redlegion (sid429547@id-429547.ilkley.irccloud.com) (*.net *.split)
[22:05:34] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (*.net *.split)
[22:05:34] *** Quits: egy (egy@tilde.team) (*.net *.split)
[22:05:35] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[22:05:35] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (*.net *.split)
[22:05:35] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (*.net *.split)
[22:05:35] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: jamra_ (sid16103@id-16103.ilkley.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: vds__ (sid12483@id-12483.helmsley.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: hjmcnew_____ (sid86092@id-86092.tinside.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: orninator (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (*.net *.split)
[22:05:35] *** Quits: maxamillion (sid276220@ansible/staff/maxamillion) (*.net *.split)
[22:05:35] *** Quits: opc0de (~nathan@user/opcode) (*.net *.split)
[22:05:35] *** Quits: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com) (*.net *.split)
[22:05:35] *** Quits: ikke (~kevin@alpine/developer/ikke) (*.net *.split)
[22:05:35] *** Quits: preisi (~preisi@irc.prei.si) (*.net *.split)
[22:05:35] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[22:05:35] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (*.net *.split)
[22:05:35] *** Quits: amolith (d1421e166a@nixnet/founder/amolith) (*.net *.split)
[22:05:36] *** Quits: wikro_ (~foo@hjkl.se) (*.net *.split)
[22:05:36] *** Quits: gshumway (~gshumway@user/gshumway) (*.net *.split)
[22:05:36] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[22:05:36] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: matt1982__ (~matt1982@178.62.73.7) (*.net *.split)
[22:05:36] *** Quits: hegemoOn (~netmonk@195-154-92-20.rev.poneytelecom.eu) (*.net *.split)
[22:05:36] *** Quits: pombreda (sid227801@id-227801.tinside.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: gluon (~gluon@2a01:4f8:c0c:e2da::1) (*.net *.split)
[22:05:36] *** Quits: ramrunner (~dsp@78.141.218.152) (*.net *.split)
[22:05:36] *** Quits: newton (james@user/newton) (*.net *.split)
[22:05:36] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[22:05:36] *** Quits: LawnGnome (~LawnGnome@user/lawngnome) (*.net *.split)
[22:05:36] *** Quits: zutt (~zutt@user/zutt) (*.net *.split)
[22:05:36] *** Quits: roasbeef (~roasbeef@104.131.26.124) (*.net *.split)
[22:05:36] *** Quits: sobukus (~sobukus@sourcemage/mage/sobukus) (*.net *.split)
[22:05:36] *** Quits: Disconsented (~quassel@107.170.227.20) (*.net *.split)
[22:05:36] *** Quits: bertiger (~bertiger@user/bertiger) (*.net *.split)
[22:05:36] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (*.net *.split)
[22:05:36] *** Quits: hanzo (uid532183@user/hanzo) (*.net *.split)
[22:05:36] *** Quits: henry40408 (~henry4040@175.181.155.165) (*.net *.split)
[22:05:36] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (*.net *.split)
[22:05:36] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (*.net *.split)
[22:05:37] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[22:05:37] *** Quits: et (~et@user/et) (*.net *.split)
[22:05:37] *** Quits: Guest1499 (~Leon@249.sub-174-198-197.myvzw.com) (*.net *.split)
[22:05:37] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[22:05:37] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[22:05:37] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[22:05:37] *** Quits: GJdan_ (~quassel@107-190-26-133.cpe.teksavvy.com) (*.net *.split)
[22:05:37] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (*.net *.split)
[22:05:37] *** Quits: ryu_ (~ryusaku@c6A334BC1.dhcp.as2116.net) (*.net *.split)
[22:05:37] *** Quits: megamus_prime (~megamus_p@46.101.47.16) (*.net *.split)
[22:05:37] *** Quits: hedon_ (~hedon@user/hedon) (*.net *.split)
[22:05:37] *** Quits: Freman (~Freman@185.83.217.144) (*.net *.split)
[22:05:37] *** Quits: haniaF_ (~haniaF@79.191.101.105.ipv4.supernova.orange.pl) (*.net *.split)
[22:05:37] *** Quits: dmgk (~dmgk@user/dmgk) (*.net *.split)
[22:05:37] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[22:05:37] *** Quits: lazyreader (~lazyreade@user/lazyreader) (*.net *.split)
[22:05:37] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (*.net *.split)
[22:05:37] *** Quits: acosta (~acosta@163.172.62.165) (*.net *.split)
[22:05:37] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[22:05:37] *** Quits: grumb2 (~grumb@rint.osaka) (*.net *.split)
[22:05:37] *** Quits: orthoplex64 (~crm@70.120.0.94) (*.net *.split)
[22:05:37] *** Quits: jackneill (~jackneill@20014C4E181DC8008732AFADA4BAB47A.dsl.pool.telekom.hu) (*.net *.split)
[22:05:37] *** Quits: effprime_ (~effprime@user/effprime) (*.net *.split)
[22:05:38] *** Quits: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net) (*.net *.split)
[22:05:38] *** Quits: amigan (dramoray@dtvax.dynatron.me) (*.net *.split)
[22:05:38] *** Quits: novns (~novns@user/novns) (*.net *.split)
[22:05:38] *** Quits: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (*.net *.split)
[22:05:38] *** Quits: fling (~fling@user/fling) (*.net *.split)
[22:05:38] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (*.net *.split)
[22:05:38] *** Quits: xse (~xse@user/xse) (*.net *.split)
[22:05:38] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:780f:2dd0:e9d9:61c8:7724) (*.net *.split)
[22:05:38] *** Quits: morgabra (sid500580@user/morgabra) (*.net *.split)
[22:05:38] *** Quits: jannis (~jannis@user/xjs) (*.net *.split)
[22:05:38] *** Quits: feuerrot (~feuerrot@shells.chaosdorf.de) (*.net *.split)
[22:05:38] *** Quits: ethoxy (~root@bison.sh3ll.ru) (*.net *.split)
[22:05:38] *** Quits: maidhc (~maidhc@user/maidhc) (*.net *.split)
[22:05:38] *** Quits: moto (~moto@user/moto) (*.net *.split)
[22:05:38] *** Quits: zwr (~zwr@2804:d45:b966:fb00:4478:5288:66d4:ebc1) (*.net *.split)
[22:05:38] *** Quits: ilpanda (ilpanda@user/ilpanda) (*.net *.split)
[22:05:38] *** Quits: itok (sid418430@id-418430.ilkley.irccloud.com) (*.net *.split)
[22:05:38] *** Quits: idstam (~idstam@2.70.64.205.mobile.tre.se) (*.net *.split)
[22:05:38] *** Quits: rewt (~default@user/rewt) (*.net *.split)
[22:05:38] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (*.net *.split)
[22:05:38] *** Quits: deniska (~deniska@user/deniska) (*.net *.split)
[22:05:38] *** Quits: JPT (~jpt@classified.name) (*.net *.split)
[22:05:38] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (*.net *.split)
[22:05:38] *** Quits: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f) (*.net *.split)
[22:05:38] *** Quits: qrpnxz (abc4f95c31@user/qrpnxz) (*.net *.split)
[22:05:38] *** Quits: jimeh (~jimeh@matrix.bah.io) (*.net *.split)
[22:05:38] *** Quits: s0k1t (~user@vps-f3ad6eb6.vps.ovh.ca) (*.net *.split)
[22:05:38] *** Quits: rvalue (~rvalue@user/rvalue) (*.net *.split)
[22:05:38] *** Quits: Cork (~Cork@user/cork) (*.net *.split)
[22:05:38] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[22:05:38] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[22:05:38] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[22:05:38] *** Quits: jolan (~jolan@ec2.jolan.org) (*.net *.split)
[22:05:38] *** Quits: gnoirzox (~gnoirzox@user/gnoirzox) (*.net *.split)
[22:05:39] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (*.net *.split)
[22:05:39] *** Quits: brooks736699 (~brooks@23.157.160.131) (*.net *.split)
[22:05:39] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (*.net *.split)
[22:05:39] *** Quits: losinggeneration (~quassel@64.225.54.254) (*.net *.split)
[22:05:39] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (*.net *.split)
[22:05:39] *** Quits: Echoz_ (~chris@user/echoz) (*.net *.split)
[22:05:39] *** Quits: Teckla (uid172075@user/teckla) (*.net *.split)
[22:05:39] *** Quits: mooff (mooff@awful.cooking) (*.net *.split)
[22:05:39] *** Quits: cation (cation@user/cation) (*.net *.split)
[22:05:39] *** Quits: jole (~jole@2a05:f480:2000:1624:5400:3ff:fe9c:b8a8) (*.net *.split)
[22:05:39] *** Quits: psil (~krwlisp@karatefylla.nu) (*.net *.split)
[22:05:39] *** Quits: zalt (~zalt@user/zalt) (*.net *.split)
[22:05:39] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[22:05:39] *** Quits: void09 (~void@150.230.21.57) (*.net *.split)
[22:05:39] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[22:05:39] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[22:05:39] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[22:05:39] *** Quits: anessen97 (~Anessen97@host-79-41-170-37.retail.telecomitalia.it) (*.net *.split)
[22:05:39] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[22:05:39] *** Quits: albertito (~nil@37.228.204.251) (*.net *.split)
[22:05:39] *** Quits: ventic (ircbouncer@3v.fi) (*.net *.split)
[22:05:39] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (*.net *.split)
[22:05:39] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[22:05:39] *** Quits: dupondje (~dupondje@artemis.dupie.be) (*.net *.split)
[22:05:39] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[22:05:39] *** Quits: acohn (acohn@wikipedia/alex-cohn) (*.net *.split)
[22:05:39] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[22:05:39] *** Quits: demsh (srjgxif39q@hermod.demsh.org) (*.net *.split)
[22:05:39] *** Quits: naos (~naos@user/naos) (*.net *.split)
[22:05:39] *** Quits: higgins (~higgins@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[22:05:39] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[22:06:03] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[22:10:20] *** Joins: _rubik (~rubik@user/rubik/x-6853868)
[22:10:20] *** Joins: argonel (argonel@KDE/argonel)
[22:10:20] *** Joins: DreamweaverN (~Dreamweav@37.48.111.199)
[22:10:20] *** Joins: Ekho- (~Ekho@user/ekho)
[22:10:20] *** Joins: vhost- (~vhost@65.102.48.134)
[22:10:20] *** Joins: Kane (~Kane@portal.yarg.fr)
[22:10:20] *** Joins: Guest7524 (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[22:10:20] *** Joins: rabbitear (~juice@142.93.115.104)
[22:10:20] *** Joins: icy (~icy@user/icy)
[22:10:20] *** Joins: leonarth (~leonarth@user/leonarth)
[22:10:20] *** Joins: lord4163 (~lord4163@90-230-194-205-no86.tbcn.telia.com)
[22:10:20] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[22:10:20] *** Joins: pinky_ (pinky@minime.fef.net)
[22:10:20] *** Joins: mikeputnam2 (~mikeputna@wilug/mikeputnam)
[22:10:20] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[22:10:20] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:10:20] *** Joins: OnkelUll1 (~uol@ptx.hi.pengutronix.de)
[22:10:20] *** Joins: llorllale1 (~llorllale@2607:9880:3a18:69:bd04:28fb:9b4c:879)
[22:10:20] *** Joins: hendry1 (~hendry@210.23.22.2)
[22:10:20] *** Joins: sh1bum1 (~shibumi@archlinux/trusteduser/shibumi)
[22:10:20] *** Joins: purpleid1a (~james@user/purpleidea)
[22:10:20] *** Joins: TDT_ (~TDT@20.118.225.139)
[22:10:20] *** Joins: tpr1 (~tpr@user/tpr)
[22:10:20] *** Joins: kulak1 (~kulak@user/kulak)
[22:10:20] *** Joins: kodah` (~kodah@user/kodah)
[22:10:20] *** Joins: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[22:10:20] *** Joins: Meroje_ (~Meroje@user/meroje)
[22:10:20] *** Joins: sshow_ (~sshow@neo.hackeriet.no)
[22:10:20] *** Joins: prime (~prime@user/prime)
[22:10:20] *** Joins: chilvers1 (~chilversc@user/chilversc)
[22:10:20] *** Joins: Arsen_ (arsen@managarm/dev/Arsen)
[22:10:20] *** Joins: longsleep_ (~quassel@2a02:c207:3001:216:1000::1)
[22:10:20] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[22:10:20] *** Joins: khyr0n_ (~khyr0n@2806:2f0:9141:835f:f234:49cd:2a30:272f)
[22:10:20] *** Joins: liam__ (sid7517@id-7517.helmsley.irccloud.com)
[22:10:20] *** Joins: decartes (sid240036@id-240036.helmsley.irccloud.com)
[22:10:20] *** Joins: bkicher_ (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689)
[22:10:20] *** Joins: syg (sid521913@id-521913.lymington.irccloud.com)
[22:10:20] *** Joins: Nspace_ (~Nspace@user/nspace)
[22:10:20] *** Joins: AsenMx (~asen@user/asenmx)
[22:10:20] *** Joins: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com)
[22:10:20] *** Joins: psb__ (sid500598@id-500598.ilkley.irccloud.com)
[22:10:20] *** Joins: KBmePLS (~KBme@ra.ndom.dev)
[22:10:20] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[22:10:20] *** Joins: bbear_ (~znc@21212.s.t4vps.eu)
[22:10:20] *** Joins: riverdc_ (river@2600:3c01::f03c:92ff:fed1:4643)
[22:10:20] *** Joins: Dreamwea- (~Dreamweav@37.48.111.199)
[22:10:20] *** Joins: gsthnz- (~gsthnz@user/gsthnz)
[22:10:20] *** Joins: xoebus (sid61319@id-61319.uxbridge.irccloud.com)
[22:10:20] *** Joins: flukes (sid527792@user/flukes)
[22:10:20] *** Joins: kubblai (sid478659@fedora/kubblai)
[22:10:20] *** Joins: jzelinskie (sid17772@user/jzelinskie)
[22:10:20] *** Joins: reenix- (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[22:10:20] *** Joins: tumdum_ (uid783@id-783.helmsley.irccloud.com)
[22:10:20] *** Joins: buffet (~buffet@buffet.sh)
[22:10:20] *** Joins: mort (~mort@188.166.114.29)
[22:10:20] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[22:10:20] *** Joins: mdel (~mdel@user/mdel)
[22:10:20] *** Joins: hwm4rgs (~hwm4rgs@user/hwm4rgs)
[22:10:20] *** Joins: marcel (~marcel@user/marcel)
[22:10:20] *** Joins: Shimmy (~Shimmy@user/shimmy)
[22:10:20] *** Joins: fikran_ (~fikran@user/fikran)
[22:10:20] *** Joins: shka (~herr@109.231.0.226)
[22:10:20] *** Joins: darkapex (~darkapex@user/darkapex)
[22:10:20] *** Joins: hanzo (uid532183@user/hanzo)
[22:10:20] *** Joins: henry40408 (~henry4040@175.181.155.165)
[22:10:20] *** Joins: mickey8 (~user@user/mickey)
[22:10:20] *** Joins: g2anj (~v@58.228.230.4)
[22:10:20] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[22:10:20] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:10:20] *** Joins: halden (~halden@lden.im)
[22:10:20] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[22:10:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[22:10:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[22:10:20] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[22:10:20] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[22:10:20] *** Joins: analogsalad (~analogsal@user/analogsalad)
[22:10:20] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[22:10:20] *** Joins: moog (~moog@107.77.244.71)
[22:10:20] *** Joins: lechner (~lechner@debian/lechner)
[22:10:20] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[22:10:20] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[22:10:20] *** Joins: Sam (b8f15a4bbd@golang/sam)
[22:10:20] *** Joins: et (~et@user/et)
[22:10:20] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[22:10:20] *** Joins: mrig (~mrig@user/mrig)
[22:10:20] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:10:20] *** Joins: rendar_ (~rendar@user/rendar)
[22:10:20] *** Joins: rogersm (~rogersm@90.166.180.250)
[22:10:20] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[22:10:20] *** Joins: dr0n (~nabromov@92.40.255.113.threembb.co.uk)
[22:10:20] *** Joins: alwyn (~alwyn@user/alwyn)
[22:10:20] *** Joins: zalt (~zalt@user/zalt)
[22:10:20] *** molybdenum.libera.chat sets mode: +o Sam
[22:10:20] *** Joins: Guest1499 (~Leon@249.sub-174-198-197.myvzw.com)
[22:10:20] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[22:10:20] *** Joins: sagax (~sagax_nb@user/sagax)
[22:10:20] *** Joins: sus (zero@user/zeromomentum)
[22:10:20] *** Joins: redlegion (sid429547@id-429547.ilkley.irccloud.com)
[22:10:20] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[22:10:20] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[22:10:20] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[22:10:20] *** Joins: EdFletcher (~PKD@user/edfletcher)
[22:10:20] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:10:20] *** Joins: koo5_ (~quassel@51.140.155.227)
[22:10:20] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[22:10:20] *** Joins: fef (~thedawn@user/thedawn)
[22:10:20] *** Joins: egy (egy@tilde.team)
[22:10:20] *** Joins: aram (~aram@9front.army)
[22:10:20] *** Joins: babilen (~babilen@user/babilen)
[22:10:20] *** Joins: t0xicCode (~t0xicCode@user/t0xiccode)
[22:10:20] *** Joins: cfjk (~cfjk@user/cfjk)
[22:10:20] *** Joins: aku_ (~aku@163.172.137.34)
[22:10:20] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[22:10:20] *** Joins: GJdan_ (~quassel@107-190-26-133.cpe.teksavvy.com)
[22:10:20] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[22:10:20] *** Joins: ryu_ (~ryusaku@c6A334BC1.dhcp.as2116.net)
[22:10:20] *** Joins: megamus_prime (~megamus_p@46.101.47.16)
[22:10:20] *** Joins: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[22:10:20] *** Joins: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[22:10:20] *** Joins: hedon_ (~hedon@user/hedon)
[22:10:20] *** Joins: sztanpet (sztanpet@user/sztanpet)
[22:10:20] *** Joins: haniaF_ (~haniaF@79.191.101.105.ipv4.supernova.orange.pl)
[22:10:20] *** Joins: Freman (~Freman@185.83.217.144)
[22:10:20] *** Joins: dmgk (~dmgk@user/dmgk)
[22:10:20] *** Joins: markkuit_ (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[22:10:20] *** Joins: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[22:10:20] *** Joins: SoF (~skius@user/skius)
[22:10:20] *** Joins: monoxane (~monoxane@user/monoxane)
[22:10:20] *** Joins: tofran (~tofran@37.189.158.134)
[22:10:20] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[22:10:20] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[22:10:20] *** Joins: acosta (~acosta@163.172.62.165)
[22:10:20] *** Joins: grumb2 (~grumb@rint.osaka)
[22:10:20] *** Joins: orthoplex64 (~crm@70.120.0.94)
[22:10:20] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:10:20] *** Joins: jackneill (~jackneill@20014C4E181DC8008732AFADA4BAB47A.dsl.pool.telekom.hu)
[22:10:20] *** Joins: califax (~califax@user/califx)
[22:10:20] *** Joins: effprime_ (~effprime@user/effprime)
[22:10:20] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:10:20] *** molybdenum.libera.chat sets mode: +v aram
[22:10:20] *** Joins: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net)
[22:10:20] *** Joins: gbmor (gbmor@gbmor.org)
[22:10:20] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[22:10:20] *** Joins: fogobogo (~fogobogo@user/fogobogo)
[22:10:20] *** Joins: thorsager (~mit@green.krakow.dk)
[22:10:20] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[22:10:20] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[22:10:20] *** Joins: klaas (~klaas@simply.kla.as)
[22:10:20] *** Joins: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de)
[22:10:20] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[22:10:20] *** Joins: novns (~novns@user/novns)
[22:10:20] *** Joins: pgloor (~petergloo@mix.cubus.space)
[22:10:20] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[22:10:20] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[22:10:20] *** Joins: fling (~fling@user/fling)
[22:10:20] *** Joins: anessen97 (~Anessen97@host-79-41-170-37.retail.telecomitalia.it)
[22:10:20] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[22:10:20] *** Joins: xse (~xse@user/xse)
[22:10:20] *** Joins: danderson (~dave@tailscale/danderson)
[22:10:20] *** Joins: morgabra (sid500580@user/morgabra)
[22:10:20] *** Joins: jannis (~jannis@user/xjs)
[22:10:20] *** Joins: noarb (~noarb@user/noarb)
[22:10:20] *** Joins: feuerrot (~feuerrot@shells.chaosdorf.de)
[22:10:20] *** Joins: ethoxy (~root@bison.sh3ll.ru)
[22:10:20] *** Joins: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne)
[22:10:20] *** Joins: maidhc (~maidhc@user/maidhc)
[22:10:20] *** Joins: moto (~moto@user/moto)
[22:10:20] *** Joins: Nixieboluo (~Nixiebolu@47.93.220.75)
[22:10:20] *** Joins: zwr (~zwr@2804:d45:b966:fb00:4478:5288:66d4:ebc1)
[22:10:20] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[22:10:20] *** Joins: yelnah (~felix@193-119-99-118.tpgi.com.au)
[22:10:20] *** Joins: bindu (~bindu@user/bindu)
[22:10:20] *** Joins: ilpanda (ilpanda@user/ilpanda)
[22:10:20] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[22:10:20] *** Joins: epony (~epony@user/epony)
[22:10:20] *** Joins: idstam (~idstam@2.70.64.205.mobile.tre.se)
[22:10:20] *** Joins: rewt (~default@user/rewt)
[22:10:20] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[22:10:20] *** Joins: deniska (~deniska@user/deniska)
[22:10:20] *** Joins: JPT (~jpt@classified.name)
[22:10:20] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[22:10:20] *** Joins: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f)
[22:10:20] *** Joins: marahin (~marahin@3lab/marahin)
[22:10:20] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[22:10:20] *** Joins: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7)
[22:10:20] *** Joins: jimeh (~jimeh@matrix.bah.io)
[22:10:20] *** molybdenum.libera.chat sets mode: +v danderson
[22:10:20] *** Joins: Ugrastil2 (~Ugrastil@89.40.112.204)
[22:10:20] *** Joins: s0k1t (~user@vps-f3ad6eb6.vps.ovh.ca)
[22:10:20] *** Joins: wim (~wim@42.be)
[22:10:20] *** Joins: alm (~alm@user/alm)
[22:10:20] *** Joins: rvalue (~rvalue@user/rvalue)
[22:10:20] *** Joins: Cork (~Cork@user/cork)
[22:10:20] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[22:10:20] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[22:10:20] *** Joins: justIrresolute (~justache@user/justache)
[22:10:20] *** Joins: pjs (~pjs@user/pjs)
[22:10:20] *** Joins: nitrix (~nitrix@user/nitrix)
[22:10:20] *** Joins: gnoirzox (~gnoirzox@user/gnoirzox)
[22:10:20] *** Joins: jolan (~jolan@ec2.jolan.org)
[22:10:20] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[22:10:20] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[22:10:20] *** Joins: brooks736699 (~brooks@23.157.160.131)
[22:10:20] *** Joins: synfinatic (~synfinati@mail.synfin.net)
[22:10:20] *** Joins: a1paca (~a1paca@user/a1paca)
[22:10:20] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[22:10:20] *** Joins: skrzyp (~skrzyp@skrzyp.net)
[22:10:20] *** Joins: losinggeneration (~quassel@64.225.54.254)
[22:10:20] *** Joins: kinduff (~kinduff@user/kinduff)
[22:10:20] *** Joins: edr (~edr@user/edr)
[22:10:20] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[22:10:20] *** Joins: Echoz_ (~chris@user/echoz)
[22:10:20] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[22:10:20] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[22:10:20] *** Joins: Eren[m]1 (~hellstabb@2001:470:69fc:105::f056)
[22:10:20] *** Joins: Teckla (uid172075@user/teckla)
[22:10:20] *** Joins: mooff (mooff@awful.cooking)
[22:10:20] *** Joins: Latrina (~Latrina@user/latrina)
[22:10:20] *** Joins: ugjka (~ugjka@ugjka.net)
[22:10:20] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[22:10:20] *** Joins: cation (cation@user/cation)
[22:10:20] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[22:10:20] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[22:10:20] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[22:10:20] *** Joins: pyzozord (pyzozord@user/pyzozord)
[22:10:20] *** Joins: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl)
[22:10:20] *** Joins: jole (~jole@2a05:f480:2000:1624:5400:3ff:fe9c:b8a8)
[22:10:20] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[22:10:20] *** Joins: RayS (~raysl@sdf1.xen.prgmr.com)
[22:10:20] *** Joins: avemestr (~avemestr@2a01:4f8:121:228f::2)
[22:10:20] *** Joins: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net)
[22:10:20] *** Joins: Jigsy (~Jigsy@user/jigsy)
[22:10:20] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[22:10:20] *** Joins: teocle (~t@hex.plasm.in)
[22:10:20] *** Joins: Jmainguy (~Jmainguy@mail.soh.re)
[22:10:20] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[22:10:20] *** Joins: psydroid (~psydroid@user/psydroid)
[22:10:20] *** Joins: wielding (~wielding@user/wielding)
[22:10:20] *** Joins: Rudde (~rudde@netboot.io)
[22:10:20] *** Joins: pztrn (~pztrn@user/pztrn)
[22:10:20] *** Joins: anonton (~anonton@user/anonton)
[22:10:20] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[22:10:20] *** Joins: mambang[m] (~mambang@user/mambang)
[22:10:20] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[22:10:20] *** Joins: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb)
[22:10:20] *** Joins: borring (~borring@2001:470:69fc:105::1:532b)
[22:10:20] *** Joins: kadoban (~kadoban@user/kadoban)
[22:10:20] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[22:10:20] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[22:10:20] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[22:10:20] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[22:10:20] *** Joins: yodajelly (~p@2001:470:69fc:105::1:e8)
[22:10:20] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[22:10:20] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[22:10:20] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[22:10:20] *** Joins: gio[m] (~giolekvam@2001:470:69fc:105::1:16a)
[22:10:20] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[22:10:20] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[22:10:20] *** Joins: MarkWatson[m] (~markwatso@2001:470:69fc:105::1:5be8)
[22:10:20] *** Joins: psil (~krwlisp@karatefylla.nu)
[22:10:20] *** Joins: kcrk (~kcrk@user/kcrk)
[22:10:20] *** Joins: void09 (~void@150.230.21.57)
[22:10:20] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:10:20] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[22:10:20] *** Joins: wolfshappen (~waff@irc.furworks.de)
[22:10:20] *** Joins: gsora (~gsora@140.238.174.213)
[22:10:20] *** Joins: PedroG1 (~android@45.77.216.181)
[22:10:20] *** Joins: Louis (~Louis@my-hostna.me)
[22:10:20] *** Joins: Dieterbe (~Dieterbe@user/dieterbe)
[22:10:20] *** Joins: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net)
[22:10:20] *** Joins: muirrum_ (~muirrum@sourcehut/user/muirrum)
[22:10:20] *** Joins: nj (nicholas@stop.disconnecting.me)
[22:10:20] *** Joins: achilleas (~ach@user/achilleas)
[22:10:20] *** Joins: sailorTheCat (~sailorCat@mail2.gajsin.name)
[22:10:20] *** Joins: iivvoo (~l@m3r.nl)
[22:10:20] *** Joins: sgarciapdx (~serge@irc.shork.io)
[22:10:20] *** Joins: DaPinkOne (~Dap@user/dap)
[22:10:20] *** Joins: jkl1337 (~jkl@user/jkl)
[22:10:20] *** Joins: Kaivo (~Kaivo@user/kaivo)
[22:10:20] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[22:10:20] *** Joins: pvalenta (~petr@mail.open-system.cz)
[22:10:20] *** Joins: jhchabran_ (~jhchabran@user/jhchabran)
[22:10:20] *** Joins: cim (~cim@205.185.117.110)
[22:10:20] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[22:10:20] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[22:10:20] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[22:10:20] *** Joins: alip (~alip@exherbo/developer/alip)
[22:10:20] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[22:10:20] *** Joins: jay_wild (~very@138.68.15.221)
[22:10:20] *** Joins: nortoh (~nortoh@user/nortoh)
[22:10:20] *** Joins: loosh (~jason@vultr.bastion.pnj1.us.zj.is)
[22:10:20] *** Joins: defn- (~n0b0dy@user/defn)
[22:10:20] *** Joins: BUSY (~BUSY@user/busy)
[22:10:20] *** Joins: mohan43u (~mohan@user/mohan43u)
[22:10:20] *** Joins: jjhoo (~jahakala@user/jjhoo)
[22:10:20] *** Joins: pztrn15 (~pztrn1@aurora.pztrn.name)
[22:10:20] *** Joins: redquasar (~redquasar@redquasar.xyz)
[22:10:20] *** Joins: Praise (~Fat@user/praise)
[22:10:20] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[22:10:20] *** Joins: vulp1ne (16abab341f@foxes.are.allowed.org)
[22:10:20] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[22:10:20] *** Joins: SmokedCheese (nyoroon@2a01:7e01::f03c:91ff:fed1:d9ef)
[22:10:20] *** Joins: goplay (uQokv148jU@user/goplay)
[22:10:20] *** Joins: philmacfly (~philmacfl@galaxie.weltraumhochofen.space)
[22:10:20] *** Joins: computerquip (sid423484@user/computerquip)
[22:10:20] *** Joins: qaisjp (sid26374@user/qaisjp)
[22:10:20] *** Joins: mweckbecker (~matthias@weckbecker.name)
[22:10:20] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[22:10:20] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[22:10:20] *** Joins: Xe (~cadey@tailscale/xe)
[22:10:20] *** Joins: nekron (~nekron@noordsee.de)
[22:10:20] *** Joins: eloy (~quassel@2001:bc8:182c:650::1)
[22:10:20] *** Joins: espero (~espero@ucitelonline.pedf.cuni.cz)
[22:10:20] *** Joins: belak (~belak@user/belak)
[22:10:20] *** Joins: jjcm (~j@li263-105.members.linode.com)
[22:10:20] *** Joins: amodo (~derf@naeon.org)
[22:10:20] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[22:10:20] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[22:10:20] *** Joins: n-st (~n-st@user/n-st)
[22:10:20] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[22:10:20] *** Joins: martin_ (nobody@188.113.85.137)
[22:10:20] *** Joins: particleflux (~particlef@ircb.hackthe.codes)
[22:10:20] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[22:10:20] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[22:10:20] *** Joins: bailsman (~Mm1@xls01.freecult.org)
[22:10:20] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[22:10:20] *** Joins: tomasfarias (~tomasfari@user/tomasfarias)
[22:10:20] *** Joins: mattikus (sid161707@user/mattikus)
[22:10:20] *** Joins: alyx (alyx@atheme/alyx)
[22:10:20] *** Joins: dansan (~daniel@75.81.148.51)
[22:10:20] *** Joins: eggsampler (~ur@s.id-rsa.pub)
[22:10:20] *** Joins: KDDLB (kevin@user/kddlb)
[22:10:20] *** Joins: amk (~amk@109.255.169.126)
[22:10:20] *** Joins: Anderson-D (sid146635@id-146635.tinside.irccloud.com)
[22:10:20] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[22:10:20] *** Joins: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[22:10:20] *** Joins: aaaaanews (~a@65.79.136.69)
[22:10:20] *** Joins: Wessie- (~Wessie@static.226.41.47.78.clients.your-server.de)
[22:10:20] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[22:10:20] *** Joins: michele (~eraser@user/michele)
[22:10:20] *** Joins: jlaffaye (~jlaffaye@user/jlaffaye)
[22:10:20] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[22:10:20] *** Joins: Thinkofname (~thinkthin@37.205.12.211)
[22:10:20] *** Joins: earthbre| (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[22:10:20] *** Joins: aead (~aead@user/aead)
[22:10:20] *** Joins: abraham (~abraham@143.244.185.86)
[22:10:20] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[22:10:20] *** Joins: hwrd (aa272caead@2604:bf00:561:2000::137)
[22:10:20] *** Joins: sjas (~sjas@irc.sjas.de)
[22:10:20] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[22:10:20] *** Joins: jaguar (jag@maddshark.com)
[22:10:20] *** Joins: nescafe1001 (sid211018@id-211018.tinside.irccloud.com)
[22:10:20] *** Joins: st3fan (sid43079@id-43079.lymington.irccloud.com)
[22:10:20] *** Joins: muesli (~muesli@fribbledom.com)
[22:10:20] *** Joins: mastardet (~mastardet@user/mastardet)
[22:10:20] *** Joins: sam1 (~sam1@molly.millions.slask.me)
[22:10:20] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[22:10:20] *** Joins: lebster (sid17131@id-17131.hampstead.irccloud.com)
[22:10:20] *** Joins: theckman (sid295081@user/theckman)
[22:10:20] *** Joins: Shrike (sid305680@id-305680.helmsley.irccloud.com)
[22:10:20] *** Joins: soren (sid124229@id-124229.uxbridge.irccloud.com)
[22:10:20] *** Joins: nachoes (~nachoes@user/nachoes)
[22:10:20] *** Joins: wmo (~quassel@2604:a880:2:d0::1df0:b001)
[22:10:20] *** Joins: cultpony (~cultpony@user/cultpony)
[22:10:20] *** Joins: mgubyt (u@mgub.yt)
[22:10:20] *** Joins: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi)
[22:10:20] *** Joins: Tharro (~Tharro@2001:bc8:1824:1623::1)
[22:10:20] *** Joins: jimcroft_______ (sid148498@id-148498.uxbridge.irccloud.com)
[22:10:20] *** Joins: nebiros (~nebiros@user/nebiros)
[22:10:20] *** Joins: nikki93 (sid200244@id-200244.tinside.irccloud.com)
[22:10:20] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[22:10:20] *** Joins: seds (sid492514@user/seds)
[22:10:20] *** Joins: obviyus (sid415299@user/obviyus)
[22:10:20] *** Joins: eric_hill (sid323132@id-323132.tinside.irccloud.com)
[22:10:20] *** Joins: Patater (~patater@104.248.173.85)
[22:10:20] *** Joins: mjanssen (~mpcjansse@2a01:4f9:c011:75e6::1)
[22:10:20] *** Joins: jezebel (jezebel@user/jezebel)
[22:10:20] *** Joins: Artea (~Lufia@artea.com.pt)
[22:10:20] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[22:10:20] *** Joins: bougyman (~bougyman@user/bougyman)
[22:10:20] *** Joins: zkanda (~zkanda@box.makean.art)
[22:10:20] *** Joins: wkalt (~wkalt@user/wkalt)
[22:10:20] *** Joins: Spydar007 (~spydar007@user/spydar007)
[22:10:20] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[22:10:20] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[22:10:20] *** Joins: crowbar (~crowbar@user/crowbar)
[22:10:20] *** Joins: mika (~mika@odysseus.grml.info)
[22:10:20] *** Joins: gildarts (16abab341f@user/gildarts)
[22:10:20] *** Joins: fnk (fnk@hswaw/fox/fnk)
[22:10:20] *** Joins: avery (sid501608@id-501608.uxbridge.irccloud.com)
[22:10:20] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[22:10:20] *** Joins: mathis (~mathis@user/mathis)
[22:10:20] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[22:10:20] *** Joins: jchase (~jeremycha@130.115.138.34.bc.googleusercontent.com)
[22:10:20] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[22:10:20] *** Joins: glider (~glider@user/glider)
[22:10:20] *** Joins: Archwyrm (~archwyrm@archwyrm.net)
[22:10:20] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[22:10:20] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[22:10:20] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[22:10:20] *** Joins: averell (~averell@user/averell)
[22:10:20] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[22:10:20] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[22:10:20] *** Joins: mrcus (mpirg@sourcehut/user/mirg)
[22:10:20] *** Joins: bw (sid2730@user/betawaffle)
[22:10:20] *** Joins: noord (noord@user/noord)
[22:10:20] *** Joins: CRThaze1 (~weechat@188.166.44.58)
[22:10:20] *** Joins: schaeffer (~schaeffer@user/schaeffer)
[22:10:20] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[22:10:20] *** Joins: rudi_s (~simon@user/rudi-s/x-7673890)
[22:10:20] *** Joins: notepad7 (~notepad@129.159.46.243)
[22:10:20] *** Joins: Xizor_ (~Xizor@151.ip-51-68-121.eu)
[22:10:20] *** Joins: danieln (~danieln@erebor.danieln.de)
[22:10:20] *** Joins: pots9038 (~pots@20.51.220.66)
[22:10:20] *** Joins: scjosh (~scjosh@206.189.79.69)
[22:10:20] *** Joins: penguwin (~penguwin@fribbledom.com)
[22:10:20] *** Joins: simoneb_ (~simone@static.39.20.203.116.clients.your-server.de)
[22:10:20] *** Joins: huf (huf@user/huf)
[22:10:20] *** Joins: qzio_ (~qzio@198.167.223.200)
[22:10:20] *** Joins: arusso-alt (~arusso@nubsicle.aaron-russo.com)
[22:10:20] *** Joins: avoozl2 (~avoozl@escaflowne.hro.nl)
[22:10:20] *** Joins: zsnes (~dead@173.82.46.220)
[22:10:20] *** Joins: corby (~corby@c0rby.de)
[22:10:20] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[22:10:20] *** Joins: stmuk (~steve@15.43.187.81.in-addr.arpa)
[22:10:20] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[22:10:20] *** Joins: tom5760 (73d4025b14@user/tom5760)
[22:10:20] *** Joins: mendelmaleh (e58b23db5e@2604:bf00:561:2000::22b)
[22:10:20] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[22:10:20] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[22:10:20] *** Joins: coder_kalyan (2c72974719@user/coderkalyan)
[22:10:20] *** Joins: Tykling (~tykling@irc.tyknet.dk)
[22:10:20] *** Joins: Logiar (~logiar@nerdsluts.net)
[22:10:20] *** Joins: explodes (~explodes@user/explodes)
[22:10:20] *** Joins: toothlessgear (2c15493d69@user/toothlessgear)
[22:10:20] *** Joins: respite (~efekt@ec2-44-232-32-190.us-west-2.compute.amazonaws.com)
[22:10:20] *** Joins: mjl (sid16781@2a03:5180:f::418d)
[22:10:20] *** Joins: else- (sid23924@id-23924.tinside.irccloud.com)
[22:10:20] *** Joins: jda (~jadra@chai.0xbad.coffee)
[22:10:20] *** Joins: Lost (cold@user/lost)
[22:10:20] *** Joins: benji (~benji@user/benji)
[22:10:20] *** Joins: yonson (~yonson@2600:8801:d900::16db)
[22:10:20] *** Joins: Vigdis (~danj@2001:19f0:b001:9ee:5400:2ff:fec5:18cb)
[22:10:20] *** Joins: akelly (24aca7a63b@2604:bf00:561:2000::152)
[22:10:20] *** Joins: derfj (sid19429@id-19429.tinside.irccloud.com)
[22:10:20] *** Joins: MD87 (~MD87@user/md87)
[22:10:20] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[22:10:20] *** Joins: frobnitz (~ian@photon.remmler.org)
[22:10:20] *** Joins: ollien (~ollien@ollien.com)
[22:10:20] *** Joins: fizzie (irc@selene.zem.fi)
[22:10:20] *** Joins: GinjaNinja32 (~nyx@thanatos.gn32.uk)
[22:10:20] *** Joins: zunk (~zunk@user/zunk)
[22:10:20] *** Joins: nickster (~nickster@67.207.91.6)
[22:10:20] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[22:10:20] *** Joins: recursion (sid504862@id-504862.ilkley.irccloud.com)
[22:10:20] *** Joins: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com)
[22:10:20] *** Joins: trollixx (sid289131@id-289131.uxbridge.irccloud.com)
[22:10:20] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[22:10:20] *** Joins: m-kad (~quassel@2a02:c207:2043:4525::1)
[22:10:20] *** Joins: Fossil (~Fossil@95.85.23.165)
[22:10:20] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[22:10:20] *** Joins: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001)
[22:10:20] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[22:10:20] *** Joins: pez_ (~pez@user/pez)
[22:10:20] *** Joins: connor_goodwolf_ (~connor@user/connor-goodwolf/x-2615606)
[22:10:20] *** Joins: zwindl (~abc@user/abc)
[22:10:20] *** Joins: cooper_ (~mitchell@user/cooper)
[22:10:20] *** Joins: clee_ (~clee@tali.t0k.org)
[22:10:20] *** Joins: DHowett (~dustin@kaus.howett.net)
[22:10:20] *** Joins: nakedeyes (~nathan@user/nandormagyar)
[22:10:20] *** Joins: houze (~houze@user/houze)
[22:10:20] *** Joins: evilop (~Urist@archlinux/op/MrElendig)
[22:10:20] *** Joins: Foxboron (~fox@archlinux/trusteduser/Foxboron)
[22:10:20] *** Joins: jdrab (~jdrab@user/jdrab)
[22:10:20] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[22:10:20] *** Joins: frebib (~frebibcha@nerdhouse.io)
[22:10:20] *** Joins: jemaclus (~jemaclus@64.227.108.73)
[22:10:20] *** Joins: loggingbot (~loggingbo@user/loggingbot)
[22:10:20] *** Joins: oznt (~oznt@vmd62887.contaboserver.net)
[22:10:20] *** Joins: daved (~daved@162.67.197.35.bc.googleusercontent.com)
[22:10:20] *** Joins: j416 (~j416@user/j416)
[22:10:20] *** Joins: n1000 (~n1000@user/n1000)
[22:10:20] *** Joins: chder (~chder@user/chder)
[22:10:20] *** Joins: caverton (~caverton@ercro.tech)
[22:10:20] *** Joins: znpy (~znpy@user/znpy)
[22:10:20] *** Joins: 068AAC0VA (Rhys@help.lux.melted.me)
[22:10:20] *** Joins: sudden (~cat@user/sudden)
[22:10:20] *** Joins: welt (~welt@willow.spiderden.net)
[22:10:20] *** Joins: franitor (~frank@user/franitor)
[22:10:20] *** Joins: glats (~glats@45.77.73.141)
[22:10:20] *** Joins: hgl (hgl@user/hgl)
[22:10:20] *** Joins: ds (~ds@user/ds)
[22:10:20] *** Joins: misuto (~misuto@h-155-4-73-21.A192.priv.bahnhof.se)
[22:10:20] *** Joins: jsanford (~jsanford@user/jsanford)
[22:10:20] *** Joins: nemesis91 (~nem@user/nemesis91)
[22:10:20] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[22:10:20] *** Joins: dale (dale@user/dale)
[22:10:20] *** Joins: karl (~Karlssel@2001:41d0:8:9a4b::1)
[22:10:20] *** Joins: mncheck (~mncheck@193.224.205.254)
[22:10:20] *** Joins: Thedarkb1-Work (~Thedarkb@62.232.253.82)
[22:10:20] *** Joins: hhes (sid420846@id-420846.ilkley.irccloud.com)
[22:10:20] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[22:10:20] *** Joins: jesk (~jesk@stakka.errxtx.net)
[22:10:20] *** Joins: Xu_R (~dev-dsk-x@user/xu-r/x-9187770)
[22:10:20] *** Joins: xzr (xzar@shell.troopers.fi)
[22:10:20] *** Joins: arcanez (~arcanez@warpedreality.org)
[22:10:20] *** Joins: _\_ (~o@user/ding)
[22:10:20] *** Joins: deepy (deepy@user/deepy)
[22:10:20] *** Joins: gl (~x@pwn.lu)
[22:10:20] *** Joins: roasbeef (~roasbeef@104.131.26.124)
[22:10:20] *** Joins: Disconsented (~quassel@107.170.227.20)
[22:10:20] *** Joins: bertiger (~bertiger@user/bertiger)
[22:10:20] *** Joins: zutt (~zutt@user/zutt)
[22:10:20] *** Joins: LawnGnome (~LawnGnome@user/lawngnome)
[22:10:20] *** Joins: con3 (~con3@143.198.53.32)
[22:10:20] *** Joins: newton (james@user/newton)
[22:10:20] *** Joins: ramrunner (~dsp@78.141.218.152)
[22:10:20] *** Joins: gluon (~gluon@2a01:4f8:c0c:e2da::1)
[22:10:20] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[22:10:20] *** Joins: pombreda (sid227801@id-227801.tinside.irccloud.com)
[22:10:20] *** Joins: hegemoOn (~netmonk@195-154-92-20.rev.poneytelecom.eu)
[22:10:20] *** Joins: matt1982__ (~matt1982@178.62.73.7)
[22:10:20] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[22:10:20] *** Joins: sobukus (~sobukus@sourcemage/mage/sobukus)
[22:10:20] *** Joins: strudl (~strudl@user/strudl)
[22:10:20] *** Joins: wikro_ (~foo@hjkl.se)
[22:10:20] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[22:10:20] *** Joins: asm (~alexander@user/asm)
[22:10:20] *** Joins: preisi (~preisi@irc.prei.si)
[22:10:20] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[22:10:20] *** Joins: amolith (d1421e166a@nixnet/founder/amolith)
[22:10:20] *** Joins: ikke (~kevin@alpine/developer/ikke)
[22:10:20] *** Joins: gshumway (~gshumway@user/gshumway)
[22:10:20] *** Joins: opc0de (~nathan@user/opcode)
[22:10:20] *** Joins: maxamillion (sid276220@ansible/staff/maxamillion)
[22:10:20] *** Joins: orninator (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[22:10:20] *** Joins: hjmcnew_____ (sid86092@id-86092.tinside.irccloud.com)
[22:10:20] *** Joins: vds__ (sid12483@id-12483.helmsley.irccloud.com)
[22:10:20] *** Joins: jamra_ (sid16103@id-16103.ilkley.irccloud.com)
[22:10:20] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[22:10:20] *** Joins: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com)
[22:10:20] *** Joins: higgins (~higgins@static.38.6.217.95.clients.your-server.de)
[22:10:20] *** Joins: naos (~naos@user/naos)
[22:10:20] *** Joins: demsh (srjgxif39q@hermod.demsh.org)
[22:10:20] *** Joins: leah2 (~leah@vuxu.org)
[22:10:20] *** Joins: acohn (acohn@wikipedia/alex-cohn)
[22:10:20] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[22:10:20] *** Joins: dupondje (~dupondje@artemis.dupie.be)
[22:10:20] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[22:10:20] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[22:10:20] *** Joins: ventic (ircbouncer@3v.fi)
[22:10:20] *** Joins: albertito (~nil@37.228.204.251)
[22:10:21] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:10:21] *** Joins: Byteflux (~byte@byteflux.net)
[22:10:21] *** Joins: ChanServ (ChanServ@services.libera.chat)
[22:10:21] *** molybdenum.libera.chat sets mode: +o ChanServ
[22:10:32] *** Quits: Dreamwea- (~Dreamweav@37.48.111.199) (Ping timeout: 263 seconds)
[22:10:34] *** Joins: lowhope (~lowhope@cow9.org)
[22:10:35] *** Joins: couture (~couture@user/couture)
[22:10:35] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[22:10:36] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[22:11:02] *** Joins: seebs (~seebs@24.196.59.174)
[22:11:06] *** Joins: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex)
[22:11:07] *** Joins: ddevault (e7b4bb6755@sourcehut/staff/ddevault)
[22:11:08] *** Joins: mort1 (~mort@188.166.114.29)
[22:11:16] *** Joins: samf (~root@159.65.228.88)
[22:12:09] *** Joins: buz (~buz@damn.serious.im)
[22:12:09] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Quit: Bouncer Surgery)
[22:12:09] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[22:12:47] <pyzozord> I'm learning about slices, they are supposed to be a "view" to underlaying array. But I'm confused that then I can create a slice like []int{1,2,3}
[22:13:03] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:13:07] *** Quits: mort (~mort@188.166.114.29) (Ping timeout: 256 seconds)
[22:13:07] *** mort1 is now known as mort
[22:13:10] <pyzozord> does that mean I created an anonymous array and slice that covers entire array?
[22:13:52] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[22:14:03] <fizzie> Yes.
[22:14:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:14:47] <fizzie> `s := []int{1, 2, 3}` is more or less the same thing as `sData := [3]{1, 2, 3}; s := sData[:]` except without giving the array a name.
[22:15:57] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 240 seconds)
[22:16:32] <bookworm> [...] and you wouldn't need to count the array members ;P
[22:16:58] <fizzie> I thought it'd be clearer with a literal.
[22:17:04] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[22:17:22] <bookworm> (it is)
[22:18:07] <fizzie> Turns out that's almost exactly how it's defined (was curious): https://go.dev/ref/spec#Composite_literals "A slice literal has the form `[]T{x1, x2, … xn}` and is shorthand for a slice operation applied to an array: `tmp := [n]T{x1, x2, … xn}; tmp[0 : n]`."
[22:19:11] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com)
[22:19:48] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:21:48] *** Joins: holgersson (~quassel@user/holgersson)
[22:21:59] *** Joins: mrig (~mrig@user/mrig)
[22:22:36] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[22:22:50] <pyzozord> I don't understand why here https://go.dev/tour/moretypes/10 line 12 outputs [3 5] not [2 3]
[22:23:23] *** Joins: cobber (~protorom@213.240.182.77)
[22:23:30] <ikke> in line 8 s is overwritten
[22:24:06] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[22:25:43] <pyzozord> I see thanks
[22:26:05] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[22:27:42] <fizzie> Hmm, I wonder if the tour mentions the three-operand slicing operation. It does cover the concept of len vs. cap, but it didn't seem to mention that on a quick glance.
[22:27:44] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:27:56] <ikke> fizzie: can't recall either it did
[22:28:56] *** Quits: jannis (~jannis@user/xjs) (Quit: Bye.)
[22:29:44] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[22:30:04] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[22:32:58] <pyzozord> How does append work with slices? It kind of seems like it must allocate n+1 memory then copy everything over
[22:33:20] <ikke> yes, though, it does not just do n+1
[22:33:43] <fizzie> It also doesn't need to allocate anything if the slice's capacity is sufficiently large.
[22:33:45] <pyzozord> I see, it will preemptively allocate more
[22:34:27] <pyzozord> I assume capacity of a slice is what already is allocated (that's my n)
[22:34:34] <ikke> yes
[22:34:39] <fizzie> Yes, but it's different from the _length_ of a slice.
[22:34:53] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Quit: KonaArctic)
[22:35:00] <pyzozord> Yep I know just learned about that
[22:35:14] <fizzie> And strictly speaking the capacity might be something less than what's "allocated" as such, for example as a result of that three-operand slicing operation.
[22:35:38] <fizzie> Of which the tl;dr is, `s[a:b:c]` returns a slice with len of b-a and a cap of c-a, so you can use it to, e.g. (probably most commonly?), create a slice that you can't append to without reallocating, and consequently are less likely to overwrite something else accidentally. As in https://go.dev/play/p/JyUmqkIiAfy
[22:35:58] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[22:35:58] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[22:35:58] *** Joins: tane (~tane@user/tane)
[22:36:35] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:37:50] <bookworm> hm? Ah by allocated you mean the storage underneath can be bigger than the slice view.
[22:38:15] <bookworm> the cap certainly can't be larger than what's allocated though
[22:38:22] <pyzozord> huh? ex2 is confusing
[22:38:24] <bookworm> you can only reduce it
[22:38:33] <pyzozord> why is 999 not in s in ex2?
[22:38:50] <fizzie> Because `t := s[1:3:3]` caused cap(t) to be 2.
[22:39:05] <pyzozord> so what's happened in memory?
[22:39:08] <fizzie> So in `append(t, 999)`, append had to allocate a new array.
[22:39:21] <pyzozord> it seems like slice is then a linked list of arrays
[22:39:29] <fizzie> No, it's just a pointer and two size fields.
[22:39:49] <pyzozord> but t has three fields
[22:40:13] <pyzozord> t[0] == s[1], t[1] == s[2], and t[2] ?
[22:40:32] <fizzie> After the append, t[0] will not be the same location in memory as s[1].
[22:41:01] <fizzie> Right after `t := s[1:3:3]`, you will have len(t) == 2, cap(t) == 2.
[22:41:05] <pyzozord> ooh
[22:41:12] <pyzozord> so append copies the memory entirely?
[22:41:16] <fizzie> So when you call `append(t, 999)`, it will go "hmm, there's no capacity in this slice to append".
[22:41:25] *** Arsen_ is now known as Arsen
[22:41:50] <fizzie> Yeah, it will allocate a new array (of size 4, I believe) and copy the data there.
[22:41:58] <pyzozord> that seems error prone, I don't really know when things point to the same array and when not
[22:42:24] <ikke> So when you append, you should always assign it
[22:42:31] <ikke> foo = append(foo, x)
[22:42:51] <pyzozord> I mean this doesn't help if I wanted a slice of some other array
[22:42:57] <pyzozord> so that I can modify that array
[22:43:11] <fizzie> Yes, it's certainly possible to get confused. But there are situations where you can be sure.
[22:43:16] <pyzozord> and then append to that slice, then suddenly my slice no longer can modify the original array
[22:43:44] <fizzie> Yes. If you want to work around that, just don't `append`.
[22:44:19] <pyzozord> and what about the vice versa when I forgot to append and I accidentally modify the source array unintentionally?
[22:45:16] <fizzie> Well, it's worse than that: even if you do `append`, the source array _might_ get modified.
[22:45:21] <fizzie> Like what happens in ex1.
[22:45:46] <pyzozord> oh that's right, depending on the capactiy it might not realloc
[22:45:54] <pyzozord> that's pretty bad
[22:46:00] <bookworm> generally, if you want to modify it make a copy
[22:46:31] <bookworm> that's not bad, it's the way it works almost in amy language that handles views into storage
[22:46:37] <fizzie> It's definitely a sharp corner of the language. Making "defensive" copies is one way to avoid problems.
[22:46:45] <bookworm> including python as soon as you touch pandas / numpy
[22:49:51] <fizzie> (And that "set capacity equal to len" operation of ex2 does guarantee any subsequent `append` on the result will never modify the source. And more generally, that no other operation on the slice will access elements past the set capacity limit either.)
[22:57:36] <pyzozord> I'm trying to create a 2d slice like this bitmap := [:dy][:dx]uint8 what do I do wrong?
[22:58:35] <bookworm> there's no magic initialization unless you specify the literal directly
[22:58:56] <bookworm> you need to manually loop over the first dimension and make an array there
[22:59:32] <pyzozord> oh right, forgot the literal
[22:59:53] <pyzozord> but this doesn't really help bitmap := [:dy][:dx]uint8{}
[23:00:05] <bookworm> that's not what I meant
[23:00:13] <fizzie> There's no such thing as `[:n]uint8{}`, to start with.
[23:00:31] <fizzie> A slice is `[]uint8{}`, and an array is `[n]uint8{}`, but there's no `[:n]uint8{}`.
[23:01:06] <fizzie> (But yeah, the 2D case has its own complications beyond that.)
[23:01:40] <pyzozord> I see thanks both
[23:03:20] <pyzozord> is there [n][m]uint8{} type of thing for 2d arrays?
[23:03:53] <fizzie> Yes, though (as with any array) n and m have to be constant.
[23:04:20] *** Joins: The_Loko (~The_Loko@79.116.24.80)
[23:04:44] *** Joins: rendar (~rendar@user/rendar)
[23:04:46] <pyzozord> oh
[23:04:49] <fizzie> Same as with C, you could argue it's not "really" a 2D array, it's merely a regular array where the element type is another array.
[23:05:53] <pyzozord> an array cannot be created with non-constant at all
[23:06:39] <pyzozord> I don't understand why not
[23:07:19] *** Quits: rendar_ (~rendar@user/rendar) (Ping timeout: 250 seconds)
[23:10:12] <fizzie> It's a design choice. The size of an array is part of the type (like in C), and there's no parametric types (well, before the upcoming generics), and every type has a fixed size. Slices take over the typical use cases of "variable-length arrays" instead.
[23:12:57] *** Quits: joshbaptiste (~josh@192.210.151.34) (Ping timeout: 240 seconds)
[23:17:08] *** Joins: shtirlic (~shtirlic@178.70.131.230)
[23:17:20] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[23:18:20] <b0nn> Hmm - fixed sized arrays is a bit more than a "design choice"
[23:18:37] <tar_xvf> pyzozord: as fizzie said for non-variable length arrays you need to use slices according to this tutorial https://go.dev/tour/moretypes/13
[23:22:16] <pyzozord> here is my solution for https://go.dev/tour/moretypes/18: https://go.dev/play/p/s_SQTLnS5fM
[23:22:33] <pyzozord> is there a better, more idiomatic, more elegant or more concise way?
[23:24:13] <fizzie> You can consider using a for-range loop rather than a regular for loop for looping over the indices.
[23:24:38] <fizzie> As in https://go.dev/play/p/kasRHTHONk_4
[23:24:40] <pyzozord> thanks, anything else to make this better?
[23:25:40] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[23:25:42] <Sam> Your slices seem to be 1 too large. No need for the dy+1, the instructions say the image is dy*dx sized.
[23:25:56] <tar_xvf> you can also add a third argument to each `make` function, for the same value
[23:26:05] <tar_xvf> make([]uint8, dx, dx) etc.
[23:26:17] <tar_xvf> this makes a hard cap for the length of the slice, so if you know the exact size
[23:26:37] <pyzozord> why would I do that?
[23:26:57] <fizzie> It's an exact size even if you don't.
[23:26:58] <dr0n> without pretending to know go, would you add an 'error' check, in case, dx, dy are invalid values
[23:27:11] <Sam> Yah, that's not what that does, that's the same as doing make([]uint8, dx); it's the length and capacity, not a max capacity
[23:27:25] <tar_xvf> oh i must be confused, let me check
[23:27:53] <fizzie> https://pkg.go.dev/builtin#make "Slice: The size specifies the length. The capacity of the slice is equal to its length. A second integer argument may be provided to specify a different capacity; it must be no smaller than the length."
[23:27:55] <Sam> I'd say with the exception of the extra row what's here is fine. There are minor nit picks which you could change, but nothing significant or un-go-like
[23:28:10] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:28:38] <pyzozord> Sam: please do nitpick
[23:29:03] <pyzozord> here is the latest version https://go.dev/play/p/lIb9NWF7XMi
[23:29:36] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869)
[23:29:39] *** Joins: pepee (~pepee@user/pepee)
[23:29:48] <tar_xvf> you could have the function return (pic, *error), and if you have a problem like invalid inputs, return (nil, error), and otherwise return (pic, nil)
[23:29:54] <tar_xvf> and then have your code do error checking
[23:30:04] <dr0n> tar_xvf this is what I was thinking of
[23:30:16] <tar_xvf> dr0n: yes, thank you
[23:30:37] *** Quits: zwr (~zwr@2804:d45:b966:fb00:4478:5288:66d4:ebc1) (Ping timeout: 240 seconds)
[23:30:54] <tar_xvf> https://earthly.dev/blog/golang-errors/
[23:31:30] <pyzozord> why would any inputs be invalid here
[23:31:33] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ed56:14ca:4cf:c0ab)
[23:31:45] <pyzozord> ah becase they are ints
[23:31:48] <pyzozord> I'd just change them to uints
[23:31:55] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[23:31:58] <tar_xvf> maybe width or height of zero
[23:32:13] *** Joins: moto (~moto@user/moto)
[23:32:16] <Sam> You can't change them to uints, that would be violating the contract that was already set by someone elses code :)
[23:32:27] <pyzozord> i see, but I wouldn't consider 0 height or width an error, you asked for 0 you got 0
[23:32:56] <Sam> But what happens if you do make([][]uint8, dy) and dy == -1?
[23:33:10] <pyzozord> yes that is a problem
[23:33:36] <pyzozord> how do I violate someone elses contract when I change arguments to uint? And where is that contract?
[23:33:40] <Sam> You may or may not be able to rely on good inputs from pic.Show. It's not actually a problem here and I wouldn't add any unnecessary error handling personally, but you never know, it could be in some other thing or in the future.
[23:33:46] <b0nn> WRT a 3rd value in the make - eg. make([]uint8, 0, dy) - if you put 0 as the len, then slice is created at exactly the data required
[23:34:00] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5596:1e3f:6f49:8869) (Ping timeout: 250 seconds)
[23:34:04] <Sam> pyzozord: the contract is specified in the initial problem, you have to call pic.Show(Pic), where Pic is a func(int, int) [][]uint8
[23:35:00] <Sam> Anyways, I'd say this is perfectly good, good job!
[23:35:11] <pyzozord> ok, thanks
[23:35:24] <fizzie> Also, if you did change them to `uint`, values larger than math.MaxInt would then arguably be invalid, because the length and capacity of size is an `int`.
[23:36:10] <dr0n> what is the meaning of a contract in this context?
[23:36:12] <fizzie> (`make` accepts any integer type out of convenience, but len(s) and cap(s) are `int`s.)
[23:36:23] <pyzozord> dr0n: types
[23:36:36] <dr0n> I see! Thanks
[23:36:51] <pyzozord> dr0n: more abstractling "expectation of types or expectation of what the function will be able to handle"
[23:36:56] <pyzozord> *abstractly
[23:37:16] <b0nn> dr0n: a contract is a guranteed way that things will behave
[23:37:19] <dr0n> thank you, noticed this expression couple of times and didn't quite understand the meaning of it
[23:37:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2981-2615-93a2-b00d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:38:14] <pyzozord> fizzie: I don't understand, so sizes in go can be negative?
[23:38:24] *** Joins: cvemys (~cvemys@user/cvemys)
[23:38:47] <b0nn> TIAS
[23:39:00] <Sam> For reasons I've never been able to comprehend Go uses int as a type in several places where things can't be negative (but ints can be negative). It's all very confusing.
[23:39:24] <Sam> 99% of the time this isn't a problem. Until it is.
[23:39:51] <b0nn> Sam: I think it's a familiarity thing, most ppl think in terms of the signed types, and the unsigned types are a bit confusing
[23:40:51] *** Joins: neurocyte091707 (~neurocyte@IP-046243084168.dynamic.medianet-world.de)
[23:40:52] *** Quits: neurocyte091707 (~neurocyte@IP-046243084168.dynamic.medianet-world.de) (Changing host)
[23:40:52] *** Joins: neurocyte091707 (~neurocyte@user/neurocyte)
[23:41:05] <pyzozord> seems like an glaring oversight to me, but I don't believe the designers of go would overlook a thing like this, it must be intentional
[23:42:21] <fizzie> The argument I've heard of is, sticking to signed types moves the unavoidable discontinuity far away from 0.
[23:42:28] <fizzie> There is an offical-ish answer somewhere as well.
[23:42:37] <tar_xvf> i'm pretty sure last time i checked go does integer overflow transparently like C, so maybe they intended to do that to alleviate getting a slice of the wrong size if you enter a negative number and it underflows??
[23:42:39] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[23:42:39] *** neurocyte091707 is now known as neurocyte09170
[23:42:41] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[23:42:46] <tar_xvf> just a guess, i don't know the official reason
[23:42:57] <fizzie> In one of those many many bugs that suggest making it unsigned.
[23:43:28] <fizzie> https://github.com/golang/go/issues/27460 maybe.
[23:44:15] <pyzozord> "unavoidable discontinuity"?
[23:44:27] <b0nn> https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array) <<-- I was reading this earlier (trying to find why languages have always had fixed sized arrays, as far as I know they all use ints for size, not uints, but happy to be corrected)
[23:44:43] <tar_xvf> i feel like this is also reflective of how a lot of programmers also use default int types for cases in which they could get by with uint
[23:44:49] <tar_xvf> especially because Go has :=
[23:45:11] <fizzie> If you have an unsigned integer and try to decrement it below 0, you'll get a very large number. That's the discontinuity I was talking about.
[23:45:38] <b0nn> yeah overflow is harder to detect
[23:45:40] <fizzie> Likewise, if you have a signed integer and try to decrement it below some value (quite often -9223372036854775808), it's the same.
[23:45:46] *** Joins: hoppity (~hoppity@user/hoppity)
[23:46:00] <fizzie> The argument is, the number 0 occurs more often in real programs than -9223372036854775808.
[23:46:16] <fizzie> So you're more likely to encounter these boundary situations.
[23:46:18] <pyzozord> ah int overflow
[23:46:46] <tar_xvf> also, when you consider a signed vs unsigned int, the highest value it can have is only 2x higher, and the MAX_INT of a signed int is astronomically large already
[23:46:47] <pyzozord> so the intent is to protect people who do make([]int, x-y) where x-y<0
[23:47:00] <pyzozord> to not allocate entire ram
[23:47:01] *** Quits: fikran_ (~fikran@user/fikran) (Ping timeout: 240 seconds)
[23:47:04] <fizzie> For example, consider iterating over an array backwards. You might be tempted to write `for i := len(arr)-1; i >= 0; i-- { use(arr[i]) }`. But that would be wrong if len(arr) was an unsigned type.
[23:47:10] <pyzozord> but rather allocate nothing or even crash
[23:47:35] <fizzie> You'd have to write it as `for i := len(arr); i > 0; i-- { use(arr[i-1]) }` instead. Which is certainly _possible_, but arguably less readable.
[23:47:40] <b0nn> I don't think that there's an attempt to arbitrarily limit the size of arrays
[23:48:12] <fizzie> Especially since it's easy to forget the `i-1` from somewhere, if `i` occurs several times in the loop body.
[23:48:13] <b0nn> I mean, you'd then be looking to stop people making n arrays
[23:48:18] <pyzozord> i mean theoretically using signed int you can address space in half
[23:48:42] <pyzozord> s/can/cut/
[23:48:45] <fizzie> There's already far smaller implementation limits in practice.
[23:48:53] *** Joins: Nigthknight (~Nigthknig@user/nigthknight)
[23:49:16] <b0nn> There's a stack limit, but I don't know of a heap limit
[23:49:18] <pyzozord> which ones?
[23:49:23] <fizzie> For example, pretty much all systems do something like reserving one half of the possible address space for the operating system.
[23:49:26] *** Joins: fikran_ (~fikran@user/fikran)
[23:49:39] <b0nn> stacks have a max size (which I don't recall the value of off the top of my head
[23:49:57] <pyzozord> 4K in go afaik
[23:50:13] <b0nn> I *think* it's closer to 1k
[23:50:19] <b0nn> but I'd have to look it up
[23:51:29] <b0nn> they *used* to be infinitely sized and you started with 4 kb, but then they changed to a max size
[23:52:32] <b0nn> According to Dave Cheney, the heap size could be > system size
[23:53:04] <fizzie> What's "system size" here?
[23:53:11] <b0nn> In Go 1.1 there was a strong desire to increase the maximum size of the heap for both 32 bit and 64 bit platforms, and this has exacerbated the problem to some extent, ie, it is unlikely that you will have 128Gb
[23:53:30] <Nigthknight> Hi all. I noticed something weird (at least to me) using delve. Delve can/cannot set a breakpoint in something.go depending on the contents of something_test.go. Can someone explain that to me?
[23:55:00] <b0nn> Nigthknight: can you paste the error somewhere?
[23:55:13] *** Joins: anandn (~anandn@2601:600:a27f:d92d:6c3b:dc86:41f9:d3cb)
[23:56:55] <b0nn> WRT MAX stack size https://go.dev/src/runtime/stack.go <<-- line 108 has a calculation for NOSPLIT functions (which means that functions that do not have that can potentially have infinite stacks?)
[23:57:24] *** Quits: cvemys (~cvemys@user/cvemys) (Ping timeout: 256 seconds)
[23:57:26] <b0nn> I've seen /somewhere/ that there's a max size, but cannot remember where now
[23:57:49] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[23:59:33] *** Joins: cvemys (~cvemys@user/cvemys)
[23:59:46] <b0nn> https://github.com/golang/go/blob/f296b7a6f045325a230f77e9bda1470b1270f817/src/runtime/stack.go#L1031
