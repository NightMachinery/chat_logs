[00:05:56] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:17:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:18:32] *** Joins: eugercek (~user@user/eugercek)
[00:42:20] *** Joins: speskk (~speskk@c-71-234-67-119.hsd1.ct.comcast.net)
[00:42:20] *** Quits: speskk (~speskk@c-71-234-67-119.hsd1.ct.comcast.net) (Changing host)
[00:42:20] *** Joins: speskk (~speskk@user/speskk)
[02:03:18] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[02:03:38] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:05:10] *** Server sets mode: +nt 
[02:21:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[02:29:30] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[02:30:59] *** Joins: minion (~minion@common-lisp.net)
[03:49:37] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[03:52:58] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[03:53:14] *** Joins: eugercek (~user@user/eugercek)
[03:55:14] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[06:29:44] *** Joins: Bike (~Bike@71.69.170.70)
[06:58:36] *** Quits: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:00:38] *** Joins: silasfox (~sbv@p200300cec714ca00956ec169de307dfd.dip0.t-ipconnect.de)
[07:18:41] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[07:30:21] <beach> Good morning everyone! 
[07:41:20] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:10:06] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:49:51] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[09:50:11] <st_iron> morning
[09:50:23] <beach> Hello st_iron.
[10:25:44] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[11:39:31] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[11:40:42] *** Joins: eugercek (~user@user/eugercek)
[11:45:07] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[11:54:38] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[11:58:31] *** Joins: random-nick (~random-ni@87.116.176.196)
[12:15:25] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[12:30:42] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[12:30:51] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[12:30:59] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:38:48] *** Quits: lisp123 (~lisp123@120.154.103.52) (Quit: Leaving...)
[12:41:33] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:47:47] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[12:48:01] <seok-> Is CFFI user manual link not working for anyone else ?
[12:48:03] <seok-> https://cffi.common-lisp.dev/project/cffi/manual/index.html
[12:49:39] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:50:43] <lisp123> https://cffi.common-lisp.dev/manual/cffi-manual.html
[12:50:47] <lisp123> seems to work
[12:50:51] <lisp123> ur link didn't
[12:50:56] <seok-> Ok that works
[12:51:21] <seok-> my link is from clicking CFFI User Manual from https://cffi.common-lisp.dev/
[12:51:29] <lisp123> yeah i just googled
[12:59:46] *** Joins: shka (~herr@109.231.3.55)
[13:23:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:24:51] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:29:17] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[13:40:19] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:53:58] *** Joins: johnjaye (~pi@173.209.64.74)
[13:57:41] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[14:36:18] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:38:57] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[14:41:02] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[14:45:20] <bremner> is there a nicer way to do (or (when-let ...) (when-let ...) (when-let ...)). Something like cond-let (which I might have just made up) ?
[14:50:20] <edgar-rft> bremner: there's CASE but I don't know what you're trying to do
[14:51:14] <edgar-rft> even the need of when-let somehow sounds suspicious to me...
[14:55:33] <bremner> I'm looking at different prefixes (of different lengths) of a string, so I don't think case helps.
[14:56:41] <bremner> I have code currently using when-let that I am generalizing to more cases. Let's see, I can probably paste the existing code.
[14:57:21] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 256 seconds)
[14:58:36] <bremner> there's the code, slightly weirdly indented: https://paste.debian.net/1232967/
[14:59:11] <bremner> I'm rewriting the local function %make-path
[15:00:27] <bremner> Obviously I can just do (cond ((string-prefix-p ...) (let ...)) ...). 
[15:02:39] <edgar-rft> there is alexandria:starts-with-subseq that might exactly match your problem -> https://alexandria.common-lisp.dev/draft/alexandria.html#index-starts_002dwith_002dsubseq
[15:03:07] <bremner> neat.
[15:12:39] <bremner> I'm still left with wanting to use the return value in the "forms" of a cond clause.
[15:13:27] <bremner> some kind of deconstructing bind, but not bringing in trivial (not my project)
[15:27:03] <pjb> You can also do (cond ((let ((test (generalized-boolean-function foo))) (when test  … (use test) …)))  …)
[15:27:54] <bremner> so basically cram everything into the test of the cond?
[15:28:08] <bremner> (s/test/tests/)
[15:28:21] <pjb> of course, if you do that a lot, you may want to have a version of the cond macro that let you do that with less boiler plate, perhaps one like the scheme cond.
[15:28:41] <pjb> (cond ((member 2 '(1 2 3)) => (lambda (l) l))) --> (2 3)
[15:29:41] *** Joins: v88m (~Xiro@213.87.89.22)
[15:30:10] <bremner> hah. TIL (test => (lambda (x) ...)) in scheme cond
[15:31:01] <pjb> but in CL, a cond-let that avoids the lambda syntax is ok too.
[15:31:50] <bremner> but iiuc, I'd have to define it?
[15:32:18] <pjb> Yes. or find it in some library.  eg. https://github.com/walmartlabs/cond-let
[15:32:24] <bremner> right.
[15:32:32] <pjb> hey! there are CL jobs at Walmart?
[15:32:46] <pjb> An, no, it's clojure. 
[15:40:30] <pjb> bremner: it's easy to write: https://termbin.com/6wcv
[15:42:45] <bremner> yes, if it would be used widely, I may do that.
[15:48:36] *** Quits: v88m (~Xiro@213.87.89.22) (Ping timeout: 240 seconds)
[15:48:56] *** Joins: v88m (~Xiro@213.87.133.114)
[15:51:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:59:06] *** Quits: v88m (~Xiro@213.87.133.114) (Ping timeout: 245 seconds)
[16:01:29] <rotateq> urgs, clojure :D
[16:06:07] <bremner> c'mon, every morning starts with a steaming cup of java when you're a clojure programmer
[16:12:36] <bremner> oof, I see why starts-with-subseq uses muliple-values, but it makes it harder to use.
[16:14:35] <rotateq> :D
[16:39:39] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:31:52] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:22:40] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[18:23:01] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[18:23:52] *** Joins: Bike_ (~Glossina@71.69.170.70)
[18:24:32] *** Server sets mode: +nt 
[18:25:01] *** Joins: mns_ (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[18:25:18] *** Joins: aeth_ (~aeth@user/aeth)
[18:25:40] *** Joins: ryanbw1 (~ryanbw@mab.sdf.org)
[18:25:47] *** Joins: rdrg109_ (~rdrg109@user/rdrg109)
[18:26:52] *** Joins: Oladon (~olad@98.43.81.226)
[18:29:52] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[18:29:52] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[18:29:52] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[18:29:53] *** Quits: plexi_ (~orcabot@digital.sanctuary.org) (*.net *.split)
[18:29:53] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[18:29:53] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[18:30:11] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:38:41] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[18:54:22] *** Bike_ is now known as Bike
[19:05:48] *** Quits: silasfox (~sbv@p200300cec714ca00956ec169de307dfd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:06:05] *** Joins: silasfox (~sbv@p548d1235.dip0.t-ipconnect.de)
[19:07:20] *** Joins: lisp123 (~lisp123@120.154.103.52)
[19:09:29] <White_Flame> as opposed to cond-let, I've used (cond* <var> (<test> . <body>) ...) where in each subclause, the <var> is bound to the return value of the <test>
[19:09:46] <White_Flame> can't find the macro at the moment, though
[19:10:07] <White_Flame> s/return//
[19:10:55] <White_Flame> it just wraps every test with (setf <var> <text>)
[19:11:36] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[19:26:02] <White_Flame> bremner: https://plaster.tymoon.eu/view/2964#2964
[19:27:38] <bremner> White_Flame: thanks, that's quite simple. How is the setf scoped, to the current block?
[19:27:58] <White_Flame> the LET that surrounds COND holds the singular named var
[19:28:34] <White_Flame> (let ((var nil)) (cond ((setf var (test1)) ...) ((setf var (test2)) ...) ...)
[19:28:53] <bremner> ah, right. I should have read more carefully.
[19:43:51] *** Quits: bremner (~bremner@notmuch/developer/bremner) (Remote host closed the connection)
[19:49:13] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[19:51:55] *** Joins: jealousmonk (~user@user/jealousmonk)
[19:57:38] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[20:33:15] *** ryanbw1 is now known as ryanbw
[20:39:58] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:08:12] *** Quits: Josh_2 (~user@197.185.99.232) (Quit: ERC (IRC client for Emacs 27.1))
[21:41:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[21:57:00] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[22:43:46] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:46:01] *** Joins: mksybr (mksybr@tilde.team)
[23:08:34] *** Joins: santiagopim (~user@90.167.66.93)
[23:14:37] *** Quits: aeth_ (~aeth@user/aeth) (Ping timeout: 240 seconds)
[23:16:29] *** Joins: aeth (~aeth@user/aeth)
[23:38:44] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
