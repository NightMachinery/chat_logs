[00:02:47] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 264 seconds)
[01:00:57] *** Joins: Harlin (~DonQixote@75-163-188-12.clsp.qwest.net)
[01:20:41] *** Joins: Kocho (~Kocho@user/kocho)
[01:27:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[01:37:32] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[01:39:31] *** Joins: innovati (~innovati@198-91-225-141.cpe.distributel.net)
[01:39:52] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[01:59:26] *** Quits: mei (~mei@user/mei) (Ping timeout: 260 seconds)
[02:13:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:16:18] *** Joins: jwisbell35 (~jwisbell3@047-036-214-124.res.spectrum.com)
[02:25:51] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[02:31:40] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Remote host closed the connection)
[02:32:31] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[02:39:31] *** Joins: jazzy2 (~jaziz@user/jaziz)
[02:40:26] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[02:50:05] *** Quits: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[02:50:26] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:28:47] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[03:29:38] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[03:59:20] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:04:22] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 268 seconds)
[04:07:07] *** Quits: bodiccea_ (~bodiccea@user/bodiccea) (Remote host closed the connection)
[04:09:37] *** Joins: bodiccea_ (~bodiccea@user/bodiccea)
[04:36:21] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Remote host closed the connection)
[04:36:56] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[04:45:29] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[04:57:19] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:02:23] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[05:02:49] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[05:04:44] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[05:59:41] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[06:02:02] *** Joins: Rockwood (~Rocky@user/rocky)
[06:04:35] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 264 seconds)
[06:20:05] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[06:35:08] *** Joins: WishBoy (~WishBoy@user/wishboy)
[06:48:48] *** Quits: jwisbell35 (~jwisbell3@047-036-214-124.res.spectrum.com) (Quit: Leaving)
[07:05:21] *** Joins: matsaman (~matsaman@user/matsaman)
[07:18:57] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[07:21:32] *** Joins: Rockwood (~Rocky@user/rocky)
[07:32:12] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[08:19:03] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 268 seconds)
[08:19:35] *** jazzy2 is now known as jazzy
[08:20:55] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 268 seconds)
[08:26:14] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[08:39:58] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[08:55:26] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[09:00:21] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:05:19] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 268 seconds)
[09:06:49] *** Joins: twiclo1 (~twiclo@mail.twil.cx)
[09:07:03] <twiclo1> Can someone help me I'm losing my mind trying to center this div
[09:07:08] <twiclo1> And getting to to scale to vw
[09:07:12] <twiclo1> https://twil.cx/christmas/
[09:09:28] *** Joins: mei (~mei@user/mei)
[09:15:52] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[09:23:14] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Ping timeout: 260 seconds)
[09:57:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[09:59:35] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:01:13] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[10:15:47] <oksushi> twiclo1: .center {text-align: center;} is what you probably want
[10:16:22] <oksushi> you should consider adding a doctype as well - <!doctype html> should be the first thing on the page
[10:25:48] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[10:55:10] <FunkyBob> `v https://twil.cx/christmas/
[10:55:13] <Selvvir> FunkyBob, « https://twil.cx/christmas/ » markup • errors: 5 • warnings: 0 • charset: UTF-8 • validation result: https://bit.ly/3mJH3mR
[10:55:15] <Selvvir> FunkyBob, « https://twil.cx/christmas/ » CSS • errors: 0 • warnings: 0 • profile: css3 • validation result: https://bit.ly/3BDB872
[10:55:50] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:06:10] *** Quits: moniker- (~mon@213.149.61.63) (Ping timeout: 268 seconds)
[11:10:01] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Quit: Leaving)
[11:10:07] <hmw[at]> twiclo1: lol, that is a cute page :)
[11:10:31] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[11:13:04] *** Joins: moniker- (~mon@213.149.61.63)
[11:18:16] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[11:31:54] *** Joins: stenno (~stenno@user/stenno)
[11:32:09] *** Joins: jazzy3 (~jaziz@user/jaziz)
[11:32:11] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[11:33:43] *** jazzy3 is now known as jazzy
[11:40:07] *** stenno is now known as stenno\OK
[11:48:47] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[11:53:30] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 260 seconds)
[11:53:44] <hassoon> 'morning
[11:55:30] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[12:31:05] *** Joins: shiriru (~shiriru@user/shiriru)
[12:33:00] <undefined_bob> morning hassoon
[12:41:39] *** Joins: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[12:44:39] *** Joins: ath28 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[12:46:30] *** Joins: dimi__ (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[12:47:19] *** Quits: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[12:49:02] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:49:10] *** Quits: ath28 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[13:03:36] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:3d58:ccf6:72f8:5c4a)
[13:10:07] *** Quits: dimi__ (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Quit: Leaving)
[13:10:27] *** Joins: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[13:10:45] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[13:25:11] *** Joins: ath28 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[13:26:08] *** Joins: dimi__ (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[13:28:01] *** Quits: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[13:28:36] *** Joins: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[13:29:52] *** Quits: ath28 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[13:31:43] *** Quits: dimi__ (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[13:33:34] *** Quits: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[13:45:26] *** Quits: shiriru (~shiriru@user/shiriru) (Ping timeout: 260 seconds)
[13:54:17] *** Joins: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[13:57:06] *** Joins: ath28 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[14:00:05] *** Quits: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[14:01:27] *** Joins: dimi__ (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[14:04:48] *** Joins: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[14:05:01] *** Quits: ath28 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[14:06:52] *** Quits: dimi__ (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[14:36:27] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[14:38:19] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:51:58] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Quit: WeeChat 3.3)
[15:06:46] *** Joins: shiriru (~shiriru@user/shiriru)
[15:26:05] *** Quits: shiriru (~shiriru@user/shiriru) (Quit: Leaving)
[15:26:48] *** Joins: vysn (~vysn@user/vysn)
[15:36:50] <moniker-> let me get this straight, if you had <img id="image" element and then in css you had img {max-width:100 px;} and you had #image{width: 400px;}
[15:37:11] <moniker-> the img selector would override id?
[15:37:28] <moniker-> since these are different kinds of attributes?
[15:41:33] <moniker-> wow
[15:42:11] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[16:04:44] <moniker-> max-width overrides width regardless of max-width coming from lower specificity type selector and width from higher specificity ID selector
[16:04:58] <moniker-> that's pretty counterintuitive that i just learned now in practice
[16:09:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[16:21:18] <DPA> max-width doesn't override width at all. Instead, both properties are set. min-width and max-width limit the width of an element. That's just what they are there for.
[16:24:45] <DPA> Or to put it a different way, the computed width of an element is something completely different from the width, max-width, etc. properties that are set on an element. They are just taken into account for calculating it.
[16:24:59] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 268 seconds)
[16:26:49] <undefined_bob> but sometimes its too difficult to calculate
[16:28:00] <moniker-> how max-width doesn't override width when visually it is clear it does?
[16:29:28] <moniker-> you could say "width is also just what it is there for" there is clear overruling taking place where max-width overrules width
[16:30:11] <undefined_bob> no no max-width is like "you must not be larger then max-width" and width is like "you are width wide"
[16:30:29] <moniker-> there is still hierarchy of application
[16:30:38] <moniker-> and max-width overrules in this hierarchy width
[16:30:57] <moniker-> both are not applied at the same time
[16:32:37] <undefined_bob> see https://developer.mozilla.org/en-US/docs/Web/CSS/max-width  "max-width overrides width, but min-width overrides max-width"
[16:32:37] <moniker-> both cannot possibly be applied at the same time since they contradict each other, so this hierarchy resolves it by making max-width overruling width
[16:33:19] <moniker-> there you go there is further hierarchy as you mentioned with min-width
[16:34:06] <moniker-> and what's counter intuitive is that when you learn about basic specificity where ID overrides type selectors then you don't learn that it can seemingly be the other way around like in my example
[16:34:14] <DPA> There are many things that can affect / change the final width of an element. CSS Properties like width, max-width, left, right, border, the flex stuff, etc. are just a small part of all the tings a browser has to consider to determin the final width of an element.
[16:34:14] <DPA> The width property stays exactly what it was. It's just not the same as the final element width at all.
[16:34:29] <moniker-> at least i didnt
[16:35:07] <moniker-> in my mind it was end result that i thought was going to be always overrulled by ID over type selector and in the case of these conflicting attributes that;s not the case they have their own hierarchy
[16:35:28] <undefined_bob> https://codepen.io/undefined999/pen/qBXxEGy
[16:36:45] <undefined_bob> see the #child its width: 500px; but max-width: 150px; so it doesnt matter what I enter in width the max-width is more important
[16:39:31] <moniker-> yes in that example this hierarchy becomes more intuitive, it's different and at least for me was less intuitive when coming from different specificity selectors then i wasn't thinking about this hierarchy and just thought ID would overrule and had opposite visual result
[16:40:17] <moniker-> i thought that somehow width coming from ID would still overrule max-width coming from low specificity type selector
[16:40:50] <moniker-> because that's what in my mind overruling by hierarchy means
[16:40:58] <moniker-> except there are paralel hierarchies here
[16:42:10] <DPA> undefined_bob: max-width only applies when width > max-width. In other words, if width < max-width, then width is used. This makes sense, because different units as well as things like calc can be used in those, so when / if width < max-width is true can change in various situations (such as when the window or fonts are resized).
[16:43:35] <undefined_bob> moniker-: kinda related and a good read: https://css-tricks.com/specifics-on-css-specificity/
[16:44:20] <DPA> moniker-: specificity only resolves conflicts between identical properties. width, max-width and min-width just aren't the same property, so they are meaningless in this case.
[16:44:51] <DPA> *specificity is meaningless in this case
[16:46:17] <undefined_bob> its covers a bit of style attributes too
[16:48:37] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:49:24] <moniker-> both of these problems (one is having 2 identical attributes and other is having 2 different attributes) have same logical contradiction in them, so intuitively i thought they are resolved with same specificity rules, but nope there are 2 kinds of specificity rules so to speak
[16:49:58] <moniker-> color: pink; and color: black; are clearly in contradiction and both cannot be applied at the same time, they are mutually exclusive
[16:50:20] <moniker-> same goes for max-width and width when their values are such that they mutually exclude one another
[16:50:31] <moniker-> so logically the issues are exactly the same
[16:50:38] <moniker-> but in practice there are two hierarchies
[16:50:53] <thykka> it's simpler if you remember that each element has EVERY possible CSS property set
[16:51:40] <DPA> Shorthand properties such as background, font, padding, etc. are a different thing entirely. Those are defined to be a different way of setting a bunch of other properties at once. A shorthand: https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties
[16:51:41] <DPA> But things like max-width and width  just aren't like that. They are really and truely different properties.
[16:51:51] <thykka> and max-width limiting width is a very specific case, not actually "overridin" anything
[16:52:12] <moniker-> DPA they are the same in the sense that they are mutually exclusive, for one to exist another cannot
[16:52:17] <thykka> nope
[16:52:18] <moniker-> when values are set in such a way
[16:52:46] *** Parts: jplejacq (~jplejacq@24.224.90.176) ()
[16:53:48] <moniker-> and in this case when values are set so that properties become mutually exclusive then ANOTHER hierarchy is applied that resolves the conflict and this another hierarchy overrules the specificity hierarhy we learned about selectors
[16:54:04] <thykka> it doesn't overrule it
[16:54:18] <thykka> not in that context
[16:54:32] <moniker-> one of us is not getting it
[16:54:43] <moniker-> and i believe it is you, but feel free to enlighten me
[16:54:59] <DPA> You need to differentiate between the final styles and properties a browser computes, and the properties you specify. The properties you set can't be applied as is. But the properties you set won't change, they stay what you set them to.
[16:55:18] <thykka> ^
[16:55:53] <moniker-> i see no contradiction with what you just wrote and what i said
[16:56:22] <thykka> you're conflating things
[16:56:31] <DPA> For example, you may specify something like 10% width. But a browser has to figure out how many pixels that actually is. But that's just a transformation, a one way function. It's not overriding anything.
[16:56:58] <moniker-> what do you mean by "it's not overriding anything"?
[16:57:08] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:57:31] *** Joins: stenno\OK (~stenno@user/stenno)
[16:57:35] <moniker-> seems like you have problem with usage of 'overriding' or 'overruling' which are used as synonymous in this case
[16:57:42] <thykka> the fact that max-width may limit the width, is not an override. It's a consequence of the computed rules for an element. Very different from CSS rules overriding the other same rule
[16:58:16] <moniker-> no, that's clear override because those 2 can be mutually exclusive
[16:58:28] <moniker-> so when they are mutually exclusive that's an override
[16:58:35] <thykka> what do you mean mutually exclusive?
[16:58:40] <moniker-> override meaning hierarchy is applied
[16:58:45] <thykka> nope
[16:58:48] <thykka> it's not a hierarchy
[16:58:56] <moniker-> mutually exclusive means for one to exist in application another cannot
[16:59:12] <thykka> cannot?
[16:59:18] <moniker-> color cannot be both black and white at the same time, it's mutually exclusive
[16:59:19] <thykka> every element has a width and a max-width
[16:59:38] <thykka> whether it comes from a stylesheet rule or browser defaults
[16:59:48] <moniker-> max-width cannot be 100 and width above 100 at the same time, those are mutually exclusive things
[16:59:55] <thykka> of course they can
[17:00:02] <stenno\OK> with browser defaults also being a stylesheet
[17:00:03] <thykka> the effective width won't be wider than 100
[17:00:04] <moniker-> not in application they cant
[17:00:09] <thykka> but the 'width' rule can be whatever
[17:00:23] <moniker-> you can't have both square and circle drawn on your screen at the same time
[17:00:25] <thykka> and it will resolve to a certain value, not in any way determined by max-width
[17:00:28] <moniker-> those are mutually exclusive things
[17:01:30] <DPA> Let's express that mathematically: computed_width=max(max_with,width)
[17:01:30] <DPA> As you can see, computed_width is neither max_with nor width. It's different from both.
[17:01:38] <thykka> that's not how CSS works, but it seems you've already locked into an answer that conflates calculated width and resolved CSS rules
[17:01:38] <moniker-> it seems like you dont understand logical underpinnings here
[17:01:56] <moniker-> color of a pixel cannot possibly be black and white at the same time
[17:02:04] <moniker-> those 2 states are mutually exclusive
[17:02:13] <thykka> that's not what we're talking about regarding width and max-width...
[17:02:25] <thykka> but sure, repeat the same thing, see if it changes the way CSS works
[17:02:27] <moniker-> that's exactly the same LOGIC behind it is what im saying
[17:02:59] <moniker-> when max-width and width have values that contradict each other existence you get same LOGIC they become mutually exclusive
[17:03:07] <moniker-> both cannot exist at the same time in application on screen
[17:03:18] <thykka> they don't contradict though
[17:03:22] <moniker-> they do
[17:03:26] <thykka> that's not how the rules get applied
[17:03:36] <moniker-> max-width of 100px and width of 150px contradict each other
[17:03:40] <thykka> nope
[17:04:10] <moniker-> show me a rectangle that visually has both max-width 100px and width 150px at the same time
[17:04:14] <moniker-> that's impossible
[17:04:25] <thykka> if you think there's a contradiction, you're applying your own terms to CSS and wondering why CSS doesn't abide by those false rules
[17:04:35] <moniker-> im applying logic
[17:04:40] <thykka> and you don't seem to care to learn either, feels like talking to a brick wall
[17:04:49] <moniker-> you could logically say this object is a triangle
[17:04:56] <moniker-> and then say this same object is a square
[17:05:00] <thykka> ookay i'm outta here
[17:05:03] <moniker-> both are contradicting each other
[17:05:16] <moniker-> and hierarhy has to be applied to resolve what is it going to be
[17:05:31] <moniker-> you can't draw on screen both triangle and square like object
[17:06:08] <moniker-> this hierarchy of overriding which property wins could be the other way around
[17:06:18] <moniker-> width could have been set to override max-width
[17:06:24] <moniker-> it's arbitrary
[17:06:24] <undefined_bob> that is jsut not how it works
[17:06:35] <moniker-> it's set by standards body
[17:07:10] <DPA> Look, if you'd blend 2 images, you wouldn't say there couldn't have been 2 images, because there is only one screen, either. It's just that there are 3 images, the source images, and the final composited one. It's the same thing here.
[17:07:26] <moniker-> there's no absolute reason that max-width has to override width, it could be exactly the opposite, that width could override max-width
[17:07:48] <thykka> the absolute reason is that it would be idiotic, considering how CSS works in the first place
[17:08:00] <thykka> why introduce such a logical mess, when it's already simple
[17:08:05] <moniker-> no, it's set by whoever set the standard
[17:08:13] <thykka> point being?
[17:08:29] <moniker-> so authority that created this standard decided max-width overrules width when values contradict each other
[17:08:38] <moniker-> they could have decided to be the opposite, it's arbitrary
[17:08:54] <DPA> How layouting works and the final with of elements and their position is determined is specified in some W3 standard somewhere.
[17:09:03] <thykka> they didn't though. but you can't see that, because you refuse to let go of a misinformed view of how CSS rules get applied and what the difference is between rules and computed values
[17:09:23] <moniker-> logically both cases are same contradiction, same mutually exlusive states
[17:09:36] <moniker-> and it's arbitrary if it's set to resolve one way or another
[17:09:39] <thykka> if you want logic, go look at how browsers implement CSS
[17:09:50] <thykka> instead of making it up on the spot, in whichever way YOU want to see things
[17:09:50] <moniker-> in this case they decided it will resolve in favor of max-width overruling width
[17:10:50] <moniker-> the point is it is set by people (standards body)
[17:10:55] <moniker-> it's not some absolute rule
[17:11:17] <DPA> It's a calculation. There are 3 variables (technically even more). You control 2 of them. The 3rd one is the result. That's all there is to it.
[17:11:21] <moniker-> mutually exclusive contradiction is same everywhere
[17:11:22] <thykka> no, it's not absolute, but the way you talk about it makes it pretty clear that you're missing key concepts in between
[17:11:31] <moniker-> one is excluding the other
[17:11:34] <thykka> simplifying them into absurdity
[17:11:47] <thykka> that's not a good basis for learning
[17:11:49] <moniker-> resolution who wins is arbitrary and set by people
[17:11:52] <thykka> but perhaps you didn't come here to learn?
[17:12:13] <moniker-> so when i said this was the same the context i used was context of logical contradiction
[17:13:26] <moniker-> dunno why you have to be so belittling now when i wento into much greater detail of logic than you have, so if anyone could have learned somthing here it was you
[17:14:28] <undefined_bob> no
[17:14:36] <thykka> step (not actually) 1: Browser determines which CSS rules apply to every element. At this point your element may have `width: 100px` `max-width: 50px`. In the end, the browser doesn't care anything about the specificity of the blocks that introduced a particular rule, because that's already done. Step 2: the browser computes the actual pixel values for an element with math, considering both width and
[17:14:39] <thykka> max-width.
[17:15:14] <thykka> this is not one step. when calculating pixel values, all information about the rule block's specificity is already discarded
[17:15:43] <moniker-> when i said standards body i meant it much more loosely, it's any authority that has most direct control over what is happening... the point i was making is people are behind it and they decide
[17:15:58] <thykka> one declaration wins for width and one declaration wins for max-width. this is their 'computed values'. With these computed values the browser THEN calculates the actual pixel-based width
[17:16:00] <moniker-> it's not some natural law or something
[17:16:17] <thykka> the "override" simply cannot go the other way round without introducing crazyness
[17:16:38] <moniker-> the browser has to have implemented hierarchy rules which to apply
[17:16:49] <moniker-> browser cannot apply both at the same time
[17:16:52] <thykka> yes, but that happens way before width and max-width interact in any way
[17:16:52] <moniker-> they are mutually exclusive
[17:17:03] <moniker-> that hierarchy was decided and coded by people
[17:17:07] <moniker-> it's arbitrary
[17:17:08] <thykka> ffs
[17:17:17] <thykka> just listen ok?
[17:17:19] <moniker-> it could have been the other way around
[17:17:35] <moniker-> browser could have been coded to apply width instead of max-width when values contradict
[17:17:50] <thykka> and what would "max-width" even mean then?
[17:17:51] <DPA> There is no one true irrefutable system of logic. Any formal logic statement only holds true within some self-consistent logic system, and different logic systems can disagree about what is true and what is not.
[17:18:11] <moniker-> it would mean it was overruled by whatever hierarchy is set... you can't avoid hierarchy
[17:18:16] <moniker-> you always end up with hierarchy
[17:19:00] <thykka> well the hierarchy here is; specificity and cascade determine which elements get which rules, but at that point THEIR hierarchy ends and the RESULT is used in another system
[17:19:07] <moniker-> and by that i mean people behind it deciding it should be that particular hierarchy
[17:20:18] <thykka> the other system (calculating actual pixel values) is so low in the system hierarchy, that it doesn't even get informed of how high the specificity of the winning rule was
[17:20:30] <thykka> you get that, right?
[17:21:39] <moniker-> yes you are talking about two different hierarchies, and these 2 hierarchies are also in their own hierarchy one is on top
[17:22:11] <thykka> the internals of those two SEPARATE subhierarchies are not accessible to each other
[17:22:34] <moniker-> and they don't need to be
[17:22:51] <thykka> they would with your idea that width could override max-width when used with an ID selector
[17:23:17] <moniker-> because that's how it was decided by people
[17:23:19] <DPA> You can think of things in different ways, and always get correct / consistent results. But it's not useful to use different terminology than everyone else, noone will understand you.
[17:23:23] <moniker-> it could have been decided the opposite way
[17:23:33] <thykka> it could not have been the opposite way..
[17:23:35] <thykka> think about it
[17:23:47] <moniker-> it could have
[17:23:50] <thykka> first determine the pixel dimensions of elements, THEN determine which dimensions should win...
[17:24:13] <thykka> that's not useful nor practical
[17:24:24] <thykka> if even possible at all
[17:24:35] <thykka> within the realm of math and CS, that is
[17:25:18] <moniker-> no, you can clearly decide that width can override max-width if you want to
[17:25:24] <moniker-> there is nothing impossible about it
[17:25:47] <moniker-> try coding your own little program
[17:25:58] <moniker-> you can as developer decide what overrides what
[17:26:07] <undefined_bob> but its just not how it works
[17:26:17] <undefined_bob> what are you even arguing about
[17:26:18] <thykka> don't you get that the way you put it means re-inventing CSS from the ground-up? just for a special case of rules that interact during the computation phase?
[17:27:02] <thykka> and believe me, i've programmed a lot of programs, and studied CSS for decades
[17:27:24] <thykka> i'm familiar with how programs and CSS work
[17:29:16] <moniker-> it's irrelevant how "difficult" you see accepting that rule could have been set that width overrules max-width if width came from ID selector and max-width came from lower specificity type selector
[17:29:23] <moniker-> it's rule that can be set either way
[17:29:35] <moniker-> there's nothing impossible about it as you suggested earlier
[17:29:51] <moniker-> and that's still a RULE
[17:29:56] <moniker-> hence overruling
[17:29:59] <thykka> it's a consequence
[17:30:08] <thykka> not a rule per-se
[17:30:12] <moniker-> it is
[17:31:08] <moniker-> anyways... i think we have exhausted this topic so i will move on now
[17:31:24] <DPA> Did I mention that the property "color" also works wrong? Obviousely, it should always result in blue, instead, it interprets different values as all kinds of color! There is nothing impossible about always letting it be blue. The color property makes no sense. It is illogical.
[17:31:52] <thykka> and yes, you could invent your own DSL for styling elements, in which specificity is part of computing display values, but CSS ain't it, and if you're familiar with how CSS is generally implemented, you'd see how absurd it would be in that context.
[17:32:37] <moniker-> DPA that depends on what you consider to be wrong, it follows preset rules
[17:32:37] <thykka> hence "impossible"
[17:32:49] <thykka> yeees
[17:32:50] *** Quits: drej (~drej@user/drej) (Ping timeout: 268 seconds)
[17:33:25] *** Joins: drej (~drej@user/drej)
[17:33:55] <moniker-> logical contradiction however doesn't seem arbitrary, when it happens two states are mutually exclusive and it's impossible for it to exist
[17:34:19] <thykka> your states are not described with the kind of accuracy that would yield useful conclusions
[17:34:36] <thykka> you're oversimplifying what happens between the curtain
[17:34:43] <moniker-> color of pixel cannot be black and white at the same time on screen
[17:34:46] <thykka> then applying logic to the oversimplification
[17:34:54] <moniker-> that's logical contradiction
[17:34:57] <thykka> garbage in - garbage out
[17:35:40] <moniker-> width of box cannot be 100px and 200px at the same time
[17:36:32] <DPA> If max-width always overruled width, then it would also overrule width if width was smaller than max-width. That is not the case. Therefore, the final width must be different from both, the width property, and max-width.
[17:36:43] <thykka> one CSS rule may tell the pixel to be red, another one may tell it to be green. Specificity will tell you which one wins. Now 'red' doesn't mean shit to computers, so there's ANOTHER process which determines the machine-readable color values. So while two rules can contradict before the winner is chosen, the winning value contradicts nothing.
[17:36:46] <moniker-> deciding which one takes primacy is human construct, people decide that, hence it's arbitrary rule
[17:37:37] <thykka> that rule is well-defined and documented.
[17:37:54] <thykka> regardless of how arbitrary you want to see it as
[17:38:00] <moniker-> so humans decided which one will come into existence, either a circle or a square, either a black pixel or white pixel, either 100px wide box or 200px wide box
[17:38:10] <moniker-> those are rules
[17:38:15] <DPA> Of course it's arbitrary. There is nothing in a computer noone decided to implement the way they did.
[17:38:16] <moniker-> that humans came up with
[17:38:20] <thykka> they're an oversimplification of CSS
[17:38:24] <moniker-> hence the term overruling
[17:38:34] <thykka> applying that as your mental map will yield shit results
[17:39:22] <thykka> it's like I'd say that quantum physics is actually like playing basketball, then wondering why my dunks don't make the dead cat alive again
[17:39:38] <moniker-> it's nothing like that
[17:39:46] <thykka> it's very much like that from where I stand
[17:39:47] <moniker-> but i can't help you that you feel defensive now
[17:39:54] <thykka> defensive?
[17:39:55] <moniker-> afk
[17:41:41] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[17:41:53] <thykka> honestly, the main feeling here is that you just want to rant because you made a mistake, and are now trying to justify it by blaming it on the "arbitrariness" of CSS.
[17:41:55] *** Joins: wyre (~wyre@user/wyre)
[17:41:58] *** Quits: wyre (~wyre@user/wyre) (Remote host closed the connection)
[17:42:08] <thykka> i might be wrong, but that's how this discussion looks like
[17:44:35] <thykka> yes, CSS could've been very different. They could've gone with any other possible system, but that's largely irrelevant here. Decisions were made regarding the architecture of how things fit together in CSS and browsers. These decisions are documented, yet you complain that "it could've been one way or the other", although that's clearly false considering the premise
[17:44:51] *** Quits: Harlin (~DonQixote@75-163-188-12.clsp.qwest.net) (Quit: Leaving)
[17:48:07] <thykka> and if your point was "they could've chosen differently decades ago", then yes, that's true, but I fail to see how, or even why that's relevant.
[17:50:53] *** Joins: ath28 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[17:51:51] *** Joins: dimi__ (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d)
[17:52:34] *** Quits: dimi1947 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[17:55:39] *** Quits: ath28 (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Ping timeout: 268 seconds)
[17:57:01] *** Quits: dimi__ (~dimi1947@2a02:1388:2182:cd31:6de9:6430:75ab:7c1d) (Quit: Leaving)
[17:58:09] <moniker-> none of that described my efforts here. I made myself available to your quizzing answering why and how. Explained extensively context I was coming from and why I thought something was counter-intuitive to me, how I stumbled upon different hierarchies of logical rules that affect end result. You had issue with me using term 'overruling' or 'overriding' saying none of that happened. I tried to
[17:58:09] <moniker-> explain to you in which context that applies. You got upset that I didn't simply agree with everything you were saying and was standing my ground in what has turned into debate about in which context does saying 'something overrules something else' apply which I extensively explained.
[17:59:02] <moniker-> i resent that all attention i gave you, efforts to explain myself you now pejoratively call "you just want to rant because you made a mistake"
[17:59:33] <moniker-> so forgive me but temporarily i have to put you on ignore
[18:01:28] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[18:01:49] *** Joins: slikislik (uid190389@id-190389.hampstead.irccloud.com)
[18:03:23] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[18:06:37] <thykka> you disagreed with how CSS works, which I (and others here) know a lot about, refusing to consider the implications of the finer details that were pointed out to you. Instead of making any visible attempt to reconcile your view, you kept blasting about it, ignoring the various explanations of why things are the way they are.
[18:07:14] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[18:10:47] *** Joins: stenno (~stenno@user/stenno)
[18:11:23] *** Joins: wyre (~wyre@user/wyre)
[18:12:54] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 268 seconds)
[18:14:03] *** Quits: drej (~drej@user/drej) (Read error: Connection reset by peer)
[18:19:38] *** Joins: drej (~drej@user/drej)
[18:21:02] *** stenno is now known as stenno\OK
[18:29:25] *** Joins: stenno (~stenno@user/stenno)
[18:32:39] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 268 seconds)
[18:34:27] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:44:22] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[18:52:23] *** Joins: stenno (~stenno@user/stenno)
[18:59:02] *** Joins: Harlin (~DonQixote@75-163-188-12.clsp.qwest.net)
[19:03:55] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[19:10:33] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Quit: WeeChat 1.5)
[19:18:23] *** Joins: Rockwood (~Rocky@user/rocky)
[19:19:13] *** Quits: innovati (~innovati@198-91-225-141.cpe.distributel.net) (Quit: Textual IRC Client: www.textualapp.com)
[19:30:03] *** Joins: stenno (~stenno@user/stenno)
[19:39:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:44:20] *** stenno is now known as stenno\OK
[19:48:01] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[19:55:45] *** Quits: moniker- (~mon@213.149.61.63) (Remote host closed the connection)
[20:07:07] *** bin is now known as sbin
[20:23:39] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 268 seconds)
[20:25:02] *** Joins: WishBoy (~WishBoy@user/wishboy)
[20:29:29] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[20:51:02] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[20:57:45] *** Joins: stenno\OK (~stenno@user/stenno)
[20:59:06] *** Joins: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com)
[21:00:02] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[21:03:44] *** Joins: silverdust (~silverdus@user/silverdust)
[21:04:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[21:07:37] <silverdust> Hi, what would you do to make this <table> fit within its container without overflowing like it is now https://codepen.io/josephrexme/pen/38a43d621490b95b3f994cf971ea3ad6?editors=1000
[21:30:59] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[21:35:48] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[21:36:09] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[21:37:06] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[21:40:44] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 268 seconds)
[21:44:12] *** Joins: slightlypandaish (~slightlyp@2001:8a0:5613:3b00:92f:cc92:1ff1:3a31)
[21:50:37] <hassoon> silverdust: you need to make the table scrollable inside its parent
[21:50:51] <hassoon> silverdust: by giving the parent overflow:auto
[21:51:22] <hassoon> or do you want to restrict the table to take the same width as its parent ?
[21:56:11] *** Quits: slikislik (uid190389@id-190389.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:58:58] <silverdust> same width as parent hassoon
[22:02:16] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Quit: Konversation terminated!)
[22:14:10] <hassoon> silverdust: https://ghanhass.github.io/myfiddle/444
[22:14:31] <hassoon> silverdust: your table contains a deeply nested set of elements, so i wrote that css code
[22:14:59] <hassoon> silverdust: alot of elements buried inside the table have a width around 800px or so, bigger than your 600px
[22:23:48] <silverdust> Thanks hassoon . I'll look through what you have. But I was hoping there'd be a way to say regardless of child element widths, always keep them at 100% of this parent
[22:24:34] <silverdust> Like if cw (container width) was a well supported unit, having it set on the table
[22:26:32] <hassoon> silverdust: what's forcing your table to overflow its parent, is the elements nested inside it, having a forced widht of 800px and such
[22:28:25] *** Joins: jazzy (~jaziz@user/jaziz)
[22:28:53] <silverdust> Thank you. I'll look to see if I can mitigate sub elements from having large fixed widths
[22:39:16] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:41:47] *** Quits: Harlin (~DonQixote@75-163-188-12.clsp.qwest.net) (Remote host closed the connection)
[22:43:47] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[22:44:18] *** Quits: slightlypandaish (~slightlyp@2001:8a0:5613:3b00:92f:cc92:1ff1:3a31) (Quit: Client closed)
[22:52:31] *** Joins: bmomjian (~bruce@momjian.us)
[22:52:38] *** Parts: bmomjian (~bruce@momjian.us) ()
[23:09:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[23:18:05] *** Joins: jazzy3 (~jaziz@user/jaziz)
[23:21:23] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[23:29:18] *** Joins: yukiup (~yukiup@c-24-7-48-207.hsd1.ca.comcast.net)
[23:30:23] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 246 seconds)
[23:31:06] *** Quits: bodiccea_ (~bodiccea@user/bodiccea) (Ping timeout: 260 seconds)
[23:32:19] *** Joins: moniker- (~mon@213.149.61.63)
[23:34:17] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[23:52:05] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 268 seconds)
[23:52:36] *** jazzy3 is now known as jazzy
