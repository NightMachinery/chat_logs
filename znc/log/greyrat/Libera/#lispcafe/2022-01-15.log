[00:00:19] <moon-child> that is fraught, obviously.  Especially if you use the GPU, as they tend to cut corners with their floating-point
[00:00:32] <gilberth> And the user input?
[00:00:39] <moon-child> fake that too
[00:01:08] <gilberth> Yes, with all oddities like network latency and such? Have fun.
[00:01:09] <moon-child> obviously, you can not test what happens when the user presses a key.  (Or can you?)  But you can test what happens when you tell the system 'key X was pressed'
[00:01:54] <moon-child> why do you care about network latency?
[00:01:59] <moon-child> that is a separate problem
[00:02:49] <gilberth> BTW XTEST exists.
[00:04:29] <gilberth> moon-child: Well, you can certainly record user input and screen output. But that might be subject to network latency. Same thing even on a local GUI as long as you have some asynchronicity in your window system/toolkit, which you should. Begins with vsync, which you also want.
[00:05:26] <gilberth> And you certainly can't craft those tests before you start coding, unless you're crazy.
[00:08:27] <moon-child> gilberth: well, these are separate issues.  1) when I send my gui system some event, does the right thing get rendered _immediately_.  In this case we bypass the windowing system.  2) when I send an event to a window/over the network/..., does it reach its destination _eventually_
[00:10:07] <gilberth> With a properly designed GUI system there is no immediately. Events are queues, output is buffered.
[00:10:44] <moon-child> sure.  But a 'frame' is still well-defined and discrete
[00:12:04] <moon-child> sure, you may in some cases have complex interactions with threads and external data.  You can still properly test code which does not do such things
[00:12:24] <gilberth> Well, it certainly could be done. It'll be fragile and you certainly won't craft tests before hand, it's only feasible to record test sessions with an existing system to look for regression.
[00:12:48] <moon-child> yes
[00:31:39] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[00:52:22] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:6113:2671:c33c:ef4a) (Ping timeout: 250 seconds)
[00:52:47] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[00:53:11] *** Joins: shka (~herr@109.231.0.226)
[01:05:12] *** Joins: Alfr (~Alfr@user/alfr)
[01:07:26] <epony> yes, you can't use it on GC+BC poisoned application VMs <dra> Apparently using a debugger requires justification nowadays
[01:20:39] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:21:57] *** Quits: dra (~dra@2a04:4540:6409:9600:3465:7864:114:561c) (Quit: Leaving)
[01:22:16] <hayley> https://www.youtube.com/watch?v=JqNcZQ7cVno
[01:22:17] -ixelp- Rock 'N' Roll People In A Disco World - YouTube
[01:40:00] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:877b:86ff:8e37:7e9b)
[01:50:12] * hayley continues hurting head talking about smart contracts and language design.
[01:50:30] <hayley> "Unfortunately at the time of the DAO, reentrancy was a pretty new kind of vulnerability. We should never forget about <link to article on hindship bias>"
[01:50:53] <hayley> The idea is to avoid kinds of bugs by careful language design, without knowing exactly what they are.
[01:52:13] <sm2n> I've spent the last half hour or so alternating between laughter and horror reading <https://web3isgoinggreat.com/>
[01:52:14] -ixelp- Web3 is going just great
[01:56:35] <gilberth> I don't get this [de]centralized argument. I mean, who stops me from running my own web server?
[01:58:21] <hayley> Nobody. But it'd sure suck if your server went down.
[01:59:50] <gilberth> And?
[01:59:51] <sm2n> Ironically the "decentralized" people tend to use things with single points of failure
[02:00:50] <hayley> If you had replication, you'd need a whole lot more servers to go down, before your users get annoyed.
[02:01:55] <aeth> netfarm is the real web3
[02:02:40] <moon-child> hayley: who stops me from running my own n web servers?
[02:02:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:03:04] <hayley> moon-child: Nothing. But physical separation also helps.
[02:03:08] <hayley> aeth: I'd rather not
[02:03:14] <sm2n> I don't want a web I want a free association of objects
[02:03:15] <moon-child> sure, yes, that's what I meant
[02:03:30] <moon-child> n web servers distributed over n locations
[02:03:35] <gilberth> Nah, this centralization of content has very different reasons. It begins with social media. A social medium or a messenger is as good as the number of people you find there. This is one cause why there is a tendency to monopolies. The second is carelessness of user. The third is: The user [personal data] is what those services make money with, so there is no incentive to e.g. have an open messenger protocol for the vendors.
[02:04:33] <gilberth> Imagine a world, where mail would be like that? Needing a dozen different email clients, because there would be no RFC822.
[02:04:48] <sm2n> moon-child: that is what services already do
[02:05:01] <gilberth> And watch the decline of IRC for instance.
[02:05:28] <aeth> IRC has declined because chat companies have been able to delay the need to profit for the entire '10s due to easy money
[02:05:36] <aeth> they don't need a business, they can just continue to receive investments
[02:05:44] <Duuqnd> I've read somewhere that IRC was slowly declining already in the early 90s but that might be wrong
[02:05:45] <aeth> once software actually has to monetize, it gets increasingly annoying
[02:06:13] <aeth> no
[02:06:17] <aeth> IRC peaked around the late '00s
[02:06:19] <aeth> maybe 2006
[02:06:26] <gilberth> aeth: Yeah, that is my point (2): Users don't care about open protocols.
[02:06:37] <moon-child> aeth: in terms of total users, maybe, but as a proportion of overall internet traffic?
[02:06:42] <moon-child> the rest of the internet was growing too
[02:07:15] <aeth> '00s mainstream group chat couldn't compare to IRC
[02:07:22] <aeth> it was just IM with some extra group chat stuff thrown in
[02:07:30] <aeth> 1-1 conversations as the focus
[02:09:14] * hayley continues schooling on GC too.
[02:09:24] <hayley> https://github.com/hanabi1224/Programming-Language-Benchmarks/issues/144#issuecomment-1013520859 Have I done it to death now?
[02:09:25] -ixelp- Could you please add SBCL Common Lisp to the languages? · Issue #144 · hanabi1224/Programming-Language-Benchmarks · GitH [...]
[02:09:38] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:09:55] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[02:10:05] <moon-child> jeesh
[02:10:17] <sm2n> this is still going on?
[02:10:19] <gilberth> Also: Look at the decline of NNTP. These days we have message boards scattered all around. Though for NNTP is was not trivial to get access too unless your ISP was nice and provided it.
[02:10:25] <hayley> sm2n: Yes.
[02:11:06] <moon-child> gilberth: I still use nntp from time to time
[02:11:37] <moon-child> it hasn't the volume, but it has a moderately better snr.  Sometimes.
[02:11:46] <sm2n> "as reported by /usr/bin/time" since when did this exist?
[02:11:46] <hayley> The other thing for blockchain/Netfarm replication is that you get to see how what you get was derived, as both transactions and code are public, and can reproduce it yourself.
[02:12:08] <hayley> A while.
[02:12:10] <sm2n> I thought time was a shell built-in, and my computer agrees with me
[02:12:25] <hayley> There is also a /bin/time or similar, which is more featureful, yes.
[02:13:00] <sm2n> weird, I don't have it
[02:13:06] <gilberth> moon-child: I don't, but then I went silent in general since about 2002 or so. Despite me being an old-timer as I used NNTP over UUCP in early 90s. Before the internet got colour.
[02:13:20] <hayley> OTOH the question I want answered is that, if the compiler is able to unbox or stack allocate objects, and I am none the wiser, who cares?
[02:13:35] <sm2n> oh, it's a separate package not part of coreutils
[02:13:39] <moon-child> '[b]efore the internet got colour'  hahha
[02:13:41] <hayley> C is implemented in terms of an abstract machine, but we are obviously not simulating one to run C programs. Ditto for CL in a way. Who cares?
[02:14:13] <moon-child> hayley: devil's advocate is that a synthetic benchmark may offer more opportunities for unboxing or stack-allocation than a representative program
[02:14:20] <moon-child> to which I say: make the benchmark better then!
[02:14:27] <hayley> Sure.
[02:17:21] <sm2n> Why is this guy obsessed with callgrind?
[02:17:35] <hayley> Apparently the JVM does call malloc 7134 times, but I highly doubt that's his binary tree.
[02:18:01] <hayley> Else you'd have a number of calls awfully similar to the number of nodes allocated.
[02:18:52] <moon-child> yeah that just sounds like setup stuff
[02:26:24] <hayley> And the number of mallocs is basically constant w.r.t tree size: 5817 for a depth of 5, and 5896 for depth 15.
[02:27:27] <hayley> I'm pretty sure more than 169 additional objects are being allocated with the larger benchmark, but idk.
[02:29:06] <hayley> https://shipilev.net/jvm/anatomy-quarks/4-tlab-allocation/ just shows you the code for allocation. Nice.
[02:29:07] -ixelp- JVM Anatomy Quark #4: TLAB allocation
[02:33:08] <hayley> sm2n: Because he thinks every language implementation ever will call malloc() for some reason.
[02:34:29] <moon-child> wonder what he'll make of sicl
[02:34:38] <moon-child> 'it doesn't allocate, so it must not have a gc'
[02:35:12] <hayley> "compiler note: detected benchmark, removing worthless code"
[02:35:26] <moon-child> :D
[02:35:49] <hayley> cleavir-detect-hacker-news-circlejerk-material
[02:41:10] <hayley> If that guy tells me that having the NO_GC_SCAN tag is related to OCaml being able to pass around unboxed immutabe objects though, I will have to work out how to punch people through computer screens.
[02:41:18] <hayley> *immutable
[02:46:02] *** Joins: semz_ (~semz@user/semz)
[02:46:49] <hayley> If we are doing a GC benchmark, still, the heap size should be varied so you get a graph with a _ curve. But OTOH the binary trees benchmark doesn't make much garbage.
[02:46:53] <hayley> \_ rather
[02:48:30] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[02:51:54] *** Joins: kevingal (~quassel@37.228.202.92)
[03:45:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:877b:86ff:8e37:7e9b) (Ping timeout: 240 seconds)
[04:33:24] *** Joins: notzmv (~zmv@user/notzmv)
[04:42:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:dbd9:529d:8dc9:86b3)
[04:43:37] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[05:00:10] *** Joins: copec_ (~copec@schrodbox.unaen.org)
[05:01:37] *** Joins: taeaad_ (~taeaad@user/taeaad)
[05:02:49] *** Joins: |3b|` (bbb@user/3b/x-2324788)
[05:04:21] *** Joins: White__Flame (~quassel@user/white-flame/x-6930243)
[05:05:29] *** Joins: drakonis1 (drakonis@user/drakonis)
[05:09:04] *** Quits: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: APic (apic@apic.name) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 240 seconds)
[05:09:06] *** copec_ is now known as copec
[05:09:06] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: taeaad (~taeaad@user/taeaad) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: |3b| (bbb@user/3b/x-2324788) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: drakonis (drakonis@user/drakonis) (Ping timeout: 240 seconds)
[05:10:06] *** Joins: epony (~epony@user/epony)
[05:12:15] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:13:38] *** Joins: APic (apic@apic.name)
[05:15:05] *** drakonis1 is now known as drakonis
[05:20:46] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:33:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:dbd9:529d:8dc9:86b3) (Ping timeout: 240 seconds)
[05:34:55] *** Quits: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net) (Quit: Leaving)
[05:36:34] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net)
[05:48:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e9b8:ca94:422e:6f77)
[06:04:29] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:05:06] <dave0> maw
[06:16:11] *** Joins: greaser|q (greaser@user/greasemonkey)
[06:16:58] *** greaser|q is now known as GreaseMonkey
[06:27:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:29:29] *** Quits: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:48:04] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[06:54:33] <mfiano> Hey math peoples
[06:54:42] <mfiano> Can this be simplified? (truncate (* (- z x) (- z y)) z)
[06:57:00] <moon-child> it can be simplified but it can't be made faster
[06:57:09] <mfiano> I'd still like to know
[06:58:16] <moon-child> you could make it (+ (- z x y) (truncate (* x y) z)).  Though come to think of it that might depend on signs
[06:58:16] <mfiano> how, that is.
[06:58:28] <moon-child> and of course assuming xyz are integers
[06:59:15] <mfiano> I fail to see how that is simpler. Isn't it adding an add?
[06:59:36] <mfiano> 2 subs, 1 mul, 1 div in the former
[06:59:39] <moon-child> yes, hence 'can't be made faster'
[07:00:00] <mfiano> Oh I guess more ops is also simpler to you, because you combined the subs?
[07:01:35] <moon-child> hm, not exactly.  I guess you could look at it that way.  But I will point out that simplifying is the opposite of factoring
[07:02:25] <moon-child> (where factoring deduplicates and hence saves more cycles.  See e.g. horner form)
[07:02:33] <moon-child> *hence is more likely to save cycles, I meant
[07:03:20] <mfiano> I see.
[07:03:41] <mfiano> I am looking at some very awful Go code, for a CMYK->RGB conversion...
[07:03:48] <mfiano> https://github.com/golang/go/blob/master/src/image/color/ycbcr.go#L336
[07:04:06] <mfiano> Look at the func on L352 also and the comment
[07:04:39] <mfiano> Whereas this is my lisp version of the former: https://gist.github.com/mfiano/9f724b79418b5879c3a4e2386bd1a16d
[07:04:50] <mfiano> I have no idea why they are doing that 16bit and shifting nonsense
[07:04:59] <mfiano> It makes no sense, and gives the same results
[07:05:50] <moon-child> did you test exhaustively?
[07:05:53] <mfiano> Yes
[07:08:58] <moon-child> cool.  Yeah idk
[07:12:38] <mfiano> It looks like they are just increasing the bit width to make room for multiplication, copying the result to the high bits, and then shifting back at the end
[07:12:45] <mfiano> I think this is just to account for static sizes
[07:12:49] <mfiano> Which makes it very confusing to understand
[07:17:54] *** Quits: Catie (~user@user/catie) (Quit: wrong client)
[07:18:18] *** Joins: Catie (~user@user/catie)
[07:37:09] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[08:08:25] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Remote host closed the connection)
[08:29:17] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 250 seconds)
[08:45:07] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[09:50:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[10:04:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:56:50] *** Joins: Oddity (~Oddity@user/oddity)
[11:20:12] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: brb)
[11:21:14] *** Joins: moonwiki (~moonwiki@152.97.181.247)
[11:36:43] *** Quits: epony (~epony@user/epony) (Quit: QUIT)
[11:38:21] *** Joins: epony (epony@user/epony)
[11:44:39] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[12:16:42] *** Joins: notzmv (~zmv@user/notzmv)
[12:20:54] *** Joins: shka (~herr@109.231.0.226)
[12:47:57] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[12:48:26] <dave0> maw
[12:50:48] <ck_> didn't you say that seven hours ago? how many days per day do you experience?
[12:51:27] <moon-child> more like 10 hours ago by my count
[12:56:53] *** White__Flame is now known as White_Flame
[12:58:13] <ck_> how do you count from three to ten?
[13:00:06] <moon-child> 2:50 to 25:20 more like 12.5 hours
[13:03:06] <ck_> k
[13:35:19] <ck_> dave0: I'd still like to know -- could use more days per day myself
[13:36:21] <dave0> oh were you asking about maw?
[13:37:51] <ck_> I took it as a form of "morning" yes
[13:42:05] <dave0> oh
[13:42:22] <dave0> sheldon cooper says `mee-maw`
[13:42:57] <dave0> i think it means mouth.. someone said `shut your maw` to me and i laughed lol
[13:43:40] <moon-child> mfiano: btw, potential perf argument in favour of the simplified code is you get to start the div sooner.  Whether that actually matters, who knows
[13:43:50] <moon-child> dave0: I always assumed it was a bastardized 'meow'
[13:44:00] <moon-child> I have been thinking of you as a cat this entire time
[13:44:04] <dave0> haha
[13:44:26] <dave0> i liked grumpy cat
[13:44:37] <dave0> he was a multimillionaire
[13:53:52] * phoe tries compiling qt5 and therefore tries compiling chromium
[13:53:58] * phoe screams into the void*
[13:54:41] <ck_> qmake ready for battle
[13:54:51] <phoe> actually it isn't qmake
[13:54:53] <phoe> it's ninja
[13:54:57] <phoe> I am building chromium
[13:55:01] <phoe> that's the hard part
[13:56:48] <ck_> what is the problem?
[13:57:09] <phoe> currently, C++ templates
[13:57:16] <phoe> but I've made a change and I hope it makes a difference
[13:57:24] <phoe> if not, I'll scream further
[13:58:06] <moon-child> phoe: my condolences
[14:04:00] * moon-child eats half a wheel of brie in one sitting
[14:04:23] <dave0> say cheeeese!
[14:05:34] <moon-child> :<
[14:05:36] <moon-child> don't mock my shame
[14:06:28] <dave0> oh no, i love cheese
[14:06:58] <dave0> i learned that macaroni is merely a cheese delivery device :-)
[14:08:04] * contrapunctus has become something of an expert at making vegan mac and cheese
[14:21:25] *** Joins: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de)
[14:21:25] *** ChanServ sets mode: +o gilberth
[14:24:18] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[14:24:33] *** Joins: semz (~semz@user/semz)
[14:28:26] <ck_> what is the vegan cheese made of?
[14:30:32] <phoe> vegan milk, drained from vegan cows
[14:30:38] <moon-child> ck_: vegans, obviously
[14:31:38] <ck_> soylent green is set in 2022
[14:31:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:32:50] <dave0> so we extract the cheese from the vegan, and throw the rest away? seems a bit wasteful
[14:36:33] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[14:36:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:40:48] <pl> Well, full fat milk is what remains after you use a centrifuge to remove fat from milk,so...
[14:41:17] <semz> dave0: No, no, that's what the vegan sausage is made from.
[14:42:09] <moon-child> hmm, what is the casing made of?  Can't use intestine, as it's not vegan.  Condoms?
[14:59:32] <contrapunctus> ck_: there are different kinds of vegan cheese. For mac and cheese, the sauce I make uses carrots, cashews, onions, and potatoes, all boiled together and blended. Salt and nutritional yeast are important seasonings. It has all the properties of cheese I look for...when my omni friend tried it, someone asked him if he wanted some grated cheese added, and he said there was no need for it 🙂
[15:04:25] <contrapunctus> The recipe called for onion powder and garlic powder, which are not too common in Indian cooking, so I add fresh onion and garlic cloves during the boiling stage.
[15:05:21] <ck_> interesting, thank you
[15:12:25] * hayley wonders why the cat is crying again at 10:42pm
[15:13:13] <gilberth> Cats fight.
[15:16:08] <hayley> The cat wanted a belly rub apparently.
[15:16:36] <gilberth> And she cries? Wasn't the cat outside?
[15:16:53] <gilberth> It, rather. /me needs coffee.
[15:16:57] <hayley> Inside.
[15:17:22] <gilberth> Oh! Then it couldn't have fought.
[15:18:23] <hayley> It could with the other cat, but that did not happen.
[15:18:43] <gilberth> You have two cats?
[15:18:51] <hayley> Yes.
[15:19:08] <gilberth> And they stay inside?
[15:19:46] <hayley> At night.
[15:20:18] <gilberth> Odd. Cats like to be active at night.
[15:22:17] * hayley thinks of more bullshit for CLOSOS
[15:23:07] <phoe> https://github.com/commonqt/commonqt5/issues/2
[15:23:13] <phoe> cmake issues for the win^Wloss
[15:23:32] <hayley> 1. Heap compression 2. Concurrent Train collector (I can't afford all those darn full traces on a 2TB disk) 3. Windows Update UI
[15:24:13] <Duuqnd> phoe: I wonder why it's apparently so hard to make a nice build system for C/C++
[15:24:38] <phoe> Duuqnd: xkcd standards, also C++ sucks
[15:24:47] <hayley> It is C, the non-niceness is contagious
[15:24:53] <Duuqnd> True
[15:25:19] <shka> Duuqnd: static and dynamic libraries, multiple environments, "where is that damn so", multiple ways to build
[15:25:58] <moon-child> there were two papers published: 1) recursive make considered harmful; 2) non-recursive make considered harmful
[15:26:01] <moon-child> what's a body to do?
[15:29:37] <ck_> harm.. obviously
[15:30:48] <hayley> The only way to win is not to play.
[15:40:19] <hayley> (BTW windows update UI would be used to update Quicklisp, which would run concurrently w.r.t everything without issues, but we'd keep the interface and the pop-ups just for giggles)
[15:41:04] <hayley> I think beach mentioned offline compaction for CLOSOS though, and still not a fan. Even if we get to stop the world sometimes, cause we don't have to reboot to update.
[15:42:06] <sham1> moon-child: the body is to use redo
[15:44:44] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:47:28] *** Joins: domovod (~domovod@176.196.122.197)
[15:57:43] <pl> phoe: wy are you using visual studio generator when building for linux? 
[15:58:16] <pl> https://github.com/commonqt/commonqt5/issues/2#issuecomment-1013668913
[15:58:18] <pl> There 
[15:59:42] <phoe> pl: that's what the manual said
[15:59:52] <phoe> I adapted the command to avoid the vs stuff
[16:16:34] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:31f8:fc53:f944:73bf)
[16:36:42] <phoe> https://cdn.discordapp.com/attachments/413865246030299143/931894560865542205/IMG_20220115_135554.jpg
[16:47:11] <edgar-rft> nice, I like the gothic duct tape :-)
[16:47:19] <phoe> yessss
[17:00:37] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 250 seconds)
[17:44:54] <phoe> a powerful spell https://cdn.discordapp.com/attachments/621389802691887134/931914278942945302/IMG_20220115_151401.jpg
[17:48:31] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[17:59:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:19:42] <dave0> nite all
[18:20:40] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:22:23] <phoe> nini
[18:33:08] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[18:43:38] <ck_> cucu
[18:43:53] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[18:45:21] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[18:48:31] <edgar-rft> moo
[18:49:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:07:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:13:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[19:27:46] <mfiano> Oh boy, I need a second opinion here. None of this makes sense and my brain hurts even thinking about it any longer.
[19:28:24] <mfiano> So it seems some old code of mine conflated color models and color spaces, and converted between different ones regardless. This seems very wrong technically speaking, but I'm really not sure how wrong it is from an API point of view.
[19:28:34] <mfiano> It's my understanding that a color space is defined by a mathematical function that maps a color model to a gamut.
[19:28:46] <mfiano> One can derive a color model from its space, but not vice versa.
[19:29:10] <mfiano> This is hurting my head to think about, but some other libraries I'm reading allow converting things like YCbCr (a color space), to a variety of color models in the generic RGB space, and vice versa.
[19:29:14] <mfiano> Thoughts?
[19:33:53] <ck_> are these conversions bidirectional?
[19:34:17] <mfiano> Yes
[19:34:40] <mfiano> Which may be out of gamut and lossy, but they still happen (in lots of libraries)
[19:34:41] <ck_> so something may be lost going from a bigger gamut to a smaller one, then back again
[19:34:48] <ck_> I see ok
[19:34:57] <mfiano> But it makes no sense mathematically speaking to me.
[19:35:24] <mfiano> Since there isn't even a RGB space. That is a generic term covering several spaces, like sRGB
[19:35:33] <mfiano> I am at a loss thinking about this.
[19:36:33] <mfiano> This is definitely not my area of expertise, but i'd at least like to document and/or fix my API.
[19:38:13] <ck_> what do you mean by "there isn't even an RGB space"?
[19:38:44] <mfiano> From wikipedia: "For example, although several specific color spaces are based on the RGB color model, there is no such thing as the singular RGB color space."
[19:39:51] <gilberth> Yep, there is no universally agreed upon RGB colour space.
[19:40:00] <ck_> yes, there's no singular one, but that's a different statement, isn't it.  I'm trying to find out what exactly the problem is
[19:40:25] <gilberth> These are based on what CRTs do and not on something physical.
[19:40:38] <ck_> what CRTs can do is something physical ;)
[19:40:45] <ck_> (scnr)
[19:41:08] <gilberth> ck_: Sure, but arbitrary.
[19:41:37] <mfiano> I don't know if there is a problem. My brain is ruined thinking about converting from a color model to a color space, since one cannot derive a space from a model.
[19:41:52] <gilberth> Consider things like white-point or gamma. Plus the gamut.
[19:42:49] <gilberth> mfiano: What's the difference between a colour model and a colour space?
[19:43:25] <mfiano> My library defines a conversion to pre-multiplied alpha RGB for every color model/space, and then defines a conversion method on each model/space that first decomposes it into its RGB PMA components, to be able to convert it to any other "format" without combinatoric explosion.
[19:43:45] <mfiano> This is definitely lossy, but aside from that, I'm not sure how correct it is. I've seen other libraries do the same.
[19:43:59] <mfiano> THey throw spaces and models into the same pile and ignore the difference.
[19:44:46] <gilberth> You haven't said yet, what the difference is.
[19:45:09] <mfiano> gilberth: a color model is an abstract concept used to represent a color as a set of components. It says nothing about the encoding. You need a mathematical function that maps that model to a gamut, which forms a space.
[19:45:40] <gilberth> How could there be a mapping, when there is no encoding?
[19:45:47] <mfiano> Right!
[19:46:47] <gilberth> Then you need to pick one.
[19:47:38] <mfiano> Ok, I think I need to think on this some more. My mind is not up for this right now.
[19:47:43] <mfiano> Need a break
[19:47:59] <gilberth> Which one depends on your application. For humans to look at, something tri-simulus like CIE should work.
[19:48:28] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:31f8:fc53:f944:73bf) (Read error: Connection reset by peer)
[19:48:44] <gilberth> If you shuffle image files around, you might get away with some RGB space.
[19:49:04] <mfiano> And therein lies more choices. Most are based on CIELAB or CIEXYZ.
[19:49:44] <gilberth> And when you have a (CONVERT from-space to-space data) generic function, you can later specialize as you wish.
[19:50:20] <mfiano> What if you have a convert from space/model to space/model function?
[19:50:52] <gilberth> ?
[19:50:56] <mfiano> For example converting from CMYK to RGB is straightforward. As is converting from RGB to Y (luminance aka grayscale)
[19:51:04] <mfiano> All of these are models
[19:51:55] <gilberth> Yes, but as you said there is no representation of an RGB color. Only of say an sRGB colour.
[19:53:36] <mfiano> Ok, I think I need to research some more in this area, as it is where I get lost. Most libraries just say RGB without specifying, and I am unaware of the differences aside from the gamma correction of sRGB.
[19:54:15] <mfiano> It also doesn't help that RGB is a generic space and an abstract model.
[19:55:58] <gilberth> Have fun. The nice thing about standards is that there are so many to pick from.
[19:56:23] <ck_> and you can always announce the n+1st standard
[19:58:05] <mfiano> A model is pretty abstract. It doesn't specify a bit-depth, the domain of the components, data type, whether they are pre-multiplied, and if so whether they encode occlusion or just emission...etc
[19:58:33] <mfiano> Colors are one of the most complicated things, because of a lack of standards and of too many standards, all at once.
[19:59:07] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[19:59:09] <gilberth> Well sRGB doesn't specify a data format. I would abstract that away.
[19:59:17] <mfiano> sRGB isnt a model
[19:59:24] <mfiano> is it?
[19:59:27] * ck_ .oO( background-color: mediumspringgreen )
[19:59:38] <mfiano> No sRGB is a space.
[20:00:02] <gilberth> Yes, but a model is too abstract. You want to know a gamut, a gamma, and a whitepoint, e.g.
[20:00:18] <mfiano> Yeah
[20:00:57] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[20:00:59] <gilberth> Whether you store that with pre-multiplied alpha (which alpha, btw) or in 8-bits per component or 16-bit, or in RGB order or BGR order or LE or BE or as floating point is of secondary interest.
[20:01:12] <mfiano> I am pretty dumb when it comes to color science, but I am learning a ton. My old code is horrible with terminology in retrospect now.
[20:01:15] <gilberth> I call the later a "pixel format" with my CLIM.
[20:02:30] <mfiano> So which color do we paint the bike shed?
[20:02:39] <mfiano> (be specific)
[20:03:16] <gilberth> clim:+transparent-ink+
[20:03:21] <mfiano> :)
[20:03:49] <gilberth> Better yet (clim:make-flipping-ink +foreground-ink+ +background-ink+) :-)
[20:05:25] <gilberth> mfiano: Anyhow with my CLIM I went the easy route as this is the most common and chose sRGB. As in (clim:make-rgb-color r g b) in my CLIM is defined as sRGB. the r, g, and b components are just real numbers in [0,1].
[20:05:27] <mfiano> Well thanks for the discussion. It got my mind on the right track at the very least.
[20:05:55] <mfiano> Right
[20:06:34] <phoe> https://functional.cafe/system/media_attachments/files/107/627/280/722/903/102/original/f75ff9bd341e6cce.jpeg
[20:06:36] <gilberth> How that RGB(A) tuples are to be stashed, that is what the bit patterns for those real numbers are, I call a "pixel format". R8G8B8 is a pixel format, as well as B8G8R8 e.g.
[20:06:42] <phoe> first page of about 4
[20:06:53] <phoe> before illumination
[20:07:35] <gilberth> mfiano: I don't know what your application is. For me sRGB is suffice. When dealing with dead trees, it might not.
[20:08:12] <mfiano> Dead trees you probably want one of the CMYK variants
[20:08:43] <mfiano> Since it is a subtractive model (like paint, not light)
[20:08:53] <mfiano> But again, this is a model, which is why I say variants.
[20:09:24] <gilberth> Well, CLIM itself is agnostic about that. But I needed some sort of universal colour space internally.
[20:15:38] <mfiano> Yes, for me that is sRGB with pre-multiplied alpha components
[20:16:09] <mfiano> Since PMA makes some calculations much simpler, and gives more correct blending results when using Porter/Duff etc
[20:16:22] <mfiano> s/simpler/cheaper/
[20:28:43] *** Quits: phantomics (~phantomic@71-218-243-149.hlrn.qwest.net) (Ping timeout: 256 seconds)
[20:38:21] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[21:02:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:25:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:28:18] *** Joins: treflip (~user@user/treflip)
[21:33:51] <mfiano> White_Flame: ping?
[21:33:58] <White_Flame> pong?
[21:34:15] <mfiano> Ah I PM'd you, if you aren't busy
[21:34:26] <White_Flame> oh, I tend not to notice those on my client
[21:34:49] <White_Flame> anyway, bit twiddling?
[21:35:07] <mfiano> Yeah something fairly complicated
[21:36:33] <mfiano> I ported this Go function to CL, and it mostly works: https://github.com/golang/go/blob/master/src/image/color/ycbcr.go#L171
[21:36:36] <mfiano> See comment: https://gist.github.com/mfiano/76435ed682ecb8505971d503e2b1d0a1
[21:37:08] <mfiano> It only ever hits the first branches no matter the input, and I'm not sure what I did wrong to be able to test that path.
[21:38:32] <White_Flame> what's the range of each channel?
[21:38:50] <mfiano> input or output?
[21:38:54] <White_Flame> input
[21:39:06] <mfiano> ub8
[21:39:34] <White_Flame> huh, then why such big multipliers in the begnning?  this is a sort of fixed point calculation?
[21:39:34] <mfiano> this is supposed to output ub32 (well really ub16 but statically typed to ub32 in Go to make room for mul)
[21:40:00] <White_Flame> ok, the Go code says it boosts it to 16-bit values
[21:40:01] <mfiano> Because of the output. Read the Go comments
[21:40:07] <mfiano> Right
[21:40:28] <White_Flame> so their high byte test seems to be checking for negative value?  that's a bit odd
[21:40:45] <White_Flame> it's basically doing a signed right-shift
[21:40:45] <mfiano> I have no idea
[21:41:15] <mfiano> My code does give correct results (minus some roundoff error which is to be expected)
[21:41:21] <mfiano> But I cant test the second branches
[21:41:31] <White_Flame> oh wait, the comment said it's doing clamping
[21:41:42] <White_Flame> (except it never uses the words, just shows code, which is dumb for comments)
[21:43:21] <White_Flame> and it turns the Y value into 24-bit, not 16-bit, because of the multiply by 0x10101
[21:44:37] <mfiano> Let me do a triple loop and test the whole input space just to be sure the second branch isn't being hit
[21:44:47] <White_Flame> these comments are just plain bad
[21:46:06] <mfiano> I know.
[21:46:15] <White_Flame> what does your %or-shift16 do?
[21:46:46] <mfiano> It's just like their mul by #x10101
[21:46:55] <mfiano> (logior x (ash x 8) (ash x 16))
[21:47:01] <White_Flame> ok
[21:47:24] <White_Flame> (the multiply is shorter and might be faster)
[21:48:07] <mfiano> moon-child: says an or/shift is less than 3x cycles, but I didn't test
[21:49:26] <White_Flame> ok, I think I get it
[21:49:55] <White_Flame> the ^(r>>31) basically takes the sign bit and makes the whole number 0x00000000 or 0xffffffff, then snips off the low 16 bits
[21:50:31] <White_Flame> the intermediate calculation is 24-bit
[21:50:42] <White_Flame> anything in the 0xff000000 mask means overflow/underflow
[21:50:49] <White_Flame> and the 2nd path clamps it without further branching
[21:50:57] <White_Flame> to 0 or ffff
[21:51:09] <mfiano> Ok. One sec
[21:51:40] <White_Flame> I don't know how often ycbcr -> rgb actually needs the clamping, it's probably rare
[21:52:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:55:57] <White_Flame> I think you can eliminate all your (ldb (byte 32 0) r|g|b) clauses, since the logand hits it bitwise anyway
[21:57:13] <mfiano> Oh jeez
[21:57:19] <mfiano> Clamping is very common actually
[21:58:08] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e9b8:ca94:422e:6f77) (Ping timeout: 250 seconds)
[21:58:09] <mfiano> It seems to happen when the input B component is 0 only (R and G can be anything)
[21:58:29] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:58:58] <mfiano> Err sorry, I convert RGB to YcbCr, and then record the RGB components every thing it hits the second branches
[21:59:24] <mfiano> s/thing/time/
[21:59:57] <mfiano> White_Flame: What exactly can I remove now?
[22:02:52] <White_Flame> can just use (if (zerop (logand r #xff000000)) in the 3 tests
[22:03:46] <White_Flame> but yeah, I would assume that colors not on the extreme edges of ycbcr representation wouldn't hit the 'else' clauses
[22:05:59] <mfiano> Ok thanks.
[22:08:33] <mfiano> Round trip conversion seems to work across the whole domain
[22:08:41] <mfiano> So I'll leave it at that. Thank you.
[22:08:56] <White_Flame> you could take out the IF checks and only do the 1st case, and see if there are any errors
[22:09:02] <White_Flame> since it's all integer domain, there shouldn't be any uncertainty
[22:09:14] <mfiano> Oh there are
[22:09:21] <White_Flame> ok
[22:09:25] <mfiano> Let me show you the rgb->ycbcr function, which is similar
[22:09:44] <mfiano> Added a comment
[22:10:01] <mfiano> That function is also in that Go file somewhere
[22:10:14] <mfiano> Those ldb's ARE needed
[22:10:19] <mfiano> as well as the second branches
[22:10:29] <White_Flame> it's interesting that round trip is accurate even with the clamping
[22:10:45] <White_Flame> I guess no 2 colors are clamped in the same way
[22:11:49] <White_Flame> oh, andyeah the rgb->ycbcr does (if (zerop (logand cb #xff000000))) instead of (if (zerop (logand (ldb (byte 32 0) cb) #xff000000)))
[22:11:51] <mfiano> It would have been a lot nicer to write this using floats
[22:23:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:25:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:28:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:52:32] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[22:52:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:53:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[23:14:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:16af:8d6b:42b4:6731)
[23:17:43] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 268 seconds)
[23:18:07] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[23:29:02] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:29:26] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
