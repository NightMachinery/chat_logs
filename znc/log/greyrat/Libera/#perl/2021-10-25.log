[00:04:46] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Remote host closed the connection)
[00:19:08] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Remote host closed the connection)
[00:26:19] *** Joins: argento (~argent0@168-227-96-26.ptr.westnet.com.ar)
[00:32:18] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[00:39:27] *** Quits: magla (~gelignite@55d4df94.access.ecotel.net) (Quit: Stay safe!)
[00:39:44] *** Joins: whynot (~whynot@37.73.83.66)
[00:49:52] *** Joins: Darkcoal (~user@2001:16a2:7a46:cb00:d474:14ff:fe1f:8b12)
[01:01:52] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[01:05:03] *** Quits: Darkcoal (~user@2001:16a2:7a46:cb00:d474:14ff:fe1f:8b12) (Quit: Darkcoal)
[01:09:24] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Quit: Bye)
[01:09:36] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[01:10:16] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Client Quit)
[01:10:27] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[01:12:27] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Client Quit)
[01:12:37] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[01:19:07] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Quit: Bye)
[01:19:17] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[01:19:43] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Client Quit)
[01:19:54] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[01:20:25] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Client Quit)
[01:20:35] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[01:22:51] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Client Quit)
[01:23:02] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[01:31:39] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 258 seconds)
[01:36:23] * GumbyPAN CPAN Upload: YAML-PP-0.029 by TINITA https://metacpan.org/release/TINITA/YAML-PP-0.029
[01:43:21] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[01:43:21] *** Quits: vrurg (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[01:43:56] *** Quits: vrurg_ (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[01:44:19] *** Joins: vrurg (~vrurg@45.74.95.181)
[01:53:07] *** Quits: arthurpbs (~arthurpbs@168.121.99.182) (Ping timeout: 258 seconds)
[02:06:50] *** Joins: arthurpbs (~arthurpbs@168.121.99.212)
[02:09:36] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Quit: Bye)
[02:14:09] *** Joins: tg (~tg@rockylinux/infra/tg)
[02:16:40] *** Quits: vincent_ (~vincent_@lfbn-idf3-1-162-114.w90-22.abo.wanadoo.fr) (Quit: and there was much rejoicing)
[02:18:26] *** Joins: Croran (~Croran@71.231.214.173)
[02:18:53] <cjac> alright, I want to translate this code to perl...
[02:18:53] <cjac> https://github.com/googleapis/google-auth-library-ruby/blob/main/test/id_tokens/key_sources_test.rb#L72
[02:18:54] <Paperbot> Link title(s): [ google-auth-library-ruby/key_sources_test.rb at main · googleapis/google-auth-library-ruby · GitHub ]
[02:19:31] <cjac> I'm not ceratin how to create and self-sign a new x.509 cert with perl
[02:20:01] <cjac> Crypt::X509 only seems to read existing certificates
[02:21:00] <cjac> oh, maybe https://metacpan.org/pod/Crypt::OpenSSL::CA
[02:21:01] <Paperbot> Link title(s): [ Crypt::OpenSSL::CA - The crypto parts of an X509v3 Certification Authority - metacpan.org ]
[02:26:37] *** Quits: argento (~argent0@168-227-96-26.ptr.westnet.com.ar) (Ping timeout: 244 seconds)
[02:29:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[02:31:42] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 260 seconds)
[02:33:34] *** Quits: pizdets (~pizdets@183.182.110.93) (Ping timeout: 260 seconds)
[02:33:48] *** Joins: pizdets_ (~pizdets@183.182.111.255)
[02:37:13] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:51:03] *** Joins: xenial-user10 (~androirc@3ec97c6f.catv.pool.telekom.hu)
[03:12:05] *** Quits: xenial-user10 (~androirc@3ec97c6f.catv.pool.telekom.hu) (Ping timeout: 244 seconds)
[03:14:40] *** Quits: Pali (~pali@user/pali) (Ping timeout: 244 seconds)
[03:14:58] <cjac> oh gee
[03:14:59] <cjac> > FAIL Installing Crypt::OpenSSL::CA::X509 failed
[03:18:41] *** Joins: argento (~argent0@168-227-96-26.ptr.westnet.com.ar)
[03:22:09] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:22:33] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[03:24:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 244 seconds)
[03:25:41] *** Quits: HiSPeed (~fkrueger@mail.holics.at) (Client Quit)
[03:26:09] *** Joins: HiSPeed (~fkrueger@mail.holics.at)
[03:36:05] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:40:37] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[03:41:24] <cjac> okay, as a backup, I could generate the certificate with openssl during the make phase...
[03:41:39] <cjac> if I could only remember how to do Makefile stuff with Makefile.PL
[03:43:20] *** Quits: whynot (~whynot@37.73.83.66) (Quit: leaving)
[03:48:37] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Remote host closed the connection)
[03:49:29] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[03:56:31] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 244 seconds)
[04:16:42] * GumbyPAN CPAN Upload: Yancy-1.080 by PREACTION https://metacpan.org/release/PREACTION/Yancy-1.080
[04:16:42] * GumbyPAN CPAN Upload: App-ansifold-1.13 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-ansifold-1.13
[04:29:25] *** Parts: jabberwok (~wlindley@75.105.20.104) ()
[04:43:25] *** Quits: argento (~argent0@168-227-96-26.ptr.westnet.com.ar) (Quit: leaving)
[04:50:46] *** Quits: Su-Shee (~Susanne@p4ffc740d.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[04:52:31] *** Joins: Su-Shee (~Susanne@p5089477f.dip0.t-ipconnect.de)
[04:54:35] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[05:00:06] *** Quits: Su-Shee (~Susanne@p5089477f.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:01:41] *** Joins: Su-Shee (~Susanne@p508946ab.dip0.t-ipconnect.de)
[05:12:08] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:30:34] <sivoais> cjac: MY::postamble
[05:31:19] <sivoais> just put your fragment of Makefile rules in a heredoc and return it there
[05:50:03] <xenu> http://patshaughnessy.net/2021/10/23/to-learn-a-new-language-read-its-standard-library
[05:50:04] <Paperbot> Link title(s): [ To Learn a New Language, Read Its Standard Library - Pat Shaughnessy ]
[05:50:06] <xenu> lol
[05:50:16] <xenu> if you want to hate perl, follow the advice from that article
[05:51:53] * GumbyPAN CPAN Upload: Config-INI-Tiny-0.103 by ARISTOTLE https://metacpan.org/release/ARISTOTLE/Config-INI-Tiny-0.103
[06:05:31] *** Joins: alex11 (~alex11@user/alex11)
[06:05:41] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 244 seconds)
[06:06:55] * GumbyPAN CPAN Upload: Catalyst-Plugin-Digress-1.002 by ARISTOTLE https://metacpan.org/release/ARISTOTLE/Catalyst-Plugin-Digress-1.002
[06:09:16] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Remote host closed the connection)
[06:11:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 244 seconds)
[06:13:32] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:17:55] <cjac> thanks, sivoais that's what I did.  but I don't know how to make all depend on it
[06:21:05] <sivoais> cjac: depends on at what point you need it. config is a good target to add to
[06:21:42] <cjac> sivoais: okay, how do I trigger it under config?
[06:22:22] <sivoais> if you look at how a sharedir works, you'll see this: <https://metacpan.org/dist/File-ShareDir-Install/source/lib/File/ShareDir/Install.pm#L131>
[06:22:23] <Paperbot> Link title(s): [ lib/File/ShareDir/Install.pm - metacpan.org ]
[06:22:32] <sivoais> or let me pull up another simpler example from my repo
[06:23:41] <sivoais> <https://github.com/orbital-transfer-example/perl-gtk3-starter-basic/blob/74771a22482a1e14c48b4f429a875e3acfe4ae9d/Makefile.PL#L13>
[06:23:42] <Paperbot> Link title(s): [ perl-gtk3-starter-basic/Makefile.PL at 74771a22482a1e14c48b4f429a875e3acfe4ae9d · orbital-transfe... ]
[06:25:38] <sivoais> put what you want under the rule: "config ::"
[06:27:35] <cjac> I'd really prefer to get Crypt::OpenSSL::CA::X509 working.  https://web.c9h.org/~cjac/tmp/build.log
[06:28:03] <cjac> CA.pm:502:13: error: invalid use of incomplete typedef ‘EVP_PKEY’ {aka ‘struct evp_pkey_st’}
[06:28:31] <cjac> I guess I should reach out to the maintainer
[06:28:54] <cjac> DOMQ: yt?
[06:31:23] <sivoais> hmm, it seems their Test::Group (and dep of Crypt::OpenSSL::CA) has many test failures and hasn't been updated
[06:32:10] <sivoais> related to this issue <https://rt.cpan.org/Public/Bug/Display.html?id=111124>
[06:32:10] <Paperbot> Link title(s): [ Bug #111124 for Test-Group: Test-Group does not work with future Test::Builder versions ]
[06:32:12] <cjac> right.  I sent that email out to DOMQ.  Hopefully he'll be ble to assist.
[06:36:31] *** Joins: pucara (~i@181.95.207.85)
[06:55:17] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 244 seconds)
[06:58:31] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[06:58:54] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 244 seconds)
[06:59:43] *** Joins: Moonlight (~Moonlight@70-231-14-72.lightspeed.tukrga.sbcglobal.net)
[07:00:51] *** Quits: pucara (~i@181.95.207.85) (Quit: Lost terminal)
[07:02:18] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:11:24] *** Quits: Moonlight (~Moonlight@70-231-14-72.lightspeed.tukrga.sbcglobal.net) (Read error: Connection reset by peer)
[07:21:04] *** Joins: Martchus (~martchus@dynamic-077-009-126-245.77.9.pool.telefonica.de)
[07:21:21] *** Quits: Martchus_ (~martchus@2a01:c23:c528:8600:d250:99ff:fe49:3cce) (Ping timeout: 245 seconds)
[07:33:46] *** Quits: llh (~llh@user/llh) (Read error: Connection reset by peer)
[07:35:41] *** Joins: v` (~v@user/ctrl)
[07:37:07] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 244 seconds)
[07:40:28] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[07:44:20] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[08:07:05] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:07:55] *** Joins: tejr (~tejr@user/tejr)
[08:08:33] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:12:59] *** Joins: tejr (~tejr@user/tejr)
[08:18:23] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:19:58] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:20:11] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:d8ea:14a9:7ac1:bc4e) (Ping timeout: 264 seconds)
[08:30:25] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (*.net *.split)
[08:30:25] *** Quits: Zubi[n] (rubin@2600:3c02::f03c:91ff:fe70:4a45) (*.net *.split)
[08:30:25] *** Quits: cornett_ (~ben@149.28.239.26) (*.net *.split)
[08:30:25] *** Quits: prime (~prime@user/prime) (*.net *.split)
[08:30:25] *** Quits: nowaker_ (~quassel@188.116.38.80) (*.net *.split)
[08:30:25] *** Quits: lopid (~lopid@user/lopid) (*.net *.split)
[08:30:25] *** Quits: mason (~mason@redhat/mason) (*.net *.split)
[08:30:25] *** Quits: SysPete (~SysPete@fin.sysnix.com) (*.net *.split)
[08:30:25] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[08:30:25] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[08:30:25] *** Quits: ology (~gene@user/ology) (*.net *.split)
[08:30:25] *** Quits: dwxreape1 (~quinn@192.155.91.76) (*.net *.split)
[08:30:25] *** Quits: phr3ak (~noreply@gnet.hu) (*.net *.split)
[08:30:25] *** Quits: samcv (~samcv@194.233.102.77) (*.net *.split)
[08:30:25] *** Quits: Bluewind (~Bluewind@user/bluewind) (*.net *.split)
[08:30:25] *** Quits: murrayn (~murray@user/murrayn) (*.net *.split)
[08:30:25] *** Quits: solarbunny (~sol@2001:778:200:302:20c:29ff:fe8a:4af7) (*.net *.split)
[08:30:32] *** Joins: solarbunny (~sol@2001:778:200:302:20c:29ff:fe8a:4af7)
[08:30:32] *** Joins: dwxreaper (~quinn@192.155.91.76)
[08:30:34] *** Joins: Nowaker (~quassel@188.116.38.80)
[08:30:36] *** Joins: Zubin (rubin@2600:3c02::f03c:91ff:fe70:4a45)
[08:30:37] *** Joins: SysPete (~SysPete@fin.sysnix.com)
[08:30:38] *** Joins: mason (~mason@redhat/mason)
[08:30:41] *** Joins: cornett_ (~ben@149.28.239.26)
[08:30:51] *** Joins: ology (~gene@user/ology)
[08:30:55] *** Joins: phr3ak (~noreply@gnet.hu)
[08:31:01] *** Joins: lopid (~lopid@kitt.default.meeow.uk0.bigv.io)
[08:31:02] *** Joins: samcv (~samcv@194.233.102.77)
[08:31:07] *** Quits: lopid (~lopid@kitt.default.meeow.uk0.bigv.io) (Changing host)
[08:31:07] *** Joins: lopid (~lopid@user/lopid)
[08:31:25] *** Joins: Bluewind (~Bluewind@user/bluewind)
[08:31:30] *** Joins: prime (~prime@user/prime)
[08:32:11] *** Joins: murrayn (~murray@static.38.4.181.135.clients.your-server.de)
[08:32:14] *** Joins: tnez (~el@user/tnez)
[08:33:13] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[08:36:59] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:39:53] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[08:45:17] *** Joins: Ekho (~Ekho@user/ekho)
[08:46:10] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[08:46:20] *** Joins: rwp0 (~rwp0@user/rwp0)
[09:19:45] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:27:49] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[09:29:27] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:29:59] *** Joins: mattil (~mattil@airio.portalify.com)
[09:32:20] *** Quits: murrayn (~murray@static.38.4.181.135.clients.your-server.de) (Changing host)
[09:32:20] *** Joins: murrayn (~murray@user/murrayn)
[09:38:16] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[09:40:04] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[09:54:15] *** Joins: xenial-user10 (~androirc@3ec97c6f.catv.pool.telekom.hu)
[09:59:45] *** Joins: diskin (~diskin@31.23.122.198)
[10:00:23] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 264 seconds)
[10:02:46] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[10:02:46] *** diskin is now known as Guest9273
[10:02:46] *** diskin_ is now known as diskin
[10:02:56] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[10:05:27] *** Quits: Guest9273 (~diskin@31.23.122.198) (Ping timeout: 260 seconds)
[10:11:33] *** Joins: Markow (~Markow@176.122.215.103)
[10:13:40] *** Quits: xenial-user10 (~androirc@3ec97c6f.catv.pool.telekom.hu) (Ping timeout: 244 seconds)
[10:26:21] *** Quits: randir (~randir@95-25-159-246.broadband.corbina.ru) (Remote host closed the connection)
[10:33:11] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[10:33:50] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:39:16] *** Joins: randir (~randir@93.159.239.42)
[10:40:30] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 260 seconds)
[10:40:58] *** Joins: art1 (~romeyke@p200300ccdf041800392716d176b04e51.dip0.t-ipconnect.de)
[10:49:57] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[10:55:06] *** Joins: furrymcgee (~devuan@cgn-89-1-210-103.nc.de)
[11:03:01] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[11:07:35] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 264 seconds)
[11:10:28] *** Joins: tobybl (~tobybl@213.31.135.91)
[11:10:37] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[11:10:54] *** Joins: tobybl (~tobybl@213.31.135.91)
[11:16:08] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:19:17] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 244 seconds)
[11:24:35] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[11:26:25] <merpaderp> do you guys think there is a way to use Mojo:DOM to get out lines out of HTML, as if HTML was rendered in browser?
[11:26:46] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[11:27:05] <merpaderp> like, <p>,pre,li,br tags are do new line for content, the script would extract text out of HTML as if it was rendered in browser
[11:27:43] <merpaderp> I think I am asking too much form that module
[11:28:31] <Botje> obvious problem the first: all of those tags break lines according to the browser window width
[11:29:04] <Botje> obvious problem the second: CSS allows you to override the default display style.
[11:29:26] <Botje> (common use case is to make <li> elements display:inline so you have a nice horizontal list)
[11:30:06] <Botje> so, yes, you're asking too much :P
[11:30:09] <merpaderp> okay, that totally makes sense
[11:30:51] <Botje> so what are you actually trying to do?
[11:30:59] <merpaderp> regexing HTML it's what I am doing.
[11:31:29] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[11:31:30] <merpaderp> well, the OG use case was to extract optional text on the same *line* as link is found in HTML
[11:31:54] <merpaderp> like: <a href=''>some file> some text on same line I would like to extract.
[11:32:21] <merpaderp> but there are infinite possibilities how to format a text on same line, including nested divs and whatnot and mad CSS as well
[11:32:24] <merpaderp> so forget what I asked.
[11:32:55] *** Joins: jess (~jess@libera/staff/jess)
[11:33:01] <Botje> keep it simple: grab the next sibling or, if that does not exist, the next sibling of the parent element
[11:33:14] <Botje> that probably covers a good chunk of the problem space
[11:34:10] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 260 seconds)
[11:34:26] <merpaderp> next sibling until next href is encountered, that could work in majority of cases.
[11:45:33] *** Joins: tobybl_ (~tobybl@213.31.135.91)
[11:47:42] *** Quits: tobybl (~tobybl@213.31.135.91) (Ping timeout: 244 seconds)
[11:49:09] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:50:55] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[11:54:01] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:07:40] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[12:12:18] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Restarting client and system…)
[12:19:52] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[12:26:40] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[12:27:02] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[12:30:39] *** Joins: solitario (~adrian@www3.kiess.onl)
[12:31:58] *** Quits: solitario (~adrian@www3.kiess.onl) (Client Quit)
[12:32:15] *** Joins: solitario (~adrian@www3.kiess.onl)
[12:32:27] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 260 seconds)
[12:46:43] *** Joins: akaWolf (~akaWolf@akawolf.org)
[13:01:42] * GumbyPAN CPAN Upload: Archive-BagIt-0.083 by ART https://metacpan.org/release/ART/Archive-BagIt-0.083
[13:23:02] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Remote host closed the connection)
[13:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:33:26] *** Joins: furrymcgee (~devuan@cgn-89-1-210-103.nc.de)
[13:40:28] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:43:14] *** Quits: FastJack_ (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Quit: leaving)
[13:43:47] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[13:44:49] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:51:57] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Restart…)
[13:55:57] *** Joins: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[13:58:23] *** Joins: solitario (~adrian@www3.kiess.onl)
[14:00:00] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[14:00:00] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:00:51] *** Joins: kensanata (~user@user/kensanata)
[14:06:11] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[14:06:17] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[14:06:44] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[14:09:40] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:16:34] *** Joins: mattil_ (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[14:31:49] *** Quits: mattil_ (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:32:44] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[14:34:53] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:35:11] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[14:37:55] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 260 seconds)
[14:44:04] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:48:12] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[14:54:06] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:54:39] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[14:54:43] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[14:54:57] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[15:03:22] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Remote host closed the connection)
[15:09:22] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[15:10:02] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[15:11:35] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[15:14:51] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[15:18:38] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[15:23:33] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Remote host closed the connection)
[15:37:32] *** Joins: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi)
[15:39:48] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[15:43:19] *** Quits: mattil (~mattil@d1wp01-j7xdc81gxkky-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[15:46:18] *** Joins: kensanata (~user@user/kensanata)
[15:55:56] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Restarting…)
[15:56:36] *** Joins: solitario (~adrian@www3.kiess.onl)
[15:58:24] *** Quits: solitario (~adrian@www3.kiess.onl) (Client Quit)
[15:58:41] *** Joins: solitario (~adrian@www3.kiess.onl)
[16:02:34] *** Quits: solitario (~adrian@www3.kiess.onl) (Client Quit)
[16:02:45] *** Joins: zyweo (~Svew@user/zyweo)
[16:02:52] *** Joins: solitario (~adrian@www3.kiess.onl)
[16:05:05] *** Quits: solitario (~adrian@www3.kiess.onl) (Client Quit)
[16:05:24] *** Joins: solitario (~adrian@www3.kiess.onl)
[16:07:03] * GumbyPAN CPAN Upload: Module-Znuny-CoreList-1.00 by PERLSRVDE https://metacpan.org/release/PERLSRVDE/Module-Znuny-CoreList-1.00
[16:11:14] *** Joins: proller (~p@2a02:6b8:0:40c:118b:b037:e31d:344a)
[16:16:05] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[16:17:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:22:04] * GumbyPAN CPAN Upload: Getopt-EX-Hashed-1.00 by UTASHIRO https://metacpan.org/release/UTASHIRO/Getopt-EX-Hashed-1.00
[16:28:46] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 244 seconds)
[16:29:35] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[16:30:59] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 264 seconds)
[16:35:02] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[16:36:19] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[16:52:55] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[16:57:50] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[17:05:20] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:06:25] <Grinnz> merpaderp: generally, if you need to know how a browser will render HTML, you need to use a browser (e.g. https://metacpan.org/pod/WWW::Mechanize::Chrome)
[17:06:26] <Paperbot> Link title(s): [ WWW::Mechanize::Chrome - automate the Chrome browser - metacpan.org ]
[17:06:50] <Grinnz> but yeah, if you can suss it out based on the html structure itself that's way easier
[17:08:00] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[17:09:23] *** Quits: X-Scale (~ARM@92.250.96.217) (Ping timeout: 264 seconds)
[17:09:23] *** X-Scale` is now known as X-Scale
[17:09:32] <merpaderp> I checked that get next sibling method and that wont work, because if link is in td, it has no sibling, tad parent td does.
[17:10:23] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:10:37] <mst> merpaderp: what's the original goal here?
[17:10:54] <mst> merpaderp: note: not "get text on the same line as the link"
[17:11:01] <mst> merpaderp: the actual goal that led you to try to do that
[17:11:19] <mst> like, what's the point, what is this text and why do you care about it?
[17:11:35] <merpaderp> parsing metadata out of open directory listings - there are a lot of varieties of those
[17:11:39] *** Joins: bmeneg (~bmeneg@2001:1284:f013:e80b:de66:3e77:b5b0:e10f)
[17:11:44] <merpaderp> its usually link per line with data like size and date.
[17:12:09] <mst> can you give examples?
[17:12:11] <merpaderp> and to my experienec so far, those can be in lists, pre or just br separated
[17:12:12] <Altreus> You don't have to have just one method, of course
[17:12:29] <Altreus> If you find it's in a td you can use a different method from if it's in a p
[17:12:45] <mst> I mean, having heuristics for common patterns is reasonable, and 'detect if $node->parent is a td' is trivial
[17:12:48] <merpaderp> it can be in p as well, havent seen any yet.
[17:13:07] <mst> what I would strongly suggest is that you pick a couple of example pages from each site you're scraping
[17:13:20] <merpaderp> thats how I got to the part, how does browser renders those one per line, because I can regex metadata out if I get to one per line part.
[17:13:21] <mst> writes tests ensuring you get the answers you expect
[17:13:34] <mst> stop talking about regexs, they won't help you at all
[17:13:35] <Altreus> standard disclaimer about sites and scraping and Ts&Cs and legality
[17:13:56] <mst> and periodically re-run those tests against the currnt vesrion of those pages to make sure the HTML hasn't changed in a way that breaks your guesswork
[17:14:20] <Altreus> sometimes sites actually label their content with meaningful semantics!
[17:14:22] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[17:14:24] <merpaderp> yea, I have like 14 diff pages saved already, and a small script which runs those against my current implementation
[17:14:27] <Altreus> you should do those ones first
[17:14:37] <mst> honestly, having a scraper per site and double checking them every so often is probably the only truly reliable approach here
[17:14:46] <mst> you can hopefully share a bunch of code between similar sites
[17:14:54] <mst> but that's probably the best you'll manage
[17:15:24] <Altreus> com.nasa.scraper.text.class.java.pm
[17:15:33] <merpaderp> you guys jumped to the exectution part of this whole business while I asked for reliable way of getting rendered lines from HTML
[17:15:34] <aquanight> on the other hand, something like apache's default directory listing is probably easy to work with ...
[17:15:48] <Altreus> merpaderp: when you ask the wrong question, we tell you the right question and then answer that
[17:15:59] <merpaderp> I see
[17:16:10] <mst> merpaderp: because there isn't one, so we attempted to find the closest thing we could give you that actually existed
[17:16:14] <mst> merpaderp: that wasn't a 'jump' at all
[17:16:28] <Altreus> asking how a browser renders html seems bizarre because it renders it to a pixel buffer
[17:16:31] <aquanight> merpaderp: what you're talking about involves UI layout which is not a thing in an automation context.
[17:16:34] <Altreus> and you won't get one of those
[17:16:40] <merpaderp> I do all that already what you suggested, keep weird .html around and use unit tests to compare output with what I hand checked to be correct
[17:16:52] <Altreus> Mojo::DOM is probably the correct answer
[17:16:55] <mst> and even if you drove a browser directly, this would be -extremely- difficult to do automagically
[17:17:16] <merpaderp> can't browser render the page and output me a text which I will regex by lines?
[17:17:24] <Altreus> The question is, how can you use the structure of the HTML to find the data in your page? And the answer is probably make one routine for each fo your 14
[17:17:27] <mst> you could maybe inject a boatload of javascript that examines page elements and tries to find out their extents as rendered on screen
[17:17:34] <mst> merpaderp: what do you even mean?
[17:17:57] <mst> merpaderp: "output me a text" wrt a graphical display is meaningless
[17:18:11] <Altreus> I assume they mean, see all that text that I can read as a human? Just show that
[17:18:29] <Altreus> But I think the misunderstanding is that you can go HTML->text without a browser
[17:18:48] <Altreus> which is why I mentioned p tags
[17:18:51] <mst> right, but a concept like 'on the same line' actyally means 'rendered side by side'
[17:19:05] <mst> a text dump will quite possibly lose that information
[17:19:12] <mst> (and usually does tbh)
[17:19:12] <aquanight> honestly trying to rely on rendering/layout is trying to do it the ridiculously hard way when HTML already encourages self-structured content especially in a context like a directory listing
[17:19:19] <Altreus> Which is why I stand by the "use the DOM" thing we actually answered with
[17:19:23] <mst> indeed
[17:19:36] <mst> we 'jumped' to something that might actually work, rather than something entirely fictional
[17:19:40] <Altreus> perlbot: XY problem
[17:19:40] <perlbot> Altreus: You want to do X, but don't know how. You think you can solve it using Y, but don't know how to do that, either. So, you ask about Y in order to solve X, which doesn't make sense. Just ask about X!
[17:19:51] <mst> this is how programmers react to being asked a question where the answer is 'lolwut' :)
[17:19:53] <Altreus> merpaderp: we answered X
[17:20:03] *** Joins: deadmarshal (~deadmarsh@95.38.114.198)
[17:20:06] <Altreus> you can't solve it via Y
[17:20:36] <aquanight> I mean... you theoretically could. If you're willing to basically write an entire web browser.
[17:21:30] <mst> aquanight: hence < mst> you could maybe inject a boatload of javascript that examines page elements and tries to find out their extents as rendered on screen
[17:21:57] <mst> but that would be so hilariously cpu intensive that I really don't think it'd be worth it, and also probably stupidly fragile even if you could get it to work in reasonable resources
[17:22:10] <merpaderp> well its not all that bad, I have a regex version of code which works this far against diff pages I have collected
[17:22:32] <merpaderp> I just counted all the tags which can be used to do new lines and split by that
[17:22:47] <merpaderp> all the weird pages with nested divs and CSS to break it in weird ways can go to hell
[17:22:47] <mst> and that will help for your <td> case how exactly
[17:22:52] <Altreus> Sure, but HTML is better solved by just reading the HTML
[17:23:03] <Altreus> the info is in the document, that's why HTML exists
[17:23:12] <mst> indeed, a Mojo::DOM based solution taking the exact same approach will be much more reliably than a regex version
[17:23:27] <merpaderp> yea, I got the part where I find first href in DOM
[17:23:32] <aquanight> if you're wanting to scrape a directory list, it would seem to be the best way to go about it is use a DOM parser, enumerate <a> tags and examine the ones with the common prefix
[17:23:33] <mst> merpaderp: regex versions superficially work, until they don't, and then it's a nightmare
[17:23:46] <merpaderp> then challenge is to iterate over every item from that one href until next href, where there is possible metadata.
[17:24:03] <mst> merpaderp: you might think your current code is a good idea, but trust me, at some point it will break, and it will break horribly
[17:24:12] <merpaderp> I know it will break
[17:24:20] <mst> a DOM style approach will probably also break, but it will break in a way that will be much less awful to debug
[17:24:21] <aquanight> I don't know that I would even trust the metadata provided on the page as is
[17:24:28] <aquanight> it's very often formatted for humans, not machines
[17:24:31] <mst> so I disagree with your claim that it's "not all that bad"
[17:24:51] <aquanight> better approach is to take the href, issue a HEAD request and get the machine-intended Content-Length header
[17:24:55] <merpaderp> aquanight: the other way is to shoot HEAD for every link and check if it exists and note it's content size
[17:25:00] <mst> having been doing this sort of stuff for 20 years, yeah, it is all that bad, just you haven't cut yourself open on the sharp edges -yet- ;)
[17:25:07] <merpaderp> that wont have the date timestamp, though
[17:25:14] <aquanight> it should
[17:25:21] <Altreus> 9 times out of 10 I can catch a knife by the handle!
[17:25:23] <aquanight> is there not a Modified header or something like it?
[17:25:39] <merpaderp> I think you should specifically configure apache/nginx to include that header
[17:25:41] <mst> Altreus: unfortunately regexping HTML means the 10th time you catch it with your scrotum :)
[17:25:46] <merpaderp> if you have setup caching or something like that
[17:25:53] <mst> merpaderp: I think that's not what happens in the real world
[17:26:09] <mst> merpaderp: in a lot of cases webservers will produce a timestamp by default
[17:26:17] * merpaderp makes mental note not to mention using regexes in real world
[17:26:20] <merpaderp> brings the worst in people
[17:26:29] <Altreus> mst: in some countries the offer of a free vasectomy would appeal
[17:26:29] <mst> regexps are great for things regexps are designed for
[17:26:34] <mst> messing with HTML 100% is not
[17:26:45] <mst> this isn't the worst, I'm being really polite and gentle compared to how bad an idea this is
[17:27:12] <mst> I've just got 20 years of experience that tells me to try and save you from learning what I know the really hard and unpleasant way
[17:27:54] <Altreus> the problem with 20 years of experience is that it takes 20 years for it to become experience
[17:28:14] <mst> merpaderp: look, at some point everybody makes the mistake of thinking regexps and HTML is a good idea, I certainly have. we just want you to get to the 'not making that mistake anymore' part faster :D
[17:28:50] <merpaderp> hells bells, margaret, why did I ask here then on how to tackle it better
[17:29:08] <mst> you initially kept saying you were going to 'determine lines' and then regexp anyway
[17:29:15] <mst> that was the thing I wanted to make sure didn't happen
[17:29:18] <merpaderp> so I fed raw HTML in Mojo::DOM, called first find for href
[17:29:36] <Altreus> margaret :D
[17:29:57] <Altreus> margaret s trout
[17:30:02] <merpaderp> now I am inside of a where I should go from there, until next a, getting text out of every element in the way.
[17:30:13] <merpaderp> sibling call wont work, as it works for elements inside of same tag
[17:30:21] <mst> why not walk back up to find a <p> or a <td> or whatever, and then go forwards from there?
[17:30:21] <aquanight> wait so let me make sure I'm understanding what you're thinking. You've found the href, and you're thinking you can somehow see the entire "somefile.tgz   34M  Jan-36-9948 44:39:94" like a browser does?
[17:30:53] <mst> next_sibling was for a very specific case of HTML, because you hadn't (still haven't) given us concrete examples to work from
[17:30:53] <Altreus> wait why doesn't sibling work
[17:31:04] <Altreus> <a>s have siblings
[17:31:13] <mst> Altreus: <tr><td><a href="foo">blah</a></td><td>Text merpaderp wants is here</td></tr>
[17:31:21] <merpaderp> because its in own td for example, its metadata will be in next td
[17:31:23] <Altreus> oh yes, the td case
[17:31:26] <mst> was the first example where you can't just look for stuff immediately after the <a>
[17:32:03] <Altreus> Well this is why you need a different parser for this page - you shouldn't be looking for an <a>, you should be looking for a <td> that has an <a> in it
[17:32:13] <Altreus> you're not using the *structure* of the HTML
[17:32:23] <mst> I wonder if basically a 'look for a <table> of links' subroutine, plus a 'look for a <br> separated set of links', plus etc. might not be a neat way to get -most- cases handled by a relatively generic parser
[17:32:30] <merpaderp> so there cant be single silver bullet to get all direcotry listing right
[17:32:34] <Altreus> correct
[17:32:34] <mst> or at least have something that tries to guess when faced with a new site
[17:32:59] <mst> merpaderp: oh, one trick that might help - most directory listings will contain a '..' entry
[17:33:05] <aquanight> merpaderp: presuming you've found the <a>, look to see if the parent is <td>, then go from the td to sibling
[17:33:09] <mst> merpaderp: if you can spot *that* one you might be able to guess the format from that
[17:33:13] <Altreus> for instance, if you have a table with column 1 link, column 2 text, then you can use the HTML structure to find the link's parent's next sibling's text
[17:33:48] * aquanight adds ->uncle to HTML::DOM
[17:33:56] <merpaderp> lmao 
[17:34:04] <Altreus> when do we get a gender-neutral uncle word?
[17:34:22] <mst> aquanight: and slip the droogs of war
[17:35:07] <Botje> Altreus: "up and to the right"?
[17:35:14] <Altreus> a little more to the left, boys
[17:35:20] <Altreus> google says auncle but I hate it
[17:35:22] <merpaderp> computer! get me the correct result!
[17:35:44] <aquanight> UNIVERSAL::DWIW()
[17:36:08] <Grinnz> prior art: https://metacpan.org/dist/Alien-Build/source/lib/Alien/Build/Plugin/Decode/Mojo.pm
[17:36:08] <Paperbot> Link title(s): [ lib/Alien/Build/Plugin/Decode/Mojo.pm - metacpan.org ]
[17:36:20] <Altreus> Mojo::DOM->read_mind
[17:36:31] <merpaderp> I am sure javascript nerds have at least 5 libraries which could do just that
[17:36:49] <Grinnz> probably not as generic as you need though
[17:37:05] <Altreus> feed it into elasticsearch and see what text you get out
[17:37:28] <mst> merpaderp: 2 of which are deprecated, 2 of which don't work, and the 5th mines bitcoing
[17:38:54] <merpaderp> can't I just call ->text on whole bloody DOM
[17:39:04] <Altreus> yeah but how will you know what text you want
[17:39:09] <mst> you can, but I don't expect the result to be remotely useful
[17:39:17] <Grinnz> that would be all_text, but that just concatenates together any text that would be visible
[17:39:36] <Grinnz> generally not useful if you want to know how it will be rendered
[17:39:36] <merpaderp> welp, didnt print a thing
[17:39:44] <Grinnz> yes because text is not all_text
[17:39:50] <Altreus> with the DOM you know what text you want because it's neatly divided into objects
[17:40:04] <merpaderp> heh, almost works in td case
[17:40:18] <merpaderp> the rest is for regex to handle out
[17:40:20] * merpaderp runs away
[17:40:40] <Altreus> you could at least pastebin an example of the table
[17:40:47] <Altreus> I'm bored of abstract
[17:41:02] <merpaderp> I just googled index of packages and took any linux package site
[17:41:16] <Altreus> I bet if I do that I'll get a different thing
[17:41:23] <merpaderp> the apache index of sites are the sane ones, there are some crazy ones I cant name off the bat, all on home server right now.
[17:41:26] <mst> that's something completely different to web server directory listings
[17:41:34] <Altreus> the first result is pypi
[17:41:41] <mst> package indices for distros tend to have structured ways to get the packages
[17:41:50] <mst> so your current approach is just a waste of effort for those
[17:41:54] <Altreus> is this the WXY problem?
[17:42:08] <merpaderp> nginx.org/packages/
[17:42:26] <merpaderp> this one looks like generated by... nginx
[17:42:42] <merpaderp> in a pre tag!
[17:42:48] <merpaderp> whole another case
[17:43:01] <Grinnz> that is a directory listing, not a "package index"
[17:43:02] <merpaderp> with pre it's easy, just split on new line and regex
[17:43:04] * merpaderp hides again
[17:43:20] <Altreus> this is just <a href="dir">dir</a>
[17:43:27] <mst> ...lol
[17:43:28] *** Joins: magla (~gelignite@55d4378c.access.ecotel.net)
[17:43:38] <Altreus> so it's HTML being used correctly for once
[17:43:47] <mst> merpaderp: yeah, for <pre> using a \n regexp specifically on ->text does make sense :)
[17:43:56] <Altreus> (I actually hoped that nginx would serve json if I asked for it)
[17:44:33] <merpaderp> mst: can't tell anymore if we are joking or serious
[17:44:44] <Altreus> mst: except there's semantic HTML in there and using the DOM is still correct
[17:44:57] <Altreus> <hr><pre><a href="../">../</a>
[17:45:22] <mst> Altreus: uh
[17:45:28] <mst> Altreus: I meant on the text parts *between* the tags
[17:45:49] <Altreus> well that's true - depends on what information they actually want
[17:46:19] <Altreus> still feels like "\n regexp" is only correct because split takes a regex though
[17:46:34] <Altreus> in fact I kinda hate this HTML
[17:47:26] <mst> yeah, this HTML was definitely brought to you by Retardo the Syphilitic Clown
[17:47:31] <mst> but such is the nature of the internet
[17:47:42] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:47:51] <Altreus> not very auspicious for a web server
[17:48:31] <merpaderp> now I just need to find another example which uses <br>
[17:48:47] <merpaderp> and it can be knocked out with split /<\s*br\s*>/, ...
[17:48:59] <mst> that's more <brr />
[17:50:05] <Altreus> haha html go brrr
[17:50:26] <Altreus> merpaderp: what data from this list are you trying to acquire?
[17:52:42] <merpaderp> the link, date timestamp and size
[17:53:03] <aquanight> I still advocate for getting the size via HEAD request
[17:53:13] <merpaderp> lotsa requests to send
[17:53:18] <merpaderp> and will miss date timestamp
[17:53:18] <aquanight> date should also be provided if the server is worth a damn
[17:53:28] <merpaderp> they are not worth a damn, 99% of the time
[17:53:56] <mst> merpaderp: web server generated timestamps are generated the exact same way it gets the timestamp to respond to HEAD with 99% of the time
[17:54:03] <mst> so it's either useful or it isn't - pick one :D
[17:54:36] <aquanight> yeah you usually should get a Last-Modified header
[17:55:01] <merpaderp> okay, this one nginx does return Last-MOdified timestamp
[17:56:15] <Altreus> not always
[17:56:16] <merpaderp> could always get multiple VPSes and hammer those poor sites into oblivious about my requests
[17:56:21] <mst> because for file serving nginx and apache and lighttpd all do return that in 99% of cases
[17:56:46] <Altreus> I followed aix/ to see whether last-modified matched the index listing and I don't get last-modified at all
[17:56:58] <mst> I think you're confused about the difference between 'how webservers usually behave when serving a file' and 'how somebody's random shitty PHP file behaves timestamp-wise'
[17:57:03] <daemon> hey all what would the best module for dealing with csv's be there seems to be loads -_-
[17:57:03] <merpaderp> curl -v -X HEAD https://nginx.org/packages/aix/RPMS/nginx-1.0.10-1.ngx.aix7.1.ppc.rpm
[17:57:05] <mst> in the latter case, yeah, good fucking luck
[17:57:06] <merpaderp> this one does
[17:57:07] <daemon> ideally one that can read from a scalar
[17:57:20] <mst> daemon: Text::CSV ot Text::xSV
[17:57:25] <daemon> ta
[17:57:32] <merpaderp> or just split /,/, ...
[17:57:36] * merpaderp shows himself out
[17:57:52] <daemon> merpaderp, blah,'hello, :)',bleh
[17:58:01] <mst> merpaderp: http://trout.me.uk/bunny.jpg
[17:58:09] <Grinnz> http://thomasburette.com/blog/2014/05/25/so-you-want-to-write-your-own-CSV-code/
[17:58:09] <Paperbot> Link title(s): [ So You Want To Write Your Own CSV code? · Thomas Burette ]
[17:58:10] <merpaderp> sfw?
[17:58:27] <Altreus> merpaderp: oh, perhaps not all directory listings have a last-modified
[17:58:38] <Altreus> kinda surprised that some of them do, tbh
[17:58:41] <mst> you're trying to parse html with regexps, you've already decided your work is ok with horrific perversion?
[17:59:32] <aquanight> hrmmm it looks like Last-Modified isn't always
[17:59:41] <aquanight> what trash httpd doesn't put Last-Modified in their headers
[18:00:02] <mst> the thing is, one that doesn't is also unlikely to bother putting it in their generated directory listings either
[18:00:07] <merpaderp> I don''t know, never stopped to wonder about that
[18:00:07] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[18:00:08] <aquanight> oh wait
[18:00:25] <Altreus> daemon: this is not a technology issue but an interpersonal one
[18:00:25] <aquanight> nvm it helps if I don't get 404d
[18:00:33] <mst> *lolsob*
[18:00:44] <Altreus> daemon: you will have to attack the CSV creator directly until they stop fucking using CSV
[18:01:22] <mst> aquanight: I don't understand, what do node.js installations have to do with this?
[18:01:50] <aquanight> mst: it means when I'm testing with curl -I I should actually look at the response before deciding the HTTPd is trash
[18:02:14] <mst> oh, 'never mind'
[18:02:23] <mst> nvm is node's equivalent of perlbrew :P
[18:02:25] <Altreus> NOW I get it
[18:02:37] <aquanight> fuck node with a rusty pitchfork?
[18:02:45] <Altreus> couldn't see a single node thing since the actual take-the-piss-out-of-node stuff earlier
[18:03:14] <Altreus> I suppose it's good I see nvm as never mind. It applies to node stuff as well
[18:04:34] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 260 seconds)
[18:06:40] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[18:10:34] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 244 seconds)
[18:11:26] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[18:16:21] *** Quits: rewt (~default@user/rewt) (Ping timeout: 245 seconds)
[18:26:13] *** Quits: jdv (~jdv79@jdv.devuyst.com) (Ping timeout: 252 seconds)
[18:26:22] *** Joins: jdv (~jdv79@jdv.devuyst.com)
[18:28:04] *** Quits: keir (~keir@user/keir) (Quit: I've gone)
[18:28:23] *** Joins: keir (~keir@user/keir)
[18:28:59] *** Quits: deadmarshal (~deadmarsh@95.38.114.198) (Ping timeout: 260 seconds)
[18:32:14] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:38:18] *** Joins: tobybl (~tobybl@213.31.135.91)
[18:41:07] *** Quits: tobybl_ (~tobybl@213.31.135.91) (Ping timeout: 260 seconds)
[18:44:01] *** Joins: thrig (~thrig@65.113.153.50)
[18:45:05] *** Joins: randir (~randir@95-25-159-246.broadband.corbina.ru)
[18:52:22] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:58:01] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 245 seconds)
[18:59:39] *** Parts: art1 (~romeyke@p200300ccdf041800392716d176b04e51.dip0.t-ipconnect.de) ()
[19:02:34] *** Joins: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-16-76-68-64-112.dsl.bell.ca)
[19:11:30] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[19:14:11] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 264 seconds)
[19:18:40] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:74e1:93d1:2998:f6fe)
[19:31:15] <cjac> mst: is there an x.509 certificate generator library for perl yet?
[19:31:24] <mst> no idea
[19:35:09] *** Quits: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[19:35:15] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 260 seconds)
[19:35:40] *** Joins: X-Scale` (~ARM@31.22.144.14)
[19:36:20] <cjac> alright.  I did a bit of research, and it looks like the only one that has the code I'd like to make use of is Crypt::OpenSSL::CA::X509.  Maybe I'll look at that implementation and see if I can muster something together for CryptX::X509 or the like.
[19:36:28] *** X-Scale` is now known as X-Scale
[19:40:12] *** Joins: e1f (~user@141.117.1.185)
[19:41:26] * GumbyPAN welcomes OPUSVLPGW - Paul G Webster to CPAN!
[19:41:26] * GumbyPAN welcomes ANHLD - Anh Le Duc to CPAN!
[19:41:56] <cjac> oh.  the maintainer of Crypt::OpenSSL::CA::X509 got back to me.  maybe we'll get a working build together.
[19:42:24] <Altreus> collaboration? ugh
[19:42:37] <cjac> trololol
[19:42:43] <Altreus> bit too close to actual socialising for my taste
[19:43:04] <thrig> vichy france also collaborated
[19:46:45] <Altreus> vichyssoise?
[19:47:35] <huf> this is why the channel islands belong to france
[19:47:37] <huf> they too collaborated
[19:47:52] <thrig> those have weird tax status and cause production bugs
[19:48:39] <mst> huf: of course the chanel islands belong to france, we couldn't stand the smell
[19:58:46] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[20:00:42] <jaytee80> I'm neck deep in fulfilling deps in rocky8 with cpantorpm. It doesn't automatically resolve deps itself, so I've just been manually doing it. Gonna take a few days for my stack.
[20:01:08] <jaytee80> Some packages just don't play along. Test::utf8 has wrong version in meta file, for instance. 
[20:01:25] <jaytee80> common::sense... seems to put libs where cpantorpm doesn't expect them.
[20:01:26] <thrig> or you could cpanm modules into a directory then RPM up that whole directory
[20:02:41] <jaytee80> That's not a bad idea... I may fallback to that where needed.
[20:03:31] <thrig> code then may need to 'use lib' that tree, but that's easier than fighting RPM for hours on end
[20:05:31] <jaytee80> Well... I may want to do better than that. 
[20:05:33] <Altreus> isn't common::sense lehmannade?
[20:05:44] <Altreus> yeah
[20:05:47] <Altreus> no wonder it doesn't have any
[20:06:07] <jaytee80> It's coming up as a dep for JSON::XS
[20:06:25] <jaytee80> or via Types::Serialiser
[20:06:31] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[20:07:19] <mst> having JSON::XS in your deps is common for legacy code
[20:08:05] <jaytee80> I think I use it directly somewhere. 15yo stack I'm dealing with. But it may come up as a dep for DBIx::Class
[20:08:17] *** Joins: deadmarshal (~deadmarsh@95.38.114.198)
[20:09:17] <jaytee80> It's all goofy. yum has DBIx-Class already, but it needs MooseX-Types-JSON, and that requires JSON::XS, and yum doesn't have anything that provides that.
[20:10:20] <jaytee80> But again, my own rpms seem to require JSON::XS so I gotta get it going anyways.
[20:11:12] <jaytee80> In the end I'll have hundreds of rpms and srpms that fill deps that aren't met by packages already in the repos. I wonder if I can send them off and get them added to the repo to save others time.
[20:12:48] <mst> MooseX::Types::JSON should really be switched to JSON::MaybeXS
[20:12:55] *** Joins: rewt (~default@user/rewt)
[20:13:09] <jaytee80> that would be nice
[20:14:09] <Altreus> broken redhat perl you say?
[20:14:46] <thrig> the RPM build dependency parser thing is also... special
[20:15:24] <mst> Altreus: working redhat perl, just lots of deps and apparently CPANPLUS's cpan2dist thing is still the most likely way to be able to build venodr packages recursively
[20:15:40] <mst> jaytee80: I often do a 'fat rpm' or 'fat deb' off a local::lib like thrig suggested
[20:15:46] <mst> jaytee80: you may also find fpm interesting
[20:16:28] <Altreus> Hmm, then what of this DBIx-Class -> MooseX-Types-JSON -> boom thing?
[20:16:56] <mst> jaytee80 must have something else depending on MooseX-Types-JSON
[20:17:12] <mst> we don't know what the app is, after all
[20:17:38] <Altreus> oh maybe I misunderstood "it"
[20:18:59] <jaytee80> Need for JSON::XS is coming up from both my own (old) code, and from DBIx-Class->MooseX-Types-JSON via the yum repo. I doubt I use MooseX-Types-JSON directly in my code.
[20:20:08] <jaytee80> common::sense fixed. I just had cpantorpm gen a spec file and fixed the file list there. I should be able to build JSON::XS now and move on. I'm on like D dep of my list... gonna be a long day.
[20:20:18] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[20:20:46] <mst> jaytee80: oh, right, that's an optional dependency for the dbicadmin script and whoever packaged it for some reason decided to make it a hard requirement
[20:21:09] <mst> jaytee80: the simple answer there would be to build a non-broken rpm
[20:21:35] <mst> Altreus: apologies, I'd forgotten that while we'd convinced redhat to stop breaking perl every other rpm they ship still can't be trusted :(
[20:22:08] <Altreus> :) it's OK, you only shot down knee-jerk cynicism
[20:22:23] *** Quits: deadmarshal (~deadmarsh@95.38.114.198) (Ping timeout: 260 seconds)
[20:22:25] <thrig> in other words, building software is teh hard
[20:22:26] <mst> I think it's cos you said 'broken perl'
[20:22:32] <mst> which it isn't anymore
[20:22:32] <jaytee80> I think the ones I'm making via cpantorpm are "non broken". I'd contribute them if I knew where.
[20:22:42] <mst> but apparently 'broken DBIC rpm' is still a thing ;)
[20:25:30] <Altreus> seems odd to ship a package that isn't installable
[20:25:41] <Altreus> Maybe it's actually optional but something's making it try anyway
[20:28:17] <mst> it might be in recommends and jaytee80's yum config is trying for those and somebody forgot to check there was a package for that but it's kinda hard to guess
[20:30:52] <jaytee80> Ugh, and they only have an rpm for M::B 4224... and really doesn't want me to install 4231 on top of it. Welp, gonna do it 
[20:31:35] *** Joins: YaoNai (~YaoNai@user/yaonai)
[20:34:37] <mst> part of me would be tempted to perl-build your own perl
[20:34:40] <mst> install stuff into that
[20:34:46] <mst> then just rpm-ify the entire app+perl
[20:34:52] <thrig> FAT PERL
[20:35:07] <mst> I'll write that later
[20:35:17] <jaytee80> fuperl
[20:35:23] <thrig> PERL =>
[20:35:45] <mst> FUBAPC -> fucked up beyond all perl cognition
[20:36:00] <jaytee80> that's what I'm working on now
[20:36:17] <jaytee80> it's called lets try to add 400 rpms on top of redhat's
[20:38:57] * mst passes the bourbon
[20:39:07] <The_Blode> Good evening Perlites / Perly ones.
[20:39:14] <Altreus> o/
[20:39:21] <Altreus> oo biscuits
[20:39:26] <The_Blode> I had a question about some of my old Perl scripts if I may.
[20:39:50] <The_Blode> First, many of those scripts use the same functions.
[20:39:52] <Altreus> well we are already passing around the bourbon...
[20:40:01] <The_Blode> Is it prudent to put into a PM file and import at runtime?
[20:40:06] * ology waits his turn
[20:40:46] <mst> The_Blode: that's often a nicer approach, yes
[20:41:08] <The_Blode> I had problems before doing that. Let me give it a try tonight.
[20:41:09] <Altreus> The_Blode: one or more pm files - don't just make My::App::Everything and put it there instead
[20:41:26] <Altreus> The_Blode: you'll probably find they're relying on variables that they shouldn't be
[20:41:43] <Altreus> lexicals introduced in the script instead of passed in as parameters
[20:41:44] <The_Blode> I can post a script I wrote if you guys want to suggest reworking it
[20:42:15] <The_Blode> There's a couple of things I want; I want to reuse functions within the script in other similar scripts; I want to pass in common params like email address and other data.
[20:42:32] *** Joins: Pali (~pali@user/pali)
[20:44:38] *** Joins: kensanata (~user@user/kensanata)
[20:45:41] <Altreus> "and other data" sounds like the sort of thing that becomes an object
[20:45:59] *** Quits: japh (~scp1@user/japh) (Ping timeout: 264 seconds)
[20:47:01] <Altreus> <script type="text/javascript"> document.title="[% who the fuck came up with this way of doing it %]"
[20:47:30] <Altreus> the idea of just having a parameterised header template never occurred to anyone?
[20:47:33] <Altreus> jesus
[20:47:36] *** Joins: japh (~scp1@host-95-205-63-232.mobileonline.telia.com)
[20:47:36] *** Quits: japh (~scp1@host-95-205-63-232.mobileonline.telia.com) (Changing host)
[20:47:36] *** Joins: japh (~scp1@user/japh)
[20:48:23] <The_Blode> Hey guys, feedback most welcome.
[20:48:24] <The_Blode> https://l.perl.bot/p/arq6yb
[20:48:25] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[20:48:51] <The_Blode> It's a script that will parse a website (in this case the BBC) and will fetch 10 news stories and spit out an email
[20:49:57] <revhippie> Not using strict?
[20:49:57] <The_Blode> Would love firstly to pass in arguments (such as the site and such things) so the script can flex.
[20:50:04] <The_Blode> This is a little old so no.
[20:50:08] <The_Blode> But that's point #1
[20:50:12] <The_Blode> Use strict.
[20:51:24] <The_Blode> I'm using a lot of shell calls too but Perl is more than capable of doing the tasks I'm using the shell for.
[20:52:45] <Grinnz> jaytee80: redhat doesn't break their repos like that. you're probably missing the powertools repo which has perl-JSON-XS
[20:52:47] <Altreus> The_Blode: # construct output filename
[20:52:52] <Altreus> The_Blode: But the variable is just called filename
[20:53:00] <Altreus> The_Blode: Guess what you should do :)
[20:53:12] <revhippie> remove the comment!
[20:53:25] <The_Blode> Yep!
[20:53:25] <Grinnz> jaytee80: if an rpm from the official repos can't find its own dependency, your first assumption should be that you did something wrong
[20:53:48] <The_Blode> And the prize for most redundant comment goes to...
[20:53:53] <mst> Grinnz: my guess is that it's a CentOS rebuild and it's a recommends
[20:54:05] <Grinnz> doesnt matter what it is, the package is there
[20:54:05] <mst> Grinnz: and somehow MooseX-Types-JSON got missed
[20:54:11] * mst shrugs
[20:54:12] <Altreus> The_Blode: ... the variable should be $output_filename
[20:54:24] <Altreus> otherwise how are you going to know what it means when you see it later?
[20:54:50] <The_Blode> That's true.
[20:54:52] <Altreus> or you could just construct the $output_filehandle at this point
[20:55:04] <The_Blode> Well, I think the first thing I need to do here is, pass in some arguments to ARGV
[20:55:13] <The_Blode> What do you think?
[20:55:30] <revhippie> The_Blode: $counter eq 9  -->  $counter == 9
[20:55:46] <Altreus> The_Blode: actually the first thing you should do is loop over STDIN
[20:55:46] <The_Blode> Good spot hipper
[20:55:52] <The_Blode> Making notes
[20:55:53] <Altreus> The_Blode: and then pipe the result of curl into the script
[20:55:56] <mst> p3rl.org/Getopt::Long
[20:55:59] <The_Blode> Check comparison operators
[20:56:02] <The_Blode> Use strict
[20:56:09] <Altreus> The_Blode: (cos then you can just cat a file in instead)
[20:56:29] <Altreus> Any time you've prescribed how to do something that you don't need to, parameterise it. curl is one of those things
[20:56:46] <Altreus> The_Blode: you can also output to STDOUT. The shell is quite capable of writing that to a file as well if you ask it to
[20:57:03] <The_Blode> This particular script is designed to be quiet.
[20:57:10] <The_Blode> And ideally not using much disk
[20:57:16] <revhippie> The_Blode: remove sub prototypes "sub sendToKindle() {"  -->  "sub sendToKindle {" 
[20:57:17] <The_Blode> It will send an email though
[20:57:25] <Altreus> but you can make another script that calls this script, if you want an automated output-to-fie
[20:57:33] <The_Blode> I learned about the dangers of protos in sub routine declarations...making note thanks
[20:57:46] <Altreus> If you accept STDIN and produce STDOUT it's way easier to test it
[20:57:56] <Altreus> Then you can wrap it in something else for the existing behaviour
[20:58:02] <The_Blode> How would I pipe from cURL?
[20:58:11] <Altreus> curl | script > filename  # your new script
[20:58:23] <The_Blode> Also, can I replace Unix "touch" and "rm" in Perl right?
[20:58:25] <The_Blode> Like unlike?
[20:58:28] <Altreus> perlbot: slurp
[20:58:28] <perlbot> Altreus: slurping is reading the whole file into memory in one go. Use Path::Tiny or File::Slurper or something like my $file_contents = do { local $/; readline($fh) };. Also see: https://perl-begin.org/topics/files-and-directories/#string_slurp_utf8 . Avoid File-Slurp and IO-All.
[20:58:45] <Altreus> slurp STDIN ^ into $html
[20:59:28] <Altreus> The_Blode: probably. Not sure why you're touching those in the first place but you can use open to do that
[20:59:36] <revhippie> there's a lot of style stuff in this i'd probably change.  like alternate delimiters so you don't have \/\/\/ so much.  and maybe a big here-doc where you build $footer.
[20:59:51] <The_Blode> Also, this doesn't seem right to me but is $datestring2 valid?
[21:00:00] <Altreus> yes?
[21:00:01] <revhippie> i'd just sit back and let my lizard-brain reformat the whole thing while it soaks in what it does.
[21:00:02] <The_Blode> $datestring_part_two?
[21:00:04] <mst> it's an ugly but valid variable name
[21:00:28] <Altreus> The_Blode: "news_$datestring"."_$datestring2"."h.txt"  # You probably didn't know you could do "news_${datestring}_..."
[21:00:40] <The_Blode> Feel free to overhaul it if you like you can keep it :)
[21:01:00] <Altreus> not sure what it is
[21:01:04] <Altreus> well I mean
[21:01:08] <Altreus> I see what it says it is
[21:01:09] <The_Blode> I did not. I only learned about {} from PHP earlier
[21:01:18] <Altreus> PHP stole it from us!
[21:01:21] <Altreus> ahem
[21:01:22] <The_Blode> :)
[21:01:23] <The_Blode> lol
[21:01:32] <The_Blode> That may be true
[21:01:36] * mst basically always wraps variables in double quoted strings with {}
[21:01:42] <The_Blode> I did not know but now I do.
[21:01:42] <thrig> ${blah} is also in sh
[21:01:42] <mst> means I don't have to remember to add them later
[21:01:49] <mst> "foo ${bar}"
[21:01:59] <mst> is great if I want to change it to "foo ${bar}_baz" later on
[21:02:06] <mst> and not have to remember to edit the $bar
[21:02:12] <The_Blode> Changing
[21:02:21] <mst> strategic laziness ftw
[21:02:40] <The_Blode> my $output_filename
[21:02:44] <revhippie> huh, $filename contains a colon.
[21:02:46] <The_Blode> More descriptive.
[21:04:10] <The_Blode> Let me just compile with strict on to see how bad it is.
[21:04:24] *** Joins: gast0n (~g4570n@user/gast0n)
[21:04:27] <Altreus> splode
[21:04:44] <Grinnz> perlbot: slurp =~ s/;\./; after applying :raw or :encoding to $fh./
[21:04:45] <perlbot> Grinnz: Stored slurp as slurping is reading the whole file into memory in one go. Use Path::Tiny or File::Slurper or something like my $file_contents = do { local $/; readline($fh) }; after applying :raw or :encoding to $fh. Also see: https://perl-begin.org/topics/files-and-directories/#string_slurp_utf8 . Avoid File-Slurp and IO-All.
[21:05:54] <revhippie> error messages use $file instead of $filename (or $output_filename)
[21:06:09] <Altreus> or STDERR :D
[21:06:31] <The_Blode> Clearing up strict errors
[21:06:35] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000092 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000092
[21:08:23] *** Joins: deadmarshal (~deadmarsh@95.38.114.198)
[21:09:38] <The_Blode> Line 118 - Bareward "gi" not allowed while strict subs in use
[21:10:50] <revhippie> line 118: /**/ <- lots to escape
[21:11:41] <revhippie> right now it's s/something/**/ (replace) // (defined-or) gi (bareword)
[21:13:05] <Grinnz> using different delimiters might help
[21:13:38] <revhippie> yep.  putting the exit-loop-on-ninth-pass stuff in the middle of the loop seems odd.
[21:15:20] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[21:16:09] <The_Blode> Someone told me about File::Copy the other day, seems like a good bet here
[21:17:59] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Quit: leaving)
[21:18:00] <daemon> how would I make it so my $scalar would be treated as a filehandle, so that for instance something that expects to be writing to a file will simply put data in the scalar
[21:18:09] <daemon> I do not want to write a particular small file to disk -_-
[21:18:44] <Grinnz> open my $fh, '>', \my $data or die "failed to open scalar for writing: $!";
[21:18:48] *** Joins: mattil (~mattil@87-92-88-105.bb.dnainternet.fi)
[21:18:50] <daemon> ah cool, that simple
[21:18:53] <daemon> Grinnz++ # cheers
[21:19:19] <Grinnz> back when anything cared about 5.6, i had to use tempfiles instead, but that's not a thing anymore
[21:19:33] <daemon> thank god :)
[21:21:52] <mst> there's also TIEHANDLE, but don't
[21:22:24] * shal used Tie::File once, too, for a really messy problem
[21:22:32] *** shal is now known as shaldannon
[21:22:51] <The_Blode> What's the cleanest way to remove a file from the fs using Perl?
[21:22:56] <The_Blode> Unlink or rm?
[21:22:59] <shaldannon> unlink?
[21:23:01] <shaldannon> yeah
[21:23:06] <The_Blode> Thank you
[21:23:24] <shaldannon> if you want to be really clean, just degauss the fs
[21:23:30] <buZz> lol
[21:23:31] *** Quits: mattil (~mattil@87-92-88-105.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[21:23:37] <buZz> add some isopropyl
[21:23:40] <mst> shaldannon: sub random_line_of ($file) { tie my @poss, 'Tie::File', $file, mode => O_RDONLY; return $poss[int rand ~~@poss] }
[21:24:16] <shaldannon> that could be ... interesting
[21:24:30] <mst> shaldannon: that's what powers http://trout.me.uk/cgi-bin/mstomatic.cgi
[21:24:31] <Paperbot> Link title(s): [ mstomatic ]
[21:24:46] <shaldannon> I was dealing with that nasty DII file parsing problem I've mentioned before
[21:24:52] <shaldannon> oo
[21:25:17] <mst> basically there's a big file of extracted IRC log entries of me getting annoyed, one per line
[21:25:34] <revhippie> mst: what's the purpose of ~~ there?
[21:25:44] <mst> revhippie: overly cute way to say 'scalar'
[21:25:57] <shaldannon> Imma have to stop reading that ... too many f-bombs.  hope work isn't reading my web cache
[21:26:12] <mst> shaldannon: well, yeah, if I'm being polite, it doesn't show up ;)
[21:26:19] <shaldannon> LMAO
[21:26:37] <revhippie> mst: huh... didn't think that was needed.  i usually do $foo[rand @foo]
[21:26:42] <mst> the regexp that filters the input is mostly checking for swearing and a few other words I reliably use when pissed off
[21:26:50] *** Quits: proller (~p@2a02:6b8:0:40c:118b:b037:e31d:344a) (Ping timeout: 260 seconds)
[21:27:06] <shaldannon> oh, so that's the angry-mst filter
[21:27:52] <shaldannon> I wonder if we could replace angry-mst with an angry-mst-markov bot and spot the difference? :-}
[21:27:58] <mst> revhippie: entirely possible it isn't (the perldoc -f entry isn't entirely clear), but often I make things like that explicit so when I'm skimming the code later I don't have to remember
[21:28:13] <mst> revhippie: I'll also do things like 'my @data = @{$foo{bar}||[]};'
[21:28:51] <revhippie> mst: makes sense!
[21:29:22] <shaldannon> mst++ # explicit and defensive coding
[21:29:48] <thrig> parental advisory explicit code
[21:30:06] <mst> the object of the exercise is "if I'm skim reading the code in six months trying to remember how it worked so I can bug hunt, I don't want this line to make me stop and go 'hmm, is this even right?'"
[21:30:15] <shaldannon> if you think the code is explicit, wait until you see the comments
[21:30:27] <revhippie> thrig: thanks, Tipperl Gore
[21:30:29] <mst> *LOL*
[21:30:38] <shaldannon> lol
[21:32:29] * shaldannon got a chuckle once watching the congressional hearing where Dee Snyder demolished Al Gore over that
[21:33:27] <Adura> eval: [~~(0, 1), - -(0, 1)]
[21:33:28] <perlbot> Adura: [1,1]
[21:33:39] <rbrHAUNT> thrig: lol
[21:34:05] <thrig> at least it's not smooth jazz
[21:38:16] <Adura> eval: @arr = ('a', 'b'); [~~@arr, - -@arr]
[21:38:17] <perlbot> Adura: [2,2]
[21:38:20] <Adura> There we go.
[21:38:52] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:39:09] <mst> Adura: a musical reference so bad it broke thrig
[21:39:19] <mst> oh, wait, not, misread, he broke himself
[21:39:50] <daemon> Grinnz, anything else special to do, I am now getting: 'System write error on get(): Bad file descriptor
[21:39:50] <daemon> '
[21:39:59] <daemon> using that filer handle created by open
[21:40:05] <Grinnz> are you passing it to XS code?
[21:40:16] <daemon> no, Net::FTP as a handle for GET
[21:40:18] <Grinnz> if you pass it to something which expects a C fileno it won't work
[21:40:34] <daemon> anything I can do to get around it without writing the file
[21:40:37] <Grinnz> nope
[21:40:41] <daemon> crap
[21:40:53] <daemon> I hate using bloody temp files
[21:40:59] <Grinnz> you can open a tempfile on a tmpfs, that's about the best you can do if it needs a fileno
[21:41:09] <Grinnz> why, it's the easiest thing ever with File::Temp
[21:41:17] <daemon> apparently I can use a IO::HAndle or a GLOB
[21:41:22] <daemon> as an alternative
[21:41:25] <mst> daemon: it's doing a select()
[21:41:35] <Grinnz> scalar handles are both of those things. that's not the problem
[21:41:43] <mst> daemon: so you need something that exists at the kernel level
[21:42:03] <daemon> I see
[21:42:12] *** Quits: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-16-76-68-64-112.dsl.bell.ca) (Quit: Konversation terminated!)
[21:42:25] <mst> daemon: use IO::Pipely and an event loop and fork to fake it out
[21:42:41] <mst> (that's the POE socketpair/pipe generation code)
[21:42:51] <daemon> mst++
[21:42:56] <Grinnz> yeah a pipe would work
[21:43:31] <mst> daemon: but basically whichever event loop you want will be improved by IO::Pipely, it's one of dngor's most impressively reusable small gifts to cpan
[21:43:47] <mst> (also it remembers which things don't work on windows so I don't have to)
[21:47:50] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 260 seconds)
[22:04:03] <EvanCarroll> tying a file handle has proven to be very useful in my experience
[22:04:42] <EvanCarroll> (for mocking)
[22:05:39] <EvanCarroll> blessing a filehandle is also very useful. mostly because I have no idea how file handles in perl actually work, despite having used it forever.
[22:05:58] <EvanCarroll> some things are real file handles, and others are not. it's stupid magic.
[22:06:19] <Grinnz> like most things in perl, it's real as long as the thing you pass it to thinks it's real
[22:08:22] <EvanCarroll> for fun, try explaining this code to anyone: open(local *STDIN, "<", "/dev/null" );
[22:08:55] <EvanCarroll> Whatever a reasonable person would expect that to do, it doesn't.
[22:09:41] <shaldannon> I would expect it returns undef ... but I'm curious.  what /does/ it do?
[22:12:22] <simcop2387> Are there any vegetarian or vegan perl developers here? I'm wanting to look at making some Acme::CPANAuthors:: modules.
[22:13:02] <Grinnz> i imagine it throws a new devnull handle in the *STDIN superglobal which nothing will then use?
[22:13:03] *** Joins: last1 (last1@modemcable039.93-160-184.mc.videotron.ca)
[22:13:38] <ether> DBIx::Class does not require MooseX::Types::JSON
[22:13:40] <EvanCarroll> iirc, it changes the glob for STDIN to point to a new FD, while not closing FD(0) so other things that fork will still inherit from STDIN. 
[22:14:01] <EvanCarroll> So it does what you would think in the parent process unless you fork, and then you're in for a very fun time.
[22:14:28] <shaldannon> still trying to figure out why you want want /dev/null as an input device
[22:14:47] <EvanCarroll> shaldannon: becuase I don't want the child process to be able to read from STDIN?
[22:14:52] <ether> nm, solution lower down anyway
[22:15:00] <shaldannon> ah
[22:15:50] <Grinnz> EvanCarroll: not even a fork, but any part of the process which actually looks at STDIN rather than perl's superglobal
[22:15:59] <Grinnz> like C code
[22:16:15] <EvanCarroll> Yep, which is also a fun distinction and totally insane (and probably undocumented)
[22:16:17] <Grinnz> anyway to do that properly just use IPC::Run3
[22:16:37] <Grinnz> i mean it's not documented that you should do anything like that
[22:16:46] <Grinnz> you just decided to do random shit yourself
[22:17:11] <EvanCarroll> I mean, that STDIN isn't just a reference to FD(0) but exists as an abstraction of over FD(0) is a very difficult mental model to wrap your head around.
[22:17:22] <Grinnz> literally how every filehandle in perl works
[22:17:27] <The_Blode> Third iteration of my script...please take a look if you have time. Feedback welcome.
[22:17:50] <EvanCarroll> perhaps, but STDIN means something outside of Perl, and $myFH does not.
[22:18:00] <The_Blode> https://l.perl.bot/p/bn6ps7
[22:18:01] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[22:18:12] <Grinnz> *STDIN does not mean something outside of perl, it's just unfortunate that most people use it as a bareword
[22:18:37] <EvanCarroll> STDIN outside of perl, and literally according to posix means FD(0)
[22:18:49] <Grinnz> yes, which has nothing to do with the variable
[22:19:04] <EvanCarroll> which would leave you to believe it's a badly named variable, amirite?
[22:19:11] <Grinnz> no
[22:19:24] <EvanCarroll> .. PERLIO_INPUT would be better?
[22:20:03] <Grinnz> i don't expect changing $! to affect errno either
[22:20:36] <EvanCarroll> Well, that makes sense. But if it was literally *ERRNO = 4, you'd probably expect that, right?
[22:20:41] <Grinnz> no
[22:20:44] <EvanCarroll> I would.
[22:20:57] <Grinnz> well you're wrong, that's not how variables work
[22:21:05] <EvanCarroll> heh, okz.
[22:21:12] <Grinnz> despite a few of them being terrible tied interfaces
[22:21:29] <Grinnz> (i'm looking at you, $)
[22:22:37] <shaldannon> was that a $) and a missing trailing ) ?
[22:22:46] *** Joins: proller (~p@80.240.216.69)
[22:22:57] <Grinnz> i'm efficient
[22:23:03] <EvanCarroll> I think he means *all* variables in perldoc perlvar that start as $
[22:23:07] <mst> I guess that's one word for it
[22:23:07] <shaldannon> you broke my parens parser
[22:23:18] <mst> shaldannon: needs more S_intuit_parens
[22:23:20] <Grinnz> EvanCarroll: no just the few that are terrible r/w interfaces
[22:23:30] <shaldannon> yeah
[22:23:32] <EvanCarroll> $0?
[22:23:37] <EvanCarroll> there are probably a bunch of them.
[22:23:39] <Grinnz> $0 is not that bad considering
[22:23:49] <EvanCarroll> Well, $0 does exactly what I'd think.
[22:23:51] <Grinnz> though people rely on it way too much via FindBin
[22:23:55] * shaldannon wonders if there's an ACME::Human module to assist with crappy coding and/or typos
[22:24:04] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[22:24:30] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:24:34] <Grinnz> shaldannon: that's called fiverr
[22:25:02] <Grinnz> or post into a volunteer help channel and say it's perfect code
[22:25:19] <shaldannon> like here? :-}
[22:25:48] <The_Blode> Neat way to print an array like @matches please guys
[22:26:00] <Grinnz> print "@matches"
[22:26:12] <mst> print join(", ", @matches)."\n";
[22:26:15] <The_Blode> I was going to do this...not sure if it's neat
[22:26:21] <Grinnz> looks neat to me
[22:26:22] <The_Blode> Thank you trying
[22:26:29] <Grinnz> use the join if you want a specific delimiter
[22:26:34] * mst likes the explicit version because then I can tweak the formatting later easily
[22:27:11] <shaldannon> should write a join routine named play_with() so you can play_with(@matches)
[22:27:49] <EvanCarroll> "@arr" is nice on one liners
[22:28:07] <mst> EvanCarroll: or when trying to pirate things
[22:28:08] <The_Blode> Thank you all
[22:28:13] <EvanCarroll> bluetoothctl devices | perl -anE 'print$F[1]if"@F[2...$#F]"eq"DCR010"'
[22:28:26] <revhippie> The_Blode: you don't need /i if your regular expression doesn't involve any letters.
[22:28:26] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[22:28:30] <EvanCarroll> that will return a bluetooth essid based on the display name!
[22:28:31] <revhippie> O fpm
[22:28:54] <revhippie> ^- wrong home row, whoops.
[22:29:54] <jaytee80> I'm down to 3 deps I need to make into rpms. These are all the ones that will make me drink. PDL (not too bad, I just need a ton of optional features), Chart::Graph::Gnuplot (bourbon), PerlQt (tequila... black out)
[22:30:05] <The_Blode> Thanks hippie
[22:30:32] <mst> jaytee80: "do tequila shots until Qt actually seems like a cutie" yeah
[22:30:46] <mst> jaytee80: industrial strength goggles required
[22:31:11] <jaytee80> Stunningly... I had PerlQt actually operational and rpm installed on centos7.
[22:31:18] <jaytee80> If only I could remember how
[22:31:28] <jaytee80> Must have been tequila involved last time as well
[22:31:42] <mst> maybe find the rpms from last time and take them apart?
[22:31:44] * GumbyPAN CPAN Upload: AnyEvent-Discord-0.7 by NMELNICK https://metacpan.org/release/NMELNICK/AnyEvent-Discord-0.7
[22:31:44] * GumbyPAN CPAN Upload: Spreadsheet-XLSX-0.16 by ASB https://metacpan.org/release/ASB/Spreadsheet-XLSX-0.16
[22:31:54] <jaytee80> mst: I certainly will have to do that.
[22:33:55] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[22:45:37] <last1> are there any guidelines on designing recurring calendar 'events' that also take into consideration timezones ? I need to create some allowed time intervals, for each day of the week. for example, Monday 06:00-18:00 is allowed, Tuesday 03:00 - 21:00 , etc. This works fine when using my own time zone, but if I allow users to use their own time zone, if they enter say Monday 01:00 +2 , then that 
[22:45:37] <last1> becomes Sunday 06:00 -7 my time which completely messes me up
[22:45:57] <last1> I guess I'm looking more for some established patterns on how to design such a system
[22:46:39] <last1> if there are any
[22:46:57] <mst> look at the ICal standard for ideas
[22:47:30] <mst> also, make restrictions be based on UTC and convert back and forth
[22:47:43] <mst> there's no reason why Sunday 06:00 should validate just because somebody's in a different timezone
[22:48:22] <last1> well, right now I store this data in a DB, I have entries for each day of the week. So when the user enters his data for 'Monday', that would translate to my Sunday
[22:48:41] <last1> I don't even know where to store it, under Monday or Sunday
[22:49:04] <mst> postgres uses 'timestamp with timezone' so you don't have that problem
[22:49:14] <mst> if it's in a database and it's allows SUnday 06:00 your database is wrong
[22:49:56] <last1> well, I store it as 3 separate columns, day of the week + start time ( hour:minute ) and end time ( hour:minute )
[22:50:00] <Grinnz> yeah basically the first step is deciding whether you want to restrict based on arbitrary local times (e.g. for store hours, where the local time of the store is what matters) or based on moments in time (in which case you want to translate it to UTC to do any operations)
[22:50:33] <Grinnz> but of course, for a recurring event, you can't translate it to a moment until you are looking at one specific instance fo it
[22:51:16] <last1> yeah, it's a recurring event, for example, I want to give the user access to my panel only (his) Monday between 09:00 - 17:00
[22:51:23] <Grinnz> and timezones will translate differently during different parts of the year
[22:51:24] <last1> doesn't matter which Monday
[22:51:38] <Grinnz> so you basically need to present the user with your timezone, if that's what you're basing it on
[22:52:24] <last1> he doesn't want that, he wants to choose in his own timezone
[22:52:28] <Grinnz> or in other words: the interface needs to ask the question in the timezone that's relevant to it
[22:52:39] *** Quits: deadmarshal (~deadmarsh@95.38.114.198) (Ping timeout: 244 seconds)
[22:52:40] <last1> otherwise yes, what you say would be really easy
[22:52:56] <Grinnz> if he chooses in his timezone, then it will change times
[22:55:06] <Grinnz> either you will have to store his selection in his timezone and then calculate your operation based on that timezone forever, or you will have to ask for it in your timezone
[22:55:36] <Grinnz> or ask for it in UTC is another option (but then that will also change what it is in your local time zone, if it follows DST)
[22:55:56] <last1> I don't know why I have this rule in my head that I should never store user date/times in their timezones
[22:56:03] <last1> and that I should always use mine, and convert
[22:56:15] <Grinnz> that's fine for moments in time, but this is not a moment in time
[22:56:15] <last1> not sure if I read that somewhere but it's stuck with me - does that make any sense ?
[22:56:33] <Grinnz> converting between time zones is not a defined operation on "weekly events"
[22:56:43] <Grinnz> because the conversion depends on the moment
[22:57:35] <Grinnz> for a moment in time it doesn't matter what timezone you store it in as long as it was converted correctly
[22:57:50] <last1> I think I'm starting to understand
[22:58:01] <Grinnz> (and as long as it retains that timezone information)
[22:59:27] <jaytee80> Wow, I managed to get qt3 libs from Centos7 packages to install with no muss, then installed my centos7 PerlQt package as it was without rebuilding. 
[23:00:03] <last1> you are correct - I will store the information in his timezone
[23:00:07] <last1> and document this properly in the code
[23:00:09] <mst> jaytee80: if the perl's changed that's likely not to load though
[23:00:39] <Grinnz> jaytee80: did you see my comment about your missing powertools repo?
[23:00:44] <jaytee80> I'll find out before too long... but yeah, that might suck.
[23:01:10] <jaytee80> Grinnz, I missed that comment. I'll scroll up.
[23:02:29] <genio> centos 8 + epel I assume?
[23:02:35] <Grinnz> rocky linux 8
[23:02:39] <Grinnz> so basically
[23:02:43] <jaytee80> rocky + epel
[23:03:05] <genio> yea, should start saying EL8 rather than defaulting to "centos"
[23:03:06] <jaytee80> I had to enable powertools on a couple of commands, but I don't think it resolves there by default
[23:03:30] <Grinnz> the broken part here seems to be that you can find a package that depends on perl-JSON-XS without the repo that contains perl-JSON-XS enabled
[23:03:39] <Grinnz> but it does exist
[23:03:44] <genio> yep. 
[23:03:52] <jaytee80> It's in powertools?
[23:03:55] <Grinnz> yes
[23:04:07] <jaytee80> that coulda saved me some time earlier. I ended up recreating it.
[23:04:09] <Grinnz> you should enable it globally not just on some commands
[23:04:14] <Grinnz> lots of things are in powertools
[23:04:23] <jaytee80> will do right away
[23:05:02] <genio> dnf config-manager --set-enabled powertools       used to be PowerTools, but now it's lowercased. fun
[23:05:36] <jaytee80> That explains a lot. There were quite a few packages found with dnf but with missing deps. Quite a ton of those getting DBIx::Class installed in fact.
[23:05:49] <Grinnz> rhel8 decided to split off that stuff into a separate subscription, and centos put them in powertools, and for some reason doesn't enable it by default
[23:06:02] <Grinnz> makes no sense why they dont enable it by default tbh
[23:06:05] <jaytee80> You'd think they would not include them in epel (or base?) if they depended on powertools rpms
[23:06:21] <El_Che> redhat killed centos in real usage, so it does not matter
[23:06:33] <genio> yea, I don't get it. it's a weird behavior and I'm sure there's some stupid reason that makes it make sense if you tilt your head the right way
[23:06:36] <Grinnz> probably makes sense for EPEL, since you have to enable that yourself too
[23:06:52] <Grinnz> El_Che: yeah but this is in rocky linux
[23:06:59] <Grinnz> which copied centos here
[23:07:08] <El_Che> guys are work are deploying alma
[23:07:08] <genio> so did Alma
[23:07:24] <genio> We're using Alma
[23:07:41] <Grinnz> never heard of that one
[23:07:47] <El_Che> faster release dates
[23:08:15] <Grinnz> says it's backed by mostly the same orgs as rocky, heh
[23:08:23] <El_Che> (in my usecase, I mostly use containers, so the underlying OS is less relevant than it used to)
[23:08:43] <genio> AlmaLinux and RockyLinux are basically the same thing accomplished from two different groups at roughly the same time. Alma reached a prod release before Rocky
[23:08:53] <genio> (both of them)++
[23:09:10] <jaytee80> Rocky is run by all the centos people that quick when RH/IBM ruined it, that's part of why I picked them. They have the centos track record I guess
[23:09:16] <jaytee80> that quit*
[23:09:38] <zgu> hmm, the logo reminds me of captain planet
[23:10:12] <genio> Both of them have a shell script written up to convert from CentOS/Rocky/Alma to the other. If you really want to switch, you can do so without a rebuild (though I don't know why you wouldn't just rebuild)
[23:10:20] <jaytee80> So yeah, my C7 rpm of PerlQt won't load because the libs went to .../site_perl/5.8.8/... sigh
[23:10:34] *** Joins: dlss^ (~dlss@wsip-68-227-92-38.mc.at.cox.net)
[23:11:39] <El_Che> genio: I hope they merge. It makes no sense to have 2 identical clones. And their only raison d'^etre is being a clone
[23:13:32] <genio> El_Che: I don't _really_ disagree other than they both solved the problem of generating a clone of RHEL and having two ways to solve the problem rather than just one seems like a good idea. Rocky worked hard to get the org setup so that it wasn't tied to a group that could be just shitcanned in the same way. meh. they're both 1-1 clones of RHEL so I'm good with either
[23:13:52] <genio> if one goes away, I switch to the other and continue on. 
[23:13:58] <Grinnz> genio: actually discussing this now as we had set up our dev server in centos 8 before all this happened, and want to migrate to rocky without making everyone re-set-up again
[23:14:08] <Grinnz> so if the migration tool works well enoguh that's neat
[23:14:56] <El_Che> I am still puzzled about the rh8 stream repo thing
[23:15:16] <genio> Grinnz: 👍 I haven't tried it but read through it and provided some feedback and whatnot while they were making it
[23:15:21] <jaytee80> It all boils down to "Let's Go IBM" or some thing like that
[23:15:22] <El_Che> it looks to me that they copies Oracle on Solaris 11 but made it worse
[23:16:49] * GumbyPAN CPAN Upload: App-Phoebe-4.02 by SCHROEDER https://metacpan.org/release/SCHROEDER/App-Phoebe-4.02
[23:18:21] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:18:25] <genio> the app streams are also a bit wtf to me, too. but having the ability to switch to a different version of PHP/Perl whatnot for newer versions on the dist doesn't really make my life easier as our Perl apps use a hand-crafted version anyway. Maybe for things like HTTPD/NginX where you can get newer versions than those that were released with the OS would be nice down the road
[23:19:15] <genio> I like the fact that in order to get a newer version of one of those things on the app stream that I wouldn't have to enable a third party repo that I first have to vet
[23:19:37] <cjac> jaytee80: don't forget that nobody got fired line.
[23:22:32] *** Quits: magla (~gelignite@55d4378c.access.ecotel.net) (Quit: Stay safe!)
[23:26:11] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Remote host closed the connection)
[23:26:34] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[23:27:48] <cjac> I liked them when they were called lenovo
[23:32:47] *** Quits: e1f (~user@141.117.1.185) (Ping timeout: 264 seconds)
[23:46:42] *** Joins: Oele (~Oele@5.57.21.48)
[23:46:52] * GumbyPAN CPAN Upload: App-Regather-0.81.04 by ZEUS https://metacpan.org/release/ZEUS/App-Regather-0.81.04
[23:50:59] <mst> :1
[23:51:10] * lopid sniggers
[23:51:19] <mst> ENOTVI
[23:52:40] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 260 seconds)
[23:55:50] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[23:59:17] * shaldannon recalls when IBM sold its PC division /to/ Lenovo
