[00:00:04] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:00:08] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[00:00:34] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[00:01:51] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[00:02:33] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:02:51] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:03:17] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:05:19] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:06:12] <theseb> Are there some areas where haskell blows away other langs and is a competitive advantage for businesses?
[00:06:35] <theseb> i'm guessing maybe when you need high assurance and formal verification?
[00:06:45] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:06:47] <monochrom> Financial contracts. Such as those infamous recursive CDO's.
[00:07:56] <theseb> monochrom: yes..and i would guess they are great for finance because you need high assurance
[00:08:21] <theseb> monochrom: Cardano is a blockchain that is using lots of Haskell for similar reasons....i think that is great
[00:08:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:08:38] <theseb> i want to see the state of the art for high assurance software go up
[00:08:40] <Rembane> theseb: When you need a parser, interpreter or compiler Haskell is your language.
[00:09:24] <theseb> my only fear if we are correct is that the CONVERSE implies if you aren't using haskell your apps are likely to be buggy
[00:09:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:09:39] <theseb> i'm sure fans of other langs would argue that they can make their apps secure too
[00:09:55] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:11:11] <random-jellyfish> I have a problem
[00:11:24] <random-jellyfish> newtype Mealy in out = Mealy (in -> (out, Mealy in out))
[00:11:35] <random-jellyfish> why is Mealy defined that way?
[00:11:44] <random-jellyfish> why without a state?
[00:12:02] <random-jellyfish> somebody tried to explain this to me but I didn't understand
[00:12:12] <random-jellyfish> why is there no s state in there?
[00:12:19] <random-jellyfish> like in the state monad for example
[00:12:19] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:13:06] *** Quits: chronon (~chronon@user/chronon) (Remote host closed the connection)
[00:13:34] <Rembane> random-jellyfish: Where is Mealy defined that way? 
[00:13:35] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:13:39] <lyxia> machines library
[00:14:21] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:14:57] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:15:33] <monochrom> unfoldMealy allows you to use a state transition function to specify a Mealy machine. Perhaps you can read it source code to see how the state hiding is done.
[00:15:44] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:17:36] <monochrom> But the short answer is a different state means a different "in -> (out, Mealy in out)" function.
[00:17:55] <random-jellyfish> unfoldMealy :: (s -> a -> (b, s)) -> s -> Mealy a b
[00:18:29] <EvanR> the Mealy value itself can contain a hidden state
[00:18:37] <EvanR> in a closure
[00:18:48] <EvanR> that's probably the intention of that definition you gave
[00:18:51] <monochrom> or rather, s/short/high level/
[00:19:08] <tomsmeding> a Mealy basically _is_ the representation of a state in the state machine, namely the current state. It represents a state by a function that, given an input, returns the corresponding output and the state that you then go to -- a new function
[00:19:32] <Rembane> Is this the covariant vs contravariant thing?
[00:19:38] <monochrom> Yeah, at some point I would just take a Mealy value to be the state value already.
[00:19:41] <tomsmeding> also yes, closures :p
[00:20:01] *** Joins: janus (janus@anubis.0x90.dk)
[00:20:11] <EvanR> using the Mealy returns a new Mealy, hence, new state
[00:20:19] <random-jellyfish> okay so the state is encoded as a function not as a record
[00:20:36] <janus> why are lets allowed in guards? i don't see why they can't just be in the body
[00:20:37] <tomsmeding> what would you normally put in that record?
[00:20:45] <EvanR> internally you could have used a record, or an number, or recursed to a new function entirely
[00:20:56] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:20:57] <tomsmeding> janus: could have a couple of lets, and then another pattern guard
[00:21:53] <monochrom> janus: Suppose I want "f x > 0, f x < 5", and I don't want to recompute f x, and I don't know that CSE will do it for me?
[00:21:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:22:32] <random-jellyfish> tomsmeding the record would contain whatever defines the internal state of a system: counters, tables, etc. things that change after a state transition
[00:22:43] <monochrom> OK maybe that's a weak reason because "where y = f x" exists.
[00:23:00] <tomsmeding> random-jellyfish: right, then that's in the closure of the function
[00:23:10] <EvanR> random-jellyfish, if you wanted to do that, you wouln't need to return a Mealy. You would want something like State s
[00:23:10] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 250 seconds)
[00:23:15] <monochrom> Convenience? Haskell is not Python, we don't ban multiple ways of doing the "same" thing.
[00:23:25] <janus> i think tomsmeding's suggestion makes more sense, because you can't have a immediatly as the first thing in the case head, i think?
[00:23:30] <tomsmeding> random-jellyfish: https://hackage.haskell.org/package/machines-0.7.2/docs/src/Data.Machine.Mealy.html#unfoldMealy
[00:23:34] <janus> *a let
[00:24:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:24:04] <tomsmeding> 'go' is a functoin that takes the current state and an input as arguments, and returns a (out, Mealy in out) tuple
[00:24:29] <tomsmeding> and the function that's stored in a Mealy is the _partial application_ of 'go' to the state record that you're talking about
[00:24:57] <tomsmeding> % f = let value = 10 in \x -> x + value
[00:24:58] <yahb> tomsmeding: 
[00:25:04] <tomsmeding> % f 3
[00:25:04] <yahb> tomsmeding: 13
[00:25:06] <tomsmeding> % :t f
[00:25:06] <yahb> tomsmeding: Num a => a -> a
[00:25:15] <tomsmeding> random-jellyfish: somehow 'f' has stored this '10' somewhere :)
[00:25:27] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[00:25:36] <tomsmeding> (namely, in its _closure_, as it's called)
[00:25:39] <janus> > case () of { () | True, let f = 5, f == 5 -> "YES"; _ -> "NO" } 
[00:25:41] <lambdabot>  "YES"
[00:25:48] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:25:50] <random-jellyfish> ah I see
[00:26:33] <random-jellyfish> oh man my neural networks need some serious training to integrate this concept
[00:26:51] <EvanR> closures are often encountered first these days in javascript
[00:26:56] <EvanR> for better or worse
[00:27:02] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[00:27:12] <random-jellyfish> but I get it, you store "state" in closures using let, right?
[00:27:21] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[00:27:32] <EvanR> anything a function body can see will be in its closure, doesn't need to be a let
[00:27:33] <tomsmeding> const f = (function() { let value = 10; return function(x) { return x + value; }; })();
[00:27:37] <monochrom> I think stateful thinking is limiting.
[00:27:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Remote host closed the connection)
[00:27:52] <monochrom> I have 3 possible states, 0, 1, 2.
[00:27:53] <random-jellyfish> EvanR true
[00:28:03] <monochrom> If the state is 0, I want to function \x->x
[00:28:17] <monochrom> If the state is 1, I want the function \x -> x + 4
[00:28:37] <monochrom> If the state is 2, I want the function \x -> mod x 45
[00:29:01] <monochrom> Note how I no longer need the 3 states, I just need the 3 functions.
[00:29:18] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:29:31] <monochrom> If you ask yourself "what is this state for? why do I need it?", you can always find a stateless way.
[00:29:43] <monochrom> State is one of the most popular XY problems.
[00:29:48] <tomsmeding> though in a sense you're just hiding the state
[00:29:59] <EvanR> you can take the state out of the state machine, but you can't take the state machine ... nvm
[00:30:13] <tomsmeding> ... into the states?
[00:30:41] <random-jellyfish> for some systems the state is not just a simple value or an enum, sometimes it's a record or a tuple or an array
[00:30:42] <monochrom> The State Machine of Theseus. >:)
[00:31:14] <random-jellyfish> transition to another state would mean to change one field in that state
[00:31:20] <random-jellyfish> one or more fields
[00:31:30] * Rembane waves the unfold then fold flag 
[00:31:38] <tomsmeding> monochrom's functions were indexed by the set {0,1,2}
[00:31:42] <EvanR> usually when you are working with an explicitly state machine, your state really is like 9 enums
[00:31:47] <tomsmeding> that set doesn't need to be finite
[00:31:52] *** Joins: pavonia (~user@user/siracusa)
[00:32:02] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:32:06] <EvanR> any more complicated and you go nuts trying to build it as 12 transistors
[00:32:14] <tomsmeding> but then I think the most natural way for a non-advanced functional programmer to think of that, is precisely like a partially applied function, like in unfoldMealy that I linked before
[00:32:56] <EvanR> an OOP object using a hilarious complicated record of values as its internal state is probably outside the applicability of state machines
[00:33:27] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:33:39] <EvanR> even if theoretically right
[00:33:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:33:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:34:06] <random-jellyfish> take for instance this implementation of discrete event system specifications: https://github.com/sglumac/HDevs
[00:34:18] <tomsmeding> your brain is a state machine -- all of the neurons have a continuous domain they can be in, and the full state of the brain is the product of all those continuous domain
[00:34:22] <tomsmeding> talk about infinite dimensionality :p
[00:34:24] <random-jellyfish> DEVS is similar to Mealy and Moore state machines but a bit more complicated
[00:34:42] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[00:34:48] <random-jellyfish> in most books I've read about DEVS the state can also be a tuple
[00:34:51] <tomsmeding> what file is that type in
[00:34:53] <EvanR> physics works in a space of states... configuration space
[00:34:55] <monochrom> Well maybe I said it wrong. Stateful thinking is not the limiting one.  "State has to be data" is the limiting one.
[00:35:01] <random-jellyfish> EvanR yes exactly
[00:35:17] <random-jellyfish> configuration space
[00:35:21] <EvanR> and a mealy machine is impossible unless the transition function is reversible
[00:35:24] <EvanR> enjoy
[00:35:28] <monochrom> Why can't your state variable store a function? Why can't some of your record fields be function fields?
[00:35:39] <monochrom> Why can't your state space be the function space?
[00:35:56] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[00:36:36] <monochrom> Oh, it's because the language was C.
[00:36:55] <EvanR> I've definitely had a function pointer as state in C
[00:37:09] <monochrom> OK Fortran.
[00:37:15] *** Joins: xkuru (~xkuru@user/xkuru)
[00:37:27] <monochrom> But really most C programmers haven't thought of that either.
[00:37:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[00:39:15] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[00:39:56] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 245 seconds)
[00:40:09] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:40:09] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[00:40:23] <random-jellyfish> still trying to understand the advantages of this approach
[00:40:33] <tomsmeding> over?
[00:40:54] <random-jellyfish> hiding the state vs. not hiding the state
[00:41:03] <tomsmeding> what would your alternative definition be
[00:41:18] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[00:41:36] <EvanR> if you hide the state type from the type of the machine, then you can conveniently combine a bunch of machines in various ways
[00:41:48] <random-jellyfish> the state would be a field of the Mealy type, or of any state machine type
[00:41:50] <EvanR> if you expose the state in the type, you also can, but then the type becomes that much more complex
[00:42:09] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:42:27] <EvanR> e.g. parallel :: Machine s1 a b -> Machine s2 a b -> Machine (s1,s2) a b
[00:42:57] <tomsmeding> advantage of an explicit state is that you can check which state a machine is in
[00:43:47] * tomsmeding feels that alone would make an explicit state somewhat nicer to work with, if only for debuggability
[00:43:58] <tomsmeding> functions don't Show very well
[00:44:03] <EvanR> for small machines, yeah
[00:44:08] <tomsmeding> true
[00:44:23] <EvanR> when it becomes the size of insanely profitable, addictive, MMO, ...
[00:44:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:44:35] <EvanR> need better tooling either way
[00:44:43] <tomsmeding> at that point you probably don't want to use Mealy but write a anormal program :p
[00:44:53] <EvanR> but my silver hammer
[00:45:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[00:45:57] *** Joins: vysn (~vysn@user/vysn)
[00:46:36] *** Quits: xff0x (~xff0x@2001:1a81:536e:b500:97e8:b6a:74e2:dc96) (Ping timeout: 245 seconds)
[00:47:31] *** Joins: xff0x (~xff0x@2001:1a81:536e:b500:21cf:8a4e:4a69:c4d4)
[00:47:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:48:18] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 260 seconds)
[00:49:19] <kaol> Only functions which have longer type signatures than definitions are serious.
[00:49:44] <random-jellyfish> lol
[00:50:30] <random-jellyfish> excluding the undefined signature I assume
[00:50:42] <random-jellyfish> excluding the undefined definition I assume **
[00:50:49] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:51:05] <wavemode> f = f
[00:51:19] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:51:38] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[00:51:41] <random-jellyfish> while(true) {}
[00:52:12] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[00:52:16] <random-jellyfish> I hope I don't get banned for writing that
[00:53:01] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:5d4f:b362:d270:61b0) (Quit: Leaving)
[00:53:35] <geekosaur> let f = f in f
[00:53:45] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[00:53:53] <janus> ban this cnidaria!
[00:54:37] <tomsmeding> f = if True then f else undefined
[00:54:56] <random-jellyfish> that's a work of art
[00:55:01] <random-jellyfish> poetry even
[00:55:33] <tomsmeding> despite all that, it's a bottom :p
[00:55:58] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:56:01] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[00:57:18] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:57:43] <janus> can a bottom assume any type?
[00:58:07] <tomsmeding> % f1 = if True then f1 else undefined
[00:58:08] <yahb> tomsmeding: 
[00:58:15] <tomsmeding> % f2 = if True then f2 else "no"
[00:58:16] <yahb> tomsmeding: 
[00:58:20] <tomsmeding> % :t f1
[00:58:20] <yahb> tomsmeding: t
[00:58:22] <tomsmeding> % :t f2
[00:58:22] <yahb> tomsmeding: String
[00:58:26] <tomsmeding> janus: some can
[00:59:15] <janus> what is the correct word to describe whether or not it can?
[00:59:17] *** Joins: Sgeo (~Sgeo@user/sgeo)
[00:59:50] <tomsmeding> not sure, I guess those are fully polymorphic bottoms
[01:00:34] *** Joins: RFV1 (~Thunderbi@118.red-88-13-184.dynamicip.rima-tde.net)
[01:01:07] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[01:02:01] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[01:02:26] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[01:02:51] *** Quits: RFV (~Thunderbi@118.red-88-13-184.dynamicip.rima-tde.net) (Ping timeout: 245 seconds)
[01:02:51] *** RFV1 is now known as RFV
[01:03:01] <dolio> It's not exactly a meaningful question.
[01:04:17] <geekosaur> any value that is fully polymorphic / inhabits all types is bottom; the reverse is not necessarily true, and under the wrong circumstances (say, out of heap) any code might produce a bottom
[01:06:46] <wavemode> it's hard to call bottom a "value" at all. a bottom type has no values, so "producing a bottom" really just means not producing anything
[01:07:02] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[01:07:22] <dolio> Bottom is a value. You can think of it as a single value that ends up in all types, or as necessary structure that every type must have, but are somehow distinct. Both perspectives can be useful.
[01:07:25] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[01:07:55] <dolio> And some expressions with a polymorphic type can have bottom as a value, while others with monomorphic types can also have bottom as a value, under both interpretations.
[01:07:59] <janus> why do you say 'bottom' and not 'a bottom'? there are more than one since there is a difference between `error 'msg'` and `undefined` and an infinite loop
[01:08:28] <tomsmeding> (and some bottoms are fully polymorphic, and some have more specific types :p )
[01:08:31] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[01:08:37] <tomsmeding> % f2
[01:08:39] <geekosaur> but you can't distinguish between them, at least not within pure code. and even in IO you can only distinguish sonme of them
[01:08:42] <yahb> tomsmeding: "[Timed out]
[01:09:24] *** Quits: briandaed (~jaroslawj@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[01:09:29] <dolio> In the semantics that "bottom" comes from, it doesn't make any sense for there to be multiple bottoms.
[01:09:31] <janus> but i can't distinguish the ackermann function called on a large input either, and we still don't call that bottom
[01:09:40] *** Joins: cynomys (~cynomys@user/cynomys)
[01:10:29] <tomsmeding> janus: we just say it's fairly low down
[01:10:41] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[01:10:46] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428) (Remote host closed the connection)
[01:12:50] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:13:00] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[01:13:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[01:14:42] *** Joins: coot (~coot@213.134.190.95)
[01:14:43] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[01:16:31] *** Joins: Topsi (~Tobias@dyndsl-095-033-027-162.ewe-ip-backbone.de)
[01:18:36] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[01:19:58] <random-jellyfish> are GADTs important?
[01:22:01] <janus> no, they will fade into history when dependent types arrive :O
[01:22:29] <EvanR> sometimes type inference works with GADTs
[01:22:47] <dolio> GADTs are called inductive families in dependently typed languages.
[01:22:53] <dolio> And they're used all the time.
[01:23:23] <random-jellyfish> they scare me, I watched like 3 hour long videos and I still couldn't process them, starting to feel like fp isn't my game
[01:23:26] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[01:23:45] <janus> all the time? they are used thrice in this codebase of 900 modules
[01:23:45] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[01:23:59] <EvanR> I've never learned 3 hours worth of stuff from 3 hour videos
[01:24:05] *** Joins: alp (~alp@user/alp)
[01:24:08] <EvanR> try a 1 minute video
[01:24:30] *** Joins: zebrag (~chris@user/zebrag)
[01:25:11] <tomsmeding> janus: https://tomsmeding.com/f/ackermann.png
[01:25:26] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[01:25:45] *** Joins: alp (~alp@user/alp)
[01:27:06] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[01:27:10] <random-jellyfish> bottom is self similar
[01:27:21] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[01:27:26] *** Joins: alp (~alp@user/alp)
[01:27:42] <janus> ackermann is bottom, but misaligned
[01:27:51] <monochrom> random-jellyfish: I don't think of either representation technique as "better than the other" but you always should learn both to broaden your mind and maybe each has its use case.
[01:28:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[01:28:20] <tomsmeding> janus: considered equal by most but the most nitpickery
[01:29:09] *** Joins: alp_ (~alp@user/alp)
[01:29:45] <janus> as the first parameter approaches 0, less people are considered nitpickers
[01:29:50] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[01:30:19] <tomsmeding> isn't it infinity instead of 0?
[01:30:29] <tomsmeding> I thought A was monotonically increasing
[01:30:35] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[01:30:54] *** Joins: alp__ (~alp@user/alp)
[01:30:55] <monochrom> random-jellyfish: Ah I didn't read your recent conversation. I was still referring to how to represent Mealy machine states.
[01:31:07] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[01:31:17] <monochrom> For GADT, I would refer to the motivating example in the GHC user's guide THE END.
[01:31:35] <janus> if the first parameter is 0, the function is (+1). since nobody considers (+1) to be bottom, it is a small amount of people that are considered nitpicking
[01:32:01] *** Quits: alp (~alp@user/alp) (Ping timeout: 245 seconds)
[01:32:20] <monochrom> Generally, unidirectional watching videos hits diminishing return very quickly, 3 hours is not an improvement over 30 minutes, especially if the 30-minutes version is done properly.
[01:32:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Ping timeout: 260 seconds)
[01:32:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[01:33:13] <monochrom> Seriously in the case of GADT, the GHC user's guide example takes only 5 minutes.
[01:33:22] *** Joins: Erutuon (~Erutuon@user/erutuon)
[01:33:26] <EvanR> I'm wondering if there could be a 5 second animated gif
[01:33:42] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[01:33:48] *** Quits: alp_ (~alp@user/alp) (Ping timeout: 250 seconds)
[01:33:56] <monochrom> Beyond that, if you still don't find it something you have always wanted, then it is not something you have always wanted. Nothing wrong with that.
[01:34:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:35:23] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:35:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[01:35:32] *** Quits: alp__ (~alp@user/alp) (Ping timeout: 250 seconds)
[01:35:40] <random-jellyfish> I better stop watching those lengthy tech talks
[01:35:54] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[01:35:58] <random-jellyfish> such a bad time consuming habbit
[01:36:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:36:49] <Rembane> There are worse ones. 
[01:36:56] <Rembane> It's all about what you want to achieve.
[01:37:07] <hpc> i have a youtube-dl alias somewhere that downloads subtitles and formats it for reading
[01:37:18] <janus> tomsmeding: oh you're right, sorry
[01:37:28] <random-jellyfish> hpc sounds awesome
[01:37:47] <hpc> it's handy, although i still need to fix some issues with the actual formatting part of it
[01:37:50] <monochrom> One of the valuable skills learned ("learned") in grad school is to take only 5 minutes to skim a paper/talk and decide "do I really want to spend hours to study the whole thing".
[01:38:03] <hpc> maybe write a proper parser for it
[01:38:05] <tomsmeding> janus: as the first parameter goes to zero the nitpicking fraction certainly converges, but to 1, not to 0
[01:38:11] <monochrom> "learned" because no one taught you explicitly, it's kind of sink-or-swim. :)
[01:38:19] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[01:38:45] <hpc> that seems like the kind of thing you would tell someone to learn without actually teaching them lol
[01:38:53] *** Quits: RFV (~Thunderbi@118.red-88-13-184.dynamicip.rima-tde.net) (Quit: RFV)
[01:39:18] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[01:39:20] <tomsmeding> it's curious how many things people are supposed to "learn" without it ever being taught to them
[01:39:31] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:39:35] <hpc> tacit knowledge is a hell of a thing
[01:39:42] <dolio> That's what brains do.
[01:39:52] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 250 seconds)
[01:40:42] <EvanR> university is about the platform effect, all the smart people are there, you pay to just be in the same region of spacetime
[01:40:43] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[01:40:58] <janus> dolio: when you say GADTs are inductive families, is that because they have the same expressive power? in that i can take any haskell GADT, translate it to "inductive" in Coq or Agda, and it would work?
[01:41:32] <monochrom> Well, to be fair, sometimes you happen upon examples. You happen to run into your supervisor when they are skim, you notice how they do it.
[01:41:43] <janus> but don't the coq/agda versions support even more powerful typing with that syntax?
[01:41:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[01:41:44] <dolio> I mean they're the same thing, but with fewer restrictions.
[01:42:02] <monochrom> s/they are skim/they are skimming/
[01:42:14] <EvanR> or like me you're too lazy to read so many papers so you get good at skimming
[01:42:18] <janus> ok, so it's like a horse is a car, but faster and with less mood swings
[01:42:26] <dolio> Like the indices don't have to range over types, but a particular type.
[01:43:46] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[01:44:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[01:45:46] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:46:01] <dolio> No, it's more like deciding to say "sedan" instead of "four door auto mobile (FDAM)."
[01:46:48] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[01:46:49] <monochrom> I feel that I greatly misunderstand that analogy. :)
[01:47:33] <monochrom> I am imagining "saying 'cloud computing' instead of 'distributed computing'" SORRY!
[01:48:26] * tomsmeding recalls a visitor in this channel a couple of hours ago
[01:48:31] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:49:34] <dolio> Distributed computing is too clear. You need to invent a much longer word that you always feel the need to use an uninformative acronym for.
[01:49:44] <dolio> Er, longer phrase.
[01:51:57] <janus> ok so to sum up: GADTs are a particular kind of 'inductive families'. there are inductive families that cannot be expressed as GADTs, so we say that 'inductive familiy' is more powerful than 'GADT', which is more restrictive. correct?
[01:52:05] <dolio> Also the phrase should be uninformative, too. :)
[01:52:59] <dolio> I guess. GHC can promote all kinds of things to types now, so it's a lot more complicated to give examples of things you can't do with GADTs.
[01:53:06] <random-jellyfish> I'll just stick to ADTs for now
[01:53:35] <monochrom> DUCO = distributed ubiquitous computing operations >:)
[01:53:51] <random-jellyfish> are dependent data types supported now in ghc?
[01:53:59] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[01:54:54] <sshine> THAC0
[01:55:32] <dolio> The difference isn't really in the core idea, but in how many layers of hacks you have to pile on to do the same thing in GHC as in something meant to be dependently typed.
[01:57:03] <ephemient> to make Haskell cloud-compatible, we should start abbreviating it as h5l
[01:57:08] *** Quits: meltedbrain_y2k (~tekserf@87.125.156.8) (Quit: Leaving.)
[01:57:30] <monochrom> haha you monster
[01:57:42] <janus> ephemient: just use https://wiki.haskell.org/Cloud_Haskell
[01:57:42] <dolio> A lot of obvious ideas for things you can do in a dependently typed language that you can't do in GHC aren't actually good ideas anyway.
[01:59:14] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[01:59:33] <dolio> With respect to inductive families, that is.
[02:00:43] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[02:04:06] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:04:23] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:05:15] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[02:06:14] *** Quits: chomwitt (~chomwitt@athedsl-02411.home.otenet.gr) (Remote host closed the connection)
[02:06:24] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:06:45] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:07:08] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:08:37] *** Joins: RFV (~Thunderbi@118.red-88-13-184.dynamicip.rima-tde.net)
[02:08:40] *** Quits: RFV (~Thunderbi@118.red-88-13-184.dynamicip.rima-tde.net) (Client Quit)
[02:09:02] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:11:23] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[02:14:16] *** Joins: Erutuon (~Erutuon@user/erutuon)
[02:15:34] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[02:16:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-cdff-5348-04ff-b4e2.res6.spectrum.com) (Read error: Connection reset by peer)
[02:16:19] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[02:16:39] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[02:17:52] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:18:41] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 245 seconds)
[02:20:10] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:20:27] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 256 seconds)
[02:20:51] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:21:01] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[02:21:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[02:21:43] *** Joins: burnsidesLlama (~burnsides@client-8-85.eduroam.oxuni.org.uk)
[02:23:41] <zzz> why do we need EmptyDataDeriving?
[02:24:17] <zzz> i mean, why is this an extension an not the default and only option?
[02:25:07] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:25:44] <monochrom> I guess it was an oversight when they wrote Haskell 2010.
[02:26:07] *** Quits: burnsidesLlama (~burnsides@client-8-85.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[02:28:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:28:58] *** Quits: michalz (~michalz@185.246.204.89) (Remote host closed the connection)
[02:29:14] *** Joins: alp (~alp@user/alp)
[02:29:39] <zzz> right
[02:29:44] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:30:05] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:31:28] <mmalter> hey guys. It's not sarcasm, real issue. Since I've been doing functional programming I am really becoming a worse dev in other technos. I've heard some people experience the opposite.
[02:31:41] <monochrom> Another thing they forgot was to allow "case expr of { no clauses here }".
[02:31:42] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:31:47] <mmalter> It has gotten really bad since I started haskell and haskellish languages.
[02:32:27] <mmalter> Idk I feel something is wrong with me. I am badly wired or sth
[02:32:41] <jkaye[m]> How do you feel like you are a worse dev?
[02:32:47] <jkaye[m]> Are you sure you aren't getting into your own head a bit?
[02:33:07] <jkaye[m]> You should be the same dev as before, but with new knowledge and perspective to apply to your solutions
[02:33:08] <monochrom> Around 2010 the use cases of empty data were both fewer and different, such that few people thought of adjusting the rest of Haskell to stay consistent.
[02:33:19] <mmalter> I am really slow. Most errors I have are related to type. I used to write much less bug in the past.
[02:33:57] <mmalter> Now I do admit haskell gave me a better understanding of oop for example.
[02:34:02] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (Ping timeout: 240 seconds)
[02:34:14] <mmalter> Yet in practice, even elixir has gotten hard to write.
[02:34:15] *** Quits: Logio (em@kapsi.fi) (Ping timeout: 268 seconds)
[02:34:24] <monochrom> For example suppose today you do {-# language DataKinds #-} and "data B = F | T" and fully intend to use B as a kind only...
[02:34:55] <monochrom> Around 2010 you would instead be saying "data F; data T" and stayed with the * kind.
[02:35:32] <monochrom> So that was the more usual use case, and therefore you never actually pattern-matched on F or T, nor did you need any instance.
[02:38:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Remote host closed the connection)
[02:41:01] *** Joins: Logio (~em@kapsi.fi)
[02:41:04] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:41:50] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[02:42:18] *** Quits: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[02:42:32] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:42:34] *** Joins: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[02:43:28] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:44:29] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:45:54] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:46:37] *** Joins: prolic (~prolic@181.122.131.227)
[02:47:13] <prolic> Hi, I am a haskell-noob and run into troubles creating a GUI app
[02:48:26] *** Joins: Cheery (~cheery@7-239-179-185.static.tentacle.fi)
[02:48:48] <prolic> I create a connection to a websocket server and need to hold this connection somehow in my app model, however when I do so, I don't have Eq deriving on my AppModel anymore. Do I really need to add instance declaration for existing types and add Eq in order to proceed? Looks wrong to me.
[02:49:32] <jkaye[m]> You can't derive Eq if any field doesn't have an Eq instance
[02:49:43] <jkaye[m]> So, yes, it's "correct" at least with the current definitions
[02:49:52] <monochrom> Do you really need Eq?
[02:50:13] *** slac82791 is now known as slack1256
[02:50:35] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:51:31] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[02:53:10] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:54:57] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:56:12] *** Parts: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Leaving)
[02:58:36] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[02:58:40] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:58:58] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:00:36] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:01:14] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:02:11] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[03:03:00] *** Joins: cosimone` (~user@5.170.240.195)
[03:03:37] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[03:04:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[03:07:20] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[03:08:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[03:09:25] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:10:21] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:11:38] <Axman6> prolic: your options are to either write your own EQ instance which ignores the websocket conection, or not bother with an Eq instance; there's a good chance you don't need it
[03:12:17] <Axman6> having an Eq instance for the websockets package's Connection type would be difficult, since most of the fileds are IO actions
[03:12:25] <Axman6> fields*
[03:12:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:12:54] <prolic> first argument from the init function is this:
[03:12:55] <prolic> startApp   :: (Eq s, WidgetModel s, WidgetEvent e)
[03:13:03] <prolic> so I need Eq for my app mode
[03:13:08] <prolic> app model, sorry
[03:13:20] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:13:46] *** Quits: max22- (~maxime@2a01cb0883359800f6095299facac4b2.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:14:05] <prolic> or is there a way to hold those connections somewhere else?
[03:16:46] <prolic> I'm using this as base, if that helps: https://github.com/fjvallarino/monomer-starter/blob/main/src/Main.hs
[03:17:23] <jkaye[m]> If you need it, implement it
[03:17:36] <jkaye[m]> You will not be able to derive it with a non-Eq field within the record
[03:17:44] *** Quits: fendor (~fendor@91.141.70.82.wireless.dyn.drei.com) (Remote host closed the connection)
[03:18:18] <prolic> I don't think I really need it, I have a very very strong feeling I do something absolutely weird and wrong here, lol
[03:18:53] <jkaye[m]> The Eq constraint on startApp is a little odd to me, but I have never used that library
[03:19:23] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[03:19:33] <monochrom> I would then wonder what weird thing startApp would do when it relies on "==" but this "==" does not see the difference between two different websockets.
[03:19:35] *** Quits: Topsi (~Tobias@dyndsl-095-033-027-162.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[03:19:39] <prolic> I don't want to end up writing a lot of weird stuff just to make app model compatible with the garbage I have in my head
[03:20:29] <jkaye[m]> I think you may be supposed to do something like this by dispatching events
[03:20:32] <prolic> I think they calculate the diff between two app models and merge the difference into the view
[03:20:32] <geekosaur> what is the 4th parameter (config) to startApp?
[03:20:38] <jkaye[m]> I'm literally just reading through their docs right now though :)
[03:20:43] <jkaye[m]> https://github.com/fjvallarino/monomer/blob/main/docs/tutorials/01-basics.md
[03:20:51] <geekosaur> it occurs to me the websocket might go there if it's needed for the life of the app
[03:20:58] <jkaye[m]> WidgetEnv is probably where you'd hold the socket?
[03:21:24] <prolic> currently I tried to hold it in appmodel
[03:21:33] <prolic> but I am VERY happy to move it somewhere else
[03:21:50] <jkaye[m]> https://github.com/fjvallarino/monomer/blob/main/docs/tutorials/05-producers.md
[03:21:59] <jkaye[m]> Yeah, I think I'd just read through all of these
[03:22:01] <prolic> I just need to put it somewhere to be able to send /receive data later on
[03:22:14] <prolic> okay, will do, thanks for the help
[03:22:18] <jkaye[m]> This is definitely an "opinionated" framework, which is fine, but it means you'll really want to do things how it want's you to do them
[03:22:21] <prolic> back to more reading.... :)
[03:22:32] <geekosaur> nemmind, I see the config parameter is defined by monomer and you can't add to it
[03:22:59] <prolic> I had troubles installing any Qt or wx widgets dependencies, so I ended up using this, and I like the elm architecture, so hopefully it works out well for me
[03:23:00] <jkaye[m]> Funny thing is that the GitHub link was purple. So apparently I did look at this at one point or another...
[03:23:17] <jkaye[m]> Remember: reading documentation is a super power!
[03:23:53] <prolic> will I receive those super powers once it compiles?
[03:24:26] <prolic> :)
[03:24:57] <jkaye[m]> I think the super power is to make it compile
[03:24:57] <jkaye[m]> Lol
[03:25:06] <prolic> got it, then I'm doomed
[03:27:09] *** Quits: slack1256 (~slack1256@186.11.80.172) (Remote host closed the connection)
[03:30:19] <monochrom> Yeah I think "monomer" was mentioned in this channel recently.
[03:30:25] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:31:14] <EvanR> I read "reading documentation is a super power!" in reverse, and autocompleted the beginning to "writing documentation is..."
[03:31:58] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:32:38] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (Ping timeout: 256 seconds)
[03:32:38] *** Quits: Logio (~em@kapsi.fi) (Ping timeout: 256 seconds)
[03:32:57] <EvanR> at some point reading and writing were akin to super power
[03:33:06] <EvanR> now everyone and their dog can do it
[03:33:24] <monochrom> "And remember, the truth that once was spoken, to write documentation is to see the face of God...."
[03:34:35] <monochrom> "Do you hear the haddock sing? ..."
[03:35:46] <EvanR> documentation is incompatible with extreme programming, sorry
[03:36:37] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:36:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:37:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Remote host closed the connection)
[03:38:03] *** Joins: Logio (em@kapsi.fi)
[03:38:13] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[03:38:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:40:20] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:41:06] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[03:41:28] *** Joins: Cheery (~cheery@7-239-179-185.static.tentacle.fi)
[03:44:28] <sm> speaking of documentation.. Hecate, your Haskell Interlude appearance was great!
[03:44:28] <sm> https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5idXp6c3Byb3V0LmNvbS8xODE3NTM1LnJzcw/episode/QnV6enNwcm91dC05ODQ2MDM3?hl=en&ved=2ahUKEwjem6an3t_1AhUIIEQIHZEFDqsQieUEegQIAhAF&ep=6
[03:45:40] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:46:13] <sm> I admire how you speak, and it's great to hear someone raising the profile of documentation 
[03:46:44] *** Quits: xff0x (~xff0x@2001:1a81:536e:b500:21cf:8a4e:4a69:c4d4) (Ping timeout: 252 seconds)
[03:46:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:47:16] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 250 seconds)
[03:47:41] *** Joins: xff0x (~xff0x@port-92-193-141-218.dynamic.as20676.net)
[03:48:31] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[03:48:48] <Guest6735> Follow up from a question I had a few days ago, statically linking a binary with musl: https://paste.tomsmeding.com/DQrNwbzK I got some very nice responses, though I didn't understand them in their entirety. I tried to take a step back and make a minimun viable example instead, and wrote down the steps I followed and results.
[03:49:22] *** Quits: cosimone` (~user@5.170.240.195) (Quit: ERC (IRC client for Emacs 27.1))
[03:49:57] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:54:45] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[03:56:26] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 256 seconds)
[03:58:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:58:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:58:24] *** Joins: wroathe (~wroathe@user/wroathe)
[03:59:56] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 252 seconds)
[04:01:14] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:01:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[04:01:53] <qrpnxz> Is there a good library for statically sized arrays in Haskell?
[04:03:25] <EvanR> there's vector-sized
[04:03:58] <EvanR> index :: forall n a. Vector n a -> Finite n -> a 
[04:05:51] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:06:04] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:07:28] <qrpnxz> hmm, seems complicated, but i think best i've seen so far
[04:07:29] <qrpnxz> thanks
[04:08:32] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[04:09:07] <EvanR> it seems about on par with what I imagine statically typed arrays being like
[04:09:38] <EvanR> remember you can use numeric literals at the type level
[04:11:37] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:11:41] <qrpnxz> ah yeah, can i do that now without an extension?
[04:12:32] <EvanR> :k 5
[04:12:33] <lambdabot> GHC.Types.Nat
[04:12:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[04:13:21] <EvanR> some stuff might require importing GHC.TypeLits, or enabling DataKinds, or TypeOperators
[04:13:32] <EvanR> or other stuff, but honestly, those should all be enabled by default xD
[04:14:07] <monochrom> Perhaps petition for GHC2050 to include them :)
[04:14:12] <EvanR> enabling an extension is going to be the least of your concerns if you are getting into type level arcane arts
[04:15:03] <monochrom> No wait I have a better idea. Petition for an extension that allows user-defined extension aliases!
[04:15:24] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[04:16:15] *** Quits: wagle (~wagle@quassel.wagle.io) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:16:46] *** Joins: wagle (~wagle@quassel.wagle.io)
[04:17:24] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[04:19:38] <qrpnxz> thanks Evan
[04:20:23] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 250 seconds)
[04:20:48] * geekosaur wonders if this really calls for anything beyond Array
[04:21:22] <jackdk> monochrom: use `{-# OPTIONS_GHC -F -pgmF add_my_favourite_extensions.sh  #-}`
[04:21:37] <jackdk> perhaps? though I regret typing it
[04:21:59] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:21:59] <qrpnxz> hahaha
[04:22:51] *** Quits: lbseale_ (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[04:22:52] <qrpnxz> geekosaur, I could put everything into a Data.Dynamic too :) I like static guarantees.
[04:23:40] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[04:25:08] <awpr> how many different sizes / how large are the desired arrays?  if it's a small number of small sizes, then just `data Vec2 a = Vec2 a a` etc. might be a decent answer.  otherwise, it will unavoidably be complicated, and if that's okay, then `vector-sized` or `short-vec` should be what you're looking for
[04:25:28] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:25:45] <awpr> there's not really an option to have both "not complicated" and "type-level length"
[04:26:18] <qrpnxz> for one use case i need size 16, for another something like 0-255
[04:27:11] <qrpnxz> well look at short-vec as well thanks
[04:28:28] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[04:29:47] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:30:14] <awpr> "0-255" is a range of several statically-known lengths?  a dynamic-sized vector with a static upper bound of 255?  or length-polymorphic code where the length is typically in that range?
[04:30:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[04:31:13] <ephemient> in theory data Vec65 a = Vec65 a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a compiles. but
[04:31:16] <ephemient> > (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) -- does not
[04:31:18] <lambdabot>  error:
[04:31:18] <lambdabot>      A 65-tuple is too large for GHC
[04:31:18] <lambdabot>        (max size is 62)
[04:31:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:31:25] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[04:31:41] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[04:32:41] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:32:58] <awpr> in my experience, if you don't mix or change vector sizes, especially if vector sizes are always numeric constants, then that type of vector library should be simpler than it looks; but if you need existentially-sized things, or length arithmetic on polymorphic sizes, then they end up being way more complicated than they look
[04:33:23] <monochrom> jackdk: Excellent! I like here-and-now solutions too! :)
[04:35:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[04:37:11] <qrpnxz> i said 0-255 because i couldn't remember exactly the length, but somewhere around there. There was another situation where i was thinking it'd be cool to have a typed length, where the length was determined at parse time and it was carried around in the type. Why the type and not a member? Because then you'd get guarantees about what size objects you are combining. I forget the details but something like t
[04:37:11] <qrpnxz> hat. For now I was just wondering about dead simple static size arrays like in another static lang.
[04:37:48] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:38:50] <monochrom> jackdk: I have found another solution in the form of turning on CPP then use #include to include a file that contains language pragmas :)
[04:39:04] <monochrom> "more modular"
[04:39:18] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:40:03] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[04:41:15] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[04:43:29] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:45:07] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[04:45:20] <EvanR> qrpnxz, since the size is not known at compile time, it becomes the realm of existential types
[04:45:22] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[04:46:05] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:46:19] <EvanR> which a lot of fun!
[04:46:22] <EvanR> are
[04:46:22] <awpr> yeah, Haskell just doesn't have builtin size-parameterized arrays; somebody has to implement them in terms of type-level naturals and a curated API that preserves size correctness.
[04:46:22] <qrpnxz> sounds right
[04:46:38] <jackdk> monochrom: I'm sure that won't cause any problems at all
[04:46:47] <jackdk> }:->
[04:47:33] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[04:48:06] <awpr> OTOH the existential situation would be impossible to type or even more tedious in terms of other languages' "simple" sized arrays, so Haskell probably comes out slightly ahead there
[04:48:09] <qrpnxz> i wish it was in haskell built-in because seems like everybody reinvent the wheel here with these lifted Nats and Finites and such, and i feel like it's basic functionality? But i'm guessing it's still in the experimental phase where the optimal way to do it is not really obvious or somewhat clea
[04:48:56] <EvanR> Nat and Fin is pretty standard, outside haskell
[04:49:21] <awpr> lifted Nats are built in, nobody's reinventing that.  GHC just isn't as good at making type-level arithmetic convenient compared to a lot of other languages that put more effort into that
[04:49:54] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:49:59] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:51:25] <awpr> I'm not quite sure I see the disadvantage of the vec libraries though -- for the cases that are possible in other languages, they are actually simple after all, and if you accept making things more complicated, you can do things other languages can't
[04:51:45] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 256 seconds)
[04:52:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:52:38] <qrpnxz> you are right about the Nats. Suppose you are right about the libs, will need to try them out a bit
[04:52:42] <monochrom> Not as nice as a type system that's dependent since day 1.
[04:53:06] <monochrom> Then again, that sets a very high bar.
[04:53:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:53:26] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:54:41] <qrpnxz> this looked neat https://dl.acm.org/doi/10.1145/3110275
[04:56:56] <monochrom> Hey, I like the name "FC" more than "core". :)
[04:57:08] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:58:06] <monochrom> Thanks for the find, I think I'm interested too.
[04:58:33] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:00:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:02:24] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[05:04:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[05:07:01] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[05:09:02] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[05:14:21] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:15:58] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[05:16:26] *** Joins: Topsi (~Tobias@dyndsl-095-033-027-162.ewe-ip-backbone.de)
[05:16:48] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[05:22:36] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 250 seconds)
[05:23:11] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:23:54] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Remote host closed the connection)
[05:25:23] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[05:25:41] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:26:07] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[05:29:53] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[05:30:24] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 250 seconds)
[05:31:14] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:32:17] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[05:32:52] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:33:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:33:52] *** Quits: emf (~emf@2620:10d:c090:400::5:b471) (Ping timeout: 250 seconds)
[05:34:40] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[05:35:00] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:37:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:37:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:37:03] *** Joins: wroathe (~wroathe@user/wroathe)
[05:37:37] *** Joins: vysn (~vysn@user/vysn)
[05:37:39] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[05:41:11] *** Quits: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com) ()
[05:41:23] *** Joins: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com)
[05:41:28] *** SethTisue__ is now known as SethTisue
[05:45:14] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[05:46:13] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:46:26] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:52:20] *** Joins: califax- (~califax@user/califx)
[05:54:45] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:54:45] *** califax- is now known as califax
[05:56:04] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:58:39] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[05:59:24] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[05:59:24] *** Quits: xff0x (~xff0x@port-92-193-141-218.dynamic.as20676.net) (Ping timeout: 256 seconds)
[05:59:52] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:00:28] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:00:52] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:fb75:bdf0:5af1:4493)
[06:02:21] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[06:03:51] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[06:06:01] <pfurla-matrix> at page 36, what is the difference between ⊨ and ⊢ ? (I am only skimming the article)
[06:06:39] *** Joins: nunggu (~q@user/nunggu)
[06:08:01] <EvanR> page 36 of what
[06:13:06] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[06:13:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:16:24] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[06:16:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:17:32] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[06:18:24] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[06:19:22] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[06:23:47] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[06:24:07] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 256 seconds)
[06:24:18] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 260 seconds)
[06:24:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[06:27:22] *** Quits: nehsou^ (~nehsou@128-092-164-034.biz.spectrum.com) (Remote host closed the connection)
[06:28:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Ping timeout: 252 seconds)
[06:29:21] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[06:30:20] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[06:30:21] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[06:30:41] *** Joins: chronon (~chronon@user/chronon)
[06:30:44] *** Joins: Sgeo (~Sgeo@user/sgeo)
[06:31:28] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:33:00] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[06:33:26] <pfurla-matrix> The paper above
[06:33:37] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:35:23] <EvanR> it only goes to 29
[06:39:51] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:39:51] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:39:51] *** finn_elija is now known as FinnElija
[06:40:58] <pfurla-matrix> oh, I mean printed page number
[06:41:17] <pfurla-matrix> it's the absolute page 6
[06:43:48] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:44:12] <EvanR> I dunno if it relates to page 31:6 but https://handwiki.org/wiki/Double_turnstile
[06:44:30] *** Joins: Guest3946 (~Guest39@98.42.121.105)
[06:45:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[06:45:42] <Sqaure> is there some trick to hide data type information behind a type class? I realize my example doesnt work but I feel it *could* work =D https://paste.tomsmeding.com/ORj3fboA 
[06:46:04] <Sqaure> i dont wanna return a M.Map so to speak. I want things to be hidden. 
[06:46:16] <Sqaure> it to be*
[06:47:04] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:47:44] <EvanR> since D and DC seem the same except one has (some?) types erased, that wiki pages distinction "semantic entailment vs syntactic entailment" is probably n/a
[06:47:59] <sm> kind of ridiculous that things like fromMaybe aren't in Prelude >:/
[06:48:18] <EvanR> there's a few things like that actually... forcing people to invent alternative preludes xD
[06:49:01] <pfurla-matrix> I am vaguely familiar with https://en.wikipedia.org/wiki/Logical_consequence#Proofs_and_models
[06:49:07] <EvanR> Sqaure, do you want to return an abstract interface to your type, in a record for example
[06:49:28] <EvanR> or a newtype hidden value that is only accessible within the module
[06:50:24] <Sqaure> EvanR, i want patRepo to be widely available and hide underlying data type.  
[06:50:43] <Sqaure> (many things in the module wont be exported)
[06:50:53] <ephemient> if you wrap it in a newtype and don't export the constructor, it will be hidden from other modules (without tricks)
[06:50:59] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[06:51:37] <EvanR> this typeclass looks kind of like a common anti-pattern when first learning about type classes
[06:51:45] <Sqaure> ah ok. Ill try that. Can this be the moment i realize the power of newtype! =D
[06:51:47] <EvanR> though, it might be possible to do it this way
[06:51:54] <EvanR> a newtype is simpler
[06:52:44] <pfurla-matrix> don't export what you don't want to be seen, if you setters and getters, write them and export then
[06:52:44] <pfurla-matrix> *them
[06:52:49] <pfurla-matrix> s/then/them/
[06:52:51] <Sqaure> EvanR, oh. Whats wrong with it? Id gladly hear. 
[06:54:24] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:54:59] <EvanR> well, I think it's not known the full extent of what you intend to do with all the variety of patient types
[06:55:40] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[06:56:35] <marquis_andras> hey guys, do you know if haskell-language-server can be configured to work with stack scripts? mine keeps giving errors about modules like 'Could not find Module Network.HTTP.Simple'
[06:57:03] <Sqaure> its just Key-Value map. Trying to anonymice it
[06:57:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:57:21] <ephemient> you don't need a class to do that
[06:57:31] <EvanR> well, are all the keys and values the same type?
[06:57:44] <ephemient> even if they're not all the same type
[06:58:06] <EvanR> if they're not, there's more questions to answer
[06:59:08] <ephemient> right, then we'll have to know more details… but even then, in most circumstances you don't want a class
[06:59:09] <Sqaure> i see the potential of newtype here. Maybe its enough. 
[06:59:09] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:59:11] <EvanR> in clojure they have an interface for key value maps that basically is just "lookup"
[06:59:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:59:18] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[06:59:20] <EvanR> but it doesn't really add much or have any laws
[06:59:38] <EvanR> but if you wanted to do that in haskell, it's as simple as exposing a function from keys to values
[06:59:45] <EvanR> instead of using a typeclass
[07:00:01] <marquis_andras> nvm guys. i've solved it. i just needed a hie.yaml file in the same directory as my stack script.
[07:00:28] <EvanR> more likely there are many more features required than that
[07:00:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[07:00:46] <ephemient> rubber ducking at its best, we didn't even have to do anything :)
[07:00:48] *** Joins: califax- (~califax@user/califx)
[07:01:16] *** Joins: dsrt^ (~dsrt@128-092-164-034.biz.spectrum.com)
[07:01:23] <marquis_andras> :)
[07:01:34] <Sqaure> my example is crap i see now. Doesnt illustrate my idea. Well ill play with newtype and see where it gets me
[07:01:39] *** Quits: Guest3946 (~Guest39@98.42.121.105) (Quit: Client closed)
[07:02:21] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[07:02:21] *** califax- is now known as califax
[07:03:47] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 256 seconds)
[07:03:48] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:04:58] <pfurla-matrix> <EvanR> "well, I think it's not known the..." <- oh, is patient types the type system of lazy languages? :)
[07:05:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[07:05:51] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:07:04] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[07:10:52] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[07:11:51] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:14:12] *** Quits: td_ (~td@94.134.91.76) (Ping timeout: 256 seconds)
[07:15:14] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[07:15:47] *** Joins: td_ (~td@muedsl-82-207-238-174.citykom.de)
[07:16:59] <Sqaure> To shorten the description of my probably trivial problem. I want to 1. expose repositories that are Map hidden behind an some coarser interface (newtype perfect). 2. All these repos should have a "find :: String -> Maybe v" method that will be different for each Key type. As Key-types constructors needs to be "private" only the repositories should be able to construct (atm atleast) Key values. 
[07:17:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:18:35] <EvanR> so each key goes to a particular value
[07:18:40] <EvanR> type
[07:19:19] <Sqaure> I can probably make that fly somehow but maybe there is some clean solution to it. All "newtype MyRepo k v = MyRepo { runRepo :: M.Map k v }" needs to implement that special find per k and v choices. 
[07:19:24] <EvanR> find :: Key a -> Maybe a
[07:19:25] <Sqaure> Yeah
[07:21:04] <EvanR> also maybe look at the latest in typed database "solutions"
[07:22:12] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 250 seconds)
[07:23:05] <Sqaure> Right, you mean Persistent Key type?
[07:25:35] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:26:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:6013:7539:4fef:cd22)
[07:26:43] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:26:58] <EvanR> String doesn't hold any type information about what it goes to
[07:26:59] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[07:28:22] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:28:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:28:55] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[07:29:30] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[07:32:20] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[07:32:54] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[07:34:57] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 256 seconds)
[07:36:12] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:36:48] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:37:22] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[07:39:12] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:39:26] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:42:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[07:44:18] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 250 seconds)
[07:44:40] *** Joins: img (~img@user/img)
[07:44:45] <Sqaure> EvanR, it would be used to construct the key "k" type. 
[07:45:00] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:45:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:46:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[07:49:41] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[07:50:35] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:52:24] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[07:53:04] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[07:55:00] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[07:55:25] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[07:56:14] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:58:16] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[08:00:08] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[08:01:55] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[08:02:08] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:08:22] *** Joins: mbuf (~Shakthi@171.61.247.107)
[08:08:25] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[08:09:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:09:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:09:57] <Sqaure> This is what i ended up with which compiles fine. https://paste.tomsmeding.com/aipUt3Ad
[08:11:10] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[08:12:00] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[08:12:18] <Sqaure> im a bit surprised that worked. I sorta found it worked by luck. Especially how the "m" argument could be used as a type function in the class function definitions.  
[08:12:30] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[08:12:56] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:12:56] <EvanR> there's kind inference
[08:13:02] <Sqaure> in GenRepoBase that is
[08:13:24] <EvanR> if you use the same m as a * and * -> *, it will not work
[08:13:40] <EvanR> unless it's polykinded, which is an extension
[08:14:06] <EvanR> PolyKinds
[08:14:48] <Sqaure> First i tried with "class Ord k => GenRepoBase (m::  k -> v -> *)  where" but that did not fly
[08:15:17] <EvanR> that's erroneous because k is a type not a kind
[08:16:03] <EvanR> m :: * -> * -> *
[08:16:21] <Sqaure> Well i was hoping i could express something like "a type function 'm' that take 'k' and 'v' as arguments".
[08:16:36] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 245 seconds)
[08:17:21] <EvanR> pass a k value and v value to the type constructor? xD
[08:17:25] *** Joins: ianon (~igloo@c-68-83-22-43.hsd1.nj.comcast.net)
[08:17:26] *** Quits: ianon (~igloo@c-68-83-22-43.hsd1.nj.comcast.net) (Client Quit)
[08:17:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:17:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:17:30] *** Joins: wroathe (~wroathe@user/wroathe)
[08:18:25] <EvanR> like in the sized vectors we were discussing earlier, Vector 4 Int, array of 4 Ints
[08:18:51] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[08:19:08] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:19:23] <EvanR> or perhaps more reasonably you mean to pass a type k and type v to m, which is what * -> * -> * means
[08:19:36] <Sqaure> yeah 
[08:20:04] <Sqaure> now it seems to have infered that but yeah. 
[08:20:18] <EvanR> yeah you can use :k in the repl to get the kind
[08:20:41] <Sqaure> thought i had to be more explicit about what m was. That it was assumed to have kind * 
[08:20:50] <EvanR> that would be annoying
[08:22:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:22:43] <EvanR> in another context :: k -> v -> * could make sense, but k and v would be kind variables for some kind not necessarily *
[08:22:52] <EvanR> which happens if you enable DataKinds
[08:24:39] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[08:24:51] <EvanR> e.g. k might be Nat or Symbol or one of your types lifted to the kind level
[08:25:05] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:25:16] <Axman6> Can anyone explain the semantics of the Choice instance for Fold from foldl? with right' :: Fold a b -> Fold (Either c a) (Either c b), does it accept Either a b and if it ever sees a Left c, it will return Left c?
[08:26:02] <EvanR> intuitively Left c would result in outputting Left c and no other effect
[08:26:51] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[08:26:51] <EvanR> like ArrowChoice?
[08:28:44] *** Joins: nunggu (~q@user/nunggu)
[08:29:55] *** Joins: Adnan (~Adnan@host-10-net-64-160-119.mobilinkinfinity.net.pk)
[08:30:37] <jackdk> instance Choice Fold where right' (Fold step begin done) = Fold (liftA2 step) (Right begin) (fmap done)
[08:30:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:30:49] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:31:42] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[08:31:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[08:31:45] *** allbery_b is now known as geekosaur
[08:33:19] <Axman6> just trying to difure out how to immplement it for me weird fold alternative
[08:33:23] <Axman6> figure*
[08:33:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:33:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:33:59] *** Joins: wroathe (~wroathe@user/wroathe)
[08:36:27] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[08:38:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:38:55] *** Joins: cynomys (~cynomys@user/cynomys)
[08:44:59] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[08:45:19] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:45:38] *** Joins: Guest3941 (~Guest39@98.42.121.105)
[08:46:42] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[08:47:43] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[08:48:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:48:16] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[08:50:28] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[08:51:26] *** Quits: Guest3941 (~Guest39@98.42.121.105) (Quit: Client closed)
[08:54:56] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[09:01:56] *** Joins: ethanN (~ethanN@d198-53-4-47.abhsia.telus.net)
[09:02:21] <ethanN> Hi all!
[09:02:36] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[09:03:34] <EvanR> 👋
[09:05:04] <ethanN> I'm very new to haskell, and i've been seeing `=>` and `->` used in function definitions. Is there a difference between the two? If so, when should I be using one over the other?
[09:05:45] <EvanR> :t sort
[09:05:46] <lambdabot> Ord a => [a] -> [a]
[09:07:08] *** Joins: cheater (~Username@user/cheater)
[09:07:09] <EvanR> a -> b is a function type, here it's preceded by a =>, which is just what separates the constraints like Ord a from the rest of the type
[09:07:19] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[09:07:32] <EvanR> constraints => rest of your type
[09:07:42] <EvanR> if you don't have any constraints, you don't need a => at all
[09:07:47] <EvanR> :t ord
[09:07:48] <lambdabot> Char -> Int
[09:08:12] *** Quits: glguy (x@libera/staff/glguy) (*.net *.split)
[09:08:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (*.net *.split)
[09:08:12] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (*.net *.split)
[09:08:12] *** Quits: td_ (~td@muedsl-82-207-238-174.citykom.de) (*.net *.split)
[09:08:12] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (*.net *.split)
[09:08:12] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (*.net *.split)
[09:08:12] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[09:08:12] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (*.net *.split)
[09:08:12] *** Quits: hyiltiz (~quassel@31.220.5.250) (*.net *.split)
[09:08:12] *** Quits: quintasan (~quassel@quintasan.pl) (*.net *.split)
[09:08:12] *** Quits: APic (~apic@apic.name) (*.net *.split)
[09:08:12] *** Quits: cigsender (~cigsender@74.124.58.162) (*.net *.split)
[09:08:12] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (*.net *.split)
[09:08:12] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[09:08:12] *** Quits: aria (sid380617@lymington.irccloud.com) (*.net *.split)
[09:08:12] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[09:08:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[09:08:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:08:12] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (*.net *.split)
[09:08:12] *** Quits: lep (~lep@94.31.89.203) (*.net *.split)
[09:08:12] *** Quits: AlexZenon (~alzenon@178.34.151.37) (*.net *.split)
[09:08:12] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[09:08:12] *** Quits: janus (janus@anubis.0x90.dk) (*.net *.split)
[09:08:12] *** Quits: Guest6735 (~sam@c-93bfe655.020-348-73746f1.bbcust.telenor.se) (*.net *.split)
[09:08:12] *** Quits: russruss (~russruss@my.russellmcc.com) (*.net *.split)
[09:08:12] *** Quits: flipchan (~filip@user/flipchan) (*.net *.split)
[09:08:12] *** Quits: tv (~tv@user/tv) (*.net *.split)
[09:08:12] *** Quits: gawen_ (~gawen@user/gawen) (*.net *.split)
[09:08:12] *** Quits: robertm (~robertm@lattice.rojoma.com) (*.net *.split)
[09:08:12] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (*.net *.split)
[09:08:12] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[09:08:12] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[09:08:12] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[09:08:12] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[09:08:12] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[09:08:12] *** Quits: marquis_andras (~marquis_a@124.170.163.166) (*.net *.split)
[09:08:12] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (*.net *.split)
[09:08:12] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[09:08:13] *** Quits: mmalter (~mmalter@88.126.10.237) (*.net *.split)
[09:08:13] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[09:08:13] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[09:08:13] *** Quits: stvc (~stvc@192.241.166.39) (*.net *.split)
[09:08:13] *** Quits: cls (~cls@chalk.lubutu.com) (*.net *.split)
[09:08:13] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:08:13] *** Quits: skewerr (spoonm@inaba.spoonm.org) (*.net *.split)
[09:08:13] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[09:08:13] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[09:08:13] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[09:08:13] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (*.net *.split)
[09:08:13] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[09:08:13] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (*.net *.split)
[09:08:13] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[09:08:13] *** Quits: kojo5551 (~kojo5551@fep.grid.pub.ro) (*.net *.split)
[09:08:13] *** Quits: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[09:08:13] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[09:08:13] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[09:08:13] *** Quits: ishutin (~ishutin@87-97-82-177.pool.digikabel.hu) (*.net *.split)
[09:08:13] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[09:08:13] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[09:08:13] *** Quits: canta (~canta@user/canta) (*.net *.split)
[09:08:13] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[09:08:13] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[09:08:13] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[09:08:13] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[09:08:13] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[09:08:13] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[09:08:13] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (*.net *.split)
[09:08:13] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[09:08:13] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[09:08:13] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[09:08:13] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[09:08:13] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[09:08:13] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[09:08:13] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[09:08:13] *** Quits: jtmar (~james@jtmar.me) (*.net *.split)
[09:08:13] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[09:08:13] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (*.net *.split)
[09:08:13] *** Quits: cynomys (~cynomys@user/cynomys) (*.net *.split)
[09:08:13] *** Quits: lavaman (~lavaman@98.38.249.169) (*.net *.split)
[09:08:13] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (*.net *.split)
[09:08:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (*.net *.split)
[09:08:13] *** Quits: Topsi (~Tobias@dyndsl-095-033-027-162.ewe-ip-backbone.de) (*.net *.split)
[09:08:13] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[09:08:14] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (*.net *.split)
[09:08:14] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (*.net *.split)
[09:08:14] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (*.net *.split)
[09:08:14] *** Quits: ubert (~Thunderbi@141.98.252.252) (*.net *.split)
[09:08:14] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (*.net *.split)
[09:08:14] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (*.net *.split)
[09:08:14] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (*.net *.split)
[09:08:14] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (*.net *.split)
[09:08:14] *** Quits: hays (rootvegeta@fsf/member/hays) (*.net *.split)
[09:08:14] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-8c82-3804-1c4b-e932.res6.spectrum.com) (*.net *.split)
[09:08:14] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[09:08:14] *** Quits: newhoggy (sid198874@id-198874.helmsley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: AlexNoo (~AlexNoo@178.34.151.37) (*.net *.split)
[09:08:14] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: Jon (jon@dow.land) (*.net *.split)
[09:08:14] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[09:08:14] *** Quits: b20n (sid115913@id-115913.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: wallymathieu (sid533252@id-533252.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (*.net *.split)
[09:08:14] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (*.net *.split)
[09:08:14] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (*.net *.split)
[09:08:14] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (*.net *.split)
[09:08:14] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[09:08:14] *** Quits: gentauro (~gentauro@user/gentauro) (*.net *.split)
[09:08:14] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[09:08:14] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[09:08:14] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:08:14] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[09:08:14] *** Quits: dolio (~dolio@130.44.130.54) (*.net *.split)
[09:08:14] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[09:08:14] *** Quits: bjobjo (~bjobjo@user/bjobjo) (*.net *.split)
[09:08:14] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (*.net *.split)
[09:08:14] *** Quits: Unhammer (~Unhammer@user/unhammer) (*.net *.split)
[09:08:14] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: mcfilib (sid302703@user/mcfilib) (*.net *.split)
[09:08:14] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[09:08:14] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (*.net *.split)
[09:08:15] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[09:08:15] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[09:08:15] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[09:08:15] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[09:08:15] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (*.net *.split)
[09:08:15] *** Quits: haasn (~nand@haasn.dev) (*.net *.split)
[09:08:15] *** Quits: liskin (~liskin@xmonad/liskin) (*.net *.split)
[09:08:15] *** Quits: _\_ (~o@user/offon) (*.net *.split)
[09:08:15] *** Quits: raghavgururajan (ea769b8000@user/raghavgururajan) (*.net *.split)
[09:08:15] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[09:08:15] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[09:08:15] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[09:08:15] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (*.net *.split)
[09:08:15] *** Quits: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd) (*.net *.split)
[09:08:15] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (*.net *.split)
[09:08:15] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[09:08:15] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[09:08:15] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[09:08:15] *** Quits: amir (sid22336@user/amir) (*.net *.split)
[09:08:15] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[09:08:15] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[09:08:15] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[09:08:15] *** Quits: Andrew (andrew@andrewyu.org) (*.net *.split)
[09:08:15] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[09:08:15] *** Quits: defanor (~defanor@tart.uberspace.net) (*.net *.split)
[09:08:15] *** Quits: domcornloan (~mike@user/feetwind) (*.net *.split)
[09:08:15] *** Quits: |beowulf| (1000@sourcemage/mage/beowulf) (*.net *.split)
[09:08:15] *** Quits: bah_ (~bah@l1.tel) (*.net *.split)
[09:08:15] *** Quits: Arsen (arsen@managarm/dev/Arsen) (*.net *.split)
[09:08:15] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (*.net *.split)
[09:08:15] *** Quits: cpape`` (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[09:08:15] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: tnks (sid412124@id-412124.helmsley.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[09:08:16] *** Quits: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[09:08:16] *** Quits: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net) (*.net *.split)
[09:08:16] *** Quits: wrengr (~wrengr@99.34.197.35.bc.googleusercontent.com) (*.net *.split)
[09:08:16] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[09:08:16] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (*.net *.split)
[09:08:16] *** Quits: nshepperd2 (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (*.net *.split)
[09:08:16] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[09:08:16] *** Quits: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp) (*.net *.split)
[09:08:16] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[09:08:16] *** Quits: kilolympus (~kilolympu@31.205.200.235) (*.net *.split)
[09:08:16] *** Quits: hexagoxel (~hexagoxel@hexagoxel.de) (*.net *.split)
[09:08:16] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[09:08:16] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[09:08:16] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (*.net *.split)
[09:08:16] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[09:08:16] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[09:08:16] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (*.net *.split)
[09:08:16] *** Quits: statusbot1 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (*.net *.split)
[09:08:16] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (*.net *.split)
[09:08:16] *** Quits: OscarH (~OscarH@90.201.86.195) (*.net *.split)
[09:08:16] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[09:08:16] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[09:08:16] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (*.net *.split)
[09:08:16] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (*.net *.split)
[09:08:16] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (*.net *.split)
[09:08:16] *** Quits: iteratee (~kyle@162.218.222.107) (*.net *.split)
[09:08:16] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[09:08:16] *** Quits: ridcully_ (~ridcully@p508acc81.dip0.t-ipconnect.de) (*.net *.split)
[09:08:16] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[09:08:16] *** Quits: martin02 (~silas@141.84.69.76) (*.net *.split)
[09:08:16] *** Quits: incertia (~incertia@207.98.163.88) (*.net *.split)
[09:08:16] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (*.net *.split)
[09:08:17] *** Quits: sherlock_95 (~sherlock_@static.131.42.161.5.clients.your-server.de) (*.net *.split)
[09:08:17] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[09:08:17] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[09:08:17] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (*.net *.split)
[09:08:17] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[09:08:17] *** Quits: caubert (~caubert@136.244.111.235) (*.net *.split)
[09:08:17] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (*.net *.split)
[09:08:17] *** Quits: monochrom (trebla@216.138.220.146) (*.net *.split)
[09:08:17] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[09:08:17] *** Quits: Axman6 (~Axman6@user/axman6) (*.net *.split)
[09:08:17] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: saolsen (sid26430@id-26430.lymington.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: enemeth79 (sid309041@id-309041.lymington.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[09:08:17] *** Quits: sclv (sid39734@haskell/developer/sclv) (*.net *.split)
[09:08:17] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: dmj` (sid72307@id-72307.hampstead.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: gaze___ (sid387101@id-387101.helmsley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: sm[i] (~user@plaintextaccounting/sm) (*.net *.split)
[09:08:45] <EvanR> :t chr
[09:08:46] <lambdabot> Int -> Char
[09:08:57] <EvanR> no special constraints, no =>
[09:09:08] <EvanR> ethanN, oof, did you get that? Looks like we got hit with a netsplit
[09:09:54] *** Quits: ethanN (~ethanN@d198-53-4-47.abhsia.telus.net) (Read error: Connection reset by peer)
[09:10:03] *** Joins: ethanN (~ethanN@d198-53-4-47.abhsia.telus.net)
[09:10:58] *** Quits: ethanN (~ethanN@d198-53-4-47.abhsia.telus.net) (Client Quit)
[09:11:51] *** Quits: Adnan (~Adnan@host-10-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 256 seconds)
[09:11:51] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[09:12:59] *** Quits: mbuf (~Shakthi@171.61.247.107) (Ping timeout: 256 seconds)
[09:14:47] *** Joins: fef (~thedawn@user/thedawn)
[09:15:27] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[09:16:25] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:16:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[09:21:15] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[09:21:15] *** Joins: nshepperd2 (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[09:21:15] *** Joins: landonf (landonf@mac68k.info)
[09:21:15] *** Joins: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp)
[09:21:15] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[09:21:15] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[09:21:15] *** Joins: hexagoxel (~hexagoxel@hexagoxel.de)
[09:21:15] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[09:21:15] *** Joins: byorgey (~byorgey@155.138.238.211)
[09:21:15] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[09:21:15] *** Joins: cyphase (~cyphase@user/cyphase)
[09:21:15] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[09:21:15] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[09:21:15] *** Joins: statusbot1 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[09:21:15] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[09:21:15] *** Joins: OscarH (~OscarH@90.201.86.195)
[09:21:15] *** Joins: niko (~niko@libera/staff/niko)
[09:21:15] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[09:21:15] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[09:21:15] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[09:21:15] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[09:21:15] *** Joins: iteratee (~kyle@162.218.222.107)
[09:21:15] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[09:21:15] *** Joins: ridcully_ (~ridcully@p508acc81.dip0.t-ipconnect.de)
[09:21:15] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[09:21:15] *** Joins: sherlock_95 (~sherlock_@static.131.42.161.5.clients.your-server.de)
[09:21:15] *** Joins: martin02 (~silas@141.84.69.76)
[09:21:15] *** Joins: incertia (~incertia@207.98.163.88)
[09:21:15] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[09:21:15] *** Joins: noctux (~noctux@user/noctux)
[09:21:15] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[09:21:15] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[09:21:15] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[09:21:15] *** Joins: caubert (~caubert@136.244.111.235)
[09:21:15] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[09:21:15] *** Joins: monochrom (trebla@216.138.220.146)
[09:21:15] *** Joins: Unode (~Unode@194.94.44.220)
[09:22:44] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[09:22:44] *** Joins: Topsi1 (~Tobias@dyndsl-095-033-017-221.ewe-ip-backbone.de)
[09:22:44] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[09:22:44] *** Joins: Erutuon (~Erutuon@23-88-131-243.fttp.usinternet.com)
[09:22:44] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[09:22:44] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[09:22:44] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[09:22:44] *** Joins: mbuf (~Shakthi@171.61.247.107)
[09:22:44] *** Joins: cynomys (~cynomys@user/cynomys)
[09:22:44] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:22:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:22:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:22:44] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[09:22:44] *** Joins: Cheery (~cheery@7-239-179-185.static.tentacle.fi)
[09:22:44] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[09:22:44] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[09:22:44] *** Joins: ubert (~Thunderbi@141.98.252.252)
[09:22:44] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[09:22:44] *** Joins: jakalx (~jakalx@base.jakalx.net)
[09:22:44] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[09:22:44] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[09:22:44] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[09:22:44] *** Joins: hays (rootvegeta@fsf/member/hays)
[09:22:44] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-8c82-3804-1c4b-e932.res6.spectrum.com)
[09:22:44] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[09:22:44] *** Joins: obviyus (sid415299@user/obviyus)
[09:22:44] *** Joins: newhoggy (sid198874@id-198874.helmsley.irccloud.com)
[09:22:44] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[09:22:44] *** Joins: AlexNoo (~AlexNoo@178.34.151.37)
[09:22:44] *** Joins: Unhammer (~Unhammer@user/unhammer)
[09:22:44] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[09:22:44] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[09:22:44] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[09:22:44] *** Joins: Jon (jon@dow.land)
[09:22:44] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[09:22:44] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[09:22:44] *** Joins: wallymathieu (sid533252@id-533252.uxbridge.irccloud.com)
[09:22:44] *** Joins: b20n (sid115913@id-115913.uxbridge.irccloud.com)
[09:22:44] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[09:22:44] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[09:22:44] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[09:22:44] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf)
[09:22:44] *** Joins: Andrew (andrew@andrewyu.org)
[09:22:44] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[09:22:44] *** Joins: gentauro (~gentauro@user/gentauro)
[09:22:44] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[09:22:44] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[09:22:44] *** Joins: edr (~edr@user/edr)
[09:22:44] *** Joins: nonzen (~nonzen@user/nonzen)
[09:22:44] *** Joins: dolio (~dolio@130.44.130.54)
[09:22:44] *** Joins: int-e (~noone@int-e.eu)
[09:22:44] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[09:22:44] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[09:22:44] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:22:44] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[09:22:44] *** Joins: edmundnoble (sid229620@id-229620.helmsley.irccloud.com)
[09:22:44] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[09:22:44] *** Joins: mcfilib (sid302703@user/mcfilib)
[09:22:44] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[09:22:44] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[09:22:44] *** Joins: unyu (~pyon@user/pyon)
[09:22:44] *** Joins: tafa (~tafa@user/tafa)
[09:22:44] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:22:44] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[09:22:44] *** Joins: haasn (~nand@haasn.dev)
[09:22:44] *** Joins: liskin (~liskin@xmonad/liskin)
[09:22:44] *** Joins: _\_ (~o@user/offon)
[09:22:44] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[09:22:44] *** Joins: sm2n (ae95cb1267@user/sm2n)
[09:22:44] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[09:22:44] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[09:22:44] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[09:22:44] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[09:22:44] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[09:22:44] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[09:22:44] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[09:22:44] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[09:22:44] *** Joins: amir (sid22336@user/amir)
[09:22:44] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[09:22:44] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[09:22:44] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[09:22:44] *** Joins: lewisje (~lewisje@72.49.207.113)
[09:22:44] *** Joins: drewolson (~drewolson@user/drewolson)
[09:22:44] *** Joins: defanor (~defanor@tart.uberspace.net)
[09:22:44] *** Joins: domcornloan (~mike@user/feetwind)
[09:22:44] *** Joins: |beowulf| (1000@sourcemage/mage/beowulf)
[09:22:44] *** Joins: bah_ (~bah@l1.tel)
[09:22:44] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[09:22:44] *** Joins: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae)
[09:22:44] *** Joins: cpape`` (~user@2a01:4f9:c010:632d::1)
[09:22:44] *** Joins: tnks (sid412124@id-412124.helmsley.irccloud.com)
[09:22:44] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[09:22:44] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[09:22:44] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[09:22:44] *** Joins: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[09:22:44] *** Joins: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[09:22:44] *** Joins: wrengr (~wrengr@99.34.197.35.bc.googleusercontent.com)
[09:22:44] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[09:23:34] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:23:34] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[09:23:34] *** Joins: td_ (~td@muedsl-82-207-238-174.citykom.de)
[09:23:34] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[09:23:34] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[09:23:34] *** Joins: pavonia (~user@user/siracusa)
[09:23:34] *** Joins: janus (janus@anubis.0x90.dk)
[09:23:34] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[09:23:34] *** Joins: hyiltiz (~quassel@31.220.5.250)
[09:23:34] *** Joins: quintasan (~quassel@quintasan.pl)
[09:23:34] *** Joins: APic (~apic@apic.name)
[09:23:34] *** Joins: cigsender (~cigsender@74.124.58.162)
[09:23:34] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:23:34] *** Joins: Hafydd (~Hafydd@user/hafydd)
[09:23:34] *** Joins: aria (sid380617@lymington.irccloud.com)
[09:23:34] *** Joins: oats (~thomas@user/oats)
[09:23:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:23:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:23:34] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[09:23:34] *** Joins: lep (~lep@94.31.89.203)
[09:23:34] *** Joins: AlexZenon (~alzenon@178.34.151.37)
[09:23:34] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[09:23:34] *** Joins: Guest6735 (~sam@c-93bfe655.020-348-73746f1.bbcust.telenor.se)
[09:23:34] *** Joins: russruss (~russruss@my.russellmcc.com)
[09:23:34] *** Joins: flipchan (~filip@user/flipchan)
[09:23:34] *** Joins: tv (~tv@user/tv)
[09:23:34] *** Joins: gawen_ (~gawen@user/gawen)
[09:23:34] *** Joins: robertm (~robertm@lattice.rojoma.com)
[09:23:34] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[09:23:34] *** Joins: swistak (~swistak@185.21.216.141)
[09:23:34] *** Joins: foul_owl (~kerry@94.140.8.107)
[09:23:34] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[09:23:34] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[09:23:34] *** Joins: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[09:23:34] *** Joins: marquis_andras (~marquis_a@124.170.163.166)
[09:23:34] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[09:23:34] *** Joins: justGhost (~justache@user/justache)
[09:23:34] *** Joins: mmalter (~mmalter@88.126.10.237)
[09:23:34] *** Joins: mcglk (~mcglk@131.191.49.120)
[09:23:34] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[09:23:34] *** Joins: stvc (~stvc@192.241.166.39)
[09:23:34] *** Joins: cls (~cls@chalk.lubutu.com)
[09:23:34] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[09:23:34] *** Joins: skewerr (spoonm@inaba.spoonm.org)
[09:23:34] *** Joins: drewr (~drew@user/drewr)
[09:23:34] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[09:23:34] *** Joins: haskl (~haskl@user/haskl)
[09:23:34] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[09:23:34] *** Joins: xstill- (xstill@fimu/xstill)
[09:23:34] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[09:23:34] *** Joins: amk (~amk@109.255.169.126)
[09:23:34] *** Joins: kojo5551 (~kojo5551@fep.grid.pub.ro)
[09:23:34] *** Joins: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[09:23:34] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[09:23:34] *** Joins: kmein (~weechat@user/kmein)
[09:23:34] *** Joins: ishutin (~ishutin@87-97-82-177.pool.digikabel.hu)
[09:23:34] *** Joins: c_wraith (~c_wraith@adjoint.us)
[09:23:34] *** Joins: statusfailed (~statusfai@statusfailed.com)
[09:23:34] *** Joins: canta (~canta@user/canta)
[09:23:34] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[09:23:34] *** Joins: juri_ (~juri@178.63.35.222)
[09:23:34] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[09:23:34] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[09:23:34] *** Joins: meejah (~meejah@rutas.meejah.ca)
[09:23:34] *** Joins: andjjj23_ (~irc@107.170.228.47)
[09:23:34] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[09:23:34] *** Joins: n3t (n3t@user/n3t)
[09:23:34] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[09:23:34] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:23:34] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[09:23:34] *** Joins: carter (sid14827@helmsley.irccloud.com)
[09:23:34] *** Joins: TMA (~tma@twin.jikos.cz)
[09:23:34] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[09:23:34] *** Joins: jtmar (~james@jtmar.me)
[09:23:34] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[09:24:07] *** Joins: Axman6 (~Axman6@user/axman6)
[09:24:51] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[09:24:51] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[09:24:51] *** Joins: saolsen (sid26430@id-26430.lymington.irccloud.com)
[09:24:51] *** Joins: tapas (sid467876@id-467876.ilkley.irccloud.com)
[09:24:51] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[09:24:51] *** Joins: enemeth79 (sid309041@id-309041.lymington.irccloud.com)
[09:24:51] *** Joins: bjs (sid190364@user/bjs)
[09:24:51] *** Joins: sclv (sid39734@haskell/developer/sclv)
[09:24:51] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[09:24:51] *** Joins: dmj` (sid72307@id-72307.hampstead.irccloud.com)
[09:24:51] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[09:24:51] *** Joins: gaze___ (sid387101@id-387101.helmsley.irccloud.com)
[09:24:51] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[09:25:15] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:27:26] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[09:27:58] *** Joins: glguy (x@libera/staff/glguy)
[09:29:06] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[09:30:38] *** Joins: Sgeo (~Sgeo@user/sgeo)
[09:31:54] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[09:32:58] *** Joins: sm[i] (~user@plaintextaccounting/sm)
[09:35:53] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[09:42:36] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[09:42:51] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:43:28] *** Quits: Erutuon (~Erutuon@23-88-131-243.fttp.usinternet.com) (Ping timeout: 250 seconds)
[09:45:17] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[09:45:50] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:57:12] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[09:58:21] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Quit: Leaving)
[09:59:26] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[10:09:02] *** Quits: Topsi1 (~Tobias@dyndsl-095-033-017-221.ewe-ip-backbone.de) (Ping timeout: 250 seconds)
[10:09:12] *** Joins: notzmv (~zmv@user/notzmv)
[10:09:20] *** Joins: fef (~thedawn@user/thedawn)
[10:10:39] *** Joins: cheater (~Username@user/cheater)
[10:13:12] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:13:39] *** Joins: sayola (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de)
[10:17:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:17:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:19:44] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[10:21:20] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:26:56] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-8c82-3804-1c4b-e932.res6.spectrum.com) (Remote host closed the connection)
[10:27:20] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-17cd-ded9-9e96-aaa1.res6.spectrum.com)
[10:27:29] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Remote host closed the connection)
[10:27:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[10:27:48] *** Joins: Adnan (~Adnan@host-10-net-64-160-119.mobilinkinfinity.net.pk)
[10:30:17] *** Quits: ishutin (~ishutin@87-97-82-177.pool.digikabel.hu) (Read error: Connection reset by peer)
[10:32:38] *** Joins: thevishy (~Nishant@2405:201:f005:c007:3c07:8d1a:dd0:be31)
[10:34:24] *** Joins: ishutin (~ishutin@80-95-86-56.pool.digikabel.hu)
[10:34:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:34:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:34:47] *** Joins: wroathe (~wroathe@user/wroathe)
[10:36:46] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (Ping timeout: 250 seconds)
[10:37:42] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Ping timeout: 260 seconds)
[10:39:31] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[10:39:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:39:47] *** Joins: cynomys (~cynomys@user/cynomys)
[10:39:56] *** Quits: Adnan (~Adnan@host-10-net-64-160-119.mobilinkinfinity.net.pk) (Quit: Quit)
[10:40:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:40:14] *** Joins: Adnan (~Adnan@host-10-net-64-160-119.mobilinkinfinity.net.pk)
[10:40:18] *** Quits: Adnan (~Adnan@host-10-net-64-160-119.mobilinkinfinity.net.pk) (Client Quit)
[10:41:19] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[10:41:49] *** Joins: adnaahm (~adnaahm@host-10-net-64-160-119.mobilinkinfinity.net.pk)
[10:44:54] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[10:45:29] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[10:45:37] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: farewell)
[10:45:38] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[10:49:46] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 250 seconds)
[10:51:48] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[10:52:17] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[10:54:17] *** Joins: nunggu (~q@user/nunggu)
[10:55:46] *** Quits: juhp (~juhp@bb121-6-118-149.singnet.com.sg) (Ping timeout: 245 seconds)
[10:56:31] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[10:56:42] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 250 seconds)
[10:58:52] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 250 seconds)
[10:59:09] *** Joins: cynomys (~cynomys@user/cynomys)
[10:59:31] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:00:15] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[11:03:31] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[11:05:34] *** Joins: MajorBiscuit (~MajorBisc@c-001-021-032.client.tudelft.eduvpn.nl)
[11:06:42] *** Joins: vglfr (~vglfr@88.155.15.0)
[11:07:29] *** Joins: fendor (~fendor@91.141.70.82.wireless.dyn.drei.com)
[11:07:51] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[11:10:03] *** Joins: michalz (~michalz@185.246.204.93)
[11:12:53] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[11:19:13] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:21:17] *** Joins: neurocyte0917090 (~neurocyte@IP-212232083107.dynamic.medianet-world.de)
[11:21:17] *** Quits: neurocyte0917090 (~neurocyte@IP-212232083107.dynamic.medianet-world.de) (Changing host)
[11:21:17] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[11:21:35] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:22:50] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[11:25:59] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[11:27:58] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[11:28:28] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:28:48] *** Joins: monochrom (trebla@216.138.220.146)
[11:31:22] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[11:32:36] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[11:33:39] *** Joins: nunggu (~q@user/nunggu)
[11:34:09] *** Joins: Erutuon (~Erutuon@user/erutuon)
[11:35:54] *** Joins: chele (~chele@user/chele)
[11:35:54] *** Quits: vglfr (~vglfr@88.155.15.0) (Read error: Connection reset by peer)
[11:37:00] *** Joins: vglfr (~vglfr@88.155.15.0)
[11:39:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[11:41:56] *** Joins: coot (~coot@213.134.190.95)
[11:43:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:45:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:46:33] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:49:10] *** Joins: cfricke (~cfricke@user/cfricke)
[11:49:36] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[11:49:56] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:3481:56ab:6180:50a5)
[11:50:00] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[11:50:28] *** Joins: fef (~thedawn@user/thedawn)
[11:51:47] *** Joins: neurocyte0917090 (~neurocyte@IP-212232083107.dynamic.medianet-world.de)
[11:51:47] *** Quits: neurocyte0917090 (~neurocyte@IP-212232083107.dynamic.medianet-world.de) (Changing host)
[11:51:47] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[11:54:49] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Quit: ZNC 1.8.2 - https://znc.in)
[11:55:06] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[11:55:24] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:00:09] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[12:01:33] *** Joins: alp (~alp@user/alp)
[12:05:02] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:05:15] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[12:06:07] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[12:10:21] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[12:11:37] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:40a0:b50a:e8ed:d1eb)
[12:11:41] *** Parts: Inst (~delicacie@2601:6c4:4080:3f80:40a0:b50a:e8ed:d1eb) (Leaving)
[12:14:09] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:14:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:15:47] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994537358816310c1cf27.dip0.t-ipconnect.de)
[12:16:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:18:07] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:18:07] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[12:19:08] *** Joins: juhp (~juhp@128.106.188.82)
[12:27:10] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:29:01] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[12:29:30] *** Joins: xkuru (~xkuru@user/xkuru)
[12:30:58] *** Joins: nunggu (~q@user/nunggu)
[12:32:07] *** 068AAJYTL is now known as WhateverRabbit
[12:34:41] *** Joins: d0ku (~d0ku@178.43.19.180.ipv4.supernova.orange.pl)
[12:36:59] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[12:37:07] *** Joins: Guest72 (~Guest72@104.222.23.3)
[12:37:40] *** Joins: jespada (~jespada@87.74.36.188)
[12:37:43] *** Quits: Guest72 (~Guest72@104.222.23.3) (Client Quit)
[12:39:23] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[12:39:39] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[12:40:21] *** Joins: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[12:41:48] *** Joins: dcoutts (~duncan@71.78.6.51.dyn.plus.net)
[12:41:48] *** Quits: Guest6735 (~sam@c-93bfe655.020-348-73746f1.bbcust.telenor.se) (Read error: Connection reset by peer)
[12:41:59] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[12:47:11] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[12:47:21] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:47:40] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:51:03] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[12:52:01] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[12:55:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:55:41] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[12:56:59] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[12:57:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:01:41] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[13:02:04] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:40a0:b50a:e8ed:d1eb)
[13:02:06] <Inst> sorry
[13:02:20] <Inst> actually, forget it, it's a non-issue
[13:03:08] <Inst> (GHCI can output history, but it's not ergonomic. There's no easy way to do your coding in GHCI if you choose to do so and then rebuild it into a .hs file.)
[13:03:25] <Inst> (asked already on FP discord, but I was wondering if #haskell had a different solution)
[13:04:19] *** Joins: max22- (~maxime@pop.92-184-107-195.mobile.abo.orange.fr)
[13:09:12] *** Joins: RFV (~Thunderbi@155.red-88-5-242.dynamicip.rima-tde.net)
[13:09:17] *** Quits: max22- (~maxime@pop.92-184-107-195.mobile.abo.orange.fr) (Ping timeout: 256 seconds)
[13:09:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:11:12] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[13:11:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:12:50] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[13:18:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:18:50] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:21:51] <Axman6> Inst: you just write in the .hs file and :r(eload) it
[13:29:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:98c4:8d20:2891:a8a5)
[13:31:09] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:fb75:bdf0:5af1:4493) (Ping timeout: 250 seconds)
[13:32:03] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:fd9:1a3:223d:36f8)
[13:32:19] <Inst> i mean that's what i do
[13:32:21] *** Quits: Unode (~Unode@194.94.44.220) (Quit: Not that cable)
[13:32:29] <Inst> ghci only gets used for testing
[13:32:32] *** Quits: xdej (~xdej@quatramaran.salle-s.org) (Ping timeout: 240 seconds)
[13:32:40] *** Joins: xdej (~xdej@quatramaran.salle-s.org)
[13:33:02] *** Joins: Unode (~Unode@194.94.44.220)
[13:33:23] <Inst> also, curious, there's no default function for multiple comparisons, right?
[13:33:57] *** Quits: martin02 (~silas@141.84.69.76) (Ping timeout: 240 seconds)
[13:34:07] <Inst> ex: c == 2 || 3, which is an incorrect use of || operator
[13:34:18] <Inst> but means that I compare c to 2 and 3 at the same time
[13:34:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:98c4:8d20:2891:a8a5) (Ping timeout: 260 seconds)
[13:36:05] *** Joins: CHUD (~CHUD@edu7AAA.kent.ac.uk)
[13:37:26] <tomsmeding> Inst: c `elem` [2, 3] ?
[13:37:34] <Inst> thanks
[13:37:43] <tomsmeding> but no, not really more general
[13:38:51] <Inst> but isn't there a performance penalty if i use elem and lists?
[13:39:01] <tomsmeding> you can cobble things together using monoids -- you can see (a -> Bool) as a monoid using f <> g = \x -> f x || g x -- but while you can get some generality with that, you don't really buy convenience, which I think is what you were after
[13:39:31] <tomsmeding> hopefully 'elem' is small enough to be inlined, in which case the recursion over the list will probably be unfolded at compile time
[13:39:42] <tomsmeding> resulting in precisely c == 2 || c == 3
[13:40:20] <tomsmeding> so yes, a priori there is a small performance penalty, but I have good hopes for optimisation (but always benchmark if it really matters)
[13:40:53] <Inst> it's just theoretical, someone is busy telling me "we have or patterns in ocaml!"
[13:41:15] <tomsmeding> we don't in haskell
[13:41:32] <Inst> given that Haskell is a kitchen sink language, this is somewhat disappointing
[13:41:34] <tomsmeding> because nobody found it important enough to build syntax for it into the compiler :p
[13:41:39] <tomsmeding> write a language proposal!
[13:42:12] <Inst> i'm not a programmer :(
[13:42:13] <Inst> back to work
[13:42:39] <Inst> i'm such a script kiddie i like languages purely on the elegance and simplicity of the syntax
[13:42:45] <Inst> only thing that really draws me to Haskell is the syntax
[13:43:10] *** Joins: kuribas (~user@ptr-25vy0i85c22k4hh4u57.18120a2.ip6.access.telenet.be)
[13:43:21] <tomsmeding> Inst: https://gitlab.haskell.org/ghc/ghc/-/issues/3919
[13:43:52] <lortabac> there was a GHC proposal to introduce or-patterns, I don't know what happened to it
[13:44:15] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[13:44:25] <tomsmeding> see also https://github.com/ghc-proposals/ghc-proposals/pull/43
[13:45:00] <tomsmeding> i.e. there is interest but noone has stepped up to implement it, it seems
[13:45:30] <lortabac> tomsmeding: yes, that's the proposal I was thinking of
[13:46:55] *** Joins: martin02 (~silas@141.84.69.76)
[13:47:15] <Inst> it honestly doesn't need this
[13:47:18] <lortabac> to be honest I think GHC is already complex enough, and or-patterns add very little to the language
[13:47:21] <Inst> it just needs an addition to Eq typeclass
[13:48:32] <Inst> define |= or some other operator (i forget if | is reserved, let me check haskell report) to check recursively for equality in an argument of (a,b,c)
[13:49:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:49:22] <Inst> or just an elem operator
[13:51:08] <Inst> playing around with Eq typeclass is probably easiest way to do this
[13:51:52] <lortabac> what's the advantage over just using elem?
[13:51:55] <c_wraith> the worst possible solution is a QuasiQuoter, right?
[13:53:30] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[13:53:34] <c_wraith> it's likely elem won't get inlined, and you'll end up actually chasing (:) constructors through memory every time you call a function
[13:53:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[13:53:59] <c_wraith> Which isn't the worst thing in the world, but it is a performance hit that sometimes is important to avoid
[13:54:25] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[13:59:55] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:01:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:01:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:01:04] *** Joins: wroathe (~wroathe@user/wroathe)
[14:06:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:08:19] *** Joins: vysn (~vysn@user/vysn)
[14:12:30] *** Joins: michalz2 (~michalz2@185.246.204.65)
[14:17:07] <Inst> tbh just adding an elem operator makes sense
[14:17:23] <Inst> it's used infix much of the time
[14:18:47] <teddyc> c ∈ [2,3]
[14:19:30] *** Joins: evocatus (~evocatus@109.229.144.249)
[14:20:07] *** Quits: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[14:22:01] *** Quits: alp (~alp@user/alp) (Ping timeout: 245 seconds)
[14:23:10] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:24:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:24:28] *** Lord_of_Life_ is now known as Lord_of_Life
[14:31:53] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 252 seconds)
[14:32:01] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[14:32:35] *** Quits: CHUD (~CHUD@edu7AAA.kent.ac.uk) (Ping timeout: 256 seconds)
[14:33:56] *** Joins: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[14:38:16] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:fd9:1a3:223d:36f8) (Ping timeout: 245 seconds)
[14:39:14] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:e460:dfee:9aa2:8b96)
[14:39:22] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:40:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:42:56] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[14:44:41] <Axman6> % class Elem a b | b -> a where (|=) :: a -> b -> Bool; instance Eq a => Elem a (a,a) where x |= (a,b) = x == a || x == b; instance Eq a => Elem a (a,a,a) where x |= (a,b,c) = x == a || x == b || x == c
[14:44:42] <yahb> Axman6: ; <interactive>:1:55: error: parse error on input `instance'
[14:44:55] <Axman6> % class Elem a b | b -> a where (|=) :: a -> b -> Boo --l; instance Eq a => Elem a (a,a) where x |= (a,b) = x == a || x == b; instance Eq a => Elem a (a,a,a) where x |= (a,b,c) = x == a || x == b || x == c
[14:44:55] <yahb> Axman6: ; <interactive>:2:49: error:; Not in scope: type constructor or class `Boo'; Perhaps you meant `Bool' (imported from Prelude)
[14:45:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[14:45:05] <Axman6> % class Elem a b | b -> a where (|=) :: a -> b -> Bool --; instance Eq a => Elem a (a,a) where x |= (a,b) = x == a || x == b; instance Eq a => Elem a (a,a,a) where x |= (a,b,c) = x == a || x == b || x == c
[14:45:05] <yahb> Axman6: 
[14:45:18] *** Quits: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[14:45:32] <Axman6> % instance Eq a => Elem a (a,a) where x |= (a,b) = x == a || x == b; instance Eq a => Elem a (a,a,a) where x |= (a,b,c) = x == a || x == b || x == c
[14:45:32] <yahb> Axman6: ; <interactive>:4:68: error: parse error on input `instance'
[14:45:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[14:45:37] <Axman6> % instance Eq a => Elem a (a,a) where x |= (a,b) = x == a || x == b; -- instance Eq a => Elem a (a,a,a) where x |= (a,b,c) = x == a || x == b || x == c
[14:45:37] <yahb> Axman6: 
[14:45:48] <Axman6> % instance Eq a => Elem a (a,a,a) where x |= (a,b,c) = x == a || x == b || x == c
[14:45:49] <yahb> Axman6: 
[14:46:02] <Axman6> % 3 |= (1,2,3)
[14:46:02] <yahb> Axman6: True
[14:46:11] <Axman6> is it worth it? probably not
[14:46:19] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:48:11] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:48:46] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[14:49:15] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[14:49:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Client Quit)
[14:49:43] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:50:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:50:17] <Axman6> probablty wants something like: instance (Eq a, a ~ b, a ~ c, a ~ c)) => Elem a (b,c,d) where to avoid also defining other tuple instances
[14:51:10] *** Joins: alp (~alp@user/alp)
[14:56:08] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:57:41] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:58:05] *** Quits: evocatus (~evocatus@109.229.144.249) (Ping timeout: 256 seconds)
[14:59:18] *** Joins: max22- (~maxime@2a01cb0883359800203f6b6178e56189.ipv6.abo.wanadoo.fr)
[15:02:25] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02)
[15:03:35] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[15:07:07] *** Joins: ardell (~ardell@user/ardell)
[15:07:11] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (Quit: leaving)
[15:07:31] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[15:08:50] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:e460:dfee:9aa2:8b96) (Ping timeout: 260 seconds)
[15:09:24] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:b3b9:7846:79d7:933f)
[15:09:40] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[15:09:51] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[15:09:56] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[15:10:33] *** Quits: dcoutts (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 256 seconds)
[15:15:31] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[15:15:39] *** Joins: oscuroch_ (~oscurochu@097-096-050-227.res.spectrum.com)
[15:17:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:19:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:21:06] <tomsmeding> "Not in scope: `Boo'"
[15:22:06] <tomsmeding> yeah that ~ instance probably gives better type inference
[15:22:27] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[15:22:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:22:51] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:24:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:26:20] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:26:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:27:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:31:10] *** Quits: oscuroch_ (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[15:31:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a516:720d:f816:9bbb)
[15:33:17] *** Joins: rusrushal13 (~rusrushal@2401:4900:4474:e72c:9ed4:c78e:5c00:4738)
[15:35:07] *** Joins: absentia (~evocatus@24-212-138-156.cable.teksavvy.com)
[15:35:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a516:720d:f816:9bbb) (Ping timeout: 250 seconds)
[15:36:36] <absentia> is there a way to have stateful computations in attoparsec? i have a stateful parsec parser that i'd like to port to attoparsec, which apparently does not support monad transformers as parsec does
[15:36:39] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[15:38:08] <merijn> absentia: It depends on what you need
[15:38:20] <merijn> absentia: You can wrap attoparsec in StateT
[15:38:31] <merijn> But whether that has the correct results depends on what you need
[15:40:47] <absentia> merijn: oh, hm. in my parsec implementation I have a ParserT over State - I suppose I can use a StateT over attoparsec, I don't think it matters in my case
[15:41:27] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Reconnecting)
[15:41:48] *** Joins: kadoban (~kadoban@user/kadoban)
[15:43:01] *** Joins: coot (~coot@213.134.190.95)
[15:46:03] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:46:31] <absentia> :/ maybe i am getting confused, i haven't looked at this in a while
[15:47:06] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:b3b9:7846:79d7:933f) (Ping timeout: 260 seconds)
[15:47:33] <absentia> but it looks like ParsecT has a MonadState instance that lets me update state that I can use to compute the final parse result... wouldn't StateT over attoparsec be a stateful computation that gives me a parser? not a parser that carries along additional state
[15:47:34] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:b6ff:ffcd:a65b:345c)
[15:47:37] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[15:48:25] <absentia> I don't actually have ParserT over State - it already instances MonadState itself
[15:48:29] *** Quits: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net) (Quit: Client closed)
[15:52:29] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:54:46] *** Joins: __monty__ (~toonn@user/toonn)
[15:57:53] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[16:03:54] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[16:04:27] <absentia> I guess I'm still not clear on the difference in the way those monads stack, but I can just lift everything into StateT and I guess it works?
[16:09:29] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[16:13:46] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:15:49] *** Joins: evocatus (~evocatus@109.229.144.249)
[16:16:04] *** Quits: evocatus (~evocatus@109.229.144.249) (Remote host closed the connection)
[16:17:38] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[16:23:39] *** Quits: rusrushal13 (~rusrushal@2401:4900:4474:e72c:9ed4:c78e:5c00:4738) (Ping timeout: 256 seconds)
[16:24:29] *** Quits: max22- (~maxime@2a01cb0883359800203f6b6178e56189.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:25:09] <absentia> @pl (\x -> x)
[16:25:09] <lambdabot> id
[16:25:40] <merijn> absentia: The difference is that with StateT wrapping attoparsec, any backtracking in the parser will *also* backtrack operations on the state
[16:26:54] <absentia> I suppose this is OK - my case for state involves advancing an index / coordinate upon successful parse
[16:27:17] <absentia> thank you
[16:31:35] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[16:32:21] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[16:34:20] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:34:38] *** Joins: prolic (~prolic@181.122.131.227)
[16:35:42] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[16:36:06] *** Joins: max22- (~maxime@2a01cb08833598000f8bdf9e14c2e10c.ipv6.abo.wanadoo.fr)
[16:39:29] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:40:04] *** Joins: dmenz (~dmenz@2804:14d:5cd4:8125:3f8d:e57c:e8cf:72ea)
[16:41:10] *** Joins: fendor_ (~fendor@178.165.184.56.wireless.dyn.drei.com)
[16:43:42] *** Quits: fendor (~fendor@91.141.70.82.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[16:44:27] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:46:35] *** Quits: max22- (~maxime@2a01cb08833598000f8bdf9e14c2e10c.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:47:08] *** Joins: ph88 (~ph88@95.90.247.31)
[16:48:35] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[16:48:42] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[16:49:56] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[16:50:06] *** Joins: jespada (~jespada@87.74.36.188)
[16:50:14] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[16:54:30] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:54:48] *** Joins: prolic (~prolic@181.122.131.227)
[16:55:39] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[16:57:39] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Ping timeout: 256 seconds)
[16:58:01] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[17:01:02] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:01:20] *** Joins: prolic (~prolic@181.122.131.227)
[17:01:25] *** Quits: dmenz (~dmenz@2804:14d:5cd4:8125:3f8d:e57c:e8cf:72ea) (Quit: Leaving)
[17:03:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[17:03:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[17:03:40] *** allbery_b is now known as geekosaur
[17:05:20] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:05:38] *** Joins: prolic (~prolic@181.122.131.227)
[17:08:44] *** Joins: sagax (~sagax_nb@user/sagax)
[17:10:23] *** Joins: ianon (~igloo@c-68-83-22-43.hsd1.nj.comcast.net)
[17:10:24] *** Quits: ianon (~igloo@c-68-83-22-43.hsd1.nj.comcast.net) (Client Quit)
[17:13:35] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 252 seconds)
[17:16:03] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:20:39] *** Joins: robosexual (~spaceoyst@92.248.225.230)
[17:25:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[17:30:41] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:33:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f897:63fe:8d18:6b54)
[17:35:22] <absentia> well it appears to work - that wasn't too bad
[17:35:33] <absentia> question is, is it actually any faster
[17:35:36] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-17cd-ded9-9e96-aaa1.res6.spectrum.com) (Quit: Konversation terminated!)
[17:36:35] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a)
[17:37:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f897:63fe:8d18:6b54) (Ping timeout: 245 seconds)
[17:39:06] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:39:24] *** Joins: prolic (~prolic@181.122.131.227)
[17:41:05] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:41:22] *** Joins: prolic (~prolic@181.122.131.227)
[17:43:03] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:43:20] *** Joins: prolic (~prolic@181.122.131.227)
[17:43:27] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:46:39] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[17:47:10] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[17:47:55] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[17:53:40] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[17:57:28] *** Joins: max22- (~maxime@2a01cb088335980096745c2720c38bed.ipv6.abo.wanadoo.fr)
[17:57:54] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[17:57:57] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Ping timeout: 256 seconds)
[17:58:14] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:b6ff:ffcd:a65b:345c) (Ping timeout: 260 seconds)
[17:58:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:58:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:58:36] *** Joins: wroathe (~wroathe@user/wroathe)
[17:58:38] *** Quits: foul_owl (~kerry@94.140.8.107) (Read error: Connection reset by peer)
[17:58:51] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[18:00:12] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[18:02:10] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:b6ff:ffcd:a65b:345c)
[18:02:13] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[18:02:32] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[18:08:09] <Gurkenglas> [A] is not the free monoid on A but rather the free left monoid action of the free monoid on A, right? and it feels like one can get away with only saying free once there, somehow.
[18:10:10] *** Quits: asivitz (uid178348@id-178348.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[18:14:09] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[18:14:15] <Gurkenglas> no argh that's not it either, i think. just as "free monoid" gives you just the finite lists, the latter gives you only the infinite lists
[18:15:36] *** Joins: foul_owl (~kerry@94.140.8.105)
[18:16:11] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:b6ff:ffcd:a65b:345c) (Ping timeout: 245 seconds)
[18:17:21] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:3448:8755:f832:acc9)
[18:18:44] *** Quits: dsrt^ (~dsrt@128-092-164-034.biz.spectrum.com) (Remote host closed the connection)
[18:19:49] <lyxia> I dunno if it helps but there's the initial algebra/final coalgebra aspect.
[18:20:29] <Gurkenglas> oh http://comonad.com/reader/2015/free-monoids-in-haskell/ is relevant. so 1: the infinity issues might actually be fine: every Haskell type of finite sequences will have infinite sequences too
[18:21:32] <lyxia> what about   data List a = Cons a !(List a) | Nil
[18:21:36] <Gurkenglas> 2: *but* (repeat 1) ++ [2] == (repeat 1) and that's no good for a "free monoid"
[18:22:30] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (Remote host closed the connection)
[18:23:18] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:23:30] <Gurkenglas> lyxia, huh. i don't know if i want to model that. but sure, if ! is allowed that's the free monoid.
[18:23:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[18:24:21] *** Joins: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[18:24:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:28:18] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:28:36] *** Joins: prolic (~prolic@181.122.131.227)
[18:31:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:32:43] *** Quits: robosexual (~spaceoyst@92.248.225.230) (Quit: Konversation terminated!)
[18:34:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[18:34:04] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[18:34:29] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca)
[18:35:33] *** Joins: meltedbrain_y2k (~tekserf@47.61.115.91)
[18:37:03] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:37:44] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:39:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[18:40:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:40:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:40:07] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:50] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:42:08] *** Joins: prolic (~prolic@181.122.131.227)
[18:44:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:46:49] *** Joins: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net)
[18:48:30] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:48:47] *** Joins: prolic (~prolic@181.122.131.227)
[18:49:02] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 240 seconds)
[18:49:53] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[18:50:17] *** sudden is now known as Guest6340
[18:51:40] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[18:55:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab)
[18:57:12] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:57:29] *** Joins: prolic (~prolic@181.122.131.227)
[19:01:11] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[19:01:31] *** Quits: thevishy (~Nishant@2405:201:f005:c007:3c07:8d1a:dd0:be31) (Quit: Leaving)
[19:01:36] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[19:02:28] *** Quits: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[19:04:13] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[19:05:51] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 268 seconds)
[19:06:10] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[19:06:38] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[19:08:18] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[19:08:36] *** Joins: prolic (~prolic@181.122.131.227)
[19:08:40] <lyxia> Just to confuse you more, in OCaml the standard type of lists is inhabited by cyclic lists.
[19:10:14] <merijn> Gurkenglas: Why is that not good?
[19:10:14] *** Joins: gmc (sid58314@ilkley.irccloud.com)
[19:10:44] <merijn> Gurkenglas: Also, generally we pretend there's a total subset of haskell when reasoning about things like that
[19:10:54] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[19:11:22] <merijn> Gurkenglas: You can google "Fast and Loose Reasoning is Morally Correct" for a justification why we can for most practical purposes :p
[19:11:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca)
[19:13:29] *** Joins: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl)
[19:14:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:16:11] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[19:16:29] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[19:17:57] *** Joins: zaquest (~notzaques@5.130.79.72)
[19:19:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[19:21:01] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 256 seconds)
[19:24:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:24:42] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab) (Remote host closed the connection)
[19:24:48] *** Joins: kaidankoeppel (~jose@2001:818:ebe6:2100:ac54:eac7:b70d:5f1f)
[19:26:08] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[19:27:00] *** Joins: akegalj (~akegalj@185.230.83.17)
[19:27:41] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[19:28:28] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[19:28:42] *** Joins: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[19:29:09] *** Quits: sayola (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[19:30:21] *** Joins: sayola (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de)
[19:30:50] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02) (Remote host closed the connection)
[19:31:09] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02)
[19:31:19] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[19:31:26] <kaidankoeppel> Hello -- I'm having a little bit of a hard time understanding `Either` in this exercise: https://exercism.org/tracks/haskell/exercises/rna-transcription . http://ix.io/3Ork has the source file along with a small error description. If I understand correctly, I should run one function if it's Char, the other one if it's a String, right?
[19:31:48] *** Quits: mbuf (~Shakthi@171.61.247.107) (Quit: Leaving)
[19:33:40] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[19:33:52] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[19:34:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:34:21] <kaidankoeppel> "it" being the input of `toRNA`.
[19:34:39] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:35:30] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[19:35:45] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02) (Ping timeout: 256 seconds)
[19:35:50] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 250 seconds)
[19:36:33] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Ping timeout: 256 seconds)
[19:36:47] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:37:02] *** Joins: son0p (~ff@181.136.122.143)
[19:37:04] <geekosaur> this looks fairly confused to me. you start out with xs which is a String. `isLeft (Left xs)` doesn't change this, in fact it does nothing
[19:38:10] <Gurkenglas> merijn, because any A->M for any monoid M is supposed to uniquely factor through the free monoid, but if repeat 1 <> [2] == repeat 1 and M = SnocList Int and A->M=pure and the induced [A]->M is f, then f(repeat 1) = f(repeat 1 <> 2) != f(repeat 1) <> f 2 so f isn't a monoid morphism
[19:38:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:39:28] <Gurkenglas> i'm also a fan of fast-and-loose but this is not about equating Hask to Set :D
[19:40:53] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca)
[19:42:13] <geekosaur> kaidankoeppel, in fact there seems no actual use of Either here as yet. toRNA takes a String, this does not become a Char magically, nor would you be running that function according to the problem specification. So I'm not sure what your confusion actually is but Either seems not to be the actual confusion
[19:42:33] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[19:42:54] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[19:43:54] <akhesacaro> https://www.reddit.com/r/haskell/comments/sire33/ann_servant_019_release/
[19:44:12] <geekosaur> also (Left xs) is a type error because xs is known to be String at that point, not Char, but ghc doesn't get that far
[19:44:56] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[19:45:14] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[19:45:57] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:46:39] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[19:47:26] *** Quits: akegalj (~akegalj@185.230.83.17) (Quit: leaving)
[19:47:29] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[19:48:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca)
[19:48:40] <polyphem> if i run "stack test" i get the test output to terminal , with "cabal test" no terminal output , only summary file , how can i change cabals behavior to show me the test output while running ?
[19:50:00] <polyphem> nvm, cabal test --test-show-details=streaming works
[19:50:22] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:50:54] <polyphem> kind of , only block wise refresh  , hmm
[19:52:01] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[19:53:12] <geekosaur> the test is running into a pipe, the test framework would have to be told to use character or line buffering (cabal cannot do this for it)
[19:53:22] *** Joins: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[19:54:09] <kaidankoeppel> geekosaur: oh wait, I now know what you're getting at. You're correct, I don't even think of realizing it's always a String. I misunderstood that it could be Either Char String when it is the return value that is of that type.
[19:54:21] <geekosaur> right
[19:54:37] <kaidankoeppel> You can tell I'm very new to Haskell. This Either concept bogged my mind.
[19:54:40] <kaidankoeppel> Thank you very much.
[19:55:01] <geekosaur> and as I read the problem that actually gets pushed down to singleRNA, because it's the `otherwise` case there that should produce a Left
[19:55:27] <geekosaur> and toRNA has to deal with that Left and return it to its caller
[19:56:10] <polyphem> ok , now it works with : cabal test --test-show-details=direct 
[19:56:22] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:57:28] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:58:07] <geekosaur> kaidankoeppel, I think you'll also find you don't want a map here
[19:58:49] <geekosaur> because you need to deal with a Left when it appears (you want the first one, not all of them). this looks like a fold to me
[19:59:19] *** Quits: glider (~glider@user/glider) (Quit: ZNC 1.9.x-git-111-f2cdc3db - https://znc.in)
[19:59:19] *** Quits: anderson (~ande@user/anderson) (Quit: bye)
[19:59:20] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[19:59:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:01:25] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[20:02:17] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02)
[20:03:10] *** Quits: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl) (Ping timeout: 256 seconds)
[20:03:12] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[20:03:30] <kaidankoeppel> yep, I just realized that the fold is required to check for the failing case, in the sense that you only require the first error.
[20:03:40] <kaidankoeppel> the first letter*
[20:04:22] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:05:36] *** Joins: glider (~glider@user/glider)
[20:05:47] *** Quits: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Ping timeout: 256 seconds)
[20:06:55] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02) (Ping timeout: 256 seconds)
[20:07:40] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:08:37] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[20:09:53] *** Joins: anderson (~ande@user/anderson)
[20:10:47] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca)
[20:13:42] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:14:00] *** Joins: prolic (~prolic@181.122.131.227)
[20:15:41] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:15:58] *** Joins: prolic (~prolic@181.122.131.227)
[20:16:13] *** Quits: RFV (~Thunderbi@155.red-88-5-242.dynamicip.rima-tde.net) (Quit: RFV)
[20:16:44] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:3448:8755:f832:acc9) (Ping timeout: 252 seconds)
[20:17:33] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:25b:5701:e54d:ee3e)
[20:19:56] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:20:13] *** Joins: prolic (~prolic@181.122.131.227)
[20:21:39] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[20:23:08] *** Joins: Akiva (~Akiva@user/Akiva)
[20:23:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca) (Ping timeout: 245 seconds)
[20:23:51] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:3481:56ab:6180:50a5) (Quit: WeeChat 2.8)
[20:27:47] *** Joins: nschoe (~quassel@178.251.84.79)
[20:27:56] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:28:12] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:28:13] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:30:42] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:31:00] *** Joins: prolic (~prolic@181.122.131.227)
[20:31:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca)
[20:32:32] *** Joins: Guest396 (~Guest39@98.42.121.105)
[20:34:52] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:35:10] *** Joins: prolic (~prolic@181.122.131.227)
[20:36:51] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:37:05] <kaidankoeppel> thank you geekosaur -- I have resolved the exercise and I now understand what I have missed.
[20:37:08] *** Joins: prolic (~prolic@181.122.131.227)
[20:37:41] *** Joins: yassernasc (~yassernas@177.37.144.34)
[20:38:12] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:39:48] *** Joins: axeman (~quassel@ip5f5aed68.dynamic.kabel-deutschland.de)
[20:40:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:41:58] *** Quits: nschoe (~quassel@178.251.84.79) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:42:03] *** Quits: yassernasc (~yassernas@177.37.144.34) (Ping timeout: 256 seconds)
[20:46:36] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca)
[20:51:26] *** Joins: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com)
[20:54:11] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[20:55:53] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:58:12] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[20:58:39] *** Quits: Guest396 (~Guest39@98.42.121.105) (Quit: Client closed)
[20:59:38] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca) (Ping timeout: 252 seconds)
[21:01:18] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[21:01:36] *** Joins: prolic (~prolic@181.122.131.227)
[21:01:45] <janus> akhesacaro: the changelog says GHC 9.2 "should work". but how can it since there is an indirect dependency on 'memory'? the solver fails to find a plan, going servant-server->wai-app-static->optparse-applicative->memory
[21:04:32] <janus> i just do 'cabal repl -b servant-server==0.19 -w ghc-9.2.1', is that wrong?
[21:04:43] *** Quits: axeman (~quassel@ip5f5aed68.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[21:05:14] *** Quits: kaidankoeppel (~jose@2001:818:ebe6:2100:ac54:eac7:b70d:5f1f) (Quit: WeeChat 3.4)
[21:06:03] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:06:25] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[21:06:46] *** Quits: MajorBiscuit (~MajorBisc@c-001-021-032.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[21:08:39] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca)
[21:09:39] <janus> hmm seems that line is from Gaël Deest, are they on irc?
[21:09:46] *** Joins: cheater (~Username@user/cheater)
[21:14:03] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:15:29] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:16:03] *** Quits: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[21:16:08] <justsomeguy> When I run my tests in stack with stack test, it says Ambiguous module name 'Lib'. How can I specify that it should use the Lib module from the package I'm writing instead of libiserv or whatever?
[21:17:20] <geekosaur> I think your only option is PackageImports :(
[21:17:35] * geekosaur noticed that Lib module today and was surprised nobody had tripped over it yet
[21:18:32] *** Quits: d0ku (~d0ku@178.43.19.180.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[21:19:00] <geekosaur> "The special package name this can be used to refer to the current package being built."
[21:19:06] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:20:19] <justsomeguy> I added exposed-modules: Lib to my library section in package.yaml and it stopped showing that error message about ambiguous module names.
[21:20:43] * justsomeguy doesn't know why that worked; He just guessed.
[21:21:54] *** Quits: meltedbrain_y2k (~tekserf@47.61.115.91) (Read error: Connection reset by peer)
[21:23:15] <dsal> Lib is a pretty bad name and nothing should use it.
[21:23:37] <justsomeguy> By PackageImports, do you mean the language extension?
[21:23:41] <geekosaur> yes
[21:23:56] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/package_qualified_imports.html?highlight=packageimports#package-qualified-imports
[21:24:19] *** Joins: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0)
[21:25:15] <geekosaur> wonder if it's worth filing a bug against libiserv about it
[21:26:16] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca)
[21:26:25] <geekosaur> even worse, it exports only one function https://downloads.haskell.org/ghc/8.10.7/docs/html/libraries/libiserv-8.10.7/Lib.html
[21:26:46] <geekosaur> this is, like, egregious
[21:26:51] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:28:02] *** Joins: fef (~thedawn@user/thedawn)
[21:29:01] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[21:29:27] <ProfSimm> Is "where" in functions just a way to put definitions that should come before, to be after?
[21:30:02] <monochrom> I disagree with "should". But sure.
[21:30:11] <geekosaur> I believe it has slightly different scope
[21:30:13] <ProfSimm> If it's not should what is it
[21:30:19] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[21:30:25] <geekosaur> where scopes over guards, I think
[21:30:39] <monochrom> I would change the whole sentence to "just a way to put definitions after".
[21:30:59] <monochrom> Without any religious baggage of what "should" be.
[21:32:20] <monochrom> Yeah the guards can access things defined under "where".
[21:33:00] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[21:33:01] <monochrom> Moreover laziness still applies, you can define things some guards don't use, it will stay very cheap.
[21:33:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:33:48] <monochrom> Err I mean things you don't use when some guards turn out to be false.
[21:34:24] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[21:35:02] <EvanR> use terms just prior to defining them, or define a bunch of terms then use them
[21:35:11] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:36:08] <EvanR> pick your poison xD
[21:36:23] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[21:36:43] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:37:35] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:37:42] <geekosaur> yeh, I'm generally on the "let" side of that one. moreover I structure the let to build up from simple to complex
[21:37:54] <monochrom> My religion is that every definition should be floating in 3D space spread out over a spherical region and linked with thin lines.
[21:38:03] <monochrom> Think outside the plain text file.
[21:38:06] <geekosaur> so it's easier to follow what I'm doing, and if you only care about the result you can jump to the end
[21:39:46] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca)
[21:40:11] <EvanR> the definitions are encoded on the event horizon of a schwarzchild blackhole, and the expression as a whole is a hologram
[21:44:57] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[21:45:45] *** Joins: gargawel (~kvirc@82-65-144-99.subs.proxad.net)
[21:46:39] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:47:19] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 250 seconds)
[21:50:44] *** Joins: meltedbrain_y2k (~tekserf@47.61.115.91)
[21:51:29] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:51:45] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[21:53:25] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[21:53:43] *** Joins: prolic (~prolic@181.122.131.227)
[21:55:32] *** Quits: ravella (~ravella@user/ryanavella) (Ping timeout: 240 seconds)
[21:57:24] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[21:57:38] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[21:57:42] *** Joins: prolic (~prolic@181.122.131.227)
[21:57:59] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:00:15] *** Joins: wombat871 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[22:00:15] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[22:01:11] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[22:03:10] *** Joins: finsternis (~X@23.226.237.192)
[22:04:27] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[22:04:27] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[22:06:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab)
[22:06:30] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:06:44] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[22:08:48] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:09:19] <kuribas> How can I make stack only typecheck?
[22:10:24] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:10:53] <monochrom> Tell stack to tell ghc "-fno-code"
[22:10:55] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a)
[22:11:09] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[22:11:29] *** Joins: emf (~emf@2620:10d:c090:400::5:b0fe)
[22:11:56] <kuribas> right
[22:13:57] *** Joins: econo (uid147250@user/econo)
[22:16:46] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[22:18:41] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[22:18:44] *** Quits: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net) (Quit: Client closed)
[22:18:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab) (Remote host closed the connection)
[22:18:52] *** Joins: asivitz (uid178348@tinside.irccloud.com)
[22:19:14] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab)
[22:23:21] <asivitz> anyone else have problems with ghci on an m1 mac? I think it's a readline problem. when I hit 'up arrow' my prompt fills with garbage
[22:23:47] <maerwald> :D
[22:24:07] <maerwald> is that not expected on mac?
[22:24:53] <maerwald> there are a *lot* of issues on M1, but not sure if there's a ticket about this one
[22:25:16] <geekosaur> I thought this was the terminfo binding issue
[22:25:47] <dsal> asivitz: Yep.
[22:26:13] <asivitz> ah, any workaround or link to a ticket?
[22:26:17] *** Joins: MatthiasG2 (~matthias@i6DFA0138.versanet.de)
[22:28:40] <geekosaur> I think it's https://github.com/judah/haskeline/issues/162 but hasn't made it to a release / upstream yet
[22:29:59] <geekosaur> (ghci uses haskeline instead of readline for a number of reasons including easier apple and windows support)
[22:30:22] <asivitz> geekosaur: thanks!
[22:33:12] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[22:37:48] *** Quits: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0) (Quit: Client closed)
[22:39:08] *** Quits: flipchan (~filip@user/flipchan) (Remote host closed the connection)
[22:39:25] *** Quits: max22- (~maxime@2a01cb088335980096745c2720c38bed.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:40:30] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[22:41:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:41:37] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[22:41:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:42:11] *** Quits: meltedbrain_y2k (~tekserf@47.61.115.91) (Ping timeout: 256 seconds)
[22:42:11] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[22:42:39] *** Joins: meltedbrain_y2k (~tekserf@47.61.115.91)
[22:42:45] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[22:42:59] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[22:43:00] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[22:43:19] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Ping timeout: 256 seconds)
[22:43:42] *** Quits: ph88 (~ph88@95.90.247.31) (Quit: Leaving)
[22:44:06] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[22:44:27] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[22:44:33] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[22:44:49] *** Joins: axeman (~quassel@2a02:8109:a3c0:b10:796:dd6e:a09d:717e)
[22:45:57] *** Joins: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl)
[22:46:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab) (Remote host closed the connection)
[22:48:01] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[22:51:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:53:29] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 252 seconds)
[22:54:21] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:55:40] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:39bb:565d:7d44:b11e)
[22:56:23] *** Joins: vicfred (~vicfred@user/vicfred)
[22:56:47] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11)
[22:57:38] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[22:58:42] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[22:59:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[22:59:11] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[22:59:11] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 256 seconds)
[22:59:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab)
[22:59:23] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[22:59:32] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[22:59:45] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 256 seconds)
[22:59:45] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[22:59:45] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[23:01:21] *** Joins: machinedgod (~machinedg@24.105.81.50)
[23:02:13] *** Quits: kuribas (~user@ptr-25vy0i85c22k4hh4u57.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[23:03:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[23:06:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:06:37] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 250 seconds)
[23:08:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:09:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[23:09:24] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:09:43] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:11:02] *** Joins: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de)
[23:12:22] *** Joins: burnside_ (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[23:12:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[23:12:51] *** Quits: adnaahm (~adnaahm@host-10-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 245 seconds)
[23:13:55] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[23:14:01] *** Joins: adnaahm (~adnaahm@host-101-net-67-160-119.mobilinkinfinity.net.pk)
[23:15:27] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[23:16:45] *** Quits: burnside_ (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[23:22:25] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:24:50] *** Joins: max22- (~maxime@2a01cb0883359800154b4e88390bc120.ipv6.abo.wanadoo.fr)
[23:26:26] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[23:27:40] *** Joins: modnar (~modnar@shell.sonic.net)
[23:29:13] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 256 seconds)
[23:29:25] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[23:30:52] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[23:32:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:35:41] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:34] *** Quits: MatthiasG2 (~matthias@i6DFA0138.versanet.de) (Quit: Lost terminal)
[23:36:57] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:18] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:39bb:565d:7d44:b11e) (Quit: Leaving)
[23:37:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[23:37:49] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[23:40:08] *** Joins: Pickchea (~private@user/pickchea)
[23:40:32] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:40:50] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:41:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:42:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11) (Remote host closed the connection)
[23:43:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:45:41] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:46:18] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:48:53] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:49:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[23:52:27] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:54:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[23:56:04] *** Quits: vglfr (~vglfr@88.155.15.0) (Ping timeout: 256 seconds)
[23:56:15] *** Joins: vglfr (~vglfr@88.155.15.0)
[23:57:01] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 245 seconds)
[23:59:06] *** Quits: Ram-Z_ (~Ram-Z@li1814-254.members.linode.com) (Quit: ZNC - http://znc.in)
[23:59:25] *** Joins: Ram-Z (Ram-Z@2a01:7e01::f03c:91ff:fe57:d2df)
