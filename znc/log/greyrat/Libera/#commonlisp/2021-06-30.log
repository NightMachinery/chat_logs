[00:00:07] <shka> i honestly never used throw in CL
[00:02:50] <mfiano> catch and throw are very useful
[00:03:07] <shka> mfiano: care to explain how would i use those?
[00:03:20] <mfiano> Simple. They are dynamically-scoped and dynamically-valued equivalents of BLOCK and RETURN-FROM.
[00:03:33] <shka> ooooooh, i get it
[00:04:19] <shka> mfiano: thanks
[00:06:18] <yitzi> I use them in common-lisp-jupyter in between two separate message loops in different threads to implement interrupts, etc.
[00:08:23] *** Joins: cage (~cage@dynamic-adsl-78-15-32-45.clienti.tiscali.it)
[00:08:32] *** Quits: cage (~cage@dynamic-adsl-78-15-32-45.clienti.tiscali.it) (Client Quit)
[00:10:07] <jcowan> Presumably handler-case uses catch/throw under the covers somewhere
[00:10:32] <jcowan> (or is it handler-bind?  I get those confused)
[00:10:47] <shka> no, handler-bind does not unwind the stack
[00:12:31] <yitzi> handler-case does, although the clhs seems imply that a naive implementation uses tag-body.
[00:12:38] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:3926:1fd0:955c:64c4) (Remote host closed the connection)
[00:13:16] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:13:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:16:42] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[00:21:09] *** Joins: slant (~ssnatt@187.232.49.40)
[00:21:27] *** Quits: frgo_ (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:21:57] *** Joins: frgo (~frgo@p200300deef27d700402d8f8025fdec99.dip0.t-ipconnect.de)
[00:30:48] *** Quits: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net) (Ping timeout: 272 seconds)
[00:33:44] <Bike> the handler-case example in the clhs is pretty much how it's usually implemented. the tagbody/go still does a nonlocal exit just like a block/return-from would
[00:33:57] <pjb> yitzi: yes but tagbody go needs to perform non-local exits since you can put GO in closures.
[00:34:08] <Bike> it's written that way because the unwinding takes place before the handler code is executed
[00:34:43] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[00:34:45] <yitzi> roger
[00:35:08] <pjb> Have a look at: https://en.wikipedia.org/wiki/Common_Lisp
[00:35:08] <pjb>  
[00:35:08] <pjb> As any other implementation the =bocl= implementation provides a
[00:35:08] <pjb>  
[00:35:15] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:35:18] <pjb> s/As.*a//
[00:36:07] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[00:38:33] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[00:45:06] *** Quits: slant (~ssnatt@187.232.49.40) (Ping timeout: 240 seconds)
[00:45:13] *** Joins: akoana (~ah@user/akoana)
[00:51:32] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:54:15] *** Joins: forloop (~forloop@49.207.225.232)
[00:54:22] <forloop> Hi
[00:54:49] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[00:55:17] <forloop> What time zone is this channel most active?
[00:56:46] <akoana> I don't know, but maybe the logs of this channel can give you a clue: https://irclog.tymoon.eu/libera/%23commonlisp
[00:58:23] <pjb> forloop: several.
[00:58:36] <pjb> forloop: there are american lispers, european lispers, and even some japanese lispers.
[00:58:45] *** Joins: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net)
[00:58:56] <pjb> forloop: furthermore, hackers are often shifted.
[00:59:49] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[01:06:01] <jcowan> and American lispers come in two flavors, East Coast (UTC-4) and West Coast (UTC-7)
[01:07:07] <jcowan> Does anyone use a debian-alternatives group for CL implementations?  I don't see why there shouldn't be one; is it a matter of "nobody cares"?
[01:11:07] *** Quits: forloop (~forloop@49.207.225.232) (Quit: Client closed)
[01:11:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:12:30] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[01:12:50] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[01:13:24] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[01:16:36] <pjb> jcowan: definitely.
[01:16:55] * jcowan hates highly knowledgeable trolls
[01:16:58] <pjb> (east/west)
[01:17:15] <jcowan> oh, I thought that was an answer to my question!  Sorry about that.
[01:18:18] <Josh_2> how can I convert a list like '(lambda (var1 var2) (= var1 var2)) into a lambda?
[01:18:20] <Josh_2> do I have to use eval?
[01:19:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:20:23] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:21:20] <Josh_2> maybe I'm just going about this the wrong way
[01:22:14] <Bike> eval or coerce or compile
[01:22:39] <Bike> you probably don't want to do this
[01:23:03] <Josh_2> Yeh I dont think I'm doing this the most optimal way, however it is at the class definition level so its not like I'm letting random users execute arbitrary code
[01:23:33] <Bike> what is the context?
[01:23:50] <Josh_2> One sec I'll just show you the code
[01:24:03] <edgar-rft> '(lambda (var1 var2) (= var1 var2)) == (quote (lambda (var1 var2) (= var1 var2))) so (cdr '(lambda (var1 var2) (= var1 var2))) should work, but is whacky code.
[01:24:29] <Josh_2> https://plaster.tymoon.eu/view/2529#2529
[01:24:32] <Bike> i think josh would like a function as the result
[01:24:40] <Josh_2> Yes something I can pass to apply
[01:24:48] <Josh_2> I think this code demonstrates exactly what I'm trying to achieve
[01:25:27] <Bike> hmm. i see.
[01:26:23] <Josh_2> yeh
[01:26:38] <Josh_2> tbf I could just have two lambdas and get rid of the expected args key
[01:27:14] <Bike> i don't really see a way to construct the function ahead of time except by controlling the macroexpansion of defclass, but that's not really possible, unfortunately
[01:27:21] <Bike> so yeah, eval or compile or something
[01:27:26] <pl> jcowan: there's a lot of bad blood from good-faith-but-horrible-ends debian packaging issues
[01:27:26] <Josh_2> Okay :)
[01:27:44] <Josh_2> I dont think either compile or eval are actually a problem in this context
[01:28:15] <Bike> it's not a security problem, it's more about confusion and timing
[01:28:19] <jcowan> pl: Ah.  Still, this isn't exactly packaging: it just lets you invoke Your Favorite Lisp with a single name like "cl"
[01:28:32] <Bike> the function will be compiled/evaluated when the class is finalized
[01:28:39] <Josh_2> yes thats okay
[01:28:40] <Bike> which could be, for example, the first time an instance of it is made
[01:28:45] <Bike> which might surprise people, performancewise
[01:28:49] <Bike> it will still work
[01:29:24] <pl> jcowan: it's heavily related to the mechanisms provided by debian packages though - and when people are soured on those...
[01:29:28] *** Joins: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86)
[01:29:42] <pl> there was also not enough information of using alternatives outside of official packages
[01:30:02] <Josh_2> I think in this case the class object itself is what is being used, not instances of the class
[01:30:12] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 265 seconds)
[01:30:39] <Bike> the standard lets classes be finalized only at the point they definitely have to be - when an instance is made
[01:30:48] <Bike> meaning computing effective slots and stuff isn't done until then
[01:30:59] <Bike> i think sbcl works this way but i'm not sure
[01:31:10] <Bike> other implementations are more eager
[01:31:20] <Josh_2> ah I see
[01:34:19] <Josh_2> if I just used (make-instance 'direct-message) after my defclass that would do it?
[01:34:58] <Bike> sure. you can also call mop:finalize-inheritance
[01:35:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 246 seconds)
[01:35:10] <Bike> but it's not something that you have to do. just thought i should mention it.
[01:35:14] <pjb> Josh_2: where do you use %build-function?
[01:35:15] <jcowan> pl: Only in the sense that particular packages arrogate priorities to themselves.  If you set up your own groups, it's just a mechanism for managing symlinks.
[01:35:23] <Josh_2> pjb: I dont, I should have removed it
[01:36:11] <pjb> Josh_2: as a macro, its macroexpansion would result in a function so you wouldn't need to consider eval compile or coerce.
[01:36:42] *** Quits: dlowe (~dlowe@user/dlowe) (Ping timeout: 240 seconds)
[01:36:44] <Josh_2> oh
[01:36:52] <pjb> Josh_2: a-priori, eval would produce an interpreted function, compile a compiled function, and coerce,whatever the implementation prefers. But it's entirely implementation dependent.
[01:38:16] <pjb> Josh_2: in your case, I'd go with compile.
[01:38:31] <pjb> Since you wouldn't define classes in an inner loop, to call it only once.
[01:39:29] <pjb> Josh_2: when you want to call a lambda-expression as a one-shot, then eval is indicated.
[01:39:40] <Josh_2> right
[01:39:50] <Josh_2> fortunately in this case I dont, a compiled function is exactly what I want :D
[01:40:26] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:42:09] <pjb> Josh_2: in your lambda, you could wrap the body in a block.
[01:42:23] <Josh_2> I have done that now
[01:42:27] <Josh_2> wrapped in (locally ...)
[01:43:06] <pjb> `(lambda (…) (block fn #|or a better name|# …))  `(lambda (…) (block validator …))
[01:43:18] <Josh_2> okay thats not what I thought you meant
[01:43:40] <Josh_2> Why would I want to do that?
[01:43:45] <pjb> So the expression can use (return-from validator …) or (return-from fn #|or a better name|# …)
[01:43:51] <Josh_2> hmm
[01:43:59] <Josh_2> that is something I dont think I have ever done
[01:44:08] <Josh_2> blocks have a separate namespace right?
[01:44:15] <pjb> Yes.
[01:44:22] <Josh_2> well whats the harm then
[01:45:17] <Bike> if you want to be really free with validators it might be easiest to write (send-otp ... :validator validate-send-otp), then (defun validate-send-otp (unique-id username otp) ...)
[01:45:32] <Josh_2> yes I have considered that
[01:46:49] <Josh_2> I think I will add the functionality for both
[01:47:35] *** Quits: pve (~pve@37-136-236-183.rev.dnainternet.fi) (Quit: leaving)
[01:57:08] *** Quits: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net) (Ping timeout: 268 seconds)
[02:00:08] *** Joins: slant (~ssnatt@2806:103e:2:d9d0:a148:9318:86f1:4bab)
[02:00:40] <Josh_2> How do I add a new keyword argument to my defclass form?
[02:01:30] <Josh_2> I have private-key in my slot but I'd like it in my defclass and then to fill each slots private-key with the one found in the defclass form
[02:12:28] <Josh_2> lul okay that was easy
[02:16:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:18:42] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[02:22:56] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:27:20] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[02:32:42] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[02:34:54] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[02:34:54] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[02:34:54] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[02:34:54] *** Joins: akanouras (~akanouras@user/akanouras)
[02:34:54] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[02:34:55] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[02:35:06] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[02:41:26] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: node-irc says goodbye)
[02:41:34] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: node-irc says goodbye)
[02:41:41] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: node-irc says goodbye)
[02:41:44] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: node-irc says goodbye)
[02:41:47] *** Quits: akanouras (~akanouras@user/akanouras) (Quit: node-irc says goodbye)
[02:41:48] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: node-irc says goodbye)
[02:41:50] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: node-irc says goodbye)
[02:44:35] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: node-irc says goodbye)
[02:44:46] *** Quits: lotuseater (~user@p200300e787025700249b68ce60a870ab.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[02:56:06] *** Quits: frgo (~frgo@p200300deef27d700402d8f8025fdec99.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:56:34] *** Joins: frgo (~frgo@p200300deef27d700402d8f8025fdec99.dip0.t-ipconnect.de)
[02:57:46] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[02:59:55] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[02:59:55] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[02:59:55] *** Joins: akanouras (~akanouras@user/akanouras)
[02:59:55] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[02:59:55] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[02:59:55] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[03:00:07] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[03:01:34] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[03:14:13] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:24:08] *** Quits: slant (~ssnatt@2806:103e:2:d9d0:a148:9318:86f1:4bab) (Remote host closed the connection)
[03:24:22] *** Joins: slant (~ssnatt@2806:103e:2:d9d0:1c5b:2a58:5dc9:8e5d)
[03:25:11] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[03:26:08] *** Quits: heisig (~heisig@p57942813.dip0.t-ipconnect.de) (Quit: Leaving)
[03:26:29] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[03:29:43] *** Quits: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86) (Quit: Leaving)
[03:52:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:12:46] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[04:13:05] *** Quits: slant (~ssnatt@2806:103e:2:d9d0:1c5b:2a58:5dc9:8e5d) (Remote host closed the connection)
[04:13:18] *** Joins: slant (~ssnatt@2806:103e:2:d9d0:93a4:8f7e:bb30:403c)
[04:29:22] *** Quits: slant (~ssnatt@2806:103e:2:d9d0:93a4:8f7e:bb30:403c) (Remote host closed the connection)
[04:29:34] *** Joins: slant (~ssnatt@2806:103e:2:d9d0:fba6:a35f:3eb2:2c46)
[04:39:14] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 256 seconds)
[04:39:18] *** Quits: slant (~ssnatt@2806:103e:2:d9d0:fba6:a35f:3eb2:2c46) (Remote host closed the connection)
[04:51:24] *** Joins: cuz (~user@2601:182:cc02:8b0:39d7:a0a0:94f3:fad5)
[04:52:29] <cuz> Hello! I'm new here. I just started learning lisp. Is this a good place to get feedback on code (sorry if i'm double pinging anyone from #lisp)
[05:00:00] <Bike> Sure
[05:00:19] <Bike> I assume you're writing common lisp, rather than scheme or something, which have their own channels?
[05:01:49] <cuz> Yep!
[05:02:44] <jcowan> It's not clear to me when it would be a win to use eval rather than compile
[05:03:37] <Bike> well, assuming the evaluator is less involved than the compiler, you'd want to evaluate code that runs once, but for something like an anonymous function that's called a bunch of times, compilation would be more expensive up front but make up for it with volume
[05:04:22] <jcowan> "Oh, we lose money on each piece we sell, but we make up for it in volume!"
[05:04:33] <Bike> righto
[05:04:44] <cuz> I'm sure theres room for improvment: https://pastebin.pl/view/df1a5538
[05:04:57] <Bike> in clasp i found that compilation was expensive enough in one case that using the interpreter a million times was still faster
[05:05:01] <Bike> that was disheartening
[05:05:23] <jcowan> But since there is no guarantee that eval actually doesn't compile or that compile does more than macroexpansion, it loooks like a wash
[05:05:49] <Bike> little bit. but performance things like that are usually left to implementation discretion, so nothing new there
[05:06:37] <Bike> cuz: you should use eql for characters, rather than eq
[05:06:51] <Bike> cuz: also, your default "del" is actually a string
[05:07:51] <Bike> your code is also pretty inefficient, but i don't know if you want advice about that
[05:08:15] <Bike> otherwise seems like it should work though?
[05:08:33] <cuz> Yeah defintely do, give me a second to research eq vs eql first
[05:08:35] <jcowan> I was surprised to find out yesterday that Interlisp actually guarantees that eq works correctly on fixnums
[05:08:49] <jcowan> (characters have two representations, as symbols and as fixnums)
[05:10:32] <Bike> yeah, looks like it works, assuming you want (split ",,," #\,) to return nil rather than ("" "" "" "")
[05:11:23] <jcowan> I'm not clear on why you'd want it to return ()
[05:11:57] <cuz> Is del being a string akward for lisp? Coming from other langauges (split "hello world" #\ ) seems odd compared to (split "hello world" " ")
[05:12:27] <jcowan> to my mind, a more interesting question is whether (split "" #\,) should return () or an error
[05:12:29] <Bike> jcowan: i don't know, but it's an option in both lispworks and sharp-lispers's split-sequence, so i assume somebody wants it
[05:12:46] <Bike> cuz: do you actually want it to be able to split on multiple character strings?
[05:13:03] <Bike> like (split "a, b, c" ", ") => ("a" "b" "c")
[05:13:11] <cuz> No just one
[05:13:20] <Bike> why woult it be a string then?
[05:13:23] <jcowan> I'd go whole hog and split on a regex inst4ad
[05:13:40] <Bike> would
[05:14:08] <Bike> if you want, you could make it a character designator rather than a character, so #\, and "," work just as well
[05:15:10] <cuz> What would that look like?
[05:15:15] <Bike> java split takes a regex, looks like
[05:15:38] <Bike> cuz: replace (char del 0) with (character del)
[05:15:42] <Bike> ::clhs character
[05:15:49] <Colleen> Clhs: meanings for character http://www.lispworks.com/documentation/HyperSpec/Body/a_ch.htm
[05:15:55] <Bike> ...right. the function one
[05:16:12] <cuz> And jcowan, I like the regex idea I'll have to work up to that
[05:18:31] <Bike> efficiencywise, the basic issues are redoing work and consing. when you do subseq, that conses, i.e. allocates a new string to put the substring in, which is probably slow
[05:18:43] <Bike> you can abate that by dealing with a start index instead
[05:19:11] <Bike> like, in (split (subseq str 1) del), i mean, you still need to allocate subsequences for the result
[05:19:36] <Bike> the position call recapitulates the work of find; you could just call position, and if it returns nil go to the (cons str ()) clause
[05:24:53] <cuz> Ah I think I see it, there's no need to create a new substring when we can just track the start index of the string
[05:26:42] <cuz> And the character function is exactly what I had in mind, thanks for sharing
[05:26:48] *** Joins: cjb (~cjb@user/cjb)
[05:29:54] <Bike> Happy to help
[05:33:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[05:33:30] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[05:34:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[05:37:56] <cuz> Is there a better way to check for an empty str than (= 0 (length str))
[05:38:45] <Bike> nah, that's about it. or (zerop (length str)) is a little nicer.
[05:41:12] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[05:43:16] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[05:44:51] <cuz> Thanks for the help. It's getting late so I'm going to hop off. As long as these basic questions aren't too bothersome I'll drop in again. It's really helpful getting feedback while learning. It's much easier to drop bad habits while picking up a language than after...
[05:46:21] *** Parts: cuz (~user@2601:182:cc02:8b0:39d7:a0a0:94f3:fad5) (ERC (IRC client for Emacs 27.1))
[05:47:30] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[05:47:39] *** Joins: Oladon (~olad@98.43.81.226)
[05:47:47] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 268 seconds)
[05:49:37] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net)
[05:59:35] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net) (Quit: Client closed)
[06:14:34] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: slep)
[06:16:14] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[06:19:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[06:19:25] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[06:45:54] *** Joins: prxq_ (~quassel@x4db6cf8b.dyn.telefonica.de)
[06:50:10] *** Quits: prxq (~quassel@x4db46614.dyn.telefonica.de) (Ping timeout: 272 seconds)
[06:50:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:13:22] *** Joins: bilegeek (~bilegeek@11.sub-174-208-196.myvzw.com)
[07:15:56] *** Joins: Guest45 (~Guest45@ool-44c57707.dyn.optonline.net)
[07:28:04] *** Quits: Guest45 (~Guest45@ool-44c57707.dyn.optonline.net) (Ping timeout: 246 seconds)
[07:31:37] <beach> Good morning everyone!
[07:32:30] *** Joins: slbtty (~slbtty@206.176.129.9)
[07:32:33] *** Quits: bilegeek (~bilegeek@11.sub-174-208-196.myvzw.com) (Read error: Connection reset by peer)
[07:33:16] *** Quits: slbtty (~slbtty@206.176.129.9) (Client Quit)
[07:33:59] *** Joins: bilegeek (~bilegeek@11.sub-174-208-196.myvzw.com)
[07:34:23] *** Joins: Guest45 (~Guest45@ool-44c57707.dyn.optonline.net)
[07:34:30] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[08:06:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[08:09:36] *** Quits: Guest45 (~Guest45@ool-44c57707.dyn.optonline.net) (Quit: Client closed)
[08:10:58] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:11:55] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[08:12:12] *** Lord_of_Life_ is now known as Lord_of_Life
[08:13:17] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:19:10] *** notzmv is now known as [deleted]
[08:23:02] <Josh_2> Good morning beach
[08:29:33] *** Quits: cjb (~cjb@user/cjb) ()
[08:41:10] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[08:46:12] *** Joins: beegs (~beegs@2600:8805:d50c:4200::3a89)
[09:08:18] *** Quits: bilegeek (~bilegeek@11.sub-174-208-196.myvzw.com) (Quit: Leaving)
[09:16:33] *** Joins: cjb (~cjb@user/cjb)
[09:24:40] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:29:46] *** Quits: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de) (Ping timeout: 268 seconds)
[09:31:13] *** Joins: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de)
[09:36:15] *** Joins: dsk (~dsk@user/dsk)
[09:40:59] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (Ping timeout: 272 seconds)
[09:41:01] *** Joins: lacedaemon (~quassel@2a01:4f8:200:2425::adda)
[09:41:01] *** ChanServ sets mode: +o lacedaemon
[09:44:57] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[09:53:12] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[10:20:40] *** Quits: cjb (~cjb@user/cjb) ()
[10:28:18] *** Quits: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[10:30:28] *** Joins: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de)
[10:45:59] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[10:56:22] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[10:57:45] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 256 seconds)
[10:58:09] <susam> Good morning, everyone!
[10:58:12] <susam> Good morning, beach!
[11:06:35] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:08:01] *** Joins: shka (~herr@109.231.62.239)
[11:34:39] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[11:49:19] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[11:57:01] *** Joins: frgo_ (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de)
[11:59:14] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[12:01:13] *** Quits: frgo (~frgo@p200300deef27d700402d8f8025fdec99.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:21:48] *** Joins: pve (~pve@178-55-192-74.bb.dnainternet.fi)
[12:22:52] *** Quits: frgo_ (~frgo@p200300deef27d70035301fe9f4f43916.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:23:21] *** Joins: frgo (~frgo@p200300deef27d7006c9b48247a41b138.dip0.t-ipconnect.de)
[12:31:53] *** Quits: utis (~utis@cm-84.214.179.98.getinternet.no) (Ping timeout: 265 seconds)
[12:33:42] *** Joins: utis (~utis@cm-84.214.179.98.getinternet.no)
[12:37:20] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:05] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:48:13] *** Quits: lad (~lad@user/lad) (Ping timeout: 246 seconds)
[12:48:30] <jmercouris> good morning everyone
[12:48:53] <beach> Hello jmercouris.
[12:49:37] <jmercouris> beach: what do you think of wrapping CL in a simplified visual Lisp a la fructure?
[12:49:50] <jmercouris> beach: in case you missed the link: https://github.com/disconcision/fructure
[12:50:01] <jmercouris> I'm trying to make it approachable for people who are not programmers
[12:50:28] <beach> I can't easily imagine myself not being a programmer.
[12:50:50] <jmercouris> I have the same problem
[12:51:00] <jmercouris> It's been so many years, it is like asking me to imagine being a tomato
[12:51:04] <jmercouris> I don't know how tomatoes feel
[12:51:58] <beach> Stuff like that looks a total waste of time to me, because everything would take way longer to define, so I can't imagine why people would prefer wasting their time like that rather than learning to do it more efficiently.
[12:54:13] <easye> Given that there are more semantic cues in the fructure representation (position, color, shape) it is potentially more expressive than the line-oriented, 80x25 column representation baked into how languages have been defined for the last 50 years, it is potentially more expressive.
[12:54:39] <jmercouris> beach: for the same reason people use Excel
[12:55:00] <jmercouris> they are 'afraid' of languages, but a block based, simple UI could be useful
[12:55:06] <jmercouris> I just want to help people make little macros/functions in Lisp
[12:55:13] <easye> But I don't think that will really help "people who aren't programmers".  They would become "programmers" but with a different set of cognitive basics.
[12:55:15] <beach> I don't know anyone who uses Excel, so I can't interview any one to ask them.
[12:55:19] <jmercouris> and I am trying to think of how to make it easier for non-programmers to benefit from programmring
[12:55:40] <easye> jmercouris: the snarky answer is for them to learn about programming...
[12:55:46] <jmercouris> well, yeah
[12:56:04] <jmercouris> but you will not get someone who is a designer to learn about programming
[12:56:10] <jmercouris> I still want them to be able to get some of the benefits in Nyxt though
[12:56:32] <susam> I think the goal is a bit contradictory. "How ot make it easier for non-programmers to benefit from programming" in my mind sounds like "How to make programming easier for beginners?", so they are going to turn into programmers, after all.
[12:56:36] <susam> s/ot/to/
[12:56:38] <beach> jmercouris: Did you read the "blog" about Multics people teaching secretaries to write Emacs extensions in Lisp?
[12:56:53] <jmercouris> I've not read that, no
[12:57:11] <jmercouris> I think this is a quite different context though
[12:57:17] <jmercouris> different time, different place
[12:58:00] <easye> I seriously studied "visual programming languages" in the early 90s, especially wrt. representations of programs in VR/3space interfaces.  In the end, I didn't see a real advantage to representing programs in 3space until people had some basic intuition about building things in 3space.
[12:58:07] <beach> Well, I have no advice to give, so I can just wish you good luck.
[12:58:23] <jmercouris> OK, I will keep exploring this
[12:58:29] <jmercouris> I will try to learn what made excel successful
[12:58:58] <easye> Copying VisiCalc is what made Excel successful...
[12:59:38] <jmercouris> OK
[12:59:44] <jmercouris> what made Visicalc successful?
[12:59:50] <jmercouris> why are people willing to write little programs in excel?
[13:00:11] <beach> I think it was at least partly that there was on need to express control explicitly, not to start or stop that control.
[13:00:27] <jmercouris> right, no conditions
[13:00:29] <jmercouris> just a set of operations
[13:00:35] <jmercouris> hm, that is a good point
[13:00:41] <jmercouris> I don't mean lisp conditions, I mean branches
[13:00:52] <jmercouris> if, when, unless, etc
[13:00:57] <beach> Yes of course.
[13:00:58] <easye> VisiCalc was one of the killer apps for the 8bit computers of the 80s.  You could essentially automate any small (or even large) business in a way that required "systems analysts" and "systems programmers" before.
[13:01:36] <splittist> I don't think people program in Excel because they are afraid of programming. (Sometime one programs in Excel because one is afraid of Corporate IT.)
[13:02:16] <easye> splittist: very much agree about not having to involve IT.
[13:05:49] <beach> jmercouris: The main problem with visual languages is that you need a model of control that the users can understand...
[13:06:08] <jmercouris> hm, yes
[13:06:15] <beach> jmercouris: If you just compute outputs whenever inputs change, then you won'[t be able to express things like recursion.
[13:06:37] <jmercouris> I think I will start with the simplest case, a simple function composed of functions
[13:06:40] <jmercouris> like you said, no branches
[13:06:44] <beach> Hardware people have a clock for that, but synchronism is an extremely difficult concept to master.
[13:06:50] <jmercouris> and they can drag and drop function blocks
[13:07:32] <beach> jmercouris: Like I said, you will get into all kinds of trouble with that if you want to do recursion or any other kind of repetition.
[13:07:44] <White_Flame> every foray into any of this stuff always leaves me wanting actual AI to convey concepts to the machine.  Anything less than that is going to be a cheap hack
[13:07:49] <jmercouris> no loops/recursion either then
[13:08:08] <beach> jmercouris: So as I recall, MAX (visual language for music) used a concept of a "token", which would trigger a computation.
[13:08:51] <easye> A  "token" used in something like a Petri Net <https://en.wikipedia.org/wiki/Petri_net>?
[13:10:17] <beach> jmercouris: So either you are very limited in what can be expressed, or you have a difficult choice to make in coming up with a control model that your "non-programmer" users can understand.
[13:11:00] <jmercouris> yes, simpler = less capabilities
[13:11:07] <jmercouris> the tradeoff every langauge designer often makes
[13:12:14] <beach> Oh, but here you are talking not Turing complete.  Not many language designers are faced with that choice.
[13:14:23] <beach> "Can I create a program to compute compound interest?"  "Sure, but you have to change your program each time you want a different number of years!".
[13:14:41] *** Joins: davep (uid504677@id-504677.tinside.irccloud.com)
[13:14:51] <beach> "Oh, you want 100 years?  Then you need to repeat that box 100 times!"
[13:16:12] <beach> As I wrote in one of my (unfinished) books. an essential part of programming is to express an infinite number of cases with a finite amount of code.
[13:16:53] <jmercouris> yeah, I'll need to think more about this
[13:16:57] <easye> Well, "countably infinite".
[13:17:03] <jmercouris> it's just a concept I'm toying with, it will be perhaps a year or more until implementation starts
[13:17:12] <jmercouris> I like to ask questions well in advance and think about things
[13:18:08] *** Quits: pve (~pve@178-55-192-74.bb.dnainternet.fi) (Quit: leaving)
[13:22:05] *** Joins: pve (~pve@178-55-192-74.bb.dnainternet.fi)
[13:23:46] <_death> I tried using blockly some years ago at a job to give some basic "business rule" interface to non-programmers, but the conclusion was that it was too complicated and it had to be replaced with a simpler UI
[13:24:20] <_death> (and a more limited business rule language)
[13:30:26] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[13:30:27] *** Joins: gera (~gera@user/gera)
[13:36:58] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Remote host closed the connection)
[13:36:58] *** Quits: gera (~gera@user/gera) (Read error: Connection reset by peer)
[13:38:26] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:24f8:e131:401c:771c)
[13:43:06] <pjb> beach: imagine yourself born in 1519.  (that said there were Ramon Lull, and al-Khwārizmī).
[13:47:04] *** Joins: lotuseater (~user@p200300e787025700249b68ce60a870ab.dip0.t-ipconnect.de)
[13:49:48] *** Joins: treflip (~user@95.79.32.99)
[13:51:20] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[13:51:38] <beach> I guess I have chronic lack of imagination.
[13:51:40] <pjb> Eventually, you'd have an AI that would "program itself" to answer to the demands of the users.  Will that be "programming" the AI.  Users will have to specify what they what; this can be called "programming".   But even that, users won't be able to do it: they're not able  to do it with us programmers!  If they could tell us what they want…
[13:53:42] <pjb> beach: my point is that without computers, it's difficult to be a programmer. Even if some of the attitude can be transfered.  A funny point: in the Armée de l'Air, the only reconversion possible for programmers, is into textile procurement (to make the uniforms). (not actually a bad option, but it still sounds strange).
[13:54:23] <_death> there'll be a component that infers what they have in mind, literally
[13:54:56] <pjb> Of course, it's an important part of AI to build a model of the external agents.
[13:55:17] <pjb> s/AI/I/
[13:56:43] <_death> using jaccard's loom?
[13:57:01] <_death> *jacquard
[13:59:18] *** Joins: mayuresh (~mayuresh@182.58.192.181)
[14:01:09] <mayuresh> hello. :)
[14:01:16] <flip214> pjb: well, "just" invent your own computer...  https://en.wikipedia.org/wiki/Antikythera_mechanism
[14:01:41] <mayuresh> invent your own computer! that's interesting. :D
[14:01:59] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:02:08] <jmercouris> anything can be a computer, as long as it needn't be turing complete
[14:02:12] <jmercouris> is a bag of coins not a computer?
[14:02:19] <jmercouris> I add and remove coins to the bag to calculate new values
[14:02:23] <mayuresh> you could say, "make" your own computer, but you'd need to have sex.
[14:02:33] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[14:02:38] <mayuresh> :-p
[14:03:11] <jmercouris> Let's try to keep it on topic everyone, my bad for continuing...
[14:03:13] <mayuresh> but then again, test-tube babies are all the rage these days.
[14:03:24] <jmercouris> please... on-topic
[14:03:32] <mayuresh> roger roger.
[14:03:37] <mayuresh> :-)
[14:04:28] <mayuresh> i just found out about these 2 books on lisp;
[14:04:35] <mayuresh> essentials of programming languages, and
[14:04:37] <flip214> jmercouris: with enough coins (or stones) you can do lambda-calculus, so arbitrary calculations are possible, IMU
[14:04:39] <mayuresh> lisp in small pieces
[14:05:14] <mayuresh> both "eopl" and "lisp" seem to be very interesting.
[14:05:19] <mayuresh> both books, i meant.
[14:05:24] <_death> jmercouris: it's very easy for a process to be turing complete.. you can read about the principle of computational equivalence in http://www.rudyrucker.com/lifebox/html/
[14:05:26] <jmercouris> I've heard good things about those books
[14:05:31] <pjb> flip214: indeed, this is what I hinted at.
[14:05:45] <pjb> flip214: note 1519 is the birth date of Leonardo Da Vinci ;-)
[14:06:09] <mayuresh> pjb, flip214, there was a request to get back on-topic. please do so.
[14:06:13] <mayuresh> at the earliest.
[14:06:16] <mayuresh> :)
[14:06:19] <pjb> oh, sorry.
[14:07:01] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:10:12] <mayuresh> jmercouris, do you know of anyone (personally) who's worked through those books?
[14:12:28] <mayuresh> [off-topic] anyone here knows how to remap the "capslock" key to "control" on a p.c. running ubuntu?
[14:13:40] <beach> mayuresh: Lisp in Small Pieces mostly uses Scheme, and it is not a book for learning Lisp or Scheme.  It is essentially a book about language and compiler design.
[14:14:13] <beach> mayuresh: But it is an excellent book.  And the English translation is even better than the original, thanks to a totally brilliant translator.
[14:15:01] <mayuresh> beach, thanks for that review, though i knew about the intent of the book.
[14:15:04] <beach> And yes, I have read both the original and the translation, and I used the French one to teach from in some fairly advanced course.
[14:15:58] <mayuresh> i decided to restart from the basics, right from "simply scheme" to "sicp" to "eopl" and "lisp" to prepare for common lisp.
[14:16:06] *** prxq_ is now known as prxq
[14:16:24] <mayuresh> after all, though i have been a c++ programmer, i haven't written a single program in over 15 years.
[14:16:43] <beach> Isn't that a bit like the (rather silly, in my opinion) to study Latin before learning Spanish.
[14:17:07] <beach> s/to/idea to/
[14:17:15] <mayuresh> i don't remember much about programming anymore.
[14:17:35] <mayuresh> that is taking an idea and building a program to realise it in code.
[14:17:46] <mayuresh> 1.5 decades takes it's toll. :(
[14:18:01] <beach> Yes, I see.
[14:18:57] <mayuresh> plus there has been a long term illness to cope with.
[14:19:23] <beach> If I were you, I would start with "Practical Common Lisp" instead.
[14:19:31] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Remote host closed the connection)
[14:19:37] <jmercouris> If I were you I would start with gentle introduction to symbolic computation
[14:19:44] <jmercouris> if you don't remember anything about programming
[14:19:48] <beach> And I would certainly not do Lisp in Small Pieces before a book on Common Lisp.
[14:19:58] <jmercouris> I would also download portacle
[14:20:02] <mayuresh> i actually got motivated to return to programming because i read the introduction to "on lisp" and got blown away with the lisp way of writing programs.
[14:20:13] <jmercouris> mayuresh: https://portacle.github.io/
[14:20:20] <jmercouris> mayuresh: https://www.cs.cmu.edu/~dst/LispBook/book.pdf
[14:21:32] <mayuresh> jmercouris, is that the previous edition of the book by touretzky?
[14:21:53] <mayuresh> i heard that "dover" has brought out a newer edition with improvements done by touretzky.
[14:22:04] <jmercouris> well, there are some improvements to be made
[14:22:11] <jmercouris> for your purposes they are trivial errors I have found
[14:22:35] <jmercouris> the book has misled me about Lisp somewhat, but it also gave me a wholistic understanding of many things not done in PCL
[14:22:44] <jmercouris> PCL (practical common lisp) is for starting up quickly
[14:23:01] <jmercouris> unless you have a practical reason for doing so (job, etc), then better to go slowly
[14:23:30] <mayuresh> jmercouris, i can't go for a job, not eligible nor acceptable in the market.
[14:23:43] <jmercouris> OK, that's irrelevant
[14:23:49] <mayuresh> i am learning "common lisp" and going to work with it primarily for fun.
[14:24:00] <jmercouris> great, then start with the book and link I reccommended you
[14:24:05] <jmercouris> it will give you a lot to try
[14:24:07] <mayuresh> sure, thanks.
[14:24:10] <jmercouris> then you can join the clschool channel
[14:24:20] <mayuresh> cool, thanks.
[14:24:26] <mayuresh> on liberchat?
[14:24:28] <jmercouris> yes
[14:24:30] <mayuresh> libera.chat?
[14:24:45] <jmercouris> no problem
[14:29:24] <mayuresh> i also found a book about lambda calculus by "dover" on amazon.com
[14:29:47] <jmercouris> that won't be very useful for you
[14:29:48] <mayuresh> could some of you please check and tell me if that could be useful too?
[14:29:57] <mayuresh> okay
[14:30:05] <jmercouris> it may be interesting, but it won't make you a better lisp programmer
[14:30:10] <jmercouris> at least not in a meaningful way
[14:30:15] <mayuresh> okay
[14:30:25] <mayuresh> i thought understanding lambda was important.
[14:30:34] <jmercouris> only surface level stuff
[14:31:56] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:34:29] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:35:21] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[14:35:28] <mayuresh> okay, i gotta go, time for snack followed by emacs training session.
[14:35:34] <mayuresh> see you all later.
[14:35:39] <mayuresh> thanks for the tips.
[14:35:43] <jmercouris> no problem, goodbye
[14:36:00] <mayuresh> special thanks to jmercouris for the links and encouragement.
[14:36:07] *** Quits: mayuresh (~mayuresh@182.58.192.181) (Quit: Leaving)
[14:37:10] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[14:37:57] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[14:41:06] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[14:42:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 252 seconds)
[14:50:18] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (Ping timeout: 240 seconds)
[14:50:24] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[14:50:58] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[14:55:27] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:55:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[14:56:03] *** Quits: frgo (~frgo@p200300deef27d7006c9b48247a41b138.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:56:30] *** Joins: frgo (~frgo@p200300deef27d7006c9b48247a41b138.dip0.t-ipconnect.de)
[14:58:18] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[15:02:25] *** Joins: mingus (~jan-magnu@ti0135a400-2471.bb.online.no)
[15:04:08] *** Joins: random-nick (~random-ni@87.116.181.229)
[15:05:06] <flip214> minion: memo for mayuresh: # setxkbmap -option caps:ctrl_modifier ....
[15:05:08] <minion> Remembered. I'll tell mayuresh when he/she/it next speaks.
[15:16:19] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:19:35] *** Joins: xsperry (~as@user/xsperry)
[15:22:53] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[15:27:08] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[15:29:46] *** Joins: Krystof (~user@81.174.155.115)
[15:31:34] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[15:35:13] *** Quits: terpri (~terpri@user/terpri) (Ping timeout: 272 seconds)
[15:36:18] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[15:39:28] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:41:36] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[16:03:43] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[16:12:00] <lisp123> is there a way to apply a function to all the slots of a defstruct automatically?
[16:12:20] <lisp123> and return the object with the transformed slots?
[16:16:11] <phadthai> various implementations allow to enumerate struct slot names, but it's implementation-specific; there might be some libraries to do it portable on those that do, perhaps as part of SWANK too... another independent way to do it would be using your own define macro and related tools
[16:16:12] <_death> sounds like you want a list
[16:17:10] <phadthai> for CLOS classes there's the MOP
[16:17:11] <_death> (defstruct (foo (:type list)) a b c) (foo-b (mapcar #'1+ (make-foo :a 1 :b 2 :c 3))) => 3
[16:19:02] <phadthai> and a struct can also be a vector inside, in which case it would also be possible to access the vector indexes as the slot contents
[16:21:16] <lisp123> phadthai: thanks
[16:21:50] <phadthai> well or a list like _death's example
[16:22:38] <lisp123> _death: but the list only works for foo-b, I want an easy way to get new-foo
[16:22:57] <lisp123> might just have to do it the old fashioned way of manually setting each slots value
[16:22:59] <_death> the mapcar returns the new foo..
[16:23:25] <lisp123> oh cool
[16:23:30] <lisp123> is that portable code?
[16:23:36] <_death> it's ANSI CL
[16:23:40] <lisp123> First time I saw lists & structs being combiend
[16:23:46] <_death> clhs defstruct
[16:23:47] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_defstr.htm
[16:23:50] <lisp123> _death: thanks!
[16:25:38] <phadthai> if you see at the top: "Macro DEFSTRUCT"
[16:25:51] <phadthai> so one could if wanted also use a custom DEFINE-... macro
[16:26:11] <phadthai> that can internally call defclass or defstruct, or any wanted alternative custom storage system
[16:26:14] <_death> the old fashioned way (creating a function that takes a foo object and returns a new foo object) is also a good alternative.. probably the one you actually want in general
[16:26:19] *** Joins: selwyn (~selwyn@user/selwyn)
[16:26:47] <phadthai> that custom DEFINE-... macro would have access to all the parameters supplied
[16:27:00] <lisp123> thanks
[16:27:01] <phadthai> including slot names of course
[16:27:28] <lisp123> macros are still beyond my scope, but slowly getting there ;)
[16:28:02] <lisp123> quite interesting that defstruct can be combined with lists
[16:28:28] <phadthai> it'll vary with the implementation, but for fun, you can also macroexpand the defstruct form
[16:28:30] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[16:28:41] <phadthai> and see what special operators it calls
[16:30:51] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[16:31:29] <_death> btw, yay for specbot and minion
[16:32:40] <lisp123> phadthai: thanks, will do
[16:33:43] *** Joins: treflip (~user@95.79.32.99)
[16:34:47] <_death> it's also interesting that defstruct's :type and be a specialized vector.. (defstruct (foo (:type (vector character))) a b c) (make-foo :a #\L :b #\O :c #\L) => "LOL"
[16:34:53] <beach> minion: Welcome back!
[16:34:55] <minion> thanks!
[16:37:01] <phadthai> (defstruct (foo (:type (vector character)))
[16:37:16] <phadthai> err, paste in the wrong window :)
[16:37:26] <phadthai> very nice example
[16:47:56] <phadthai> other macro-related magic is that unlike setq, setf (and related set operators like psetf, rotatef, shitf) are macros and it allows defining custom accessors... then also interesting is with-accessors, that internally will usually be implemented using (symbol-)macrolet, etc
[16:48:39] <phadthai> so some may also use macros where functions are fine, but they are at the same time powerful and very useful to enhance the language, also as part of domain specific languages
[16:50:48] <phadthai> with- macros are also commonly used for autocleanup with unwind-protect, for instance an implementation supporting concurrency locks will usually provide a related with-lock or such macro
[16:53:41] <phadthai> bbl, have fun
[16:53:51] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 265 seconds)
[16:54:12] *** Joins: livoreno (~livoreno@user/notzmv)
[16:56:15] <phadthai> well will link to an example custom DEFINE- macro that wraps around DEFCLASS as it was at the beginning of the discussion: http://git.pulsar-zone.net/?p=mmondor.git;a=blob;f=mmsoftware/cl/server/store.lisp;hb=HEAD#l792
[17:02:01] *** Joins: Bike (~Glossina@71.69.170.70)
[17:02:01] *** ChanServ sets mode: +o Bike
[17:08:29] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[17:09:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[17:09:56] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:10:07] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 258 seconds)
[17:13:22] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[17:14:35] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[17:15:05] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:23:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[17:24:53] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[17:25:11] *** Joins: aeth (~aeth@user/aeth)
[17:27:53] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[17:40:50] *** Joins: djuber (~user@65.79.128.64)
[17:55:28] *** Parts: lisp123 (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[17:56:08] *** Joins: dlowe (~dlowe@user/dlowe)
[18:21:10] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:22:37] <_death> ouch, someone decided to deprecate COUNT clause in ITERATE (yes, ITERATE from 1989)
[18:23:12] <Bike> they were talking about it before. i think the reasoning was that it was ambiguous wrt calls to the function
[18:24:11] <_death> I'm not a user of iterate nowadays, but some libraries use it.. and now they emit a WARNING (not a style-warning..) which causes ASDF to pop up a debugger
[18:41:02] <gendl> we have a crucial compatibility library which depends on ITERATE (i'm not sure if we use COUNT).
[18:41:50] <Bike> well, when they tlaked about it before they were talking about making it a style warning or whatnot, i think
[18:42:03] <Bike> i suggested a phased deprecation thing like sbcl does
[18:42:03] *** Joins: aeth_ (~aeth@user/aeth)
[18:42:06] <_death> "Don't COUNT, COUNTING!"
[18:42:17] <gendl> meanwhile I'm about to embark upon a project of integrating CLSQL into our environment. Gonna try it with sqlite to start with (which seems to be built into most linux distros)
[18:42:29] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[18:42:34] *** aeth_ is now known as aeth
[18:43:35] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[18:44:02] <gendl> once upon a time i had my own lispy construct for SQL table definition which would automatically to ALTER TABLE when it noticed changes in table definitions... going to try to replace that with the built-in table def macros in CLSQL.  Is CLSQL still the go-to thing for this?  It seems to be a Kevin Rosenberg invention and I haven't heard much from him in this community lately...
[18:44:35] *** Joins: sander (~sander@user/sander)
[18:45:39] <_death> I often just use strings.. there are libraries like sxql or cl-yesql
[18:47:10] *** Joins: cracauer (~gizmo@koef.zs64.net)
[18:51:54] <gendl> "just use strings" -- you mean strings of SQL commands?
[18:53:07] <_death> gendl: yes, but that's because my db usage isn't heavy.. if I were writing something larger I'd consider the libraries I mentioned
[18:57:28] <_death> for example this week I started writing a small benchmark library that stores results in an sqlite db: mpv https://adeht.org/dump/vid-2021-06-30T0243.mp4
[18:57:33] *** Joins: selwyn (~selwyn@user/selwyn)
[18:58:30] <shka> _death: this looks really useful!
[18:58:45] <shka> _death: is it open source?
[18:59:01] <shka> can i use it?
[18:59:08] <_death> I don't mind putting it on github
[18:59:20] <_death> but of course it needs some work :)
[18:59:46] <shka> yeah, but it is major improvement over org mode file with test results :D
[18:59:54] <shka> and manually editing it
[19:00:11] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[19:02:40] <_death> shka: https://github.com/death/cheetos .. note that you need to create the db file yourself atm.. I did sqlite3 cheetos.db < ~/lisp/cheetos/db/create.sql in ~/.local/share/cheetos/
[19:03:06] <_death> I'll add a readme/MIT license later today
[19:03:13] <shka> greatly appreciated
[19:03:51] <_death> some of the code is a bit ugly and could use factoring.. feel free to fix
[19:04:04] <shka> dude, have you seen MY code?
[19:04:06] <shka> :P
[19:04:15] <_death> :)
[19:04:22] <shka> it is advance ugly
[19:04:52] <shka> seriously though, cataloging benchmark results is a pretty useful thing
[19:05:40] <_death> yes.. and you can run a benchmark with a different tag, so you can tell a bit about the context in which it was run
[19:05:46] <shka> ideally, i would prefer to have commit hash, but date is also completely fine
[19:06:15] *** Joins: Alfr (~Alfr@user/alfr)
[19:06:40] <shka> if i have a benchmark that will run for several minutes, will it overflow in the sqlite?
[19:06:51] <_death> e.g., today I replaced a list with a priority queue, so I made my change and tagged the benchmark run with say :pileup
[19:07:22] <_death> shka: no?.. I think INTEGER is 64-bit
[19:07:33] <shka> right
[19:07:39] <shka> i am not sure actually
[19:07:41] <_death> also, currently it's sbcl-only because there's no TIME-LIST ;)
[19:08:09] <_death> well, INTEGER is a kind of variable-length int up to 64-bit
[19:08:25] <shka> i will gonna check it out tomorrow
[19:08:34] <shka> or at least i hope to do so
[19:08:39] <shka> thanks for sharing!
[19:08:44] <_death> have fun ;)
[19:11:21] <_death> also atm define-benchmark has no way to delimit the actual code that needs to be timed.. so it may change soon
[19:15:03] <gendl> _death: is that a clim interface I'm looking at?
[19:15:07] <_death> yes
[19:22:16] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:33:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[19:37:23] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:39:22] *** Joins: aeth (~aeth@user/aeth)
[19:43:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[19:43:25] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:51:54] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Quit: bye)
[19:52:31] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[19:59:08] *** Quits: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de) (Quit: WeeChat 3.2)
[20:09:55] *** Joins: rogersm (~rogersm@92.59.121.109)
[20:12:57] <Josh_2> 'ello 'ello
[20:16:09] <beach> Hey Josh_2.
[20:16:16] <beach> Still working hard I take it?
[20:20:21] <Josh_2> Yep, although I got a new puppy yesterday, so bit intermittent atm
[20:20:35] <beach> Heh, I see.
[20:28:55] <jcowan>  Note that the conformance of ALTER TABlE across different DBMSes is very inconsistent
[20:36:12] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[20:36:43] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[20:37:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[20:38:36] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[20:44:02] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[20:56:04] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 272 seconds)
[20:59:09] *** Joins: jasom (~aidenn@ip184-189-218-164.sb.sd.cox.net)
[21:00:27] *** Joins: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it)
[21:03:55] *** Quits: frgo (~frgo@p200300deef27d7006c9b48247a41b138.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:04:25] *** Joins: frgo (~frgo@p200300deef27d7006c9b48247a41b138.dip0.t-ipconnect.de)
[21:08:37] *** Quits: frgo (~frgo@p200300deef27d7006c9b48247a41b138.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:10:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:12:32] *** Joins: lad (~lad@user/lad)
[21:15:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[21:19:38] *** Quits: jasom (~aidenn@ip184-189-218-164.sb.sd.cox.net) (Ping timeout: 252 seconds)
[21:20:08] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[21:21:18] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[21:24:21] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[21:24:43] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:25:54] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 240 seconds)
[21:27:22] *** Joins: selwyn_ (~selwyn@user/selwyn)
[21:29:50] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[21:31:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[21:44:30] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:53:12] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:55:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Client Quit)
[21:57:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:58:50] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[22:19:42] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[22:20:01] *** Joins: livoreno (~livoreno@user/notzmv)
[22:33:47] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[22:34:05] *** Joins: frgo (~frgo@dynamic-046-114-147-099.46.114.pool.telefonica.de)
[22:38:55] *** Quits: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[22:40:42] *** Joins: akoana (~ah@user/akoana)
[22:43:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[22:47:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:47:41] *** Quits: frgo (~frgo@dynamic-046-114-147-099.46.114.pool.telefonica.de) (Remote host closed the connection)
[22:51:44] *** Quits: dlowe (~dlowe@user/dlowe) (Ping timeout: 268 seconds)
[22:52:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[23:06:57] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:07:41] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[23:27:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:32:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 272 seconds)
[23:43:51] *** Quits: rogersm (~rogersm@92.59.121.109) (Quit: Leaving...)
[23:45:01] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[23:53:42] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[23:59:26] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
