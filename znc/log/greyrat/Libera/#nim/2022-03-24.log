[00:07:14] <FromDiscord> <Shinyzenith> @auxym I don't quite understand how to implement the ref solution, can you provide an example?
[00:07:26] <FromDiscord> <Shinyzenith> I still don't quite understand it's utility either
[00:07:31] *** Quits: Jjp137 (~Jjp137@2603-8000-1700-5881-02e9-3aff-fe42-7355.res6.spectrum.com) (Quit: Leaving)
[00:08:38] <FromDiscord> <ynfle> @wsantos You cana use it in as a type delaration for a proc/func/etc. param https://play.nim-lang.org/#ix=3Ti2
[00:09:02] <reversem3[m]> Trying to learn parsexml like I learned lxml. Is there a good example have to parse out levels of a xml file and attributes  ? 
[00:09:09] <FromDiscord> <wsantos> Yeah, I was wanting to use as a type 😦
[00:09:30] <FromDiscord> <ynfle> In reply to @wsantos "Yeah, I was wanting": What do you mean?
[00:10:01] <FromDiscord> <ynfle> In reply to @reversem3 "Trying to learn parsexml": What do you mean by levels? Can you show an example of what you'd want to acheive
[00:10:05] <FromDiscord> <wsantos> this
[00:10:07] <FromDiscord> <wsantos> sent a code paste, see https://play.nim-lang.org/#ix=3Ti3
[00:11:59] <FromDiscord> <ynfle> Why are you still using inheritance?
[00:12:00] *** Joins: Jjp137 (~Jjp137@2603-8000-1700-5881-02e9-3aff-fe42-7355.res6.spectrum.com)
[00:15:19] <FromDiscord> <wsantos> What do you mean ? I still need to use so others can create "dbwrappers" for my framework, right ?
[00:15:54] <FromDiscord> <wsantos> My plan is to keep inheritance and add what we discussed yesterday, but in the mean time I decided to test concepts as types 😄
[00:16:10] <FromDiscord> <ynfle> You don't need to
[00:18:01] <FromDiscord> <wsantos> I don't know what to do then
[00:18:11] <FromDiscord> <ynfle> What's you issue?
[00:18:28] <FromDiscord> <ynfle> Any type that fulfils the ciretion in the concept will compile
[00:18:39] <FromDiscord> <ynfle> They don't need to inherit from a specific type
[00:18:48] <FromDiscord> <ynfle> It's like an interface in Java
[00:19:07] <FromDiscord> <wsantos> I want to abstract databases so my system, just know about the the `DatabaseWrapper` , if we need a new DB one could just implement a new class using ` DatabaseWrapper`
[00:19:13] <FromDiscord> <Phil> I would like to point out that java interfaces are decently easier to define
[00:19:22] <FromDiscord> <ynfle> In reply to @Isofruit "*I would like to": 💯
[00:19:33] <reversem3[m]> https://play.nim-lang.org/#ix=3Ti7
[00:19:36] <FromDiscord> <ynfle> But they function the same way that you don't have to implement something,
[00:19:38] <FromDiscord> <Phil> In exchange java interfaces give you like 1% of the power
[00:19:50] <FromDiscord> <ynfle> In reply to @Isofruit "In exchange java interfaces": Lol
[00:19:59] <FromDiscord> <ynfle> In reply to @reversem3 "https://play.nim-lang.org/#ix=3Ti7": What do you want to extract
[00:20:25] <FromDiscord> <wsantos> In reply to @ynfle "They don't need to": that code was a test with concepts
[00:20:40] <FromDiscord> <Phil> In reply to @ynfle "Lol": Like, being able to arbitrarily logic check your types is pretty damn sexy.... now if I could use that and be a fair bit less confused while doing so I'd love it
[00:21:04] <FromDiscord> <wsantos> @ynfle that is my draft so far
[00:21:05] <FromDiscord> <wsantos>  https://media.discordapp.net/attachments/371759389889003532/956278933760933888/unknown.png
[00:21:07] <FromDiscord> <ynfle> In reply to @wsantos "that code was a": I know. But you are trying to define a type instantion with an concept. That doesn't make sense as nim doesn't know the type
[00:21:23] <FromDiscord> <ynfle> In reply to @Isofruit "Like, being able to": Lol
[00:21:38] <FromDiscord> <wsantos> Yeap I know that, I'm not doing it, it was just a dummy test I did earlier
[00:21:38] <reversem3[m]> FromDiscord: The root , the devices qa_status
[00:21:48] <FromDiscord> <Recruit_main707> concepts are more like fancy generics, you probably want to used methods and dynamic dispatch
[00:22:43] <FromDiscord> <ynfle> In reply to @wsantos "Yeap I know that,": What I was saying yesterday is the DBConn from each db_ module implements the same API so they'd all pass the test of your concept. No need for wrappers
[00:22:55] <FromDiscord> <ynfle> In reply to @ynfle "What I was saying": Unless you are doing something fancier
[00:23:00] <FromDiscord> <Phil> Wait, are you implementing your own connection pool wsantos? Well, single connection more like, but general point stands
[00:23:41] <FromDiscord> <wsantos> Not really @Phil I'm doing a Web framework and I'm working on its ORM right now
[00:23:52] <FromDiscord> <wsantos> looks good so far 😄
[00:23:53] <FromDiscord> <wsantos>  https://media.discordapp.net/attachments/371759389889003532/956279638378819594/unknown.png
[00:24:09] <FromDiscord> <wsantos> This all works, now I'm working on the Database connection part, not pool yet
[00:24:26] <FromDiscord> <wsantos> But I'll need the `fancier` stuff for sure
[00:24:42] <FromDiscord> <wsantos>  https://media.discordapp.net/attachments/371759389889003532/956279843425763338/unknown.png
[00:24:47] <FromDiscord> <Phil> Next question, why have an extra object type with a single field?
[00:24:57] <FromDiscord> <Phil> Instead of using the object directly
[00:25:13] <FromDiscord> <Phil> (edit) "object" => "field"
[00:25:21] <FromDiscord> <wsantos> You talking about `DatabaseWrapper`  ?
[00:25:31] <FromDiscord> <wsantos> If so this is just me starting to draft it
[00:25:33] <FromDiscord> <Phil> Yeah, you're not attaching any extra data to that one
[00:25:37] <FromDiscord> <Phil> Ah, check
[00:26:14] <FromDiscord> <wsantos> I'll probably do the same as you do in tinypool there too, but not sure yet
[00:26:27] <FromDiscord> <Phil> I'll stick with the advise that chances are such a wrapper type is not needed, but either you'll prove me wrong or as you code it it'll reveal itself
[00:26:55] <FromDiscord> <wsantos> In reply to @ynfle "Unless you are doing": I'll have more things there, like DB operators, connection pool and etc and each DB have different approaches and ideas about it
[00:26:58] <FromDiscord> <Phil> An alias over multiple connection types would likely do
[00:27:19] <FromDiscord> <ynfle> In reply to @reversem3 "FromDiscord: The root ,": The link you posted doens't have that data
[00:27:57] <FromDiscord> <wsantos> In reply to @Isofruit "I'll stick with the": That is what I'm not sure yet, hence the code changing and a heck lot of questions here 😄
[00:28:07] <FromDiscord> <ynfle> In reply to @wsantos "I'll have more things": That's fine. Are you gonna use the wrappers (or build on) std/db_ wrappers?
[00:28:35] <FromDiscord> <Phil> In reply to @wsantos "That is what I'm": Next advise: Stay away from defining the DB schema or reserve that for last, the most important part either way is the db type conversion
[00:29:20] <FromDiscord> <wsantos> In reply to @Isofruit "Next advise: Stay away": What do you mean by `defining the DB schema`. this is also "done"
[00:29:26] <FromDiscord> <wsantos> Still need to do the migrations tho
[00:29:39] <FromDiscord> <Phil> As an ORM user, I do not give a hoot if I can define my DB through you, chances are I can define my own DB myself and more specific than any interface one can generalize over the mixture sqlite, mysql and co
[00:29:40] <FromDiscord> <wsantos> sent a code paste, see https://play.nim-lang.org/#ix=3Tia
[00:29:41] <FromDiscord> <wsantos> this is how it's defined
[00:30:55] <FromDiscord> <ynfle> If you're gonna build on std/db_ wrappers, just use the concept that Beef gave you and then implement the procs separately for each DBConn type
[00:31:00] <FromDiscord> <Phil> In reply to @wsantos "this is how it's": And now arbitrary constraints and unique over multiple columns
[00:31:25] <FromDiscord> <Phil> (edit) "arbitrary" => "/nextarbitrary"
[00:31:28] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2)
[00:31:30] <FromDiscord> <Phil> (edit) "/nextarbitrary" => "/next arbitrary"
[00:31:56] <FromDiscord> <wsantos> In reply to @ynfle "If you're gonna build": Yeah seems like that I need procs for handling the wrappers and not classes or new wrappers, but I still not sold
[00:32:07] <FromDiscord> <wsantos> In reply to @Isofruit "And now /next arbitrary": Not sure what you mean
[00:32:08] <reversem3[m]> FromDiscord: <ROOT_OEM_REPORT version="1.4"> 
[00:34:07] <reversem3[m]> reversem3[m]: https://play.nim-lang.org/#ix=3Tid
[00:34:40] <FromDiscord> <wsantos> @ynfle maybe I still thinking too much like Python/other languages, it will take time to get used to Nim, but I'm loving it
[00:34:41] <FromDiscord> <ynfle> In reply to @reversem3 "FromDiscord: <ROOT_OEM_REPORT version="1.4">": You want the version?
[00:34:46] <FromDiscord> <ynfle> In reply to @wsantos "<@!767093711112241162> maybe I still": Great
[00:34:59] <FromDiscord> <ynfle> With more code, we can help you
[00:35:56] <FromDiscord> <Phil> In reply to @wsantos "Not sure what you": In Sqlite (I assume also in other DB's, haven't tried), you can define arbitrary constraints in SQL that every entry in a table must fulfill
[00:36:26] <FromDiscord> <Phil> Very nice when, for example, no scenario is allowed where column A contains X while column B contains Y
[00:37:19] <FromDiscord> <Phil> Similarly, another issue I so far had with ORMs was not being able to define "unique-together" constraints through them, when a combination of columns must be unique instead of just a single one.
[00:37:31] <reversem3[m]> I want to learn how to use the library rather than just coding it for me. So if x = the xmlparser and I call x.kind that shows me xmlElementOpen 
[00:38:24] <reversem3[m]> how do I pull the element inside xmlElementOpen ? 
[00:38:35] <FromDiscord> <wsantos> Got it @Phil makes sense
[00:39:02] <FromDiscord> <Phil> In reply to @wsantos "Got it <@!180601887916163073> makes": An example for an absolute monster of those is an image table of mine which has 6 foreign keys and only one of these is allowed to be set at once
[00:40:33] <FromDiscord> <Phil> In reply to @wsantos "Got it <@!180601887916163073> makes": https://pastebin.com/pVhm022y↵Apparently the SQL is too long for discord
[00:41:15] <FromDiscord> <wsantos> that is a lot of constraints for sure
[00:41:19] <FromDiscord> <Phil> Ah, also being able to control when a check happens for a transaction (DEFERRABLE part of the column definition) would be good
[00:41:24] <FromDiscord> <Phil> It's one constraint, just a big one
[00:41:42] <FromDiscord> <Phil> I'm defining all 6 scenarios that are allowed
[00:42:53] <FromDiscord> <Phil> The issue with ORMs is that imo it's semi-wasteful in terms of time to bother with DB creation, I want a DB-output-parser for the most part, that's where the actual work is. For fine-grained DB control I want my raw sql
[00:43:04] <FromDiscord> <Phil> It's why I never use norm's DB creation feature
[00:43:51] <FromDiscord> <Phil> (edit) "The issue with ORMs is that imo it's semi-wasteful in terms of time to bother with DB creation, I want a DB-output-parser for the most part, that's where the actual work is. For fine-grained DB control ... I" 03added "that's done once"
[00:44:35] <FromDiscord> <Phil> That's also why having e.g. the option to write raw SQL and have that be parsed into the model of your choosing is also really nice
[00:44:54] <FromDiscord> <Phil> (edit) "That's also why having e.g. the option to write raw SQL and have that be parsed into the model of your choosing is also really nice ... " 03added "(see Django's rawSQL interface)"
[00:47:03] <FromDiscord> <wsantos> In reply to @Isofruit "The issue with ORMs": I have been thinking about that a lot, my idea is to make what you said work and add it to, I don't plan to put effort on db creation for now at least
[00:48:47] <FromDiscord> <wsantos> (edit) "to," => "to github,"
[00:49:21] <FromDiscord> <ynfle> In reply to @reversem3 "how do I pull": `for i in x:` or `x[0]` for the first elemetn only though
[00:49:43] <FromDiscord> <Phil> In reply to @wsantos "I have been thinking": Yeh, Db creation is one of those things where it's a bit of a "you can't really win"-feast
[00:49:44] <FromDiscord> <ynfle> In reply to @reversem3 "I want to learn": Are you using xmlparser or parsexml?
[00:50:01] <reversem3[m]> FromDiscord: parsexml 
[00:50:36] *** Joins: mahlon (~mahlon@martini.nu)
[00:50:40] <FromDiscord> <ynfle> In reply to @reversem3 "FromDiscord: parsexml": Sorry that was for xmlparser. That would parse the whole xml tree and return it to you
[00:51:10] <FromDiscord> <Phil> Because typically you're at best giving parity to what already exists with rawSQL, for anything that goes beyond that you're implementing constraints at the ORM level and that's going to require some significant design legwork to not explode your complexity
[00:51:27] <FromDiscord> <ynfle> In reply to @reversem3 "FromDiscord: parsexml": parsexml is a little more complicated, because you get the elements as they come. You can't look ahead without continueing to parse
[00:51:28] <FromDiscord> <Phil> (edit) "that" => " what rawSQL offers "
[00:51:39] <reversem3[m]> FromDiscord: yeah I don't want to parse the whole tree , I want to be able to upload this to a server and parse out certain information and store in a database 
[00:52:05] <reversem3[m]> First I need to figure out how to parse out the information I need 
[00:52:30] <FromDiscord> <ynfle> In reply to @reversem3 "FromDiscord: yeah I don't": You could parse the whole file then extract that information
[00:53:34] <reversem3[m]> FromDiscord: Ok how would I do that , again I just want help figuring out this 
[00:54:16] <reversem3[m]> Using lxml with python is super easy to do but this has me a little confused 
[00:54:31] <FromDiscord> <ynfle> In reply to @reversem3 "FromDiscord: Ok how would": https://nim-lang.org/docs/xmlparser.html#loadXml%2Cstring%2Cset%5BXmlParseOption%5D
[00:54:39] <FromDiscord> <ynfle> And then helper procs in lxml
[00:54:42] <FromDiscord> <ynfle> (edit) "lxml" => "xmltree"
[00:55:02] <FromDiscord> <ynfle> Like https://nim-lang.org/docs/xmltree.html#%5B%5D%2CXmlNode%2Cint
[00:56:07] <reversem3[m]> ohhh, so what is the point of parsexml then ? 
[00:56:25] <reversem3[m]> the examples are only for html tags 
[01:00:15] <FromDiscord> <ynfle> In reply to @reversem3 "ohhh, so what is": parsexml is to parse it yourself and perhaps build a datastructure or something
[01:00:39] <FromDiscord> <ynfle> xmlparser is the convinient way to parse the whole xml file/string
[01:01:06] <FromDiscord> <ynfle> Also, you can use `findall` in xmltree and the `attr` or `attrs` in xmltree
[01:01:49] <reversem3[m]> ok so use xmlparser to open the file then use xmltree to parse out the elements and attributes ? 
[01:05:55] <FromDiscord> <ynfle> In reply to @reversem3 "ok so use xmlparser": Kinda. xmlparser will parse the file and close it (it can be used for strings and streams also), but it won't return a file handle. It will return an xml tree. the xmltree module is used to access the tree. Some other useful procs are child, text, innertext and tag
[01:24:13] *** Joins: Zectbumo_ (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2)
[01:25:55] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2) (Ping timeout: 260 seconds)
[01:27:39] *** Quits: Zectbumo_ (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2) (Read error: Connection reset by peer)
[01:32:19] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2)
[01:39:24] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2) (Ping timeout: 240 seconds)
[01:42:08] <reversem3[m]> <FromDiscord> "<ynfle> In reply to @reversem3..." <- Ok I will look into that , thanks for showing me. 
[01:48:02] <FromDiscord> <ynfle> In reply to @reversem3 "<FromDiscord> "<ynfle> In reply": 👍 Feel free to ask if you have any further questions
[01:50:42] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[01:51:18] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2)
[01:57:01] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2) (Ping timeout: 256 seconds)
[02:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:12:17] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[02:17:17] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2)
[02:19:24] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:44:04] <FromDiscord> <Elegantbeef> @wsantos\: if you're using `typeof` it doesnt run at runtime
[02:44:10] <FromDiscord> <Elegantbeef> `typeof` is a compile time "type this statement"
[02:44:14] <FromDiscord> <Elegantbeef> Removing that it'll work
[02:44:37] <FromDiscord> <Elegantbeef> @Shinyzenith\: send the file
[02:59:34] <nrds> <06Prestige99> Is there a cost to wrapping code blocks in a try except (assuming there would be no errors) or is it effectively no-cost?
[03:00:11] <FromDiscord> <Elegantbeef> Fairly certain there is only a cost if it raises
[03:00:27] <FromDiscord> <Elegantbeef> I guess there is `if exceptionRaised`
[03:00:51] <FromDiscord> <Elegantbeef> Benchmarking is your friend 😛
[03:01:39] *** Quits: ltriant (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[03:01:59] *** Joins: ltriant (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[03:02:55] <nrds> <06Prestige99> Yeah good idea. Hopefully it's negligible
[03:08:56] <FromDiscord> <creikey> dang channels are nice
[03:23:29] <FromDiscord> <Elegantbeef> they're easy
[03:50:39] <FromDiscord> <creikey> `var connected {.threadvar.} : Channel[Socket]`↵can I have a channel of sockets like this?
[03:54:57] <FromDiscord> <huantian> Actually no I was wrong
[03:55:48] <FromDiscord> <huantian> I think the example just didn't have any paths in the output
[03:57:45] <FromDiscord> <huantian> Hm how do I do this
[04:04:33] <FromDiscord> <Elegantbeef> Perhaps though it seems a bit weird↵(@creikey)
[04:05:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:05:34] <FromDiscord> <creikey> for this
[04:05:37] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3TiU
[04:06:29] <FromDiscord> <Elegantbeef> Seems more like a case for a global guarded `connections`
[04:07:07] <FromDiscord> <creikey> In reply to @Elegantbeef "Seems more like a": I thought you couldn't do this because each thread has its own heap? seq is on the heap
[04:07:23] <FromDiscord> <Elegantbeef> use `orc` or `arc`
[04:07:42] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TiV
[04:08:03] <FromDiscord> <creikey> interesting
[04:08:07] <FromDiscord> <creikey> then just acquire/release
[04:08:22] <FromDiscord> <Elegantbeef> Or even `withLock connLock` 😛
[04:08:28] <FromDiscord> <creikey> wow that's nice
[04:08:35] <FromDiscord> <creikey> how did I have no idea this exists?
[04:08:41] <FromDiscord> <creikey> system/threads doc page needs an example with that
[04:08:52] <FromDiscord> <creikey> this is where I was looking
[04:09:00] <FromDiscord> <Elegantbeef> Which thing the `guard` or the `withlock`?
[04:09:06] <FromDiscord> <creikey> both
[04:09:16] <FromDiscord> <creikey> withlock is in std/locks so tha tmakes sense
[04:09:30] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual_experimental.html#guards-and-the-locks-section-protecting-global-variables
[04:09:38] <FromDiscord> <creikey> In reply to @Elegantbeef "use `orc` or `arc`": ah wait these aren't the dedfault
[04:09:41] <FromDiscord> <creikey> (edit) "dedfault" => "default"
[04:09:43] <FromDiscord> <creikey> refc is default
[04:09:45] <FromDiscord> <Elegantbeef> No they are not
[04:09:50] <FromDiscord> <Elegantbeef> `orc` will be the default
[04:09:52] <FromDiscord> <Elegantbeef> Soon TM 😜
[04:10:02] <FromDiscord> <Elegantbeef> For threading orc/arc are just better
[04:10:09] <FromDiscord> <creikey> built different
[04:10:18] <FromDiscord> <Elegantbeef> Well they're better all together reaally
[04:10:31] <FromDiscord> <huantian> can't wait for orc default
[04:10:36] <FromDiscord> <creikey> In reply to @Elegantbeef "Soon TM 😜": wht are we waiting for?
[04:10:38] <FromDiscord> <creikey> (edit) "wht" => "what"
[04:10:43] <FromDiscord> <creikey> "Unfortunately that makes its performance profile hard to reason about so it is less useful for hard realtime systems.↵"
[04:10:46] <FromDiscord> <Elegantbeef> Think the compiler to bootstrap with orc
[04:11:00] <FromDiscord> <creikey> In reply to @Elegantbeef "Think the compiler to": why can't it right now
[04:11:22] <FromDiscord> <Elegantbeef> Some issues/hacks with refc i think
[04:11:24] <FromDiscord> <Elegantbeef> Dont recall exactly
[04:11:30] <FromDiscord> <creikey> interesting
[04:11:32] <FromDiscord> <Elegantbeef> It'll be the default with 2.0
[04:13:16] <NimEventer> New thread by Mardiyah: How do we preallocate string as element of array as this is.., see https://forum.nim-lang.org/t/9033
[04:45:58] <FromDiscord> <auxym> iirc araq mentioned that ORC would be default in the next stable version (1.8) but that might have changed
[04:46:38] <FromDiscord> <auxym> and my understanding is that 2.0 is a vague, faraway horizon, no concrete roadmap for that ATM
[04:51:18] <FromDiscord> <Elegantbeef> It is
[04:51:45] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/RFCs/issues/437 for what's needed for 2.0
[04:59:30] <FromDiscord> <auxym> interesting, I did read that a while ago but I guess memory failed me... am I correct in understanding that 2.0 is the next planned stable release then? didn't realize that
[05:00:12] <FromDiscord> <Elegantbeef> Dont know
[05:00:31] <FromDiscord> <Elegantbeef> Seems like it given the devel repo has been making relatively large changes
[06:00:58] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:832c:35dd:4bbe:6ac8:2e06)
[06:19:00] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:2c5f:1252:d0fb:7ca2) (Remote host closed the connection)
[06:31:20] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:832c:35dd:4bbe:6ac8:2e06) (Quit: Leaving)
[07:12:06] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:54b:842d:538:e8f4)
[07:41:10] <FromDiscord> <Goat> I like how the nim compiler can shrink an executalbe that isn't even half a megabyte down 40% with some flags
[07:42:14] <FromDiscord> <Elegantbeef> What flags are you using?
[07:48:21] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "<@633967275090771971>\: send the file": https://github.com/waycrate/nim-wl/tree/devel
[07:48:59] <FromDiscord> <Elegantbeef> Where's the issue?
[07:49:42] <FromDiscord> <Shinyzenith> it segfaults on herb.nim line 24 when I added the wl_signal_add call in libherb.nim https://media.discordapp.net/attachments/371759389889003532/956391835813679144/unknown.png
[07:50:07] <FromDiscord> <Goat> In reply to @Elegantbeef "What flags are you": `nim c -r -d:release --app:console --opt:size -d:strip --passc=-flto --passl=-flto --gc:arc --deepcopy:on -o:main-tiny.exe .\main.nim`
[07:50:23] <FromDiscord> <Goat> from 320kb to 126kb
[07:50:24] <FromDiscord> <Shinyzenith> auxym said it's because my struct was in stack memory so when init_server execution completed unsafeAddr returned nothing
[07:50:45] <FromDiscord> <Elegantbeef> can also add `--d:useMalloc` though that's probably negligable
[07:50:53] <FromDiscord> <Elegantbeef> `-d`\
[07:51:55] <FromDiscord> <Elegantbeef> That sounds about right
[07:53:12] <FromDiscord> <Goat> In reply to @Elegantbeef "can also add `--d:useMalloc`": It is now 94kb
[07:53:23] <FromDiscord> <Elegantbeef> We can make it even smaller but more error pronee
[07:53:44] <FromDiscord> <Elegantbeef> well unsafeaddr will get the stack address still↵(@Shinyzenith)
[07:53:54] <FromDiscord> <Elegantbeef> But it's not what you want here probably
[07:55:32] <FromDiscord> <Elegantbeef> If you're really after the smallest binary and dont care about errors you can do `-d:danger`, but it's not really suggested since your program can just crash with 0 insight
[07:55:58] <FromDiscord> <Goat> First thing I tried, it won't even launch lmao
[07:56:32] <FromDiscord> <Elegantbeef> Are you catching `defects`?
[07:56:57] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "well unsafeaddr will get": 1 sec I'll brb, eating breakfast
[08:00:18] <FromDiscord> <huantian> sounds illegal
[08:00:29] <FromDiscord> <Elegantbeef> It should be
[08:00:45] <FromDiscord> <Elegantbeef> But nope there's a dialect where it's valid
[08:07:38] <FromDiscord> <huantian> man if only there was a compiler option that would make defects actually uncatchable
[08:07:52] <FromDiscord> <Elegantbeef> You say that like there isnt
[08:08:16] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3TjM
[08:08:20] <FromDiscord> <TryAngle> (edit) 
[08:08:23] <FromDiscord> <Elegantbeef> No
[08:09:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TjN
[08:09:22] <FromDiscord> <Elegantbeef> Or `let` if you're using re/nre that cant compile regex statements at CT
[08:09:52] <FromDiscord> <Elegantbeef> Now there's my eternal sadness of using regex for this
[08:10:02] <FromDiscord> <TryAngle> ok so basically keep them separate?
[08:10:16] <FromDiscord> <Elegantbeef> Yes using an enum indexed array
[08:10:29] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Yes using an enum": oh! totally forgot nim has that
[08:10:33] <FromDiscord> <TryAngle> 😳😳
[08:10:34] <FromDiscord> <TryAngle> (edit) "😳😳" => "😳"
[08:11:43] <FromDiscord> <Elegantbeef> Personally i'd use `array[TokenKind, proc(s: openArray[char]): bool]`
[08:11:58] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Personally i'd use `array[TokenKind,": may u give an example?
[08:11:58] <FromDiscord> <Elegantbeef> But i dislike regex so i'm a silly bastard
[08:12:31] <FromDiscord> <TryAngle> In reply to @Elegantbeef "But i dislike regex": ye same tbh 😭↵but it's "industry-standard" I guess
[08:15:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TjO
[08:15:40] <FromDiscord> <Elegantbeef> It's a bit more code of course but i'm a silly bastard
[08:16:50] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3TjP
[08:16:56] <FromDiscord> <Elegantbeef> Yea pretty much
[08:17:13] <FromDiscord> <TryAngle> well, I did this with my markdown format but it got out of hand pretty fast and that's just markdown, so basically not that complex
[08:17:17] <FromDiscord> <TryAngle> (edit) 04removed "basically"
[08:17:23] <FromDiscord> <TryAngle> now I try scripting lang
[08:17:26] <FromDiscord> <TryAngle> soooo
[08:17:30] <FromDiscord> <TryAngle> I need structure
[08:17:36] <FromDiscord> <Elegantbeef> You say that like your regex isnt complex 😜
[08:17:39] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "well unsafeaddr will get": well yes but by the time the callback is called, the memory of init_server is cleared by gc
[08:17:44] <FromDiscord> <Shinyzenith> if I understand correctly
[08:18:12] <FromDiscord> <TryAngle> In reply to @Elegantbeef "You say that like": tbh I don't understand them XD↵I just found them on stackoverflow and checked if they worked and they do↵they're just magic formulas tbh.
[08:18:17] <FromDiscord> <TryAngle> (edit) "formulas tbh." => "formulas."
[08:18:37] <FromDiscord> <Elegantbeef> `"[/\\p{L}/u][/\\p{L}/u-z0-9_]"` is much more compliicated than `str.allInset {'u'..'z', '0'..'9}`
[08:18:40] <FromDiscord> <Shinyzenith> auxym told me to correct it with a ref or manual memory management
[08:19:00] <FromDiscord> <Elegantbeef> No stack is not cleared by GC↵(@Shinyzenith)
[08:19:14] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "No stack is not": huh then why the segfault?
[08:19:43] <FromDiscord> <Elegantbeef> Probably cause your pointing at bad memory and it causes it to go to bad memory
[08:19:57] <FromDiscord> <Elegantbeef> Using a reference might help, but also writing the code properly would help more
[08:20:18] <FromDiscord> <Shinyzenith> wdym by writing it properly
[08:20:59] <FromDiscord> <Elegantbeef> Not doing https://github.com/waycrate/nim-wl/blob/devel/src/libherb.nim#L133-L148 inside a function like this for instance
[08:21:18] <FromDiscord> <Shinyzenith> that's just how we're supposed to call it
[08:21:30] <FromDiscord> <Elegantbeef> No it's clearly not how you're supposed to call it
[08:21:46] <FromDiscord> <Elegantbeef> `herb_output` is stack value
[08:22:12] <FromDiscord> <Shinyzenith> straight from the wlroots devs https://media.discordapp.net/attachments/371759389889003532/956400008175951922/unknown.png https://media.discordapp.net/attachments/371759389889003532/956400008402460732/unknown.png
[08:22:31] <FromDiscord> <Shinyzenith> they assign the callback inside of the new_output callback
[08:22:39] <FromDiscord> <Shinyzenith> it's odd but it makes sense in the context
[08:22:43] <FromDiscord> <Shinyzenith> (edit) "it's odd but it makes sense in the ... context" 03added "given"
[08:23:23] <FromDiscord> <Elegantbeef> It doesnt make much sense as we're passing an address to a stack variable afaict
[08:24:09] <FromDiscord> <Elegantbeef> herbOutput should not be referenced after that procedure is exited, but you persist that storage
[08:24:20] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:54b:842d:538:e8f4) (Remote host closed the connection)
[08:24:59] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "It doesnt make much": are you talking about the wl_signal_add proc?
[08:25:24] <FromDiscord> <Elegantbeef> I'm talking about passing `herbOutput.newFrame`
[08:25:31] <FromDiscord> <Elegantbeef> That's just wrong since it's stack allocated
[08:25:40] <FromDiscord> <Elegantbeef> As soone as this procedure exists it's 100% unsafe
[08:26:32] <FromDiscord> <Shinyzenith> 😢
[08:26:35] <FromDiscord> <Shinyzenith> I see
[08:27:14] <FromDiscord> <Shinyzenith> so what other options do I have to fix this? I really want to keep the structure as is because I'm attempting to clone tinywl in nim
[08:27:20] <FromDiscord> <Shinyzenith> (edit) 04removed "other"
[08:27:38] <FromDiscord> <Shinyzenith> I'll go read up about ref first
[08:27:38] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3TjQ for a runnable example of the issue
[08:27:50] <FromDiscord> <Shinyzenith> Ok, reading it
[08:27:54] <FromDiscord> <Elegantbeef> You can use ref, you can heap allocate manually, you can use more globals
[08:29:08] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:30:07] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "https://play.nim-lang.org/#ix=3TjQ for a runnable": ok I think I understand the issue now
[08:30:18] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "You can use ref,": I'll try ref
[08:30:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TjV
[08:31:00] <FromDiscord> <Elegantbeef> the `ptrToOutput` would be the non dereferencing version of `fieldParentPtr`
[08:33:08] <FromDiscord> <Shinyzenith> what would it's signature look like?
[08:33:17] <FromDiscord> <Elegantbeef> What do you mean?
[08:33:27] <FromDiscord> <Elegantbeef> It's identical to `fieldParentPtr` just without `[]`
[08:33:33] <FromDiscord> <Shinyzenith> Ok got it
[08:34:14] <FromDiscord> <Elegantbeef> Dont even need the cast i think
[08:34:32] <FromDiscord> <Shinyzenith> cast ptr T?
[08:34:35] <FromDiscord> <Shinyzenith> (edit) "ptr T?" => "[ptr T]?"
[08:34:55] <FromDiscord> <Elegantbeef> ugh this is somewhat complicated
[08:35:07] <FromDiscord> <Elegantbeef> maybe it's not i'm dumb
[08:35:07] <FromDiscord> <Shinyzenith> yeah definitely not a pretty fix
[08:35:17] <FromDiscord> <TryAngle> @ElegantBeef tbh I just realized in Nim regexes are not that important as in other langs because working with sets is so easy o_O
[08:35:39] <FromDiscord> <Elegantbeef> Indeed sets make it super easier↵(@TryAngle)
[08:36:17] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/956403555927990322/unknown.png
[08:36:22] <FromDiscord> <Elegantbeef> Well the issue is you're getting field offsets for whatever reason shiny
[08:36:32] <FromDiscord> <Elegantbeef> You didnt make it a ref
[08:37:11] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "Well the issue is": :( aaa this feels confusion I guess I have to restructure the code to be more gc friendly
[08:37:24] <FromDiscord> <Elegantbeef> You dont need to restructure the code any
[08:37:31] <FromDiscord> <Elegantbeef> I mean it's ugly code cause of what you're doing
[08:37:36] <FromDiscord> <Elegantbeef> But that's besides the point
[08:37:43] <FromDiscord> <Elegantbeef> `type HerbOutput = ref object`
[08:38:05] <FromDiscord> <Shinyzenith> ok
[08:38:47] <FromDiscord> <Elegantbeef> Now you need that fieldParentPtr that doesnt deref
[08:38:53] <FromDiscord> <Elegantbeef> That's a weird fucking design either way
[08:39:21] <FromDiscord> <Elegantbeef> I've never seen anything ever point to a field instead of an object
[08:41:53] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "`type HerbOutput = ref":  https://media.discordapp.net/attachments/371759389889003532/956404966107516968/unknown.png
[08:42:04] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "I've never seen anything": welcome to libwayland 🤣
[08:42:48] <FromDiscord> <Elegantbeef> Guess i should also say @TryAngle I'd probably use https://github.com/zevv/npeg
[08:42:48] <FromDiscord> <Elegantbeef> A compiler bug, but no code so cant comment
[08:43:30] <FromDiscord> <Shinyzenith> this isn't a pretty solution, I think I'll just push the herb_output object into a seq field of the server and do the assigning in a for loop in the main file
[08:43:47] <FromDiscord> <Elegantbeef> That'd work
[08:43:52] <FromDiscord> <Elegantbeef> What's the code in that template?
[08:44:47] <FromDiscord> <Shinyzenith> In hindsight that won't work...
[08:44:57] <FromDiscord> <Shinyzenith> because if a new output is plugged in after my for loop
[08:45:03] <FromDiscord> <Shinyzenith> it won't work
[08:45:16] <FromDiscord> <Elegantbeef> Use a fixed size array and a buffer, problem solved, or just use the reference
[08:46:01] <FromDiscord> <Shinyzenith> wait why would I use a fixed size array? what if the number of outputs exceed the max index of my array?
[08:46:11] <FromDiscord> <Elegantbeef> "and a buffer"
[08:46:37] <FromDiscord> <Elegantbeef> The reference is the easier solution, or memory alloc
[08:46:46] <FromDiscord> <Elegantbeef> the memory alloc is easy aswell
[08:46:57] <FromDiscord> <Shinyzenith> Ok I'll read up on it
[08:47:01] <FromDiscord> <Shinyzenith> I just want it to be readable
[08:47:09] <FromDiscord> <Shinyzenith> ref was getting messy
[08:47:18] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TjY
[08:47:24] <FromDiscord> <Elegantbeef> Ok
[08:47:24] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Guess i should also": ye I could but it's also a learning project 😉
[08:47:42] <FromDiscord> <Elegantbeef> I dont follow
[08:47:48] <FromDiscord> <TryAngle> I don't try to reinvent the wheel with another scripting lnag that is of course better than every prior scripting lang
[08:48:18] <FromDiscord> <TryAngle> I'm more curious, what is a match of length zero? https://media.discordapp.net/attachments/371759389889003532/956406581329801216/unknown.png
[08:48:24] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3TjZ
[08:48:29] <FromDiscord> <Elegantbeef> No clue i dont use regex
[08:53:57] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/956408001395294229/unknown.png
[08:53:59] <FromDiscord> <Shinyzenith> I did the following
[08:54:01] <FromDiscord> <Shinyzenith> sent a code paste, see https://paste.rs/YfT
[08:54:13] <FromDiscord> <Shinyzenith> this time the callback triggered https://media.discordapp.net/attachments/371759389889003532/956408068101521419/unknown.png
[08:54:18] <FromDiscord> <Elegantbeef> Dealloc inside the notify proc
[08:54:18] <FromDiscord> <Shinyzenith> with another segfault....
[08:54:23] <FromDiscord> <Shinyzenith> Ok
[08:55:03] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "Dealloc inside the notify": like so? https://media.discordapp.net/attachments/371759389889003532/956408275862175764/unknown.png
[08:56:34] <FromDiscord> <Elegantbeef> this is where you need the non dereferencing `[]` though you can do `dealloc(fieldParentPtr(HerbOutput, newFrame, listener)[])`
[08:56:34] <FromDiscord> <Elegantbeef> Sorry `dealloc(fieldParentPtr(HerbOutput, newFrame, listener).addr)`
[08:56:34] <FromDiscord> <Elegantbeef> Atleast you should be able to
[08:56:48] <FromDiscord> <Elegantbeef> No
[08:57:08] <FromDiscord> <Elegantbeef> `dealloc(fieldParentPtr(HerbOutput, newFrame, listener).addr)`
[08:57:37] <FromDiscord> <TryAngle> anybody knows why my editor is saying this is invalid? https://media.discordapp.net/attachments/371759389889003532/956408924758741042/unknown.png
[08:58:01] <FromDiscord> <Elegantbeef> Does the compiler say the same?
[08:58:33] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "`dealloc(fieldParentPtr(HerbOutput, newFrame, liste": still segfaults
[08:58:44] <FromDiscord> <Elegantbeef> Well then i was wrong and i have no clue the cause
[08:58:49] *** Joins: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[08:58:50] <FromDiscord> <Elegantbeef> You're doing something slightly wrong then
[08:58:54] <FromDiscord> <Shinyzenith> butthis time the segfault is different
[08:59:24] <FromDiscord> <Elegantbeef> Does it still segfault without the `dealloc`?
[09:00:00] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/956409524930089010/unknown.png https://media.discordapp.net/attachments/371759389889003532/956409525169180692/unknown.png https://media.discordapp.net/attachments/371759389889003532/956409525383086090/unknown.png
[09:00:14] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "Does it still segfault": absolutely
[09:00:27] <FromDiscord> <Elegantbeef> Then yea there is another issue
[09:00:36] *** Quits: ltriant (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[09:00:41] <FromDiscord> <Shinyzenith> but atleast it segfaults elsewhere now
[09:00:46] <FromDiscord> <Elegantbeef> check if `sceneOutput != nil`
[09:00:47] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Does the compiler say": hmm just compiled and I'm getting a sussy error std/re error
[09:00:50] <FromDiscord> <Shinyzenith> I think i need to manually allocate my server too
[09:00:54] <FromDiscord> <TryAngle> (edit) "compiled" => "tried compiling"
[09:01:18] <FromDiscord> <Elegantbeef> Nah server is global, and should be NRVO'd if not you can make a `init(server: var HerbServer)`
[09:01:26] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "check if `sceneOutput !=": huh why https://media.discordapp.net/attachments/371759389889003532/956409887175364628/unknown.png
[09:01:44] <FromDiscord> <TryAngle> In reply to @TryAngle "hmm just tried compiling": @ElegantBeef removing re from my code, it compiles
[09:01:54] <FromDiscord> <TryAngle> also the IDE gives no error anymore, ok weird error display
[09:02:10] <FromDiscord> <Elegantbeef> I dont know anything about wayland
[09:03:17] <nrds> <06Prestige99> Have you tried x11? :P
[09:03:21] <FromDiscord> <Elegantbeef> What was the error you got from `std/re`?
[09:04:06] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "I dont know anything": I hate thisss :WearyA:
[09:04:17] <FromDiscord> <Elegantbeef> Refer to prestige's comment then
[09:04:26] <FromDiscord> <Shinyzenith> 🤣
[09:05:03] <FromDiscord> <Elegantbeef> You do seemingly lack knowledge of stack/heap and nim's references
[09:05:09] <FromDiscord> <Elegantbeef> Which isnt helping you any
[09:05:33] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "You do seemingly lack": as stated earlier, I'm still really really new to nim 🤣
[09:06:42] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/Y1e
[09:07:07] <FromDiscord> <Elegantbeef> But that's basically the same as the pointer really
[09:07:42] <nrds> <06Prestige99> Elegantbeef so I think the learning material on nim-lang.org (https://nim-lang.org/docs/tut1.html etc) is too lengthy to be on all one page. I want to break it up into smaller, one page readings. Do you want in on this undertaking?
[09:07:53] <nrds> <06Prestige99> or actually we disagree on everything so maybe you think it's a bad idea lol
[09:08:07] <FromDiscord> <Elegantbeef> I dont see the difference really
[09:08:14] <FromDiscord> <Elegantbeef> Need a good search bar then
[09:08:31] <FromDiscord> <Elegantbeef> The benefit of it being all on one page is it's easier to search and download
[09:08:32] <nrds> <06Prestige99> It'd be less daunting for new users I think
[09:08:37] <FromDiscord> <Shinyzenith> how about https://www.algolia.com/
[09:08:38] <nrds> <06Prestige99> true to that
[09:08:42] <FromDiscord> <Elegantbeef> Remake it using nimibook
[09:08:48] <FromDiscord> <Shinyzenith> they have a doc search thing
[09:08:55] <nrds> <06Prestige99> I'll look that up
[09:09:15] <FromDiscord> <Shinyzenith> https://www.algolia.com/ref/docsearch/ oops this link sorry
[09:09:41] <FromDiscord> <Shinyzenith> not sure if it's oss , I just know that djs website uses it
[09:10:40] <nrds> <06Prestige99> nimibook doesn't support syntax highlighting?
[09:10:56] <FromDiscord> <Elegantbeef> It should
[09:11:27] <FromDiscord> <Elegantbeef> Seems it doesnt presently, it's jusut web tech so add it 😜
[09:11:44] <nrds> <06Prestige99> hm I want to find this golang tutorial example from before..
[09:11:52] <nrds> <06Prestige99> I like the way this site did it
[09:13:55] <nrds> <06Prestige99> ah this https://www.learn-golang.org/en/Hello%2C_World%21
[09:14:17] <nrds> <06Prestige99> We'd have to embed the playground in the bottom, effectively
[09:14:28] <FromDiscord> <Elegantbeef> Eh just use the playground then
[09:14:45] <FromDiscord> <Elegantbeef> The playground can do stuff like that
[09:14:55] <nrds> <06Prestige99> But also it's broken up into small sections
[09:15:21] <FromDiscord> <Elegantbeef> The nim playground can do that
[09:15:38] <FromDiscord> <Elegantbeef> It supports a whole interactive tutorial
[09:15:42] <FromDiscord> <Elegantbeef> Not that it's well documented
[09:15:45] <nrds> <06Prestige99> oh?
[09:15:51] <nrds> <06Prestige99> well that would be awesome
[09:16:26] <FromDiscord> <Elegantbeef> I think you can point it using a URL to a specific format and it'll a proper interactive environment
[09:18:54] <FromDiscord> <Elegantbeef> Ping pmunch and he knows if you want to partake that
[09:19:10] <FromDiscord> <Elegantbeef> Cant find any examples
[09:20:13] <FromDiscord> <TryAngle> how do u make a set of strings?
[09:20:23] <FromDiscord> <Elegantbeef> You cant
[09:20:27] <FromDiscord> <TryAngle> 😦
[09:20:32] <FromDiscord> <Elegantbeef> `set` only works for ordinal
[09:20:38] <FromDiscord> <Elegantbeef> You can make a HashSet for strings
[09:20:49] <FromDiscord> <TryAngle> wait I'm stupid I can just do array in this case
[09:20:59] <FromDiscord> <Elegantbeef> `import std/sets; var a: HashSet[string]; a.incl "Hello"; echo a` 😛
[09:21:16] <FromDiscord> <Elegantbeef> What are you doing?
[09:21:51] <FromDiscord> <TryAngle> In reply to @Elegantbeef "`import std/sets; var a:": I'm done with regexes XD
[09:21:59] <FromDiscord> <TryAngle> so I do sets now
[09:22:09] <FromDiscord> <Elegantbeef> Ok but the array of strings?
[09:23:10] <FromDiscord> <TryAngle> sent a code paste, see https://paste.rs/tBk
[09:23:26] <FromDiscord> <TryAngle> well thinking abt it it might be easier saying one is multiline and one single line etc. 🤔
[09:23:33] <FromDiscord> <TryAngle> (edit) "well thinking abt it it might be easier saying one is multiline and one single line etc. ... 🤔" 03added "directly"
[09:23:38] <FromDiscord> <TryAngle> (edit) "well thinking abt it it might be easier saying one is multiline and one single line etc. directly ... 🤔" 03added "isntead of grouping it first"
[09:41:37] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:07:55] <FromDiscord> <TryAngle> is there a generic zero method for ordinals?
[10:08:08] <FromDiscord> <Elegantbeef> `low`?
[10:08:28] <FromDiscord> <TryAngle> In reply to @Elegantbeef "`low`?": exactly what I looked for thanks! 😄
[10:08:51] <FromDiscord> <Elegantbeef> For signed that returns the lowest possiblee
[10:08:51] <FromDiscord> <Elegantbeef> Probably not what you want there
[10:08:56] <FromDiscord> <TryAngle> oh true
[10:09:39] <FromDiscord> <TryAngle> I like the way of inc and dec↵so I wanted to add clr for a reset to zero for consistency XD
[10:09:46] <FromDiscord> <Elegantbeef> `cast[type](0)`
[10:09:59] <FromDiscord> <TryAngle> (edit) "of" => "how" | "dec↵so" => "dec look↵so"
[10:10:05] <FromDiscord> <Elegantbeef> The above doesnt work for holey enums
[10:10:37] <FromDiscord> <Elegantbeef> actually it might
[10:10:46] <FromDiscord> <Elegantbeef> I say holey but i meant those that dont start at `0`
[10:10:50] <FromDiscord> <TryAngle> In reply to @Elegantbeef "The above doesnt work": not my case atm luckely
[10:11:19] <FromDiscord> <TryAngle> how do I symlink my local project for other nim projects again?
[10:11:36] <FromDiscord> <Elegantbeef> `nimble develop`
[10:13:44] <FromDiscord> <TryAngle> lol https://media.discordapp.net/attachments/371759389889003532/956428079478239252/unknown.png
[10:31:49] <FromDiscord> <TryAngle> @Solitude this happens on void linux 😦↵but maybe it's a WSL error I'm not sure
[10:32:00] <FromDiscord> <TryAngle> (edit) "😦↵but maybe it's" => "😦↵(WSL and" | "WSL error I'm not sure" => "dedicated install)"
[11:39:21] <FromDiscord> <TryAngle> is there an echo that doesn't do newline?
[11:39:35] <FromDiscord> <Elegantbeef> Nope
[11:39:48] <FromDiscord> <Elegantbeef> `stdout.write("myMsg")`
[11:39:58] <FromDiscord> <Elegantbeef> Then you should do `flushFile(stdout)`
[11:42:07] <FromDiscord> <TryAngle> ok, thanks
[11:42:58] *** Quits: rwb (~augh@alogs.space) (Excess Flood)
[11:43:10] *** Joins: rwb (~augh@alogs.space)
[11:44:48] *** rwb is now known as rb
[12:07:42] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[12:55:01] *** Quits: TechAspirer (~kayabaNer@user/kayabanerve) (Ping timeout: 240 seconds)
[13:07:59] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3TkG
[13:08:51] <FromDiscord> <Elegantbeef> Of course
[13:09:15] <FromDiscord> <hmmm> oh it works?
[13:09:22] <FromDiscord> <hmmm> I'll check
[13:09:34] <FromDiscord> <Elegantbeef> They're boolean operators
[13:12:05] <FromDiscord> <Rika> whats there to break
[13:12:11] <FromDiscord> <Rika> why did you think it wouldnt work
[13:12:23] <FromDiscord> <hmmm> because of the parenthesis lol
[13:12:38] <FromDiscord> <hmmm> didn't expect it would work the way I expected to lol
[13:14:53] <FromDiscord> <Rika> what why
[13:15:10] <FromDiscord> <hmmm> yea it was a bit awkwardly phrased
[13:15:20] <FromDiscord> <hmmm> what matters is the heart ❤️
[13:18:31] *** Joins: PMunch (~PMunch@user/pmunch)
[13:27:04] <FromDiscord> <Solitude> guys, does this work? `echo "test"`?
[13:27:04] <NimEventer> New thread by Markus_gritsch: Try except else, see https://forum.nim-lang.org/t/9034
[13:43:41] <PMunch> @Solitude, maybe I'm OOTL here, but why wouldn't that work?
[13:44:02] <FromDiscord> <Elegantbeef> They're being passive aggressive
[13:45:15] <PMunch> Aaah I see now :P
[13:47:06] <NimEventer> New thread by Mardiyah: A = b = c = 7 Nim syntax, see https://forum.nim-lang.org/t/9035
[13:59:55] <FromDiscord> <Elegantbeef> How dare you pmunch explaining how finally works to me!
[14:01:01] <PMunch> Haha, it wasn't so much for you as for anyone else who might be reading
[14:02:40] <FromDiscord> <Elegantbeef> Mostly just dislike the `else` now that i think about it
[14:02:49] <FromDiscord> <Elegantbeef> It's a shitty name
[14:03:11] <PMunch> Well it's what should happen if nothing was caught
[14:03:32] <FromDiscord> <Elegantbeef> there is no else case of a try though
[14:03:35] <FromDiscord> <Elegantbeef> It's like python's for else
[14:03:39] <FromDiscord> <Elegantbeef> It's dumb naming
[14:03:49] <PMunch> for..else?
[14:03:54] <FromDiscord> <Elegantbeef> `succeed` or similar is nicer to me
[14:04:02] <FromDiscord> <Phil> wait, what?
[14:04:14] <PMunch> Fair enough, but that would introduce another keyword..
[14:04:19] <FromDiscord> <Elegantbeef> > for loops also have an else clause which most of us are unfamiliar with. The else clause executes after the loop completes normally. This means that the loop did not encounter a break
[14:04:32] <PMunch> Huh
[14:04:39] <FromDiscord> <Phil> That
[14:04:41] <FromDiscord> <Phil> What
[14:04:41] <FromDiscord> <Elegantbeef> Stupid names
[14:04:51] <PMunch> I mean the idea is good
[14:04:56] <PMunch> But yeah, silly name
[14:05:12] <FromDiscord> <Phil> I don't think I know of a usecase, but I guess there are a few
[14:05:27] <FromDiscord> <Elegantbeef> Yea i dont ever see the point
[14:05:48] <FromDiscord> <Elegantbeef> can make a macro in Nim for replacing try else
[14:05:57] <FromDiscord> <Phil> There's also try else?
[14:06:02] <FromDiscord> <Phil> I thought it was try except?
[14:06:14] <FromDiscord> <Phil> My world is crumbling down around me
[14:06:18] <FromDiscord> <Elegantbeef> try else in python is "try and if anything doesnt raise do else"
[14:06:24] <PMunch> @Phil, https://forum.nim-lang.org/t/9034
[14:07:51] <FromDiscord> <Phil> In my head that's just "finally" with a different name, where am I wrong?
[14:08:03] <FromDiscord> <Elegantbeef> it's ran only if there are no exceptions
[14:08:06] <FromDiscord> <Elegantbeef> Finally is ran always
[14:08:16] <FromDiscord> <Phil> But
[14:08:17] <FromDiscord> <Phil> like
[14:08:21] <FromDiscord> <Elegantbeef> That's the delimiination it's finally with `if getCurrentException == nil`
[14:08:40] <FromDiscord> <Phil> Yeah I don't find that expressive
[14:09:01] <FromDiscord> <Phil> At the very least a different name, I agree with you on that one beef
[14:09:53] <FromDiscord> <Elegantbeef> I mean add `hasException()` and then you have nice `if hasException(): ...`
[14:10:04] <FromDiscord> <Elegantbeef> Boom we just made it nice to write without adding any code 😛
[14:14:52] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[14:15:21] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[14:18:07] <PMunch> You still get another nesting level though
[14:19:39] <PMunch> I mean this is basically the rest of the procedure. So you're now two layers deep for your entire procedure
[14:25:49] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[14:25:59] *** Joins: toulene (~toulene@user/toulene)
[14:31:03] *** Quits: PMunch (~PMunch@user/pmunch) (Read error: Connection reset by peer)
[14:48:46] *** Joins: PMunch (~PMunch@user/pmunch)
[15:20:56] <FromDiscord> <sheldon> How to rename files with walkFiles?
[15:29:02] *** Joins: PMunch_ (~PMunch@user/pmunch)
[15:39:31] <FromDiscord> <demotomohiro> I guess, adding all paths you want to rename to seq and rename them after finishing `walkFiles` is safer than rename them inside `walkFiles` loop.
[15:41:04] *** Quits: PMunch (~PMunch@user/pmunch) (Killed (NickServ (GHOST command used by PMunch_)))
[15:41:10] *** PMunch_ is now known as PMunch
[15:41:30] *** Joins: PMunch_ (~PMunch@user/pmunch)
[15:48:33] <FromDiscord> <sheldon> Does it look like reading the content to a new named file and remove the old file?
[15:53:15] <FromDiscord> <exelotl> no, you can just use `renameFile(source, dest)`
[15:53:17] <FromDiscord> <exelotl> https://nim-lang.org/docs/os.html#moveFile%2Cstring%2Cstring
[15:53:27] <FromDiscord> <exelotl> (edit) "`renameFile(source," => "`moveFile(source,"
[16:21:35] <NimEventer> New thread by Didlybom: Recommended protobuf library, see https://forum.nim-lang.org/t/9036
[16:23:20] <FromDiscord> <Bubblie> In reply to @TryAngle "is there an echo": This would be a nice feature without having to do stdout.write
[16:23:57] <FromDiscord> <Bubblie> Because almost all other languages offer this capability of chosing between a new line and just the same one without having to do stdout
[16:26:33] <pch> https://github.com/kinkinkijkin/nimsgp readme update (notice at top)
[16:26:45] <FromDiscord> <Bubblie> Cool
[16:26:52] <FromDiscord> <Bubblie> I have to check this out btw
[16:26:57] <FromDiscord> <Bubblie> Software Rendering is really intriguing
[16:27:10] <FromDiscord> <Bubblie> Also let me star it
[16:28:08] <FromDiscord> <Bubblie> Also for the stdout, I think it may be simple enough to just add functionality that prints on the same line, I mean I could just make a proc that uses stdout.write to print on the same line if I needed to
[16:30:58] <pch> not cool
[16:31:05] <pch> notice at top is extremely serious
[16:43:34] <FromDiscord> <Bubblie> Oh shit I read everything underneath
[16:44:00] <FromDiscord> <Bubblie> I hope everything is okay
[16:44:53] <FromDiscord> <Bubblie> Opening links on apple discord tends to be a bit shitty, so my bad
[16:46:12] <pch> no, nothing is okay
[16:46:21] <pch> nothing anyone can do about it anyways though
[16:47:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:53:43] <FromDiscord> <Bubblie> Im sorry
[17:14:24] *** Quits: lumidify (~lumidify@user/lumidify) (Ping timeout: 272 seconds)
[17:14:49] *** Joins: lumidify (~lumidify@user/lumidify)
[17:15:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[17:52:36] <FromDiscord> <Require Support> curious what editors you guys are using with nim
[17:52:47] <PMunch> I use Vim
[17:53:01] <PMunch> But I think most people use VSCode
[17:53:33] <FromDiscord> <Require Support> ye ive been using vscode but it feels slow
[17:55:50] <FromDiscord> <UN533N_5PY> i broke my emacs config a while ago and lost interest for a bit. ↵Came back to it a few days ago↵i was on codium tho
[17:56:09] <FromDiscord> <ynfle> In reply to @PMunch "I use Vim": me too
[17:56:29] <FromDiscord> <UN533N_5PY> installed nimlsp and it seems to be fine enough, for a long time i had no auto complete becuase i didnt setup nimlsp or lsp mode...
[18:05:47] <NimEventer> New thread by Choltreppe: Wierd macro overloading problem, see https://forum.nim-lang.org/t/9038
[18:11:04] <pch> i use whatever i felt like installing
[18:31:46] <FromDiscord> <xflywind>  https://media.discordapp.net/attachments/371759389889003532/956553410369450014/unknown.png
[18:31:49] <NimEventer> New thread by Xflywind: [news] NimScript won't report incorrect errors in vscode with the latest devel branch, see https://forum.nim-lang.org/t/9039
[18:36:49] <FromDiscord> <Bubblie> In reply to @Require Support "curious what editors you": CLion
[18:36:49] <FromDiscord> <Bubblie> Lmao
[18:48:55] <FromDiscord> <Bubblie> How good is C2Nim vs Futhark
[18:49:37] <FromDiscord> <Bubblie> Because I know they both allow for header usage right
[18:52:00] <PMunch> Well, I wrote Futhark because I have literally never been able to get c2nim to work for me
[18:52:17] <FromDiscord> <Bubblie> Oh no
[18:52:33] <PMunch> But Futhark feels like magic
[18:52:38] <FromDiscord> <Bubblie> 👀
[18:52:46] <FromDiscord> <Bubblie> I saw someone complaining about it yesterday though
[18:52:50] <FromDiscord> <Bubblie> Regarding some kind of issue?
[18:53:05] <PMunch> It's not perfect, but in my opinion it's way ahead of the other options
[18:53:12] <PMunch> Hmm, what was that?
[18:53:13] <FromDiscord> <Bubblie> Alright
[18:53:21] <FromDiscord> <Bubblie> I dont remember let me see if I can find the context
[18:53:48] <FromDiscord> <Bubblie> In reply to @PMunch "That's because Futhark uses": Here
[18:54:08] <FromDiscord> <Bubblie> Not sure if you can see replies on irc
[18:54:11] <FromDiscord> <xflywind> c2nim can convert simple C code to Nim. It should be fit for simple algorithms conversion from C to Nim.
[18:54:12] <FromDiscord> <Bubblie> Can you?
[18:54:14] <PMunch> Not really..
[18:54:24] <FromDiscord> <Bubblie> Let me get the discord link then
[18:54:35] <FromDiscord> <Bubblie> https://discord.com/channels/371759389889003530/371759389889003532/956233466373103627
[18:54:43] <PMunch> It looks like this: https://irclogs.nim-lang.org/24-03-2022.html#14:23:48
[18:54:44] <FromDiscord> <Bubblie> I hope that works
[18:54:57] <FromDiscord> <Bubblie> Oh damn
[18:55:04] <PMunch> Well that would work if I logged into Discord..
[18:55:07] <FromDiscord> <Bubblie> Yeah
[18:55:09] <FromDiscord> <Bubblie> Hmmmm
[18:55:16] <FromDiscord> <xflywind> In reply to @flywind "c2nim can convert simple": For instance: https://github.com/nim-lang/Nim/blob/devel/lib/system/dragonbox.nim
[18:55:21] <FromDiscord> <Bubblie> Well im not exactly sure how to make it instant for you to look at
[18:55:29] <FromDiscord> <Bubblie> Because usually i can hit a reply and it takes me to that message
[18:55:33] <PMunch> Oh, you where replying to one of my own comments :P
[18:55:38] <FromDiscord> <Bubblie> Yeah
[18:55:59] <FromDiscord> <Bubblie> I should have specified that
[18:56:04] <FromDiscord> <Bubblie> Sorry I have no idea how irc works
[18:56:06] <PMunch> Well the way to share it with me would be to find it in irclogs.nim-lang.org and share the link
[18:56:10] <PMunch> Like I did to you
[18:56:20] <FromDiscord> <Bubblie> Oh alright sure
[18:56:24] <PMunch> This is the comment you replied to: https://irclogs.nim-lang.org/23-03-2022.html#16:50:24
[18:56:35] <FromDiscord> <Bubblie> Ye
[18:56:43] <FromDiscord> <Bubblie> Ill keep that in mind
[18:56:47] <FromDiscord> <Bubblie> Sorry about that PMunch
[18:56:51] <PMunch> Anyways, that was just that they couldn't echo out a string representation of a Futharked object
[18:57:00] <PMunch> Which is caused by a bug in Nim I believe
[18:57:05] <FromDiscord> <Bubblie> Oh no
[18:57:16] <FromDiscord> <Bubblie> Is this bug going to be fixed soon?
[18:58:58] <PMunch> Who knows, might be
[18:59:25] <PMunch> It's not the biggest bug in the world, but it can certainly cause some trouble
[19:00:38] <PMunch> Oh, now it has gotten a tag and an assignee, so maybe it will be fixed soon
[19:01:13] <FromDiscord> <Bubblie> 👀
[19:01:22] <FromDiscord> <Bubblie> How many people work on nim?
[19:05:23] <FromDiscord> <Rika> maybe 3 fulltime
[19:05:51] <FromDiscord> <Bubblie> Damn, 3 people? Thats insane for a language this well made
[19:06:03] <FromDiscord> <Reptorian> Just discovered Nim, haven't used it yet.
[19:06:26] <FromDiscord> <willyboar> I think 2 paid
[19:07:36] <FromDiscord> <Bubblie> I need to fix this NimGL vulkan issue
[19:07:45] <FromDiscord> <Bubblie> Keep forgetting
[19:08:59] <FromDiscord> <Bubblie> NimGL hasnt been updated in a year, I hope they accept my PR
[19:09:05] <FromDiscord> <Reptorian> i know indentations matter in nim, but one liners with if else is possible in nim?
[19:09:19] <FromDiscord> <mratsim> In reply to @Reptorian "i know indentations matter": if: foo else: bar
[19:09:49] <FromDiscord> <Reptorian> In reply to @mratsim "if: foo else: bar": Got it. I think ill like it better than python.
[19:10:18] <FromDiscord> <mratsim> In reply to @Bubblie "Damn, 3 people? Thats": status.im is giving a huge amount of funding for a small lang, for ~3years now: https://nim-lang.org/sponsors.html
[19:10:30] <FromDiscord> <Bubblie> Thats awesome!
[19:10:30] <FromDiscord> <mratsim>  https://media.discordapp.net/attachments/371759389889003532/956563163497787423/unknown.png
[19:10:34] <FromDiscord> <Bubblie> 👀
[19:10:55] <FromDiscord> <Reptorian> I come from mainly G'MIC background with some C#, C++, and python skills. Just hoping to see i can get around python as i dislike it.
[19:11:12] <FromDiscord> <Bubblie> I think you will like nim
[19:11:17] <FromDiscord> <Bubblie> I have a similar background
[19:12:30] <FromDiscord> <Bubblie> I know python well, as well as java c# c++, and I was looking for languages that made using C/C++ actually bareable
[19:12:41] <FromDiscord> <Bubblie> I tried rust, and I still am, but I struggle with its syntax
[19:13:02] <FromDiscord> <Bubblie> Then I found nim just randomly looking, and its genuinely really uniquely structured, in a good way
[19:13:23] <FromDiscord> <Bubblie> I use to absolutely despise white space languages till I found nim
[19:13:30] <FromDiscord> <Bubblie> Which actually uses spaces well for once holy shit
[19:14:03] <FromDiscord> <Bubblie> You would think in years of programming proper whitespace would exist sooner
[19:14:54] <FromDiscord> <mratsim> frankly after 2 weeks you really forget about them
[19:15:08] <FromDiscord> <Bubblie> Forget about what?
[19:15:15] <FromDiscord> <mratsim> it's like switching between mac/windows/linux, familiarity
[19:15:18] <FromDiscord> <mratsim> spaces
[19:15:33] <FromDiscord> <Reptorian> In reply to @mratsim "frankly after 2 weeks": I never got over white space in python
[19:15:37] <FromDiscord> <Bubblie> Well with python definitely not, with nim I was able to get over it
[19:15:43] <FromDiscord> <Rika> i never got over braces on other languages
[19:15:52] <FromDiscord> <Bubblie> I actually love braces
[19:15:54] <FromDiscord> <Bubblie> LMAO
[19:16:03] <FromDiscord> <Bubblie> I think thats the java lover in me talking though
[19:16:11] <FromDiscord> <mratsim> For python I have issue with having to do "if is_instance_of(foo)" everywhere to catch bugs
[19:16:31] <FromDiscord> <mratsim> and docker/virtualenv
[19:16:41] <FromDiscord> <Rika> im fine with braces when it is optional or for single-line blocks, i guess
[19:16:58] <FromDiscord> <Reptorian> Same here. I like braces.
[19:17:02] <FromDiscord> <Bubblie> Does nim have something for braces, that sounds cursed
[19:17:06] <FromDiscord> <Bubblie> Though
[19:17:13] <FromDiscord> <Rika> it used to
[19:17:15] <FromDiscord> <Reptorian> (edit) 04removed "Same here." | "braces." => "braces too."
[19:17:27] <FromDiscord> <Rika> it was removed due to lack of maintenance
[19:17:31] <FromDiscord> <Bubblie> If nim had braces and whitespace support that would be cool
[19:17:39] <FromDiscord> <Bubblie> But I think thats too much
[19:17:40] <FromDiscord> <Bubblie> And also
[19:17:43] <FromDiscord> <Bubblie> Might lead to confusion
[19:18:06] <FromDiscord> <Reptorian> In reply to @Bubblie "Might lead to confusion": Not really. Maybe with a larger audience.
[19:18:14] <FromDiscord> <Bubblie> Yeah
[19:19:11] <FromDiscord> <Reptorian> In reply to @Bubblie "Might lead to confusion": In my case coming from a language that did not had braces support, it made my code a lot easier to read when it arrived.
[19:20:05] <FromDiscord> <Bubblie> Also I like how nim has robust opengl support, but I wish it had better vulkan and glfw because nimgl’s glfw is really weird, the way they handle GLFWwindow is not normal, you make the variable and use the variable to open and close rather than put that variable into a glfw method to open and close the window, normal glfw in every other language uses the method for easiness to just straight up use glfw docs without having to read sepera
[19:20:15] <FromDiscord> <Bubblie> And whats weird, is that those two are the only two
[19:20:22] <FromDiscord> <Bubblie> The rest do glfw methods
[19:20:24] <FromDiscord> <Bubblie> Like glfwSetCallback
[19:20:26] <FromDiscord> <Bubblie> Etc.
[19:20:27] <FromDiscord> <Bubblie> Its just weird
[19:20:32] <FromDiscord> <Bubblie> This is not the only issue
[19:20:49] <FromDiscord> <Bubblie> Im fixing it but im unsure whether I want to also fork and redo a lot of nimgl vulkan and glfw bindings
[19:21:01] <FromDiscord> <mratsim> In reply to @Bubblie "If nim had braces": oh sweet summer child
[19:21:03] <FromDiscord> <Rika> In reply to @Reptorian "In my case coming": it will lead to newbie confusion when they see two code pieces use one or the other.
[19:21:16] <FromDiscord> <Rika> i already said that nim used to have braces support
[19:21:18] <FromDiscord> <Bubblie> Yeah
[19:21:21] <FromDiscord> <mratsim> you actually can, there are Nim "skins"
[19:21:21] <FromDiscord> <Rika> but was removed for lack of maintenance
[19:21:26] <FromDiscord> <Bubblie> In reply to @mratsim "you actually can, there": NO WAY
[19:21:31] <FromDiscord> <Bubblie> 👁️👁️
[19:21:40] <FromDiscord> <Rika> mans not listening to me
[19:21:48] <FromDiscord> <Bubblie> No I am
[19:21:50] <FromDiscord> <Bubblie> LOL
[19:21:51] <FromDiscord> <mratsim> my avatar is in red
[19:21:57] <FromDiscord> <Rika> thats read?
[19:21:58] <FromDiscord> <Rika> red
[19:22:05] <FromDiscord> <Rika> thought it was orange
[19:22:52] <FromDiscord> <Bubblie> It looks red to le
[19:22:55] <FromDiscord> <Bubblie> (edit) "le" => "me"
[19:23:09] <FromDiscord> <Reptorian> In reply to @Rika "it will lead to": That is barely a issue there. Only 4 people code in said language including myself, and they're good at it. Multiple syntax for similar output is fine once you get used to it.
[19:23:09] <FromDiscord> <Bubblie> In reply to @Bubblie "Im fixing it but": I think I might end up doing this
[19:23:43] <FromDiscord> <Reptorian> Also, multiple syntax can make legible codes on hand of those who know how to use them right
[19:24:35] <FromDiscord> <Reptorian> (edit) "4" => "5"
[19:24:57] *** Joins: arkurious (~arkurious@user/arkurious)
[19:25:27] <FromDiscord> <Reptorian> Can i share python codes here? I want to see if i can convert them to nim.
[19:25:52] <FromDiscord> <Rika> In reply to @Reptorian "That is barely a": i am talking for nim
[19:26:04] <FromDiscord> <Rika> nim isnt aiming to be a "5 user language"
[19:26:05] <FromDiscord> <Bubblie> In reply to @Reptorian "Can i share python": Sure
[19:26:17] <FromDiscord> <Bubblie> I think thats fine?
[19:26:29] <FromDiscord> <Bubblie> I mean I think sharing of other languages is allowed right
[19:26:48] <FromDiscord> <Bubblie> Nothing in the rules states otherwise, and im not sure why there would
[19:28:33] <FromDiscord> <Reptorian> this is my most used python code - https://pastebin.com/pagSYLG1 . how feasible would it be to convert this to nim.
[19:28:38] <FromDiscord> <Reptorian> (edit) "nim." => "nim?"
[19:29:17] <FromDiscord> <Rika> sure why not its prolly gonna take a while though
[19:31:01] <FromDiscord> <Bubblie> If I put echo in a for loop, would it keep printing something in a new line?
[19:31:43] <FromDiscord> <Rika> echos have newlines yues
[19:31:44] <FromDiscord> <Reptorian> what that code does is add numbers or remove number from `#@gui` codes where appropriate - Sample of #@gui code here - https://pastebin.com/6n95DBqT
[19:32:12] <FromDiscord> <Bubblie> In reply to @Rika "echos have newlines yues": So, id have to use stdout if I want it on the same line
[19:32:21] <FromDiscord> <Rika> you would probably have a better time parsing strings in nim than python
[19:32:38] <FromDiscord> <Rika> there is `parseutils` and that other one i dont remember the name of but beef pushes it a lot
[19:32:46] <FromDiscord> <Rika> In reply to @Bubblie "So, id have to": stdout.write yes
[19:33:01] <FromDiscord> <Bubblie> Damn, you think nim should just add a statement for this?
[19:33:07] <FromDiscord> <huantian> strscans I’d assume
[19:33:08] <FromDiscord> <Rika> why
[19:33:16] <FromDiscord> <Rika> In reply to @huantian "strscans I’d assume": yes that
[19:33:17] <FromDiscord> <Bubblie> Every language has either print or println to specify
[19:33:31] <FromDiscord> <Bubblie> Nim is the only one ive seen that doesn’t
[19:33:38] <FromDiscord> <Bubblie> Even though you can use std
[19:34:13] <FromDiscord> <exelotl> it's not really a problem right? echo uses stdout anyways
[19:34:30] <FromDiscord> <huantian> In reply to @Bubblie "Every language has either": I mean python doesn’t, it uses a kwarg in print
[19:34:33] <FromDiscord> <Rika> i dont know what the issue is
[19:34:41] <FromDiscord> <Bubblie> In reply to @huantian "I mean python doesn’t,": Wait what
[19:34:50] <FromDiscord> <Rika> `print(xxx. end="")`
[19:34:54] <FromDiscord> <Rika> (edit) "`print(xxx." => "`print(xxx,"
[19:34:55] <FromDiscord> <Bubblie> Wait
[19:34:57] <FromDiscord> <Bubblie> Yeah you are right
[19:35:29] <FromDiscord> <Bubblie> I might as well uh
[19:35:35] <FromDiscord> <Bubblie> Use the funny stdout in that case
[19:35:43] <FromDiscord> <huantian> You can make your alias if you want
[19:35:49] <FromDiscord> <huantian> (edit) "You can make your ... alias" 03added "own"
[19:35:55] <FromDiscord> <Bubblie> Yeah
[19:37:30] <FromDiscord> <Bubblie> Is any of the nimgl developers in this server?
[19:37:45] <FromDiscord> <mratsim> In reply to @Bubblie "Is any of the": probably hanging in #gamedev
[19:37:53] <FromDiscord> <Bubblie> 👀
[19:41:10] <FromDiscord> <Bubblie> I cant seem to find their names in this discord
[19:41:10] <FromDiscord> <Bubblie> Damn
[19:42:53] <FromDiscord> <Solitude> there are other vulkan bindings, maybe they work out better for you https://github.com/Clyybber/vulkanim
[19:43:03] <FromDiscord> <Bubblie> 👀👀👀
[19:43:06] <FromDiscord> <Bubblie> Ill check it out
[19:45:40] <FromDiscord> <Bubblie> Holy shit
[19:45:44] <FromDiscord> <Bubblie> This just might work!
[19:46:24] <FromDiscord> <Bubblie> Now Id need to figure out glfw
[19:46:59] <FromDiscord> <Bubblie> There is a glfw 3 wrapper
[19:47:19] <FromDiscord> <Bubblie> Im assuming nimgl’s glfw bindings could work with this vulkans
[19:47:22] <FromDiscord> <Bubblie> Maybe
[19:50:08] <FromDiscord> <Bubblie> Is it possible to use futhark with glfw in this case
[19:50:44] <FromDiscord> <Bubblie> I wonder
[19:52:06] <FromDiscord> <Bubblie> Whats with both nimgl glfw wrappers and this other one I found messing with GLFWWindow? Bruh…
[19:53:44] <FromDiscord> <Bubblie> @PMunch hello, sorry to bother but is it possible to use futhark for glfw?
[19:53:58] <FromDiscord> <Rika> i dont see why not?
[19:54:02] <FromDiscord> <Rika> if its C
[19:54:36] <FromDiscord> <Bubblie> Yeah, I also think so, but glfw is a bit weird in how its made, so im unsure how well this would work, Ig I wont know unless I try.
[19:55:52] <PMunch_> I believe someone has already done that
[19:56:08] <FromDiscord> <Bubblie> With futhark?
[19:56:52] <PMunch_> Ah my mistake
[19:57:01] <PMunch_> It was raylib with the glfw backend
[19:57:10] <PMunch_> But it would have to be seriously weird to not work
[19:57:37] <FromDiscord> <Bubblie> Alright, will use futhark for this
[19:57:58] <FromDiscord> <Bubblie> Im not sure if I want to go to the full length of making my own bindings
[19:58:28] <FromDiscord> <Bubblie> I would use the other two if they didnt mess with glfwwindow weirdly
[19:59:52] <FromDiscord> <Bubblie> I hope im not coming off as “I CAN DO IT BETTER” because I don’t think that, I just feel like these bindings arent suitable in the long run of what im doing
[20:00:47] <PMunch_> What do you mean?
[20:01:46] *** Quits: PMunch (~PMunch@user/pmunch) (Killed (NickServ (GHOST command used by PMunch_)))
[20:01:52] *** PMunch_ is now known as PMunch
[20:02:12] *** Joins: PMunch_ (~PMunch@user/pmunch)
[20:02:19] <FromDiscord> <Ksr> sent a code paste, see https://play.nim-lang.org/#ix=3Tme
[20:03:34] <FromDiscord> <Phil> If you want to control that via compiler flags then yeah, that's the way to go I would say
[20:03:45] <FromDiscord> <Bubblie> sent a long message, see http://ix.io/3Tmf
[20:03:54] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3Tmg
[20:03:57] <FromDiscord> <Ksr> In reply to @Isofruit "If you want to": Is it typically done without compiler flags?
[20:04:03] <FromDiscord> <dom96> don't miss the parens 😛
[20:04:07] <FromDiscord> <Bubblie> Another example would be using glfw with vulkan
[20:04:16] <FromDiscord> <Bubblie> Because, that was HELLA weird in nimgl
[20:04:24] <FromDiscord> <Bubblie> Because I did get that working
[20:04:38] <FromDiscord> <Bubblie> However it was like, I never had to do this in other bindings to other languages
[20:04:42] <FromDiscord> <Bubblie> Not sure why this has to happen here
[20:05:42] <FromDiscord> <Bubblie> I might use nimgl glfw anyway, to see if it works with these seperate vulkan bindings I found
[20:05:52] <FromDiscord> <Phil> I haven't seen enough code to say typically, I can name you various ways to technically do it (could have a const in a file somewhere or decide via environment variable but that looks suboptimal).
[20:06:20] <FromDiscord> <Ksr> thx!
[20:06:45] <FromDiscord> <Bubblie> (edit) "I" => "solitude"
[20:06:50] <FromDiscord> <mratsim> In reply to @Ksr "Hi :). What is": https://github.com/status-im/nim-taskpools/blob/stable/taskpools/instrumentation/loggers.nim#L20-L22
[20:06:52] <FromDiscord> <Bubblie> I was planning on pring a fix to nimgl vulkan but im gonna test these new bindings that solitude sent
[20:07:06] <FromDiscord> <Bubblie> See if a similar issue exists, or if any do
[20:07:19] <FromDiscord> <Ksr> In reply to @mratsim "https://github.com/status-im/nim-taskpools/blob/sta": thank you 🙂
[20:07:41] <FromDiscord> <mratsim> I have a small design by contract stuff here: https://github.com/status-im/nim-taskpools/blob/stable/taskpools/instrumentation/contracts.nim#L59-L108
[20:08:01] <FromDiscord> <Reptorian> nim support class?
[20:08:06] <FromDiscord> <Reptorian> (edit) "class?" => "class/struct?"
[20:10:09] <FromDiscord> <Solitude> what?
[20:11:01] <FromDiscord> <Reptorian> checked in documentation, it does. haven't seen it in examples on the website though
[20:11:07] <FromDiscord> <Bubblie> Oh nim doesnt have classes
[20:11:16] <FromDiscord> <Bubblie> Well it can with one of the add ons if you want
[20:11:26] <FromDiscord> <Bubblie> But nim uses procs and such
[20:12:00] <FromDiscord> <Bubblie> And types
[20:12:15] <FromDiscord> <Bubblie> And objects
[20:12:58] <FromDiscord> <Bubblie> In reply to @Bubblie "Well it can with": Dont reccomend, nim is structured like this for a reason
[20:13:35] <FromDiscord> <Rika> no its fine to use
[20:13:43] <FromDiscord> <Bubblie> Well its fine to use
[20:13:44] <FromDiscord> <Bubblie> Yeah
[20:13:45] <FromDiscord> <Bubblie> But
[20:13:56] <FromDiscord> <enthus1ast> what do you miss that classes provide?
[20:14:14] <FromDiscord> <Bubblie> Yeah thats kinda the point, because nim has other ways to do things classes can
[20:15:02] <FromDiscord> <Reptorian> i downloaded nim, what next so i can get started coding?
[20:15:12] <FromDiscord> <Reptorian> (edit) "coding?" => "coding to see what nim is about?"
[20:15:25] <FromDiscord> <enthus1ast> add it to the path
[20:15:32] <FromDiscord> <enthus1ast> make sure your c compiler is on the path as well
[20:15:43] <FromDiscord> <enthus1ast> install the the vscode plugin (asuming you use vscode)
[20:15:51] <FromDiscord> <enthus1ast> that it i guess
[20:15:52] <FromDiscord> <Bubblie> Nim has a thing for doing it automatically too rigjt
[20:16:02] <FromDiscord> <Reptorian> oh, so nim is a compiled language?
[20:16:03] <FromDiscord> <enthus1ast> choosenim
[20:16:21] <FromDiscord> <huantian> Then write your Nim code in a file ending with Nim, then compile it with `nim c filename.nim`
[20:16:38] <FromDiscord> <Rika> nim is compiled, yes
[20:16:59] <FromDiscord> <Reptorian> i was looking for a interpretative language that i might like more than python
[20:17:27] <FromDiscord> <Rika> is there a reason you want an interpreted language
[20:17:40] <FromDiscord> <Rika> nim has an interpreter but it is not fully one to one with the compiled version
[20:18:01] <FromDiscord> <enthus1ast> javscript, lua?
[20:18:08] <FromDiscord> <enthus1ast> javascript
[20:18:31] <FromDiscord> <enthus1ast> but since you're here i would give nim a go ;)
[20:19:19] <FromDiscord> <Reptorian> In reply to @Rika "is there a reason": my workflow is better with interpretative language. i don't like to have to compile, and then run, but rather run it straight away
[20:19:31] <FromDiscord> <Rika> nim has a "compile and run" command
[20:19:46] <FromDiscord> <enthus1ast> and its quite fast compiling
[20:19:50] <FromDiscord> <Rika> `nim c -r file` for if you want the binary to be in the directory, `nim r file` if you dont need the binary
[20:20:06] <FromDiscord> <huantian> And with an IDE you can just have it compile and run as well
[20:20:11] <FromDiscord> <huantian> Like with vscode
[20:20:22] <FromDiscord> <reilly> But if you can't tolerate a compiler, there is NimScript... https://nim-lang.org/docs/nims.html
[20:21:07] <FromDiscord> <Rika> In reply to @Rika "nim has an interpreter": be careful of what i said here
[20:21:16] <FromDiscord> <Rika> it is not one to one with the compiled version
[20:21:21] <FromDiscord> <enthus1ast> the big benefit is, that nim produces small self contained binaries, that you can easily distribute
[20:21:32] <FromDiscord> <Reptorian> In reply to @Rika "`nim c -r file`": guess i will be using `nim r file` then. i'll see what happens.
[20:21:39] <FromDiscord> <enthus1ast> for interpreters you need to also distribute the interpreter and all source etcpp
[20:21:42] <FromDiscord> <Solitude> maybe you could try wrigin some nim before making assumptions how it will impact your workflow
[20:21:46] <FromDiscord> <Solitude> writing
[20:23:00] *** Joins: qwestion (a6872f2a98@198.108.77.17)
[20:23:59] <FromDiscord> <Rika> In reply to @enthus1ast "the big benefit is,": unless you use nim bindings
[20:24:04] <FromDiscord> <Rika> (edit) "nim" => "nim-c"
[20:24:23] <FromDiscord> <enthus1ast> yes true↵(@Rika)
[20:25:05] <FromDiscord> <Solitude> In reply to @Rika "unless you use nim-c": except if you link to recent libc and you send your binary to ubuntu user, not so selfcontained anymore...
[20:25:07] <FromDiscord> <Reptorian> In reply to @Solitude "maybe you could try": i do have experience with coding, i usually know if it won't be compatible with my workflow or not. `nim r file` trick seem to be something i'm open to trying as it's compatible with my workflow.
[20:25:23] <FromDiscord> <Solitude> In reply to @Reptorian "i do have experience": yeah, whatever
[20:25:34] <FromDiscord> <huantian> Solution\: destroy all Ubuntu users
[20:25:43] <FromDiscord> <Rika> solution: destroy ubuntu
[20:26:30] <PMunch> Hmm, is there a way to create an async procedure manually?
[20:26:36] <FromDiscord> <Rika> as in?
[20:26:43] <FromDiscord> <Rika> why?
[20:26:47] <PMunch> I'm playing around with COAP
[20:26:51] <FromDiscord> <Rika> COAP?
[20:27:01] <PMunch> And there you attach a callback and then send data
[20:27:12] <PMunch> And you have to handle all the callback stuff in the handler
[20:27:27] <PMunch> I want to wrap that in an async/await system instead
[20:28:16] <FromDiscord> <Rika> --expandMacro:async
[20:28:18] <FromDiscord> <Reptorian> coap is quite a interesting name for whatever it is
[20:28:27] <FromDiscord> <huantian> Hm you could asyncDump the func
[20:30:44] <PMunch> @Rika, haha yeah I know I can hack it that way :P
[20:31:17] *** Quits: Jjp137 (~Jjp137@2603-8000-1700-5881-02e9-3aff-fe42-7355.res6.spectrum.com) (Ping timeout: 240 seconds)
[20:31:23] <PMunch> @Reptorian, COnstrained APplications I believe it's short for
[20:31:30] <FromDiscord> <Rika> CA
[20:31:34] <FromDiscord> <Rika> xdddd
[20:31:36] <PMunch> Or maybe the P is protocol
[20:31:36] *** Joins: Jjp137 (~Jjp137@098-148-210-192.res.spectrum.com)
[20:31:46] <FromDiscord> <Rika> CAP
[20:31:58] <PMunch> Constrained Application Protocol (CoAP)
[20:32:04] <PMunch> According to WikiPedia
[20:32:22] <FromDiscord> <huantian> Just coap with it
[20:32:41] <FromDiscord> <Rika> coap seethe mald
[20:36:00] *** Joins: droidrage (046d050fdb@198.108.77.17)
[20:46:35] <FromDiscord> <enthus1ast> does one has inserted json with db\_mysql? How have you quoted the json? Because it seems just adding it with ? does not work since it produces\: `Invalid JSON text: "Invalid escape character in string."` for me
[20:53:59] <FromDiscord> <enthus1ast> mhhhh now its getting strange, i cannot even add this json via dbeaver to a mariadb json field.... what?
[20:54:40] <FromDiscord> <Rika> is your json valid
[20:55:08] <FromDiscord> <enthus1ast> json.$ generated it
[20:59:09] <FromDiscord> <enthus1ast> thats the json, nothing special\: https://play.nim-lang.org/#ix=3Tmx
[20:59:28] <FromDiscord> <enthus1ast> (i had newlines, in my copy -.-, dbeaver works)
[21:00:03] <FromDiscord> <enthus1ast> but this does not\:↵sql"""INSERT INTO Entry (title, userId, formdata) VALUES (?, ?, ?);"""
[21:03:16] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[21:13:55] <FromDiscord> <Bubblie> sent a long message, see http://ix.io/3TmD
[21:14:24] <FromDiscord> <Bubblie> (edit) "http://ix.io/3TmD" => "http://ix.io/3TmE"
[21:14:39] <FromDiscord> <Rika> nasm............
[21:14:43] <FromDiscord> <Rika> ive heard of that before
[21:14:45] <FromDiscord> <Bubblie> (edit) "http://ix.io/3TmE" => "http://ix.io/3TmF"
[21:15:27] <FromDiscord> <treeform> I like FASM over NASM, but FASM does not work on mac 😦
[21:16:04] <FromDiscord> <treeform> GAS is the worst though...
[21:16:26] <FromDiscord> <treeform> but parts of it are probably most used via GCC.
[21:16:38] <FromDiscord> <Bubblie> https://www.nasm.us this one 💀 but yeah assembly is not something people tend to touch unless they want to go so low level that they become insane
[21:16:52] <FromDiscord> <Bubblie> In reply to @treeform "I like FASM over": FASM is cool
[21:18:02] <FromDiscord> <Bubblie> In reply to @Bubblie "https://www.nasm.us this one 💀": Programming in assembly has made me lose my sanitu
[21:18:04] <FromDiscord> <Bubblie> (edit) "sanitu" => "sanity"
[21:18:53] <FromDiscord> <Bubblie> In reply to @treeform "GAS is the worst": It is
[21:18:55] <FromDiscord> <Bubblie> I agree with that
[21:19:06] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:54b:842d:538:e8f4)
[21:20:12] <FromDiscord> <treeform> But if you use GCC you use GAS (as a library), if you use VC++ you use MASM (as a library), if you use LLVM you use its llvm-as. NASM is never used in any regular nim flow...
[21:20:28] <FromDiscord> <Bubblie> In reply to @treeform "But if you use": Yes
[21:20:55] <FromDiscord> <Bubblie> However I thought it would be funny to use NASM
[21:20:58] <FromDiscord> <Bubblie> I was mistaken
[21:22:04] <FromDiscord> <Bubblie> LLVM assembly is more or less universal right
[21:22:07] <FromDiscord> <Bubblie> Because its llvm
[21:22:12] <FromDiscord> <Bubblie> It compiles to platform specific assembly
[21:23:21] <FromDiscord> <Generic> it isn't really an assembly
[21:23:22] <FromDiscord> <demotomohiro> That sound like it is different from real assembly lang
[21:23:29] <FromDiscord> <Bubblie> Llvm is IR
[21:23:31] <FromDiscord> <Bubblie> Intermediate
[21:23:32] <FromDiscord> <Generic> yeah
[21:23:44] <FromDiscord> <Bubblie> But its like, not somethjng you would use
[21:23:46] <FromDiscord> <Bubblie> Just use like
[21:23:55] <FromDiscord> <Bubblie> An actual language with llvm to develop your own languag
[21:23:57] <FromDiscord> <Bubblie> If you use it
[21:24:14] <FromDiscord> <Goat> @treeform I'm at the end of your Meta-programming FOSDEM talk. I'm simply blown away.
[21:24:15] <FromDiscord> <Bubblie> Idk why you would need to fully write in llvm IR to make a language
[21:24:30] <FromDiscord> <Bubblie> In reply to @Goat "<@!107140179025735680> I'm at the": FOSDEM talk?
[21:24:54] <FromDiscord> <Bubblie> Also MASM is hella cursed
[21:24:55] <FromDiscord> <Goat> https://fosdem.org/2022/schedule/event/nim_metaprogramming/
[21:25:00] <FromDiscord> <Bubblie> 👀
[21:25:51] <FromDiscord> <Bubblie> If I made a top ten of assemblys not to use
[21:26:00] <FromDiscord> <Bubblie> MASM would be the one you should avoid because holy shit
[21:26:11] <FromDiscord> <Bubblie> Its like, so impossinle to properly use it
[21:26:13] <FromDiscord> <Bubblie> I fucking hate windows
[21:26:45] <nrds> <06Prestige99> Could always switch to something, uh, better
[21:29:19] <FromDiscord> <DevNugget> how can I pass in the C code that Nim generates into a C compiler like gcc
[21:30:20] <FromDiscord> <Goat> I think you can generate a c library file and then use that like you normally would any other file
[21:33:25] <FromDiscord> <demotomohiro> @DevNugget Nim automatically call gcc to guild generated C code. If you want to use Nim in C project, Nim can generate dynamic/static link library that can be used for C.
[21:34:29] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/nimc.html
[21:35:58] *** Joins: rockcavera (~rc@192.12.114.202)
[21:35:58] *** Quits: rockcavera (~rc@192.12.114.202) (Changing host)
[21:35:58] *** Joins: rockcavera (~rc@user/rockcavera)
[21:36:22] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/manual.html#foreign-function-interface
[21:40:11] <FromDiscord> <DevNugget> thanks, I just wanted to know for a small experiment
[21:43:24] <FromDiscord> <DevNugget> can we possibly convert the generated code into assembly?
[21:51:25] <FromDiscord> <konsumlamm> that's what the C compiler does
[21:51:38] <FromDiscord> <konsumlamm> which is called automatically
[21:58:28] <FromDiscord> <Recruit_main707> if you want to check the assembly code you can use https://godbolt.org, but yeah you should be able to decompile the executable too
[22:22:29] <FromDiscord> <mratsim> In reply to @Bubblie "Dont need to be": Just create your assembler using Nim macros
[22:23:42] <FromDiscord> <mratsim> example: https://github.com/mratsim/constantine/blob/master/constantine/math/arithmetic/assembly/limbs_asm_mul_x86.nim#L91-L122
[22:24:22] <FromDiscord> <Bubblie> Thats great!
[22:26:22] <FromDiscord> <Bubblie> Didnt know nim could do that
[22:26:38] <FromDiscord> <mratsim> or your JIT assembler: https://github.com/mratsim/photon-jit/blob/master/examples/ex02_jit_brainfuck_vm.nim#L23-L85
[22:27:29] <FromDiscord> <mratsim> I have created a compiler in Nim macros: https://github.com/numforge/laser/blob/master/laser/lux_compiler/backend/lux_codegen.nim
[22:28:55] <FromDiscord> <Bubblie> I think this might help DeveloperNugget
[22:28:58] <FromDiscord> <Bubblie> As well
[22:28:59] <FromDiscord> <mratsim> and someone JIT LLVM IR from Nim https://github.com/can-lehmann/exprgrad/blob/main/exprgrad/llvmgen.nim
[22:29:04] <FromDiscord> <Bubblie> 👀
[22:29:19] <FromDiscord> <demotomohiro> In reply to @DevNugget "can we possibly convert": You can ask GCC to generate assembly code with `nim --noLinking --passC:"-masm=intel -S" --nimcache:/tmp/pathtocachedir compile example.nim` then, you get assembly code in `/tmp/pathtocachedir` directly.
[22:30:28] <FromDiscord> <iencec> [DevNugget](https://matrix.to/#/%40_discord_583926969138151426%3At2bot.io) if you want to have a look at the C code generated by nim, it is in the nimcache (location depends on your system) iirc there is also the compile command as comment in there.
[22:31:53] <FromDiscord> <demotomohiro> Nim has `--asm` option to produce assembler code but it is verbose and less readable.
[22:32:15] <FromDiscord> <demotomohiro> https://github.com/compiler-explorer/compiler-explorer/issues/3393
[22:33:29] *** Joins: vicfred (~vicfred@user/vicfred)
[22:47:01] <FromDiscord> <treeform> In reply to @Goat "<@!107140179025735680> I'm at the": Thanks!
[23:18:48] <NimEventer> New thread by Domogled: Datsaset in javascript DOM, see https://forum.nim-lang.org/t/9040
[23:29:15] <FromDiscord> <retkid> https://github.com/Glavnokoman/vuh
[23:29:21] <FromDiscord> <retkid> what do you guys think of this syntax
[23:29:36] <FromDiscord> <retkid> apart from the... c++
[23:29:38] <FromDiscord> <retkid> 🤮
[23:32:15] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[23:38:41] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:42:03] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:46:57] <FromDiscord> <Bubblie> Whats this
[23:47:29] <FromDiscord> <Bubblie> Oh holy shit
[23:47:43] <FromDiscord> <Bubblie> In reply to @retkid "apart from the... c++": I think its decent ig
[23:48:14] <FromDiscord> <Bubblie> It does get rid of some boilerplate
[23:48:22] <FromDiscord> <Bubblie> Id have to use it more if I wanted to see how good it is
[23:48:35] <FromDiscord> <Bubblie> The problem is, I used c++ vulkan but not really vuh
[23:49:06] <FromDiscord> <retkid> It took me a bit
[23:49:11] <FromDiscord> <retkid> I don't like C
[23:49:12] <FromDiscord> <retkid> (edit) "C" => "C++"
[23:49:13] <FromDiscord> <Bubblie> Also, I think nim vulkan bindings gets rid of a ton of verbosity already
[23:49:16] <FromDiscord> <retkid> I like C
[23:49:20] <FromDiscord> <Bubblie> In reply to @retkid "I don't like C++": Nobody does
[23:49:26] <FromDiscord> <retkid> C is cool tho
[23:49:32] <FromDiscord> <Bubblie> Not even people who actually like and use C++ like C++
[23:49:38] <FromDiscord> <retkid> Nana
[23:49:40] <FromDiscord> <retkid> i had a friend
[23:49:47] <FromDiscord> <retkid> she was writing a strut
[23:50:00] <FromDiscord> <retkid> and i was like "why do you do this to yourself"
[23:50:03] <FromDiscord> <Bubblie> In reply to @retkid "C is cool tho": C is fine to an extent, there have been times where it has driven me absolutely mad
[23:50:04] <FromDiscord> <retkid> she said "oh i like C++"
[23:50:11] <FromDiscord> <Bubblie> HOW
[23:50:28] <FromDiscord> <retkid> its all the worst parts of Java with all the worst parts of C
[23:50:33] <FromDiscord> <Bubblie> LMAO
[23:50:49] <FromDiscord> <Bubblie> C++ templates are very powerful ngl
[23:50:58] <FromDiscord> <Bubblie> And its preprocessor is also a bit too powerful
[23:51:07] <FromDiscord> <Bubblie> Allows you to do some cursed things
[23:51:25] <FromDiscord> <retkid> It took me a bit to understand how the class tempalates worked
[23:51:31] <FromDiscord> <retkid> I liked it whence i got it
[23:51:33] <FromDiscord> <Bubblie> Yeah, its not easy
[23:51:35] <FromDiscord> <retkid> but then after that
[23:51:46] <FromDiscord> <retkid> i was like "ok how do i do a buffer read"
[23:51:49] <FromDiscord> <Bubblie> 💀
[23:51:52] <FromDiscord> <Bubblie> Im so sorry
[23:52:01] <FromDiscord> <Bubblie> I know where this is goong
[23:52:06] <FromDiscord> <retkid> so i sat there
[23:52:06] <FromDiscord> <Bubblie> (edit) "goong" => "going"
[23:52:08] <FromDiscord> <retkid> think i got it
[23:52:11] <FromDiscord> <retkid> wont compiel
[23:52:11] <FromDiscord> <retkid> (edit) "compiel" => "compile"
[23:52:13] <FromDiscord> <Bubblie> LMAO
[23:52:14] <FromDiscord> <retkid> random issues
[23:52:19] <FromDiscord> <retkid> understand i do not got it
[23:52:23] <FromDiscord> <Bubblie> Sounds like c++
[23:52:25] <FromDiscord> <retkid> the buffer is stupid and makes no sense
[23:52:26] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:54b:842d:538:e8f4) (Remote host closed the connection)
[23:52:30] <FromDiscord> <retkid> and then just did a static read
[23:52:37] <FromDiscord> <retkid> ¯\_(ツ)_/¯
[23:52:59] <FromDiscord> <Bubblie> The whole reason I am trying to use nim is so I dont have to deal with the shit that is vulkan c++
[23:53:16] <FromDiscord> <retkid> I want to get into GPGPU compute shaders
[23:53:33] <FromDiscord> <retkid> ...
[23:53:36] <FromDiscord> <retkid> notabily i lack a gpu
[23:53:38] <FromDiscord> <Bubblie> LMAO
[23:53:43] <FromDiscord> <Bubblie> Well you gotta get that first
[23:53:57] <FromDiscord> <retkid> i can go opencl tho
[23:54:04] <FromDiscord> <Bubblie> Thats good
[23:54:15] <FromDiscord> <retkid> so thats what im working with while im trying to figure out how vulkan works
[23:54:30] <FromDiscord> <Bubblie> Vulkan is very hard but imo very worth it
[23:54:34] <FromDiscord> <Bubblie> The things you are able to do is just
[23:54:36] <FromDiscord> <Bubblie> Insanity
[23:54:39] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[23:54:42] <FromDiscord> <Bubblie> Also no fucking opengl state machine
[23:54:43] <FromDiscord> <Bubblie> Oh god
[23:54:46] <FromDiscord> <Bubblie> Fuck the state machine
[23:54:47] <FromDiscord> <Bubblie> Seriously
[23:54:57] <FromDiscord> <Bubblie> Opengl is nice till I have to deal with state
[23:55:01] <FromDiscord> <Bubblie> Because its not working
[23:55:04] <FromDiscord> <Bubblie> And then I shit myself
[23:55:28] <FromDiscord> <Bubblie> In reply to @retkid "so thats what im": Thats a good idea
[23:55:41] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:55:48] <FromDiscord> <Bubblie> Opencl and vulkan are similar in some ways concept wise
[23:55:50] <FromDiscord> <Bubblie> So it can help
[23:56:01] <FromDiscord> <Bubblie> I learnt more about vulkan through opengl actually
[23:56:10] <FromDiscord> <Bubblie> Even though they are still very different
[23:58:10] <FromDiscord> <retkid> well vulkan is insanely fast and works everywhere
[23:58:16] <FromDiscord> <retkid> that isn't an igpu from 2011
[23:58:39] <FromDiscord> <retkid> so its very worth it
[23:58:49] <FromDiscord> <retkid> people also pay you more for this hidden knowledge
[23:59:13] <FromDiscord> <retkid> I need to reprogram a project from ground up
[23:59:53] <FromDiscord> <retkid> and i couldn't get it to work because compute times on a cpu where too slow and hard to parallelize. Using vulkan can actually make it work
[23:59:56] <FromDiscord> <Bubblie> In reply to @retkid "people also pay you": LOL
