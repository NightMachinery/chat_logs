[00:18:49] *** Quits: flor (~florian@191.97.193.178.dynamic.wline.res.cust.swisscom.ch) (Quit: ZNC http://znc.in)
[00:21:08] *** Joins: flor (~florian@191.97.193.178.dynamic.wline.res.cust.swisscom.ch)
[13:21:00] <typedef[m]> I hope there are some DNS wizards here, because I've got an annoying problem
[13:22:13] <typedef[m]> I have a static DNS server and a dynamic one given by DHCP
[13:24:03] <typedef[m]> I want to set them up so that one is the default and the other one is used as fallback when the first doesn't know the answer to a query (not when the first is dead, but when I get an NXDOMAIN or something)
[13:24:48] <typedef[m]> Setting the static server as fallback is so easy that even systemd can do that
[13:25:12] <typedef[m]> But I want to do the opposite, i.e. setting the dynamic server provided by DHCP as fallback, and I can't find how
[13:36:43] <afontain[m]> typedef: at gnugen, we use dnsmasq as DHCP server
[13:37:13] <afontain[m]> we have "static" IP address, and dnsmasq is the only source of truth
[13:37:38] * afontain[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/6654f37387c9c07dcf930a016e458a3ae0c1b7f9
[14:01:02] <typedef[m]> The problem is that there are some queries that only my static server can resolve and some others that only the dynamic one can resolve D:
[14:14:29] <afontain[m]> do you really need that? :P
[14:19:55] <typedef[m]> Well, technically it is a symptom of a somewhat broken system and I'm just trying to win a fight against entropy, buuuuuuut it would be convenient
[14:25:07] <Orbstheorem> <typedef[m]> "I have a static DNS server and a..." <- I used to have this.
[14:25:08] <Orbstheorem> <typedef[m]> "I want to set them up so that..." <- Bind can do this.
[14:25:24] <Orbstheorem> <typedef[m]> "But I want to do the opposite, i..." <- You can chain dns servers with bind.
[14:25:39] <Orbstheorem> That said, it's probably overkill.
[14:27:24] <Orbstheorem> I would have systemd-networkd act as both a DNS server on port 53, use the hosts file to provide the static leases and then add the recursive resolution of DNS servers in order.
[14:27:45] <Orbstheorem> s/resolution of//
[14:27:59] <Orbstheorem> Another option would be to use bind, and code the chaining rules you want.
[14:28:39] <Orbstheorem> If this is for a single machine, look at the nsswitch documentation, I vaguely remember something about a separate module providing static leases..
[14:28:42] <Orbstheorem> s/.././
[14:28:44] <afontain[m]> another option would be to ask why you are inflicting that on yourself and if it's really such a good idea :S
[14:28:57] <Orbstheorem> Experimentation is a good excuse.
[14:29:06] <Orbstheorem> That way you know and learn to master DNS.
[14:57:28] <typedef[m]> Well, at least I mastered the knowledge that DNS is clunky and archaic like most of the internet protocols out there
[14:59:18] <typedef[m]> I can't wait for the day when we collectively realize that we should use the knowledge gathered from the last 40 years of computer networks to rebuild the internet from the ground up
[15:00:33] <typedef[m]> I mean, some people do that already, but we still have the good old curse of backwards compatibility hanging around
[15:04:29] <afontain[m]> typedef: I believe many people doing that have the bad idea of wanting a centralized, advertisable, censorable internet
[15:06:39] <typedef[m]> The best DNS-thing I've seen yet is probably GNS
[15:07:10] <afontain[m]> the GNUnet one?
[15:08:31] <typedef[m]> Yes
[19:30:09] *** Quits: M55[m] (~M55gnugen@2001:470:69fc:105::1:934) (Quit: You have been kicked for being idle)
[23:32:50] <artectrex[m]> <typedef[m]> "The best DNS-thing I've seen yet..." <- Nah SCION name resolution ðŸ˜œ
