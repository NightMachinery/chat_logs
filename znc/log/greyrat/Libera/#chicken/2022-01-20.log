[00:00:30] <Zipheir> IIRC Bunny351 expressed some interest in providing bytestring literal notation.
[00:00:36] <wasamasa> I've run into this problem when writing depp
[00:00:54] <wasamasa> I initially wanted to use the utf8 egg, but this proved to be a mistake
[00:01:11] <wasamasa> because the paths inside a git repo are not associated with any encoding whatsoever
[00:01:21] <wasamasa> they can be arbitrary bytes
[00:02:20] <Zipheir> That doesn't seem like a good fit for strings, though, so I'd advocated for full Unicode strings plus bytestrings for stuff like that.
[00:02:33] <Zipheir> *advocate
[00:03:02] <wasamasa> suppose you want to do something like rendering such a path using sxml in a HTML document
[00:04:23] <wasamasa> you'd need to write a procedure that attempts to convert it into a string using utf8, but uses hex escapes or placeholder characters whenever running into an error or some unprintable control character
[00:06:00] <Zipheir> So you'd use a bytestring in that case, right?
[00:06:15] <wasamasa> yeah plus some usable encoding procedure
[00:06:26] <wasamasa> because ssax isn't aware of bytestrings, just strings
[00:06:58] <wasamasa> whereas, suppose I wanted to print a bytestring to the terminal as is, I'd need a different procedure, rather than an encoder
[00:07:32] <Zipheir> Then the issue is not so much Unicode-in-core as it is getting a ton of eggs to handle Unicode strings.
[00:08:00] <Zipheir> And possibly switching to bytestrings if they want to handle arbitrary encodings.
[00:08:06] <wasamasa> good luck with that
[00:08:16] <Zipheir> So what can be done?
[00:09:02] <wasamasa> currently it seems that most eggs (where it makes a difference) give you both a naive and utf8-aware version for import
[00:09:14] <Zipheir> It seems to me like r7-flavored-CHICKEN at the very least should have built-in Unicode.
[00:09:17] <wasamasa> but I remember running into a csv egg by ivan that always used utf8
[00:09:48] <wasamasa> and therefore broke on data that wasn't utf8
[00:09:50] <Zipheir> Yes.
[00:10:10] <wasamasa> I processed music tags with it
[00:10:18] <Zipheir> I recently nuked the non-utf8 module of srfi-152.
[00:10:53] <wasamasa> where you can get latin1 (which can contain anything really) or utf8
[00:11:18] <wasamasa> and you can totally have both in one music collection
[00:11:47] <Zipheir> Well, I'm a bit frustrated, since it seems Unicode in CHICKEN strings is pretty far off, unless bytestrings get some traction.
[00:14:41] <Zipheir> Again, at the very least, r7rs could provide only Unicode strings, since the number of eggs using r7rs *and* arbitrary-encoding strings is probably very small.
[00:15:24] <Zipheir> That would get the ‚¨§ rolling.
[00:25:39] <wasamasa> do you remember how long it took for the python world to migrate all the things to python3?
[00:25:49] <wasamasa> I suspect this would be something worthy a C6 release
[00:26:22] <wasamasa> a massive pain in the name of correctness
[00:50:25] <Zipheir> I've never paid much attention to the Python world.  I hope we can do things better.
[00:50:43] <Zipheir> A massive pain in the name of the fundamental reality of text in the 21st century!
[00:52:57] <Zipheir> jcowan's been saying "go full Unicode" for longer than I've been writing Scheme, so I'm adding my voice to his on that.
[01:00:10] <Irvise> What Scheme implementations work in full Unicode?
[01:00:28] * Irvise is a beginner trying to get a better understanding on the Landscape.
[01:01:58] <Irvise> Guile I believe is one of them...
[01:04:46] <Zipheir> Chibi is one.
[01:04:46] <m455> Chibi scheme does!
[01:04:50] <Zipheir> Jinx.
[01:04:50] <m455> jinxxx
[01:04:52] <m455> LOL
[01:05:24] <m455> (https://github.com/ashinn/chibi-scheme there is a bulleted list here for those interested)
[01:07:18] <m455> i assume racket does too maybe?
[01:07:21] <m455> i'm not sure though
[01:07:24] <m455> "scheme"
[01:07:31] <m455> a very controversial thing to say here ;)
[01:10:10] <Zipheir> Yes, Racket has Unicode strings https://docs.racket-lang.org/guide/strings.html
[01:10:33] <Zipheir> "For working with plain ASCII, working with raw bytes, or encoding/decoding Unicode strings as bytes, use byte strings."  Exactly.
[01:11:39] <m455> nice!
[01:13:39] <Zipheir> And we have that infrastructure in CHICKEN, albeit via eggs.
[01:14:47] <m455> oh i should probably look into adding the utf8 egg. i'm gonna look it up now lol
[01:14:52] <m455> (adding it to my personal projects lol)
[01:15:13] <m455> this one i guess? http://wiki.call-cc.org/eggref/5/utf8
[01:16:05] <Irvise> Oh, then Chicken does have UTF8 albeit in an egg no?
[01:16:13] <m455> ah looks like i also need the iset egg to use that too
[01:16:22] <m455> (http://wiki.call-cc.org/eggref/5/utf8#requirements)
[01:16:54] <m455> Irvise: yeah it seems like youll need to do a `chicken-install iset` `chicken-install utf8`, and then add (import utf8) in your code
[01:17:09] <Zipheir> All you need is chicken-install utf8
[01:17:42] <Zipheir> *Then* you need to be careful to ensure that you import your string procedures from utf8, and not from scheme, (chicken base), (chicken string), ...
[01:17:43] <Irvise> üëçÔ∏è
[01:17:57] <m455> Zipheir: ohhh is iset installed automatically during that?
[01:18:00] <Zipheir> Yes.
[01:18:16] <m455> good to know! and about the (import (utf8 string)) stuff too!
[01:18:23] <m455> (if that's how you do it... hahah)
[01:18:26] <Zipheir> chicken-install does dependency resolution, right?  It always has for me.
[01:18:34] <m455> Zipheir: i don't know xD 
[01:18:43] <Irvise> Seems Guile also has Unicode: https://www.gnu.org/software/guile/manual/guile.html#BOM-Handling
[01:18:45] <Zipheir> m455: utf8 provides utf8-srfi-13, so there's that.
[01:19:08] <Zipheir> I've also built the srfi-130 and srfi-152 libraries on top of utf8, so they're all Unicode-only now.
[01:19:10] <m455> Zipheir: how would i import things like string-translate*?
[01:19:26] <m455> which is originally from the (chicken string) library
[01:19:41] <Zipheir> m455: (import (only utf8 string-translate*))
[01:20:09] <Zipheir> And don't import (chicken string).
[01:20:41] <Zipheir> To be 100% explicit, you could do (import (prefix utf8 utf8:))
[01:21:11] <wasamasa> mixing both without prefixing can get confusing very quick
[01:21:22] <Zipheir> No kidding.
[01:21:37] <wasamasa> it's no fun to debug
[01:21:49] <Zipheir> I was going to say, Heisenbugs galore.
[01:21:54] <m455> Zipheir: thank you!!!
[01:21:59] <wasamasa> like, when you discover that the print procedure isn't utf8-aware, but the utf8 imports of display/write are
[01:21:59] <m455> gonna save that for my own notes!
[01:22:21] <m455> oh no hahaha
[01:22:22] <Zipheir> wasamasa: utf8 provides print, though, which is nice.
[01:22:28] <Zipheir> m455: yw!
[01:22:45] <Zipheir> m455: Please consider the srfi-152 egg if you need a string library.
[01:22:52] <wasamasa> huh, does it
[01:22:59] <wasamasa> oh yes, it does
[01:23:05] <wasamasa> it must have been something else then?
[01:23:18] <Zipheir> And srfi-135, my personal favorite.
[01:23:44] <m455> Zipheir: alright i'll check it out. i really suck at using start and end indexes, and really like how string-translate* lets me use the functionality that racket's string-replace gives, where you only need to do (string-replace some-string FROM TO)
[01:23:53] <Zipheir> All of these srfis should have been given catchier names as eggs... I didn't name them, though.
[01:24:18] <m455> i guess i should specify that i dont always know where something starts in a string, so the substring-based string replacments i struggle with a lot haha
[01:25:05] <Zipheir> m455: Yeah.  It's unfortunate that none of the string SRFIs include something exactly like string-translate.
[01:25:17] <m455> yeah :(
[01:25:25] <m455> and yet again, the chicken community kicks ass :D
[01:25:58] <m455> i'm not like a professional or educated programmer, i just do it as a hobby, but i really like making small projects like this! https://git.m455.casa/sp/tree/src/main.scm
[01:26:22] <m455> it's just like a pasting tool i use to paste code or images to my server to share with friends haha
[01:27:01] <Irvise> Btw, some of you may be interested in the Minimal code devroom of FOSDEM
[01:30:33] <Irvise> https://fosdem.org/2022/schedule/track/declarative_and_minimalistic_computing/
[02:13:34] <m455> just to reiterate, it would be awesome if utf8 was the default/unicode was full supported by default/without needing external dependencies for chicken :D
[02:13:37] <m455> i'm all for that lol
[02:29:46] <Bunny351> a lot of work...
[02:31:26] <Bunny351> and the one big shortcoming left to sort out, in a way...
[03:16:30] *** Quits: andyjpb (~andyjpb@user/andyjpb) (Ping timeout: 250 seconds)
[04:08:04] *** Quits: FunkyCosmonaut (~Funky@188-34-237-24.gci.net) (Ping timeout: 250 seconds)
[04:09:44] *** Quits: chicken_m (~chickenru@2604:3d08:5684:3000::5fab) (Quit: Konversation terminated!)
[04:11:17] *** Joins: FunkyCosmonaut (~Funky@188-34-237-24.gci.net)
[04:14:52] *** Joins: chicken_m (~chickenru@2604:3d08:5684:3000::5fab)
[04:37:26] *** Quits: alaricsp (~alaric@user/alaricsp) (Ping timeout: 268 seconds)
[04:48:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:48:42] *** Joins: alaricsp (~alaric@73.238.187.81.in-addr.arpa)
[04:48:42] *** Quits: alaricsp (~alaric@73.238.187.81.in-addr.arpa) (Changing host)
[04:48:42] *** Joins: alaricsp (~alaric@user/alaricsp)
[05:17:58] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:36:20] <m455> Bunny351: i apprecaite all the work everyone has done <333 such an awesome community too
[06:17:13] *** Joins: klovett_ (~klovett@166.205.90.179)
[06:19:37] *** Quits: klovett (~klovett@166.205.90.163) (Ping timeout: 240 seconds)
[06:19:56] *** Quits: FunkyCosmonaut (~Funky@188-34-237-24.gci.net) (Ping timeout: 256 seconds)
[06:56:48] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:59:27] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[07:09:45] *** Joins: skapata (~Skapata@user/skapata)
[07:15:22] *** Joins: FunkyCosmonaut (~Funky@188-34-237-24.gci.net)
[07:18:15] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: magic-pipes
[07:21:42] *** Quits: FunkyCosmonaut (~Funky@188-34-237-24.gci.net) (Ping timeout: 256 seconds)
[07:22:05] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:55:52] *** Joins: persimmon (~pyhooma@2601:142:8280:520::887e)
[08:08:41] *** Parts: persimmon (~pyhooma@2601:142:8280:520::887e) (Leaving)
[08:11:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:15:23] *** Joins: FunkyCosmonaut (~Funky@188-34-237-24.gci.net)
[08:20:16] *** Quits: idstam (~idstam@79.138.227.96.mobile.tre.se) (Ping timeout: 250 seconds)
[08:22:36] *** Joins: idstam (~idstam@2.68.79.111.mobile.tre.se)
[08:35:52] *** Quits: FunkyCosmonaut (~Funky@188-34-237-24.gci.net) (Ping timeout: 250 seconds)
[08:56:32] *** Joins: FunkyCosmonaut (~Funky@188-34-237-24.gci.net)
[09:34:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d)
[09:34:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d) (Changing host)
[09:34:53] *** Joins: skapata (~Skapata@user/skapata)
[09:42:41] *** Quits: ecloud (~quassel@192.89.120.58) (Ping timeout: 268 seconds)
[09:51:45] *** Joins: ecloud (~quassel@192.89.120.58)
[10:27:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:42:35] <sjamaan> moin
[11:07:23] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:18:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:21:18] <klm> sjamaan: mornin!
[11:45:41] <vandusen> SPAM! SPAM! SPAM! by freee
[12:13:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:53:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[12:53:13] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:11:37] *** Quits: FunkyCosmonaut (~Funky@188-34-237-24.gci.net) (Ping timeout: 240 seconds)
[13:12:12] *** Joins: andyjpb (~andyjpb@user/andyjpb)
[13:39:43] <vandusen> SPAM! SPAM! SPAM! by freeee
[13:41:10] <Bunny351> sjamaan: I think there is no way around making unicode built-in
[13:41:47] <wasamasa> yeah, but imagine the pain of rewriting all FFI-interfacing code to either use a string for utf8 data or a blob/srfi-4 vector for binary data
[13:42:21] <Bunny351> yes, it won't be easy.
[13:42:22] <wasamasa> but hey, this would allow the optimization of NUL termination
[13:42:33] <Bunny351> or we would need a second string type
[13:42:52] <Bunny351> Tcl marks strings internally as unicode or binary
[13:42:59] <wasamasa> that would be the ruby approach
[13:43:16] <wasamasa> which is great for throw-away scripts
[13:43:21] <sjamaan> How does that work for Ruby?
[13:43:29] <Bunny351> but since there are already bytevectors and SRFI-4 it feels somewhat redundan
[13:43:30] <Bunny351> t
[13:43:40] <sjamaan> I was just gonna say
[13:44:05] <Bunny351> one the other hand, non-unicode strings should still print as text
[13:44:08] <wasamasa> a string has an encoding associated with it, you can change the associated encoding and that changes how it's dealt with when being processed by string functions
[13:44:27] <wasamasa> you cannot combine strings of different encoding
[13:44:31] <Bunny351> needs type-dispatch in each and every string op
[13:44:35] <wasamasa> yup
[13:44:47] <sjamaan> ugh
[13:45:04] <sjamaan> Also we don't really want to support other encodings than Unicode (and possibly ASCII)
[13:45:05] <wasamasa> smalltalk-like languages optimize dispatching as much as possible, but it's still terrible for something like scheme
[13:45:17] <Bunny351> UTF-16! (just joking)
[13:45:29] <sjamaan> Bunny351: Why should "non-unicode strings" print as text?
[13:45:38] <sjamaan> It'll just lead to line noise if they're not ASCII
[13:45:49] <sjamaan> Assuming the terminal is configured for Unicode
[13:46:01] <Bunny351> non-unicode strings that are, say, raw ascii
[13:46:30] <sjamaan> But if they're ASCII you might as well load them into strings
[13:46:48] <Bunny351> true
[13:46:51] <sjamaan> That's the nice property of UTF-8
[13:47:18] <Bunny351> I wouldn't want some ugly string iterator API...
[13:47:59] <Bunny351> IIRC larceny had a pretty elaborate dynamic internal string representation, but I also remember some evaluation turned out that this didn't really result in any performance advantages
[13:48:18] <sjamaan> What do you mean with string iterator API?
[13:48:29] <sjamaan> Like "ropes" or some shit?
[13:48:45] <Bunny351> well, optimizing for fast iteration over strings, as opposed to scan the string for each index
[13:49:17] <Bunny351> ropes are rather complex, I think, even though I appreciate balanced trees a lot, recently...
[13:50:11] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:35da:7bb3:e3f8:3a44)
[13:50:17] <Bunny351> the ffi problem could be worked around by having a distinct foreign type
[13:50:54] <Bunny351> you still would have to change the code, but one could explicitly state how the string should be passed
[13:52:08] <Bunny351> or at least, get a type-level error or warning on the C side to inform you about the case
[13:52:27] <sjamaan> The simplest way that could possibly work is to require strings to be utf8 and users to use bytevectors.  FFI allows either or, with the scheme-pointer as a fallback to allow different types
[13:53:00] <Bunny351> yes
[13:53:56] <s-liao> Yes. Like the interface is bytevector?
[13:54:33] <Bunny351> still, string indexing isn't O(1) anymore, which is sad...
[13:55:23] <sjamaan> And inline mutation doesn't work anymore
[13:55:36] <Bunny351> ugh, right
[13:55:54] <Bunny351> especially in tight loops
[13:55:55] <wasamasa> and you'd pretty much need the utf8 helpers for practical work
[13:56:10] <wasamasa> like dealing with a foreign library that uses latin1 strings
[13:56:44] <Bunny351> what helpers exactly?
[13:57:02] <wasamasa> stuff like, turn string into a bytevector
[13:57:25] <s-liao> I remember like for FFI, as the pointer in the interface, once there is across modules. it has an issue.
[13:58:02] <wasamasa> make-byte-string byte-substring byte-string-length byte-display byte-print byte-print* ->byte-string byte-string-split byte-string-translate byte-substring=? byte-substring-ci=? byte-substring-index byte-substring-index-ci read-byte-string
[13:58:23] <Bunny351> yes, we need builtins, preferrably at C level for all of this
[13:58:51] <s-liao> You have to actually the values pass into the modules.
[13:58:54] <Bunny351> also handling all the funny special cases like case conversion
[13:59:12] <wasamasa> these are not documented and I wasn't aware of them being a thing
[13:59:32] <wasamasa> I've resorted to using the original scheme imports to construct my own helpers
[14:07:09] <andyjpb> Is it possible to avoid doing the Python3 thing where you make your entire library catalogue incompatible?
[14:07:25] <andyjpb> i.e. can we add new string types but leave the existing ones as they are so that existing code still works?
[14:07:39] <wasamasa> not really
[14:07:44] <wasamasa> https://api.call-cc.org/5/doc/utf8#sec:Discussion
[14:07:46] <Bunny351> I guess just making the default string type utf is the first step
[14:08:20] <Bunny351> one should only be concerned about encoding when using the ffi, also file I/O
[14:08:25] <andyjpb> checked utf8? i.e. when you put characters in a string it checks for proper multibyte sequences
[14:08:27] <wasamasa> it sounds nice in theory that programs break on you every time you switch between encoding boundaries
[14:08:35] <wasamasa> in practice it's so annoyin
[14:08:52] <wasamasa> because there are some you're not even thinking of
[14:09:10] <wasamasa> like when doing network transmissions, serialization, terminal interaction, file interaction, clipboard, ...
[14:09:39] <wasamasa> at some places the encoding is plain unknown and you have to resort to guessing (or pass the potato to someone else)
[14:09:51] <andyjpb> re wasamasa's link, it sounds like "redefine the operations on the strings." is the path most similar to numbers (where there are lots of different types of number and some specialised and some generic APIs for working on them)
[14:10:30] <andyjpb> I thought potato was an image encoding type (for bad cameras) rather than a string encoding type ;-)
[14:10:41] <wasamasa> lol
[14:10:51] <wasamasa> it's more of a hot potato thing
[14:11:02] <andyjpb> :-)
[14:11:14] <wasamasa> last time I ran into this was when dealing with json in python
[14:12:36] <wasamasa> but I don't remember the details
[14:12:45] <andyjpb> it's also already the case the if you `import numbers` (or even `import utf-8`) then its up to you to audit your eggs for compatibility. So that seems like a reasonable direction to continue in
[14:13:15] <wasamasa> I'd expect arithmetic to break a lot less often on me than strings
[14:13:50] <andyjpb> arithmetic is usually broken by default in languages without scheme-style numeric towers ;-)
[14:30:18] <Bunny351> oh, there's a type code left (0xf...)...
[14:32:18] <wasamasa> lol
[14:32:40] <wasamasa> let's use it for something truly important, like blockchain technology
[14:32:54] <Bunny351> one could actually use the string bits and drop the BYTEBLOCK bit
[14:33:09] <wasamasa> vandusen: I'm joking, but someone out there is bound to take me seriously and start a debate leading nowhere
[14:33:12] <vandusen> wasamasa: FACT.
[14:33:16] <Bunny351> quantum-cloud-blockchain-ai-type
[14:33:19] * wasamasa slow claps
[14:33:45] <Bunny351> reimplemented in rust, naturally
[14:33:55] <wasamasa> vandusen occasionally being spot-on is so much better than actual chat bots
[14:34:00] <wasamasa> it's uncanny
[14:34:20] <wasamasa> says a lot about human communication
[14:35:58] <Bunny351> it would actually be relatively straightforward to have a non-byteblock string type with the same typecode
[14:36:30] <Bunny351> if the distinction is internal, we can always have a fast-track for O(1) indexing
[14:37:05] <Bunny351> one could even mutate the header to set the byteblock bit, if a builtin detects that the string contains only single-byte entities
[14:37:28] <Bunny351> now, if only the scrutinizer could distinguish as well...
[14:37:40] * Bunny351 ponders
[14:38:36] <Bunny351> yeah, assume UTF8 all the time, and let the primitives mark the string, should they detect the string is 8-bit clean
[14:57:24] *** Joins: FunkyCosmonaut (~Funky@188-34-237-24.gci.net)
[14:58:54] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[15:34:08] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[15:34:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:09:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:35:59] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Quit: The Lounge - https://thelounge.chat)
[16:36:28] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[16:44:22] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Quit: The Lounge - https://thelounge.chat)
[16:45:09] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[17:07:05] *** Joins: ublx (~ublx@user/ublx)
[17:25:01] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 256 seconds)
[17:29:48] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5cef:e512:2284:6d3c)
[17:29:48] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5cef:e512:2284:6d3c) (Changing host)
[17:29:48] *** Joins: skapata (~Skapata@user/skapata)
[17:33:21] *** Joins: elflng (~elflng@5.28.137.182)
[17:43:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:49:09] *** Joins: johnjaye (~pi@173.209.65.233)
[18:04:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:21:37] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:29:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:34:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:42:39] *** Quits: ecloud (~quassel@192.89.120.58) (Ping timeout: 256 seconds)
[18:47:56] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:50:27] *** Joins: ecloud (~quassel@192.89.120.58)
[19:02:00] *** Quits: andyjpb (~andyjpb@user/andyjpb) (Remote host closed the connection)
[20:40:35] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[21:15:00] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Remote host closed the connection)
[21:17:08] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[21:21:26] <Zipheir> Also, as I've been saying to wasamasa, the srfi-207 egg makes bytestrings the best alternative to strings for non-Unicode applications.  Incorporating bytestring literal notation from the egg seems like it might be a good way to make it easier to use them, IMO.
[21:29:45] <Bunny351> noted
[21:33:55] <Zipheir> Hmm, maybe I'll extend the 207 egg with the missing stuff that (chicken string) provides.
[21:34:21] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[21:52:54] *** Joins: andyjpb (~andyjpb@user/andyjpb)
[22:23:02] *** Quits: megane (~megane@chicken/developer/megane) (Ping timeout: 240 seconds)
[22:36:42] *** Joins: johnjaye (~pi@173.209.65.233)
[22:53:03] *** Joins: klovett (~klovett@166.205.90.179)
[22:54:57] *** Quits: klovett_ (~klovett@166.205.90.179) (Ping timeout: 240 seconds)
[23:10:55] *** Quits: andyjpb (~andyjpb@user/andyjpb) (Quit: Ping timeout (120 seconds))
[23:14:21] *** Quits: johnjaye (~pi@173.209.65.233) (Read error: Connection reset by peer)
[23:31:49] *** Joins: alexshendi (~alexshend@2a02:8070:8796:7600:c4b7:f875:b4a4:2d43)
[23:34:22] <alexshendi> Good  üêî
