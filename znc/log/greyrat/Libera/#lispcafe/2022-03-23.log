[00:00:07] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[00:00:22] *** Joins: hhhh92 (~hhhh92@189.1.160.174)
[00:02:21] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[00:11:46] *** Joins: aeth_ (~aeth@user/aeth)
[00:11:52] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[00:11:54] *** aeth_ is now known as aeth
[00:23:03] <sm2n> someone talk me out of failing to write a jitted looping construct based on lazy sequences
[00:23:53] <Aurora_v_kosmose> Think of sleep
[00:24:10] <Aurora_v_kosmose> That's about as convincing as I'll get.
[00:29:08] <Alfr> Good morning!
[00:52:09] *** Joins: Oddity (~Oddity@user/oddity)
[00:57:37] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[00:57:53] <moon-child> sm2n: why, that sounds fun
[01:04:09] *** robin_ is now known as robin
[01:11:27] <Aurora_v_kosmose> Perhaps the failing part is spoiling their fun.
[01:15:17] <ck_> mmm, sleep
[01:22:28] <moon-child> if at first you don't succeed ...
[01:23:08] <ck_> sleep, sleep again?
[01:23:38] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[01:43:21] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:46:01] *** Quits: hhhh92 (~hhhh92@189.1.160.174) (Ping timeout: 256 seconds)
[01:46:11] <sm2n> dang, guess I have to do it
[02:13:52] <moon-child> fwiw I also have to do a jitted looping construct based on lazy sequences
[02:13:54] <moon-child> kinda
[02:14:21] <moon-child> I wanna do a j->glsl compiler.  So I have to fuse alll the loops
[02:17:18] <hayley> sm2n: Series is right there -->
[02:31:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:34:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:34:25] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[02:41:54] <qhong> one more advantage of CDR-coding: it seems to allow SIMD operations, and this seem to be fundamental
[02:42:54] <qhong> I can blame the cache locality problem on mainstreams CPU don't do smart prefetching, but is there a way to do SIMD FIND on a 2-pointer linked list (using whatever custom hardware)?
[02:44:38] <hayley> I thought about it, and idk. You'd need to gather, and then advance each pointer by your vector length (e.g. 4 cells for 64-bit pointers on 256-bit SIMD)
[02:45:05] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Remote host closed the connection)
[02:46:12] <qhong> hayley: hmm, and to make it profitable one need very fast CDDDDR
[02:46:19] <hayley> Yep.
[02:46:36] * hayley has incremental fixed width indent updates working.
[02:46:36] <qhong> I think the only way to achieve that is to make the DRAM understand C{AD}*R
[02:46:57] <hayley> First it does the whole buffer, which looks janky, but then it's all incremental updates, and there is no perceivable slowdown.
[02:47:41] <hayley> https://gist.github.com/no-defun-allowed/34b097954cc5af6f80abbd2f7fa94f77
[02:49:28] <hayley> gilberth: ^^
[02:49:46] <hayley> No guarantees as to if it works, still.
[02:51:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[02:55:27] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:59:27] <qhong> What are people's thoughts on Guy Steele's _Get rid of cons!_?
[03:00:11] <hayley> IIRC he wants it because trees are easier to pull parallel reductions out of. Sure.
[03:00:16] *** Joins: lisp123 (~lisp123@143.238.164.103)
[03:01:50] <qhong> How good is it for homoiconicity though? I heard Clojure effectively does what he suggests
[03:04:04] <hayley> It's inconsequential for homoiconicity.
[03:04:54] <qhong> (cons '+ (cdr l)) is a bit slower
[03:05:00] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 240 seconds)
[03:05:00] <qhong> then why Clojure sucks?
[03:06:27] <Aurora_v_kosmose> There's no real reason why cons can't be made into a generic function with a tree-friendly method implemented, particularly if you don't care about backward compatibility.
[03:07:54] <hayley> For reasons that aren't exactly the use of cons cells or not. Rather that everything looks like olde Lisp but isn't really, and it often shows too much JVM guts.
[03:07:54] <qhong> also I think CONC nukes RPLACD
[03:08:30] <hayley> There isn't RPLACD as sequences are immutable. But (CONC xs x) = (APPEND xs (LIST x))
[03:09:15] <qhong> immutable big no no
[03:09:53] <hayley> And the numeric tower is non existent, but granted I wouldn't know how to make fast fixnums on the JVM. But you could always not, and generate one path that processes longs, and then jump into another path with all boxed bignums or something. idk
[03:10:07] <qhong> I think RPLACD still implementable, just a bit slower, like CDR
[03:10:18] <qhong> now it's proportional to tree depth
[03:10:29] <hayley> It just seems like they had to compromise a lot on Lisp things.
[03:10:58] <hayley> Yeah, but tree depth is bounded by your heap size. And trees grow quickly, either with 32 pointers per node or 64, I forget.
[03:11:01] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[03:11:08] <hayley> It's a "hash array mapped trie" in either case.
[03:11:43] <qhong> What unsettles me the most is that CDR is an allocating operation now
[03:12:19] <Aurora_v_kosmose> huh?
[03:12:24] <qhong> and you lose (eq (cdr x) (cdr x)), like pjb pointed out for vectors
[03:13:11] <hayley> You also don't use EQ that much by convention.
[03:13:28] <hayley> Still, pointer equality (even as the cheap case of structural equality) is nice because it's fast.
[03:13:32] <qhong> hayley: sure, if everything is immutable, there's no eq
[03:13:47] <moon-child> can still have eq as an implementation detail
[03:13:53] <moon-child> some interesting things have been proposed there
[03:14:10] * hayley wonders if this font is too small on her laptop. Oops.
[03:15:05] <qhong> I think my brain is just too wired with CONS CAR and CDR such that I can't imagine programming with something else
[03:15:11] <hayley> It's a smaller screen, so 15 pixels high is also smaller.
[03:15:42] <qhong> I vaguely feel that one can live without CONS CAR CDR RPLACA RPLACD, but I can't be sure
[03:15:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[03:16:31] <moon-child> all you need is arrays
[03:17:48] <qhong> moon-child: VECP like I brought up yesterday?
[03:18:37] <moon-child> you want heterogeneous arrays?
[03:18:41] <moon-child> how lavish
[03:24:23] *** Joins: pjb (~pjb@user/pjb)
[03:57:51] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:58:34] <kakuhen> i notice that ccl requires sse2 instructions on x86
[03:58:57] <kakuhen> does that mean i can make the compiler use something like _mm_slii_epi32 for shifting elements across a gigantic vector by a constant factor
[03:59:11] <hayley> I believe so.
[03:59:17] <kakuhen> this sounds like those stupid "parallel sum" exercises but trust me this is actually useful for my flac decoder
[03:59:19] <hayley> FWIW x86-64 guarantees SSE2, so you're always free to use that.
[03:59:31] <kakuhen> ok cool, now i jjust need to figure out how to make a lisp generate such code
[03:59:38] <moon-child> (and, who cares about 32-bit x86)
[03:59:43] <hayley> hayley: Well, you can, but the compiler won't by default. SBCL even doesn't auto-vectorise.
[04:00:06] <kakuhen> yeah, i figured that auto-vectorization is bad to rely on 
[04:00:14] <kakuhen> (because most compilers wont do it)
[04:00:34] <moon-child> hayley: did you just ping yourself? :D
[04:00:41] <kakuhen> thankfully my case is very simple... I have a vector of 4096 (signed-byte 32) elements, the vector is rarely going to be sparse
[04:00:51] <kakuhen> well, usually 4096 elements
[04:00:55] <hayley> I also don't know if the CCL compiler can manage SIMD stuff, but SBCL can.
[04:01:00] <kakuhen> a shitty flac encoder will make the blocksize even larger (8192 or even more)
[04:01:09] <random-nick> isn't there a single x86_64 model by intel without sse2?
[04:01:15] <kakuhen> yeah i figured that the simd stuff i want to play with will most likely only work on sbcl
[04:01:17] <moon-child> kakuhen: if everything needs to be shifted by the same factor, maybe you can just do it on-demand?
[04:01:41] <moon-child> random-nick: sse2 is part of amd64, so if intel produced a 64-bit x86 processor without it, it didn't actually implement amd64
[04:01:47] <kakuhen> moon-child: rather than potentially shifting at the wrong time and writing the same code in 8 different places, i decided to just reserve it until the very end
[04:01:55] <random-nick> you can probably use simd in ECL via inline C
[04:01:58] <kakuhen> so it's just one line across an entire vector and i dont get headaches later on
[04:02:05] <kakuhen> but yes, i think the better solution is to avoid simd in the long run
[04:04:41] <hayley> "but i talked to andrea and indeed elisp now officially has a much smarter type propagation engine than any common lisp implementation" what no SICL global value numbering does to a mf
[04:05:39] <moon-child> am I supposed to say: 'x-compiler is slower than a hypothetical sufficiently smart y-compiler'?
[04:13:55] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:14:00] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[04:18:11] <kakuhen> oops i forgot the way i labelled my slots makes sbcl upset
[04:19:25] <kakuhen> because im violating section 11.1.2.1.2 of the ansi cl standard apparently
[04:22:14] <random-nick> maybe it's because of the accessors and not because of the slot names themselves 
[04:22:30] <kakuhen> oh wait yeah you're right, because I have something like `(defclass foo () ((number :accessor number)))`
[04:22:44] <kakuhen> that violates a package-lock thing (idk what package locks are)
[04:23:48] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:156d:4cd3:81cf:f50c) (Ping timeout: 240 seconds)
[04:25:31] <random-nick> package locks are sbcl's mechanism for forbidding the modification of symbols in a package
[04:25:51] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2b3e:70f8:165f:be99)
[04:25:54] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[04:30:24] <drakonis> living cl standard when
[04:30:33] <Alfr> kakuhen, you're likely using the CL package and its NUMBER symbol. 11.1.2.1.2 lists a bunch of things you may not do with symbols from the CL package (some exceptions apply), in particular defining functions for those.
[04:30:41] <hayley> inb4 every file is a valid CL program
[04:30:41] <kakuhen> alexandria is the living extension
[04:31:00] <kakuhen> Alfr: it's strange because the class is defined in an asdf package
[04:31:10] <moon-child> all I want for christmas is a memory model
[04:31:11] <Alfr> kakuhen, sames goes for methods, which :accessor will do.
[04:31:43] <kakuhen> im not sure why the class or its accessor functions are being provided in cl package, but I'm not going to try fighting the compiler about this I guess
[04:32:26] <sm2n> hayley, moon-child: SERIES doesn't do stream fusion
[04:32:46] <sm2n> There's some newer work by kiselyov et al I'm considering porting
[04:32:55] <sm2n> It cites SERIES actually
[04:33:32] <moon-child> https://arxiv.org/abs/1612.06668 ?
[04:33:50] <sm2n> https://strymonas.github.io/
[04:33:56] <Alfr> kakuhen, likely the offending package uses the CL package, then reading "number" will result in the CL:NUMBER symbol; thus the clash.
[04:34:01] <sm2n> so yes
[04:34:18] <kakuhen> aha, you are right Alfr
[04:34:25] <kakuhen> I checked package.lisp and I see the line (:use #:cl)
[04:34:41] <random-nick> anyway you can just do (:shadow #:number)
[04:34:58] <random-nick> but you'll have to use cl:number to refer to the type, I guess
[04:35:06] <moon-child> neat
[04:35:08] <kakuhen> i dont use the type anyway, so that's a good compromise
[04:37:04] <Aurora_v_kosmose> https://github.com/lynix94/orca-lang/blob/master/docs/10min.md This makes me wonder if the author is reinventing smalltalk unawares.
[04:37:16] <Alfr> Where did gilberth's bot go?
[04:45:54] <qhong> Question: why is numbers immutable? CL is literally haskell
[04:46:04] <drakonis> lol
[04:47:26] <hayley> Why are there number literals but no hash table literals???
[04:48:11] <qhong> hayley: at least you have SET-MACRO-CHARACTER
[04:48:14] <drakonis> is that a real question?
[04:48:22] <sm2n> I guess fortran is more your speed
[04:48:48] <drakonis> contrary to popular belief ansi cl is not the holy writ
[04:48:55] *** Joins: lisp123 (~lisp123@143.238.164.103)
[04:49:24] <sm2n> yes that would be R4RS
[04:49:26] * sm2n ducks
[04:49:46] <drakonis> lol not even
[04:50:18] <drakonis> the community is split between r5rs and r6rs while r7rs isnt ready yet
[04:50:19] <qhong> rnrs (n>0) sucks
[04:50:23] <qhong> r0rs is much better
[04:52:18] <drakonis> lol
[04:52:20] <drakonis> well
[04:53:25] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 268 seconds)
[04:59:04] <drakonis> r-1rk tho?
[05:00:50] <qhong> drakonis: nice idea. it tries too hard IMO though
[05:01:08] <drakonis> how badly?
[05:01:17] <qhong> r0rs is literally a condensed pedagogical text
[05:01:36] <qhong> drakonis: maybe as bad as rnrs
[05:03:39] *** Joins: notzmv (~zmv@user/notzmv)
[05:05:45] <drakonis> https://gitlab.com/seirios/cmod/
[05:11:38] *** Joins: ixelp (~ixelp@p5492d317.dip0.t-ipconnect.de)
[05:11:38] *** ChanServ sets mode: +o ixelp
[05:12:47] <qhong> Seriously, should every number have distinct object identity and be mutable?
[05:13:43] <qhong> I think a language should either make everything mutable/immutable, or support some extensible mutability/immutability mechanism, rather than hard coding an arbitrary distinction on the type hierarchy
[05:13:45] <drakonis> i have a better question, what is best practices for writing CL code?
[05:14:20] <qhong> drakonis: don't, write in a better language
[05:14:29] <ck_> drakonis: https://norvig.com/luv-slides.ps ?
[05:14:33] <hayley> :thonk:
[05:15:02] <drakonis> a better language?
[05:16:34] <hayley> Self?
[05:17:16] <hayley> idk, Common Lisp is one of the least bad languages.
[05:18:03] <hayley> Baker once told a newbie "a report on the shortcomings of Lisp will be very short, like programs written in the language, and unlike reports your colleagues will make on other languages."
[05:18:42] <qhong> hayley: I think as a very good approximation, if a language has an existing implementation, then it is bad 
[05:20:33] <Alfr> Makes me wonder, is there a language such that there is no machine which accepts it?
[05:23:48] <ck_> If there is, it must be called Gödel
[05:24:16] <Alfr> Hm ... guess it has to be only accepting said language. Otherwise simply consuming all input and switching into an accepting state would satisfy that.
[05:25:59] <qhong> hayley: questions about self: 1. How to deal with slot/message scoping? what if two authors happens to both use the name x:? This problem lead me to believe that we need both environment and objects -- they shouldn't be unified, environment bind symbols to objects and objects bind slot objects to values 2. what about multi-method?
[05:26:28] <hayley> Well, my incremental indent update hack works insofaras top level forms have no indentation. But this is wrong for Java, since everything must be inside "public class ... { ... }" and class files can get long and messy in Java.
[05:27:27] <hayley> qhong: It's handled in CLOS using packages; two authors use their own. I'd consider some sort of namespacing, but I don't know of a way to do it without more constructs.
[05:28:09] <hayley> A package binds names for the human to unique names for the computer.
[05:29:06] <qhong> hayley: ik, and I think environment is a cleaner implementation of that idea. But afterall one need at least two binding constructs instead of one
[05:29:29] <qhong> also I think Self does single delegation only? then there's actually no clashing issue. Still reading the paper
[05:30:13] <qhong> slot name can clash only if there're multiple inheritance
[05:33:27] <qhong> huh, self is actually doing what I (re)came up with, object=closure and inheritance-link=environment-link
[05:40:25] <hayley> Self has multiple inheritance.
[05:41:11] <qhong> multiple parent slots? then there will be slot scoping issue
[05:43:59] * hayley wonders what a nice way to handle the case of Java code would be.
[05:44:42] <hayley> I could memoise the indentation for each line, and then rebuild based on the prior line, rather than scanning everything again.
[05:45:17] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[05:45:31] <hayley> But it comes off more fragile to me; if I miss some update command, I will produce even worse indentation.
[05:45:48] *** Quits: X-Scale (~ARM@89.214.146.25) (Ping timeout: 240 seconds)
[05:45:48] *** X-Scale` is now known as X-Scale
[05:54:59] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 252 seconds)
[07:08:48] <hayley> lol, I wrote a bug already. The incremental update code would look for the first line with no indentation, then check if it should finish because there is no indentation, and finish without actually indenting anything.
[07:16:28] *** Joins: Inline__ (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de)
[07:18:47] *** Quits: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:26:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[07:32:55] <sm2n> What do people here use for typing in apl symbols? I just enabled the dyalog apl xinput(?) layout, and it seems to break backspace
[07:33:42] <hayley> J. (half serious)
[07:34:14] <sm2n> lol
[07:34:28] <sm2n> I'm reading iverson so that's not an option
[07:36:41] <waleee> the gnu-apl input-method in emacs
[07:37:23] <waleee> or https://abrudz.github.io/ngn-apl/web/index.html if I just need a quick copy & paste
[07:37:23] -ixelp- ngn/apl
[07:40:13] <moon-child> sm2n: my backspace works fine
[07:40:28] <moon-child> how are you setting the layout?
[07:40:30] <sm2n> it seems to be a layout specific thing
[07:40:45] <sm2n> I set it to "APLX Unified" instead and that works
[07:40:48] <moon-child> I see
[07:40:53] <sm2n> it's only the dyalog one that's broken
[07:40:58] <moon-child> I use setxkbmap -layout us,apl -variant dyalog -option grp:rwin_switch, which works without issue
[07:41:40] <sm2n> I'm not entirely sure what's going on then
[07:41:48] <sm2n> Well, this appears to work well enough
[07:42:31] <sm2n> The april ELS presentation inspired me to try apl again; watch me give up in a few days or less
[07:50:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:53:36] <sm2n> what did I do
[07:53:53] <sm2n> I didn't know 0 dimensional arrays existed in CL
[07:54:08] <sm2n> #0A#(1 2 3 4 5 6 7 8 9 10) How does this work?
[07:57:50] <hayley> A 0 dimensional array has one element.
[07:59:01] <moon-child> 0 dimensional array corresponds to a space with 0 degrees of freedom, so it can only be in 1 place.  That place: the singular element
[08:01:06] <sm2n> the syntax is weird though, #0A#(1 2 3 4 5 6 7 8 9 10) creates a 0 dimensional array whose only element is a one dimensional array
[08:01:26] <sm2n> on the other hand, #1A#(1 2 3 4 5 6 7 8 9 10) creates a one dimensional array
[08:03:58] <hayley> Yes, no nested sequences for no dimensions.
[08:04:37] *** Quits: Brucio-61 (~Brucio-21@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[08:05:38] <sm2n> I would expect it to error out instead of putting a sequence in the first element
[08:05:49] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[08:05:59] <moon-child> yeah, that seems more sensible to me
[08:06:18] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[08:06:33] <moon-child> hmm, interesting
[08:06:44] <moon-child> (defparameter *x* '(1 2 3))
[08:06:51] <moon-child> #1a#.*x*
[08:06:56] <moon-child> results in #(1 2 3)
[08:07:18] <aeth> #0A#0A#(1 2 3 4 5)
[08:07:46] <hayley> #0a9678 ; look, CSS colour literal
[08:07:53] <aeth> #0A#2A#((#0A#()) (#0A#()))
[08:07:55] <moon-child> ^ one of the major differences between apl and cl
[08:08:03] <moon-child> oh no nvm
[08:08:06] <moon-child> well kinda
[08:08:23] <moon-child> cl has #0a#0a5.  apl doesn't
[08:10:28] <sm2n> Huh, I didn't realize you could do stuff like #2a#.'((1 3 4) (3 4 5))
[08:10:47] <sm2n> I am okay with this now
[08:11:03] <sm2n> It is actually consistent, it just uses a different model than what I expected
[08:27:42] * hayley uploaded an image: (45KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/GaWfwanxTaeUJyqHybSmaeTA/fod8h0hxebi1wl_.jpeg.jpg >
[08:30:46] <moon-child> https://files.catbox.moe/xxe109.mp4
[09:22:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:32:43] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[09:36:37] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:45:14] *** Joins: semz (~semz@user/semz)
[10:17:33] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[10:31:14] <gilberth> I wish #x would work the same way, so that #x(a b c) would read as (10. 11. 12.). Actually, I wish that package prefixes would work the same way, too so that you could say foo:(blah 1 2) or (which would make sense with package local nicknames) foo:bar:baz.
[10:32:01] <moon-child> that would give you the symbol named baz in the package which package foo nicknames bar?
[10:32:19] <gilberth> Yep.
[10:33:08] <gilberth> That is "foo:" would read a subsequent form with *package* bound to the FOO package.
[10:33:13] <dave0> i have a hard time believing that you understood what moon-child said :-p
[10:33:22] <hayley> SBCL has foo::(blah 1 2) but that is non-portable.
[10:33:43] <gilberth> The Lisp Machine has it this way.
[10:34:10] <gilberth> I hope it will become standard like 0.123R0
[10:36:48] <gilberth> And I really love this "R" exponential marker. It makes perfect sense. Could we teach the printer to use it? Could there be a syntax for 1/3? Like 0.3...R0? Can we have a decimal syntax for 1/27?
[10:39:14] <dave0> r for real?
[10:39:43] <moon-child> if you show me 1/27, I will have a much better idea of what it means than if you show me some repeating decimal expansion
[10:39:59] <moon-child> and if I am interested in the decimal expansion, I can conjure approximations at will, which will do just fine
[10:40:25] <gilberth> The problem is that you need some indication of what are the repeating digits. Could be more than one with some non-repeating prefix.
[10:40:49] <moon-child> how about 0.12_34_
[10:41:02] <gilberth> That should do.
[10:41:21] <gilberth> It's even a potential number.
[10:41:46] <moon-child> hmm, that conflicts with something else I want, though
[10:42:00] <moon-child> which is the ability to use _ as a no-op separator in numbers
[10:42:12] <moon-child> 1_234_567 being the same as 1234567, but easier to read
[10:42:28] <gilberth> But it conflicts with another item on my wish list: Have '_' be ignored, so you can have a thousands separator. Like 1_000_000 for 1r6. Or with hex numbers: #xAB_CD_EF
[10:42:39] <moon-child> haha, raced
[10:42:54] <gilberth> Yep. I am too slow at writing :-)
[10:42:59] <moon-child> 'mooooom, gilberth's hogging the cache line'
[10:43:29] <gilberth> moon-child: Could a trailing "_" or perhaps "..." indicate repetition? Like 0.12_34... ?
[10:44:17] <dave0> surely unicode has some combining thing to put a line over a number?
[10:44:23] <moon-child> I wouldn't like it if _ were significant in some places but not in others.  And what if your repeating portion is long, so you want to break it up?
[10:44:46] <gilberth> dave0: I keep my source files in US-ASCII for a reason. Unfortunately.
[10:45:38] <gilberth> moon-child: Granted. What else do we have in the potential number syntax?
[10:47:26] <moon-child> do we have to keep backwards compatibility?  What if - is a separator, so 123-456 is 123456?
[10:47:48] <moon-child> then _ is free
[10:47:52] <moon-child> most obvious thing that breaks is 1-
[10:48:14] <moon-child> but you could say something with a leading or trailing - is a symbol, which would minimize breakage in practice
[10:48:21] <gilberth> Ouch. I would read 123-456 as either 123 minus 456 or some ID.
[10:49:04] <moon-child> well.  You would read foo-bar as a single atom which is a foo, then a bar.  So why not 123-456 as a single atom (which happens to be a number), which is 123, then 456?
[10:49:08] <moon-child> it seems quite consistent to me
[10:49:08] <gilberth> There also is "^". But you could misread that as exponentiation.
[10:49:27] <moon-child> ^ is not bad.  It points up, at the imaginary overline
[10:49:28] <hayley> ^ in Cream is rendered as ↑.
[10:50:18] <dave0> 0.12^^34
[10:50:35] <dave0> what about 0.12/34/
[10:50:40] <hayley> _ also renders as ← which makes wildcards for pattern matching look funny.
[10:50:41] <gilberth> moon-child: I just don't like to use the hyphen there. It would confuse people. I just don't read 1-000-000 as 1,000,000. And: If you want to skip compatibility why not use "," as a thousands separator to begin with?
[10:51:00] <hayley> Since I've already made changes to make Cream a better Lisp font, I may as well make the _ a proper underscore. Welp.
[10:51:22] <dave0> in c, _ is a letter
[10:51:52] <gilberth> I believe you don't find something like `(123,456) in actual Lisp source code.
[10:52:14] <hayley> gilberth: Have I pinged you enough times about having variable width fonts working well enough in GNU Emacs?
[10:52:42] <gilberth> I can imagine you find `(100, 200, 300) though. :-)
[10:53:18] <gilberth> hayley: Do you suggest I find my 20yo hacked copy of epoch?
[10:53:18] <moon-child> gilberth: I do not even like , as separator in natural language
[10:53:24] <moon-child> prefer a space
[10:53:32] <moon-child> but in lisp, a space has other significance
[10:53:43] <hayley> gilberth: Not unless you want to. But I have <https://gist.github.com/no-defun-allowed/34b097954cc5af6f80abbd2f7fa94f77> "working" in just elisp.
[10:53:43] -ixelp- variable-pitch-indent.el · GitHub
[10:53:45] <gilberth> moon-child: Then dave0 could use a non-breakable space.
[10:55:37] <gilberth> moon-child: Space has problems also in English. It could be a problem in prose. What is "We have 12 300 100 foo things?" Is it 12,300 100-foo things, or 12 300,100-foo things?
[10:55:42] *** elflng_ is now known as elflng
[10:56:41] <semz> Maybe this is the mathematician in me speaking, but I can't think of any situation in which I'd want to type a repeating decimal instead of a fraction. Finite decimal, sure. But repeating?
[10:56:56] <semz> The underscores for grouping are nice though, Ada does this too.
[10:57:03] <moon-child> gilberth: indeed.  Maybe a thin space.  And if hayley gets her wish, we could use a thin space also when programming
[10:57:26] <moon-child> alternately, as White_Flame(?) suggested last time this came up, use colour
[10:57:37] <hayley> You joke, but I had used fancy quarter-width space characters so that I could present some code in a proportional font.
[10:58:03] <gilberth> moon-child: Still. I would want an ASCII solution.
[11:00:54] <gilberth> Could repetition of the repetition help? That is would it be always possible to repeat the repetition twice to make it umabigious? I mean, when I write 0.123434... you know what I mean.
[11:01:35] <moon-child> I think there might be ambiguity there
[11:01:50] <moon-child> but maybe not
[11:02:25] <semz> Is 0.1233233... repeating 3 or repeating 233?
[11:02:34] <moon-child> ^ yeah like that
[11:02:48] <moon-child> re ascii: it seems to me that, while there is a still a serious problem with _typing_ it, there is no problem with _displaying_ it.  So if I want to use a thin space as a separator, you will understand what I mean; but you do not have to type any non-ascii characters yourself if you do not want to
[11:03:03] <gilberth> semz: Good. How about thrice then? 0.12332333... ?
[11:03:17] <semz> 0.123331233312333...
[11:03:25] <gilberth> We could say: Repeat as often as needed to make it unambiguous.
[11:03:34] <semz> Oh I see
[11:03:43] <moon-child> tihi
[11:04:05] <gilberth> It's like floating point printing, which uses as many digits as needed to make it read to the very same bit pattern.
[11:04:29] <hayley> https://www.youtube.com/watch?v=gzDpPWhiBxQ
[11:04:30] -ixelp- Half life 2: Whoopservatory - YouTube
[11:05:03] <ck_> 0.118999881999119725 
[11:05:06] <ck_> 3
[11:05:11] <moon-child> gilberth: I think we should endeavor to be _less_ like floating point, not more, wherever possible
[11:05:36] <semz> There's certainly always a number of repetitions that makes it unambiguous, but I find it a little weird to have certain digit strings be outright invalid, rather than just aliases of each other like for FP.
[11:06:06] <dave0> i think - is for phone numbers 1-800-555-234
[11:06:20] <gilberth> semz: Invalid? No string would be invalid.
[11:06:44] <semz> What's 0.12331233... under this scheme then?
[11:06:47] <dave0> also dates 2022-03-23
[11:07:12] <gilberth> We could habe a compromise. I write 0.1_233.. and moon-child could skip the _ and write 0.1233233..
[11:07:18] <moon-child> ck_: I've had a bit of a tumble
[11:07:41] <gilberth> semz: The same as 0.1233123312331233..
[11:07:49] <semz> I guess you could say that it's always interpreted as the longest match
[11:07:56] <gilberth> The rule could be: Take the longest suffix.
[11:08:08] <semz> But that feels like a great source for subtle bugs
[11:08:23] <semz> (maybe not common bugs because I'm still not sure where one would even use this)
[11:08:24] <dave0> 0.̅1̅2̅3̅3
[11:08:58] <gilberth> And when say that "_" must be included in suffix mapping, you could have it brief like 1.12_3.. = 0.123333333..
[11:09:37] <gilberth> dave0: That reads here as 0.123.123.123. Hmm. The . has an over-bar too.
[11:09:52] <moon-child> gilberth: but you have not solved my problem.  Which is that if my repeating part is long, I want to be able to use _ to break it up
[11:10:05] <dave0> gilberth: oh it's probably my irc client getting it wrong
[11:10:49] <gilberth> moon-child: You would need to be concerned about using "_" in the non-repeated part.
[11:11:08] <moon-child> that too
[11:11:19] <gilberth> Then use "^" as the repetition separator.
[11:11:53] <gilberth> But "^" has different problems, as people might read that as exponentiation.
[11:12:17] <moon-child> for my part, I am with semz: I don't see the point of the scheme at all
[11:12:49] <gilberth> BTW, what is #b1r10? 1024?
[11:14:34] <gilberth> Hmm, CCL and SBCL read that as 10000000000. that does not make sense to me. A pity.
[11:15:20] <dave0> that's binary for 1024
[11:15:23] <gilberth> As I see the exponential marker as shifting the point.
[11:15:24] <moon-child> it makes as little sense as (format nil "~b" 2.34) #| --> "2.34" |#
[11:15:53] <gilberth> Well, 2.34 is decimal syntax. As is "2.".
[11:16:31] <moon-child> well, if I write (format nil "~b" 234), I get "11101010".  So what is the difference?
[11:17:04] <gilberth> Hmm. #b100r0 also reads as 100. Viewed that way, it makes sense again. Hmm.
[11:17:28] <gilberth> moon-child: Both read correctly with *read-base* bound to 2.
[11:17:36] <moon-child> that is no excuse
[11:17:49] * hayley uploaded an image: (32KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/fncDYPIXZSkeYWlsfVIZMgCN/Screenshot_2022-03-23_17-47-41.png >
[11:17:55] <moon-child> *read-base* should also apply to floating-point
[11:18:05] <hayley> gilberth: Here is ye olde DERIVATIVE with a proportional font (the one I extracted from Smalltalk yesterday).
[11:18:10] <dave0> hayley: that's a weird font!
[11:18:15] <moon-child> your mouse cursor is black?
[11:18:27] <hayley> No, but it dims for some reason when it is over Emacs. idk
[11:18:41] <hayley> Eh, it is black with a white outline. But it is black with a grey outline on Emacs
[11:19:07] <gilberth> moon-child: Octal once was the default read base. It made sense at that time that 100 would read in octal while 3.14159 would read in decimal.
[11:19:10] <dave0> you dragbar has round corners
[11:19:19] <moon-child> gilberth: that doesn't make any sense
[11:20:14] <gilberth> moon-child: It does. Do you expect (= 0.1 1/8) to be true?
[11:20:30] <moon-child> if the read base is 8, then yes
[11:20:31] <gilberth> With *read-base* bound to 8.
[11:20:39] <moon-child> I find it utterly bizarre that in lisp it does not
[11:20:42] <ck_> you mean 1/10, surely?
[11:20:49] <gilberth> moon-child: I would not.
[11:21:27] <gilberth> ck_: Yes, you got me.
[11:21:27] <moon-child> gilberth: actually, with *read-base*=8, 1/8 is an error; you need 1/10, as ck_ says :)
[11:21:32] <moon-child> agh, raced again
[11:22:01] <gilberth> Then say. (= 0.1 (/ (* 2 2 2)) :-)
[11:22:25] <moon-child> gilberth: so, why should one rule apply to integers and rationals, and another to floating-point numbers?  That seems inconsistent to me
[11:24:14] <gilberth> moon-child: Because people perhaps wanted to copy floating point numbers given somewhere in decimal in decimal into their code. And they wanted to have results printed back in decimal.
[11:24:33] <moon-child> and why wouldn't they want to do the same with integers?
[11:24:54] <gilberth> I mean having 177 mean 127 decimal is common. Having 0.1 not be one-tenth is strange.
[11:25:12] <ck_> [for localized values of 'common']
[11:25:16] <moon-child> why?  You still have not explained
[11:25:35] <ck_> I mean isn't the answer just the obvious "someone hacked it in to be that way and everybody got used to it, because it 'works'" ?
[11:25:39] <gilberth> moon-child: When I say "100." it's an integer in decimal, even if the read base is octal.
[11:25:55] <moon-child> yes, but you have not explained why that is sensible
[11:26:51] <gilberth> They just loved to have use octal because it was common and binary bit patterns could be written with them. It's clear what 770077 is. I don't read a bit pattern from 258111.
[11:34:14] * hayley found a copy of a game she used to play when she was like 5 online. https://classicreload.com/win3x-super-solvers-mission-think.html
[11:34:24] <hayley> It was the first in my pile of CDs that I've kept for years.
[11:39:17] <dave0> hayley: what was your first computer?
[11:39:28] <hayley> A clamshell iBook.
[11:40:14] <dave0> cool a laptop
[11:40:18] <dave0> hayley: still got it?
[11:40:27] <hayley> Nope, it was defenestrated in 2010.
[11:41:25] <dave0> you threw it out a window??
[11:43:05] <hayley> My dad did.
[11:46:27] <dave0> bad dad :-(
[11:47:23] <hayley> No shit Sherlock.
[11:51:13] <dave0> i gave away my first computer in a garage sale :-(
[11:55:27] <ck_> "don't be [emotion] that it is over, be [emotion] that it happened"
[11:55:34] <ck_> what was it, dave0 ?
[11:57:43] <dave0> ck_: tandy color computer 2 affectionately known as the "coco"
[12:04:38] <ck_> then I understand the colon dash openparenthesis emoticon
[12:04:49] <ck_> did you play adventure games on it?
[12:06:11] <dave0> i typed in game from listings in magazines.. i remember an adventure game in basic that was fun but simple
[12:06:26] <dave0> i never knew about zork or anything
[12:06:35] <ck_> ah, I see
[12:06:46] <ck_> did you play zork in the meantime? .oO( WEST OF HOUSE )
[12:06:48] <dave0> i was like 8 years old ;-)
[12:07:54] <dave0> nope but i remember leisure suit larry
[12:08:02] <dave0> `use rubber`
[12:08:07] <dave0> lol
[12:09:36] *** Joins: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[12:20:37] <dave0> my cousin had an atari 2600 at the time, i was jealous!
[12:29:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[12:29:36] *** Quits: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[12:30:02] *** Joins: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[12:30:16] <gilberth> As I was young, at first I was the only one having a machine, then I had a very nifty CP/M-80 box with no games, while all others had a C64, then I had an IBM XT and later clones, while others had Amigas. Later I was the only one having UNIX. The consequence was that I hadn't games and couldn't make use of off-site backup copies of other guys games.
[12:32:01] <selwyn> gnuxie: https://media.discordapp.net/attachments/799007491991535640/955948244284887060/unknown.png
[12:37:13] <ck_> did you enjoy yourself yesterday?
[12:37:32] <selwyn> yeah i did
[12:39:46] <selwyn> went walking
[12:40:24] <ck_> very good
[12:40:34] <ck_> nice graphics in the spring, best lighting
[12:40:44] <selwyn> indeed
[12:47:42] * dave0 shares his brownies with the cafe patrons
[12:51:09] * selwyn takes a brownie
[12:51:26] * ck_ raises freshly-brewed cup of coffee
[12:51:45] <ck_> maybe the real lisp was the friends we made along the way
[12:56:21] *** Quits: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[12:57:41] <selwyn> its been a very long time since i used lisp actually lol
[12:58:33] <hayley> Somehow using this font in Emacs makes me happy.
[12:58:40] <selwyn> computer modern?
[12:58:51] <hayley> Cream
[12:59:01] *** Joins: shka (~herr@109.231.3.55)
[12:59:56] *** Joins: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[13:01:00] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:01:11] *** Joins: Lycurgus (~juan@98.4.112.204)
[13:01:45] <ck_> pretty goode
[13:02:49] <ck_> ( http://www.identifont.com/find?font=cream&q=Go see author name, I'll expect the deposits in my pun account by eob )
[13:03:27] <hayley> Not quite.
[13:04:41] * hayley uploaded an image: (4KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/QQLThpAWZScZpitFpMyuQTSB/Screenshot_2022-03-23_19-34-16.png >
[13:06:16] <ck_> looks like the typeface I'd expect to read something something about the twelve gold coins I just paid this npc for passage to the moors of darkwood in
[13:06:16] *** Quits: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[13:06:32] <Lycurgus> semi script
[13:07:16] *** Joins: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[13:07:42] *** Quits: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[13:07:58] <hayley> https://applied-langua.ge/~hayley/CreamNormal.ttf
[13:09:48] *** Joins: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[13:09:52] *** Quits: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[13:11:28] *** Joins: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[13:12:52] <selwyn> yesterday an old german guy on the train offered to bless me with holy water
[13:14:26] <Lycurgus> did you say "do and I'll call the cops"?
[13:14:28] <ck_> I need more context
[13:14:34] <selwyn> i said yes
[13:14:47] <selwyn> to see what happens
[13:15:09] <Lycurgus> if you encourage a wrong, you participate in it
[13:15:13] <selwyn> and he got out two shot glasses and a plastic water bottle that had been refilled with sth
[13:15:21] <selwyn> looked off-colour
[13:15:33] <selwyn> 'now we have to drink'
[13:16:21] <Lycurgus> and you did that too?
[13:16:29] <selwyn> i didn't want to take the chance that i would go blind or trip balls for the rest of my life
[13:16:47] <Lycurgus> trip balls
[13:16:50] <selwyn> i said 'i don't drink sorry'
[13:17:01] <selwyn> 'its not alcohol its holy water'
[13:17:10] <selwyn> 'why don't you have one for yourself'
[13:17:15] <Lycurgus> him: but ur not in  still suit
[13:17:18] <ck_> how did you detect he was german
[13:17:21] <selwyn> *laughs* 'i am already blessed'
[13:17:21] <Lycurgus> *in a
[13:17:37] <selwyn> i kept on declining and he went back to his seat
[13:17:40] <selwyn> really nice guy
[13:17:51] <Lycurgus> for a psycho
[13:17:55] <semz> what an encounter
[13:18:04] <selwyn> his wife was there and i think she was talking german to him
[13:18:22] <selwyn> i always like to talk to these people to see what happens
[13:18:31] <selwyn> but i did not want to drink that water
[13:18:33] <ck_> https://www.youtube.com/watch?v=DebmlHgAvko
[13:18:33] -ixelp- Metal Gear Solid 1 - Encounter - YouTube
[13:18:50] <ck_> snake, don't drink that liquid, you don't know what's in it
[13:19:12] <Lycurgus> selwyn, even
[13:19:35] <ck_> don't use his real name, it's bad for the TACTICAL ESPIONAGE part
[13:20:11] <Lycurgus> it's not as if the displayed thinking was unusual, assuming 'holy water' wasn't a joke
[13:20:24] <Lycurgus> about 4/5 of humanity is at that level
[13:20:29] <ck_> I don't follow
[13:20:45] <ck_> from my limited sampling of how churches go, you don't usually drink the holy water do you
[13:20:56] <selwyn> hm
[13:21:01] <Lycurgus> from your recounting
[13:21:03] <selwyn> i wonder how british transport police would have reacted
[13:21:12] <Lycurgus> i assumed they were different liquids
[13:21:26] <ck_> oh ok -- were there?
[13:22:04] <ck_> I don't see a separate container in the story above, only the "flask of doubtful contents" and the two empty shot glasses
[13:22:14] <Lycurgus> at that level, but by this time, precariously
[13:22:16] <selwyn> he definitely wanted us to drink it
[13:22:44] <Lycurgus> when you said 'bless me with holy water'
[13:22:55] <Lycurgus> i assume a psalter or whatever they call it
[13:23:03] <Lycurgus> what priests use
[13:23:14] <ck_> the scepter looking thing you can season the congregation with?
[13:23:17] <selwyn> perhaps that was the next step
[13:23:24] <selwyn> but i could only see shot glasses
[13:23:34] <ck_> that's what he told his wife probably
[13:23:36] <Lycurgus> they shake it at you and splash some drops
[13:23:41] <ck_> "nice kid.. but he didn't get past level one"
[13:23:43] <selwyn> perhaps he was not a qualified priest?
[13:24:39] *** Quits: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[13:24:39] <Lycurgus> german catholics likely wouldn be speaking hochdeutsch
[13:26:05] <Lycurgus> embarassing things that are still big
[13:26:20] <Lycurgus> for the humongs
[13:26:20] <selwyn> the catholic church?
[13:26:31] <Lycurgus> religion in general
[13:27:10] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[13:27:53] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[13:28:42] *** Joins: lisp123 (~lisp123@143.238.164.103)
[13:29:24] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[13:30:38] <Lycurgus> now apparently, it looks like 'holy water' was a joke
[13:31:06] <Lycurgus> a euphemism for mystery booze
[13:31:19] <Lycurgus> without the damn psalter
[13:31:43] <ck_> should I go for a run? that's the mystery I'm contemplating right now
[13:32:08] <ck_> also, for something completely different:
[13:32:20] <selwyn> answer is yes
[13:32:44] <Lycurgus> aspergillium, would never have guessed, psalter is a book
[13:33:01] <ck_> phoe: it might be just me, but every time I look at your github avatar in the scaled-down representation, I see the head of daffy duck
[13:33:02] <hayley> Hm, I think I just am happy that I get to use a proportional font when you basically can't do that.
[13:34:04] <ck_> exhibit a: https://github.com/phoe/portable-condition-system
[13:34:04] -ixelp- GitHub - phoe/portable-condition-system: A portable Common Lisp condition system
[13:34:16] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[13:34:18] <ck_> exhibit b: https://clipart.toonarific.com/data/media/18/daffy004.gif
[13:34:48] <ck_> selwyn: ok I'm on my way
[13:36:03] <Lycurgus> that integrates with the host condition system - if it did that well would be interesting, the first thing I looked for
[13:36:18] <kakuhen> i just realized first and second only apply to lists
[13:36:44] <kakuhen> so i can stubbornly rewrite with aref... or i can make first and second methods for arrays
[13:36:48] <kakuhen> may do the latter
[13:37:26] <Lycurgus> are conditions internal to an implementation?
[13:37:33] <Lycurgus> *aren't
[13:37:43] <semz> kakuhen: elt? that way it works with both
[13:37:58] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Remote host closed the connection)
[13:38:04] <Lycurgus> ah i c, it's just a PoC
[13:38:18] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[13:38:57] *** Joins: Brucio-61 (~Brucio-21@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:38:59] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[13:39:51] <Lycurgus> yeah, there's an existential fallacy in the implied extension of "host condition system"
[13:40:08] <Lycurgus> when the latter is interpreted as the base operating system
[13:40:38] <Lycurgus> or the whole host
[13:41:32] <Lycurgus> maybe means the existing condition system in an implementation
[13:44:30] <Lycurgus> there is a situation where an arch has a unified event system used by every application but it's not commonly encuntered
[13:50:16] <Lycurgus> you could back fill it though as a backend to such a thing with a practical selection of common event processing on a per platform basis, linux, mac, win
[13:50:31] <Lycurgus> mainframe OSes generally already have
[13:50:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[13:50:59] *** Joins: lisp123 (~lisp123@143.238.164.103)
[13:52:23] <Lycurgus> i.e. the common real events, not the software ones, so still not the host condition system you are looking for
[13:52:32] <Lycurgus> or i was rather
[13:54:57] <Lycurgus> s/existential fallacy/equivocation/
[13:55:39] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[13:58:54] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:02:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:04:08] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[14:08:45] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[14:13:54] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[14:14:00] <ck_> selwyn: ok your turn
[14:21:59] <phoe> ck_: amazing
[14:22:11] <phoe> I do not see it
[14:22:45] <phoe> Lycwhat do you mean by an existential fallacy?
[14:22:57] <phoe> the whole integration/ directory in PCS assumes that there is a host condition system
[14:23:07] <phoe> the rest of the code does not
[14:23:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[14:23:31] *** Joins: treflip (~user@user/treflip)
[14:23:58] <phoe> also, "aren't conditions internal to an implementation?" - what do you mean? the condition types? instances of conditions getting signaled?
[14:25:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:25:45] <phoe> oh, by a "host condition system" I mean an actual implementation of a condition system in the CL package - so, the class CL:CONDITION, the function CL:SIGNAL, etc..
[14:32:34] <Gnuxie> selwyn: keef 
[14:33:03] <selwyn> his photographer is trying to sabotage him
[14:33:10] <selwyn> there are hundreds of stock photos like that
[14:40:29] *** Joins: notzmv (~zmv@user/notzmv)
[14:40:51] <ck_> phoe: https://imgur.com/a/DO4a6Uc
[14:40:52] -ixelp- Imgur: The magic of the Internet
[14:42:32] <phoe> ck_: oh god no
[14:43:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:45:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:45:47] <ck_> that's not quite the expression I get from the avatar, but if you squint maybe you can tell what I mean now
[14:48:35] <phoe> I can see it now
[14:59:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:01:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:16:58] *** Quits: Brucio-61 (~Brucio-21@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Quit: Application exit)
[15:17:45] <kakuhen> i ended up changing to aref
[15:18:17] <hayley> > "i want dyn linking", "i want compile times / binary sizes", "i want 'zero cost abstractions'" how do u intend for that to work
[15:18:23] * hayley uploaded an image: (38KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/esjKbaZcWLLptadmmbyZeKqA/cliffclick.jpg >
[15:21:08] <Gnuxie> 😌
[15:21:23] <hayley> Gnuxie 💜🐝: get Cliff Clicked
[15:21:33] <Gnuxie> LwL
[15:25:44] *** Quits: semz (~semz@user/semz) (Remote host closed the connection)
[15:26:01] *** Joins: semz (~semz@user/semz)
[15:26:47] *** Joins: Brucio-61 (~Brucio-80@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:27:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:27:39] <moon-child> 'zero cost abstractions' aren't real anyway
[15:27:44] <moon-child> they're based on a faulty cost model
[15:30:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:32:37] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[15:32:54] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[15:34:59] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:37:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[15:38:39] <kakuhen> huh i found a bug in element 
[15:38:49] <kakuhen> touch bar goes wild if you press the delete key when the input field is empty
[15:39:01] <kakuhen> this does not happen with other software, so presumably element is doing really weird things for text input
[15:40:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:50:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:57:58] <sm2n> moon-child: is iverson's original book not a good reference for APL? It seems to not have the same semantics as april
[15:58:24] <moon-child> no
[15:58:43] <moon-child> it's interesting historically but it is nothing like modern apl
[15:59:21] <moon-child> honestly I don't know of any good learning materials for apl proper.  'mastering dyalog apl' is abysmally slow
[15:59:24] <sm2n> man that sucks
[15:59:27] <moon-child> j learning materials are good though
[15:59:33] <sm2n> I want a book to read
[16:00:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:01:09] <moon-child> https://www.jsoftware.com/help/learning/contents.htm et al
[16:01:10] -ixelp- Learning J
[16:05:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:10:57] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[16:12:15] <dave0> cookbook
[16:13:17] <ck_> "for a 486dx2 66, divide algorithm input by 128"
[16:13:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[16:17:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:29:55] <kakuhen> thank you CLOS for letting my awful design ultimately work in the end
[16:30:20] <kakuhen> i have found a really cursed yet elegant (imo) way of dealing with a catch-22 i created for myself in my flac decoder when adapting it to streams
[16:31:00] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:32:11] <kakuhen> needing to manually parse frame header before i parse frame is very ugly from an api usage viewpoint, but if I parse frame header in a before method on the frame parser, i am ok
[16:32:26] <kakuhen> ditto for frame footer... byte align the reader and discard 16 bits because i am too lazy to implement a running crc-16 checksum right now
[16:32:32] <kakuhen> all of this in an :after method
[16:32:53] <kakuhen> tomorrow i will be testing my code and regretting i've done in the past hour; i have version control in this project lol
[16:32:57] <kakuhen> no version control*
[16:39:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[16:41:16] <ck_> "project final really-final (1) copy"?
[16:41:18] <ck_> or none at all
[16:41:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:41:54] *** Joins: razetime (~quassel@117.207.18.88)
[16:45:55] <kakuhen> none at all
[16:46:15] <kakuhen> every night i create a tarball with identical filename and send it to a friend
[16:46:25] <kakuhen> but otherwise no copies besides what's on my disk
[16:59:28] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:59:40] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[17:25:50] <hayley> Where could I find a list of software bugs that caused immediate danger to people? Asking for an article.
[17:26:40] * hayley uses olde Google and gets results too quickly.
[17:32:41] <dave0> like that cancer machine that gave everyone radiation poisoning?
[17:33:12] <dave0> that's an old one though
[17:34:53] <hayley> Yeah. The trick is I want to find pointer bugs.
[17:40:31] <hayley> I guess things like Heartbleed were incredibly hazardous, but still indirectly lethal, so no one has any figures to present.
[17:45:52] <dave0> stuxnet might count?
[17:46:04] <dave0> it broke some nuclear things whatever it was
[17:46:25] <hayley> Ah yeah, most targeted malware would count.
[17:47:20] <hayley> Clever. But I don't feel like being too specific about "basically, careless C weenies caused deaths in X, Y and Z" since those grieving would want me to shut up if I wrote that.
[17:50:43] <dave0> the self driving cars have killed some people
[17:50:52] <dave0> but maybe that's too soon
[17:51:34] <dave0> i guess it was unintentional
[17:51:47] <dave0> still lives were lost
[17:53:29] * hayley nods
[17:54:01] <hayley> It's a hard topic. But, as far as I can tell, blame has already been made on the wrong things.
[17:54:10] * hayley off to sleep
[17:54:15] <dave0> nite hayley 
[18:04:56] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:14:17] *** Quits: lagash (lagash@lagash.shelltalk.net) (Remote host closed the connection)
[18:16:28] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[18:17:31] *** Joins: lagash (lagash@lagash.shelltalk.net)
[18:24:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:30:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:58:37] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[18:58:45] *** Quits: Brucio-61 (~Brucio-80@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[19:30:18] *** Joins: Brucio-61 (~Brucio-80@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[19:30:51] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[19:31:22] *** Joins: tyson2 (~user@cpe00fc8d4cdef3-cm00fc8d4cdef0.cpe.net.cable.rogers.com)
[20:01:02] <Aurora_v_kosmose> On Rust, C++ and weirdness. How do they not get irritated by the sheer time it takes to build anything, before they can get back to working on stuff?
[20:08:45] <shka> they do get irritated 
[20:08:47] <shka> a lot
[20:09:59] <ck_> or take more coffee breaks
[20:10:18] <ck_> https://xkcd.com/303/
[20:10:19] -ixelp- xkcd: Compiling
[20:10:33] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[20:12:48] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[20:19:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[20:24:16] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:33:18] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[20:33:41] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:35:58] *** Quits: tyson2 (~user@cpe00fc8d4cdef3-cm00fc8d4cdef0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:36:57] *** Quits: Inline__ (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de) (Quit: Leaving)
[20:45:34] <drakonis> https://aavdi.codes/preface-to-an-unwritten-programming-language-book/
[20:47:18] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[20:54:56] *** Joins: Inline (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de)
[20:59:21] <ck_> does that resolve through your dns?
[21:01:38] <semz> not through mine at least
[21:02:07] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[21:15:50] <edgar-rft> my dns wasn't made for resolving things
[21:19:55] <edgar-rft> lookss like this is the right link -> https://avdi.codes/preface-to-an-unwritten-programming-language-book/
[21:19:56] -ixelp- Preface to an Unwritten Programming Language Book - avdi.codes
[21:32:24] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:33:26] *** Quits: razetime (~quassel@117.207.18.88) (Remote host closed the connection)
[21:34:22] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[22:09:35] *** Quits: semz (~semz@user/semz) (Quit: Leaving)
[22:09:53] *** Joins: semz (~semz@user/semz)
[22:13:46] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[22:34:52] <shka> Ramzan Kadyrov confirmed Medvedev was injured during fighting in a VK post this month.
[22:34:55] <shka> oh boy
[22:37:18] <ck_> what
[22:37:26] *** Joins: kevingal (~quassel@37.228.202.16)
[22:37:37] <shka> it is hell in there 
[22:37:42] <shka> *out there
[22:38:09] <ck_> Medvedev the former president of russia? or is that a different name
[22:39:53] <shka> ck_: no, it is a popular surname in Russia
[22:40:06] <shka> but guy was apparently ran over by a Russian tank
[22:40:36] <shka> both legs
[22:41:24] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[22:49:12] <ck_> and who is Ramzan Kadyrov?
[22:49:41] <shka> Chechen leader and one of the worst people currently alive 
[22:51:34] <ck_> thank you
[23:32:24] <selwyn> ck: i just got back
[23:35:17] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:35:49] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[23:36:35] <selwyn> maybe 11km
[23:47:42] <ck_> nicely done
[23:48:03] *** Quits: kevingal (~quassel@37.228.202.16) (Ping timeout: 256 seconds)
[23:48:07] <ck_> "the reward for running is that you're done" would you agree
[23:48:33] <selwyn> you get to feel smug and healthy afterwards
[23:48:43] <selwyn> but i find that there are diminishing returns
[23:48:54] <ck_> diminishing wrt to repetition or distance?
[23:49:01] <selwyn> i ran for 3 hours once
[23:49:13] <ck_> right, yeah, doesn't feel three times as healthy
[23:49:14] <selwyn> and afterwards i felt good for like ten minutes
[23:49:20] <selwyn> not worth it imo
[23:49:36] <selwyn> though that is probably a personal thing - maybe i don't like distances that long
[23:49:36] <ck_> a friend goes for these ultra long distance runs and I can't see the appeal either
[23:49:38] <waleee> ck_: the true reward is outrunning another random runner that you encounter 
[23:49:55] <ck_> waleee: actually I did that earlier today, and there is probably something to that
[23:49:55] <selwyn> waleee: well, i fucked that up today
[23:50:00] <selwyn> got overtaken
[23:50:39] <ck_> wasn't me
