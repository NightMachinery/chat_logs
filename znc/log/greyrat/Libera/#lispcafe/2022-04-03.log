[00:07:28] <Alfr> Good morning!
[00:16:36] *** Joins: tfeb (~tfb@88.98.95.237)
[00:18:48] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[00:27:15] <selwyn> good morning
[00:33:33] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:39:35] *** Quits: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1005) (Quit: Leaving)
[01:01:30] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[01:13:48] <kakuhen> PDF/A is weird to me because it seems there's basically no compliance testing tool out there
[01:14:24] <kakuhen> i know of one dead open source validator and a bunch of third party websites that claim to be able to validate
[01:17:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[01:22:06] <selwyn> kakuhen: yeah!
[01:22:51] <selwyn> so i went through all that effort but i am confident that no-one will care to or even know how to check it for compliance
[01:25:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:27:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:34:05] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[01:38:09] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[01:39:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:43:00] * hayley spots the Bakerposting bot producing memory corruption warnings, and finally dying of double-free
[01:43:13] <hayley> Incredibly ironic. And I don't know how to start debugging it.
[01:49:48] <hayley> But it wouldn't hurt to guess, and I guess that there is concurrent access to the SSL stream or something. Two threads compete to free the foreign pointer, and stuff goes bad quickly.
[01:49:55] <hayley> s/compete/race
[02:12:38] <ck_> first time I ever heard of a /a pdf
[02:12:51] <ck_> well.. the more you know
[02:15:47] *** Quits: Inline (~Inline@p4fedb8e0.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:16:48] *** Joins: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[02:17:20] *** Joins: Jacobis9000 (~jonaholuf@host31-54-71-0.range31-54.btcentralplus.com)
[02:17:23] <Jacobis9000> hi!
[02:17:49] <Jacobis9000> how are we all? 
[02:19:26] <Jacobis9000> so I realised that the singly-linked list in C is the basic structure of Lisp
[02:19:42] <Jacobis9000> today I built a binary search tree in C
[02:19:50] <Jacobis9000> one day I will do it in Lisp
[02:31:05] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:36:10] * hayley contemplates replacing CL+SSL with CL-TLS for the meme
[02:36:50] <selwyn> ck: pdf for the ages
[02:37:17] <selwyn> nordic seed bank except for pdfs
[02:37:46] <selwyn> hi jacobis9000
[02:42:42] <mfiano> What tools are available, if any, to check the expansion of a back-quoted lambda expression passed to compile? It's not easy to debug it without moving back and forth from (compile nil `(lambda ...)) to `'(lambda ...), and even that is without unquote expansion.
[02:43:08] <hayley> Produce the expression in one function, and compile in another.
[02:43:44] <hayley> one-more-re-nightmare has an internal variable which lets you produce a compiled function, an interpreted function (on SBCL), or just plain code.
[02:44:24] <mfiano> I don't see how that solves it.
[02:45:04] <hayley> The first function returns the expansion, so you can TRACE it, or call it yourself.
[02:46:13] <mfiano> This is the messy, first attempt at something working: https://gist.github.com/mfiano/2f09d8d5f54b5448c489aa3711427e7b
[02:46:13] -ixelp- graph.lisp · GitHub
[02:46:23] <mfiano> I will now try to do what you say to more closely inspect the result
[02:46:56] <hayley> The full machinery looks like https://github.com/telekons/one-more-re-nightmare/blob/master/Code/Compiler/code-generation.lisp
[02:46:56] -ixelp- one-more-re-nightmare/code-generation.lisp at master · telekons/one-more-re-nightmare · GitHub
[02:49:35] <mfiano> The problem is the expression consists of other macros, that I would like to expand interactively (not fully) like I do with macrostep
[02:49:56] <hayley> You can then copy the form into another buffer, and run macrostep on it.
[02:50:24] <mfiano> I cannot very easily without a lot of replacing gensyms with normal symbols every time I want to debug
[02:50:41] <hayley> Hm, (setf *print-circle* t)?
[02:50:53] <hayley> Or indeed just replace #: with the empty string.
[02:51:41] <mfiano> It'd be useful to have a minor-mode that hooks into macrostep mode for this sort of stuff.
[02:52:49] <mfiano> The replacing symbols is what I've been doing, and while a regex is fast, copying to another buffer and doing it every 5 seconds gets old.
[02:57:00] <mfiano> It also doesn't work very well in this case, since I have unreadable objects as part of the expansion
[02:57:10] <hayley> Ouch.
[02:57:14] <mfiano> https://gist.github.com/mfiano/52aa1cc27bcc345bd4248fd94bda3f66
[02:57:14] -ixelp- tint.asd · GitHub
[02:58:21] <mfiano> This is one thing that always costs me a lot of time, but I don't know of a good way to generalize a useful Emacs package out of it.
[03:02:25] <mfiano> Also, it seems like that's a bug anyway. There shouldn't be an unreadable object, as this is memoized for any pair of color model/space conversions.
[03:02:39] * mfiano thinks some more.
[03:05:20] <hayley> https://www.youtube.com/watch?v=NPgEMfmupHg
[03:05:21] -ixelp- Userbenchmark VS Ryzen 5000 Processors 2022 - YouTube
[03:14:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[03:17:36] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[03:18:03] * hayley reads how WSD handles closing connections.
[03:18:49] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[03:21:28] <hayley> In the end, I just have to figure out where the hell something is free()d.
[03:29:09] <hayley> Looks like CLOSE-CONNECTION in src/ws/client.lisp - and this presumably could race since SEND in some other thread, and the frame reading thread, can both call CLOSE-CONNECTION.
[03:31:48] *** Quits: Jacobis9000 (~jonaholuf@host31-54-71-0.range31-54.btcentralplus.com) (Ping timeout: 272 seconds)
[03:38:42] <mfiano> WHat are your thoughts on p/-p suffix for symbols that are not functions? I can never decide on whether a boolean (generalized or not) parameter should be named as such, and it seems I'm not alone with others' code I've read.
[03:39:27] <hayley> I write foo? for parameters usually.
[03:39:55] <mfiano> That is something I won't do :)
[03:40:18] <hayley> e.g. netfarm-client:find-object client hash &key timeout follow-updates?
[03:41:49] <mfiano> Ok I'll note a third anti-convention with no explanation behind it
[03:42:27] <hayley> I wonder if you can find a -p parameter in the HyperSpec.
[03:42:46] <mfiano> Well destruct is specified to generates them as such
[03:42:56] <mfiano> defstruct*
[03:42:57] <hayley> http://www.lispworks.com/documentation/HyperSpec/Body/f_rd_by.htm eof-error-p
[03:42:57] -ixelp- CLHS: Function READ-BYTE
[03:43:18] <moon-child> it also has some that don't use -p
[03:43:20] <moon-child> e.g. :from-end
[03:43:57] <mfiano> Try not to look at the standard derived from N Lisps for conventional user code ideas
[03:44:10] <hayley> Hm, it's been 3 days since I was told to put my issue on another repository, to no further response.
[03:44:25] * hayley got bureaucracied 
[03:49:25] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[03:49:44] *** Joins: robin (~robin@user/terpri)
[03:58:41] *** Quits: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au) (Remote host closed the connection)
[04:07:09] <hayley> Okay, I think I patched everything, let's see if it blows up.
[04:07:11] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[04:07:31] <hayley> https://www.youtube.com/watch?v=3YBmS5oaNwU
[04:07:31] -ixelp- Amateur Hour - YouTube
[04:08:03] <hayley> I still spot a corruption warning when the bot is brought up, which is no good.
[04:08:44] <edgar-rft> maybe it's a corrupt bot?
[04:09:47] <edgar-rft> where you first have to pay some bribe before you get an answer?
[04:10:07] <hayley> I'm sure it is rich enough from DoD contracts.
[04:11:01] <hayley> Could probably modify...something to print out a backtrace, so I'm not in the dark w.r.t where the memory corruption happens.
[04:15:54] <kakuhen> http://www.complang.tuwien.ac.at/anton/why-not-pdf.html
[04:15:55] -ixelp- What is the PDF format good for?
[04:24:18] <edgar-rft> kakuhen: PDF is highly useful for *one* specific purpose: printing on paper - just because it' the only document format where dimensions and colorspaces are unmistakably defined. For online reading there's easier stuff, but that is what PDF was *not* made for.
[04:29:26] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 272 seconds)
[04:52:45] <mfiano> Can loop succinctly combine =/THEN and IN? I would like the first iteration to use 1 value and subsequent iterations to receive values from a list. I have a workaround, but curious if this can be expressed more clearly.
[04:53:17] <moon-child> (loop for x in (cons initial-value rest-of-list) ...)?
[04:53:33] <mfiano> Yeah that's my workaround. Was coping not to cons.
[04:53:43] <mfiano> hoping rather
[04:53:51] <moon-child> good compiler should dx it
[04:53:59] <moon-child> and it saves a branch
[04:54:09] <hayley> gilberth: Showerthought, w.r.t telling if an alpha[] state is dead, I found a case where OMRN wouldn't rewrite and instead lead to O(n^2) search by accident. Could we do analysis to figure what states will never end up updating registers, and just kill the DFA there?
[04:54:20] <mfiano> I take that as a no.
[04:55:22] <moon-child> well, you say 'expressed more clearly'.  That seems like the clearest expression of the idea to me
[04:55:26] <hayley> I mean, it'd get to alpha[not[\Sigma*], ...] and get stuck there. Adding the rewrite rule not[\Sigma*] = ø also works, but I'd rather avoid the problem without having to think of every rewrite rule.
[04:55:37] * hayley lazily allocates mfiano
[04:57:03] <mfiano> https://gist.github.com/mfiano/11e6a77ca5bd068b0bcd03b2f584bb33
[04:57:04] -ixelp- graph.lisp · GitHub
[04:57:17] * mfiano stares blankly at trying making this nicer
[04:57:34] <hayley> Still, one cons isn't so bad.
[04:58:43] <mfiano> The consing of the cdar is confusing to understand of the original list onto the rest of the list is confusing to even think about
[04:58:52] <mfiano> So was that sentence :/
[04:59:14] <hayley> .oO(Hm, yes)
[05:20:40] *** Joins: notzmv (~zmv@user/notzmv)
[05:32:10] * hayley uploaded an image: (9KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/upZCRorxOsFEDmtARtbeRmDN/Screenshot_2022-04-03_11-01-54.png >
[05:32:12] <hayley> fuckin' who
[05:41:49] <Alfr> mfiano, does using list* instead of cons make it conceptually clearer?
[05:42:19] <mfiano> To me it does in this case.
[05:49:59] *** Joins: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de)
[05:51:40] <hayley> I keep getting a fault at address 0x104 when my bot reconnects to Discord, but it is still working.
[05:52:14] *** Quits: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:55:51] <mfiano> Is there a way with ON/BY to iterate over (A B C D) such that iterations can bind (A B), (B C), and (C D) without manually transforming the input list?
[05:57:30] <hayley> (loop for (x y) on ... do ...) ; but check if it'll bind X = D, Y = NIL or smth
[05:57:30] <mfiano> I would like a simple FOR X ON LIST BY FUNC but I can't figure out how
[05:57:40] *** Joins: livoreno (~livoreno@user/notzmv)
[05:58:23] <mfiano> Umm that just does one iteration with a binding of the input list itself
[05:59:14] <mfiano> Oh wait, I tested wrong
[06:00:20] <mfiano> Ok thanks.
[06:02:33] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[06:18:57] *** Joins: Inline (~Inline@p2e5790e6.dip0.t-ipconnect.de)
[06:21:27] *** Quits: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:37:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[06:39:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:43:33] *** Joins: ln43 (~ln43@user/ln43)
[06:48:52] <hayley> One week later, my brother still has COVID.
[06:50:16] <ln43> hi hayley
[06:50:33] <hayley> hi
[06:51:22] <ln43> today here is starting Ramadan... so a lot of people are doing fasting. I was alone in the morning to do breakfast inside the hotel restaurant
[06:52:04] <ln43> 1 month... it's a lot
[07:08:20] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[07:23:41] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:24:07] <ck_> lent is like 40 days, isn't it
[07:27:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[07:42:55] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 240 seconds)
[07:46:50] *** Joins: semz_ (~semz@user/semz)
[07:49:23] *** Quits: semz (~semz@user/semz) (Ping timeout: 252 seconds)
[07:50:09] *** semz_ is now known as semz
[07:54:22] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:10:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:18:56] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[08:54:38] <mfiano> I spent the last 3 days implementing this weird hypergraph for chaining color conversion routines, and I can finally say it's done, it works, it's just as performant, and there's no longer exponential growth of conversion routine definitions.
[08:55:31] <dave0> nice
[08:55:48] <dave0> mfiano: did you get the programmers high?
[08:57:11] <mfiano> Definitely. It was much needed as I took a month-long break after failing to think of how to solve this problem. First day back and after a quick fail with a normal graph, I got the high I needed.
[08:59:20] <mfiano> What mnade it particularly annoying is the sad state that is the graph theory library situation. Only one of them met my needs with all the required algorithms, except it had a really dumb shortcoming of only allowing nodes to be integers or symbols. So there is a bit of indirection complicating matters, but it works and it's maintainable at least.
[09:01:27] <mfiano> And I'm off to bed on a good note. Night!
[09:04:56] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 272 seconds)
[09:05:11] <ck_> have a good one
[09:05:20] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:16:41] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 246 seconds)
[09:18:38] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:41:19] <hayley> "a 555? Sure—they're so common you'll find them floating in your blood, right next to microplastics."
[09:47:24] <hayley> Well, one-more-re-nightmare is in Quicklisp now, but I have to wonder how broken the parser is going to be, if it was snapshotted on March 31.
[09:49:03] <hayley> Eh, seems to be a fine version.
[09:49:05] <hayley> Phew.
[09:54:24] <kakuhen> lisp npm equivalent when
[09:54:55] <hayley> (ql:quickload :leftpad)
[09:55:09] <hayley> To an extent, that's what I get for developing in the master branch, but I didn't know I broke the parser until I did.
[09:57:03] <aeth> hayley: it's :trivial-left-pad
[09:57:14] <aeth> (ql:quickload :trivial-left-pad)
[09:57:21] <hayley> I bet you didn't even steal the algorithm for left-pad from gilberth.
[09:57:29] <kakuhen> I prefer cl-left-pad
[09:57:37] <hayley> Nor do you have a linter implemented with compiler macros. smh my head
[09:57:55] <aeth> kakuhen: :trivial-left-pad is in QL though
[09:58:00] <aeth> check https://www.quicklisp.org/beta/releases.html
[09:58:01] -ixelp- Quicklisp beta releases
[09:58:30] * hayley posted a file: (202KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/VyApODIcxzAwCxZAnUrOTTPK/one-more-re-nightmare.pdf >
[09:58:33] <hayley> Bet you don't even have a manual like this one.
[09:59:21] <kakuhen> code is self documenting :)))
[09:59:34] <kakuhen> The documentation is open sly-jump-to-definition
[09:59:40] <hayley> Hm, OMRN isn't in the list. But I can load it fine.
[10:08:54] <hayley> It also appears https://github.com/quicklisp/quicklisp-projects/ hasn't been updated for this month's dist.
[10:08:54] -ixelp- GitHub - quicklisp/quicklisp-projects: Metadata for projects tracked by Quicklisp.
[10:13:54] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[10:46:45] *** Joins: SR-71 (~user@user/SR-71)
[11:06:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[11:12:30] *** Joins: notzmv (~zmv@user/notzmv)
[12:04:07] *** Joins: dra (~dra@2a04:4540:640a:c500:7975:cd65:df3f:7b03)
[12:04:09] <dra> Hello!
[12:04:34] <hayley> Hello dra!
[12:12:03] <dra> Hey hayley!
[12:12:24] <dra> What's new on the Lisp front?
[12:12:40] <hayley> I got one-more-re-nightmare in Quicklisp.
[12:12:50] <rotateq> hi dra!
[12:12:57] <dra> Hey rotateq!
[12:13:02] <rotateq> wow hayley
[12:13:06] <dra> Nice!
[12:13:24] <rotateq> I'm working on something small right now but will definitely have a look.
[12:13:44] <hayley> Pity that it's a few days out of date, since I redid the parser grammar, but I'll live with it.
[12:15:53] <rotateq> I'll browse it now with Nyxt.
[12:17:07] <rotateq> hayley: How's the procedure of bringing something into public available quicklisp?
[12:17:29] <rotateq> maybe also "#define private public" in the header file ...
[12:17:47] <hayley> It looked something like https://github.com/quicklisp/quicklisp-projects/issues/2142
[12:17:47] -ixelp- Please add one-more-re-nightmare · Issue #2142 · quicklisp/quicklisp-projects · GitHub
[12:18:54] <rotateq> ahhh signaling an issue to the puppet master(s)
[12:30:19] <ck_> still sounds like a doom level
[12:30:20] <ck_> https://www.youtube.com/watch?v=0obBdrfUMzU
[12:30:21] -ixelp- Master of Puppets (Remastered) - YouTube
[12:31:46] <dra> rotateq: What are you working on?
[12:33:03] <rotateq> dra: nothing that could be of public desire :) but maybe some day
[12:33:25] <rotateq> and erm different things ... :/ i know i know
[12:33:31] <dra> rotateq: As long as you have fun hacking. :D
[12:34:27] <rotateq> dra: but as I'm now better with McCLIM I could convert some ideas to real applications which some might enjoy, like the 100% Java free shitty geogebra clone or a too simple digital circuit simulation program
[12:35:15] <rotateq> dra: I do have! and so much still to learn to some day say I can at least do something
[12:47:01] <rotateq> dra: And you? Your LISP in assembly?
[12:53:45] <rotateq> I heard it's popular when someone makes good ports of useful python libs. There are ~100,000 ...
[12:54:24] <rotateq> quantity over quality :D or documentation, readability, maintainability, ...
[13:01:32] *** Joins: shka (~herr@109.231.3.55)
[13:01:57] * hayley wonders if you can make a mutex protocol with linear types, such that you can't smuggle out values from the control of the mutex.
[13:04:45] <hayley> Suppose ~a is a linear type, then we could have something like call-with-lock-held : Mutex a -> (~a -> ~a) -> (). (The return value of that function is the new value in the mutex.) But it's a bit of a hassle to actually use the value, since you'd need to copy.
[13:05:43] <hayley> I guess that is why there are usually regions/borrows.
[13:13:33] <moon-child> hayley: if you are pure, you don't need linear types
[13:14:00] <hayley> Right, if the object protected by the mutex is immutable, you can't do any harm outside the mutex.
[13:14:11] <moon-child> well, I mean
[13:14:21] <moon-child> with-lock : Mutex a -> (forall a. a -> b) -> b
[13:14:37] <moon-child> or something like that
[13:15:06] <moon-child> the type system can force the called function to be unable to escape a reference to the mutex
[13:15:18] <hayley> I think Haskell had a trick with the St monad and a weird-ass type.
[13:16:38] * hayley looks up "runst haskell" and is told about Rust.
[13:17:56] <moon-child> oh no, right, to make it work you need to pull out the b
[13:18:08] <hayley> runST :: (forall s . ST s a) -> a
[13:18:18] <moon-child> forall b. Mutex a -> (a -> b) -> b
[13:18:36] <moon-child> so you have to bind the b type parameter before a
[13:18:50] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[13:20:06] <hayley> Figure it would be useful to return something from with-lock too, which you do, but not my linear type protocol.
[13:20:37] <moon-child> could say ~a -> ~a*b
[13:21:11] <hayley> Right.
[13:21:19] <rotateq> hayley: "You'll never have to worry ..."
[13:22:42] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 272 seconds)
[13:22:57] <hayley> The issue with linear types, I think, is that I now need to know if the type I put in can be used while linear. make-mutex also has to consume the initial value.
[13:23:43] <moon-child> can do uniqueness polymorphism
[13:24:08] <moon-child> unique a <: linear a.  shared a <: linear a
[13:24:18] <hayley> I suppose so.
[13:24:43] <moon-child> (unique = guarantee from the caller there's only one reference to the object.  linear = guarantee from the callee not to change the number of references to the object.  I think clean does something like this)
[13:24:45] * hayley wonders what to show the startup people, since she can't make a compiler in a month.
[13:25:37] <hayley> I could show off the bootstrap interpreter, and how object capabilities avoid npm-itis (to a large enough extent that is worth consideration).
[13:27:59] <moon-child> how technical are startup people?
[13:28:21] <hayley> I have no idea.
[13:30:46] <hayley> moon-child: Well, the unique/linear distinction is interesting, in part because I don't have a functional language per se, and thus can't just do a destructuring-bind or match or etc to retrieve slots from an object, without killing it more than once. I guess accessors could have a "won't escape" type, which is an approximation of regions if you squint too hard, I guess.
[13:33:01] <hayley> e.g. (p : ~Point) -> let x = p.x, y = p.y in ... would be fair game if x and y of p won't cause p to escape. It can be seen as an imaginary automatic reference too, so I don't think it would hurt too badly. I'm not using linear types for memory management, but for modelling things with types.
[13:33:08] <moon-child> hmm, suppose a has a slot foo of type b.  Then say that get-foo : ~a -> (~a -> ~b -> ~a*~b*c) -> c
[13:33:28] <moon-child> need heaps of syntax sugar, but I think that would work
[13:34:03] <hayley> No thanks, my family has a history of diabetes. Won't try that.
[13:35:17] <moon-child> err, final ret type needs to be ~a*c
[13:35:24] <hayley> Right.
[13:35:51] <moon-child> or church encoding of structs works
[13:36:03] <hayley> Still, not the biggest fan.
[13:37:51] <dra> rotateq: You'll never be done learning. Enjoy the ride!
[13:38:08] <dra> rotateq: Yes, in a broader sense I'm working on my Lisp in assembly.
[13:38:41] <moon-child> why write in assembly?
[13:39:23] <dra> moon-child: To see if I can. For the fun of it.
[13:39:35] <rotateq> dra: I know and that's not just awesome but also worth it in the long run.
[13:40:32] <rotateq> dra: that's the best reason. and doing things out of intrinsic motivation
[13:41:14] <hayley> Though I wonder if it can allow for too much human error. e.g. can I use a won't-escape accessor of an object in a mutex to subvert the mutex? Say, we extract some object that the mutex should transitively protect. I guess a region tells us where a reference can escape to, without harm. But I don't really like regions.
[13:42:45] <hayley> OTOH what is with-lock if not a way of producing a "region"?
[13:44:06] <moon-child> you can also say  with-lock _ dont-halt
[13:45:51] <hayley> And perhaps I should figure out what I want to model with the linear type here. The post-condition should be that the mutex has the only reference to the object being protected, when with-lock returns. Then I work backwards from there.
[13:55:19] <hayley> This won't-escape type is still good for making copies, though. I could write let x = y.copy in ... and .copy wouldn't consume y, rendering it useless.
[13:57:00] <hayley> And immutable objects are still safe to not copy, which I also want to model somehow.
[13:59:11] <dave0> i'll show YOU inanimate!
[13:59:38] <moon-child> 'safe to not copy'  seems purely like an optimization
[13:59:56] <hayley> OTOH if we want to model protocols, we still don't want to copy.
[14:01:01] <hayley> moon-child: One which means you don't have to write "copy x" or "x.copy()", and thus has some effect on writing style. I guess I can tag types as implicitly "copy"able. And also one where e.g. the integer type doesn't need a phony copy method where copy = id
[14:01:25] <moon-child> ah, hmmm
[14:01:57] <hayley> A counter could be something like counter = { l = lock 0, increment by = with-lock l (x) -> (x + 1, x) } ; look ma, no copy
[14:03:06] <moon-child> I guess it makes sense to always return a new value
[14:03:11] <hayley> And, in this case, it also means I don't have to worry about order of evaluation...unless I make + won't-escape, which is fair game.
[14:03:12] <moon-child> since if you're only reading you'd use an rwlock
[14:03:47] <hayley> Erm, "x + by" if I'm going to provide a "by" parameter.
[14:04:39] <moon-child> .oO( can we express ordering constraints on lock-guarded blocks, like atomics? )
[14:09:37] *** Joins: lisp123 (~lisp123@143.238.171.43)
[14:12:09] * hayley wrote a mutex implementation on paper, and the results were surprising
[14:13:01] <moon-child> 3 surprising facts about mutexes!  Number 6 will sho
[14:13:24] <hayley> I have a "value" slot, and after calling the function provided to with-lock, I assign to the slot. But that means the value slot is non-linear, but the protocol is linear.
[14:13:56] <hayley> *protocol function
[14:15:47] <hayley> I could instead make the type of with-lock "Mutex a -> (a -> ~a × b) -> b" but then I'm delaying the non-linearity to the assignment. The tricky part, I guess, is when it matters. Since, well, Rust has ye olde unsafe { } I guess I have to violate linearity too.
[14:16:16] <moon-child> I don't know how else you would do it
[14:16:32] <hayley> But this is supposed to be a "safe" language, no matter what, so even my "unsafe" should be scoped somehow.
[14:17:51] <moon-child> 'unsafe' is a capability?
[14:18:31] <hayley> I guess so. But this is all type-level bullshit in the end, and capabilities are mostly a runtime thing in this environment.
[14:19:29] <hayley> I guess a mutex could have implementation magic, still. But no one else should be able to subvert protocols by making linear things non-linear spontaneously.
[14:20:33] <moon-child> 'type bullshit' sounds like a mechanism for classifying ox excrement
[14:21:06] <hayley> :D
[14:43:28] <hayley> I can't see useful polymorphism for unique/shared types, but I can for functions that process won't-escape or shared types. e.g. map could process won't-escape iff the function could process won't-escape. But it'd get boring quickly to specify what can and can't escape, with any dependencies.
[14:44:34] <hayley> While you can write programs in ML without type declarations, it's usually frowned upon for top-level definitions, and moreso for objects provided by a module. So I don't know if just leaving it to type inference is best.
[14:46:10] *** Joins: mzan (~quassel@mail.asterisell.com)
[14:46:22] <hayley> It's worse for OO languages with subclassing, because there is no "most general unifier". e.g. if I return type Blah, and Blah <: Foo, should client code be able to depend on it being Blah, or is the more abstract Foo more appropriate?
[14:47:07] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 260 seconds)
[14:48:10] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[14:52:15] <hayley> moon-child: Well, unsafe could be a capability, come to think of it. We could have share : ~a -> a, and obviously user code can't synthesize any term of that type. But the implementation could just so happen to have one lying around somewhere.
[14:58:17] <hayley> I guess I'll call the can't-escape types downward types. So I have downward, linear and shared.
[15:06:38] <shka> https://twitter.com/sumlenny/status/1510169194465271812
[15:06:43] <shka> cool shit Russia
[15:20:23] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:23:07] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:33:27] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:44:41] <ck_> what the fuck
[15:44:58] <ck_> what's with all the soviet shit coming back up, I had a different image in mind
[15:53:20] <pl> ck_: it's much more larping imperial Russia than Soviet Union 
[15:54:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:54:33] <pl> There's a bit of difference in how population operates when the official ideological propaganda is arguably *against* what happens, and when it's fully embraced by propaganda and population 
[15:56:32] <selwyn> a big difference i would say
[15:57:03] <selwyn> they are talking about building seven nuclear plants in the uk
[15:57:11] <selwyn> but it will take 30 years
[15:57:26] <selwyn> and no commitment anyway
[15:57:59] <selwyn> i don't think any country talks as much about infrastructure as the uk, without doing any of it
[15:59:13] <Lycurgus> in any country you have a talented tenth, or 1 percent or maybe in a good case 20, the rest are the dull masses
[15:59:40] <Lycurgus> globally closer to 1 than 20
[15:59:53] <selwyn> lycurgus: the problem is more to do with the quality of the elites
[16:00:16] <selwyn> they are over financialised and mediocre
[16:00:23] <Lycurgus> 20 is the fraction in the RF that don't buy the propaganda by report
[16:00:28] <selwyn> it means they can't build shit
[16:00:54] <Lycurgus> yeah, if the elites were truly enlightened that would solve the problem
[16:01:31] <Lycurgus> but they're just better relative to the standard of an ape with linguistic thought capablity
[16:01:52] <Lycurgus> but next to zero critical thought capability
[16:03:00] <Lycurgus> that is to say the non capitalist elites
[16:03:04] *** Quits: Inline (~Inline@p2e5790e6.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:03:07] <Lycurgus> theu
[16:03:14] <selwyn> when russians start dying of cancer/other diseases due to lack of access to drugs (which is actually what happens under sanctions)
[16:03:21] <Lycurgus> they're the egregious dumb fucks
[16:03:22] <selwyn> they will rally around their government
[16:03:33] <selwyn> this is the consistent pattern seen with sanctions
[16:04:03] <selwyn> and unlike iran, russia will eventually be able to replace a good proportion of even sophisticated medicine eventually
[16:04:12] <Lycurgus> right, the problem with russin is autarky and autocracy are considered part of the national character
[16:04:56] <Lycurgus> so the soviet system never broke out of that and now they've returned to character
[16:05:17] <Lycurgus> because Yeltsin
[16:05:34] <Lycurgus> but really because that's the nature of the whole people 
[16:05:45] <selwyn> i don't agree
[16:05:58] <selwyn> the soviet union was a really really different society from the russian empire
[16:06:06] <Lycurgus> generation after generation keeps blowing out the fraction that don't want that character
[16:06:08] <selwyn> and contemporary russia is again very different from the soviet union
[16:06:22] <selwyn> this idea that it never really changes is lazy history imo
[16:06:54] <selwyn> i don't think that leninist russia can be described as a dictatorship, for example
[16:07:03] <Lycurgus> yes very different from the imperial system but the autarkic and autocratic nature of the people did reassert iteelf in that system too
[16:07:47] <Lycurgus> it would seem that 30 years of liberalization and openness might have made a diff, we'll see
[16:08:23] <Lycurgus> see if a putinesque and oligarch dominated liberalization was enough 
[16:08:54] <Lycurgus> right the period before stalin's consolidation was different
[16:08:58] <pl> Well, under Putin it seemed very much back to centralisation of imperial Russia 
[16:09:08] <Lycurgus> but that was less than a decade of 7 in total
[16:09:10] <selwyn> pl: but a larp as you say
[16:09:14] <selwyn> not the real thing
[16:10:51] <pl> well, USA larped being about freedom and built a national ethos out of it :V
[16:10:54] <Lycurgus> the post stalin ussr was different, no actual strongman, just a comittee sock puppet of one
[16:11:05] <selwyn> indeed larping is important
[16:11:18] <pl> I wouldn't say Andropov was a sock puppet
[16:11:31] <shka> selwyn: usa talks more about infrastructure without doing it
[16:11:33] <pl> whether or not he actually assassinated Brezhnev
[16:11:46] <selwyn> my point is more that no matter what happens contemporary russia is still miles apart from imperial russia
[16:11:56] <pl> My favourite theory is that Brezhnev managed to kick the bucket just as Andropov decided to assassinate him
[16:12:21] <Lycurgus> is larp live action role play?
[16:12:31] <pl> selwyn: but the openly spoken & built national ethos is essentially Russian Empire, take two
[16:12:33] <pl> Lycurgus: yes
[16:13:41] <Lycurgus> the ultimate outcome is probably the breakup of the russian federation into a looser confederation
[16:14:02] <Lycurgus> but maybe will take a generation
[16:14:04] <pl> scratch confederation, not after all that centralisation under Putin
[16:14:11] <selwyn> one thing i find hard to understand is that putin is known to dislike antisemitism and islamophobia
[16:14:17] <selwyn> which is very different from the russian empire
[16:14:34] <pl> several regions are already pushing their luck
[16:14:35] <Lycurgus> i doubt putin will become gerontocrat
[16:14:47] <pl> Lycurgus: gerontocracy is mainly USA these days
[16:14:48] <selwyn> yet his 'big russia chauvinism' manifests itself in disdain for other east slavs
[16:14:59] <Lycurgus> he doesn't seem to be headed for a long life
[16:15:06] <selwyn> he seems healthy
[16:15:08] <Lycurgus> like a mugabe
[16:15:33] <Lycurgus> they're have been observations that he's not
[16:15:48] <shka> leninist russia was 100% dictatorship
[16:15:50] <Lycurgus> (healthy)
[16:16:50] <Lycurgus> yeah but with lenin that had a different character than with stalin or the later gerontocrats
[16:17:23] <Lycurgus> more peter the great than ivan grozny
[16:18:58] <shka> anyway, modern day Russia is more like dysfunctional version of nazism  
[16:19:51] <Lycurgus> german fascism was highly effective/efficient
[16:20:11] <shka> well, that's debatable
[16:20:13] <pl> shka: I think the biggest forgotten part is that Stalin was the guy big on "traditional values"
[16:20:16] <Lycurgus> but russia's not germany
[16:20:31] <pl> Lycurgus: german fascism was very inefficient, but it painted a nice picture
[16:20:52] <selwyn> i don't get the impression lenin had complete control of the party at any point
[16:21:06] <shka> party you say
[16:21:14] <Lycurgus> pl compared to what?
[16:21:20] <shka> have you missed the part when bolsheviks stole the Russian revolution?
[16:21:46] <pl> shka: Bolsheviks have always been the more militant and organised since the Bolshevik-Menshevik split
[16:21:52] <selwyn> that is not immediately relevant 
[16:21:52] <Lycurgus> it was more like the karenskys lost it
[16:22:31] <shka> my point is: let's not talk about party 
[16:22:32] <selwyn> it was clearly a one party state but not a dictatorship imo
[16:22:56] <shka> let's talk how party monopolized soviets
[16:23:12] <Lycurgus> facism has to be relatively efficient, by the standsards of the day, famously they keep the trains running on time
[16:23:30] <shka> ...
[16:23:39] <Lycurgus> *fascism
[16:23:58] <shka> rampart corruption of all facists states was a thing
[16:24:07] <shka> and still is
[16:24:19] <selwyn> trains running on time in italy is a myth anyway
[16:24:52] <shka> anyway, Russia is dead to me now
[16:25:00] <Lycurgus> yeah fascism started in italy but it reached its' zenith in de
[16:25:09] <shka> i don't recognize it's right to exist anymore
[16:25:25] <Lycurgus> and ur russian I take it
[16:25:29] <selwyn> lol
[16:26:37] <Lycurgus> if it forces a hot conflict with NATO, that will resolve the matter
[16:26:58] <shka> nuclear winter is all the rage 
[16:27:01] <Lycurgus> which is what that's very unlikely
[16:27:14] <shka> that's what they said about Ukraine 
[16:27:25] <Lycurgus> nuclear winter is overblown 
[16:27:26] <shka> that it is unlikely 
[16:27:34] <Lycurgus> like most stuff
[16:28:19] <Lycurgus> yeah there a lot of situations in the modern world that are big things overripe for change
[16:28:36] <Lycurgus> you don't know which are gonna fire at a particular time
[16:29:19] <shka> at the end of the day, the era of European peace is over
[16:29:45] <Lycurgus> in any one of them though a persistent status quo is a good short and medium term bet
[16:30:20] <shka> to quote lenin
[16:30:37] <shka> there are decades when nothing happens, and there are weeks when decades happen 
[16:30:37] <Lycurgus> i doubt there will be a return to the situation of constant warfare in europe
[16:31:08] <Lycurgus> that prevailed from late antiquity thru the second world war
[16:31:48] <Lycurgus> something like a european nation state comparable to china has finally emerged
[16:32:32] <Lycurgus> and with it comes the attendant stablity as was the case in dynastic china
[16:32:36] <selwyn> no it hasnt
[16:32:52] <selwyn> whenever the eu is under mild pressure, it tends to fuck up
[16:33:01] <selwyn> and individual countries do their own thing
[16:33:22] <Lycurgus> well in the whole post ware period there has never been a challenge like the current one
[16:33:28] <pl> Lycurgus: the trains on time was /propaganda/
[16:33:28] <rotateq> hayley: Can you surf in the near of your house, too? :) not just the web
[16:33:32] <Lycurgus> a threat but no actual boom
[16:33:35] <pl> Lycurgus: reality was that trains were usually late
[16:33:45] <selwyn> pl spitting facts
[16:33:49] <Lycurgus> in italy
[16:34:02] <pl> Lycurgus: in both italy (which originated the meme) and in Germany
[16:34:04] <hayley> rotateq: I live near the beach, but I can't surf.
[16:34:18] <Lycurgus> mezzo giorno
[16:34:32] <ck_> the railroad only has four enemies
[16:34:57] <selwyn> i suspect that the origin of 'trains running on time' is a projection of what conservative anglos thought fascism was actually like
[16:35:26] <Lycurgus> yeah nation state was overreach, but something like was the qualification
[16:35:40] <ck_> interpretation and reality.. you know what russia said about east germany and its implementation of communism
[16:36:01] <rotateq> hayley: sad. as I would like playing the piano but can't
[16:36:15] <ck_> "they actually believe this crap"
[16:36:28] <rotateq> or traveling with the bike to Australia ...
[16:36:32] <Lycurgus> lol
[16:36:36] <shka> https://www.youtube.com/watch?v=q1XaaaNlbCE
[16:36:36] -ixelp- Outside the Trains Don't Run on Time - YouTube
[16:37:15] <rotateq> ck_: I hear implementation and think of what their standard leaves open to those.
[16:37:22] <selwyn> i guess that irl communism was the best ideology for trains running on time
[16:37:50] <shka> selwyn: lol
[16:37:52] <selwyn> or at least cheapest - they were free during the cultural revolution
[16:37:57] <pl> as for difference between positive and negative national ethos - a positive one can inspire positive results even when on the average the state is corrupt and hypocritical, whereas negative one will inspire the opposite
[16:38:43] <shka> selwyn: it is just how trains got nationalized in UK
[16:39:16] <shka> it was simply by recognition of the fact that railways is critical asset for the economy at large  
[16:39:20] <shka> fundamental service
[16:39:44] <shka> but how well it worked out in the UK?
[16:39:48] <shka> you tell me :P
[16:39:51] <selwyn> uh
[16:39:56] *** Joins: Inline (~Inline@p200300cd473cee00b1553510cacfa527.dip0.t-ipconnect.de)
[16:40:12] <Lycurgus> in fact it's the anglosphere that had the cultural standard of actually making the trains run on time
[16:40:35] <Lycurgus> as well as inventing them in the first place
[16:41:10] <shka> selwyn: so well, at the end of the day it is not about political system at all
[16:41:14] <selwyn> i don't understand the point being made, but most things have got worse since privatisation and few got better
[16:41:23] <pl> shka: well, the part where later government intentionally sabotaged railways is a big issue
[16:41:36] <pl> and yes, privatisation didn't help at all
[16:42:14] <selwyn> an underappreciated point is that the proponents of privatisation had to walk back a lot of their policies, so privatisation is a failed policy in that sense
[16:42:15] <pl> by the time I started dealing with trains in UK, it was already partially renationalized in terms of rail network (Network Rail, a lot of side infrastructure)
[16:42:21] <selwyn> yes
[16:42:25] <shka> pl: i mean, there was REASON why railways were nationalized
[16:42:32] <shka> a very rational reason i may add
[16:42:33] <pl> and now Scotrail was fully renationalised
[16:42:36] <pl> shka: yep
[16:43:09] <pl> And failure of British Rail later on is very, very related to Beeching Axe - and the government that pushed them
[16:43:39] <pl> you know that HS1 and HS2 had to pay extra costs *due* to actions taken in relation of Beeching Axe?
[16:43:49] <selwyn> for what
[16:43:49] <shka> recently i stumbled on a number stating that each dollar invested into apollo program yielded 8 dollars of GDP growth in USA
[16:44:18] <pl> selwyn: pre-Beeching, there was a bunch of specially prepared rail lines in anticipation of HS1 and possible expansion north
[16:44:31] <selwyn> right
[16:44:42] <selwyn> and they built over the alignments?
[16:45:13] <pl> those lines were not only closed, the locations were purposefully destroyed so that when HS1 finally happened, they had to start from scratch, couldn't even use the locations due to being built over, yes
[16:45:46] <pl> For those who wonder how the lines could be built in anticipation of HS1 before first modern high-speed trains...
[16:46:02] <pl> The "Chunnel" is a project that started in 19th century
[16:46:02] <selwyn> they are reversing beeching in some other places but with similar problems, its depressing
[16:46:39] <pl> There was line built from London to sea with european loading gauge in expectation of future tunnel
[16:47:06] <selwyn> iirc some rail companies actually operated ferries so could actually do london-paris
[16:47:32] <pl> (british loading gauge is smaller than european standards, which is also why the Chunnel uses special TGV trainsets
[16:47:34] <pl> )
[16:48:44] <pl> a fun thing, btw, on incompatibilities between UK trains and French trains in Eurotunnel. While british loading gauge is smaller, there's one exception - the space for third rail shoe
[16:49:13] <selwyn> oh
[16:49:20] <selwyn> i wondered why we don't have double decker trains
[16:49:28] <pl> british trains leaving Eurotunnel had to stow the shoe, but often drivers forgot to do so, and damaged railside equipement
[16:50:16] <pl> pissed of french railways placed concrete blocks at exits from eurotunnel so that if you didn't stow the third rail pickup, it was ripped away
[16:50:41] <pl> Ultimately this got fully fixed by extension of overhead catenary power all the way to St. Pancras
[16:50:43] <selwyn> the eurostar used to traverse a large part of the london suburban rail network before they changed the destination
[16:50:53] <selwyn> oh
[16:50:56] <selwyn> i see
[16:51:12] <selwyn> pl: do you have any opinions on crossrail
[16:52:02] <pl> not much. Other than East Coast Main Line (which I travelled fully only once), I mostly had to deal tiny bit with Scottish railways
[16:52:51] <selwyn> well, it seems that crossrail has lots of different arrangements as well
[16:53:22] <selwyn> since it is built up of at least two main lines and a new section
[16:54:44] <selwyn> anyway, time to get back to the hackathon
[16:54:51] <gilberth> This is ironic. I can easily find cheap 10ns 512KB asynchronous SRAM. What I cannot find though is a fast small register file. So when I use an SRAM for a register file, how many registers do you want? Are 512K of them suffice?
[16:55:00] <selwyn> so far, i have been doing hand crafted heuristics, which work quite well
[16:55:12] <selwyn> though it would be nice to actually do some learning
[16:55:32] <selwyn> i've spotted a couple of places where i might be able to use random forests
[16:56:28] <moon-child> gilberth: 10ns is a long time, isn't it?
[16:57:06] <pl> gilberth: what do you need a register file for?
[16:57:08] <gilberth> moon-child: Not for discrete devices.
[16:57:13] <hayley> Somehow I'd guess that wiring and packages and crap gets in your way below 10ns, but I've never done high frequency design.
[16:57:16] <shka> selwyn: no point for that right now
[16:57:23] <selwyn> yeah
[16:57:29] <moon-child> gilberth: I see
[16:57:40] <selwyn> i reckon the best way forward is to proceed until i see an obvious use case
[16:57:45] <selwyn> no point forcing the issue
[16:57:52] <gilberth> pl: A RISC 74xx TTL CPU.
[16:58:04] <shka> you need ML to handle real life data
[16:58:10] <hayley> 1 ns light = 29.98 cm, so 10ns \approx 3 M of wire. Hm.
[16:58:16] <selwyn> previous winners have often incorporated a simulator
[16:58:30] <moon-child> electricity is slower than light
[16:58:39] <shka> moon-child: ... no?
[16:58:39] <selwyn> which i can possibly code up in one day, and then generate data with
[16:59:03] * hayley reads "around 90% of the speed of light" and calls it close enough
[16:59:18] <gilberth> hayley: Yes, 10ns is pretty manageable, below that you enter high-frequency land, with all spooky effects.
[16:59:36] <shka> electricity is, effectively, an electric field 
[16:59:48] <pl> gilberth: so, RISC, so we optimize for decode... partition the SRAM into pages with each page being complete register file, and provide a way to do bank switching
[16:59:51] <moon-child> shka: https://en.wikipedia.org/wiki/Velocity_factor#Typical_velocity_factors
[17:00:12] <selwyn> uh
[17:00:12] <moon-child> cites 60-80
[17:00:22] <pl> gilberth: depending on how fast you want to make it, you can also reuse the same SRAM for TLB and other special registers
[17:00:48] <selwyn> electric current is a flow of charge carriers in some sort of material
[17:00:52] <gilberth> pl: Bank switching? What banks? Anyhow, I contemplate to use SRAM for the register file. Only problem: I can't write while I read.
[17:01:09] <selwyn> which doesn't have to be the same speed as the wavefronts of the electric field of an electromagnetic field in a vacuum
[17:01:11] <shka> moon-child: my point is: electric signal is electro-magnetic wave 
[17:01:18] <shka> well, almost
[17:01:35] <shka> it is the same as light
[17:01:49] <gilberth> pl: TLB? What are you are dreaming at night. I won't attempt to implement a TLB with discrete ICs.
[17:02:11] <shka> selwyn: flow of charge carriers in metal is very, very, very slow
[17:02:12] <pl> dual-port SRAM exists
[17:02:21] <pl> and yes, bank-switched register fiels
[17:02:22] <pl> *files
[17:02:37] <moon-child> selwyn, shka: I see
[17:02:51] <pl> if you bank switch program counter and status registers, you can end up with a hyperthreaded core :D
[17:03:04] <moon-child> ;o
[17:03:05] <shka> https://www.wtamu.edu/~cbaird/sq/2014/02/19/what-is-the-speed-of-electricity/
[17:03:06] -ixelp- What is the speed of electricity? | Science Questions with Surprising Answers
[17:03:10] <gilberth> pl: Those are fake. This is just a regular SRAM plus an arbitrator. Those chips have a /BUSY signal.
[17:03:37] <shka> in other word signal speed != electron speed
[17:03:39] <selwyn> although what i said is true, it is different yet again from the speed of propagation of an electric signal
[17:04:26] <shka> selwyn: ... which is what matters when comparing with optical fiber 
[17:04:45] <shka> electric signal is essentially just a wave in a electric field 
[17:04:53] <selwyn> ok
[17:05:14] <gilberth> pl: I contemplate to have my stack there. Call it stack or register windows. With that many space, I could easily generate the high address bits from the current frame number and have the low address bits coming from the register number in my instruction => very fast function calling.
[17:06:00] <selwyn> well, those would propagate at the speed of light in that medium
[17:06:16] <shka> exactly 
[17:06:19] <pl> gilberth: I found real dual-port SRAMs, 32k*36bit, 3.3V TTL compatible
[17:06:22] <gilberth> Nobody says that your stack must live in your regular address space.
[17:06:42] <gilberth> pl: Real? w/o a /BUSY signal?
[17:07:37] <pl> they have BUSY... for daisy chaining when you want 72bit data bus
[17:07:57] <pl> so they have actually two /BUSY outputs, one for port
[17:08:20] <gilberth> I am puzzled, why would widening the data bus need a /BUSY signal?
[17:09:09] <gilberth> pl: Do you have a part number for me?
[17:09:55] <pl> the worst case I can figure is that they might assert a BUSY if you put simultaneous write on both ports to the same address, which would be otherwise undefined operation
[17:09:59] <pl> https://www.renesas.com/us/en/document/dst/70v6595857-datasheet?language=en&r=13383
[17:10:08] <pl> 208 BGA chip
[17:10:38] <gilberth> pl: So when I use one port for writing and one for reading, no /BUSY asserted ever?
[17:10:52] <gilberth> Ouch, it says "BGA".
[17:11:10] <pl> gilberth: okay, I got to BUSY waveforms
[17:11:23] <pl> BUSY is asserted if both ports get *same address* (exact same)
[17:11:31] <pl> if the addresses are different, no BUSY happens
[17:13:15] <pl> it also provides interrupt mailbox so you can connect two devices with MMIO interrupt
[17:14:21] <pl> also has semaphore system for use by system
[17:15:00] <pl> timings go as low as 10ns
[17:15:13] <pl> (the part is actually async, 10ns is max delay)
[17:15:15] <shka> 10ns?
[17:15:21] <shka> that's not very low
[17:15:24] <gilberth> ok. I might want to write and read the same address at the same time. Would I craft my register file with d-type FFs that would be no issue. I guess I have to read the data sheet more closely.
[17:15:26] <shka> what you are talking about even?
[17:15:57] <selwyn> struggling to see what makes an 'electric wave' different from light
[17:16:03] <pl> selwyn: nothing
[17:16:06] <shka> selwyn: nothing
[17:16:07] <selwyn> if you have a non-static electric field, it should give rise to a magnetic field
[17:16:08] <gilberth> shka: It is fast. You hardly find any 74xx TTL chips with a lower propagation delay than that.
[17:16:15] <selwyn> or is it simply to do with how it is induced
[17:16:17] <shka> gilberth: ok
[17:16:19] <pl> selwyn: you should see the electrical equivalent of fiber :V
[17:16:27] <gilberth> You want to go faster, you would need to go ECL.
[17:16:30] <pl> especially long wave
[17:16:48] <pl> gilberth: this part goes max to 4MBit
[17:16:58] <shka> it is interesting to see how electricity is tied to light
[17:17:24] <gilberth> pl: Yes, those parts are larger than what I would need. :-)
[17:17:29] <shka> but otherwise... well, this has been figured out for 100  years now
[17:18:48] <rotateq> shka: even more! :)
[17:19:02] <pl> if we could manipulate gravity like we can EM, we would be interstellar species in short order
[17:19:15] <selwyn> em is good scottish science
[17:19:30] * selwyn thinks
[17:19:40] <shka> warp drives soon
[17:19:45] <pl> gilberth: smallest is 128kByte (sorta, with 36bit)
[17:19:45] * shka wants to believe
[17:19:47] <selwyn> i guess we had that alcubierre experiment recently
[17:19:54] <gilberth> Anyhow, I have plenty of time for I need 40ns for the ALU alone. Datasheets claim 20ns, but that's the typical delay time, I rather go with the max. and allow for some head room.
[17:19:57] <selwyn> with casimir plates or sth
[17:20:46] <shka> imagine what a fucking insanity would be actually getting mass interplanetary travel in 20 years
[17:21:13] <selwyn> hm
[17:21:37] <selwyn> i do think there is a non-zero chance we could do it without extremely exotic materials that probably don't exist
[17:21:40] *** Joins: lisp123 (~lisp123@143.238.171.43)
[17:22:03] <pjb> shka: Elon Musk would have mixed feelings, I guess.
[17:22:37] <pjb> Happy to be able to become exoplanetary, but puzzled about all the effort he put in SpaceX classical rockets.
[17:23:02] <selwyn> https://link.springer.com/article/10.1140/epjc/s10052-021-09484-z
[17:23:03] -ixelp- Worldline numerics applied to custom Casimir geometry generates unanticipated intersection with Alcubierre warp metric | [...]
[17:23:05] <selwyn> we discussed this thing once
[17:23:17] <selwyn> it lets you do a proof of concept as a tabletop experiment
[17:23:20] <selwyn> which is ridiculous
[17:23:45] <selwyn> i read a fun paper once that tried to forecast the possibility of ftl within the next 1000 years
[17:23:51] <selwyn> unfortunately, i haven't been able to find it since
[17:26:20] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[17:26:43] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:26:45] <selwyn> this paper seems to indicate that we can do a lot of stuff just by considering fancy geometries - they discovered this one by accident investigating a numerical method
[17:28:02] <pl> unfortunately none of them solve the time travel issue of FTL
[17:28:14] <pl> unless we break relativity and maxwell's laws
[17:28:46] <pl> Arguably that's why a lot of sci-fi cheats by effectively making it so that `c` is not `c` anymore
[17:29:25] <pl> FTL that works with relativity and doesn't break time is ... weird
[17:30:01] * dra wonders if DWARF has been deliberately designed to be as obtuse as possible.
[17:30:01] <selwyn> pl: you can get quite some leverage by using 'exotic materials'
[17:30:30] <selwyn> simply posit some material that has a negative energy density, and some of our cherished beliefs about relativity no longer hold
[17:30:37] <pl> tl;dr there's no-relativity-breaking model where you travel at effectively light speed and it gives illusion of FTL because you travel back into past when flying through the wormhole backwards
[17:30:58] <pl> selwyn: no, that's only for manipulating the local fabric of space
[17:31:07] <pl> it doesn't change the implications of 'c' on time
[17:31:41] <selwyn> um
[17:31:48] <selwyn> what is this 'time travel' issue of ftl
[17:32:29] <selwyn> ftl is distinct from closed timelike curves
[17:32:35] <pl> selwyn: tl;dr `c` is linked with causality and flow of information in universe. light speed is side effect of maximum speed of information propagation
[17:32:47] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[17:32:55] <pl> so the problem with FTL is that it breaks causality
[17:33:09] <selwyn> oh
[17:33:15] <pl> unless you create some very specific timelike curves :V
[17:33:29] <selwyn> ones that are not useful?
[17:34:01] <pl> selwyn: it works in very weird ways, but might make intersection of two different wormhole networks ... weird? Or impossible
[17:34:21] <pl> might be akin to having merge point between two separate parallel universes
[17:34:39] <selwyn> i see the argument regarding causality but i find it kind of weak
[17:35:01] <selwyn> entirely possible that ftl is possible, and in light of that we have to reassess our idea of what causality is
[17:35:20] <pl> let's say you go 1000ly from Earth in year 2400 using non-causality-breaking FTL. You arrive at the target in 3400, but you effectively have a tunnel back to earth that allows instant travel back there... to year 2400
[17:35:45] <pl> your light cone remains in sync with origin point
[17:36:24] <pl> but if you take another route to earth, you will arrive at minimum in year 4400
[17:36:52] <dave0> https://en.wikipedia.org/wiki/Variable_speed_of_light
[17:36:59] <pl> anyway, `c` is not about speed of light, but limit of information propagation
[17:37:39] <pl> dave0: reminds me of zones of thought
[17:37:52] <pl> which afaik turned out to be artificial system in the books
[17:38:22] <selwyn> well, c being the speed limit of information propagation is something that is observed, it is not axiomatic in any of our physical theories
[17:38:29] <pl> gilberth: https://www.renesas.com/us/en/products/memory-logic/multi-port-memory/asynchronous-dual-port-rams btw have full catalog
[17:39:11] <pl> selwyn: no, it's the other way around - c being axiomatic is what makes maxwell's laws and general relativity work, and also explains why light has this and not other speed
[17:39:40] <gilberth> pl: When I want to write and read the same address at the same time, the write is deferred says the data sheet. But I believe I shouldn't attempt that anyway.
[17:40:52] <pl> gilberth: well, the busy signal is there to help coordinate the "clients" 
[17:41:32] <selwyn> hm
[17:41:49] <pl> sorry, special, not general relativity
[17:41:52] <pl> but both are linked
[17:41:53] <selwyn> yeah i got that
[17:42:11] <gilberth> pl: Because I want a pipeline, I need to have my own "register busy" flags anyway to stall the pipeline when I need a register, which not yet has its value computed.
[17:42:35] <selwyn> c is certainly essential for special relativity, but it doesn't have the interpretation of propagation of information there
[17:43:17] <gilberth> And you can short circuit write-back, if the register written back is a register needed by the next and/or waiting instruction.
[17:43:22] <selwyn> or are you happy to assert that information propagation is set by lightcones 
[17:43:54] <selwyn> not that i would disagree with that, just trying to understand
[17:44:07] <pl> selwyn: lightcones are crucial for information propagation. I.e. information propagation is bounded by lightcones that form your observable universe
[17:44:27] <pl> then there's afaik entropy as information theoric aspect of universe, iirc
[17:45:27] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:45:51] <selwyn> i agree that lightcones=information propagation but would put it under the banner of 'conventional wisdom'
[17:46:27] <selwyn> in particular, the content is entirely classical, relating as it does to relativity and electromagnetism
[17:46:51] <selwyn> may have to be modified in light of quantum gravity
[17:49:30] <selwyn> as for entropy, it also is subtly connected to these matters, as the second law of thermodynamics is modified in the presence of black holes
[17:50:27] <pl> AFAIK (I'm not a physicist), modern high-end understanding of entropy is entirely information-theoretic
[17:50:35] <pl> especially due to blackholes
[17:51:11] <selwyn> yeah, thats the modern way to analyse them
[17:51:29] <selwyn> well
[17:54:15] <selwyn> entropy was already an information-theoretic concept, but black holes can be thought of as both thermodynamic objects and objects that appear to process information in a strange way
[17:55:14] <selwyn> you can take some information and put it inside a black hole, and the information seems to disappear, which is weird
[17:57:43] <selwyn> the paradox is somewhat resolved by thinking in information theoretic terms and considering black holes as thermodynamic objects
[17:57:59] <selwyn> so information theoretic entropy and thermodynamic entropy are treated on symmetric grounds iirc
[17:58:56] <selwyn> anyway, i have not thought much about causality prior to this conversation, but i would say there are some indications it would have to be revised in light of quantum gravity
[18:00:15] <selwyn> non-relativistic many-body quantum systems naturally have their own lightcones, and we can see that information can propagate outside of these, but in a manner that decays exponentially with distance from the light cone
[18:00:43] <selwyn> it reminds me a bit of tunneling
[19:00:48] <gilberth> Does the information really travel outside that light cone, or was it there all the time to begin with?
[19:01:33] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[19:01:41] * hayley discusses CSS generators.
[19:01:55] <hayley> "You can use frameworks." "I don't use frameworks."
[19:02:50] <hayley> "There are benefits to compiling pages" idk, unless org-mode counts? Or Scribble? But I get LaTeX out of the latter for dead tree format books too.
[19:06:47] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[19:10:18] *** Joins: lisp123 (~lisp123@143.238.171.43)
[19:11:29] <pl> gilberth: arguably what's outside of your light cone doesn't exist as far as you're concernedd
[19:12:23] *** Joins: notzmv (~zmv@user/notzmv)
[19:14:42] <gilberth> pl: That's a question of the definition of "exists". Does something cease to exist just because I can't know about its existence?
[19:15:08] <pl> gilberth: that's why I specified "as far as you're concerned"
[19:15:28] <selwyn> gilberth: the information propagates
[19:15:28] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 272 seconds)
[19:15:29] <pl> That thing is similarly unconcerned with your existence
[19:16:00] <gilberth> Yeah, this is like with undecidable problems. Just because I can't decide whether a statement is true or false, doesn't imply that it is neither.
[19:17:18] <gilberth> What happens, if something moves outside my light cone?
[19:17:47] <selwyn> hm
[19:18:09] <gilberth> I mean, I could assume it still exists.
[19:19:29] <gilberth> It may change state or form. But some things are preserved, aren't they? Are they?
[19:21:56] <selwyn> would respond that the universe ís unconcerned with where the observers and their light cones are
[19:22:26] <selwyn> it would be privileging an observer greatly to claim that things outside of their light cone don't exist
[19:24:36] <gilberth> What happens to gravity if a mass just disappears beyond my light cone? Say it was there a second ago, and now it's gone.
[19:26:42] <gilberth> For this to work the effect of gravity need to just approach zero at the very time the body is right at my light cone.
[19:30:18] <gilberth> I would expect the derivative of the gravitational pull be a continuous function. With respect to my time and perhaps with respect to distance. My calculus is pretty bad, but with constant velocity 1/r^2 won't do. It won't even get zero at my cone.
[19:32:03] <gilberth> But, when the reason that this thing escapes my light cone is expansion of the universe, the relative velocity isn't constant anymore.
[19:32:29] <gilberth> *Sigh* I ought to finish learning about general relativity.
[19:35:01] <selwyn> well, masses can't really disappear
[19:35:44] <gilberth> selwyn: No? Why not?
[19:36:25] <selwyn> how can a mass just disappear
[19:36:30] <selwyn> mass is conserved
[19:36:43] <selwyn> in that sense, it is not really a meaningful question
[19:37:16] <gilberth> Yes, that was the question I asked. Still bodies far away move outside the observable universe all the time. Or did I get that wrong?
[19:37:36] <selwyn> however: it is not possible to distinguish from the results of a local experiment whether there is a mass there or not
[19:38:00] <selwyn> uh
[19:38:49] <selwyn> well, both the observer and the mass are not at isolated points in spacetime, they exist on timelike curves
[19:38:51] <gilberth> selwyn: Well, a mass as an effect on my space, hasn't it? And I could measure that. The curvature that is. What do I miss?
[19:38:58] * selwyn is bad at relativity
[19:39:38] * gilberth is trying to learn relativity from a Susskind lecture he found on YT.
[19:40:12] <selwyn> gilberth: if the mass is too far away, then the effect won't be instantaneous
[19:40:51] <selwyn> i think it would be better to couch the discussion in terms of gravitational waves rather than masses
[19:41:12] <selwyn> since you can localise the source of a gravitational wave in time and space
[19:41:23] <selwyn> whereas you cannot do this for a point mass
[19:41:24] <gilberth> Yep, I believe so too.
[19:42:18] <selwyn> yes, so if you are spacelike separated (=outside the lightcone) from the source of a gravitational wave, it won't have reached you yet /will never be able to reach you
[19:42:55] <gilberth> selwyn: Simple questions: Do bodies far far away move outside our observable universe? Or is that popular science humbug?
[19:43:02] <selwyn> uh
[19:44:03] <selwyn> i am fairly sure that the universe =/= observable universe
[19:44:11] <selwyn> so there must be stuff that we can't see
[19:44:19] <gilberth> Yes.
[19:47:50] <gilberth> Anyhow, suppose a star nearby, which already moves away from me (modulo expansion). When exanpansion is considered it's speed measured as the distance to that star get's faster and faster. Light is red-shifted more and more. And perhaps red-shift so much has having infinite wave-length at the moment it escapes our light cone. Sth similar must happen to gravity.
[19:50:28] <selwyn> nothing special happens when you leave a light cone, it is only a useful description that we came up with and not a physical phenomenon
[19:50:37] <selwyn> you cannot observe someone's light cone for example
[19:50:54] <selwyn> certainly nothing exotic can happen like infinite red shift
[19:51:19] <gilberth> Sure. But I still would expect that I cannot learn anything about what is outside my light cone. No matter how hard I try.
[19:51:47] <selwyn> you can get phenomena like infinite red shift inside black holes near the singularity
[19:52:02] <selwyn> but they are always shielded by the event horizon, so we never get to see them
[19:52:15] <gilberth> selwyn: I meant mathematically. Infinite wave length would mean, no wave at all, no effect on me. I would assume that the measured red shift is a smooth function.
[19:52:35] <selwyn> its generally considered that infinite red shift is a sign that the theory of general relativity is breaking down
[19:52:48] <gilberth> oops
[19:53:32] <selwyn> relativity is elegant like that: it's said that it predicts its own demise
[19:53:45] <gilberth> Heh.
[19:53:52] <selwyn> but you never get to see it happen
[19:54:48] <selwyn> in reality, there is likely to be some very strange quantum weirdness at the singularity, that we don't know about yet
[19:56:33] <selwyn> or not: it is a semi respectable opinion that gravity is classical and can't be made quantum
[19:56:34] <ck_> ambitious use of 'yet'
[19:56:36] <ck_> :)
[19:57:15] <gilberth> Still, I would be surprised when I would measure a finite wavelength or non-zero frequency and all of sudden it becomes infinite. I would expect that the function would approach infinity.
[19:57:33] <selwyn> well, you can't measure an infinite anything
[19:58:05] <gilberth> I can measure the absence of light.
[19:58:33] <ck_> on what time frame
[19:58:48] <ck_> "that's the problem with randomness, you can never be sure"
[19:58:48] <gilberth> And then take the frequency, it would be zero then.
[20:00:37] *** Quits: jmiven (~vpm@pham.algeb.re) (Quit: reboot)
[20:01:23] *** Joins: jmiven (~vpm@pham.algeb.re)
[20:01:44] <gilberth> Measure voltage at some antenna. See how fast it changes. But sure, there must be a minimum voltage I could measure at all.
[20:06:27] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:06:57] <selwyn> if you have no light, that's zero amplitude
[20:07:29] *** Quits: dra (~dra@2a04:4540:640a:c500:7975:cd65:df3f:7b03) (Quit: Leaving)
[20:12:10] <gilberth> Yes, and one that doesn't change, and hence it's DC so to speak. Frequency is zero and wavelength is infinite.
[20:13:16] <gilberth> This is what I expect to measure from a star beyond the observable universe.
[20:13:56] <gilberth> Because would I measure something else, it would be observable. :)
[20:21:04] <shka> gilberth: not how his works
[20:21:35] <shka> observable universe is limited by age of the universe primarily 
[20:22:18] <shka> well, and the hubble's law
[20:31:09] <gilberth> Yes, but why is the age the limit? Just because no light had yet enough time to reach me.
[20:32:53] <gilberth> And all the documentaries I saw and articles I read suggest that there are stars that I can see today, but may not be able to see in the future.
[20:35:46] <shka> gilberth: few, perhaps
[20:36:13] <shka> but hubble's law means that eventually you won't be able to see anything but they milky way
[20:39:46] <gilberth> Yep. And I asked was how does the red shift look like I measure of light coming from a star looks like around the time it crosses the border between the observable and non-observable universe. I expect that function to be smooth and perhaps its derivative too, so it must approach infinite wavelength. I am just too bad at math that I could write down that function.
[20:41:22] * selwyn is really bad at cosmology
[20:41:23] <gilberth> Also I wonder which functions could do that at. Mathematically. Approaching a value upto some argument and then be constant.
[20:41:27] <selwyn> honestly i am a fake physicist
[20:41:47] <ck_> why?
[20:41:49] <gilberth> selwyn: Fake? I don't believe you.
[20:42:44] <selwyn> well, i am half serious
[20:42:52] <selwyn> i was a mathematician originally
[20:43:03] <selwyn> there are lots of areas of physics which i just don't know a lot about
[20:43:23] <ck_> I'm pretty sure that goes for a lot of physicists
[20:43:28] <selwyn> i suppose
[20:43:36] <ck_> or any specialty really
[20:43:47] <gilberth> What better science would there but mathematics to come to physics? CS doesn't seem to be a good fit.
[20:44:20] <ck_> quick aside, gilberth: I'm ordering some parts and still need a flux. can you recommend a brand or something?
[20:44:38] <selwyn> gilberth: well, complexity theory and information theory are increasingly useful in physics
[20:45:19] <gilberth> For flux? No sorry, I can't recommend any.
[20:45:54] <gilberth> selwyn: Yes, and this is why I decided to dig physics harder and more seriously.
[20:46:16] <ck_> ok thanks
[20:46:17] <selwyn> i see
[20:46:35] <gilberth> ck_: As somehow flux always was there. I never ordered any myself.
[20:47:24] <selwyn> the mathematics of black holes is extremely complicated, yet the results are often very simple to quote
[20:48:16] <selwyn> gilberth: the church turing thesis for instance is a statement about what physical systems are capable of
[20:48:25] <selwyn> hence it has physical content
[20:48:30] <gilberth> selwyn: This <https://www.youtube.com/watch?v=OBPpRqxY8Uw> got me hooked. I must know what's going on.
[20:48:31] -ixelp- Leonard Susskind | "ER = EPR" or "What's Behind the Horizons of Black Holes?" - 1 of 2 - YouTube
[20:48:40] <selwyn> ah yes
[20:49:12] <selwyn> einstein appearing on both sides of that equation
[20:49:39] <selwyn> is it the same rosen though?
[20:49:41] <ck_> I remember that lecture as well, it was what I meant when I said
[20:49:49] <gilberth> And Rosen.
[20:50:26] <ck_> "isn't it all a holographic projection on the boundary surface of a singularity anyway?"
[20:50:30] <gilberth> selwyn: I believe so. Would surprise me otherwise.
[20:50:41] <ck_> that was only january :o would've guessed much more time
[20:53:06] <gilberth> selwyn: <https://youtu.be/OBPpRqxY8Uw?t=266> "The R's on both sides are the same." he says.
[20:53:06] -ixelp- Leonard Susskind | "ER = EPR" or "What's Behind the Horizons of Black Holes?" - 1 of 2 - YouTube
[20:53:31] <selwyn> i can't watch it now but will check it otu
[20:54:02] <selwyn> there's also a hypothesis that electrons are charged black holes
[20:54:03] <gilberth> I just posted the time index.
[20:54:59] <selwyn> which i think is really cute
[20:55:00] <gilberth> Oops, black holes have charge?
[20:55:07] <selwyn> yes they can be charged!
[20:55:41] <selwyn> there is a theorem that states that in the long run, all black holes become characterised by only a small number of parameters
[20:55:45] <gilberth> Sure. But how does the electro-magnetic field escape?
[20:55:48] <selwyn> their charge, mass and angular momentum
[20:56:05] <gilberth> I see.
[20:56:19] <selwyn> well, because they are charged they source an electromagnetic field, just as they source a gravitational field due to their mass
[20:56:40] <gilberth> Ah! Yes, yes, of course.
[20:57:06] <selwyn> now, you can get a black hole whose charge is greater than its mass (wrt appropriate units)
[20:57:29] <selwyn> in such a case, particles of the same charge of the black hole are repelled by the black hole
[20:58:27] <shka> so the whole idea of electron black hole is that it can grow because of electrical charge?
[20:58:33] <shka> *can't
[20:59:24] <selwyn> well, that's one reason i like it
[21:00:15] <selwyn> iirc, if you posit a black hole with the same mass and charge as an electron, it ends up being one of these black holes with greater charge than mass, and is also quite small
[21:00:45] <selwyn> so its a tempting way to introduce general relativity into thinking about elementary particles
[21:01:14] <selwyn> problem: a black hole the size of an electron would radiate away instantly
[21:01:44] <selwyn> but that is according to classical general relativity
[21:07:19] <selwyn> shka: so how good are random forests
[21:07:47] <shka> selwyn: sometimes very good
[21:07:53] <shka> sometimes the best
[21:08:03] * ck_ .oO( <shka> good enough to predict where CTs go on de_dust2 )
[21:08:08] <selwyn> better than a dnn?
[21:08:16] <shka> depends on the data
[21:08:27] <pl> gilberth: if mass disappears beyond your light cone, you're unaffected
[21:08:48] <pl> in order to be affected, the light cones must intersect
[21:09:05] <shka> the thing with DNN is that there are variants for handling memory, convolutional layers are insanely important when dealing with image 
[21:09:35] <selwyn> yeah
[21:09:54] <shka> however, if your problem essentially comes out of the database, RF are insanely useful 
[21:10:35] <shka> partly because you are getting results without need for lengthy hyperparameters tune phase 
[21:10:41] <selwyn> i'm planning to use them to evaluate the utility function of various possible attacks
[21:10:46] <shka> and you don't need special hardware 
[21:10:48] <selwyn> shka: i hate tuning hyperparameters
[21:11:13] <shka> yeah, boring, and tedious 
[21:11:16] <shka> i feel ya
[21:11:50] <selwyn> i am not sure if the competition rules will let me use statistical-learning
[21:12:10] <shka> well, you won't have that much benefit from using it 
[21:12:29] <selwyn> i thought you had implemented decision tress
[21:12:41] <shka> i have as well
[21:12:51] <shka> you can pull tree and train it
[21:13:23] <shka> but those are decision trees mostly for use with forest
[21:13:36] <shka> so they don't attempt to be well fitted 
[21:14:16] <selwyn> uh
[21:14:27] <selwyn> well, a standard random forest is just what i want
[21:14:43] <selwyn> maybe one for regression rather than classification
[21:15:03] <shka> what you need is utility function, right?
[21:15:29] <shka> have you come up with some reasonable representation of the game state?
[21:15:38] <selwyn> i've got several in mind
[21:15:53] <selwyn> that could be reasonable
[21:16:19] <selwyn> as well as utility functions that could be reasonable
[21:17:06] <shka> good
[21:17:40] <shka> one of the problems you can have very often is that the game state is more or less unordered set
[21:18:18] <selwyn> yeah
[21:18:42] <shka> ML typically deals with vectors of floats
[21:18:53] <shka> but there are ways to handle even discrete sets
[21:19:28] <selwyn> i'm thinking of a one-hot representation
[21:19:50] <selwyn> because one of my representations involves giving a path as input
[21:20:27] <selwyn> a path from one side of the grid to the other
[21:21:35] <selwyn> sigh
[21:21:36] <shka> well,, those placing turret one grid cell left does matter?
[21:21:40] <shka> *is
[21:21:43] <shka> can't write
[21:21:44] <shka> lol
[21:22:09] <selwyn> it can matter a lot if you were to block the opponents path for example
[21:22:24] <shka> got it
[21:22:44] <selwyn> however, turrets are a static defence unit, and i deploy those using handcrafted heuristics
[21:22:53] <shka> this will make this kind of input poor fit for the random forest 
[21:23:04] <selwyn> the placement of attacking units is where i think rf can help out
[21:23:39] <shka> the issue with the random forest, is that it is random 
[21:23:41] *** Joins: treflip (~user@user/treflip)
[21:23:57] <shka> so it uses random subset of attributes for each tree
[21:24:00] <selwyn> yes
[21:24:24] <shka> this may become an issue if large portion of features is equally important
[21:25:21] <selwyn> i have some simplifying assumptions that would really cut down on the number of features, and hopefully make them more accessible to a rf
[21:25:31] <selwyn> would be a bit tedious to explain them in detail
[21:26:42] <shka> or just go with the unordered set approach and build trees by set element existance 
[21:27:06] <shka> which is a thing you can do using trees, and not something DNN would allow you 
[21:28:59] <shka> selwyn: you can split data by "has a turret of type Foo at X > [x] or Y > [y]"
[21:29:55] <selwyn> oh right
[21:30:10] <shka> that would reduce need for fancy feature engineering you would had to do otherwise 
[21:30:13] <selwyn> damn
[21:30:26] <shka> that's the charm of random forest
[21:30:26] <selwyn> this helps a lot
[21:30:37] <shka> they are flexible 
[21:30:38] <selwyn> it doesn't seem like they should work at all
[21:31:20] <shka> well, also remember that leafs may be refined 
[21:31:29] <shka> which is shockingly useful 
[21:32:41] <shka> and one idea i had recently, not test yet, is to use leafs refinement for sequence learning
[21:33:01] <shka> i had plans to try that this weekend but SC2 is addictive :(
[21:33:16] <shka> oh, one more thing
[21:33:34] <shka> selwyn: also, you can slightly BEND how random forest are random
[21:34:22] <shka> for instance by sampling poorly classified elements by the existing trees
[21:34:38] <shka> to iteratively grow trees  
[21:34:49] <shka> so the forest as a whole has a single target
[21:34:59] <selwyn> grow trees that perform better on worse data
[21:35:20] <selwyn> i mean, data that was poorly classified
[21:35:22] <selwyn> its smart
[21:35:42] <shka> more like: grow trees that perform better on data that existing trees can't handle 
[21:35:49] <selwyn> yes
[21:35:57] <shka> pruning, but before creating the tree
[21:36:07] <shka> so in the nutshell 
[21:36:17] <selwyn> how are the leaves refined? do you stop at a level dependent on the length of the sequence or sth
[21:36:26] <shka> RF are not all the rage right now, but they are really damn useful for real life problems
[21:37:48] <shka> selwyn: you build the forest, then draw samples, pull leafs for each datum in the sample, use regression to modify leafs as so they match datum better
[21:37:58] <shka> use learning rate, iterations etc.
[21:38:19] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Remote host closed the connection)
[21:38:35] <selwyn> return to hyperparameters
[21:38:44] <shka> yeah, a little bit
[21:39:08] <shka> but this time around you have limited number of hyperparameters so that's fine 
[21:39:13] <selwyn> well for the moment i should return to hand crafted heuristics
[21:39:22] <selwyn> but this is all very useful
[21:39:25] <shka> yeah
[21:39:42] <selwyn> i used differential evolution a lot for my research
[21:39:50] <selwyn> it has two hyperparameters which is a number that i like
[21:39:59] <shka> :D
[21:40:04] <shka> well, here you go
[21:40:55] <shka> anyway, i just want to say that RF thanks to those tricks can be often used for data that is problematic 
[21:41:20] <shka> and generally speaking, RF is a good thing to know
[21:42:00] <shka> and defaulting to neural network is stupid because neural networks are finicky 
[21:42:22] <shka> and personally i don't use them unless i really have to 
[21:42:50] <shka> anyway, got to go
[21:43:07] <selwyn> thanks for your help!
[21:43:30] <shka> nice to hear that my random ramblings are "help" :D
[21:49:13] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[22:08:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[22:10:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:13:16] <shka> https://www.youtube.com/watch?v=xYiGQzOw9fE have a good night tune
[22:13:16] -ixelp- Rammstein - Ohne Dich (Under Byen Remix)(Single Official) - YouTube
[22:36:11] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[22:44:15] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[22:44:37] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:00:53] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[23:02:52] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:06:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[23:07:56] *** Joins: aeth (~aeth@user/aeth)
[23:09:56] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:30:23] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[23:30:23] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[23:53:33] <edgar-rft> what is RFF
[23:54:05] <edgar-rft> umm, I meant what is RF?
[23:54:09] <selwyn> random forests
[23:54:55] <edgar-rft> ah, RFT is now random forest tchnician? :-)
[23:55:02] <selwyn> i've realised that all the scenarios i would use it for actually boil down to estimating the outcome of a given move
[23:55:28] <selwyn> but i can better estimate that simply by simulating the game
[23:55:33] <selwyn> and the rules are not so difficult
[23:55:56] <shka> selwyn: yes
[23:56:33] <selwyn> eventually, i want some kind of 'policy' mechanism that could be well served by some sort of learning algorithm
[23:57:01] <shka> the only limitation of the simulation approach is that you need to eventually stop the search of solution space
[23:57:17] <shka> and you need to establish the chance to win in that precise moment
[23:57:18] <selwyn> i have some solutions to that
[23:57:37] <shka> so that's when you could use ML, or just stick with heuristics
[23:57:37] <selwyn> i would choose from a small finite set of attacking options
[23:58:06] <shka> selwyn: yeah, i would do the same honestly 
[23:58:31] <shka> if you want to discuss random forests on other occasion let me know :D
[23:58:50] <selwyn> hm
[23:59:09] <selwyn> i still need some kind of policy evaluation
[23:59:40] <selwyn> as in, the simulator can assign scores to attacking options according to some utility function
[23:59:54] *** Joins: Oddity (~Oddity@user/oddity)
