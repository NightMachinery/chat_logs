[00:00:06] <no_gravity> bjs: Ok, but can that be avoided?
[00:00:12] <SnoopJ> (and `re` does take the optimizations indicated in that article when it can, its claims about Python are very out of date)
[00:00:54] <no_gravity> When trying to use "regex", I get this funky error: AttributeError: partially initialized module 'regex' has no attribute 'match' (most likely due to a circular import)
[00:01:09] <SnoopJ> no_gravity, it can be avoided in your timing measurement: don't time that part of the program. You do need to instrument each program to get an apples-to-apples comparison.
[00:01:10] <bjs> no_gravity: sounds like you have a file called regex.py
[00:01:48] <no_gravity> bjs: Oh! True ... the test itself is called "regex.py"
[00:02:12] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:02:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[00:02:15] <no_gravity> SnoopJ: "instrument each program"? What do you mean by that?
[00:02:29] <bjs> no_gravity: measure different bits of the program rather than the whole thing
[00:02:35] <dob1> in practice write(string + '\n') will add \r before \n if os is windows?
[00:02:43] <SnoopJ> no_gravity, put in code to start/stop an appropriate timer around the blocks you want to measure (i.e. you install measurement "instruments" into the code)
[00:02:52] <ChrisWarrick> dob1: if your file is opened in text mode, yes
[00:02:54] *** Joins: wyclif (~wyclif@user/wyclif)
[00:03:24] <no_gravity> bjs, SnoopJ: Since avoiding the regex.match() call lowers the time by 90% it seems pretty clear that it is taking the time.
[00:03:28] <SnoopJ> in python that's as simple as `start = time.perf_counter(); my_code(); end = time.perf_counter(); print(f"Execution took {end-start:.3e} seconds")`
[00:03:51] <no_gravity> Now I am getting this: ModuleNotFoundError: No module named 'regex'
[00:04:15] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 265 seconds)
[00:04:15] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[00:05:03] <no_gravity> Ok, installed it ...
[00:05:04] <bjs> dob1: you can pass newline="" to open() to disable this behaviour
[00:05:20] <dob1> ChrisWarrick, it's openend in "w" or "a" mode
[00:05:37] <no_gravity> bjs, SnoopJ: Holy moly, "regex" seems even slower ... been running for a while now ...
[00:05:56] <no_gravity> bjs, SnoopJ: Holy cow! "regex" is more than twice as slow as "re".
[00:06:01] <bjs> dob1: those are both text mode.
[00:06:03] <SnoopJ> no_gravity, if "seems" is the basis upon which you intend to rest your investigation, I don't have much more to say about this.
[00:06:14] <bjs> no_gravity: for your one regex yeah maybe,  it's not exactly a very rock solid benchmark
[00:06:52] <bjs> it's a very simple actually-regular expression that doesn't exercise many of the features or any of the unicode support and probably spends a lot of time doing other stuff than the actual matching logic
[00:06:56] *** Joins: MaxFury (~MaxFury@139.5.251.79)
[00:06:58] <bjs> it's hard to say what's actually happening
[00:07:03] <SnoopJ> certainly possible that it's slower and switching the lib should at least indicate the relative performance in Python
[00:07:05] *** Parts: MaxFury (~MaxFury@139.5.251.79) ()
[00:07:23] <no_gravity> bjs: I am pretty sure it is representative enough to draw conclusions.
[00:07:23] *** Parts: ubh (~ubh@2001:470:69fc:105::852) ()
[00:07:28] <dob1> bjs, ChrisWarrick thanks
[00:07:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[00:07:38] *** Quits: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net) (Ping timeout: 265 seconds)
[00:07:38] <bjs> no_gravity: well apart from the fact it's clearly not, sure
[00:07:45] *** jarthur_ is now known as jarthur
[00:07:45] <SnoopJ> you do seem sure
[00:08:25] *** Joins: wyclif (~wyclif@user/wyclif)
[00:09:25] *** Quits: tachoknight (~tachoknig@45.20.162.1) (Quit: Some random bits)
[00:09:41] <no_gravity> So far I have a good impression of Python. But the performance is worrying me. I run into a factor of 10 every now and then.
[00:09:52] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[00:09:58] *** Joins: finsternis (~X@23.226.237.192)
[00:10:00] *** Joins: Socra (~Socra@206.217.216.27)
[00:10:06] <no_gravity> So far I was able to code up my own stack to avoid it. Like with replacing BS4 with my own layer on top of lwml.
[00:10:25] <no_gravity> But having to use a 10x slower regex engine feels somewhat like a show stopper.
[00:10:41] *** Quits: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il) (Quit: Konversation terminated!)
[00:10:50] <bjs> no_gravity: like I keep saying,  it's hard to even know *what* part is slow here
[00:11:02] *** Joins: shailangsa (~shailangs@host86-186-196-233.range86-186.btcentralplus.com)
[00:11:16] <Byteflux> They've done the same thing in the PHP channel, benchmarked the entire program while claiming to benchmark a specific thing.
[00:11:29] <Byteflux> If you're going to benchmark a feature, you should learn how to benchmark first.
[00:11:50] <bjs> no_gravity: you have an incredibly simple (actually _regular_ for a change) expression, and are testing it on strings of length 6.  This is not exactly going to be putting the matching logic through its paces
[00:12:00] <bjs> you're going to be getting a *lot* of random Python infrastructure in these benchmarks
[00:13:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:13:38] <no_gravity> bjs: If you like to suggest a test, I will benchmark it. From what I have seen so far, I am very sure Pythons "re" is multiple times slower then PHPs regex functions.
[00:13:55] *** Joins: wyclif (~wyclif@user/wyclif)
[00:14:20] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Read error: Connection reset by peer)
[00:14:24] <SnoopJ> `start = time.perf_counter(); re.whatever(); end = time.perf_counter(); print(f"Regex execution took {end-start:.3e} seconds")`
[00:14:50] *** Joins: jpcanepa (~jp@186.67.234.170)
[00:14:51] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[00:15:29] <SnoopJ> more sophisticated tools: the `timeit` module (useful for avoiding shot noise), `line_profiler` and other profiling tools that show you time-per-line.
[00:15:36] *** Quits: jpcanepa (~jp@186.67.234.170) (Client Quit)
[00:15:53] *** Joins: jpcanepa (~jpcanepa@2800:300:62b1:a600::c)
[00:16:20] <bjs> no_gravity: well, try much bigger strings and more realistic regexes and then only time the actual match() call,  that's if you -actually- care about the regex engine
[00:16:20] <SnoopJ> for the comparison here, perf_counter() is good enough. Dunno what the PHP equivalent is, presumably it has basic timers.
[00:16:23] <bjs> and not the other cruft.
[00:18:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:19:01] *** Joins: pnoud (~pnoud@user/pnoud)
[00:19:25] *** Joins: wyclif (~wyclif@user/wyclif)
[00:19:30] *** Joins: Akuli (~Akuli@213.216.211.211)
[00:19:55] <Byteflux> PHP has hrtime() for high-resolution timing which should be similar to perf_counter() in Python.
[00:20:58] <SnoopJ> anything monotonic will do in this case
[00:20:59] *** Parts: CodenameTim (~CodenameT@154.21.28.53) ()
[00:21:14] <Byteflux> Yep.
[00:21:23] * octav1a returns, if that was desired information
[00:21:36] <SnoopJ> octav1a, that's a very weird hang indeed
[00:21:49] <octav1a> SnoopJ: you were able to reproduce?
[00:21:51] <bjs> octav1a: I tried moving just the SharedMemory thing in and out of the function,  that seemed to give something semi-consistent
[00:21:53] <bjs> yes
[00:21:54] <octav1a> If it bug remote time? >.>
[00:21:58] <octav1a> Is it*
[00:22:03] <caveman> nedbat: i solved my problem by formatstring.split('{KEYFILE}'), then joined it by values['KEYFILE'].join(splitted_parts).
[00:22:04] *** Joins: jay-m126_ (~jay-m@129.0.204.218)
[00:22:11] <bjs> octav1a: you can't call it a bug until you know what caused it :P
[00:22:15] <bjs> I don't know what's happening yet
[00:22:25] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::791f) (Quit: Konversation terminated!)
[00:22:32] <caveman> nedbat: each part that i split i *.encode('utf-8').
[00:22:41] <octav1a> crazy.
[00:22:51] <octav1a> I feel like this usage isn't _that_ odd...
[00:23:05] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[00:23:46] <SnoopJ> octav1a, bjs, yes, I can reproduce too. Using getSequence() seems to produce arrays that have different .data addresses in memory: https://bpa.st/CVDA
[00:24:02] <SnoopJ> I don't know why, but that seems telling
[00:24:02] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[00:24:12] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[00:24:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[00:24:42] *** Quits: Celeo (~Celeo@user/celeo) (Ping timeout: 240 seconds)
[00:24:57] *** Joins: wyclif (~wyclif@user/wyclif)
[00:24:58] <SnoopJ> that's the result of adding shared.data to the corresponding print()
[00:25:08] *** Joins: djapo (~archangel@user/djapo)
[00:26:40] <no_gravity> Overall, Python is really slow. I did a bunch of benchmarks now. BS4 and "re" are extremes. But most basic operations seem to take 5x more time than in PHP. I wonder why. After all those years shouldn't basic operations have reached similar performance in all language implementations?
[00:26:52] <octav1a> What is shared.data supposed to contain?
[00:27:10] <SnoopJ> octav1a, I'm just printing it to see what the underlying data of the ndarray struct is
[00:27:36] <SnoopJ> I made some other changes to the script under execution there, but I just double-checked, it does the same thing in an unmodified form of your sample (aside from adding the print)
[00:28:03] <nedbat> caveman: why not just .replace("{KEYFILE}", values["KEYFILE"])  ?
[00:28:08] <octav1a> okay. I'm just not too familiar with how python shared memory is actually implemented.
[00:28:37] <octav1a> Like, I usually don't expect the object memory to ever be the same on two different processes, I would have thought there was some kind of weird way it was looked up at runtime.
[00:28:39] <caveman> nedbat: because i the value itself might be unfortunate to have other replace strings in it by coincidence.
[00:28:41] <nedbat> no_gravity: there's no global federation that will make language implementations similar.
[00:28:48] <SnoopJ> octav1a, I'm not either, but the fact that it's exactly the same address in the non-hanging case, and different for each worker in the hanging case strikes me as suspicious
[00:29:02] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[00:29:05] <octav1a> Ahh, I see.
[00:29:06] <caveman> nedbat: the format string is like "{STUFF}{KEYFILE}{STUFF2}
[00:29:26] <nedbat> caveman: ok, i'm glad you got it solved.
[00:29:29] <SnoopJ> no_gravity, if the ruler by which you will measure performance is "seems clear to me," the answer to your question is "no"
[00:29:34] <caveman> nedbat: is there an easier way?  :-p
[00:29:37] <Byteflux> no_gravity: Hard to take your question seriously without being able to see your tests. You've already initially demonstrated that you didn't perform isolated benchmarks.
[00:29:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:29:58] <no_gravity> nedbat: Well, the benefit of faster execution usually makes languages progress in performance. PHP and JS are pretty much head-2-head all the time.
[00:30:03] <nedbat> caveman: i can't think about it in detail now, but I think the .replace is the same as split then join. But i'd have to see the code to know.
[00:30:14] <nedbat> no_gravity: everyone agrees that faster is better.
[00:30:22] *** Joins: tachoknight (~tachoknig@45.20.162.1)
[00:30:27] *** Joins: wyclif (~wyclif@user/wyclif)
[00:30:35] <bjs> no_gravity: it's not hard to see why,  Python doesn't really push for a performant implementation very strongly
[00:30:41] <nedbat> no_gravity: but it's not the only consideration. Python wouldn't be where it is today if it were the only consideration.
[00:31:00] <SnoopJ> n.b. that `re` is not written in Python *anyway*, but
[00:31:14] <bjs> SnoopJ: I said performant implementation :)
[00:31:31] <Byteflux> There's also PyPy if you *need* the performance, though of course it trails behind CPython.
[00:31:49] <SnoopJ> bjs, I was responding more to the broader theme of "this means Python is a slow language." If `re` is slower, it's not the Python language's fault :)
[00:31:57] <SnoopJ> (probably)
[00:32:04] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[00:32:07] *** Joins: syb0rg (~syb0rg@184.170.242.152)
[00:32:08] <bjs> Even the stuff that happens in C is not always geared towards being as fast as possible, although regex libraries don't have too much difference in them and for such a simple regex I'd be surprised if the actual code doing the match was actually 10x slower
[00:32:13] <nedbat> no_gravity: also, btw, there is yet another effort underway to improve python's performance.
[00:32:18] *** Quits: Namigator (~nami@user/namigator) (Ping timeout: 240 seconds)
[00:32:20] <bjs> there has to be some general Python "slowness" going on
[00:32:22] <no_gravity> Byteflux: I dabbled with PyPy for a while. The benchmarks run faster. But there is not enough adoption out there for PyPy in a server environment for me to go that route.
[00:32:26] <nedbat> no_gravity: did you share the re test you were using to compare PHP and Python?
[00:32:33] *** Quits: emika (~emika@83.136.182.55) (Ping timeout: 255 seconds)
[00:32:35] <bjs> nedbat: it was https://pastebin.com/raw/eGgWuEiu
[00:32:37] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 245 seconds)
[00:32:40] <nedbat> no_gravity: why do you need others running PyPy for you to run PyPy?
[00:32:41] <SnoopJ> whole-program time
[00:32:44] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 255 seconds)
[00:32:46] <Byteflux> Right, these tests are *broken*
[00:32:48] <no_gravity> nedbat: Yes ^
[00:32:50] <Byteflux> They test the entire runtime
[00:32:55] <meejah> no_gravity: what do you mean by "adoption"?
[00:33:02] <nedbat> no_gravity: i asked *why* you need?
[00:33:03] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[00:33:04] *** Joins: emika (~emika@185.207.249.33)
[00:33:16] <no_gravity> meejah: I found nobody so far doing it in production.
[00:33:23] <meejah> no_gravity: I do
[00:33:28] <bjs> Byteflux: it's a valid test, just not timing what no_gravity said it was.  Both total program wall-clock and actual performance counts for individual parts are useful.
[00:33:30] <meejah> no_gravity: ...but, why does that matter?
[00:33:36] <no_gravity> meejah: Do you run a Django application with it?
[00:33:41] <Byteflux> PHP is specifically optimized for faster startup
[00:33:48] <nedbat> no_gravity: is your django application compute-bound?
[00:33:51] <meejah> no_gravity: usually Twisted applications
[00:33:54] *** Quits: y1n (~y1n@84-115-65-229.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[00:34:05] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[00:34:17] <SnoopJ> yea, it's a valid test, it just tests not-the-conclusion
[00:34:42] <Byteflux> It's not a valid test of "which regex is faster" even if PHP's is faster.
[00:35:04] <deniska> "Other people don't put it in production" never stopped me from putting weird things in production :D
[00:35:16] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 256 seconds)
[00:35:22] <no_gravity> I have written 6 such end-2-end tests now, testing various aspects of the language. Python is slower in every one of them. Between 2 and 10 times.
[00:35:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[00:35:55] <Byteflux> PHP internally also compiles that pattern, is Python doing the same?
[00:35:57] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 258 seconds)
[00:35:57] <meejah> no_gravity: you mean CPython?
[00:35:58] *** Joins: wyclif (~wyclif@user/wyclif)
[00:36:02] <SnoopJ> octav1a, bjs hmm so looking at .buf on the SharedMemory instance, in the hanging case, it's a different buffer every time (which I guess means it's copying?)
[00:36:04] <Byteflux> Compiles and re-uses, I mean.
[00:36:09] <bjs> no_gravity: it compiles it each time you call match
[00:36:15] <bjs> no_gravity: that's why re has re.compile
[00:36:38] <Byteflux> PHP is caching the compiled pattern and reusing it, I suspect you should be manually compiling the pattern in Python with re.compile()
[00:36:53] <SnoopJ> Byteflux, `re` caches transparently for you
[00:36:54] <deniska> re caches latest used patterns
[00:36:57] <no_gravity> bjs: In the real world, you usually deal with each regex only once per request.
[00:37:17] <bjs> no_gravity: surely in the real world you have the same regex that you use many times over?
[00:37:21] <SnoopJ> (but you should still hold the compile()d result if you're not willing to *ever* be evicted from the cache)
[00:37:23] <nedbat> bjs: re caches internally
[00:37:37] <octav1a> SnoopJ: that's what it feels like... however I see if you make the initial data size only 200 in shape, it still hangs.
[00:37:50] <bjs> nedbat: for interned strings or all?
[00:37:50] <nedbat> no_gravity: is your django application compute-bound?
[00:37:54] <nedbat> bjs: for all
[00:37:54] <octav1a> So this means to me that it's not waiting for a copy that is causing the hang.
[00:38:04] <no_gravity> bjs: The more typical use case is that only unique regexes get executed when answering a request.
[00:38:04] <meejah> no_gravity: p.s. i believe you can use PyPy's toolchain to JIT PHP as well
[00:38:07] <octav1a> Something is simply deadlocked.
[00:38:22] <nedbat> no_gravity: that doesn't sound typical.  where are your regexes coming from?
[00:38:26] <bjs> no_gravity: that doesn't sound typical at all?
[00:38:26] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[00:38:26] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Quit: Leaving)
[00:38:55] *** Quits: tachoknight (~tachoknig@45.20.162.1) (Quit: Some random bits)
[00:38:56] <SnoopJ> octav1a, yea, it does seem that way. It could be that these different addresses in each process's virtual memory space point to the same place in physical memory? At any rate, it doesn't take a long time to *get* the buffer.
[00:39:05] <Byteflux> It may be typical in the sense that in PHP the application is created and destroyed on every request.
[00:39:18] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[00:39:26] <Byteflux> It's not actively running, waiting to serve requests.
[00:39:32] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[00:39:33] <octav1a> SnoopJ: that is ...what we want from shared memory, no?
[00:39:47] <octav1a> Do you think the OS is doing something to block it in some situations?
[00:39:49] <nedbat> no_gravity: maybe you should let us know now if you can tell us more about your application.
[00:40:25] <SnoopJ> octav1a, our first-order concern is that there isn't a copy in physical memory. It won't harm performance to do some vmem juggling, I think? Not the same order, anyway.
[00:40:31] <octav1a> I still can't imagine why using a function is the cause of the difference though.
[00:40:39] <SnoopJ> like I said, I agree, this is weird :)
[00:40:48] <octav1a> :3
[00:41:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[00:41:11] * octav1a takes some small slice of happiness that she's for once not the crazy one. 
[00:41:28] *** Joins: wyclif (~wyclif@user/wyclif)
[00:41:40] <no_gravity> I tried pre-compiling the regex now. It brings down the execution time by 50%.
[00:41:52] <octav1a> I'm happy to try posting this around to some places in the meantime and just ruining DRY would save me for now...
[00:41:54] <nedbat> no_gravity: is your django application compute-bound?
[00:42:03] *** Quits: Barones (~Barones@2804:48dc:8500:0:14c8:a0:c616:44e1) (Quit: Leaving)
[00:42:24] <Byteflux> PHP does store precompiled bytecode in shared memory too, which affects performance.
[00:42:36] <Byteflux> Is Python doing this or does it has to be told to do it?
[00:44:24] <nedbat> no_gravity: to me, that means you are dealing with a very very fast regex. the compiled regex is cached.
[00:44:33] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[00:44:44] <nedbat> Byteflux: Python is not sharing memory with previous executions.
[00:44:51] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[00:44:58] <bjs> octav1a: SnoopJ: wait, so your create_shared_block puts quite a lot (including the entire SharedMemory object) onto `self`
[00:45:05] <bjs> which then gets thrown over to the other Process
[00:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[00:45:21] <SnoopJ> bjs, I tried a spelling that elided this (it stored only the shm's name and rehydrated it), didn't resolve
[00:45:42] <SnoopJ> not sure if that also ends up in this weird distinct .buf addresses case though...
[00:45:45] *** Joins: djapo (~archangel@user/djapo)
[00:45:46] <nedbat> no_gravity: since PHP is clearly faster for your application, why are you looking into Python?
[00:45:47] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 255 seconds)
[00:46:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[00:46:43] <octav1a> bjs: there is a conditional there that only the MainProcess creates the block, and then the only thing stored in self is the shm reference.
[00:46:56] <octav1a> I don't think the shm reference has the whole buffer embedded in it.
[00:46:58] *** Joins: wyclif (~wyclif@user/wyclif)
[00:47:04] *** Joins: deivislk (~deivislk@189.7.117.212)
[00:47:16] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[00:47:16] *** Quits: Yasumoto (~Yasumoto@ec2-34-212-228-153.us-west-2.compute.amazonaws.com) (Remote host closed the connection)
[00:47:31] *** Joins: Elon_Satoshi (~elonsatos@46.102.153.243)
[00:47:32] *** Joins: traptrip (trip@brigaid.xs4all.nl)
[00:47:33] <no_gravity> nedbat: As for "compute-bound": Yes. In my experience a well rounded web application is spending a good amount of CPU in the application. Only sloppy designed DBs make the application wait all the time.
[00:47:43] <octav1a> Do you think it needs to be broken out so that only the array type, size, and name is passed instead of the shm object?
[00:47:48] <nedbat> no_gravity: then you should try PyPy.
[00:48:13] <no_gravity> nedbat: Python has way better code-reuse mechanisms (AKA modules) than PHP. That is why I am looking into Python.
[00:48:29] <no_gravity> nedbat: PyPy has too little adoption in web environments for me to consider it.
[00:48:46] <Byteflux> What do you mean "too little adoption?"
[00:48:49] <Byteflux> PyPy is a drop-in replacement.
[00:48:55] <Byteflux> You drop it in place of Python and stuff just works.
[00:49:02] *** Quits: p-i- (~Ohmu@node-hb1.pool-118-173.dynamic.totinternet.net) (Quit: Leaving...)
[00:49:29] <no_gravity> Byteflux: That is not what I hear around the web. I found nobody who "dropped" PyPy into their Django stack and kept it there.
[00:49:41] <nedbat> no_gravity: why didn't they keep it?
[00:50:07] <Byteflux> There may be outliers with C extensions, perhaps, but for the most part it's drop-in. Can you name specific examples?
[00:50:10] <no_gravity> nedbat: I dunno.
[00:50:24] <nedbat> no_gravity: perhaps they had sloppy designed DBs :)
[00:50:51] <no_gravity> One *big* reason that I still remember hearing is that PyPy does not work with Apache.
[00:51:19] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[00:51:20] <nedbat> no_gravity: i don't see why that would be
[00:51:44] <dstufft> I assume it doesn't work OOTB with mod-wsgi or something
[00:51:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[00:51:56] <dstufft> most people I know have been using dedicated wsgi servers though tbh
[00:52:08] <no_gravity> If PyPy would only have upsides, why would CPythin still be around?
[00:52:19] <dstufft> PyPy dosen't only have upsides
[00:52:28] *** Joins: wyclif (~wyclif@user/wyclif)
[00:52:39] <Byteflux> PyPy focuses on performance and lags behind CPython development
[00:52:47] <dstufft> since it's a JIT, it has a slower start up, which makes it much less useful for short lived applications
[00:52:51] <nedbat> no_gravity: and C extensions might not be compatible with PyPy
[00:54:09] *** Quits: sid-maddy (~sid-maddy@103.76.57.169) (Ping timeout: 255 seconds)
[00:54:45] <Byteflux> CPython does not have that same focus on performance. PyPy's currently compatible with up to Python 3.7 so not ideal if you want 3.8/3.9
[00:55:29] <no_gravity> Funny, PyPy executes the regex benchmark 80% faster than CPython.
[00:55:37] <no_gravity> I wonder how that can be.
[00:55:52] <nedbat> no_gravity: your benchmark is more about function call times than regex times I think.
[00:56:00] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[00:56:26] <no_gravity> nedbat: Then why does leaving out the "if re.match()" increase the performance by 90%? All the calls are still in place.
[00:56:51] <nedbat> no_gravity: are you taking out the re.match() when you do that? That's a function call, which makes function calls...
[00:57:05] *** Joins: nmoura (~nmoura@177.192.16.58)
[00:57:16] *** Joins: NiKaN (sid385034@id-385034.brockwell.irccloud.com)
[00:57:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[00:57:22] <no_gravity> nedbat: I would think "re.match()" goes into some non-python code?
[00:57:36] <no_gravity> So why would PyPy increase its performance?
[00:57:38] <nedbat> no_gravity: re.match is implemented in Python, and eventually calls C code.
[00:57:39] *** Joins: Gaming4JC (~user@user/gaming4jc)
[00:57:44] <nedbat> no_gravity: don't guess about these things.
[00:57:47] *** Joins: Yasumoto (~Yasumoto@ec2-34-212-228-153.us-west-2.compute.amazonaws.com)
[00:57:59] *** Joins: wyclif (~wyclif@user/wyclif)
[00:58:12] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 255 seconds)
[00:58:12] <nedbat> no_gravity: one re.match calls re._compile (also in Python), which checks the compiled regex cache.
[00:58:14] <bjs> octav1a: oh I think what's happening is that you use the buffer from the SharedMemory object,  but then the SharedMemory object gets GC'd before you use it
[00:58:22] <SnoopJ> octav1a, bjs, aha, intersting, it looks like on POSIX at least this is using /dev/shm. Looking at lsof, both of these programs utilize the same file therein.
[00:58:27] <nedbat> no_gravity: the reason pre-compiling was faster was because you skipped one of the Python function calls.
[00:58:28] <bjs> octav1a: whereas in the other version, the SharedMemory object lives as long as the buffer
[00:58:46] <SnoopJ> I'm wondering if SharedMemoryManager exists in part precisely to avoid an issue like this
[00:58:47] <dob1> sorry I still have some doubts about writing to a file and line separator: text = '\r\n'.join(some_list) + '\r\n'    with open(file, 'w') as f:    f.write(text)     still puts 2 \r  why?
[00:58:57] <nedbat> no_gravity: it's really easy to mislead yourself when measuring performance.
[00:59:00] <no_gravity> nedbat: pre-compiling had much less of an effect than using pypy. pypy without precompiling is 2x faster then cpython with precompiling.
[00:59:01] <habnabit_> dob1, windows?
[00:59:05] <dob1> habnabit_, yes
[00:59:15] <nedbat> no_gravity: right, because pypy is faster at calling python functions.
[00:59:23] <nedbat> no_gravity: which is what your benchmark mostly measures.
[00:59:26] <habnabit_> dob1, windows is funny about line endings. trying to remember how to tell python to override windows..
[00:59:51] <habnabit_> dob1, open(file, 'w', newline='') i think
[00:59:51] <bjs> SnoopJ: octav1a: try `del existing_shm` after the `shared = ...` line in getSequenceIsolated.
[00:59:59] <dob1> habnabit_, but I am passing a string to write, I just had an example about this but I was writing it line by line
[01:00:02] <no_gravity> I feel more compelled going the route of "pypy for everything" now.
[01:00:18] <habnabit_> dob1, yes. and on windows \n is turned into \r\n
[01:00:25] <habnabit_> dob1, so \r\n is turned into \r\r\n
[01:00:30] <octav1a> bjs: how is it valid for shm to be GC while there are still references to it?
[01:00:42] *** Joins: sid-maddy (~sid-maddy@2405:204:30e:6745::d81:98ac)
[01:00:48] <bjs> octav1a: there isn't a reference, you have a reference to the memoryview object not the SharedMemory object anymore
[01:00:53] <habnabit_> dob1, so your options are: don't write \r, open the file in 'wb' mode, or open it with newline=''
[01:01:02] <SnoopJ> bjs, there isn't an existing_shm in the one that hangs though :/
[01:01:10] <bjs> SnoopJ: exactly!
[01:01:14] <dob1> habnabit_, on mac it will write only \r ?
[01:01:18] <habnabit_> dob1, writing just \n will add the \r on windows, unless you want the behavior to be the same on all OSes
[01:01:28] <habnabit_> dob1, no, macosx and unix both use only \n
[01:01:33] <bjs> SnoopJ: it only existed transiently in the other function, and when the function returned it got cleaned up, and the actual shared memory buffer got released
[01:01:48] *** Quits: audiocat (~audio@2603-8081-1800-00ad-791c-8967-7040-5249.res6.spectrum.com) (Ping timeout: 255 seconds)
[01:01:50] <SnoopJ> bjs, oh, you're saying that will make the non-hanging one hang?
[01:01:52] <bjs> all the numpy array hung onto was a reference to what *was* a shared memory buffer
[01:01:54] <bjs> SnoopJ: yes.
[01:02:04] <SnoopJ> bjs, octav1a, confirmed!
[01:02:08] <SnoopJ> Well spotted :)
[01:02:11] <no_gravity> Ok, tried pypy on a real world project and it died on line 3 \o/. The line is: "print('Reading .. ', end='')". The error is: "SyntaxError: invalid syntax (expected ')')". What's going on?
[01:02:13] <dob1> habnabit_, sorry if I insist, this is python thing to make code portable and don't worry about line separator?
[01:02:25] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c)
[01:02:28] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 256 seconds)
[01:02:36] <bjs> no_gravity: probably you're trying to use python2 rather than 3
[01:02:39] <bjs> or pypy3
[01:02:43] <habnabit_> dob1, well.. do you want the file to contain \r\n on all OSes or only on windows?
[01:02:46] <octav1a> So how do I keep that in scope? Use a instance variable for all of the shm's ?
[01:02:48] <SnoopJ> octav1a, I think using SharedMemoryManager will alleviate the headache here
[01:02:53] <no_gravity> bjs: Oh! So I did my benchmark with pypy2 too. Lets see how it behaves under pypy3...
[01:02:54] <nedbat> no_gravity: you want pypy3
[01:03:08] <no_gravity> nedbat: Yeah
[01:03:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[01:03:14] <dob1> habnabit_, I want to be sure it has the right file separator on every system
[01:03:29] <habnabit_> dob1, then open it in 'w' mode and write only \n
[01:03:30] *** Joins: wyclif (~wyclif@user/wyclif)
[01:03:34] <no_gravity> pypy3 gives me this error: "ImportError: cannot import name 'etree'"
[01:03:38] <habnabit_> dob1, windows will get the \r added
[01:03:42] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[01:03:43] <dob1> habnabit_, ok, thanks
[01:03:57] <Byteflux> If you do `python3 test.py` does this compile and store the bytecode anywhere?
[01:04:09] <habnabit_> Byteflux, compile, yes. store, no
[01:04:29] <Byteflux> Probably no_gravity should be doing this manually then to compare fairly with PHP.
[01:04:54] <no_gravity> Why can't pypy import "etree" while cpython can?
[01:05:04] <bjs> no_gravity: what is "etree" ?
[01:05:09] <Byteflux> `python3 -m py_compile test.py` seems to do it
[01:05:20] <SnoopJ> no_gravity, they don't share modules
[01:05:26] <bjs> no_gravity: https://docs.python.org/3/library/ doesn't have an "etree" module, did you install something?
[01:05:30] <habnabit_> Byteflux, sure, or `python -c 'import test'`
[01:05:31] <nedbat> Byteflux: imported modules get bytecode saved, but the main program doesn't
[01:05:41] <no_gravity> bjs: Looks like something imported by lxml. The line above the error is this: File "/usr/lib/python3/dist-packages/lxml/cssselect.py", line 11, in <module> from . import etree
[01:05:41] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[01:05:53] <Byteflux> Yeah, I assume their main test program isn't being run from precompiled bytecode.
[01:06:02] <SnoopJ> dist-packages strikes again :(
[01:06:10] <habnabit_> Byteflux, it's a miniscule amount of overhead
[01:06:11] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[01:06:16] <bjs> no_gravity: python3?  shouldn't that be some pypy3/ path or something
[01:06:21] <bjs> something looks odd about that
[01:06:22] <habnabit_> Byteflux, and only incurred on startup
[01:06:42] <no_gravity> bjs: I don't know. I just did "apt install pypyp3" and tried to pypy3 my application.
[01:06:42] <SnoopJ> bjs, my guess is that they installed it using python3-lxml
[01:06:44] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[01:07:09] <SnoopJ> does the pypy3 package use dist-packages? :/
[01:07:10] <bjs> SnoopJ: but why is pypy3 looking in /usr/lib/python3/.../   I thought it was supposed to have its own paths
[01:07:12] *** Quits: sid-maddy (~sid-maddy@2405:204:30e:6745::d81:98ac) (Quit: Quit)
[01:07:20] <SnoopJ> bjs, guessing "because Debian" here
[01:07:21] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:07:29] <no_gravity> SnoopJ: Yup, it is all Debian based.
[01:07:34] <SnoopJ> no_gravity, did you install pypy using apt?
[01:07:38] <bjs> why is debian so... debian
[01:07:38] <no_gravity> SnoopJ: Yes
[01:07:39] *** Quits: marduk (~marduk@216.243.54.166) (Remote host closed the connection)
[01:08:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:08:35] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Quit: Default quit message is difficult to set. If you don't see me returning, ask me? You will find me, if you want to)
[01:08:51] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Client Quit)
[01:09:00] *** Joins: wyclif (~wyclif@user/wyclif)
[01:09:14] <SnoopJ> bjs, I admire the ideology of the policies, but not the documentation. It's hard to suss out exactly what is (was?) being vendored with pip that tasted yucky.
[01:09:24] <Byteflux> no_gravity: Did you run your original 're' benchmark in Python 2 or 3? Because that would make a huge difference in range()
[01:09:33] *** Joins: Celeo (~Celeo@user/celeo)
[01:09:38] <no_gravity> Byteflux: Original was in Python3
[01:09:58] <no_gravity> So how do I get the debian version of pypy3-etree? Does it even exist?
[01:09:58] *** Quits: Celeo (~Celeo@user/celeo) (Client Quit)
[01:10:34] <SnoopJ> no_gravity, you have the Debian version of python3-lxml, and that might be the problem, because it may not be compatible with Debian's pypy package.
[01:10:37] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[01:10:48] <bjs> Byteflux: the benchmark wasn't very good but the re module is probably slow. Maybe not 10x slower than the PHP benchmark but it's not inconceivable it's a few multiples slower given the rather ridiculously tiny benchmark
[01:10:53] <SnoopJ> if Debian gives you a pip with pypy (I doubt it?) you can try `pypy3 -m pip install lxml`
[01:11:13] <no_gravity> SnoopJ: That would mean starting debian packages with pip packages \o/
[01:11:20] <no_gravity> SnoopJ: That would mean starting to mix debian packages with pip packages \o/
[01:12:03] <bjs> no_gravity: because staying just with debian will make everything just work...
[01:12:05] <dav1d> no_gravity, vortialenvs
[01:12:09] <dav1d> *virtualenvs
[01:12:18] <no_gravity> dav1d: I use containers, no virtualenvs.
[01:12:28] <dav1d> then where is the problem?
[01:12:32] *** Quits: Komu (~Komu__@2a02:3037:410:a07a:2c30:6ac3:176a:6ecd) (Quit: Verlassend)
[01:12:35] <SnoopJ> no_gravity, upshot: Debian probably did *not* give you pypy with pip, they really don't like it for exactly this reason.
[01:12:38] <nedbat> dav1d: no_gravity has strong opinions, bluntly expressed :)
[01:12:42] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[01:12:46] <no_gravity> dav1d: The containers only use packages from the debian repos.
[01:12:49] <habnabit_> (a container should have a venv in it anyway)
[01:12:57] <SnoopJ> I don't know if lxml can run on both? (can *any* packages?)
[01:13:00] <dav1d> no_gravity, install pypy, install lxml through pip, either as --user, globally or in a virtualenv
[01:13:02] *** Quits: sectec84 (~sectec84@24.18.109.173) (Ping timeout: 252 seconds)
[01:13:05] <habnabit_> SnoopJ, not any binary package no
[01:13:10] <SnoopJ> but Debian throwing everything into dist-packages probably isn't helping
[01:13:11] <dav1d> no_gravity, then just don't do that
[01:13:13] *** Joins: marduk (~marduk@216.243.54.166)
[01:13:23] <no_gravity> dav1d: That would mean starting to mix debian packages with pip packages \o/
[01:13:35] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:6858:e1e6:8f1d:bd31) (Ping timeout: 252 seconds)
[01:13:40] <dav1d> no_gravity, no, because you would not install any python packge from the repos
[01:13:50] <dav1d> no_gravity, https://github.com/Dav1dde/glad-web/blob/master/Dockerfile#L3 that's all it takes to setup a venv in a container
[01:13:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[01:14:06] <no_gravity> dav1d: I don't use 3rd party dockerfiles.
[01:14:15] <bjs> I do the opposite, none of my Python's come from the distribution's packages, and all of the installed modules come from pip
[01:14:31] *** Joins: wyclif (~wyclif@user/wyclif)
[01:14:32] <dav1d> no_gravity, that wouldnt work aynways, because that is for my project, take the same approach and use it in your own dockerfile
[01:14:40] <dav1d> nedbat, I begin to understand
[01:14:46] <no_gravity> dav1d: That uses pip.
[01:14:53] <bjs> no_gravity: what's wrong with pip?
[01:14:54] <dav1d> no_gravity, no shit
[01:15:03] <nedbat> bjs: no_gravity likes the debian philosophy
[01:15:07] <no_gravity> bjs: I prefer to have my stack be debian based only.
[01:15:08] <octav1a> SnoopJ / bjs : thank you for helping me work through this. I managed to make it work by storing the shm objects on demand in a instance variable for the short term, and I can look into sharedmemorymanager for help in the future.
[01:15:11] <SnoopJ> no_gravity, my best guess here is that python3-lxml is incompatible with pypy3, but apt doesn't know about that.
[01:15:22] <dav1d> nedbat, am I missing some backstory/good reason?
[01:15:25] <bjs> nedbat: which is great except that debian seems to have given no_gravity a broken pypy3 that looks in the python3 dist-packages
[01:15:26] <bjs> so ...
[01:15:29] <grym> dav1d: not really
[01:15:29] <habnabit_> you can't use only debian packages and also use pypy
[01:15:32] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:15:39] <habnabit_> if you want reasons to not use pypy, well,
[01:15:50] <bjs> not to use Debian's packages*  :P
[01:15:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:15:56] <dav1d> no_gravity, well there is a good reason not to use the debian package, it doesnt work
[01:16:01] <habnabit_> bjs, see, that's what i would say
[01:16:02] <nedbat> dav1d: debian believes the OS should handle package management.  Python (and pip) believes the language should handle package management
[01:16:25] <dav1d> nedbat, but these philosophies are compatible
[01:16:30] <nedbat> dav1d: not really :)
[01:16:32] *** Joins: t3nj1n (~t3nj1n@69.206.216.207)
[01:16:49] <SnoopJ> they're "compatible" if you have two universes of ${language}, one for distro, one for the user
[01:16:50] <bjs> the OS handling package management is a great idea until the OS misunderstands the language and does package management wrong like having pypy3 and python3 both look into the same dist-packages/ dir
[01:16:51] <nedbat> dav1d: or, it's certainly easy to accept one to the exclusion of the other, as we have seen
[01:16:55] <dav1d> nedbat, supply the tools from the OS to setup the environment for your application
[01:16:56] <bjs> if that's actually what happened here
[01:17:09] <no_gravity> I wonder why it happens to this one package, 'etree'.
[01:17:10] <SnoopJ> Debian's got good reasons for doing what they do, but it's a mess
[01:17:18] <habnabit_> the OS builds packages for its own use in supporting applications
[01:17:27] <nedbat> dav1d: debian doesn't like virtualenvs because it puts code somewhere that debian can't upgrade it, so debian can't ensure that your machine is safe.
[01:17:30] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 240 seconds)
[01:17:30] <habnabit_> libraries and runtimes are a mixed back
[01:17:33] <habnabit_> libraries and runtimes are a mixed *bag
[01:17:45] <bjs> no_gravity: because lxml isn't pure-Python
[01:17:49] <dav1d> nedbat, that is entirely irrelevant in a docker container with pinned versions, no?
[01:17:49] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[01:18:01] <grym> nedbat: but, i compile my own python, so debian thinks i'm out of scope already, so they can stop caring :)
[01:18:03] <t3nj1n> hi quick & stupid question: in C you can do something like index[value] > [index[value+1] i.e. tell the program to evaluate what the next index position is...how is that done in python? can't find the right words to search for the solution
[01:18:21] <nedbat> dav1d: docker doesn't change things, it just pushes the code to keep secure into a container. How does debian keep that code secure?
[01:18:25] <no_gravity> To find out if it would work via pip, what is the way to do that?
[01:18:27] <grym> "what $USER does in $HOME is entirely up to them!" seems uncontentious
[01:18:31] <SnoopJ> t3nj1n, zoom out and tell us what task has you wanting that C spelling
[01:18:40] <habnabit_> t3nj1n, `index[value] > [index[value+1]]` doesn't look like valid C syntax
[01:18:47] <dav1d> nedbat, well the container is debian based, but the python version in that container is pinned, which already would break that principle
[01:18:48] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[01:18:50] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[01:18:50] <habnabit_> t3nj1n, why are there extra [] ?
[01:18:59] <nedbat> t3nj1n: for a, b in zip(index, index[1:]):  if a > b:
[01:19:13] <dav1d> nedbat, assuming he uses a python:3(.8) container
[01:19:16] <SnoopJ> yea, usually you zip() a sequence with itself
[01:19:19] <habnabit_> dav1d, 'he'? ;)
[01:19:21] <SnoopJ> dav1d, that's a pretty big assumption
[01:19:23] <dav1d> *they
[01:19:25] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[01:19:34] <SnoopJ> but this has turned thoroughly into an advocacy debate now I think :(
[01:19:37] <grym> i was so happy with myself when i tried zipping with an offset and it did exactly what i wanted
[01:19:39] <dav1d> habnabit_, sorry, that's just my uneducated default
[01:19:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[01:19:40] <t3nj1n> oo
[01:19:45] <nedbat> dav1d: i'm trying to explain my understanding of the debian philosophy as i understand it.  i don't ascribe to it.
[01:19:48] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:19:51] <habnabit_> dav1d, just nudging you to use a better default!
[01:20:01] *** Joins: wyclif (~wyclif@user/wyclif)
[01:20:04] <grym> (subscribe?)
[01:20:07] <dav1d> nedbat, I guess I am assuming too much about that specific setup
[01:20:10] *** Quits: bambams__ (~bambams@user/bambams) (Remote host closed the connection)
[01:20:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:20:24] <nedbat> grym: probably
[01:20:25] <bjs> no_gravity: make a venv, test if it works and try the benchmark, delete the venv
[01:20:28] <SnoopJ> what you're describing is one way around the pain
[01:20:35] *** Joins: bambams__ (~bambams@user/bambams)
[01:20:35] <t3nj1n> i'm basically trying to get the values stored in the array, by taking the value of the index i'm "in", and taking the one directly next to it
[01:20:45] <no_gravity> bjs: I don't need a venv since I do it in a fresh container anyhow.
[01:20:52] <t3nj1n> then comparing them and setting whatever is greater to a new variable
[01:21:01] <no_gravity> bjs: I just need to know what means "test if it works" :)
[01:21:03] <bjs> no_gravity: okay, so make a fresh container and install only pypy3 and then pip install lxml
[01:21:04] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Read error: Connection reset by peer)
[01:21:04] <nedbat> t3nj1n: try the code I showed
[01:21:05] <dav1d> habnabit_, appreciate that
[01:21:05] <t3nj1n> the exercise question im using says i can't use min or max
[01:21:12] <habnabit_> depending on what image you're working FROM, you still should make a venv in a docker container usually
[01:21:19] <bjs> no_gravity: ... it installs and you don't get an error? I'm not following here. You tried to import it and it failed
[01:21:20] <t3nj1n> okie dokie
[01:21:26] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:21:27] <bjs> no_gravity: so "if it works" seems like an obvious test ...
[01:21:42] *** Joins: Barones (~Barones@2804:48dc:8500:0:f405:4bcb:2895:caaf)
[01:21:46] <SnoopJ> I wouldn't complain quite so much about the experience if it didn't reflect on Python itself. Maybe python3-full will fix that, because it will signal to users "Debian is not giving you the PSF's Python"
[01:21:52] <nedbat> t3nj1n: though i wonder if comparing neighbors is what you need.
[01:22:09] <no_gravity> bjs: How do I install pip?
[01:22:23] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[01:22:25] <nedbat> t3nj1n: also, if this is a beginning exercise, it might be easier to do:   for i in range(len(the_list)-1):  if the_list[i] < the_list[i+1]:
[01:22:31] <bjs> no_gravity: ugh this is Debian, so it probably got taken out of Python. Maybe you can get it back with pypy3-pip or pypy3-venv or something
[01:23:06] <no_gravity> bjs: None of those exist.
[01:23:25] <t3nj1n> ah that makes sense @nedbat
[01:23:28] <t3nj1n> ill try out your suggestioins
[01:23:33] <habnabit_> python3-virtualenv and then virtualenv -p pypy3 probably
[01:23:51] *** Quits: nickel84481 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.0)
[01:23:56] <SnoopJ> or the bazooka of get-pip.py ðŸ˜¬
[01:24:32] <bjs> no_gravity: well I guess try python3-pip :P
[01:24:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:24:45] <dav1d> What about https://hub.docker.com/_/pypy :)
[01:24:47] *** Joins: nmoura (~nmoura@177.192.16.58)
[01:24:56] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:25:10] <no_gravity> bjs: How would that not result in the same situation I was before?
[01:25:32] *** Joins: wyclif (~wyclif@user/wyclif)
[01:25:46] <bjs> no_gravity: look you're the one insisting on using Debian packages everywhere even for a fresh container and a simple little test
[01:26:06] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[01:26:13] <no_gravity> bjs: For the test I am not insisting on anything. Just tell me what to do and I'd happily try it.
[01:27:00] <bjs> no_gravity: try the pypy3 image dav1d links to?  and pip install lxml and see if it works, although your benchmark didn't need lxml so I'm not sure why you care about it so much
[01:27:24] <nedbat> bjs: no_gravity tried a real project on pypy
[01:27:28] <no_gravity> bjs: I want to try pypy on a real world application. That one uses lxml.
[01:27:37] <bjs> ah
[01:28:44] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c) (Quit: Leaving)
[01:29:31] *** Quits: syb0rg (~syb0rg@184.170.242.152) (Quit: Client closed)
[01:29:43] <no_gravity> It looks like when I install lxml like this: "pip3 install lxml" and run the application via pypy, I get this: "ImportError: No module named 'lxml'"
[01:29:49] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[01:29:50] <no_gravity> Running it via cpython still works.
[01:30:05] <bjs> no_gravity: well if `pip` is for cpython then it won't install it for pypy3 (hopefully)
[01:30:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:30:25] <no_gravity> bjs: So how do I get lxml for pypy3?
[01:30:38] <bjs> no_gravity: well you use pip to install it,  but the Debian package seems to have surgically removed pip
[01:30:46] <bjs> and not given you a package to install it with(?)
[01:30:50] <habnabit_> pypy3 -mpip
[01:31:02] *** Joins: wyclif (~wyclif@user/wyclif)
[01:31:08] <bjs> ^ and if that doesn't work, you can try `pypy3 -m ensurepip`  although I doubt that'll work
[01:31:22] <no_gravity> habnabit_: That throws out a bunch of errors. Last one is "ImportError: No module named 'pip._vendor.packaging'"
[01:31:24] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Remote host closed the connection)
[01:31:33] <bjs> that sounds like Debian's surgery again
[01:31:34] <bjs> :P
[01:31:44] <no_gravity> bjs: That gives me "ensurepip is disabled in Debian/Ubuntu for the system python."
[01:31:53] *** Quits: majors_ (~majors@user/majors) (Ping timeout: 268 seconds)
[01:31:55] <bjs> I just installed pypy3 locally (with pyenv) and installed lxml for it and lxml.etree imports fine
[01:31:58] <bjs> no_gravity: haha.
[01:32:08] <bjs> no_gravity: email the Debian maintainers and ask why they hate you so much
[01:32:16] <no_gravity> bjs: Which distro do you use?
[01:32:20] <bjs> no_gravity: debian
[01:32:22] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[01:32:27] <bjs> but I don't use the Debian Python packages
[01:32:49] <no_gravity> bjs: So you say the only way to do it is using a venv?
[01:33:01] <habnabit_> pypy3 -mvenv ?
[01:33:07] <bjs> no_gravity: no,  I don't use the Debian packages for Python at all
[01:33:15] <bjs> my `python` I installed with `pyenv`
[01:33:19] <habnabit_> also pyenv uses the pypy binaries i expect or you started that test hours ago
[01:33:27] <no_gravity> bjs: Ok. I might try that tomorrow. It is getting late over here.
[01:33:31] <bjs> no_gravity: and it has `pip` (or rather, pyenv didn't *remove pip*)
[01:33:31] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[01:34:11] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[01:34:30] <bjs> I once used the distro's own python packages,  and I was using arch for a while.
[01:34:35] <bjs> and well, that's why I stopped :P
[01:34:38] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 265 seconds)
[01:35:33] *** Quits: boxelephant (~boxelepha@209.143.87.130) (Ping timeout: 255 seconds)
[01:36:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[01:36:33] *** Joins: wyclif (~wyclif@user/wyclif)
[01:36:52] <jarthur> New lib I made if any of you do DynamoDB heavy lifting: https://github.com/JustinTArthur/ddbcereal
[01:38:03] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:38:26] *** Quits: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca) (Quit: Client closed)
[01:38:45] *** Joins: sectec84 (~sectec84@24.18.109.173)
[01:39:23] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[01:39:31] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[01:40:16] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[01:40:34] *** Joins: fcjsx (~fcjsx@2800:a4:806:3400:e7f7:522e:75bd:5e91)
[01:40:58] *** Quits: fcjsx (~fcjsx@2800:a4:806:3400:e7f7:522e:75bd:5e91) (Client Quit)
[01:41:10] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[01:41:54] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:41:55] *** Quits: llua (~llua@zsh/developer/llua) (Quit: <Rudolph> shell code is what greycat reads to kids when he tucks them in)
[01:44:47] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 265 seconds)
[01:45:47] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 268 seconds)
[01:46:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:46:59] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[01:47:03] *** Joins: cheater (~Username@user/cheater)
[01:47:33] *** Joins: wyclif (~wyclif@user/wyclif)
[01:52:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:53:04] *** Joins: wyclif (~wyclif@user/wyclif)
[01:54:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[01:54:39] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[01:55:04] *** Joins: llua (~llua@zsh/developer/llua)
[01:55:16] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[01:56:13] *** Quits: llua (~llua@zsh/developer/llua) (Client Quit)
[01:57:43] *** Joins: audio (~audio@2603-8081-1800-00ad-477a-11b1-e56a-b2b4.res6.spectrum.com)
[01:58:05] *** Joins: cheater (~Username@user/cheater)
[01:58:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:58:35] *** Joins: wyclif (~wyclif@user/wyclif)
[01:58:44] *** Joins: llua (~llua@zsh/developer/llua)
[01:59:08] *** Joins: disgrntld (~disgrntld@cpe-24-28-75-57.austin.res.rr.com)
[02:00:24] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[02:00:31] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[02:00:41] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[02:00:54] *** Quits: cheater (~Username@user/cheater) (Remote host closed the connection)
[02:01:06] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[02:01:10] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[02:02:16] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Quit: < debdrup> What is this /quit thing?)
[02:02:27] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[02:02:35] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[02:02:45] *** Joins: kevr (~kevr@user/kevr)
[02:03:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:03:31] *** Joins: cheater (~Username@user/cheater)
[02:03:40] *** Quits: plains (~plains@user/plains) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[02:04:05] *** Joins: wyclif (~wyclif@user/wyclif)
[02:04:41] *** Joins: plains (~plains@user/plains)
[02:05:14] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:06:17] *** Quits: t3nj1n (~t3nj1n@69.206.216.207) (Read error: Connection reset by peer)
[02:06:35] *** Quits: llua (~llua@zsh/developer/llua) (Quit: <Rudolph> shell code is what greycat reads to kids when he tucks them in)
[02:07:12] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 252 seconds)
[02:08:13] *** Joins: llua (~llua@zsh/developer/llua)
[02:08:39] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[02:08:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:09:57] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[02:09:57] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:09:58] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[02:09:58] *** Joins: oriba (~oriba@dynamic-078-055-135-110.78.55.pool.telefonica.de)
[02:10:21] *** Quits: jay-m126_ (~jay-m@129.0.204.218) (Ping timeout: 252 seconds)
[02:10:46] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:12:20] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[02:12:44] *** Joins: nmoura (~nmoura@177.192.16.58)
[02:12:53] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[02:12:57] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Ping timeout: 276 seconds)
[02:12:59] *** Quits: fluffyballoon (~fluffybal@pat-verona-l.epic.com) (Quit: Client closed)
[02:15:09] *** Joins: wyclif (~wyclif@user/wyclif)
[02:16:19] *** Joins: fluffyballoon (~fluffybal@pat-verona-l.epic.com)
[02:17:28] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[02:18:05] *** Joins: drant (~drant@2a05:f480:1c00:d82::)
[02:18:32] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[02:18:57] *** Joins: adamts (~Adam@user/mysteryblokhed)
[02:19:16] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[02:19:49] *** Joins: pnoud (~pnoud@user/pnoud)
[02:20:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:20:39] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[02:20:39] *** Joins: wyclif (~wyclif@user/wyclif)
[02:21:41] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[02:21:47] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[02:22:10] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[02:22:43] <yuesbeez> Is it more efficient to do many sql queries or do a single query and index a tuple of dictionaries?
[02:22:50] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Client Quit)
[02:23:17] *** Quits: ttkap (~ttkap@user/ttkap) (Remote host closed the connection)
[02:24:43] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[02:24:49] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[02:25:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:26:10] *** Joins: wyclif (~wyclif@user/wyclif)
[02:27:17] *** Quits: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[02:29:40] *** Joins: dcaro_ (~dcaro@user/dcaro)
[02:29:54] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:30:34] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46) (Ping timeout: 240 seconds)
[02:30:48] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 268 seconds)
[02:30:52] *** dcaro_ is now known as dcaro
[02:31:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:31:41] *** Joins: wyclif (~wyclif@user/wyclif)
[02:31:55] <habnabit_> yuesbeez, i'm not sure what 'index a tuple of dicts' means
[02:32:05] <habnabit_> yuesbeez, can you give an example?
[02:32:28] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[02:36:34] *** Quits: disgrntld (~disgrntld@cpe-24-28-75-57.austin.res.rr.com) (Quit: Client closed)
[02:38:29] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c)
[02:38:56] <nedbat> yuesbeez: it can be hard to guess about these things, but as a first guess, fewer queries is better
[02:41:51] <habnabit_> (but fewer queries plus doing logic/filtering in python is very slow)
[02:42:44] <drant> SQL will always outpace python and depending on the queries you might be able to less of them than you expect with clever joins
[02:43:08] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[02:43:45] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 265 seconds)
[02:43:47] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[02:44:56] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:544f:ff3e:f177:8d6c) (Quit: Leaving)
[02:45:15] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:7017:e0c2:e396:b384)
[02:45:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:46:21] *** Joins: wyclif (~wyclif@user/wyclif)
[02:49:25] *** Joins: p-i- (~Ohmu@node-rsn.pool-118-173.dynamic.totinternet.net)
[02:50:01] <p-i-> 'await foo()' in my .ipynb is causing a linter-fail in VSCode. Is there anything cunning I can do to work around the warning?
[02:50:45] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[02:51:01] *** Quits: Akuli (~Akuli@213.216.211.211) (Quit: Leaving)
[02:51:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:51:27] *** Joins: gordonjcp (~gordon@boulton.gjcp.net)
[02:51:52] *** Joins: wyclif (~wyclif@user/wyclif)
[02:52:08] <drant> whats the warning
[02:52:15] <p-i-> asyncio.get_event_loop().create_task(main()) seems to sort it out.
[02:53:06] <habnabit_> p-i-, you want to put awaits at the top level? that's a nonstandard ipython thing that the linter would have to be aware of
[02:53:17] <habnabit_> p-i-, so that sounds like a linter bug or the vscode integration bug
[02:53:23] <p-i-> "await only allowed within async function"
[02:53:41] <habnabit_> p-i-, yes. that lint is correct outside the specific context of ipython
[02:54:02] *** Quits: jwhisnant_ (~jwhisnant@user/jwhisnant) (Ping timeout: 255 seconds)
[02:54:08] <habnabit_> p-i-, you can tell your linter to ignore that for the whole file
[02:54:26] <p-i-> Can I do that thru special comments for PyLance?
[02:54:26] *** Joins: gerikson (~gerikson@user/gerikson)
[02:54:37] <habnabit_> p-i-, is pylance the linter?
[02:55:03] <p-i-> It's a VSCode bug... there's an issue for it on their github (that hasn't been touched in 2 years, so I'm not holding my breath)
[02:55:06] <p-i-> yep
[02:55:19] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 246 seconds)
[02:56:06] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 255 seconds)
[02:56:12] <p-i-> I think I'll use my workaround... I can't see anything wrong with it.
[02:56:21] <habnabit_> p-i-, i mean, it does something different
[02:56:29] <habnabit_> p-i-, create_task doesn't wait for the task to complete
[02:56:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:57:08] <gordonjcp> evening
[02:57:08] <p-i-> hmm can I code around this issue somehow?
[02:57:23] *** Joins: wyclif (~wyclif@user/wyclif)
[02:57:28] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:57:43] <p-i-> I suppose I could set a flag inside async main, and `while not flag: sleep 1`
[02:57:53] <gordonjcp> if I've got a setup.py file that has a particular version for a package specified, how can I get wheel to ignore that version if the package is already installed?
[02:57:56] *** Joins: jazzy (~jaziz@2600:380:c07e:8a82:88c2:f3ad:ac82:d386)
[02:57:58] <p-i-> What a lot of boilerplate to navigate around the bug, tho!
[02:58:10] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[02:58:30] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:58:40] *** Quits: redgloboli (~redglobol@user/redgloboli) (Read error: Connection reset by peer)
[02:58:50] *** Quits: moto (~moto@user/moto) (Ping timeout: 268 seconds)
[02:59:19] *** Joins: redgloboli (~redglobol@user/redgloboli)
[02:59:19] <habnabit_> p-i-, oh, pylance is just the integration
[02:59:28] *** Joins: moto (~moto@user/moto)
[02:59:51] <p-i-> oh. thought it was the linter. I never dug into it.
[02:59:58] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[03:00:16] <habnabit_> p-i-, what bug did you find?
[03:00:51] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 258 seconds)
[03:01:21] <p-i-> https://github.com/microsoft/vscode-jupyter/issues/1510
[03:02:19] <habnabit_> p-i-, i'm not sure what makes you think it has to do with pylance
[03:02:34] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[03:02:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:02:54] *** Joins: wyclif (~wyclif@user/wyclif)
[03:03:34] <p-i-> https://pasteboard.co/Kcg9Uvj.png
[03:03:37] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:03:57] <p-i-> (Does anyone know a better imagebin that gives the raw image URL?)
[03:04:52] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 256 seconds)
[03:06:07] <habnabit_> p-i-, your create_task thing is fine iff you don't care about the function's return value
[03:06:30] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[03:06:46] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[03:07:27] *** Quits: oriba (~oriba@dynamic-078-055-135-110.78.55.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:07:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:08:12] <p-i-> yeah I have to make a nonlocal variable to pass that back. It's so clumsy.
[03:08:17] <p-i-> But it does seem to work.
[03:08:24] *** Joins: wyclif (~wyclif@user/wyclif)
[03:08:47] <habnabit_> p-i-, i mean, there's easier ways to get the value out
[03:09:14] <habnabit_> p-i-, https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.result
[03:10:00] <habnabit_> p-i-, i'm not sure your bug has to do with the extension you commented on, though. but i'm no vscode wizard
[03:10:14] <evidlo> can anyone explain why I'm getting this argument error?  It's like 'self' isn't even there: https://termbin.com/r2pjd
[03:10:36] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[03:10:57] *** Joins: setuid (sid191390@canonical/setuid)
[03:11:02] <setuid> I'm trying to refactor a dict, which has some fairly redundant terms in it... and then lambda/loop that to make it smaller/easier to work with. Suggestions? https://paste.debian.net/hidden/5edb117d/
[03:11:03] <habnabit_> evidlo, looks like you forgot to instantiate the class
[03:11:10] <habnabit_> evidlo, shouldn't sc be an instance?
[03:11:25] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[03:12:34] *** Quits: ionface_ (~ionface@user/ionface) (Ping timeout: 240 seconds)
[03:12:42] <BrenBarn> yeah it's not passing self because you don't have an instance, you're calling an unbound method
[03:13:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[03:13:55] *** Joins: wyclif (~wyclif@user/wyclif)
[03:14:28] *** Joins: oatmealraisin (~ryan@cpe-74-64-248-100.nj.res.rr.com)
[03:14:32] <evidlo> habnabit_: yep that's it
[03:14:50] <BrenBarn> setuid: Refactor it how?
[03:14:50] <evidlo> I was trying to subclass this class, but they have this @singleton decorator which was messing things up: https://github.com/construct/construct/blob/master/construct/core.py#L873-L908
[03:15:03] <habnabit_> evidlo, gross
[03:15:16] <setuid> BrenBarn: Was thinking of passing in just a list of cities, and if it matches 'emea', prepend the other bits to the front, keep the dict small
[03:15:27] *** Joins: ttkap (~ttkap@user/ttkap)
[03:16:15] *** Joins: zebrag (~chris@user/zebrag)
[03:16:18] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[03:16:54] <evidlo> habnabit_: how would you do it? if mylibrary.Foobar needs to be an object, how do you also provide access to the original class?
[03:17:18] <habnabit_> evidlo, make the class _Foobar and then `Foobar = _Foobar()~
[03:17:19] <habnabit_> evidlo, make the class _Foobar and then `Foobar = _Foobar()`
[03:17:48] <oatmealraisin> Hey all, I have a class, InventorySet(list[Inventory), how do I set up an __init__ and call super properly? e.g. to preserve the InventorySet([inv_a,  inv_b]) type flow
[03:18:27] <oatmealraisin> like should the __init__ signature include a variable for the list you can pass in? `__init__(self, elements)`?
[03:18:34] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 268 seconds)
[03:18:38] <SnoopJ> habnabit_, misread that as a destructor for a second even though the tilde is on the other side ðŸ˜¬
[03:19:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:19:20] *** Quits: cedric (~cedric@2a01:cb11:867:c200:8050:3c13:186f:dfe9) (Quit: Konversation terminated!)
[03:19:25] *** Joins: wyclif (~wyclif@user/wyclif)
[03:21:30] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[03:22:08] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:23:52] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 265 seconds)
[03:24:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[03:24:57] *** Joins: wyclif (~wyclif@user/wyclif)
[03:25:07] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[03:25:17] *** Joins: ionface (~ionface@user/ionface)
[03:25:41] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 268 seconds)
[03:25:59] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[03:26:09] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 244 seconds)
[03:27:42] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 244 seconds)
[03:28:59] *** Joins: nesoi (~Adium@192-184-189-105.static.sonic.net)
[03:29:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[03:30:28] *** Joins: wyclif (~wyclif@user/wyclif)
[03:32:46] *** Joins: ttkap (~ttkap@user/ttkap)
[03:34:31] *** squirrel is now known as isolani
[03:36:30] *** Joins: tims (~tims@220-245-254-151.static.tpgi.com.au)
[03:36:54] *** Joins: jpe__ (~sharpergu@2001:1438:4010:3101:10a::3133)
[03:36:54] *** Joins: Nei_ (~ailin@user/nemui)
[03:37:06] *** Quits: theo (~theo@user/theo) (Quit: Ping timeout (120 seconds))
[03:37:08] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (Quit: Ping timeout (120 seconds))
[03:37:15] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Read error: Connection reset by peer)
[03:37:17] *** Quits: deepy (deepy@user/deepy) (Read error: Connection reset by peer)
[03:37:23] *** Quits: sharperguy_ (~sharpergu@2001:1438:4010:3101:10a::3133) (Remote host closed the connection)
[03:37:27] *** Joins: theo (~theo@user/theo)
[03:37:29] *** Quits: rdvn (~rdvn@user/rdvn) (Read error: Connection reset by peer)
[03:37:30] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[03:37:32] *** Quits: BullHorn (BullHorn@zapdos.randomlab.info) (Quit: ZNC - https://znc.in)
[03:37:43] *** Joins: rdvn (~rdvn@user/rdvn)
[03:37:55] *** Joins: deepy (deepy@user/deepy)
[03:37:56] *** Joins: BullHorn (~BullHorn@zapdos.randomlab.info)
[03:38:02] *** Quits: Nei (~ailin@user/nemui) (Remote host closed the connection)
[03:38:03] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[03:38:07] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Remote host closed the connection)
[03:38:07] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[03:38:08] *** Quits: mgubyt (u@mgub.yt) (Quit: ZNC - https://znc.in)
[03:38:09] *** Quits: Spydar007 (~spydar007@user/spydar007) (Quit: Quit)
[03:38:20] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[03:38:20] *** Joins: mgubyt (u@mgub.yt)
[03:38:26] *** Joins: hexology (~hexology@user/hexology)
[03:38:28] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (Ping timeout: 272 seconds)
[03:38:35] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[03:40:04] *** Nei_ is now known as Nei
[03:40:09] *** Joins: Spydar007 (~spydar007@user/spydar007)
[03:40:16] <yuesbeez> I am taking a look at the asyncio module and I am not sure if it can do what I need. I have a function that is called in a for loop that builds a list. Is it possible to call that function synchronously so many instances of it can be running at once and building this list, or even writing to a file if list building isnt possible? I am using python 3.9.6
[03:40:26] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[03:40:33] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[03:40:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:40:51] <nedbat> oatmealraisin: can you link us to the code you are working with?
[03:41:17] *** Parts: nesoi (~Adium@192-184-189-105.static.sonic.net) ()
[03:41:19] <nedbat> yuesbeez: do you mean "call that function asynchronously"?
[03:41:23] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[03:41:31] *** Joins: wyclif (~wyclif@user/wyclif)
[03:41:35] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Quit: switching tty)
[03:41:41] <yuesbeez> nedbat: So that many instances of it are running at once and appending to a list
[03:42:05] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[03:42:38] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Ping timeout: 258 seconds)
[03:43:13] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[03:43:43] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[03:44:37] *** Joins: cjb (~cjb@user/cjb)
[03:45:10] <habnabit_> yuesbeez, you said 'call that function synchronously'
[03:45:14] <yuesbeez> nedbat: Similar to this code in bash but instead of ./procs, call the python function https://stackoverflow.com/a/356154/12497679
[03:45:16] <habnabit_> yuesbeez, is that what you meant?
[03:45:28] <yuesbeez> habnabit_: No, see my message with the bash code for a good example
[03:45:38] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[03:45:38] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:46:02] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[03:46:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:46:43] *** Joins: Atque (~Atque@user/atque)
[03:47:01] *** Joins: wyclif (~wyclif@user/wyclif)
[03:47:29] *** Quits: d3sync (~d3sync@62.1.243.19.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:47:54] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[03:48:31] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[03:49:00] <yuesbeez> habnabit_: Yes synchronously, at the same time. Am I mistaken?
[03:49:26] <Repiphany> asyncio is for asynchronous things
[03:49:34] <habnabit_> yuesbeez, is the word you're looking for 'simultaneously' or 'concurrently'? because that's not what 'synchronously' means
[03:49:35] <Repiphany> The a is a big hint
[03:49:46] <yuesbeez> habnabit_: concurrently
[03:49:55] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[03:50:44] *** Quits: oprypin_ (~irc@pryp.in) (Ping timeout: 255 seconds)
[03:50:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:50:52] <yuesbeez> I see I should be using threading module probably no async
[03:50:56] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[03:50:57] <yuesbeez> asyncio*
[03:51:28] <habnabit_> yuesbeez, what is the function doing whilst it 'runs'?
[03:51:37] <habnabit_> yuesbeez, threading is not often a good idea
[03:51:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:51:52] <yuesbeez> Is there a good resource where I can understand what is the difference between asyncio and threading? I am very familiar with multithreading from C++ but not much with async
[03:52:00] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[03:52:10] *** Joins: oprypin (~irc@pryp.in)
[03:52:21] <yuesbeez> habnabit_: printing a message and doing an api call
[03:52:31] *** Joins: wyclif (~wyclif@user/wyclif)
[03:52:32] <habnabit_> yuesbeez, trio's docs explain this, and trio is a vastly superior alternative to asyncio anyway: https://trio.readthedocs.io/en/stable/tutorial.html
[03:52:42] <habnabit_> yuesbeez, trio's docs are pretty good. i suggest reading that whole page
[03:53:11] <yuesbeez> habnabit_: It says "its main purpose is to help you write programs that do multiple things at the same time with parallelized I/O"
[03:53:30] <habnabit_> yuesbeez, it does say that yes
[03:53:58] <yuesbeez> I specifically want documentation that will clear up my confusion on how parallelized I/O is different from multithreading
[03:54:05] <habnabit_> yuesbeez, yes. keep reading
[03:55:45] <yuesbeez> Is the difference that asyncio works in a single thread that can call different functions and run them at the same time, whereas multithreading is for running multiple instances of the same code on different threads?
[03:56:34] <habnabit_> yuesbeez, no
[03:56:59] <yuesbeez> could you explain it?
[03:57:11] <habnabit_> yuesbeez, could you spend more than 10 seconds reading the page i linked?
[03:57:19] <habnabit_> yuesbeez, i swear it does explain it
[03:57:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[03:58:02] *** Joins: wyclif (~wyclif@user/wyclif)
[03:58:04] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[03:58:35] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[03:58:59] *** Quits: Linux77 (~kvirc@186.235.105.168) (Ping timeout: 268 seconds)
[03:59:48] *** milkt is now known as milkt_
[04:00:06] *** milkt_ is now known as milkt_____
[04:00:25] *** milkt_____ is now known as malkt
[04:00:47] *** malkt is now known as milkt
[04:01:02] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[04:01:58] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 252 seconds)
[04:02:28] *** Joins: thiras (~thiras@user/thiras)
[04:02:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:03:32] *** Joins: wyclif (~wyclif@user/wyclif)
[04:05:26] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[04:07:40] *** Joins: rexbinary_ (~rexbinary@user/rexbinary)
[04:08:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[04:09:04] *** Joins: wyclif (~wyclif@user/wyclif)
[04:09:40] *** Joins: y1n (~y1n@84-115-64-206.wifi.dynamic.surfer.at)
[04:09:54] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 240 seconds)
[04:09:54] *** rexbinary_ is now known as rexbinary
[04:10:05] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 255 seconds)
[04:10:27] *** Joins: ionface (~ionface@user/ionface)
[04:10:44] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:11:16] <nedbat> yuesbeez: i found it helpful to search for the word "thread" on that page.
[04:12:00] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.2)
[04:12:11] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:12:36] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[04:13:02] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[04:13:46] <yuesbeez> thanks!
[04:13:47] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[04:13:53] <yuesbeez> I found this helpful as well https://medium.com/gist-for-js/does-async-programming-mean-multi-threading-fb8d1add56dc
[04:14:03] *** Joins: Intruder777 (~Intruder7@user/intruder777)
[04:15:02] <bilb_ono> is there something like list comprehension for reduce? Like instead of map you can kind of use list comprehension. Is there something like that that you can use instead of reduce if you are accumulating a counter for every item in a generator for instance?
[04:15:36] *** Quits: llua (~llua@zsh/developer/llua) (Quit: <Rudolph> shell code is what greycat reads to kids when he tucks them in)
[04:15:57] <grym> bilb_ono: sum(1 for _ in thegenerator)? :)
[04:16:10] <bilb_ono> oh good idea
[04:16:42] <Intruder777> Hi. Can anyone suggest solid password generating library for python? Lib must support complex rules, like minimum number of chars from a specific charset (like not less than 3 digits, or at least 1 special character). Also it should allow to specify excluded chars (like not to use $ char in generated passwords)
[04:16:58] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 240 seconds)
[04:17:26] *** Joins: llua (~llua@zsh/developer/llua)
[04:17:58] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[04:19:14] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[04:19:25] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[04:20:39] *** Joins: pnoud (~pnoud@user/pnoud)
[04:21:17] <anddam> given "foobarbaz" how do I get {'f': 1, 'o': 2, 'b': 2, 'a': 2, 'r': 1, 'z': 1} in a compact way, i.e. without an explicit loop and checking each time the presence of the char in the dict?
[04:21:27] *** Joins: ovnicraft_ (~ovnicraft@179.49.44.28)
[04:21:28] <habnabit_> anddam, collections.Counter
[04:22:15] <anddam> habnabit_: mmm I see, I have an for loop with    result[char] = result.get(char, 0) + 1
[04:22:43] <grym> anddam: collections.Counter("foobarbaz")
[04:22:51] <grym> unless i just got sniped, heh
[04:23:30] *** Quits: ovnicraft_ (~ovnicraft@179.49.44.28) (Client Quit)
[04:24:58] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 240 seconds)
[04:25:23] *** Quits: mrkajetanp_ (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (Ping timeout: 255 seconds)
[04:25:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[04:25:42] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[04:25:50] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[04:25:55] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[04:26:25] <rama> this might be a stupid question, but is there a way a class attribute can return an instance of the class?
[04:26:44] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 255 seconds)
[04:27:39] <habnabit_> rama, after the class definition, you can do at the module scope `MyClass.whatever = MyClass(..)`
[04:27:47] <anddam> different question, is there a "quick" way to split a long text at words without regex?
[04:27:58] <habnabit_> anddam, textwrap
[04:28:06] <anddam> I have a text with punctuation and newlines, I need to tokenize at words
[04:28:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[04:28:32] <habnabit_> anddam, oh, the nlp library can do that
[04:28:34] <habnabit_> nlkt
[04:28:37] <habnabit_> nltk
[04:28:47] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:28:50] <anddam> habnabit_: mmm I see and I did not know that, but I am doing a challenge and it has to be by explicit code
[04:28:54] <anddam> (or so I think)
[04:29:01] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[04:29:04] <habnabit_> anddam, 'by explicit code'?
[04:29:15] <anddam> I do the loops, no stdlib tricker
[04:29:18] <anddam> trickery*
[04:29:36] <anddam> I have a solution, it's just ugly, was looking how to make it better
[04:29:48] <habnabit_> anddam, i honestly don't know what 'no stdlib trickery' means either
[04:31:03] <anddam> habnabit_: I mean that I have to write the code myself, I should not rely on textwrap (from std library) or nltk that is explicitly for NLP
[04:31:14] *** Quits: y1n (~y1n@84-115-64-206.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[04:31:46] <SnoopJ> anddam, you could write a generator function that iterates the stream and emits a newline whenever the (arbitrary) predicate is satisfied.
[04:32:01] <rama> habnabit_: would the newly defined classmethod then be only available within the module?
[04:32:15] <habnabit_> rama, 'only available within the module' as opposed to what?
[04:32:37] <rama> habnabit_: being importable into other modules/scripts?
[04:32:39] <habnabit_> anddam, that's a bit of an odd requirement. you're already using the python language runtime
[04:32:56] <habnabit_> rama, yes, you can import the class from the module and see the new attribute
[04:34:14] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:36:04] <Repiphany> anddam: https://docs.python.org/3/library/itertools.html#itertools.groupby
[04:36:13] <Repiphany> Does itertools count as stdlib trickery
[04:37:02] <SnoopJ> even if itertools as a whole doesn't, I think groupby might
[04:37:51] <Repiphany> for k, g in itertools.groupby(text, key = lambda c: c in string.ascii_letters): print(''.join(g))
[04:39:00] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[04:39:54] *** Quits: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie) (Quit: Leaving)
[04:40:12] <SnoopJ> Repiphany, I don't think they want to print the data, I think they're transforming a stream of text into tokens, presumably to parse it.
[04:40:45] <Repiphany> I meant that as just as an example of what could be done
[04:40:58] <Repiphany> -as
[04:41:05] <SnoopJ> anddam, re: that, I misread your question; you would yield the gathered element
[04:41:57] *** Quits: deivislk (~deivislk@189.7.117.212) (Quit: deivislk)
[04:42:20] <SnoopJ> groupby will go faster though, it's implemented in C
[04:42:24] *** Joins: deivislk (~deivislk@189.7.117.212)
[04:44:11] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[04:44:30] *** Quits: alexyov (~alexyov@79.124.0.2) (Ping timeout: 252 seconds)
[04:44:42] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Ping timeout: 240 seconds)
[04:44:59] <anddam> thanks
[04:45:05] *** Quits: deivislk (~deivislk@189.7.117.212) (Client Quit)
[04:45:45] *** Joins: deivislk (~deivislk@189.7.117.212)
[04:46:46] <anddam> different question, having to split a string at each ("\n", " ", ".", ",") is there a way to avoid chained .split() ?
[04:47:18] <anddam> I think those each loop over the string, so chaining is unnecessary
[04:47:44] <anddam> probably better to write a small function for that
[04:47:49] <nedbat> anddam: re.split
[04:48:02] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[04:48:11] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 258 seconds)
[04:48:50] *** Quits: flyback (~flyback@2601:540:8201:1e60:820:54fd:57eb:5b6) (Read error: Connection reset by peer)
[04:50:48] *** Joins: flyback (~flyback@2601:540:8201:1e60:1ac:fb2c:32c4:59e0)
[04:52:28] *** Joins: Samian (~Sami@163.114.130.6)
[04:52:33] <Samian> man I love python
[04:52:58] <SnoopJ> me too :')
[04:53:05] <Samian> I love python cause it makes sense, unless c++. In python the last parameter or argument can have a comma after it. Not in c++
[04:53:10] <Samian> *unlike
[04:53:24] <Roey> C++ is a hodge-podge of bolt-on afterthoughts.
[04:53:34] <SnoopJ> quite literally yes
[04:53:42] <Roey> not as much as, say, perl, but still very much so
[04:53:46] <SnoopJ> (they're pretty good afterthoughts; after all, they're the ones that came after)
[04:54:01] <Roey> sure--but they
[04:54:02] <Roey> sigh
[04:54:10] <Roey> C++ has several issues, for me:
[04:54:12] <SnoopJ> and some of them look suspiciously like thing's Python has had for a while, so, hey, that's neat
[04:54:16] <Roey> (philosphically)
[04:54:18] <Samian> it's annoying not to be allowed to have a comma after the last argument because often I list arguments vertically, and if I comment out the last argument,  I then need to delete the comma after the second to last argment
[04:54:27] <Roey> 1. It offers different ways to do the same thing
[04:54:31] * SnoopJ is enthusiatically looking forward to forgetting about std::tie
[04:54:41] <Samian> anyone else list arguments vertically?
[04:54:43] <Roey> 2. It tries to marry a new system with an old one (from C)
[04:54:47] <Samian> It's much easier on the eyes
[04:55:06] <SnoopJ> Samian, when the are more than a handful I like to. `black` has a good sense for when to make it happen.
[04:55:09] <Roey> 3. It doesn't treat the user like a grown-up;  ("friend", "public", "private", all that nonsense)
[04:55:33] <Roey> 4. It's too ornate.
[04:55:51] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[04:55:58] <SnoopJ> Roey, (1) is an outgrowth of (2), because backwards compatibility is sacred and "best effort" is not acceptable
[04:56:03] <Samian> Roey  hahhaha that's so true. "look it's a friend function"
[04:56:15] <SnoopJ> so over time you just end up with more $stuff
[04:56:26] <Roey> SnoopJ: agreed, sure
[04:56:42] <Roey> SnoopJ: aye!!
[04:57:01] <Samian> The thought of recoding from scratch causes unfounded fears
[04:57:09] <Samian> it's not that bad to recode everything
[04:57:19] <Samian> re: backward compatibility
[04:57:24] <Roey> ah
[04:57:26] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:57:31] <Samian> meh, maybe there's a scalability issue there
[04:57:43] <anddam> is there any difference in deleting last item in a list of slicing it out?
[04:57:52] <anddam> sorry, I meant speed-wise
[04:58:10] <Roey> C++ can suck my left "@"-sign, for all I care.
[04:58:20] <SnoopJ> anddam, indexing doesn't remove it from the list. I wouldn't expect one to be any slower than the other.
[04:58:42] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[04:58:46] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[04:58:53] *** Joins: quackgyver (uid11872@id-11872.tooting.irccloud.com)
[04:59:07] *** Joins: emika8 (~emika@185.207.249.193)
[04:59:18] *** Quits: emika (~emika@185.207.249.33) (Ping timeout: 258 seconds)
[04:59:18] *** emika8 is now known as emika
[04:59:36] *** Quits: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[04:59:54] *** Quits: GNUtoo (~GNUtoo@cyberdimension.org) (Ping timeout: 252 seconds)
[04:59:58] <nedbat> anddam: popping the last item of a list if very fast.
[05:00:01] <nedbat> *is
[05:01:43] *** Joins: GNUtoo (~GNUtoo@cyberdimension.org)
[05:03:29] *** Quits: hposca (~hposca@node-1w7jr9phoke2u784enbks8vht.ipv6.telus.net) (Ping timeout: 252 seconds)
[05:06:06] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[05:12:01] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: Ping timeout (120 seconds))
[05:12:26] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[05:16:00] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:7017:e0c2:e396:b384) (Quit: Leaving)
[05:16:16] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:7017:e0c2:e396:b384)
[05:17:05] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:18:06] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[05:19:00] <rannnn8888> https://dpaste.org/ofLf help when i try make virtualenv myprojectenv
[05:19:13] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[05:19:21] *** Joins: foozle (~foozle@2001-b011-c001-309a-481d-58c2-655a-860b.dynamic-ip6.hinet.net)
[05:24:14] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:24:21] <setuid> I must be going nuts... I have two lists. They contain _identical_ structures. I can iterate through them and print their contents. repr, print, visually inspecting them, they're identical in structure (strings as items). I can't even print the contents of the same list above and below a completely unrelated series of lines: https://paste.debian.net/hidden/9985bfc0/
[05:24:54] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[05:25:43] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[05:27:04] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:27:21] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-6573-eb09-6a06-4395.res6.spectrum.com)
[05:27:27] <SnoopJ> setuid, looking at the error in the selenium docs, it seems that the elements have gone stale, i.e. they are no longer in the DOM, probably because of the click() you did in the interim?
[05:27:46] <setuid> The click loads a second page, onto which are more elements to parse
[05:27:50] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[05:27:50] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[05:27:52] <setuid> jobs_page_1, jobs_page_2
[05:28:11] <SnoopJ> Does it make the old jobs go away from the view? That would explain why they have disappeared from the DOM.
[05:28:27] <setuid> Yes, but I don't need them, they're now in the list
[05:28:39] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-0828-a8d3-d830-5275.res6.spectrum.com) (Ping timeout: 255 seconds)
[05:28:42] <setuid> I'm trying to append/concatenate the job entries from page_1 with those parsed from page_2
[05:29:25] <setuid> I've been at this for _hours_
[05:29:27] <SnoopJ> setuid, Selenium is treating this as data from a browser, and this exception indicates when elements are stale. I'm not sure what the go-around is, but I think we can trust what it's saying with the error. There may be some way to get an always-valid reference to that data.
[05:29:28] <MacGyver> Well I don't know *anything* about selenium, but.
[05:29:55] <setuid> It even sometimes blows up in the _middle_ of enumerating that list's contents
[05:30:07] <MacGyver> The bit I can gather from that error is that elements are not "in the list" at all. They're references to things on a page that are only valid as long as that page is "active".
[05:30:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:27] <setuid> MacGyver: Hrm, you might be onto something there...
[05:30:35] <setuid> like pointers, not actual list items
[05:30:36] <SnoopJ> setuid, it could be that the items jitter in/out of being "stale"
[05:30:43] <MacGyver> And I believe that's what SnoopJ is trying to tell you too.
[05:30:54] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Quit: leaving)
[05:30:56] <setuid> holup, so can I just create the list by resolving its objects?
[05:31:02] *** Quits: xkuru (~xkuru@user/xkuru) (Quit: Unvirtualizing)
[05:31:49] <SnoopJ> I'd like to be sure you understand what the error's telling us before discussing solutions to it, personally
[05:32:00] <anddam> SnoopJ: well words = words[:-1]  does remove, since I am chaning list object, right?
[05:32:30] <SnoopJ> anddam, that makes a brand new list object
[05:32:34] <anddam> nedbat: like words.pop[-1] ?
[05:32:43] <nedbat> anddam: words.pop()
[05:32:47] <anddam> s/chaning/changing/
[05:33:16] <anddam> """The optional argument i defaults to -1,""" I see, thanks
[05:34:13] *** Joins: vlm (~vlm@user/vlm)
[05:34:30] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 255 seconds)
[05:34:32] *** Joins: Jacktar_ (~whiteshad@gateway/tor-sasl/jacktar)
[05:34:44] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[05:34:48] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[05:35:07] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:35:12] *** Jacktar_ is now known as jacktar
[05:36:35] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:37:21] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[05:37:55] *** Joins: Linux77 (~kvirc@186.235.105.168)
[05:38:14] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[05:42:02] *** jarthur_ is now known as jarthur
[05:43:14] *** Joins: Julian (~tos9@python/site-packages/Julian)
[05:43:21] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[05:43:22] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:44:28] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[05:44:50] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[05:44:50] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[05:47:25] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[05:47:39] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Quit: Soupy Twist!)
[05:47:59] *** Quits: drant (~drant@2a05:f480:1c00:d82::) ()
[05:49:16] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[05:49:22] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[05:49:50] *** Quits: pyfisch (~pyfisch@ip-37-201-119-209.hsi13.unitymediagroup.de) (Ping timeout: 265 seconds)
[05:51:26] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:51:55] <setuid> SnoopJ: Ok, this appears to work: https://paste.debian.net/hidden/553669b7/
[05:52:28] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[05:52:43] <setuid> optimizations are of course, welcome :)
[05:52:44] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[05:53:49] *** Quits: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38) (Quit: Konversation terminated!)
[05:54:08] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Quit: Leaving...)
[05:55:32] *** Quits: Linux77 (~kvirc@186.235.105.168) (Ping timeout: 245 seconds)
[05:55:36] *** Joins: califax- (~califax@user/califx)
[05:55:40] *** Joins: cod1 (~codl@user/codl)
[05:55:48] *** Quits: codl (~codl@user/codl) (Read error: Connection reset by peer)
[05:55:54] *** cod1 is now known as codl
[05:56:09] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:56:14] <SnoopJ> huh, a refresh seems perhaps excessive
[05:56:29] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[05:56:34] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:56:34] <anddam> bye, thanks all
[05:56:39] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[05:56:41] <SnoopJ> but if the app is storing state in the URL, it should work out
[05:56:42] <setuid> SnoopJ: without that refresh, it blows up
[05:57:08] <SnoopJ> setuid, weird, I wonder if it needs to be told to recalculate the DOM or something, and the refresh() is doing that the long way around.
[05:58:09] <setuid> OK, got another one... is there a cleaner way to represent this kind of dict? https://paste.debian.net/hidden/94ecc497/
[05:58:16] <SnoopJ> setuid, I see that you don't have the old loop any more. How does it blow up without the refresh()?
[05:58:34] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 252 seconds)
[05:58:34] *** brabrax_ is now known as brabrax
[05:58:34] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:58:35] *** califax- is now known as califax
[05:58:51] <setuid> Looks like it still blows up on page 2, shoot
[05:59:03] <SnoopJ> ah
[06:00:05] *** Quits: bidouille (~user_name@trois.potager.org) (Quit: Lost terminal)
[06:00:08] *** Quits: mgedmin (~mg@user/mgedmin) (Quit: ZNC - http://znc.sourceforge.net)
[06:02:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[06:02:44] *** Joins: wyclif (~wyclif@user/wyclif)
[06:03:12] *** Joins: mgedmin (~mg@user/mgedmin)
[06:04:39] *** Quits: oatmealraisin (~ryan@cpe-74-64-248-100.nj.res.rr.com) (Quit: WeeChat 3.2)
[06:05:30] *** Joins: pyfisch (~pyfisch@ip-37-201-119-209.hsi13.unitymediagroup.de)
[06:06:38] *** Joins: alexyov (~alexyov@79.124.0.2)
[06:07:21] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[06:07:52] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[06:08:42] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 240 seconds)
[06:09:29] *** Joins: Linux77 (~kvirc@186.235.105.168)
[06:09:49] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:10:46] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[06:11:09] *** Joins: drant (~drant@2a05:f480:1c00:d82::)
[06:11:24] *** Quits: audio (~audio@2603-8081-1800-00ad-477a-11b1-e56a-b2b4.res6.spectrum.com) (Ping timeout: 255 seconds)
[06:13:58] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[06:14:11] *** Quits: Paul (~Paul@user/paul) (Quit: Leaving)
[06:15:37] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[06:17:53] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 255 seconds)
[06:18:30] *** Joins: dcaro (~dcaro@user/dcaro)
[06:18:55] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[06:19:01] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[06:19:14] *** Quits: emerent (~quassel@p200300cd57058c7cba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:19:14] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[06:19:48] *** Joins: emerent (~quassel@p200300cd57058c5aba27ebfffed28a59.dip0.t-ipconnect.de)
[06:21:29] *** Joins: pnoud (~pnoud@user/pnoud)
[06:22:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:22:25] *** Joins: audio (~audio@2603-8081-1800-00ad-2c88-9cd6-b19c-1300.res6.spectrum.com)
[06:24:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[06:25:31] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[06:26:34] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[06:27:02] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[06:28:05] *** Joins: esmailelbob (uid508799@id-508799.charlton.irccloud.com)
[06:28:30] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[06:31:51] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: Ping timeout (120 seconds))
[06:32:23] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[06:32:42] *** Quits: koziad (~koziad@74.102.176.11) (Read error: Connection reset by peer)
[06:33:05] *** Quits: effprime (~effprime@user/effprime) (Remote host closed the connection)
[06:33:56] *** Joins: effprime (~effprime@user/effprime)
[06:34:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 258 seconds)
[06:34:48] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 255 seconds)
[06:35:37] *** Quits: TakinOver (~quassel@47.150.206.35) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:35:54] *** Joins: darksun (~darksun@user/darksun)
[06:38:14] *** Joins: zhangxiaofei (~fzhan@111.203.234.210)
[06:39:25] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Ping timeout: 250 seconds)
[06:39:54] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[06:39:54] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[06:40:15] *** Joins: Elzington_ (~Elzington@68.235.43.141)
[06:40:38] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:40:57] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 245 seconds)
[06:41:06] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 255 seconds)
[06:41:30] *** Joins: fsg (fsg@2600:3c00::f03c:92ff:fec6:da18)
[06:42:03] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[06:42:22] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (Remote host closed the connection)
[06:43:00] *** Quits: Elzington (~Elzington@68.235.43.172) (Ping timeout: 265 seconds)
[06:45:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[06:46:03] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[06:46:10] *** Joins: frost (~frost@59.71.241.179)
[06:46:38] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[06:46:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[06:46:40] *** Lord_of_Life_ is now known as Lord_of_Life
[06:48:08] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Ping timeout: 256 seconds)
[06:48:46] *** Joins: r3m (~launch@user/r3m)
[06:49:45] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[06:50:41] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[06:51:11] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[06:53:05] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[06:53:05] *** Joins: darksun (~darksun@user/darksun)
[06:56:36] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 258 seconds)
[06:56:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[06:58:06] *** Joins: hposca (~hposca@node-1w7jr9phoke2tgwo5dsrqdhce.ipv6.telus.net)
[06:59:32] *** Quits: deivislk (~deivislk@189.7.117.212) (Quit: deivislk)
[07:01:35] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[07:01:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[07:03:13] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:03:13] *** FinnElija is now known as Guest9605
[07:03:13] *** Quits: Guest9605 (~finn_elij@user/finn-elija/x-0085643) (Killed (cadmium.libera.chat (Nickname regained by services)))
[07:03:13] *** finn_elija is now known as FinnElija
[07:06:37] *** Joins: hendry (~hendry@210.23.22.2)
[07:09:25] <hendry> hi, how does one do structured logging in Python? Can I use the standard logging library?
[07:09:39] <setuid> It's working now, but definitely not ideal
[07:10:00] <FunkyBob> hendry: I've seen it done using the standard logging lib
[07:12:20] <FunkyBob> basically, a Handler that would unpack the LogRecord into a structure
[07:13:00] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:13:04] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 256 seconds)
[07:14:05] *** Joins: darksun (~darksun@user/darksun)
[07:14:47] <habnabit_> hendry, there's the 'structlog' module, but i like eliot
[07:14:53] *** Joins: sydbarret (~anton@static-186-121-195-27.acelerate.net)
[07:15:03] <FunkyBob> oops... got distracted... was going to mention that
[07:15:33] <FunkyBob> standard logging lib has a lot of features that are either (a) mostly unnoticed, or (b) slightly too tedious to leverage
[07:15:47] <FunkyBob> and I think (b) is so because the common case is so convenient
[07:15:51] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:15:52] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:15:53] <habnabit_> the stdlib 'logging' is pretty terrible and i wouldn't bother with it
[07:17:38] <hendry> so i should be using structlog
[07:17:58] <habnabit_> hendry, or eliot
[07:18:09] <FunkyBob> from what i've seen of it, it's simpler to configure, easier to understand, and more flexible
[07:18:30] <FunkyBob> as well as making use cases like 'add context to all log events from here on' trivial, instead of merely 'feasible'
[07:18:38] <FunkyBob> have not looked at eliot, yet
[07:19:10] *** Joins: yogoyo (~patrick@user/yogoyo)
[07:19:13] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[07:20:21] *** Joins: binchickin (~binchicki@165.22.169.69)
[07:20:22] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[07:20:24] <setuid> SnoopJ: Back to dicts for a moment, let's say I have a heirarchy of sorts...  Remote | Region | City, such as: "Remote, Americas, San Francisco", and I enumerate through these, picking one each, and creating a post in that region's city.
[07:20:45] <setuid> Right now, I have it all statically defined in a big dict with lots of duplication
[07:20:52] *** Joins: LiftLeft (~LiftLeft@154.16.192.8)
[07:21:43] <setuid> Is there a better way to loop through the dict, sort of creating it dynamically, so I don't have to carry this big, monstrous, 134 line dict in the top of my code?
[07:22:24] *** Joins: Atque (~Atque@user/atque)
[07:22:41] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[07:23:47] <SnoopJ> setuid, what would the inputs to the generator be? I'm not entirely understanding what you want to generate.
[07:24:15] <setuid> I guess I would input a region (emea, apac, amer), and a city, and it would spit out the expanded versions of those... hrm, maybe I'm over-thinking this
[07:28:08] *** Quits: foozle (~foozle@2001-b011-c001-309a-481d-58c2-655a-860b.dynamic-ip6.hinet.net) (Quit: Leaving)
[07:28:59] *** Quits: Gaming4JC (~user@user/gaming4jc) (Quit: Zzz)
[07:30:55] *** Joins: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com)
[07:32:31] *** Joins: darksun (~darksun@user/darksun)
[07:37:56] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 252 seconds)
[07:41:24] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[07:43:26] *** Quits: zhangxiaofei (~fzhan@111.203.234.210) (Ping timeout: 252 seconds)
[07:43:53] *** Quits: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com) (Quit: *POOF*)
[07:45:31] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[07:45:47] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:45:54] *** Parts: setuid (sid191390@canonical/setuid) (back later, thanks SnoopJ)
[07:46:34] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[07:47:03] *** Joins: m4ug (~m4ug@99.72.30.19)
[07:47:46] *** Joins: GenTooMan (~cyberman@c-73-214-106-63.hsd1.pa.comcast.net)
[07:50:01] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[07:52:17] *** Joins: cjb (~cjb@user/cjb)
[07:53:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[07:54:29] *** Joins: wyclif (~wyclif@user/wyclif)
[07:58:59] <BrenBarn> if you don't want to keep the dict in your code, export it to CSV or some external file and then load it in
[07:59:24] *** Quits: GenTooMan (~cyberman@c-73-214-106-63.hsd1.pa.comcast.net) (Ping timeout: 255 seconds)
[07:59:33] *** Quits: ckdCreations (~ckdCreati@147.55.130.34) (Read error: Connection reset by peer)
[07:59:45] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:01:06] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[08:02:27] *** Joins: darksun (~darksun@user/darksun)
[08:02:31] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[08:02:53] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[08:02:53] *** Joins: derelict (~derelict@user/derelict)
[08:03:51] *** Joins: zaquest (~notzaques@5.128.210.178)
[08:07:35] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 265 seconds)
[08:08:32] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[08:10:29] *** Quits: zerotypic (~zerotypic@66.96.192.176) (Ping timeout: 265 seconds)
[08:12:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[08:13:03] *** Joins: wyclif (~wyclif@user/wyclif)
[08:15:30] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[08:15:50] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[08:22:20] *** Joins: pnoud (~pnoud@user/pnoud)
[08:25:01] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:27:24] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[08:28:08] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:31:58] *** Joins: foozle (~foozle@2001-b011-c001-309a-1e4b-9f6f-055a-48ee.dynamic-ip6.hinet.net)
[08:34:14] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 255 seconds)
[08:34:54] *** Quits: eagleOne (~eramirez@2001:4453:3ee:a900:7b50:f857:fa7b:fed8) (Remote host closed the connection)
[08:36:03] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:39] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:40:26] *** Joins: djapo (~archangel@user/djapo)
[08:42:11] *** Joins: pnoud (~pnoud@user/pnoud)
[08:43:02] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[08:45:46] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[08:45:56] <hays> biggus dictus
[08:46:54] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[08:47:13] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[08:47:59] *** Joins: Wulf (~Wulf@user/wulf)
[08:49:03] *** Parts: PinealGlandOptic (~PinealGla@37.115.210.35) ()
[08:53:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:01:03] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-6573-eb09-6a06-4395.res6.spectrum.com) (Ping timeout: 255 seconds)
[09:06:42] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Read error: Connection reset by peer)
[09:07:19] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[09:09:59] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[09:11:22] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[09:13:19] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[09:13:44] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[09:16:32] *** Joins: Vonter (~Vonter@user/vonter)
[09:16:42] *** Quits: adamts (~Adam@user/mysteryblokhed) (Ping timeout: 265 seconds)
[09:18:23] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[09:18:41] *** Quits: alxndr (~alexander@ybti.net) (Remote host closed the connection)
[09:22:19] *** Joins: alxndr (~alexander@ybti.net)
[09:24:54] *** Quits: emika (~emika@185.207.249.193) (Ping timeout: 255 seconds)
[09:24:56] *** Quits: bambams (~bambams@user/bambams) (Quit: Changing server)
[09:25:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[09:25:09] *** Joins: emika (~emika@185.207.249.10)
[09:25:45] <hendry> habnabit_, FunkyBob: thanks btw guys for the pointers. Never seen eliot-tree before. Wow, does Go have this? lol
[09:25:47] *** Joins: bambams (~bambams@user/bambams)
[09:26:00] <habnabit_> hendry, golang doesn't tend to have good ideas, so idk
[09:27:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[09:28:44] *** Joins: stranac (~stranac@195.29.239.126)
[09:29:04] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:29:43] *** bambams__ is now known as bam32
[09:29:51] *** Joins: Julian (~tos9@python/site-packages/Julian)
[09:29:51] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[09:30:54] *** Joins: bam32_ (~bambams@user/bambams)
[09:31:04] *** Quits: bam32_ (~bambams@user/bambams) (Client Quit)
[09:31:15] *** Quits: philipp64|work (~philipp64@174.27.8.12) (Quit: philipp64|work)
[09:33:30] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 246 seconds)
[09:34:21] *** Quits: LiftLeft (~LiftLeft@154.16.192.8) (Ping timeout: 255 seconds)
[09:35:30] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (Ping timeout: 240 seconds)
[09:35:33] *** Joins: dvx (~dvx@185.63.97.64)
[09:37:11] <hendry> habnabit_: gofmt is pretty cool. so is API stability.
[09:38:32] *** Joins: cjb (~cjb@user/cjb)
[09:40:13] *** Joins: philipp64|work (~philipp64@174.27.8.12)
[09:40:56] *** Quits: philipp64|work (~philipp64@174.27.8.12) (Client Quit)
[09:43:31] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:45:15] *** Joins: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr)
[09:45:15] *** Joins: isekaijin (~pyon@user/pyon)
[09:45:20] *** Quits: bam32 (~bambams@user/bambams) (Remote host closed the connection)
[09:46:34] *** Quits: isekaijin (~pyon@user/pyon) (Client Quit)
[09:46:38] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[09:47:08] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 255 seconds)
[09:47:18] *** Joins: y1n (~y1n@84-115-64-204.wifi.dynamic.surfer.at)
[09:47:20] *** Joins: Jacktar_ (~whiteshad@gateway/tor-sasl/jacktar)
[09:47:41] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Remote host closed the connection)
[09:48:01] *** Joins: isekaijin (~pyon@user/pyon)
[09:48:01] *** Jacktar_ is now known as jacktar
[09:49:54] <hendry> is there a good simple Dockerfile starter? Just curious to know if there a canonical location for where code should live for example
[09:50:59] *** Parts: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr) ()
[09:51:07] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[09:51:49] <Wulf> hendry: https://hub.docker.com/_/python
[09:52:14] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: Ping timeout (120 seconds))
[09:52:34] <Wulf> hendry: but I disagree with what they're doing :)
[09:52:39] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[09:53:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 255 seconds)
[09:53:53] <Wulf> hendry: I suggest you use a venv in docker containers too
[09:55:15] <habnabit_> hendry, canonical? no
[09:55:19] <habnabit_> hendry, here's mine tho https://github.com/pound-python/infobob/blob/master/Dockerfile
[09:55:34] <hendry> Wulf: the COPY . . looks daft to me
[09:56:03] <habnabit_> hendry, how so? it sets a sensible WORKDIR?
[09:56:52] <hendry> habnabit_: ah, I didn't see that
[09:58:59] *** Joins: philipp64|work (~philipp64@174.27.8.12)
[09:59:02] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[09:59:40] *** Joins: Julian (~tos9@python/site-packages/Julian)
[10:01:10] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[10:01:24] *** Joins: LiftLeft (~LiftLeft@37.19.198.130)
[10:01:56] *** Joins: econdudeawesome (~shadowfax@cpe-76-187-70-50.tx.res.rr.com)
[10:02:19] *** Joins: darksun (~darksun@user/darksun)
[10:02:32] <AhmedAmerican> `bpa.st` is down ?
[10:02:43] *** Quits: isekaijin (~pyon@user/pyon) (Quit: WeeChat 3.2)
[10:04:03] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 255 seconds)
[10:04:07] *** Joins: unyu (~pyon@user/pyon)
[10:05:01] <AhmedAmerican> async def get_reqdata():
[10:05:01] <AhmedAmerican>     driver = webdriver.Firefox()
[10:05:01] <AhmedAmerican>     driver.get('https://www.zocdoc.com/search?insurance_carrier=-1&insurance_plan=-1&searchType=specialty&reason_visit=130&search_query=OB-GYN (Obstetrician-Gynecologist)&dr_specialty=104')
[10:05:01] <AhmedAmerican>     try:
[10:05:01] <AhmedAmerican>         WebDriverWait(driver, 10).until(
[10:05:02] <AhmedAmerican>             EC.text_to_be_present_in_element(
[10:05:02] <AhmedAmerican>                 (By.PARTIAL_LINK_TEXT, "REDUX_STATE"))
[10:05:03] <AhmedAmerican>         )
[10:05:03] <AhmedAmerican>         
[10:05:04] <AhmedAmerican>     except TimeoutException:
[10:05:04] <AhmedAmerican>         exit("Unable To Get The Initial Data")
[10:05:05] <AhmedAmerican>     finally:
[10:05:05] <AhmedAmerican>         driver.quit()
[10:05:08] <AhmedAmerican> ops
[10:05:22] <AhmedAmerican> https://www.irccloud.com/pastebin/tFJ2Dewn/
[10:05:33] <AhmedAmerican> am getting `TypeError: __init__() missing 1 required positional argument: 'text_'` why?
[10:07:01] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[10:07:02] *** Joins: upsala (~zcb@185.213.155.160)
[10:07:30] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[10:11:12] <InPhase> AhmedAmerican: See that extra pair of parentheses around your text_to_be...element constructor?  That turns it into a tuple instead of the two arguments you are trying to send.
[10:12:09] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[10:13:43] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[10:16:50] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 255 seconds)
[10:17:23] *** Quits: econdudeawesome (~shadowfax@cpe-76-187-70-50.tx.res.rr.com) (Quit: leaving)
[10:19:09] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[10:21:37] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:c9fa:c121:1961:11d6)
[10:22:31] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[10:22:31] <AhmedAmerican> InPhase:  that's incorrect! https://selenium-python.readthedocs.io/waits.html#explicit-waits
[10:24:44] *** Joins: palasso (~palasso@user/palasso)
[10:25:30] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[10:26:52] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[10:27:11] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:29:33] <BrenBarn> where's the full traceback?
[10:29:37] *** Joins: pnoud (~pnoud@user/pnoud)
[10:30:02] *** Quits: WizardGe- (~WizardGed@user/wizardged) (Quit: Quit)
[10:30:33] *** Joins: darksun (~darksun@user/darksun)
[10:31:00] *** Joins: WizardGed (~WizardGed@user/wizardged)
[10:31:24] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[10:31:59] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[10:32:00] <AhmedAmerican> https://www.irccloud.com/pastebin/rAUzWNS5/
[10:32:01] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.2)
[10:32:06] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:32:09] <AhmedAmerican> beanzilla: ^
[10:32:20] <AhmedAmerican> BrenBarn: ^
[10:32:27] <AhmedAmerican> sorry wrong metnion beanzilla
[10:35:56] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 256 seconds)
[10:35:56] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 256 seconds)
[10:35:58] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 265 seconds)
[10:36:30] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[10:36:31] *** Joins: AlanMD_ (~AlanMD@5-12-8-103.residential.rdsnet.ro)
[10:39:21] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 265 seconds)
[10:40:26] <jinsun> AhmedAmerican: https://selenium-python.readthedocs.io/api.html#selenium.webdriver.support.expected_conditions.text_to_be_present_in_element
[10:40:53] <jinsun> it says you have to give 2 arguments locator and text_, but you are giving only one tuple as argument
[10:43:13] <BrenBarn> the selenium example that you linked to is using `presence_of_element_located`
[10:43:26] <BrenBarn> but you're using `text_to_be_present_in_element`
[10:43:41] <BrenBarn> presumably for that condition you need to specify the text you want to be present in the element
[10:45:02] <BrenBarn> you can see the docs here: https://selenium-python.readthedocs.io/api.html#selenium.webdriver.support.expected_conditions.text_to_be_present_in_element
[10:45:58] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:29] *** Joins: seednode (~seednode@user/seednode)
[10:48:37] *** Joins: pagnol (~user@202.155.216.98)
[10:48:46] <p-i-> dt = datetime.utcfromtimestamp(time()). But if I convert it back with dt.timestamp(), I get 7h difference (my machine is in UTC+7).
[10:49:25] <p-i-> This is so confusing. The name utcfromtimestamp implies a timezone-aware datetime object.
[10:49:48] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:49:55] <p-i-> How can a timezone-aware datetime object fail to return its unix timestamp?
[10:50:24] <p-i-> I always end up fighting with datetime.
[10:51:01] <p-i-> Is there a preferred way to do this kind of work?
[10:51:12] *** Quits: y1n (~y1n@84-115-64-204.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[10:51:50] *** Joins: y1n (~y1n@84-115-64-246.wifi.dynamic.surfer.at)
[10:53:30] <p-i-> jeez https://blog.ganssle.io/articles/2019/11/utcnow.html
[10:55:14] *** Joins: dodobrain__ (~dodobrain@user/dodobrain)
[10:55:22] *** Joins: chele (~chele@user/chele)
[10:58:53] *** Joins: rendar (~rendar@user/rendar)
[10:58:58] *** Joins: gusto (~Augustus@2620:149:e0:6002::95)
[10:59:10] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 265 seconds)
[10:59:22] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[11:00:11] *** Quits: ttkap (~ttkap@user/ttkap) (Quit: WeeChat 3.2)
[11:00:26] *** Joins: pnoud (~pnoud@user/pnoud)
[11:01:02] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:03:45] *** Quits: pnoud (~pnoud@user/pnoud) (Read error: Connection reset by peer)
[11:04:44] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:05:08] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4d9e-129d-662b-32a5.res6.spectrum.com)
[11:05:21] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:05:26] *** Joins: pnoud (~pnoud@user/pnoud)
[11:07:33] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[11:07:55] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:08:24] *** Quits: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (Ping timeout: 255 seconds)
[11:08:24] *** Joins: frost (~frost@59.71.241.179)
[11:09:45] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4d9e-129d-662b-32a5.res6.spectrum.com) (Ping timeout: 255 seconds)
[11:13:59] *** Joins: doev (~doev@p549d77d0.dip0.t-ipconnect.de)
[11:16:16] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:17:40] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:20:28] *** Quits: cornduck (~cornduck@li1755-129.members.linode.com) (Read error: Connection reset by peer)
[11:20:32] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 245 seconds)
[11:22:24] <deniska> p-i-: that's (one of the reasons) why many people use some alternative to datetime for anything beyond trivial tasks
[11:22:37] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:23:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:23:38] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[11:23:56] <p-i-> https://hastebin.com/uyetucevav.py
[11:24:02] <p-i-> What a mess!
[11:24:19] <p-i-> deniska: What would you recommed?
[11:24:35] <deniska> p-i-: dunno, I only dealt with trivial tasks so far :)
[11:25:03] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:25:03] <deniska> pendulum and arrow are two names I hear thrown around often
[11:25:07] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Remote host closed the connection)
[11:25:14] <deniska> but can't say anything more particular
[11:25:18] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[11:25:45] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:25:58] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[11:26:51] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[11:26:53] <p-i-> It's a really awkward problem with s/w dev... corelibs have to support past fails for compatibility, and it hinders the evolution of the python ecosystem.
[11:27:05] *** Joins: morrigan_ (~m0rr1gan@user/m0rr1gan)
[11:27:18] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 255 seconds)
[11:27:18] *** Quits: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[11:27:29] <p-i-> I've recently bumped into it with asyncio vs trio
[11:27:37] *** Quits: LiftLeft (~LiftLeft@37.19.198.130) (Ping timeout: 258 seconds)
[11:27:45] *** Joins: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com)
[11:27:49] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[11:27:59] <deniska> "standard library is where packages go to die" or something along these lines
[11:28:04] <p-i-> haha
[11:28:19] <p-i-> sounds about right
[11:28:29] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (Ping timeout: 252 seconds)
[11:28:46] <deniska> (but I still glad to have such gems as datetime or urllib.request when I find myself on airgapped machines)
[11:29:08] *** Quits: dodobrain__ (~dodobrain@user/dodobrain) (Ping timeout: 265 seconds)
[11:29:46] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[11:33:47] *** Joins: ttkap (~ttkap@user/ttkap)
[11:34:11] *** Joins: unyu (~pyon@user/pyon)
[11:34:41] *** Quits: gusto (~Augustus@2620:149:e0:6002::95) (Quit: Textual IRC Client: www.textualapp.com)
[11:35:25] *** Quits: y1n (~y1n@84-115-64-246.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[11:36:20] *** Quits: sydbarret (~anton@static-186-121-195-27.acelerate.net) (Remote host closed the connection)
[11:36:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[11:36:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[11:40:08] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[11:42:09] *** Quits: computeiro (~Wender@189.37.65.69) (Ping timeout: 255 seconds)
[11:43:36] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-118.hsi5.kabel-badenwuerttemberg.de)
[11:43:42] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Client Quit)
[11:44:30] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:44:43] *** Quits: doev (~doev@p549d77d0.dip0.t-ipconnect.de) (Quit: Client closed)
[11:46:22] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:46:33] *** Joins: y1n (~y1n@84-115-64-246.wifi.dynamic.surfer.at)
[11:47:19] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[11:48:08] *** Joins: doev (~doev@p549d77d0.dip0.t-ipconnect.de)
[11:48:34] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[11:49:03] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:50:28] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[11:50:54] *** Joins: Naan (~Naan@user/naan)
[11:51:29] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:51:35] *** Quits: y1n (~y1n@84-115-64-246.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[11:51:52] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[11:52:30] *** Joins: p-i-_ (~Ohmu@113.53.162.9)
[11:53:07] <madprops> bpa.st is not working
[11:53:28] *** Joins: y1n (~y1n@84-115-64-246.wifi.dynamic.surfer.at)
[11:53:38] *** Quits: p-i- (~Ohmu@node-rsn.pool-118-173.dynamic.totinternet.net) (Read error: Connection reset by peer)
[11:54:12] <madprops> is this the best way to do this? https://pastebin.com/2VQrYrCi
[11:54:29] *** Quits: ELFrederich (~ELFrederi@134.244.29.70) (Remote host closed the connection)
[11:54:45] *** Quits: haniaF (~haniaF@79.191.100.82.ipv4.supernova.orange.pl) (Ping timeout: 255 seconds)
[11:55:12] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[11:55:14] *** Quits: y1n (~y1n@84-115-64-246.wifi.dynamic.surfer.at) (Remote host closed the connection)
[11:55:27] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Remote host closed the connection)
[11:55:47] *** Joins: y1n (~y1n@84-115-64-246.wifi.dynamic.surfer.at)
[11:56:47] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[11:56:48] *** Joins: ELFrederich (~ELFrederi@134.244.29.70)
[11:57:24] <KirkMcDonald> madprops: Depends on what "this" is suppsed to be, exactly, but I will say it's a bit silly to mix pathlib and os.path like this.
[11:57:37] <madprops> yeah that's the issue i have
[11:57:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[11:57:46] <madprops> path.isdir() is not working
[11:57:50] <madprops> 'PosixPath' object has no attribute 'isdir
[11:57:54] <KirkMcDonald> madprops: It is spelled is_dir()
[11:57:58] <madprops> oh
[11:58:21] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:58:45] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[11:58:54] <Repiphany> Why do you need to check for those capitalization variations specifically
[11:59:25] <madprops> to attempt to find a directory in ~ with that name or with a slight variation
[11:59:56] <Repiphany> I mean do you also care about paThS_liKe_THis
[12:00:23] <madprops> yeah it's not perfect. but it's a last resource thing in my script
[12:00:48] <madprops> i don't want to list the dir in case it's huge
[12:01:23] *** Quits: y1n (~y1n@84-115-64-246.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[12:01:47] *** Joins: y1n (~y1n@046125249118.public.t-mobile.at)
[12:01:51] *** Quits: Atque (~Atque@user/atque) (Read error: Connection reset by peer)
[12:01:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 255 seconds)
[12:02:15] <madprops> I now only use os for os.getenv("PWD")
[12:02:49] *** Quits: dalan6 (~dalan@61-68-95-57.static.tpgi.com.au) (Quit: Ping timeout (120 seconds))
[12:02:51] *** Quits: audio (~audio@2603-8081-1800-00ad-2c88-9cd6-b19c-1300.res6.spectrum.com) (Ping timeout: 255 seconds)
[12:03:09] *** Joins: dalan6 (~dalan@61-68-95-57.static.tpgi.com.au)
[12:04:12] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[12:07:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:07:42] *** Parts: azrdev (azrael@turing.chaos.hg.tu-darmstadt.de) (WeeChat 3.2)
[12:08:12] *** Quits: eyepeetee (~aa@075-135-186-198.res.spectrum.com) (Changing host)
[12:08:12] *** Joins: eyepeetee (~aa@user/eyepeetee)
[12:10:53] *** Quits: foozle (~foozle@2001-b011-c001-309a-1e4b-9f6f-055a-48ee.dynamic-ip6.hinet.net) (Quit: Leaving)
[12:12:17] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[12:13:07] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:13:50] <madprops> do I save something if I do: from os import getenv
[12:13:56] <madprops> instead of import os ?
[12:13:59] <madprops> every millisecond counts
[12:14:12] <deniska> no
[12:14:29] <madprops> huh
[12:15:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:19] *** Joins: darksun (~darksun@user/darksun)
[12:15:31] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[12:17:12] <sunny93> hey guys, I know that I can dynamically create a function from str with `exec`, but can i create a class with `exec`?
[12:17:15] <Repiphany> madprops: https://pastebin.com/b3gry4Ps
[12:17:34] *** Parts: mawk (mawk@wireguard/contributor/mawk) (Leaving)
[12:17:35] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:7017:e0c2:e396:b384) (Quit: Leaving)
[12:17:39] *** Joins: mawk (mawk@wireguard/contributor/mawk)
[12:17:51] <Repiphany> You should really do proper code profiling to find where time can be substantially saved rather than quibbling about microseconds
[12:17:58] *** Quits: blaisebool (~blaiseboo@static.247.123.46.78.clients.your-server.de) (Quit: ZNC - https://znc.in)
[12:18:36] *** Joins: sincorchetes (~sincorche@2.red-79-146-41.dynamicip.rima-tde.net)
[12:18:36] <madprops> so there is a difference
[12:18:40] <sincorchetes> Hi
[12:18:45] <madprops> oh wait usec vs nsec
[12:19:04] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[12:19:10] <gitesh> why functions?
[12:19:18] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[12:19:44] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[12:20:48] <madprops> Repiphany, I'm a bit confused, is doing simply import os runnning faster?
[12:21:08] <sincorchetes> How do developers develop system libraries without use Bash for example? I have a pstree command, but I want to use it in Python. So, do I have to build a library with a subprocess module?
[12:21:18] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 255 seconds)
[12:21:21] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:22:06] <Repiphany> madprops: Better test, https://pastebin.com/xVnG8s2X
[12:22:32] *** Joins: azazello (~azazello@109.75.158.195)
[12:24:14] <Repiphany> from ... import ... is faster because you don't have to lookup the module namespace but it's not even worth thinking about unless you're calling the function millions of times or something
[12:24:28] *** Joins: gusto (~Augustus@109.255.100.54)
[12:24:28] <Repiphany> from an optimization perspective
[12:24:44] *** Quits: dre (~dre@2001:8003:c932:c301:482c:1f78:f040:9036) (Ping timeout: 256 seconds)
[12:24:51] <madprops> i see
[12:25:21] *** Quits: pagnol (~user@202.155.216.98) (Ping timeout: 255 seconds)
[12:26:28] *** Joins: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38)
[12:28:10] *** Quits: jiffy (elijah@has.a.fluffy.sh33p.org) (Quit: ZNC - http://znc.in)
[12:28:41] *** Joins: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr)
[12:28:45] <rendar> `%-d	8	Day of the month as a decimal number. (Platform specific)` <- platform specific?
[12:30:39] <madprops> what is the + (plus) for in r+ w+ when dealing with files?
[12:31:12] *** Joins: pagnol (~user@202.155.216.98)
[12:31:14] <leduyquang753> "open for updating (reading and writing)"
[12:31:55] <grawity> "r+" opens for read/write without truncation, "w+" opens for read/write but still truncates (like "w" alone would)
[12:32:16] <madprops> truncation means overwriting?
[12:32:23] <grawity> no, it means truncation
[12:32:38] <grawity> like, as soon as you open a file with "w" or "w+" it is immediately chopped off to 0 bytes
[12:32:47] *** Joins: eldenring0 (uid506233@id-506233.tooting.irccloud.com)
[12:33:01] <grawity> but if you open with "r+", its original contents remain and *then* you can overwrite them
[12:33:22] <grawity> so in this context, truncation is kiiinda the opposite of overwriting, even?
[12:33:43] <madprops> if I want to replace the whole file, is it better to just use w+/w then?
[12:33:51] <madprops> with r+ i would need to remove lines manually?
[12:34:07] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[12:34:54] <madprops> I was using r+ to read
[12:35:00] <madprops> but I guess that's not necessary
[12:35:58] <VaniaPy> hi,how can i sort a list of objects by time and magnitude let's say
[12:36:15] *** Quits: doev (~doev@p549d77d0.dip0.t-ipconnect.de) (Quit: Client closed)
[12:36:24] *** Quits: AlanMD_ (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 252 seconds)
[12:36:35] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:47] <Repiphany> Something like sorted(list_of_objects, key = lambda x : (x.time, x.magnitude))
[12:36:54] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:36:54] *** Quits: tnez (~el@user/tnez) (Read error: Connection reset by peer)
[12:37:19] <VaniaPy> Repiphany ok,i;ll try that out thanks
[12:37:22] <wyre> https://docs.python.org/3/distutils/setupscript.html#installing-scripts where should be the --executable option be specified?
[12:37:27] *** Joins: fdan (~fdan@192.146.154.3)
[12:38:00] *** Joins: bidouille (~user_name@trois.potager.org)
[12:38:08] <madprops> use minus for reverse sort
[12:38:13] <madprops> -x.time
[12:38:29] <madprops> (if you need that)
[12:38:44] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::791f)
[12:38:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:09] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 265 seconds)
[12:41:35] <fdan> Hi there
[12:41:36] <fdan> https://dpaste.org/P7ff
[12:41:45] <fdan> i have a list of dictionaries
[12:41:59] <jinsun> rendar: that means it may not be available on all platforms, so don't use it in portable code, on windows I get invalid format string
[12:42:00] <fdan> i want to print the value of AWS_ACCESS_KEY_ID
[12:43:28] <fdan> could someone help me
[12:43:49] <rendar> jinsun: so how can i format day number without the padding 0 ?
[12:44:27] *** Joins: vladoski (~vladoski@2001:b07:add:d406:ec49:7189:2fdb:6b78)
[12:45:33] <vladoski> if I have list like [[1, 2], [2, 3], [3,4]], is it possible to have something like a = [1, 2, 3] and b = [2, 3, 4] by using list comprehensions?
[12:45:51] <vladoski> or having them in an easier way
[12:45:57] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[12:45:59] <madprops> rendar, have you checked the table here https://docs.python.org/3/library/datetime.html
[12:46:32] <Repiphany> vladoski: a, b = zip(*[[1, 2], [2, 3], [3, 4]])
[12:47:26] <vladoski> Repiphany, okay thanks, what does * do?
[12:47:30] <fdan> https://dpaste.org/P7ff
[12:47:40] <fdan> i want to extract the value for AWS_ACCESS_KEY_ID
[12:48:07] <Repiphany> Unpacks the outside list and passes to zip
[12:48:21] <Repiphany> zip(*[a, b, c]) is the same as zip(a, b, c)
[12:48:24] *** Joins: gggp (~gggp@123.113.186.218)
[12:49:26] *** Joins: shad (~shad@user/shad)
[12:51:27] <jinsun> rendar: well you could use %-d if it works on your system and you will not send your code to others
[12:51:27] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[12:52:29] <rendar> or?
[12:52:59] <jinsun> rendar: or just ditch strftime and manually format it with string formatting. for example f"{datetime(2021, 7, 8).day}" will give 8 and not 08
[12:53:15] <rendar> i see
[12:53:58] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[12:54:38] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[12:55:09] *** Joins: mikeliuk (~mikeliuk@213.205.198.158)
[12:59:14] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[13:03:57] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[13:04:59] <Kingsy> When using marshmallow - If I have a line like this -> locations = fields.Nested(LocationSchema()) <- that outputs locations = { ... } how do I change it so it outputs   locations = [{  ...  }]  so basically just wrap the thing in a list? I have tried encapsulating it in a fields.List() and simply a []
[13:05:30] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:05:44] *** Quits: pagnol (~user@202.155.216.98) (Ping timeout: 252 seconds)
[13:05:56] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[13:10:48] *** Joins: colegatron (~colegatro@86.127.251.171)
[13:11:19] <colegatron> Hi. there is alive people here?
[13:11:29] <wyre> colegatron, nope
[13:11:37] <wyre> !ask
[13:11:48] <colegatron> great, it way better response than in freenode :-)
[13:11:57] <wyre> upss, I don't know how to use the channel bot ðŸ˜ž
[13:13:24] *** jpe__ is now known as sharperguy
[13:13:39] <colegatron> yet :-) don't worry. It can't be harder to fix than my django/python's knowledge ;-)
[13:15:09] <Kingsy> oh nm got it
[13:15:11] <Kingsy> sorry all
[13:17:54] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[13:17:55] *** Joins: pagnol (~user@014198154145.ctinets.com)
[13:18:47] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[13:20:09] <Luyin> graingert: hey, I've got another question about pyproject.toml. Do you still use setup.py or setup.cfg? I've just noticed that I'm duplicating info between the two files (toml + the other, whichever it is), and wondering whether there might be a smarter way (e.g. getting rid of the setup.{py,cfg})
[13:20:33] <graingert> Luyin: sometimes
[13:20:49] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:20:53] <graingert> Luyin: If you're not using setuptools you doing need setup.py
[13:21:09] <graingert> Luyin: If you're not using setuptools you don't need setup.py
[13:21:26] <graingert> If you are using setuptools you might need setup.py
[13:21:35] <graingert> But it's possible and cool to avoid it
[13:21:55] <The-Compiler> colegatron: this channel is quite active, the freenode one is pretty much dead after the official community moved here
[13:21:56] <Luyin> I would like to reduce the deps as far as possible, so _can_ I go without setuptools? right now it's a requirement per my [build-system].requires config option
[13:22:29] <Luyin> I see that your sample pyproject.toml doesn't have that requirement
[13:22:45] <Luyin> https://github.com/PyCQA/modernize/blob/master/pyproject.toml#L2
[13:24:18] *** Joins: masber (~masber@dhcp-133-191.cscs.ch)
[13:24:27] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[13:24:32] <Luyin> when I install the package with `pip install -e .`, would pip require setuptools or would it be cool with pulling the info from tool.flit.metadata?
[13:25:12] *** Quits: mei (~mei@user/mei) (Quit: mei)
[13:25:15] <colegatron> The-Compiler, didn't know about the incident. I was curious why that much silence and hopefully a user mentioned it in freenode#python and now I'm registered again. It is good to see people reacting.
[13:25:44] <fdan> hi there
[13:25:46] <fdan> https://dpaste.org/P7ff
[13:25:49] <fdan> can someone help me
[13:26:18] <fdan> i want to extract just the value of AWS_ACCESS_KEY_ID
[13:26:55] <The-Compiler> colegatron: https://gist.github.com/joepie91/df80d8d36cd9d1bde46ba018af497409 has some of the history - but we should probably take this to #python-offtopic :)
[13:27:12] <Luyin> fdan: you'll want to parse that string with json
[13:27:49] <colegatron> The-Compiler, np. problem found, problem fixed, next problem.
[13:28:09] *** Joins: outsider (~sierkov@c89-176.i07-23.onvol.net)
[13:28:46] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:28:52] *** Quits: mikeliuk (~mikeliuk@213.205.198.158) (Quit: Connection closed)
[13:29:27] <wyre> are by default scripts installed in /usr/bin when I run pip3 install as root?
[13:29:39] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[13:29:45] <wyre> I mean, when I run pip3 install . as a normal user the scripts are stored in .local/bin
[13:29:51] <colegatron> I am using django2.1.5 in a legacy project. I am trying to register the signals receivers() into the apps.py ready() method as specified in the doc. it does not seems to work, but if I put the import in the models.py, it does. any clue?
[13:29:53] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[13:29:58] <wyre> so I guess if I do this as root they should be stored in /usr/bin, right?
[13:30:21] *** Joins: rsx (~dummy@ppp-188-174-157-10.dynamic.mnet-online.de)
[13:31:12] <fdan> Luyin could you share me the snippet
[13:31:46] *** Quits: outsider (~sierkov@c89-176.i07-23.onvol.net) (Client Quit)
[13:31:58] <Luyin> fdan: depends on how you're obtaining this string. if I put this string into a file and try to read it, I get errors because they're escaped with ' instead of ". So reading that *string* doesn't really work out.
[13:32:01] *** Joins: outsider (~sierkov@c89-176.i07-23.onvol.net)
[13:32:13] <Luyin> fdan: you might want to read up on https://docs.python.org/3/library/json.html#json.load :)
[13:32:25] <colegatron> wyre, do not know. I would recommend to use pyenv in order to do not mess with the OS interpreter. that way you'll keep your project dependencies isolated.
[13:33:08] <wyre> colegatron, sure, but I'm working on an embedded system and you know, this is a little different
[13:33:21] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 265 seconds)
[13:33:22] <wyre> the whole OS is intended to perform a single task
[13:34:06] <graingert> Luyin: I don't use `pip install -e`
[13:34:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[13:34:16] <graingert> Luyin: currently it needs setuptools
[13:34:20] <Luyin> fdan: https://paste.xinu.at/jUBsK/
[13:34:25] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[13:34:35] <Luyin> graingert: how would you install a package that's not on PyPI instead?
[13:35:12] *** Joins: evilissimo (~vfeenstr@redhat/evilissimo)
[13:35:42] <fdan> Luyin the snippet is not working
[13:35:46] *** Quits: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153) (Quit: raek)
[13:36:12] <Luyin> of course it isn't
[13:36:18] <Luyin> it's not executable code
[13:36:34] <Luyin> it's showing the error I get
[13:36:45] <Luyin> because of this: 11:01 <Luyin> fdan: depends on how you're obtaining this string. if I put this string into a file and try to read it, I get errors because they're escaped with ' instead of ". So reading that *string* doesn't really work out.
[13:36:58] <Luyin> fdan: where does the string come from?
[13:37:03] <colegatron> wyre. ok, sorry, but not sure who owns what in a regular installation. I only use virtual envs. sorry
[13:37:08] <fdan> it comes from a binary
[13:37:37] <fdan> my bad
[13:37:39] *** Joins: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[13:37:40] <fdan> i gave a wrong syntax
[13:37:50] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[13:38:14] *** Joins: darksun (~darksun@user/darksun)
[13:38:40] <fdan> Luyin https://dpaste.org/s7p1
[13:38:40] *** Joins: mikeliuk (~mikeliuk@213.205.198.158)
[13:38:52] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[13:41:26] <Luyin> "snippet no longer exists" fdan
[13:41:44] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[13:42:05] <fdan> https://dpaste.org/DVtP
[13:42:10] <fdan> Luyin
[13:43:25] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[13:43:37] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[13:43:39] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 255 seconds)
[13:43:43] <Luyin> I get the same error as before
[13:43:56] <Luyin> the strings need to be enclosed by "", not ''
[13:44:07] <Luyin> I don't know if there's a config option for json to switch that or something
[13:44:14] <Luyin> somebody was here yesterday with a similar problem
[13:45:01] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[13:45:32] <Luyin> also btw, are you sure this is how it's coming from your source? the AWS_ACCESS_KEY_ID isn't even enclosed: `'line': 'AWS_ACCESS_KEY_ID=------------- ` - I'd have expected a closing ' after "ID" like this: `'line': 'AWS_ACCESS_KEY_ID'=-------------`
[13:46:22] <fdan> https://dpaste.org/im5j#L1
[13:46:38] <fdan> i have redacted the aws keys Luyin
[13:46:39] *** Quits: liam (sid7517@id-7517.brockwell.irccloud.com) (Ping timeout: 252 seconds)
[13:47:26] <madprops> is there a better way to check if it's a subdir?  https://dpaste.org/oCg5
[13:48:08] *** Joins: varaindemian (~varaindem@86.124.78.162)
[13:48:09] *** Joins: liam (sid7517@id-7517.brockwell.irccloud.com)
[13:49:13] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:49:21] <madprops> correct one: https://dpaste.org/avfT
[13:50:20] *** Joins: Deadly_Alive (Deadly_Ali@user/deadly-alive/x-7001497)
[13:50:41] <Deadly_Alive> hey all
[13:50:45] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[13:50:49] <Deadly_Alive> i don't like python
[13:51:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:51:01] *** Joins: Blankspace (~abcd@user/blankspace)
[13:51:03] <Deadly_Alive> i think Boa constrictors are better
[13:51:09] *** Joins: emika7 (~emika@83.136.182.80)
[13:51:22] *** Quits: emika (~emika@185.207.249.10) (Ping timeout: 258 seconds)
[13:51:23] *** emika7 is now known as emika
[13:51:58] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Quit: WeeChat 3.2)
[13:52:04] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Client Quit)
[13:52:08] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Ping timeout: 258 seconds)
[13:52:23] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:53:30] <jor> fdan: to parse that value really depends on the source and possible formatting. This looks like lines of some from of shell script, so that has many many options and would be hard to reliably parse
[13:54:07] <jor> fdan: but quick-n-dirty split on ' '  then on '='... or a regexp is you only want a single/couple if values and can ignore the rest
[13:54:18] *** Joins: christover (~christove@8.47.69.131)
[13:55:00] <Repiphany> madprops: How is filterpath checking for a subdir
[13:55:22] *** Parts: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr) ()
[13:55:30] <madprops> Repiphany, sorry I copid another def, they're similar
[13:55:32] <madprops> I meant this https://dpaste.org/2vZA
[13:57:10] <The-Compiler> Deadly_Alive: as you can probably imagine, this channel is about the programming language Python, not the snake
[13:58:02] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[13:58:31] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Quit: Client closed)
[13:58:49] *** Quits: y1n (~y1n@046125249118.public.t-mobile.at) (Ping timeout: 250 seconds)
[13:59:18] <Deadly_Alive> print "hello world" ?
[13:59:19] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[13:59:29] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[13:59:42] *** Joins: y1n (~y1n@84-115-65-163.wifi.dynamic.surfer.at)
[13:59:58] <The-Compiler> Deadly_Alive: except that'd be Python 2 syntax which is EOL since January 2020, but other than that, yeah
[14:00:26] *** Joins: pnoud (~pnoud@user/pnoud)
[14:00:33] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[14:00:38] <Deadly_Alive> how would you do it in Python 3?
[14:01:41] <eyepeetee> consistent with the syntax for calling functions
[14:02:18] <eyepeetee> honest question: why WAS the syntax for some things ever just a space?
[14:02:43] <The-Compiler> eyepeetee: it still is, for keywords like for, while, return, etc.
[14:03:08] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:03:12] <The-Compiler> eyepeetee: print used to be a keyword, and 'print "hello world"' was a statement rather than a function call, just like e.g. 'return 42'
[14:03:44] <madprops> what did python gain by using the function syntax on print?
[14:04:24] *** Joins: okamis (~okamis@81-235-235-237-no92.tbcn.telia.com)
[14:04:30] <madprops> using arguments on it?
[14:04:35] <eyepeetee> The-Compiler - that makes some sense, thank you
[14:04:47] <eyepeetee> madprops: i think it's just more intuitive
[14:05:09] <The-Compiler> madprops: consistency, additional arguments like end='', less weird syntax due to that (like print >>sys.stderr, "blah")
[14:05:18] <p-i-_> Obviously it's cleaner from an architectural PoV
[14:05:27] <The-Compiler> madprops: https://www.python.org/dev/peps/pep-3105/ has some background
[14:05:41] <p-i-_> Because it's moving code out of the language core into a library function
[14:05:44] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[14:06:25] *** Joins: darksun (~darksun@user/darksun)
[14:06:37] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[14:07:01] *** Joins: doev (~doev@p549d77d0.dip0.t-ipconnect.de)
[14:07:08] <p-i-_> Fewer Keywords => moving code from core to stdlib
[14:07:37] *** Joins: frost (~frost@59.71.241.179)
[14:09:55] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[14:10:23] <p-i-_> I've been meaning to remap my keyboard to make typing things like `print(f'{to_datetime(J["date"]}')` a little easier. But there's always something else to do.
[14:11:47] *** Joins: Fluxx (~Fluxx@user/fluxx)
[14:11:52] <okamis> hello, im using setuptools and I wonder how to build the same package twice and get the same thing/hash so that docker realizes that copy is cached
[14:12:15] *** Joins: alexyov4 (~alexyov@79.124.0.2)
[14:12:23] *** Quits: alexyov (~alexyov@79.124.0.2) (Read error: Connection reset by peer)
[14:12:23] *** alexyov4 is now known as alexyov
[14:12:55] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Quit: Teleporting ...)
[14:12:59] *** Quits: christover (~christove@8.47.69.131) (Remote host closed the connection)
[14:13:51] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:14:05] *** Joins: ioe (~is0ke3@user/is0ke3)
[14:14:12] <grawity> madprops: being able to define e.g. a class method named 'print' or a function argument named 'print'
[14:14:42] *** Quits: gggp (~gggp@123.113.186.218) (Ping timeout: 255 seconds)
[14:14:43] *** Joins: ThanatosJ (~Thanatos@197.210.45.60)
[14:14:53] *** Quits: doev (~doev@p549d77d0.dip0.t-ipconnect.de) (Quit: Client closed)
[14:15:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 255 seconds)
[14:17:01] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[14:18:38] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[14:19:24] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[14:20:14] <madprops> ah that sounds good
[14:21:17] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:21:19] *** Quits: isolani (~sq@user/squirrel) (Ping timeout: 246 seconds)
[14:22:27] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[14:22:42] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (Quit: WeeChat 3.3-dev)
[14:22:59] <grawity> okamis: possibly https://wiki.archlinux.org/title/Python_package_guidelines#Reproducible_bytecode
[14:23:04] *** Quits: hexa- (~hexa-@juno.lossy.network) (Quit: WeeChat 3.2)
[14:26:35] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:4ec5:6765:26be:8e46)
[14:29:54] *** Joins: isolani (~sq@user/squirrel)
[14:30:42] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 240 seconds)
[14:30:42] *** Quits: beeza (sid53872@id-53872.tinside.irccloud.com) (Ping timeout: 240 seconds)
[14:31:45] *** Joins: beeza (sid53872@id-53872.tinside.irccloud.com)
[14:31:59] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[14:33:11] *** Joins: faceface (~faceface@user/faceface)
[14:33:34] *** Quits: ThanatosJ (~Thanatos@197.210.45.60) (Remote host closed the connection)
[14:34:29] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[14:34:33] *** Joins: Thanatos (~Thanatos@197.210.45.60)
[14:34:39] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[14:35:27] *** Quits: sectec84 (~sectec84@24.18.109.173) (Ping timeout: 258 seconds)
[14:35:59] <okamis> any obvious mistakes? python setup.py sdist; sum build/mypackage.tar.gz
[14:36:10] <okamis> grawity, sadly when running it twice the hashes didnt match :(
[14:37:24] *** Quits: Thanatos (~Thanatos@197.210.45.60) (Read error: Connection reset by peer)
[14:38:56] *** Joins: Thanatos (~Thanatos@197.210.45.60)
[14:41:02] *** Quits: Thanatos (~Thanatos@197.210.45.60) (Client Quit)
[14:41:42] *** Quits: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:41:46] <Julian> okamis: Don't run `python setup.py anything`
[14:42:18] *** Joins: koziad (~koz@74.102.176.11)
[14:42:25] <Julian> If you're trying to build your package, `python -m pip install build && python -m build .`
[14:43:02] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[14:43:20] *** Joins: califax (~califax@user/califx)
[14:43:56] <okamis> and that will provide me a source distribution that is reproducible?
[14:45:56] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[14:47:04] *** Quits: Byteflux (~byte@byteflux.net) (Read error: Connection reset by peer)
[14:47:25] *** Joins: Byteflux (~byte@byteflux.net)
[14:47:29] *** Quits: rsx (~dummy@ppp-188-174-157-10.dynamic.mnet-online.de) (Quit: rsx)
[14:48:26] *** Joins: hexa- (~hexa-@juno.lossy.network)
[14:48:29] *** Joins: doev (~doev@p549d77d0.dip0.t-ipconnect.de)
[14:51:01] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[14:55:46] *** Quits: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de) (Ping timeout: 258 seconds)
[14:55:59] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[14:56:09] <gitesh> In Python, a function is a chunk of code that performs some operation that is meaningful for a person to think about as a whole unit, for example calculating a studentâ€™s GPA in a learning system or responding to the jump action in a video game.
[14:56:28] <gitesh> how calculating GPA is similar to responding to jump action?
[14:56:43] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[14:59:24] *** Quits: y1n (~y1n@84-115-65-163.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[14:59:33] *** Joins: y1n (~y1n@84-115-64-69.wifi.dynamic.surfer.at)
[15:00:10] *** Joins: slav0nic (slav0nic@python.su)
[15:00:25] <Yhg1s> gitesh: in the way that they're both operations that are meaningful to the person to think about as a whole unit.
[15:04:05] *** Joins: revolve (~u0_a227@82-132-229-177.dab.02.net)
[15:04:08] <madprops> is it possible opening a file with 'w' fails before I write stuff to it, losing the content?
[15:04:50] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:05:14] <madprops> how could I avoid that?
[15:05:46] <drant> it's possible, opening a file and writing to it isn't atomic
[15:06:07] <drant> what is atomic is renaming files
[15:06:17] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 252 seconds)
[15:06:44] <Yhg1s> it's not just possible, it's guaranteed.
[15:06:44] <drant> you could open a file on a different filename, write to it, close it, rename it to the target filename
[15:06:49] <Julian> okamis: you'll still need to do the other things required for that (disabling hashing, and IIRC there's a second envvar you'll need to tweak for not putting timestamps in there)
[15:07:35] <drant> you'll still lose the content but anything trying to read the file won't read an empty file
[15:08:30] *** Quits: colegatron (~colegatro@86.127.251.171) (Ping timeout: 256 seconds)
[15:08:39] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[15:10:57] *** Joins: nyah (~nyah@90.221.186.180)
[15:11:31] <Luyin> fdan: it will still have the same problem. you're not paying attention to the error message in my paste. your quotation marks aren't json-conforming, therefore you can't parse the string with python's json lib.
[15:11:56] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[15:13:30] <Luyin> graingert: how would you install a package that's not on PyPI instead?
[15:16:17] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[15:19:40] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 244 seconds)
[15:21:09] <fdan> Luyin the last paste is it still erroring out
[15:22:15] *** Quits: baltazar (~baltazar@178-164-154-141.pool.digikabel.hu) (Ping timeout: 268 seconds)
[15:23:02] *** Joins: baltazar (~baltazar@178-164-154-141.pool.digikabel.hu)
[15:26:38] *** Quits: jazzy (~jaziz@2600:380:c07e:8a82:88c2:f3ad:ac82:d386) (Ping timeout: 256 seconds)
[15:26:49] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[15:29:48] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[15:30:07] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[15:30:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:30:50] <okamis> I found SOURCE_DATE_EPOCH, but even after hardcoding that value I cannot get reproducible builds :(
[15:31:21] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:22] *** isolani is now known as squirrel
[15:32:11] <graingert> Luyin: I'd put it on pypi?
[15:32:15] *** Quits: y1n (~y1n@84-115-64-69.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[15:32:17] <graingert> Luyin: you don't need `-e` for source files
[15:32:39] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[15:33:04] <graingert> Luyin: just use tox
[15:33:07] <graingert> (I just use tox)
[15:33:25] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 246 seconds)
[15:33:34] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:34:16] <jor> okamis: would need to check if setuptools sdist even listens to that, but repacking the archive is the usual workaround...
[15:34:38] <nedbat> okamis: is the problem that pyc files have a datestamp?
[15:34:45] *** Parts: Intruder777 (~Intruder7@user/intruder777) (Leaving)
[15:34:59] <jor> okamis: also, can depends on what else the project adds to the sdist.  diffoscope is the tool to use to quickly find the culprits
[15:35:25] *** Joins: y1n (~y1n@84-115-64-69.wifi.dynamic.surfer.at)
[15:36:05] *** Joins: mickey1 (~user@user/mickey)
[15:36:54] *** Quits: dcaro (~dcaro@user/dcaro) (Quit: ZNC 1.8.2 - https://znc.in)
[15:36:55] *** Quits: varaindemian (~varaindem@86.124.78.162) (Ping timeout: 246 seconds)
[15:37:06] *** Joins: ttkap (~ttkap@user/ttkap)
[15:37:14] *** Quits: mickey (~user@user/mickey) (Ping timeout: 244 seconds)
[15:37:15] *** mickey1 is now known as mickey
[15:37:46] <gitesh> so all these functions are created in GUI programming are meaningful for a person to think about it as a whole unit?
[15:38:14] <Yhg1s> gitesh: it's just a guideline, a suggestion for thinking about functions in an abstract way. It's not a strict rule.
[15:38:24] *** Joins: dcaro (~dcaro@user/dcaro)
[15:38:59] <nedbat> am I missing something in this PEP? How do I get hash-based pycs created? https://www.python.org/dev/peps/pep-0552/
[15:39:25] <nedbat> oh, i guess i have to use compileall? plain python won't do it
[15:39:40] <okamis> as proposed i tried diffoscope, https://try.diffoscope.org/gufxdfhvfpfy.html   Is my conclusion correct that directories have their own creation time?
[15:39:52] <Yhg1s> nedbat: yes.
[15:40:58] <gitesh> why functions are used in GUI programming ? is that a right question?
[15:41:05] <Luyin> graingert: tox won't set the stuff up for my IDE though
[15:41:18] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[15:41:20] <bjs> gitesh: functions are used for all kinds of programming
[15:41:28] <graingert> Luyin: it works for me ...
[15:41:48] <graingert> Luyin: I activate the .tox/{toxenv}/bin/activate script
[15:42:00] <graingert> Luyin: also your ide should be able to read the tox config
[15:42:03] <Luyin> graingert: ah ok. I'll have to look into that
[15:42:15] <gitesh> bjs: understanding of functions applies to all kinds of programming same?
[15:42:35] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[15:43:15] <Yhg1s> gitesh: in the abstract sense, yes.
[15:43:18] <gitesh> why functions are used to bing events in GUI programming ? is that a right question?
[15:43:26] <Yhg1s> gitesh: what else would you use?
[15:43:28] <graingert> gitesh: "bind" ?
[15:43:37] <gitesh> *bind
[15:43:38] <graingert> gitesh: you mean callbacks specifically
[15:43:43] <gitesh> yessssss
[15:43:49] <graingert> by that you mean "continuation passing style"
[15:44:31] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[15:44:55] <bjs> gitesh: functions are very common,  people know how to use them,  they let you run code when someone pushes a button or something
[15:44:58] <bjs> why not use them? :)
[15:45:29] *** Joins: felixz (uid262934@user/felixz)
[15:45:54] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[15:46:04] <gitesh> i feel odd because in GUI programming program doesn't run top to bottom.
[15:46:10] <nedbat> graingert: wouldn't you say that phrase would be only confusing at this point in the conversation?
[15:46:11] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Client Quit)
[15:46:55] <graingert> gitesh: right that "not top to bottom-ness" is a stylistic choice
[15:47:02] <bjs> gitesh: I mean,  not very many programs actually run "top to bottom",  they have loops, and `if` statements and functions and they call other libraries and have classes
[15:47:07] <bjs> it's very common for code to "jump around" a lot
[15:47:28] <Repiphany> Functions allow you to focus on what happens without necessarily worrying about how it happens
[15:47:29] *** Joins: entuland (~entuland@user/entuland)
[15:48:08] <graingert> gitesh: it's because you need to have a way to wait for multiple different events concurrently
[15:48:16] <gitesh> that's a good reason Repiphany
[15:48:21] <graingert> gitesh: `async def` is an alternative style
[15:48:30] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[15:48:44] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[15:50:31] <gitesh> what is pushing a button in GUI programming?
[15:50:56] <gitesh> it means pointing to the button and clicking right mouse button
[15:51:07] <gitesh> i mean right click
[15:52:12] <gitesh> i think GUI programming is obssessed with functions
[15:52:44] <hodapp> what should it use instead?
[15:52:46] <gitesh> my problem is when first time i learned callbacks i didn't get them naturally
[15:52:53] <rannnn8888> hey how i can make format a number as 2.5k M B andd all
[15:53:05] <rannnn8888> have pack or functions
[15:53:22] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[15:54:16] <Repiphany> All programming is a result of layers of abstraction on top of repeating very basic operations
[15:55:03] *** Quits: shad (~shad@user/shad) (Ping timeout: 255 seconds)
[15:55:32] <bjs> gitesh: yes, when you put your mouse over a button and click it you want some code to run.  Functions are just a very obvious way to do that. You want some code to run, functions contain code... so most GUI programs use functions for that.
[15:56:13] <graingert> gitesh: when guis were developed there was no other way to do it
[15:57:06] <graingert> gitesh: you can now develop GUIs with fewer callbacks in your business logic, eg `qtrio`
[15:59:30] *** Quits: y1n (~y1n@84-115-64-69.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[16:00:26] *** Joins: y1n (~y1n@84-115-64-69.wifi.dynamic.surfer.at)
[16:01:16] *** Joins: pnoud (~pnoud@user/pnoud)
[16:02:05] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[16:02:25] *** Joins: thiras (~thiras@user/thiras)
[16:04:01] <[Syntax]> ok this should be really simple, but Ive wasted an hour trying to create a string.. which is stupid.. I know about 10  programming languages and python still eludes me..
[16:04:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[16:04:27] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[16:04:52] <[Syntax]> I know its because Im trying to mix a string and number into a string assigned to a variable.. but I just get "unsupported operand type(s) for +'float' and 'str'
[16:05:17] <[Syntax]> Ive tried converting the numbers to strings, Ive tried inserting using {} % + and same error every time
[16:05:25] <[Syntax]> what am I doing wrong?
[16:06:06] <deniska> [Syntax]: 'some string' + str(5) should work
[16:06:16] *** Joins: resmo (~resmo@2a00:d420:9:8a00:5ea1:e89e:f9d:3ad8)
[16:06:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[16:06:23] *** Quits: masber (~masber@dhcp-133-191.cscs.ch) (Quit: Client closed)
[16:06:32] <deniska> [Syntax]: 'some string {}'.format(5) and f'some string {5}' also should work
[16:07:06] <deniska> [Syntax]: can you show the code you are having troubles with?
[16:08:35] *** Joins: christover (~christove@8.47.69.131)
[16:08:38] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[16:08:47] <[Syntax]> DATA = "{gpsd.fix.longitude},{gpsd.fix.latitude}" for example also tried adding str() to the variables, and str(round()) to the variables..
[16:09:03] <Repiphany> You're missing the f" to make a format string
[16:09:19] <Repiphany> er, f-string
[16:09:29] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[16:09:38] <Repiphany> DATA = f"..."
[16:09:54] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 240 seconds)
[16:10:05] <[Syntax]> DATA = f"{gpsd.fix.longitude},{gpsd.fix.latitude}"?
[16:10:11] <[Syntax]> same error
[16:10:21] <Repiphany> What version python are you using
[16:10:24] <[Syntax]> 3
[16:10:24] <bjs> [Syntax]: "same error"?
[16:10:35] <bjs> [Syntax]: what exactly _is_ the error?
[16:10:37] *** Joins: ionface (~ionface@user/ionface)
[16:10:43] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[16:10:45] <[Syntax]> "unsupported operand type(s) for +'float' and 'str'
[16:10:54] <bjs> [Syntax]: but the line you just showed didn't _have_ a "+"
[16:10:59] <bjs> so how can it give the "same error" ??
[16:11:28] <[Syntax]> no idea.. it does.. i get the same error whether I use + {} % f any method I try
[16:11:46] <bjs> [Syntax]: I'm suspicious.  are you sure you're running the code you changed? are you sure the error is from that line?
[16:11:56] <bjs> [Syntax]: can you pastebin the whole file + error? https://bpaste.net/+python+pytb
[16:12:00] <Repiphany> The traceback should point to the exact line that is throwing the error
[16:13:40] <[Syntax]> wtf.. I deleted the __pycache__ folder and ran it again, no error
[16:14:25] *** Joins: mrwick (~mrwick@user/mrwick)
[16:14:47] <[Syntax]> gonna try one of the other 10 methods I tried.. and see if they work now..
[16:15:45] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[16:18:12] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 256 seconds)
[16:18:23] <[Syntax]> wtf now those methods work too
[16:18:58] <[Syntax]> I also tried it from inside the python console, but I didnt exit after every failure.. I just reimported the module when I was in there..
[16:19:05] *** Quits: mikeliuk (~mikeliuk@213.205.198.158) (Quit: Connection closed)
[16:19:08] <[Syntax]> do I need to do something to clear that?
[16:19:22] <bjs> [Syntax]: when you say "reimported"
[16:19:27] <bjs> did you mean you just ran `import` again?
[16:19:35] <[Syntax]> import Modulename from the console
[16:19:36] <Repiphany> `import module` doesn't reload a script that you've changed
[16:19:55] <bjs> [Syntax]: if you'd already imported it, then it's already imported and the line does nothing
[16:20:06] <[Syntax]> ok, well that expains why console was still erroring, even though I did exit and re-enter a few times..
[16:20:21] <[Syntax]> but why was running from bash doing that too?
[16:20:29] <bjs> [Syntax]: wait you said you didn't exit
[16:20:30] <[Syntax]> stuck cached copy?
[16:20:38] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[16:20:50] <[Syntax]> I exited like 2 times, but stayed in the console the other 6 I tried to do it from there
[16:21:06] <[Syntax]> that was my last resort after running from bash failed repeatedly for 30 minutes
[16:21:42] <[Syntax]> is there a way to unload and reload it in the python console?
[16:22:01] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:22:35] <Repiphany> Using importlib but that can have unexpected side-effects so it's not recommended
[16:23:18] <drogas> which is better in terms of code manners: `if A == b and C == d:`  or `if (A == b) and (C == d):`
[16:23:42] <Repiphany> Parentheses always help readability in cases like that
[16:23:57] <drogas> my supervisor has it like `if ( A == b ) and ( C == d ):` and he aligns everything even if it means whitespaces...
[16:24:05] <drogas> I think it is a bit too much
[16:24:12] <[Syntax]> I went back to the original way I wrote it  DATA = str(round(gpsd.fix.latitude,6))+","+str(round(gpsd.fix.longitude,6))  and now it works..
[16:24:31] <Repiphany> The extra whitespace doesn't help much in terms of readability
[16:24:35] <sphalerite> Is there a way to wrap functions that they are pickleable? I want to use some decorated functions with multiprocessing, but am getting  AttributeError: Can't pickle local object 'wrap.<locals>.wrapped'
[16:25:19] <drogas> das what I think too, but it just looks neat when the next lines are aligned with the previous. A E S T H E T I C S I guess...
[16:25:21] <grawity> drogas: does your supervisor write a lot of /bin/sh scripts
[16:25:30] <bjs> sphalerite: pickle has a hack that means top-level functions are pickle-able, but the others are not.
[16:25:48] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[16:25:48] <sphalerite> bjs: is there a way around that besides copy-pasting the boilerplate?
[16:25:55] <drogas> he does not. He's an electromagnetics physicist/engineer
[16:26:25] *** Joins: sid-maddy (~sid-maddy@103.76.57.21)
[16:26:46] *** Quits: p-i-_ (~Ohmu@113.53.162.9) (Quit: Leaving...)
[16:27:04] <bjs> sphalerite: I'm not really sure what you mean,  if your decorated function is the top-level one then it should pickle fine so long as you did it correctly.
[16:27:29] *** Quits: zumba_addict (~zumba_add@2601:240:4500:8320:c9fa:c121:1961:11d6) (Quit: Client closed)
[16:27:31] <mawk> aesthetics are fundamentally important drogas
[16:27:41] <bjs> sphalerite: did you forget to use functools.wraps to wrap the "wrapped" function?
[16:27:59] <sphalerite> bjs: I did!
[16:28:35] * [Syntax] head hurts
[16:28:53] <[Syntax]> a string drove me to madness..
[16:29:05] <[Syntax]> :q
[16:29:18] <sphalerite> bjs: yep that fixes it, thanks!
[16:29:39] *** Quits: christover (~christove@8.47.69.131) (Quit: Leaving)
[16:31:20] *** Joins: mei (~mei@user/mei)
[16:32:22] *** Quits: Elzington_ (~Elzington@68.235.43.141) (Quit: Leaving)
[16:33:08] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[16:33:11] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Remote host closed the connection)
[16:33:51] *** Joins: Elzington (~Elzington@68.235.43.141)
[16:34:19] <Luyin> drogas: you might wanna introduce your supervisor to pylint and flake8 :D
[16:34:33] *** Joins: nmoura (~nmoura@177.192.16.58)
[16:35:42] *** Joins: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:11] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[16:36:41] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:13] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[16:37:36] *** Joins: argento (~argent0@168-227-96-53.ptr.westnet.com.ar)
[16:39:22] *** Joins: computeiro (~Wender@189.37.64.123)
[16:40:14] *** Quits: y1n (~y1n@84-115-64-69.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[16:40:21] <drogas> Luyin pylint and flake8 are godsent. I use that in other teams
[16:40:22] *** Joins: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il)
[16:42:03] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[16:42:04] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the ##end of the abyss)
[16:42:18] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:44:10] <[Syntax]> This is nuts.. one thing simple.. drives me crazy.. then something I figure is gonna be really hard, just works..
[16:44:12] *** Joins: y1n (~y1n@84-115-64-69.wifi.dynamic.surfer.at)
[16:44:41] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:44:46] <[Syntax]> needed to search a database for entries closest to a given coordinate.. turns out theres a formula for that.. and it can be implemented into an SQL statement
[16:44:51] *** Joins: shad (~shad@user/shad)
[16:44:54] <[Syntax]> doesnt even require any coding..
[16:45:35] <[Syntax]> called the Haversine Formula
[16:47:10] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[16:47:23] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[16:47:44] *** Joins: pagnol (~user@014198154145.ctinets.com)
[16:48:27] *** Joins: p-i- (~Ohmu@113.53.162.9)
[16:49:11] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[16:49:20] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:49:33] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 250 seconds)
[16:51:25] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Remote host closed the connection)
[16:52:18] *** Quits: pacbard (~pacbard@user/pacbard) (Quit: ZNC 1.8.2 - https://znc.in)
[16:52:55] <madprops> why  can't i do list[2] or ""
[16:53:27] *** Quits: digilink (~digilink@user/digilink) (Read error: Connection reset by peer)
[16:54:06] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:54:16] *** Joins: digilink (~digilink@user/digilink)
[16:54:33] <The-Compiler> madprops: define "can't do"? What do you expect to happen, and what happens instead?
[16:54:57] <madprops> i wanted to use an empty string as a fallback in case the item in that list doesn't exist
[16:54:59] *** Joins: pacbard (~pacbard@user/pacbard)
[16:55:20] <The-Compiler> madprops: and you get an IndexError now I assume?
[16:55:25] <grawity> because it was a design decision to have such operations be fatal errors instead of returning nil, I suppose
[16:55:28] <madprops> yeah, I could just use the exception
[16:55:49] <The-Compiler> madprops: so what 'or' does is first evaluate the left side, and if that's falsey (e.g. an empty string, None, etc.), then the expression evaluates to the right side
[16:56:07] <Repiphany> l[2] if 2 < len(l) else ""
[16:56:12] <The-Compiler> madprops: but here, when list[2] is evaluated, that results in an IndexError, so the 'or ""' part never gets run
[16:56:29] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 250 seconds)
[16:57:02] <madprops> i see
[16:59:12] <The-Compiler> so yeah, you'd need to either handle the IndexError, or perhaps use unpacking syntax, or what Repiphany said (though I'd probably swap the condition around personally)
[16:59:30] *** Joins: nmoura (~nmoura@177.192.16.58)
[16:59:31] *** Quits: y1n (~y1n@84-115-64-69.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[16:59:59] *** Joins: adamts (~Adam@user/mysteryblokhed)
[17:00:25] *** Joins: y1n (~y1n@84-115-64-133.wifi.dynamic.surfer.at)
[17:00:38] *** Quits: nmoura (~nmoura@177.192.16.58) (Client Quit)
[17:00:40] <The-Compiler> madprops: see https://paste.the-compiler.org/view/1d78d574 for an example of the unpacking, but it depends a bit on what's really in your list
[17:01:11] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[17:03:00] *** Joins: zeden (~zeden@user/zeden)
[17:03:26] <Repiphany> Ugly way, (lst + ["", "", ""])[2]
[17:03:31] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:03:49] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[17:04:44] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[17:05:35] *** Quits: ioe (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[17:05:44] <grawity> but seriously, why is there no list.get(idx, default)
[17:06:07] <grawity> nobody writes dct["foo"] if "foo" in dct else None
[17:06:15] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[17:06:18] <sybariten> hey, just out of curiosity, are there sometimes any swedish python entousiasts here, by any chance? I have a very specific question
[17:06:21] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[17:07:47] <sybariten> and, uh, i have another more concrete question. It's about for loops and string formatting and pretty fundamental functionality trherein. Look at the following code block  https://bpa.st/HLZA
[17:09:59] <sybariten> First question: what does it actually tell python when i do for i,j? I mean, pyhthon is ready to iterate over something that is an iterable. With a for loop. The data structure in the example is a dict, but i guess the respective main parts or elements of the dict in this case are the things separated by a comma?  Which, in turn, contain key:value ofcourse.
[17:10:14] *** Quits: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il) (Quit: Konversation terminated!)
[17:10:47] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:10:58] <Repiphany> dict.items() is an iterable over (key, value) pairs
[17:11:04] <deniska> sybariten: .items() is an iterable of two-element tuples
[17:11:04] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[17:11:32] <bjs> grawity: it's been something that people have requested but usually it's too niche,  doing lookups for possibly-unknown keys is very common for dicts
[17:11:36] <deniska> sybariten: you can do `a, b = two_element_tuple` and python will assign the first element to a and the second element to b
[17:11:47] <sybariten> But i could also make a simpler for loop: for item in k.items() : print(item) . It will print each "part" of the dictionary. By doing "for i,j" , does python know to look for the division between key and value ?
[17:11:52] <bjs> grawity: but a lot less common for lists, where the usual API is to append and then consume
[17:12:49] <deniska> sybariten: and the first line of the loop can be `i, j = item`
[17:12:59] <grawity> "too niche" didn't stop @ or `match` from being added
[17:13:10] <Repiphany> sybariten: You get a ValueError if you try to unpack the wrong number of variables
[17:13:10] <sybariten> I guess what i'm asking is if "for i,j" somehow means that python will automatically see "Arnold Schwarzenegger":"555-3456" as two things that can be split up, sort of
[17:13:27] <deniska> sybariten: no, it expects a two-element thing
[17:13:36] *** Joins: ioe (~is0ke3@user/is0ke3)
[17:13:49] <sybariten> but thats what i meant... and i think thats what you confirmed in your first answer, sort of
[17:13:57] <grawity> sybariten: if you're iterating over dict.items(), which gives you two-item tuples, then yes `for i, j in` works as expected
[17:14:11] <sybariten> alrite. Its a bit automagical like that, in other words
[17:14:29] <grawity> not really
[17:14:30] <deniska> sybariten: it's not magic. What for loop does is assignment, it's part of the assignment syntax
[17:14:45] <grawity> you can say .items() does the "hard" work of splitting up the key and value
[17:15:06] <sybariten> grawity: ah i thought it split up each.... "row" in the dictionary
[17:15:12] <Repiphany> sybariten: https://bpa.st/QUBA
[17:15:22] *** Quits: fluffyballoon (~fluffybal@pat-verona-l.epic.com) (Quit: Client closed)
[17:15:23] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[17:15:25] <grawity> well, python doesn't really even have a concept of a dict "row" or "key:value" pair
[17:15:41] *** Joins: fluffyballoon (~fluffybal@pat-verona-l.epic.com)
[17:15:49] <sybariten> aha
[17:15:51] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[17:15:57] <grawity> so what you get from .items() is a very generic (key, value) tuple
[17:16:17] <sybariten> Repiphany: gotcha
[17:16:29] <bjs> grawity: the argument is that "@" and "match" aren't niche:  "@" was added to help make a common pattern in a common style of code (numpy) better, and match was added because it had applications for lots of common patterns of code
[17:16:45] <bjs> whereas list.get would be added but wouldn't help in very many cases, hence, niche.
[17:16:46] <sybariten> grawity: doing .items() on a dict gives me a tuple?OK
[17:16:52] <grawity> it gives you a list of those tuples
[17:16:55] <grawity> more or less
[17:17:00] <sybariten> ok
[17:17:32] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[17:18:10] <sybariten> next question, somewhat related. Same paste. There are examples of string formatting there, using %s and %d . I guess %s pulls in a string and %d an integer. Is this automagical then? Does python look over a set of things, for different datatypes, and chooses freely=
[17:18:22] <sybariten> ? Cause i cant see the positional logic otherwise really
[17:18:32] *** Joins: NeoCore (~neocore@195.200.221.95)
[17:18:38] <grawity> it is really just positional though, almost exactly like C printf()
[17:18:49] <deniska> sybariten: and %s will work fine for all things
[17:18:54] <grawity> e.g. "%s = %s" % ("one", 1234)
[17:19:06] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-118.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[17:19:26] <deniska> (and %-style formatting more or less is out of fashion in python)
[17:19:40] *** Quits: avu (~jan@user/avu) (Quit: avu)
[17:20:25] *** Joins: avu (~jan@user/avu)
[17:20:36] <grawity> the first %anything will always take the first value (and *then* try to format it as the given type), the second %anything always takes the second value, etc.
[17:20:50] <p-i-> Suppose I have a dict D with keys guaranteed to be in increasing order. Is there a Python primitive optimized for lookups?
[17:21:20] <p-i-> And does a Python dict cache lookups anyway?
[17:21:27] <deniska> python dict is optimized for look ups no matter the order
[17:21:39] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[17:21:48] <grawity> afaik, a python dict is already a hashtable, I'm not sure what would it use as a cache on top of that
[17:22:03] <bjs> p-i-: what would caching lookups give over just doing the lookup?
[17:22:16] <graingert> p-i-: But they're not cached anywhere. What do you imagine that would do?
[17:22:23] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[17:22:41] <deniska> dict is a cache of lookups in a sense :P
[17:22:41] <graingert> pypy special cases instance `__dict__` lookups
[17:22:46] <sybariten> But... ok.. .i dont quite get it then. What are they saying, in words?  It looks like this to me
[17:22:57] <p-i-> bjs: elements with small value keys will get far more read/writes than those with bigger keys
[17:22:57] <sybariten> if, the current instance of j (the second value) is an integer, then add placeholderString=placeholderInt, from i,j
[17:23:04] <sybariten> if, the current instance of j (the second value) is somethingelse, then add placeholderString=placeholderString, from i,j
[17:23:17] <graingert> p-i-: are you referring to interning of strings?
[17:23:25] <bjs> p-i-: is that a problem?
[17:23:50] <p-i-> I have an Order Book. It's a list of (price, qty) pairs. I'm using Decimal for each.
[17:24:13] <p-i-> I have literally hunderds of millions of read/writes. And I'm trying to track the book.
[17:24:25] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Read error: Connection reset by peer)
[17:24:35] <sybariten> well okay, the point is that one of them should be with quotes. But since we're just assembling a compound string, why do they need to look at %s vs %d ? Couldnt they have said something like, if j is int then compound i=j , otherwise compound i="j"
[17:24:52] <sybariten> I dont know if my question is a bit vague perhaps
[17:24:55] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[17:24:55] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[17:24:59] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[17:25:04] <deniska> sybariten: you can change line 6 to result.append('%s=%s' % (i,j)) and it will work just fine
[17:25:11] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[17:25:25] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 246 seconds)
[17:25:30] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:25:44] *** Quits: marduk (~marduk@216.243.54.166) (Quit: Ping timeout (120 seconds))
[17:25:46] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: Ping timeout (120 seconds))
[17:26:04] *** Joins: marduk (~marduk@216.243.54.166)
[17:26:11] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[17:26:17] <graingert> p-i-: Concurrent reads?
[17:26:24] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[17:26:33] <graingert> p-i-: and concurrent writes?
[17:26:38] <p-i-> graingert: synchronous.
[17:26:40] *** Quits: MightyMu (~MightyMu@104.131.138.31) (Remote host closed the connection)
[17:26:41] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[17:26:44] <deniska> sybariten: if you are on new enough python, the prefered way to write this line is: result.append(f'{i}={j}')
[17:26:47] *** Quits: neil (~kneel@rockylinux/infra/neil) (Remote host closed the connection)
[17:26:52] *** Joins: waxfire238 (~waxfire@65.119.2.240)
[17:26:59] *** Joins: noarb (~noarb@user/noarb)
[17:27:05] *** Quits: ELFrederich (~ELFrederi@134.244.29.70) (Remote host closed the connection)
[17:27:12] <jabberwock> "smaller value keys" :thinking:
[17:27:17] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Ping timeout: 265 seconds)
[17:27:17] *** Quits: roolebo (sid64806@charlton.irccloud.com) (Ping timeout: 265 seconds)
[17:27:19] *** Quits: tadamono (~tadamono@c-98-222-81-32.hsd1.in.comcast.net) (Quit: WeeChat 1.6)
[17:27:20] *** Joins: eramirez (~eramirez@2001:4453:367:0:7e13:9779:9980:5d72)
[17:27:34] *** Quits: glider (~glider@user/glider) (Quit: ZNC 1.9.x-git-111-f2cdc3db - https://znc.in)
[17:27:38] <jabberwock> Do you mean the length of the [key] is short in bytes?
[17:27:39] <p-i-> hmm, Actually I can simplify. price-brackets are linearly spaced. And there's only so many of them (~50k). So effectively I can represent the book as a list of Decimal 'qty' values.
[17:27:46] *** Quits: mastardet (~mastardet@user/mastardet) (Ping timeout: 265 seconds)
[17:27:46] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (Ping timeout: 265 seconds)
[17:27:48] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 244 seconds)
[17:27:52] <p-i-> jabberwock: No, the value of the Decimal that is the key
[17:28:05] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[17:28:10] <jabberwock> oh, like a DB index
[17:28:10] *** Joins: neil (~kneel@rockylinux/infra/neil)
[17:28:16] <jabberwock> sorry; was coming in late I think
[17:28:39] *** Joins: jabberwo- (~jessy@user/jabberwock)
[17:28:44] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 265 seconds)
[17:29:03] *** Joins: roolebo (sid64806@id-64806.charlton.irccloud.com)
[17:29:07] *** Joins: MightyMu (~MightyMu@104.131.138.31)
[17:29:13] *** Quits: lidless (~jessy@user/jabberwock) (Ping timeout: 265 seconds)
[17:29:13] *** Quits: hanetzer (~hanetzer@user/hanetzer) (Ping timeout: 265 seconds)
[17:29:27] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:29:27] <grawity> sybariten: so looking at your code example, they *could* have used %s in both int/non-int cases, they might've just used %d a) out of habit from other languages or b) for some kind of clarity
[17:29:35] *** Joins: mastardet (~mastardet@user/mastardet)
[17:29:42] *** Quits: waxfire23 (~waxfire@65.119.2.240) (Ping timeout: 265 seconds)
[17:29:42] *** waxfire238 is now known as waxfire23
[17:29:57] *** Joins: glider (~glider@user/glider)
[17:30:18] *** Joins: RealKiller (~Guest75@68.207.220.203.dial.dynamic.acc01-spen-bby.comindico.com.au)
[17:30:20] <grawity> sybariten: I'm not really sure about the rest of your question, but were you suggesting result.append("i=j") vs result.append("i='j'")?
[17:30:25] <RealKiller> hey, I am trying to open a file in python using,         with open(file) as f:  but since file has a space inside, it is giving no file error
[17:30:25] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[17:30:55] *** Joins: spithash (~spithash@user/spithash)
[17:30:56] <grawity> RealKiller: really doubt that it's entirely because file has a space inside
[17:31:09] *** Quits: Fluxx (~Fluxx@user/fluxx) (Remote host closed the connection)
[17:31:21] *** Quits: revolve (~u0_a227@82-132-229-177.dab.02.net) (Read error: Connection reset by peer)
[17:32:16] <phy1729> The only reasonable way that could cause an issue is if you're passing the filename via shell arguments and aren't quoting it
[17:33:03] *** Joins: irrgit (~irrgit@192.241.175.183)
[17:33:20] <RealKiller> I am passing it like this             cur_dir = os.path.dirname(__file__) + '/file.json'
[17:33:38] <jabberwock> ^ there's the issue
[17:35:44] *** Joins: nmoura (~nmoura@177.192.16.58)
[17:35:57] <RealKiller> sorry I didn't get it
[17:35:58] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:36:09] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[17:36:18] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 240 seconds)
[17:36:29] <jabberwock> Me neither. I did a double-take  on my initial logic
[17:36:31] <jabberwock> what is the file name?
[17:36:52] *** Joins: diego (~diego@94-36-109-68.adsl-ull.clienti.tiscali.it)
[17:37:31] <jabberwock> I totally made a fool of myself. That was one of the few times I spouted something out without even looking at it. Of course the channel went silent
[17:37:32] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[17:38:27] <dob1> embeddable python package is portable python?
[17:39:03] <drant> we're all idiots sometimes
[17:39:03] <p-i-> I know numpy lets you write to multiple list indexes in one operation: arr[index_list] = value_list.
[17:39:15] <p-i-> I can't do this with Python lists, right?
[17:39:25] <gitesh> Welcome back. Take a look in your calendar and mark this date. Today is the day you are crossing over the line, from someone who can just write code that does something to being a real programmer, someone who can abstract from a bit of code that works on one piece of data, to writing a function that will operate on any similar piece of data.
[17:39:29] <gitesh> someone who can abstract from a bit of code that works on one piece of data? mean what?
[17:39:32] <jabberwock> RealKiller: can you use https://bpa.st/+python ?
[17:40:42] <jabberwock> I guess... make sure this looks alright to you: https://bpa.st/UZTQ
[17:40:50] <jabberwock> I wasn't much help, but I did something
[17:41:06] <bjs> p-i-: you can `some_list[3:5] = [1,2,3]`
[17:41:16] <Repiphany> RealKiller: How are you running your script
[17:41:22] <p-i-> bjs, but if the elements are not contiguous...?
[17:41:30] <bjs> p-i-: no you cannot do that.
[17:41:34] <Repiphany> os.path.dirname(__file__) will be an empty string if you're doing `python script.py`
[17:41:47] *** Quits: sid-maddy (~sid-maddy@103.76.57.21) (Ping timeout: 265 seconds)
[17:41:50] <RealKiller> I guess i found the issue, my script was in src folder and file that i was trying to read was in another
[17:41:57] <jabberwock> Repiphany: '.' in linux
[17:42:08] *** Quits: doev (~doev@p549d77d0.dip0.t-ipconnect.de) (Quit: Client closed)
[17:42:18] <jabberwock> omg n/m. I'm shutting up and getting coffee.
[17:42:46] <jabberwock> I was updating D3Edit yesterday (windows) and my brain is so confused right now between the path styles
[17:43:24] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[17:43:30] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[17:43:31] *** Joins: georgios (~georgios@ppp046176224061.access.hol.gr)
[17:44:16] *** Joins: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com)
[17:44:18] *** Joins: fstd (~fstd@xdsl-85-197-59-162.nc.de)
[17:44:20] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[17:44:24] *** Joins: sharperguy_ (~sharpergu@2001:1438:4010:3101:10a::3133)
[17:44:27] *** Joins: WarpedAI (~Warped@user/warped)
[17:44:30] *** Joins: Elzington_ (~Elzington@68.235.43.141)
[17:44:37] *** Joins: cman_ (~Cody@2603:9000:d104:8465:2866:c99f:b575:bffb)
[17:44:40] *** Joins: Nei_ (~ailin@user/nemui)
[17:44:41] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[17:44:42] *** Joins: xrogaan_ (~xrogaan@user/xrogaan)
[17:44:56] *** Quits: Elzington_ (~Elzington@68.235.43.141) (Remote host closed the connection)
[17:45:08] *** Joins: alexyov5 (~alexyov@79.124.0.2)
[17:45:09] *** Joins: dulanic6 (~dulanic@47.187.144.163)
[17:45:10] *** Joins: seednode2 (~seednode@user/seednode)
[17:45:19] *** Joins: Elzington_ (~Elzington@68.235.43.141)
[17:45:21] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[17:45:22] *** Joins: dbristow_ (~dbristow@user/dbristow)
[17:45:33] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[17:45:36] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[17:45:38] *** Joins: binchickin9 (~binchicki@165.22.169.69)
[17:45:45] <jinsun> Repiphany: why would it be empty? I get the correct directory if I try it on my computer
[17:45:57] *** Joins: quasineutral6 (~quaisneut@user/quasineutral)
[17:45:58] *** Joins: AhmedAmerican_ (sid470527@id-470527.charlton.irccloud.com)
[17:45:58] *** Joins: susam_ (~susam@user/susam)
[17:46:00] *** Joins: esmailelbob_ (uid508799@id-508799.charlton.irccloud.com)
[17:46:01] *** Joins: snalty_ (~Shhh@user/snalty)
[17:46:02] *** Joins: brabrax_ (~brabrax@user/brabrax)
[17:46:03] *** Joins: derelict (~derelict@user/derelict)
[17:46:03] *** Joins: KernelPa- (~KernelPan@user/kernelpanic)
[17:46:03] *** Joins: drmessano_ (sid104353@user/drmessano)
[17:46:04] *** Joins: FLHerne_ (flh@flherne.uk)
[17:46:04] *** Joins: vlm_ (~vlm@user/vlm)
[17:46:05] *** Joins: hsiktas_ (sid224847@id-224847.tooting.irccloud.com)
[17:46:06] *** Joins: ebb_ (ebb@user/ebb)
[17:46:07] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[17:46:07] *** Joins: DCTWD- (~dc@uz.utmappro.com)
[17:46:08] *** Joins: ZeroKnight_ (zeroknight@dimensionzero.net)
[17:46:10] *** Joins: philipp64|work_ (~philipp64@174.27.8.12)
[17:46:11] *** Joins: slavfox_ (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[17:46:32] *** Joins: onu_ (~onufn@gibbs.uberspace.de)
[17:46:33] *** Joins: z0id (~zoid@user/taxationistheft)
[17:46:36] <Repiphany> os.path.dirname('script.py') == ''
[17:46:38] *** Joins: raydeeam_ (uid325131@dgplug/raydeeam)
[17:46:39] *** Joins: hexology- (~hexology@user/hexology)
[17:46:39] *** Joins: Yhg1s_ (sid387777@python/psf/thomas)
[17:46:44] *** Joins: meti_ (~meti@user/meti)
[17:46:52] *** Joins: crackerj- (crackerjac@pear.bnc4free.com)
[17:46:56] <jabberwock> .py os.path.dirname('script.py')
[17:46:59] <jabberwock> grr
[17:47:03] *** Joins: tsaka__ (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[17:47:12] *** Joins: milosz_ (~milosz@user/milosz)
[17:47:13] *** Joins: Titore_ (~Titore@user/titore)
[17:47:13] <jabberwock> litharge: may I put my own little VM at risk by providing the .py command here?
[17:47:21] <Repiphany> If you ran `python ./script.py` instead you'd get '.'
[17:47:22] *** Joins: Praise- (~Fat@user/praise)
[17:47:22] *** Joins: simone3 (~nya@user/sx)
[17:47:23] *** Joins: leonardus_ (sid358597@tinside.irccloud.com)
[17:47:30] *** Joins: emerent_ (~quassel@p200300cd57058c5aba27ebfffed28a59.dip0.t-ipconnect.de)
[17:47:30] *** Quits: emerent (~quassel@p200300cd57058c5aba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (zirconium.libera.chat (Nickname regained by services)))
[17:47:30] *** emerent_ is now known as emerent
[17:47:31] *** Joins: gr_wity (grawity@star.nullroute.eu.org)
[17:47:31] *** Quits: grawity (~grawity@star.nullroute.eu.org) (Killed (zirconium.libera.chat (Nickname regained by services)))
[17:47:31] *** gr_wity is now known as grawity
[17:47:40] *** Joins: pmcnabb3 (~pmcnabb@user/pmcnabb)
[17:47:41] *** Quits: y1n (~y1n@84-115-64-133.wifi.dynamic.surfer.at) (Remote host closed the connection)
[17:47:56] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[17:48:04] *** Joins: tlaxkit (~hexchat@170.253.46.216)
[17:48:07] *** Joins: ztrawhcse (eschwartz@archlinux/bugwrangler/eschwartz)
[17:48:07] *** Joins: ihaveamac_ (~ihaveamac@ihaveahax.net)
[17:48:07] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[17:48:09] *** Joins: waveform_ (~quassel@waveform.plus.com)
[17:48:12] *** Joins: dob1_ (~dob1@user/dob1)
[17:48:14] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:48:20] *** Joins: outsider1 (~sierkov@c89-176.i07-23.onvol.net)
[17:48:24] *** Joins: ripdog_ (~quassel@user/ripdog)
[17:48:25] *** Joins: Smedles_ (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[17:48:27] *** Joins: mogad0n_ (~mogad0n@user/mogad0n)
[17:48:27] *** Joins: explodes_ (~explodes@user/explodes)
[17:48:27] *** Joins: yogoyo_ (~patrick@user/yogoyo)
[17:48:27] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Killed (zirconium.libera.chat (Nickname regained by services)))
[17:48:27] *** mogad0n_ is now known as mogad0n
[17:48:28] *** Joins: Yasumoto_ (~Yasumoto@ec2-34-212-228-153.us-west-2.compute.amazonaws.com)
[17:48:28] *** Joins: h_ (rootvegeta@fsf/member/hays)
[17:48:36] *** Joins: schumaml3 (~schumaml@dslb-188-104-168-148.188.104.pools.vodafone-ip.de)
[17:48:38] *** Joins: thib_ (~thib@wikimedia/Thibaut120094)
[17:48:43] *** Joins: agronholm_ (sid403424@id-403424.brockwell.irccloud.com)
[17:48:44] *** Quits: philipp64|work (~philipp64@174.27.8.12) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: binchickin (~binchicki@165.22.169.69) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: hexology (~hexology@user/hexology) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: hsiktas (uid224847@id-224847.tooting.irccloud.com) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 255 seconds)
[17:48:44] *** philipp64|work_ is now known as philipp64|work
[17:48:44] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: KernelPanic (~KernelPan@user/kernelpanic) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: FLHerne (flh@flherne.uk) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: swistak (~swistak@185.21.216.141) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: outsider (~sierkov@c89-176.i07-23.onvol.net) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: rndusr (~rndusr@user/rndusr) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: drmessano (sid104353@user/drmessano) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Titore (Titore@user/titore) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: mikebald_ (~mikebald@159.203.185.106) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: onu (~onufn@gibbs.uberspace.de) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: supbo (~kenan@li227-215.members.linode.com) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: meti (~meti@user/meti) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: agronholm (sid403424@id-403424.brockwell.irccloud.com) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: esmailelbob (uid508799@id-508799.charlton.irccloud.com) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: vlm (~vlm@user/vlm) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Yasumoto (~Yasumoto@ec2-34-212-228-153.us-west-2.compute.amazonaws.com) (Ping timeout: 255 seconds)
[17:48:45] *** slavfox_ is now known as slavfox
[17:48:45] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: cman (~Cody@2603:9000:d104:8465:c874:df99:8583:75ed) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: schumaml2 (~schumaml@dslb-188-104-168-148.188.104.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: dld (~davidlowr@2601:197:600:1210:9957:7449:5ffc:ef4d) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: zamba (~marius@5.226.162.54) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: explodes (~explodes@user/explodes) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: neoclust (~neoclust@mageia/board-dev/neoclust) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: ilmostro (~ilmostro@user/ilmostro) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Dev0n (~Dev0n@user/dev0n) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Dantalion (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: extmind (~lars@quasar.extmind.de) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: susam (~susam@user/susam) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: thib (~thib@wikimedia/Thibaut120094) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Xat` (~Xat`@ns300217.ip-91-121-29.eu) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: osxtra (~root@136.49.108.80) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: The-Compiler (~compiler@the-compiler.org) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: computeiro (~Wender@189.37.64.123) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Elzington (~Elzington@68.235.43.141) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: alexyov (~alexyov@79.124.0.2) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: sincorchetes (~sincorche@2.red-79-146-41.dynamicip.rima-tde.net) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: seednode (~seednode@user/seednode) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: yogoyo (~patrick@user/yogoyo) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: koziad (~koz@74.102.176.11) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: drant (~drant@2a05:f480:1c00:d82::) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: rdvn (~rdvn@user/rdvn) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Nei (~ailin@user/nemui) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: radu24240 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: dulanic (~dulanic@47.187.144.163) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: PiRATA (~weechat@user/pirata) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: milosz (~milosz@user/milosz) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: drogas (~drogas@jump2.jet.uk) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: Allegretto (~allegrett@84-236-53-146.pool.digikabel.hu) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: ebb (ebb@user/ebb) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: kiska (~kiska@user/kiska) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: acid (~acid@user/acid) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: con3 (~con3@143.198.53.32) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: probonic (~probonic@mail.philevansweb.com) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: bryce (~bryce@ool-457dd6ac.dyn.optonline.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: programmerq (~programme@user/programmerq) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: ripdog (~quassel@user/ripdog) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: tanner (~tanner@tilde.town) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: snalty (~Shhh@user/snalty) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: crackerjack (crackerjac@pear.bnc4free.com) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: zoid (~zoid@user/taxationistheft) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: dbristow (~dbristow@user/dbristow) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: hays (rootvegeta@fsf/member/hays) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: japh (~scp1@user/japh) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: micronn (~micronn@user/micronn) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: LordKalma (~LordKalma@neth.ruilvo.com) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: nigelb (~nigel@zeus.nigelb.me) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: simone (~nya@user/sx) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: waveform (~quassel@waveform.plus.com) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: DCTWD (~dc@uz.utmappro.com) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: Yhg1s (sid387777@python/psf/thomas) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: dale (dale@user/dale) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: taru9 (~realTaru9@user/taru9) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: s1b1 (~s1b1@user/s1b1) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: carlio (~carlio@88.198.149.110) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: foureyes (foureyes@brought.to.you.by.bnc4free.com) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: b_jonas (~x@catv-176-63-12-30.catv.broadband.hu) (Ping timeout: 255 seconds)
[17:48:47] *** onu_ is now known as onu
[17:48:47] *** hsiktas_ is now known as hsiktas
[17:48:47] *** drmessano_ is now known as drmessano
[17:48:47] *** ebb_ is now known as ebb
[17:48:47] *** ZeroKnight_ is now known as ZeroKnight
[17:48:47] *** leonardus_ is now known as leonardus
[17:48:47] *** esmailelbob_ is now known as esmailelbob
[17:48:47] *** agronholm_ is now known as agronholm
[17:48:47] *** vlm_ is now known as vlm
[17:48:47] *** Joins: gabe_ (~gabe@user/gabe)
[17:48:47] *** alexyov5 is now known as alexyov
[17:48:47] *** dulanic6 is now known as dulanic
[17:48:47] *** quasineutral6 is now known as quasineutral
[17:48:47] *** brabrax_ is now known as brabrax
[17:48:47] *** simone3 is now known as simone
[17:48:47] *** raydeeam_ is now known as raydeeam
[17:48:49] *** AhmedAmerican_ is now known as AhmedAmerican
[17:48:51] *** Yhg1s_ is now known as Yhg1s
[17:48:52] *** FLHerne_ is now known as FLHerne
[17:48:53] *** ayusta is now known as ayustae
[17:48:53] *** seednode2 is now known as seednode
[17:48:53] *** pmcnabb3 is now known as pmcnabb
[17:48:53] *** radu242407 is now known as radu24240
[17:48:55] *** Joins: research (~k@lulzsec.co.uk)
[17:49:04] *** Joins: raek1 (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[17:49:06] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 240 seconds)
[17:49:10] *** Nei_ is now known as Nei
[17:49:20] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[17:49:20] *** Joins: tanner (~tanner@tilde.town)
[17:49:22] *** Joins: sgn (~sgn@user/sgn)
[17:49:25] *** Joins: LordKalma (~LordKalma@neth.ruilvo.com)
[17:49:25] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[17:49:26] *** Joins: mikebald (~mikebald@159.203.185.106)
[17:49:27] *** Joins: taru9 (~realTaru9@user/taru9)
[17:49:28] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[17:49:30] *** Joins: y1n (~y1n@84-115-64-133.wifi.dynamic.surfer.at)
[17:49:30] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:49:33] <jabberwock> oh good, I'm not insane. That's what I was doing
[17:49:34] *** Joins: acid (~acid@user/acid)
[17:49:35] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[17:49:37] *** Joins: el_kevino (~mote@2604:a880:400:d1::901:5001)
[17:49:45] *** Joins: The-Compiler (~compiler@the-compiler.org)
[17:49:55] <jabberwock> why would someone want the '.'?
[17:50:00] *** Joins: drant (~drant@2a05:f480:1c00:d82::)
[17:50:08] *** Joins: Dev0n (~Dev0n@user/dev0n)
[17:50:13] *** Joins: micronn (~micronn@user/micronn)
[17:50:22] *** Joins: jim (~jim@about/linux/staff/jim)
[17:50:25] <grawity> because it's in fact a valid directtory name for a path that's in the current directory
[17:50:25] *** Joins: Allegretto (~allegrett@84-236-53-146.pool.digikabel.hu)
[17:50:25] *** Joins: koolazer (~koo@user/koolazer)
[17:50:25] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[17:50:26] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[17:50:33] <grawity> which an empty string is not
[17:50:36] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[17:50:39] *** Joins: programmerq (~programme@user/programmerq)
[17:50:40] <Repiphany> If you're trying to get a file in the same directory, './file' points there but '/file' points to root
[17:51:08] <jabberwock> grawity: Yes. So why would os.path.basename(__file__) be empty?
[17:51:19] <jabberwock> (with python script.py)
[17:51:31] <Repiphany> because __file__ == 'script.py' if you do that
[17:51:34] *** Joins: s1b1 (~s1b1@user/s1b1)
[17:51:44] <jabberwock> got it. Thanks. That's.. hmm
[17:51:51] <jabberwock> not worth tackling but seems iffy
[17:53:05] <jabberwock> I may not be understanding it enough. It seems like I should get consistent results since ./test.py and "test.py" are the same file in those cases
[17:53:19] <jinsun> __file__ is the full path for me, not just script.py, maybe windows thing, the docs don't say much about it
[17:53:23] <jabberwock> anyhoo I'm glad RealKiller solved the issue
[17:53:24] *** Joins: rdvn (~rdvn@user/rdvn)
[17:53:25] <gitesh> while I'm learning programming and writing programs , functions are meant to abstract things so that I don't repeat myself DRY principle. Is the same principle applied to Event-Driven programming or GUI programming?
[17:53:25] *** Joins: extmind (~lars@quasar.extmind.de)
[17:53:36] <bjs> gitesh: sure, why not
[17:53:36] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[17:53:38] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[17:53:39] *** Joins: nmoura (~nmoura@177.192.16.58)
[17:53:45] <jabberwock> jinsun: this bugs my security brain. something about it is off
[17:53:55] <gitesh> bjs: not because we are not repeating ourselves
[17:53:55] *** Joins: PiRATA (~weechat@user/pirata)
[17:53:59] <bjs> gitesh: they're good principles and if you don't have to repeat yourself when programming a GUI that's good there too
[17:54:03] <bjs> gitesh: what do you mean
[17:54:05] <gitesh> bjs: because an event is bind to a function
[17:54:08] <jabberwock> some kind of platform-specific directory traversal thing
[17:54:12] <bjs> gitesh: yes
[17:54:14] <gitesh> where is repeatation in that bjs
[17:54:24] <grawity> jabberwock: hmm good point
[17:54:27] <bjs> gitesh: what if each button does the same thing? or similar things?
[17:54:37] * jabberwock should look deeper
[17:54:56] *** Quits: shoobie (~shoobie@user/shoobie) (Ping timeout: 255 seconds)
[17:54:58] *** Joins: Naan (~Naan@user/naan)
[17:55:04] <gitesh> bjs: what if it doesn't
[17:55:11] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1d78:91e0:1aa2:663d)
[17:55:14] <bjs> gitesh: then, you're not repeating yourself so it doesn't matter?
[17:55:19] <bjs> gitesh: I'm not sure what the question is
[17:55:19] *** Joins: shoobie (~shoobie@user/shoobie)
[17:55:32] *** Quits: Linux77 (~kvirc@186.235.105.168) (Ping timeout: 245 seconds)
[17:55:43] <jabberwock> "Is DRY applied to Event-Driven and and/or GUI programming?" the answer is yes, ideally
[17:55:54] *** Joins: Mikro (leo@the.c0ffee.shop)
[17:56:01] <gitesh> i am not able to solve my confusion about while binding events functions are used and not other stuff of programming
[17:56:04] <jabberwock> It's an approach rather than an implementation. If it was the latter then the world would be cleaner, literally
[17:56:19] *** renrelkha is now known as renrelkha_
[17:56:26] <bjs> gitesh: the way some GUIs work is that they're setup so that when you click on a button it runs some code
[17:56:36] <Yhg1s> gitesh: if you want to use 'other stuff', go ahead. I'm not sure what 'other stuff' you think will work.
[17:56:46] *** renrelkha_ is now known as renrelkha
[17:56:48] *** Joins: foureyes (foureyes@brought.to.you.by.bnc4free.com)
[17:56:55] <bjs> gitesh: it's just, the way the libraries did that was putting the code in a function so that all the library has to do is call it.  I'm not sure what "other stuff" you're thinking the library could use instead
[17:57:33] <jabberwock> grawity: Do you know who the folks are that I'd get in contact with if I found something with this?
[17:57:55] <jabberwock> I'm going to put "libfuzzer/afl" in my omnifocus and hope to get to it
[17:58:57] <gitesh> bjs: but why all events are thought as whole unit
[17:59:05] <bjs> gitesh: I don't know what you mean by "unit" here
[17:59:20] <gitesh> In Python, a function is a chunk of code that performs some operation that is meaningful for a person to think about as a whole unit
[17:59:38] <bjs> gitesh: I don't know what the "as a whole unit" bit of that means or where this sentence comes from
[17:59:42] *** Quits: y1n (~y1n@84-115-64-133.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[17:59:58] <jabberwock> I think there is a lack of fundamental understanding of memory
[17:59:58] *** Quits: milosz_ (~milosz@user/milosz) (Remote host closed the connection)
[18:00:43] <gitesh> functions are meaningful to us rather than compiler i think
[18:00:44] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[18:00:52] <bjs> gitesh: the GUI library really doesn't have a very deep reason to use functions here.  It's just that the whole idea is that "when you click a button, it runs your code to do things". Like when you click a button, the library runs your code that prints a message to the user or whatever
[18:00:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:01:29] <gitesh> oh i see bjs
[18:01:31] <bjs> gitesh: functions are just the obvious thing to use to write down the code and to give it to the library
[18:01:38] <gitesh> that's why functions are used there?
[18:01:39] <jabberwock> gitesh: what is your goal? Human names are for humans, no doubt about that
[18:01:45] *** susam_ is now known as susam
[18:01:51] <bjs> gitesh: yes,  you keep asking that as if there's an obvious other thing they could use
[18:02:03] *** Joins: dale (dale@user/dale)
[18:02:06] *** Joins: pnoud (~pnoud@user/pnoud)
[18:02:08] <gitesh> so when we are writing a GUI code we are basically building a library?
[18:02:17] *** Joins: Atque (~Atque@user/atque)
[18:02:29] <bjs> gitesh: well you talked about bind(), that bind() function comes from a library that someone wrote
[18:02:32] <leduyquang753> Just making a bunch of functions isn't really creating a library.
[18:03:00] <jabberwock> gitesh: You can use a book or you can build a fort with a bunch of books. I dunno if that analogy makes sense
[18:03:17] <bjs> gitesh: when you say `button3.bind("onClick", show_picture_to_user_function)` or whatever, the bind function has to remember that and then when you click on button3 it runs the code to show the picture to the user.
[18:03:33] *** Joins: abraxas (~abraxas@2600:8805:c880:3:c7fe:fc8e:f2cc:8056)
[18:03:34] <jabberwock> If you write the book and the book references other books, you're using a library. If you write a book and other books reference yours, you have written a library
[18:03:46] <jabberwock> bjs: not meaning to step on toes
[18:04:45] <bjs> gitesh: functions are really just the only way to do that,  it's not that the libraries are using functions "not other stuff", it's ... what other stuff is there to use?
[18:04:57] *** Joins: oxipital (~oxipital@165.225.60.216)
[18:04:57] *** Quits: RealKiller (~Guest75@68.207.220.203.dial.dynamic.acc01-spen-bby.comindico.com.au) (Quit: Client closed)
[18:05:24] <sybariten> deniska: (sorry, late reply) aha!  so the i and j from the for loop _can_ go straight into the "insering process" like that. Sounds more logical to me!
[18:06:33] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:07:11] <jabberwock> I go back to this blog on occasion. That "i and j" reminded me: https://accidentallyquadratic.tumblr.com/
[18:07:17] <gitesh> i can understand now if i think as i am building a library of functions which will be used by events
[18:07:21] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[18:07:36] <sybariten> grawity: no, i mean, i thing i was suggesting something like inserting i and j directly, without caring if they are string or integer ... since the technique seemed to depend on positions (i and j being the first and second of something) , rather than scanning multiple records and checking if they are %s or %d . I mean, there _was_ a test indeed, but that was before this part what i was unsure
[18:07:37] <sybariten> about. Dunno if it makes sense?
[18:08:27] *** Joins: varaindemian (~varaindem@86.124.78.162)
[18:08:34] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[18:08:41] <madprops> how can I call what goes inside if __name__ == "__main__":
[18:08:42] <grawity> sybariten: in your code example, it seems the author specifically wants to put additional quotes in the output if it's a string, hence the check
[18:08:44] <madprops> it's not a function per se
[18:08:45] *** Quits: drant (~drant@2a05:f480:1c00:d82::) ()
[18:08:45] *** Joins: schumaml4 (~schumaml@dslb-178-007-202-117.178.007.pools.vodafone-ip.de)
[18:09:02] <grym> madprops: a sequence of module-level statements
[18:09:10] <grym> (the first of which is an `if`
[18:09:27] <grawity> sybariten: so the 'isinstance' has a different purpose, and has nothing to do with the method by which they format the result
[18:09:27] <jabberwock> madprops: any reason to not move it into a function?
[18:09:33] <madprops> i mean. I'm documenting. wanted to call it "main function" but seems wrong
[18:09:43] <grym> madprops: it's not that, no
[18:10:02] <grym> if you `if __name__ == "__main__": main()`, then main is the main function though :)
[18:10:03] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:10:06] *** snalty_ is now known as snalty
[18:10:20] <gitesh> bjs: `button3.bind("onClick", show_picture_to_user_function)`  how does this work?
[18:10:32] *** Joins: Blankspace (~abcd@user/blankspace)
[18:10:51] <bjs> gitesh: what do you mean?  the GUI library has a bind function and it remembers that for button3 it should run the show_picture_to_user_function function
[18:11:16] *** Quits: schumaml3 (~schumaml@dslb-188-104-168-148.188.104.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[18:11:33] <bjs> so that later when you click that button, it knows it's supposed to run that function for you
[18:11:38] <sybariten> grawity: no that part i understood, i understood the first test. My confusion was justr simply with how %s and %d worked, after that. I was suspecting maybe it had nothing to do with positions in this case, and that they acted as a test or filter, again. That %d would insert an integer that it finds among a range of choices. But i guess this did indeed build upon actual positional references.
[18:12:07] <sybariten> i think it would be much more obvious to me, had they used the more modern notation that deniska mentioned. Where i and j gets used directly
[18:12:12] *** Joins: schumaml (~schumaml@dslb-094-216-174-041.094.216.pools.vodafone-ip.de)
[18:12:32] <sybariten> Oh my gosh i cracked open a rotten egg, and my reaction is a bit more dramatic than most peoples i think
[18:12:48] <jabberwock> gitesh: great question.
[18:12:54] <grawity> right, it's quite new though and I still see people showing up writing code for python2..
[18:12:57] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[18:13:11] <jabberwock> gitesh: Have you understood interrupts? https://en.wikipedia.org/wiki/Interrupt
[18:13:31] <jabberwock> I think that's a good foundational thing to know when it comes to events
[18:13:52] *** Quits: schumaml4 (~schumaml@dslb-178-007-202-117.178.007.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[18:13:53] <Luyin> ok so, I'm testing whether my package installs in a clean env - that is, I create a new venv, and run `pip install -e path/to/my/pkg` in there. Now I get a "ModuleNotFoundError: No module named 'filetype'", which makes sense because my package requires this other package. So do I just include a requirements.txt with my package and put filetype in there? Or do I somehow tell setuptools that it
[18:13:55] <Luyin> should 'get' filetype before?
[18:14:46] <grym> Luyin: setup.py has an install_requires= kwarg in setup()
[18:14:51] <grym> Luyin: list deps there
[18:15:32] *** Quits: resmo (~resmo@2a00:d420:9:8a00:5ea1:e89e:f9d:3ad8) (Ping timeout: 245 seconds)
[18:15:45] <Luyin> grym: I'm just reading https://packaging.python.org/tutorials/packaging-projects/#configuring-metadata about the setup.py and have found the "packages" part there - that's something else?
[18:16:07] <grym> Luyin: yes
[18:16:12] <Luyin> I mean, it's clearly something else, but I don't think I understand the difference. Would this be "include more than one package in the distro package"?
[18:16:21] <grym> Luyin: no
[18:16:34] *** Quits: emika (~emika@83.136.182.80) (Ping timeout: 240 seconds)
[18:16:38] <grym> Luyin: https://packaging.python.org/discussions/install-requires-vs-requirements/#install-requires
[18:16:41] <grym> (perhaps)
[18:17:02] <grym> there's this semantic kerfuffle about requirements.* vs install_requires and i have never ever understood it and i just ram deps into setup.py and call it good
[18:17:10] *** Joins: emika (~emika@83.136.182.234)
[18:17:24] *** Joins: dez (uid92154@user/dez)
[18:17:28] <grym> (or setup.cfg, pyproject.toml, whatever)
[18:17:33] <altendky> aside from usage, one "works" when installing a package and the other doesn't.  `:]`
[18:17:35] <gitesh> bjs: `button3.bind("onClick", show_picture_to_user_function)`  is this same as alex.forward(90) in turtle programming ?
[18:17:39] <bjs> gitesh: here's a little toy example https://bpa.st/GOCQ  showing kind of what the GUI does
[18:17:54] <grym> altendky: right, one's horrible and the other makes sense!
[18:18:43] <jabberwock> bjs: that was super kind of you :)
[18:18:53] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[18:19:20] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[18:20:05] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:20:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:21:39] <Luyin> grym: I wish I could just put everyting in pyproject.toml, but that doesn't work yet afaiu
[18:21:43] *** Joins: drant (~drant@2a05:f480:1c00:d82::)
[18:23:08] <grym> Luyin: not without helper build systems
[18:23:14] <grym> (poetry, flit)
[18:23:34] <Luyin> hmm, I was using flit, but my package isn't FLOSS yet, so can't put it on pyPI :(
[18:23:40] <Luyin> (I'm working on it though)
[18:23:44] <SnoopJ> grym, "install_requires describes a package, requirements.txt describes an environment" is about where my understanding is
[18:24:25] *** Quits: felixz (uid262934@user/felixz) (Quit: Connection closed for inactivity)
[18:24:26] <grym> SnoopJ: yeah.  i just don't see the point of a package that is divorced from its environment, because it won't, in general, run
[18:24:42] <SnoopJ> grym, yea, requirements.txt isn't very useful for that
[18:24:43] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[18:24:50] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[18:25:00] <Luyin> well, I'd like to keep the configuration to a minimum, file-wise, so if I can do without a req.txt, I'll put it in setup.py because I can't avoid that yet.
[18:25:04] <grym> maybe the other way to say that is "if you're going to work on my code with me, then i expect you to do the equivalent of `pip install -e`, so what's this other text file for?!"
[18:25:07] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:26:02] <grym> Luyin: ^ this is probably a distraction from your immediate concern, though
[18:26:03] <SnoopJ> they just don't describe the same thing, but the things they describe overlap another abstraction layer away (i.e. environments contain packages)
[18:26:36] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:26:45] <Luyin> grym: what you mean with 'this' - my message or yours?
[18:27:25] <grym> Luyin: my diversion w/r/t setup.py vs requirements.txt doesn't really address your question
[18:27:48] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:28:11] <Luyin> well, it does, because I've got literally this one requirement for my package. so setup.py with install_requires it is.
[18:28:24] <Luyin> at least until I can put it in pyproject.toml and `git rm setup.py` :D
[18:28:37] <grym> Luyin: if you're like-ish me, you'll find that ergonomic enough
[18:28:40] <SnoopJ> Luyin, is there a chance we can see your setup.py? Putting this dependency in install_requires should do the trick if it's on PyPI.
[18:29:12] <Luyin> SnoopJ: it's not on PyPI, I mentioned earlier. I hope to FLOSS the package later this year, but can't do it right now (not included in current sprints :) )
[18:29:23] <Luyin> and there is some IP stuff in it that I need to get rid of first
[18:29:40] <grym> Luyin: you can tell setup.py to go look in a git rep
[18:29:41] <grym> o
[18:29:57] <grym> or a private pypi mirror
[18:30:01] <grym> or a file, if you're careful
[18:30:03] <SnoopJ> Luyin, oh, is `filetype` another one of your packages?
[18:30:13] <Luyin> SnoopJ: no, it's on PyPI
[18:30:18] <Luyin> sorry, I might have confused what you meant
[18:30:28] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4d9e-129d-662b-32a5.res6.spectrum.com)
[18:30:35] <Luyin> https://pypi.org/project/filetype/
[18:30:38] <SnoopJ> Luyin, is there some reason you don't want to install filetype from PyPI? You don't have to put your package there in order for pip to source your dependencies there.
[18:30:40] <grym> Luyin: ah.  yes.  if your _dependencies_ are on pypi, just the string of their dist name will Just Work
[18:30:50] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[18:30:51] <grym> Luyin: regardless of the distribution status of your package
[18:31:03] <grym> (99% of my code is not on pypi, i use pypi deps everywhere)
[18:31:16] <grym> (proprietary, never ever going public)
[18:31:28] *** Joins: Blankspace (~abcd@user/blankspace)
[18:31:29] *** Joins: sgn (~sgn@user/sgn)
[18:31:34] <gitesh> bjs: with your code https://bpa.st/GOCQ in mind the use of action_function is only once then it disbehave with the principle of DRY
[18:31:39] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 255 seconds)
[18:31:50] <Luyin> SnoopJ: I don't understand what you mean. Why shouldnt I use pypi's filetype?
[18:31:56] <bjs> gitesh: then it disbehaves?
[18:31:57] <Luyin> now I'm confused. are we talking about different things?
[18:31:58] <bjs> what do you mean
[18:32:02] <SnoopJ> Luyin, I guess I misunderstood and thought you don't want to.
[18:32:06] <Luyin> no no
[18:32:21] <gitesh> bjs: i mean DRY principle doesn't apply there to that function
[18:32:29] <bjs> gitesh: yes,  so?
[18:32:38] <SnoopJ> Luyin, `install_requires=["filetype"]` in your setup.py is enough information to declare this dependency, and if you `pip install your/project/`, it will understand this dependency and get the one from PyPI if it isn't already satisfied (and the package isn't in the cache)
[18:32:43] <gitesh> i want all functions to be DRY principle based
[18:32:54] <gitesh> that's the core principle of functions
[18:32:55] <bjs> gitesh: okay but that's just not the only reason people use functions
[18:32:58] <bjs> no it is not
[18:33:00] <bjs> it's abstraction.
[18:33:17] <Luyin> let's test my understanding here: if I put `install_requires=["filetype~=1.0"]` in my setup.py, it should be automatically installed when I run `pip install -e /path/to/my/pkg`?
[18:33:34] <Luyin> oh, just any version without version pinning works too?
[18:33:46] <bjs> gitesh: the use of functions here has nothing to do with DRY.
[18:33:50] <SnoopJ> Luyin, yes, but pinning is a good idea :)
[18:33:58] <gitesh> bjs: what abstraction is that a chunk of code that performs some operation that is meaningful for a person to think about as a whole unit
[18:34:17] <bjs> gitesh: you are the one who keeps talking about "whole unit"s. I don't even know what that means.
[18:34:31] <SnoopJ> Luyin, so, setup.py is strictly package metadata, PyPI doesn't enter the picture at all in this conversation until you say "I want to put this somewhere publicly available that pip knows about by default."
[18:34:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[18:34:46] *** Quits: schumaml (~schumaml@dslb-094-216-174-041.094.216.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[18:34:47] <gitesh> bjs: :D idk it comes from the course
[18:34:49] <bjs> gitesh: my code (and the GUI libraries it's trying to mimic) are abstracting away the actual code that runs when you click a button.  See how my "pretend_to_run_gui" doesn't know anything about showing pictures to the user.
[18:35:04] <bjs> gitesh: you keep asking why does it use functions, the better question is how would you do this _without_ using functions?
[18:35:06] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[18:35:13] <SnoopJ> install_requires is how you let pip (or other tools that read setup.py) know about the dependency, and then when running those tools they do [something magic] to ensure the requirement is satisfied before proceeding with the installation.
[18:35:42] <gitesh> bjs: https://runestone.academy/runestone/books/published/fopp/Functions/intro-Functions.html
[18:35:49] *** Joins: Blankspace (~abcd@user/blankspace)
[18:35:59] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:36:04] *** Quits: Trashlord (~trash@user/trashlord) (Remote host closed the connection)
[18:36:05] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[18:36:07] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[18:36:11] <Luyin> SnoopJ: that is basically what I said before, correct? I put "filetype" in the install_requires list; then I run pip install my_pkg, and pip should then also install filetype. is this a correct description of the process?
[18:36:21] <grym> Luyin: yep
[18:36:58] <SnoopJ> Luyin, as long as it _needs_ to install it, yes. If the requirement is already satisfied, it'll just move on, but this is a pedantic quibble, you have the right idea.
[18:36:58] <bjs> gitesh: your questions have been something like "why do GUI libraries use functions for event callbacks rather than something else? What principle is it using?"
[18:37:29] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[18:37:45] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[18:37:48] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:37:50] <Luyin> ok, good!
[18:38:35] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[18:38:41] <gitesh> bjs: i want to know really is that why abstraction is required in GUI programming
[18:38:52] <gitesh> for binding events
[18:39:00] <gitesh> like your code
[18:39:02] <bjs> gitesh: you've used GUI libraries before? Yeah
[18:39:07] <bjs> like tkinter or PySide or something?
[18:39:16] <gitesh> yes i have used tkinter
[18:39:35] <bjs> gitesh: do you know _how_ tkinter works? have you looked inside? do you know how it interacts with Tcl to draw things and manage buttons?
[18:39:56] <gitesh> no? :)
[18:40:10] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[18:40:14] <bjs> gitesh: but you were still able to make it do things when you click buttons?
[18:40:25] <gitesh> yes
[18:40:35] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[18:40:43] <bjs> gitesh: well _that_ is the abstraction at work.  The library knew nothing about what you wanted to do, and you know nothing about how the library makes it work
[18:41:14] *** Joins: mikeliuk (~mikeliuk@213.205.198.158)
[18:41:27] <deniska> back in a day we made UIs using a big loop with a lot of `if`s inside, but we don't do it anymore because functions are easier to manage :)
[18:41:40] <bjs> gitesh: this all works because you tell the library "when the button is clicked, run this code". You don't need to know how the button is drawn or how it works or how it knows when it gets clicked.  tkinter doesn't need to know what your code does, all it has to do is run it
[18:41:56] <bjs> gitesh: you're too focused on the fact it's a _function_ that the code is in.
[18:42:16] <bjs> gitesh: tkinter doesn't choose to use a function for this instead of something else for any reason to do with abstraction or DRY or anything like that
[18:43:00] *** Joins: schumaml (~schumaml@dslb-094-216-173-116.094.216.pools.vodafone-ip.de)
[18:43:11] *** pizzaiolo is now known as pizza
[18:43:36] <Deadly_Alive> ive had pizza the last 3 nights in a row
[18:43:58] * pizza gives Deadly_Alive a gold star
[18:44:28] <Luyin> then I need to find out why I still get the ModuleNotFoundError now :| because I've put that in setup.py now: https://paste.xinu.at/OVj0/python (my (redacted) setup.py) and the error when I run `pip install -e /path/to/pkg/repo`: https://paste.xinu.at/c3pyx/ any ideas? SnoopJ grym
[18:44:31] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[18:44:54] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 252 seconds)
[18:44:54] *** Joins: schumaml1 (~schumaml@dslb-188-104-191-140.188.104.pools.vodafone-ip.de)
[18:44:56] <gitesh> i have hard time understanding this really despite anything else otherwise
[18:45:20] <bjs> gitesh: okay so your real question is "why do they use a function rather than something else"?
[18:45:25] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[18:45:36] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[18:45:40] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[18:45:41] *** Quits: drant (~drant@2a05:f480:1c00:d82::) ()
[18:45:53] <gitesh> bjs: no actually i dont know how that things happens idk
[18:45:54] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 240 seconds)
[18:46:01] <Repiphany> Luyin: is filetype.py a file in .../internals/
[18:46:02] <bjs> gitesh: how what happens?
[18:46:03] <SnoopJ> Luyin, oh, your import is relative. `from . import filetype` translates to English as "from the local package namespace, find a package named 'filetypes' and import it."
[18:46:23] <gitesh> bjs: i feel like coding GUI means creating lots of functions , is that how real programming works?
[18:46:24] <SnoopJ> Luyin, if you want to use the package installed from PyPI, it should be `import filetype; from . import utils` ther, I think.
[18:46:37] <bjs> gitesh: you care far more about the fact it's a function than you should
[18:46:40] <SnoopJ> gitesh, functions are useful ways to organize code that is repeated.
[18:46:42] <gitesh> bjs: like keep creating a lot of functions
[18:46:57] <bjs> gitesh: yes it's not uncommon for real programs to have lots and lots and lots of functions
[18:47:07] <SnoopJ> You can program without writing functions at all, but it isn't very fun and bugs are easy to write :)
[18:47:08] <gitesh> SnoopJ: yah bjs now take SnoopJ 's words does that apply to GUI anyways? no/
[18:47:26] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[18:47:40] <SnoopJ> gitesh, it applies to most programs written on a computer since ~1960, perhaps earlier
[18:47:50] <bjs> gitesh: there are two things here,  just normal programs have functions anyway, and the reasons you would want functions there _also_ apply to GUIs. But the GUI library itself also has this bind() function which takes a function, which is *another* reason to use a function
[18:47:53] <withered_wolf> @gitesh GUI or not, any programming uses functions. Some, many, tons, doesn't matter. Use functions to break out functionality and make your code more modular. It will save you huge amounts of time and headache.
[18:47:56] *** Quits: schumaml (~schumaml@dslb-094-216-173-116.094.216.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[18:48:05] <bjs> gitesh: if you want to make a button do something, you need a function if using one of those GUI libraries.
[18:48:08] <Repiphany> Functions aren't just about reducing repetition, it's about abstracting away the nitty-gritty of what actually needs to be done to get a particular result
[18:48:26] <SnoopJ> I didn't say that they were only for this purpose, and I did not mean to imply it.
[18:49:03] <Repiphany> If I have a function called make_a_million_dollars, you don't have to worry about what it does in the background to get a million dollars, only that it actually does that in the end
[18:49:18] <Luyin> ok my package structure: https://paste.xinu.at/Q9k/ (also redacted) - filetypes.py is a module I wrote (also the one that is imported in __init__.py), and it makes use of the PyPI package filetype. I had problems with namespace before, that's why my module is called filetypeS.
[18:49:29] <Repiphany> If you're the person who has to write the function in the first place, then you do have to work through the details
[18:50:07] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[18:50:11] <SnoopJ> Luyin, hmm, my mistake. Sorry, haven't had my coffee. The relative import looks fine. Can you show us the install with the verbosity turned up, maybe?
[18:50:12] <Luyin> functions are <3 btw :D
[18:50:21] *** Joins: RealKiller (~RealKille@68.207.220.203.dial.dynamic.acc01-spen-bby.comindico.com.au)
[18:50:33] <bjs> gitesh: for example, https://github.com/psf/requests/tree/master/requests is a popular library that makes HTTP requests. it's pretty small, only a handful of files, and it doesn't do much.  It uses functions a lot, there are over 200 functions in it (most of which are "methods" on a class).
[18:50:44] <SnoopJ> They beat the heck out writing your own subroutine machinery, and that's why they exist :)
[18:50:49] <RealKiller> does python debugging in vscode works with M1 Macs?
[18:50:54] <ssbr> functions are so 1990s, real programmers use *procedures*
[18:50:57] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[18:51:01] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:51:22] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:51:23] <ssbr> RealKiller: Probably -- nothing architecture-specific in python debuggers -- but the extension might not list support. I'd try it and see.
[18:51:29] <SnoopJ> RealKiller, it should, pdb itself is written in Python.
[18:51:45] *** Joins: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net)
[18:51:47] <gitesh> bjs: i think i have no reason to use funtions to bind events
[18:51:50] *** Parts: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net) ()
[18:51:50] <bjs> gitesh: here's another popular library written in Python, https://github.com/python-trio/trio/ . it's a big bigger than the last and does a bit more,  it has nearly two _thousand_ functions in it.
[18:52:11] *** Joins: Blankspace (~abcd@user/blankspace)
[18:52:12] <bjs> gitesh: okay, well you still need to use *something* to bind events to some code to run
[18:52:15] <bjs> gitesh: what would you use instead?
[18:52:23] *** Joins: Wu (~wu@254.red-83-52-60.dynamicip.rima-tde.net)
[18:52:44] <Luyin> SnoopJ: https://paste.xinu.at/qzh/
[18:52:45] <gitesh> bjs: i would just do if "onclick": name = 'gitesh'
[18:52:52] <bjs> gitesh: but where would you do that?
[18:54:14] <ssbr> gitesh: without functions you don't have a real way to do inversion of control and event based programming, such that the GUI library calls *you* rather than you calling it. So there would be no "onclick"
[18:54:33] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[18:54:43] *** Quits: yogoyo_ (~patrick@user/yogoyo) (Quit: WeeChat 3.0.1)
[18:54:53] <ssbr> there are GUI libraries that don't do inverted control like this, immediate mode GUIs. They are generally, surprisingly, easier to use.
[18:54:55] <RealKiller> whenever i run the debugger, i get this https://pastebin.com/CSRXfp6E
[18:55:04] <RealKiller> any idea what might be causing this?
[18:55:09] <ssbr> (but it isn't shaped like that at all. :))
[18:55:12] <RealKiller> I googled but found nothing
[18:55:13] *** Parts: m4ug (~m4ug@99.72.30.19) ()
[18:55:25] *** Quits: unyu (~pyon@user/pyon) (Read error: Connection reset by peer)
[18:55:30] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[18:56:27] <The-Compiler> RealKiller: what OS is this?
[18:56:28] <ssbr> RealKiller: It looks like this part of the extension is written in C++, and seems likely not to support M1 macs after all :(
[18:56:38] <The-Compiler> RealKiller: ah, sorry, you said above :)
[18:56:40] *** Joins: nmoura (~nmoura@177.192.16.58)
[18:56:40] <ssbr> (given that, well, it doesn't work)
[18:56:44] <gitesh> GUI programming looks weird to me
[18:56:51] <SnoopJ> gitesh, the idea of a GUI is kinda weird :)
[18:56:57] <gitesh> sorry for my bad luck guys you are doing good job
[18:57:18] <bjs> gitesh: it is weird, because the GUI is really the "main" program, and you're just asking it to do things
[18:57:21] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:57:36] <bjs> "when they click this button, run this code for me"
[18:57:42] <RealKiller> it's macOs bigSur with M1
[18:57:42] <gitesh> also i don't understand interactivity properly may be that's also my issue to sink in well gui coding
[18:57:45] <The-Compiler> RealKiller: https://youtrack.jetbrains.com/issue/PY-39242
[18:58:02] *** Quits: nmoura (~nmoura@177.192.16.58) (Client Quit)
[18:58:06] <The-Compiler> though that claims it's fixed
[18:58:18] <The-Compiler> in PyCharm though, funnilly enough, not VS Code
[18:58:44] <gitesh> bjs: so main program is GUI , no us?
[18:58:46] <The-Compiler> but maybe that can tell you more about the VS Code issue too, I haven't really read through the comments there
[18:58:47] <gitesh> *not
[18:58:49] <bjs> gitesh: yes
[18:58:52] <Luyin> SnoopJ: because I see flit in the debug output of pip install now: do you think something in my pyproject.toml interferes here?
[18:58:53] <SnoopJ> Luyin, huh, strange, I don't see the requirement mentioned there at all. Are you using setup.cfg/pyproject.toml alongside this setup.py, possibly? I see that flit is being invoked by pip
[18:58:57] <SnoopJ> ahh
[18:59:04] <Luyin> ha, jinx
[18:59:12] <RealKiller> The-Compiler it's from 2019, you reckon it's not M1specific issue
[18:59:12] <Luyin> yes, I also have pyproject.toml
[18:59:27] <SnoopJ> Luyin, if you're using pyproject.toml, set `requires` under tool.flit.metadata to a list of your dependencies. https://flit.readthedocs.io/en/latest/pyproject_toml.html#metadata-section
[18:59:50] <grym> ^ (and remove them from setup.py)
[19:00:04] <SnoopJ> Luyin, sorry, I probably should have asked that up-front. Your setup.py is basically being ignored here I think.
[19:00:29] <SnoopJ> (apologies, Python packaging is in a time of transition right now and this is...a mess)
[19:00:56] <ssbr> python packaging has been in a time of transition for the past 15 years.
[19:01:08] <grym> 15 years is a time!
[19:01:11] <Luyin> everything about python packaging seems to be a big mess, yes :(
[19:01:28] <gitesh> bjs: ok so main program is something else and i am just asking it to do things , here does that makes sense to use functions?
[19:01:36] <Luyin> I hope that pypr.toml is going to change that at least a bit
[19:01:46] <SnoopJ> Luyin, if you can believe it, it's a lot better than it was, and getting better steadily, but right now there's too many ways to do it :)
[19:01:48] <The-Compiler> RealKiller: well, do you know if your issue is M1 specific?
[19:01:52] *** Quits: schumaml1 (~schumaml@dslb-188-104-191-140.188.104.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[19:02:04] <RealKiller> I am not sure
[19:02:23] <bjs> gitesh: you are too focused on the fact it's using a function that you didn't really understand *what* it was doing
[19:02:25] <RealKiller> I can try work around in your link
[19:02:47] <bjs> gitesh: yes the GUI is the main program, and all you're doing is asking it to run bits of custom code when the user clicks on buttons and things for you.
[19:02:55] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[19:02:59] <SnoopJ> Luyin, what's happening here is that you've written a setup.py which is used by setuptools when that is the build backend. BUT, you're not using it as your build backend, so it's dead config.
[19:03:06] <SnoopJ> (you're using flit instead)
[19:03:35] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[19:03:37] <gitesh> bjs: then why we are not editing the real program?
[19:03:55] <bjs> gitesh: do you really want to open tkinter.py and edit it to make it do what you want?
[19:04:06] <bjs> especially given you don't even know how tkinter works...
[19:04:23] <Luyin> SnoopJ: right, so since *I'm* using flit, would another person cloning the repo and helping me out with building things also need flit?
[19:04:26] <SnoopJ> Luyin, we would be happy to expand on the nuances of all this, but the way to get unstuck here is to spell out your package's metadata (like this requirement) in pyproject.toml as dictated by flit, and then get rid of setup.py because it's confusing :)
[19:04:26] <ssbr> gitesh: even if you were to do that, the easiest way to do it would be similar to what you're doing now. The whole thing is architected in this event-based call-me-back way.
[19:04:47] <gitesh> bjs: what is weird for me is that you attach a function to events which doesn't follow DRY principle
[19:05:00] <SnoopJ> Luyin, anyone working on your package as a developer will, but flit will build you a distributible package that is installable by just pip.
[19:05:03] <ssbr> gitesh: how are you repeating yourself?
[19:05:03] <bjs> gitesh: DRY really is very unimportant.
[19:05:07] *** Joins: schumaml1 (~schumaml@dslb-178-007-201-199.178.007.pools.vodafone-ip.de)
[19:05:21] <Luyin> SnoopJ: hmmmm okay.
[19:05:22] <ssbr> also, that's true, DRY is just a description of one way that we can find things "iffy", but there are many other concerns as well.
[19:05:23] <bjs> gitesh: like it's nowhere near the most important reason that people use functions, and I'd bet a very large number of functions are only ever called once
[19:05:28] <gitesh> ssbr: I'm not reapeating
[19:05:30] <SnoopJ> Luyin, i.e. you run flit, flit builds a wheel, users install the wheel with pip (or whatever they're using that understands them)
[19:05:39] <ssbr> gitesh: then how does it violate DRY?
[19:05:42] <Luyin> SnoopJ: I'll thinkabout the ramifications of flit as a build dep later. for now I'll be happy to just get it installable :D
[19:05:43] <bjs> gitesh: you're still too focused on the fact the library is doing this with a function
[19:05:58] <gitesh> bjs: that break the reason to make function
[19:06:04] <ssbr> ohhhh
[19:06:06] <bjs> gitesh: you see it uses a function to do this "run this code for me" part and are saying there has to be a _reason_ for it to use a function there
[19:06:11] <ssbr> gitesh: no, there's many reasons to create a function, DRY is just one.
[19:06:12] <bjs> gitesh: DRY is *not* the reason people use functions.
[19:06:13] <gitesh> but i am just exagrating actulyy
[19:06:18] <SnoopJ> Luyin, yea, I wanted to clearly demarcate the difference between "here's the way out of this hole" and "hey, wanna know all kinds of neat facts about this hole's shape?" :)
[19:06:25] <Luyin> hehe
[19:06:27] <tsaka__> why does this yield a bunch of exceptions when trying to log? FORMAT = f'%(asctime)s {query.email}: %(message)s';  logging.basicConfig(format=FORMAT)
[19:06:30] <bjs> gitesh: but even if it was,  it's still irrelevant.
[19:06:39] <Luyin> SnoopJ: thanks for your help, it's a lot clearer now to me
[19:06:42] <Luyin> also grym
[19:06:43] <Luyin> :)
[19:06:55] <tsaka__> email does contain @ but not %
[19:07:02] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[19:07:02] <SnoopJ> Luyin, no problem. Hopefully the docs will...explain this stuff better, at some point :)
[19:07:09] <bjs> gitesh: imagine if functions weren't the right choice for this "run this code for me" part of the GUI library for a second.  We keep talking about using functions rather than "something else". But nobody you've talked to here has said what that "something else" actually is
[19:07:12] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:07:41] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[19:07:44] <gitesh> what i think mainly people use function to abstract things which is a one task to perform , which make sense to be a one task, ' operation that is meaningful for a person'
[19:07:44] <ssbr> bjs: I wonder if just... tkinter is bad for newbies, and they should learn guis with immediate mode guis to start with
[19:07:46] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[19:07:50] <SnoopJ> Luyin, oh, another pedantic detail: flit could build you an "sdist" (lit. "source distribution") instead of a wheel that would be pip-installable, too
[19:07:56] <ssbr> of course eventually everyone must learn this, but not for something simple like displaying their first gui window
[19:08:04] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[19:08:13] <bjs> gitesh: just forget all these reasons people use functions in their normal code, they all just don't apply to this 1 function.
[19:08:16] <ssbr> gitesh: in this case, functions are being used for something else: to provide inversion of control
[19:08:26] <ssbr> gitesh: there are many uses of that, as well.
[19:08:34] <bjs> gitesh: imagine tkinter didn't want to use functions,  but still wanted the "run this code for me" design.  What other thing could they use?
[19:08:36] <ssbr> (a term you can google is "callback")
[19:08:43] <bjs> ssbr: tkinter is bad, and not just for newbies :)
[19:08:49] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[19:08:52] <ssbr> bjs: yes yes, but qt would be even worse
[19:09:22] <ssbr> if you are a beginner, and just want to make your first ever prank app that pretends to be mcafee antivirus alerting you that all your base are belong to us or w/e....
[19:09:22] *** Joins: akk (~akk@75.161.155.222)
[19:09:33] <Luyin> lol
[19:09:44] <Luyin> why not make a GUI that just has a button that plays a rickroll
[19:09:53] <Luyin> way better way to try GUI programming
[19:10:00] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[19:10:21] *** Joins: Blankspace (~abcd@user/blankspace)
[19:11:01] <ssbr> Luyin: but then you have to embed a web view widget, and then you end up getting captchad because it isn't a real web browser, and then...
[19:11:28] <Luyin> oh well
[19:11:34] <Luyin> a nice hello world button then! :P
[19:11:47] *** Quits: bluss (~bluss@user/bluss) (Ping timeout: 245 seconds)
[19:12:02] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 252 seconds)
[19:12:17] <gitesh> bjs: what my main point of all the discussion is , why an event like "onclick" is a function?
[19:12:25] <bjs> gitesh: you're far too focused on the "function" part of it.
[19:12:27] <gitesh> why events are functions
[19:12:40] <bjs> gitesh: let's just pretend for a minute that they're *not* functions okay?
[19:12:42] <gitesh> i think so
[19:12:52] <gitesh> bjs: yea
[19:13:04] <bjs> gitesh: the idea of the GUI library is to run, and you can give it bits of code to run when people click buttons without you needing to look inside the library or edit it or anything
[19:13:06] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Client Quit)
[19:13:29] <bjs> gitesh: it gives you a bind() function to do that,  you say "some_button.bind(some_event, some_code_to_run)".  Does this all make sense so far?
[19:13:48] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[19:13:50] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[19:14:04] <gitesh> where I'm broken is i will tell you wait
[19:14:12] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[19:14:54] <gitesh> i am broken is why inversion using function i mean why inversion , why does clicking on a button has to do anything at all
[19:15:03] <gitesh> i want to make gui does nothing at all
[19:15:04] <bjs> gitesh: you're *way* too focused on the fact it's a function
[19:15:11] <bjs> forget the fact it's a function for a second
[19:15:18] <gitesh> ok
[19:15:31] <bjs> gitesh: well if you want a GUI that does nothing, then you just simply _dont_ tell the GUI library to run any code
[19:15:44] <bjs> by just not calling bind().
[19:16:17] *** Joins: unyu (~pyon@user/pyon)
[19:16:22] <gitesh> what is weird for me is clicking on a button and it does something <--- this is weird for me
[19:16:26] <bjs> But most GUIs aren't like that, you want something to happen when you click the button. And you want to tell the GUI to do something when the button is clicked.  And you want to be able to do that without looking inside the GUI library,  and without understanding it
[19:16:35] <bjs> gitesh: but that's how things work. You press a button and a light turns on
[19:16:36] *** Joins: bluss (~bluss@user/bluss)
[19:17:05] *** Quits: RealKiller (~RealKille@68.207.220.203.dial.dynamic.acc01-spen-bby.comindico.com.au) (Quit: Client closed)
[19:17:32] <bjs> gitesh: I walk into a room and I push the button and the light turns on,  I sit at my computer and push the button and the PC turns on. I press the enter button on my keyboard and it logs in. I click the IRC button and it opens this window.  You click buttons and then things happen.
[19:17:44] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[19:17:46] <gitesh> bjs: i have tried to get this many times in my life , may be that's one problem it's not sinking in my brain that i have many unusual thought about it
[19:17:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:17:58] <gitesh> *thoughts
[19:18:06] *** Joins: nmoura (~nmoura@177.192.16.58)
[19:18:14] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[19:18:27] *** Quits: frost (~frost@59.71.241.179) (Ping timeout: 265 seconds)
[19:18:31] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[19:18:40] *** Joins: kiska (~kiska@user/kiska)
[19:19:03] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:19:14] <gitesh> why does if i press a button and a light turns on, i want it to do something else next time i press a button i want a fan turned on
[19:19:27] <gitesh> and it's one - to - one relaship is weird for me
[19:19:35] <gitesh> *relasionship
[19:19:40] <bjs> gitesh: that's okay, the code you run when you push the button just does something different the second time
[19:19:40] <SnoopJ> it doesn't have to be one-to-one
[19:19:50] <supakeen> miso mosi
[19:19:53] <bjs> gitesh: it doesn't have to do the same thing each time. Like if I press my light button *again* the light switches *off*
[19:20:10] <gitesh> oh yeh
[19:20:14] *** Quits: tlaxkit (~hexchat@170.253.46.216) (Quit: Leaving)
[19:20:18] <bjs> the same code (/electronic circuit) is still happening when I press the button the second time
[19:20:20] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (Remote host closed the connection)
[19:20:25] <bjs> it's just doing something different because the light was already on
[19:20:31] *** Joins: Trashlord (~trash@user/trashlord)
[19:20:50] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[19:20:51] <gitesh> why does that interacition but?
[19:20:57] <gitesh> *interaction
[19:21:03] <bjs> gitesh: that wasn't a sentence, I'm not sure what it's supposed to mean.
[19:21:15] *** Joins: schumaml2 (~schumaml@dslb-188-104-173-162.188.104.pools.vodafone-ip.de)
[19:21:25] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1d78:91e0:1aa2:663d) (Quit: Leaving)
[19:21:47] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 255 seconds)
[19:22:32] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:23:22] *** Joins: Naan` (~Naan@user/naan)
[19:23:23] *** Quits: schumaml1 (~schumaml@dslb-178-007-201-199.178.007.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[19:24:15] *** Joins: magla (~gelignite@55d49622.access.ecotel.net)
[19:25:39] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 255 seconds)
[19:26:13] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[19:26:18] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d)
[19:26:25] *** Joins: schumaml3 (~schumaml@dslb-188-104-176-151.188.104.pools.vodafone-ip.de)
[19:27:18] *** Joins: Blankspace (~abcd@user/blankspace)
[19:27:26] *** Quits: schumaml2 (~schumaml@dslb-188-104-173-162.188.104.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[19:27:49] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[19:28:15] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[19:28:40] *** Joins: ckdcreation (~ckdCreati@147.55.133.131)
[19:29:48] *** Joins: drogas (~drogas@jump2.jet.uk)
[19:30:11] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[19:30:44] *** Quits: tims (~tims@220-245-254-151.static.tpgi.com.au) (Ping timeout: 252 seconds)
[19:31:46] *** Joins: neibo (~neibo@86.127.254.176)
[19:31:59] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[19:32:37] *** Quits: schumaml3 (~schumaml@dslb-188-104-176-151.188.104.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[19:34:19] *** Joins: adamts1 (~Adam@user/mysteryblokhed)
[19:35:21] *** Joins: schumaml3 (~schumaml@dslb-188-104-188-191.188.104.pools.vodafone-ip.de)
[19:37:13] *** waveform_ is now known as waveform
[19:38:27] *** Quits: adamts (~Adam@user/mysteryblokhed) (Ping timeout: 268 seconds)
[19:38:27] *** adamts1 is now known as adamts
[19:39:10] <Luyin> SnoopJ: grym right, everything works, even cloning and installing in a fresh environment. I'm happy with that result. thanks again and have a great weekend (soon)!
[19:39:17] <grym> cheers!
[19:41:35] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:43:03] <SnoopJ> yay
[19:44:58] <kieto> Do you guys use poetry to manage all the development workflow? e.g. develop, build, test, publish?
[19:45:23] <trace987> why does "for a in c: a=1" does not work and is there a way to get that working without performance cutbacks
[19:45:26] <kieto> I want to have a private PyPI repository and I'm trying to see if poetry will fit my use case
[19:45:40] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[19:46:21] <grawity> trace987: what's that supposed to achieve -- set all elements of c to 1?
[19:46:42] <grym> trace987: bit.ly/pynames1 is "why"; what do you want to actually do
[19:47:14] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:47:32] *** Joins: Blankspace (~abcd@user/blankspace)
[19:47:39] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:47:51] <trace987> yes
[19:48:15] <grym> trace987: `c = [1 for _ in c]
[19:48:20] <grym> (assuming c is a list)
[19:48:23] <trace987> I want what grawity says
[19:48:43] <grym> trace987: is c a list?
[19:48:53] <trace987> I want generally when programming that values can that way assigned
[19:49:02] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[19:49:03] <trace987> yes
[19:49:07] *** Joins: Karel (~Karel@232.56.198.178.dynamic.wline.res.cust.swisscom.ch)
[19:49:12] <grawity> then python is not what you want, I believe
[19:49:18] <trace987> grawity, okay
[19:49:27] <grawity> there are other languages with "references" or "pointers" which can do that
[19:49:30] *** Parts: Karel (~Karel@232.56.198.178.dynamic.wline.res.cust.swisscom.ch) (Leaving)
[19:49:31] <grym> trace987: read pynames to understand python's assignment paradigm, but then `c = [1 for _ in c]` will reassign every element of c to 1
[19:49:35] <trace987> so I need to use dictionarys for that
[19:49:44] <trace987> or possible there are other data structures out there for python
[19:49:46] <grym> trace987: python is neither pass by value nor pass by reference, if you're familiar with those ideas
[19:49:57] <grawity> for i, _ in enumerate(c): c[i] = 1
[19:50:01] <grawity> for i in range(len(c)): c[i] = 1
[19:50:06] <trace987> I am familiar with that
[19:50:16] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[19:50:39] <trace987> grawity, for that I would better use dictionarys
[19:50:47] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[19:51:02] <trace987> because I do not want performance problems
[19:51:02] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d) (Quit: Leaving)
[19:51:17] <grym> trace987: why do you believe that you will have them?
[19:51:20] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1d78:91e0:1aa2:663d)
[19:51:46] <trace987> I have to because a list becomes very slow when you have a long list and do it that way
[19:52:11] <trace987> or I am using a tuple
[19:52:17] <grym> it's not very usual to change every element of a list to the same thing
[19:52:18] <trace987> but then I can not change its values
[19:52:22] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 252 seconds)
[19:52:42] <trace987> grym, I want to do it that way in general and not only every element
[19:52:44] <grawity> would a numpy array or something be faster
[19:52:49] <caveman> any idea why time.ctime(EPOCH_SECONDS_FLOAT) shows a very retarded time format?  ``Thu Sep 10 21:31:15 2020''
[19:52:56] <trace987> grawity, possibly
[19:53:00] <ssbr> grawity: almost certainly yes.
[19:53:08] <grym> trace987: there is no reason to expect that the code you started with would be any more performant than the code you've been shown
[19:53:28] <trace987> grym, that is not what I am saying
[19:53:32] <ssbr> numpy arrays are dense and CPU-legible -- overwriting a large array is one of the fastest things you can *do* on a CPU.
[19:53:36] <grawity> caveman: probably because returning that specific format (which has been used in Unix libc ctime() for decades) is the purpose of time.ctime() function
[19:53:49] <trace987> grym, to assign in a for loop a[i] = bla will become very slow some time
[19:53:53] <grym> caveman: forget to change a battery in your computer?
[19:53:55] <ssbr> Python, by contrast, can't autovectorize the loop :/
[19:54:02] <trace987> if a is a loop, but not if it is a dictionary
[19:54:06] <caveman> grym: what do you mean?  battery?
[19:54:17] <grym> caveman: (your timestamp is sometime last year)
[19:54:48] <Yhg1s> caveman: that's the format time.ctime uses. You don't want to use time.ctime. You want to use the datetime module instead.
[19:55:01] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[19:55:02] <bjs> trace987: why would it be slower than a dictionary or your imagined `a = 1` code?
[19:55:04] <caveman> grym: it's an old timestamp for an app i'm making.
[19:55:27] *** Joins: DesCaFeinado (~CaFeINA@2001:8a0:ddef:9e00:81e9:7d38:c401:bf08)
[19:55:29] <caveman> Yhg1s: thanks.
[19:55:33] <trace987> bjs, just look in wikipedia the speed of any data structure
[19:55:46] <trace987> bjs, a dict has O(1) and a loop O(n)
[19:55:49] <jinsun> trace987: are you thinking of linked lists? a[i] is O(1) not O(i)
[19:55:51] <ssbr> trace987: overwriting every element of a dict is slower than overwriting every element of a list. (They're both O(n) expected time.)
[19:55:53] <trace987> bjs, a dict has O(1) and a list O(n)
[19:55:56] <trace987> not a loop
[19:56:06] <bjs> trace987: `some_list[i] = 1` is not O(n)
[19:56:07] <trace987> jinsun, yes
[19:56:25] <trace987> bjs, why
[19:56:25] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:56:29] <SnoopJ> trace987, "data structures" don't have speed, operations over them do.
[19:56:30] <bjs> trace987: because... it's not?
[19:56:31] <Yhg1s> trace987: Python lists are not linked lists.
[19:56:33] <jinsun> trace987: well python lists are not linked lists, so your assumption is wrong
[19:56:33] <grym> trace987: you know what i is
[19:56:34] *** Joins: Gerula (~Gerula@user/gerula)
[19:56:42] <bjs> trace987: Python "list"s are sort of like arrays.
[19:56:45] <trace987> SnoopJ, I have a different opinion
[19:56:47] <grym> trace987: so you don't have to look it up, and so it's independent of n
[19:57:04] <trace987> Yhg1s, what kind of lists are they
[19:57:13] <Yhg1s> trace987: they are arrays.
[19:57:58] <trace987> but arrays have a fixed lenght
[19:58:07] <Yhg1s> trace987: surprise! Python isn't C.
[19:58:08] <SnoopJ> they're dynamic arrays that overallocate
[19:58:09] <trace987> but there are combination types of arrays and lists
[19:58:10] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[19:58:11] <Yhg1s> (none of your assumptions are correct.)
[19:58:24] <SnoopJ> you store a dynamic array of PyObject* and you pull NULL where the empty spots are
[19:58:25] <Yhg1s> trace987: nothing about lists in Python is linked lists in C.
[19:58:25] <ssbr> trace987: they are dynamically-sized arrays that get re-allocated when they grow. This is a well-known strategy, implemented in some other languages as an "arraylist" or "vector". Python calls it a list.
[19:58:39] <trace987> but that kind of arrays are also slow in the long run
[19:58:44] <SnoopJ> in what way
[19:58:50] <ssbr> one day I want to make a PL etymology wiki that traces e.g. where Python got the idea to name it a `list` from. (Although this isn't as interesting as `None`!)
[19:58:55] <Yhg1s> trace987: if these are the kinds of things you worry about, you _really_ do not want to use Python.
[19:59:15] <trace987> okay
[19:59:22] <bjs> trace987: I think you are confusing the _abstract_ "list" datatype with the data structures that implement it.  Python's "list" doesn't use a linked-list underneath.
[19:59:49] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[19:59:51] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1d78:91e0:1aa2:663d) (Quit: Leaving)
[19:59:57] <bjs> trace987: it is not "slow in the long run" either, it's ~O(1) for the list (and stack) operations
[19:59:57] <trace987> bjs, I understood this already
[20:00:03] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:00:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d)
[20:00:23] *** Joins: cuz (~user@38.140.58.234)
[20:00:26] <trace987> bjs I learned something different when studying computer science
[20:00:28] <bjs> it has some other operations that are for convenience that are slower (like sorting, searching etc)
[20:00:29] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:00:39] <bjs> trace987: I think you probably didn't,  but just misunderstood.
[20:00:48] <trace987> bjs okay
[20:01:15] <SnoopJ> its implementation isn't guaranteed at all, it's an ADT
[20:01:17] <ssbr> trace987: in CS they make the distinction between amortized and non-amortized big-O. Python list access is O(1) (non-amortized), append is O(1) (amortized)
[20:01:26] <SnoopJ> but CPython's is a pretty good one
[20:01:48] <Lando-SpacePimp> BIG O! SHOWTIME!
[20:02:06] <ssbr> trace987: at any rate: updating a single thing is O(1), and updating all of them is O(n). (Doesn't make a difference if you amortize or no.).  This is actually faster than dicts :)
[20:02:12] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[20:02:12] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[20:02:23] *** Joins: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca)
[20:02:26] <ssbr> (dicts are O(n) unless you add a third concept of expected big-O, then they are O(1) with some assumptions)
[20:02:42] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 240 seconds)
[20:02:45] <NoImNotNineVolt> a third concept?
[20:02:47] <bjs> "average"
[20:02:57] <trace987> if it is O(1) then its algorithm should work like a dictionary behind
[20:02:57] *** Joins: pnoud (~pnoud@user/pnoud)
[20:03:00] <NoImNotNineVolt> worst-case, best-case, and average-case performance are already things.
[20:03:00] <ssbr> NoImNotNineVolt: the expected time, as opposed to the worst case time
[20:03:05] *** Joins: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[20:03:10] <bjs> trace987: no, it's like an array.
[20:03:11] <SnoopJ> trace987, that is not true of all O(1) algorithms
[20:03:38] <ssbr> NoImNotNineVolt: I meant third, as in the list of "worst-case big O", "amortized worst-case big O", "expected big-O"
[20:03:39] <SnoopJ> and it's extra-not-true for lists in CPython
[20:03:43] <bjs> trace987: you write to element #17 so it just goes straight to the location of element #17 an writes to it. There's nothing fancy needed like in a dictionary.
[20:03:56] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 272 seconds)
[20:03:59] <NoImNotNineVolt> isn't big-O explicitly worst case?
[20:04:01] <trace987> sounds like magic
[20:04:10] <ssbr> NoImNotNineVolt: no, it's explicitly an upper bound, not quite the same as worst-case.
[20:04:13] <bjs> trace987: it's an array, what's magical about O(1) access into an array?
[20:04:17] <SnoopJ> NoImNotNineVolt, it's asymptotic behavior
[20:04:19] <ssbr> NoImNotNineVolt: you can provide an upper bound for something which is not the worst case
[20:04:25] <ssbr> (and yes, an *asymptotic* upper bound)\
[20:04:28] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[20:04:53] <ssbr> NoImNotNineVolt: fundamentally, big O is just a statement about a function, the question is "which function?"
[20:04:58] <altendky> is "array of pointers" the missing bit in understanding here?
[20:04:58] <NoImNotNineVolt> an asymptotic *upper bound*.
[20:05:01] <trace987> in java there is an array list and an linked list
[20:05:01] <theseb> multiprocessing has Process and Pool options....Pool seems so much more cleaner with the use of map....when is Process the way to go with its start and join steps which seem more complicated??
[20:05:14] <trace987> in java there is an array list and an linked list - both can become slow in the long run
[20:05:16] <SnoopJ> NoImNotNineVolt, up to a constant factor, yep
[20:05:17] <bjs> trace987: yes, both are implementations of the list abstract data type but they're implemented differently
[20:05:20] *** Joins: Snyp (~rksht@49.207.197.197)
[20:05:34] <NoImNotNineVolt> SnoopJ: so an upper bound on an average case? what would that even mean?
[20:05:39] <ssbr> trace987: what do you mean "slow in the long run?"
[20:05:39] <bjs> trace987: I'm not sure what you mean by "become slow in the long run". Surely that depends on what you're doing and what you mean by that?
[20:05:52] <bjs> theseb: usually never
[20:06:02] <ssbr> NoImNotNineVolt: you can define a function f(n) which returns the average running time of the function on an input of size n. then you could bound f from above and below.
[20:06:03] <theseb> bjs: thanks!  that's what i thought..you rock!
[20:06:11] <ssbr> I don't remember if that's how average-case big-O works, tbh, it's been a while.
[20:06:21] <trace987> bjs if you add elements to an ArrayList on and on, the datastructure has to do a lot of copying what it makes slow
[20:06:32] <bjs> trace987: well it doesn't make it slow though
[20:06:38] <bjs> trace987: did you not learn about amoritzation in your CS course?
[20:06:41] <ssbr> aha, that is exactly how it works, so my cs creds remain intact.
[20:06:41] <SnoopJ> NoImNotNineVolt, the search keyword you want is "amortized analysis"
[20:06:52] <ssbr> bjs: SnoopJ: average-case isn't amortized analysis.
[20:06:56] <bjs> trace987: N append()s is O(N),  so it's "amortized" O(1). So it doesn't get slow.
[20:07:00] <bjs> ssbr: ... I know?
[20:07:16] <SnoopJ> NoImNotNineVolt, think of it like a pragmatic partner to the big-oh we were just discussing.
[20:07:22] <trace987> can you give me a link to amortized lists?
[20:07:24] <ssbr> bjs: sorry, I mixed up your answer with SnoopJ, and SnoopJ probably meant to reply to the person you did anywya. My bad.
[20:07:25] <SnoopJ> over "typical" data
[20:07:29] <ssbr> NoImNotNineVolt: https://en.wikipedia.org/wiki/Average-case_complexity
[20:07:35] <SnoopJ> trace987, do you know what it means to overallocate a dynamic array?
[20:07:45] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[20:07:54] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[20:07:59] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[20:08:07] <bjs> trace987: I mean it's a very simple technique, imagine that when you run out of space you just make a new array with twice as many slots.
[20:08:10] <trace987> overallocate ? to allocate more than needed?
[20:08:13] <bjs> trace987: yes.
[20:08:19] <SnoopJ> yes, do you understand what I mean if I say that?
[20:08:25] <SnoopJ> and why you would do it?
[20:08:39] <trace987> I guess so
[20:08:39] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[20:08:45] <trace987> speed
[20:09:01] <bjs> trace987: anyway, that's what Python's `list` is doing (and what Java's `ArrayList` is doing I guess)
[20:09:02] <theseb> confesion....I don't use "with" but just trust the garbage collector to do its job.  How bad is that?
[20:09:13] <theseb> So far i haven't lost a finger
[20:09:17] <bjs> theseb: it's not bad at all,  until the GC decides not to do its job and it goes wrong
[20:09:17] <theseb> in 18 yrs
[20:09:19] <bjs> then it's terrible
[20:09:40] <SnoopJ> trace987, right, allocation is slow. So CPython's list object reserves more than it strictly needs, and doesn't re-allocate until it has to. The implementation is here: https://git.io/JlEvU
[20:09:59] <bjs> SnoopJ: maybe you're running before walking here
[20:10:00] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 276 seconds)
[20:10:05] <theseb> bjs: yes but "going wrong" just means your memory reqs grow....can i at least be sloopy when prototyping and only worry about this in production?
[20:10:07] *** Joins: darksun (~darksun@user/darksun)
[20:10:29] <SnoopJ> bjs, it's possible, but hopefully they pay more attention to the comment about the oversizing.
[20:10:32] <gitesh> bjs: can all problems be solved using event-driven programming modle?
[20:10:33] <ssbr> theseb: `with` doesn't help memory, it helps explicit cleanup operations such as closing files.
[20:10:39] <bjs> theseb: well, many different objects support `with` and what bad thing can happen if you don't do it will depend on the object
[20:10:44] <gitesh> or one modle is best than other
[20:10:45] <ssbr> gitesh: only in the loosest sense.
[20:10:47] <NoImNotNineVolt> ssbr: doesn't seem to include mention of asymptotic bounds on average case complexity... but thanks either way.
[20:10:50] <theseb> bjs: full disclosure....99% of my time is spent in prototyping....i rarely have a hit that goes into "production"
[20:11:10] <bjs> theseb: just using `with` doesn't actually remove anything or delete anything or interact with the GC.  For example if you have a file then `with` just makes sure it gets closed afterwards
[20:11:11] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[20:11:29] <bjs> Which may not matter if your program only opens 1 file and dies a milisecond later
[20:11:35] <SnoopJ> trace987, if I make the list object [1,2,3], it allocates enough memory for 4 elements. If I add an element to that list, I don't pay for re-allocation, I offset to the 4th slot (which will store NULL because there's nothing in it) and I put the inserted item there.
[20:11:44] <bjs> theseb: but if you have a program that opens more files than your OS lets you open at once over the course of its life...
[20:11:48] *** Quits: Elon_Satoshi (~elonsatos@46.102.153.243) (Ping timeout: 252 seconds)
[20:11:53] <SnoopJ> trace987, if I add a fifth element, it will reallocate to size 8 (with 3 NULLs), and so on.
[20:12:14] *** Joins: Naan` (~Naan@user/naan)
[20:12:20] <theseb> bjs: see...your example is *hardcore*....mere mortals like me who don't operate at google's level don't run into those cases
[20:12:22] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[20:12:22] <bjs> gitesh: it's a tool.  can a hammer be used to solve all problems?
[20:12:26] <SnoopJ> if it doesn't re-allocate, the insertion is O(1). Lookups are *always* O(1), because that's how arrays work.
[20:12:47] <gitesh> bjs: lol
[20:12:54] <gitesh> no
[20:12:55] <bjs> theseb: you don't need to be at google's level to run out of resources, and other objects do other things when it reaches the end of a `with`,  custom objects can have their own `with` behaviours that do things
[20:13:08] <bjs> gitesh: then probably event-driven programming can't be used for all problems either
[20:13:16] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[20:13:33] <ssbr> NoImNotNineVolt: bleh, you're right, sorry.
[20:13:34] <gitesh> i meant computation problems
[20:13:40] <zware> theseb: `with` is very helpful for database operations; some libraries use it for automatically handling transactions, for example
[20:13:44] <gitesh> *computational
[20:13:49] *** Joins: naan (~Naan@user/naan)
[20:14:01] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:14:04] <gitesh> naan: i like that, ever ate naan?
[20:14:11] <bjs> gitesh: I mean, you can make an event-driven system which only has 1 event which is "run the program using the other model" so yes probably
[20:14:12] * theseb grudgingly adds a 'with' to his code...
[20:14:14] <bjs> but also does it matter
[20:14:17] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:14:20] <trace987> SnoopJ, I know that
[20:14:27] *** z0id is now known as zoid
[20:14:36] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[20:14:40] <zware> theseb: I find it also helps readability
[20:14:41] <gitesh> bjs: hahaha right
[20:14:46] <naan> I'm of pakistani ethnicity so yes gitesh I've eaten naan
[20:14:51] <SnoopJ> trace987, okay, so do you understand why lists have O(1) (ish) behavior now?
[20:14:54] *** naan is now known as Naan
[20:15:14] <grym> theseb: specifically w/r/t file access, pathlib does a great job abstracting away the context manager for reading and writing small files
[20:15:29] <bjs> gitesh: the real answer is that event-driven styles make more sense for some problems, and less sense for others
[20:15:32] <grym> theseb: see .read_text(), .read_bytes(); write_text(), write_bytes()
[20:15:32] <SnoopJ> pathlib +1
[20:15:53] <bjs> gitesh: for interfaces that have buttons and things it makes sense, because that's how humans work. We push buttons and expect things to happen when we do.  But for something like a compiler it doesn't make any sense
[20:15:56] <theseb> grym: never heard of pathlib..will take a look..thanks
[20:16:03] <grym> theseb: if you have to do fussier stuff you'll still have to  `with somepath.open(...) as f`, though
[20:16:18] <grawity> zware: hmm does exiting a `with` commit or roll back the transaction?
[20:16:46] <zware> grawity: Depends on the library, but for example psycopg2 will roll back if there's an exception, commit if it's a clean exit
[20:16:48] <grym> but `Path('foo.txt').write_text('\n'.join(["apple","pear","banana"]))` is pretty tidy
[20:16:50] <SnoopJ> grawity, depends on who wrote the context manager
[20:16:53] <theseb> grym: this is starting to smell like perl.....i.e. multiple ways to do the same thing (file I/O)
[20:17:03] <gitesh> bjs: I'm having this great lecture https://www.coursera.org/learn/interactive-python-1/lecture/3HN9h/event-driven-programming
[20:17:08] <grawity> yeah I'd really hope it rolls back on exception
[20:17:13] <bjs> theseb: they're all the same way just with different clothing
[20:17:13] <grym> theseb: python is no stranger to the 11 billion ways to do something life
[20:17:29] <gitesh> they said event driven is like start----> initialize---.> wait
[20:17:47] <gitesh> then as events happens hadlers are executed
[20:17:48] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[20:17:55] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 268 seconds)
[20:17:55] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:17:59] <theseb> bjs: python dogma dictates the One True Way must be in stdlib and rest pruned...So Sayeth the Sages
[20:18:02] <SnoopJ> theseb, think of it this way: pathlib is a user-friendly interface to the other stuff you're thinking of, and it leaves less room for you to get it wrong.
[20:18:10] <bjs> theseb: not even the stdlib developers believe that anymore
[20:18:11] <SnoopJ> theseb, the Zen should not be taken as dogma.
[20:18:22] <SnoopJ> the stdlib is very clearly not Zen
[20:18:42] <bjs> theseb: the text of which you speak is nice poetry,  but poetry is not always practical engineering technique :)
[20:19:10] <SnoopJ> (well, maybe it's *not* clear, but it's definitely not in line with those statements)
[20:19:24] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Read error: Connection reset by peer)
[20:19:27] <bjs> theseb: practical is "there is currently 1 way, but it's terrible and we can't remove it, so we'll add another better way people can use". Yeah you end up with 2 ways and that's not nice, but at least there's now a better way
[20:19:45] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 276 seconds)
[20:19:47] *** Joins: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it)
[20:20:03] <derek_v> the Zen says "preferably"
[20:20:07] <bjs> theseb: that's how we went from file descriptors and buffers to actual file objects and "open" with strings, up to `io.open` and now we have pathlib which actually knows what a Path is
[20:20:26] <grym> it is important to note that zen koans aren't things that are supposed to be answers
[20:20:30] <grym> or answerable :)
[20:20:38] <theseb> bjs: um..that is heartbreaking to me....i think yesterday i asked if python kept kruft around for backwards compatibility...i was told they aren't afraid to clean things up...now i'm hearing different from you.
[20:20:51] <grym> theseb: it is, as they say, an ongoing conversation
[20:21:02] <grym> breaking backcompat is not the same as decrufting, though
[20:21:04] <SnoopJ> if you want hard universal rules, look somewhere else
[20:21:17] <ssbr> theseb: it is very difficult to migrate Python code to use new things, and no "1.0" programming language around today has a particularly strong backwards-incompatibility policy
[20:21:22] <bjs> theseb: there's a difference between cleaning stuff up, and breaking everyone's code.
[20:21:22] <theseb> grym: hey..yea.. i think YOU were the one that said python cleans things!
[20:21:39] <grym> theseb: i said that python isn't afraid to break old code in new versions, which is not the same (but yes, it was me)
[20:21:44] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ended)
[20:21:59] <bjs> theseb: you can clean them up,  move things around (carefully),  hide them,  deprecate them,  extend them,  but it's very very hard to _remove_ them
[20:22:30] <zware> Note that "not afraid to break old code" is not the same as "willing to break the world at every version" :)
[20:22:43] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[20:22:47] <grym> ^^
[20:23:00] <grym> and google got plenty of advance warning that they cheerfully ignored >:)
[20:23:28] <grym> (my go-to example of breaking is when 3.7 promoted async/await and tensorflow went kerpow)
[20:23:54] *** Joins: redgloboli (~redglobol@user/redgloboli)
[20:24:04] <trace987> <SnoopJ> depends on the operation you are doing with lists
[20:24:29] <theseb> grym: hey if that 3.7 change made sense...i see that as shortterm pain for long term gain...google can get over it
[20:24:33] *** Joins: Elon_Satoshi (~elonsatos@46.102.153.243)
[20:24:46] <theseb> grym: i'm not denying users suffered...
[20:24:53] <SnoopJ> it's not something to celebrate, but the kerfuffle over PEP 563/PEP 649 is an illustration of the compatibility story. I think the Steering Council/PSF came out of it with flying colors.
[20:24:54] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:25:17] <grym> theseb: i didn't suffer, i just ignored 3.7 for a while
[20:25:49] <bjs> theseb: I think it's fair to say you can break -some- amount of stuff, but not too much
[20:26:05] <bjs> and Python has certainly pushed the limits of that before
[20:26:12] <theseb> bjs: that seems wise....have a max-breakage-velocity
[20:26:22] <bjs> theseb: nobody really knows how much is too much
[20:26:24] <SnoopJ> trace987, yes. Lookups take a constant amount of time, always, and insertions take a variable amount of time, but most insertions are constant-time because they don't reallocate.
[20:26:30] <bjs> until it's too late of course
[20:26:37] <theseb> bjs: just don't let the suits take over python so that a little breakage NEVER can happen
[20:26:47] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[20:27:12] <grym> theseb: i am very amused to note that c# is becoming more pythonic, syntactically, every release
[20:27:19] *** Quits: eldenring0 (uid506233@id-506233.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[20:27:24] <grym> which is at least a medium-starch language
[20:27:40] <SnoopJ> well, Python is a community language and the PSF is a 501(c)(3) so I think you can put that fear mostly to rest :)
[20:28:03] <SnoopJ> the first part of it, anyway; no promises about the second, programming languages cultivate that headache over their lifetime.
[20:28:12] <bjs> theseb: Python is open to breaking things but would prefer to keep backwards compatibility wherever possible
[20:28:16] *** Joins: SGautam (~SGautam@59.90.2.33)
[20:28:35] <SGautam> Hello
[20:28:49] *** Parts: Deadly_Alive (Deadly_Ali@user/deadly-alive/x-7001497) ()
[20:29:01] <SGautam> Why am I getting "ValueError: array must be of same dimensions as surface" when doing pygame.surfarray.blitarray from a numpy array
[20:29:04] <SGautam> https://pastebin.com/5ZuYYdwk
[20:29:32] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:29:36] <bjs> theseb: there's no sense in breaking peoples code for no reason, when you can simply add new features alongside and deprecate the old ones.  There is a lot of code written by a lot of people that rely on Python to not break things
[20:29:53] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:30:01] <SGautam> I am creating a 2D numpy array of 4 elements (R,G,B,A) and of length surface_width * surface_height
[20:30:08] <SGautam> The dimensions seem alright to be.
[20:31:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:31:38] <SnoopJ> SGautam, your pixarray is 2-dimensional (i.e. (W*H, 4)), but blit_array expects 3-dimensional (i.e. (W, H, 4)), I think
[20:31:57] <SGautam> ahh
[20:33:50] <SGautam> hm
[20:33:52] <theseb> bjs: does deprate == "Will eventually remove"?
[20:33:58] <theseb> deprecate*
[20:34:08] <SGautam> changing it gives "ValueError: must be 2D or 3D array"
[20:34:14] <SnoopJ> theseb, often, yes
[20:34:27] <theseb> hot dog!
[20:34:33] <theseb> yes!
[20:34:33] <SnoopJ> SGautam, please share the complete error: https://bpaste.net/+python+pytb
[20:34:35] <bjs> theseb: usually, but not always.  Sometimes eventually is very... weakly eventually
[20:35:14] <SnoopJ> the joys of building things other people use
[20:35:31] <bjs> theseb: in the end if people just stop using the feature it doesn't matter too much,  although it'd be nice for things to get garbage collected every now and again.  Although historically for Python (especially in the last 5-6 years) that has been very hard
[20:35:43] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[20:35:58] <SGautam> SnoopJ, https://bpa.st/IE7A Here. I also printed the array before the error.
[20:36:02] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[20:36:36] <grym> theseb: https://docs.python.org/3/library/xdrlib.html  for example
[20:36:46] *** Joins: sgn (~sgn@user/sgn)
[20:37:11] *** Joins: srhm (~ascii@user/srhm)
[20:37:46] <theseb> bjs: why did it get harder that last 5-6 yrs?
[20:37:57] <bjs> theseb: because ~10 years ago Python broke everyones code
[20:38:06] <bjs> when Python 3 was released
[20:38:26] *** Joins: Linux77 (~kvirc@186.235.105.168)
[20:38:46] *** Joins: ferz (~ferz@93.48.251.229)
[20:39:39] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 250 seconds)
[20:39:46] <Celelibi> Wow, I never knew re.Match objects could be subscripted.
[20:39:53] *** Joins: spiun (~spiun@89.36.68.218)
[20:39:55] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[20:40:12] <ferz> Hi.  I'm newbie and I'm reading a sqlalchemy app where I find: def changesList(self, changes: object) -> tuple: \n ...
[20:40:12] <ferz> What does '->' operator mean in this position?
[20:40:13] <SnoopJ> SGautam, ah, the error includes "valid" in it. Well, I guess it's invalid for some reason, possibly the dtype is wrong. Try adding `dtype=np.uint8` to your two zeros() calls. (by the way, you could do `self.pixarray[:] = 0` in Clear() for some free speed-up)
[20:40:31] <bjs> ferz: it's part of the documentation, it's telling you it is supposed to return a tuple
[20:40:50] *** Quits: vladoski (~vladoski@2001:b07:add:d406:ec49:7189:2fdb:6b78) (Remote host closed the connection)
[20:40:54] <ferz> bjs: thank you
[20:41:11] *** Joins: doev (~doev@p549d77d0.dip0.t-ipconnect.de)
[20:41:21] <gitesh> so in event driven programming , system does event handling?
[20:41:33] *** Parts: witten (~witten@user/witten) (WeeChat 3.2)
[20:41:35] <ferz> the changes object is null, can I check it with "if changes is None: " ?
[20:41:47] <gitesh> mean system calls the functions or handles which are in our gui program?
[20:41:47] <bjs> ferz: yes
[20:42:03] <bjs> gitesh: what exactly are y ou calling the "system" ?
[20:42:23] *** DCTWD- is now known as DCTWD
[20:42:26] <gitesh> functions are used in event driven programming because functions are not executed right aaway, you have to call it
[20:42:32] <gitesh> i wanted to understand this.
[20:42:34] <bjs> gitesh: yes
[20:42:47] <gitesh> system i meant windows 10
[20:42:49] <bjs> gitesh: it's really the only way to do that passing of code to the library
[20:42:51] <gitesh> for example
[20:42:59] <bjs> gitesh: no Windows doesn't know anything about your Python functions
[20:43:18] <bjs> it's tkinter.py it remembers what you wanted to do for each button and when it sees a button press *it* calls your function
[20:43:44] <gitesh> bjs: ok but event que is where in the system right?
[20:44:21] <bjs> gitesh: it might be for speed.  but I mean tkinter.py might just be going `while True: if button.is_pressed(): call_giteshs_function()`
[20:44:23] <bjs> you don't know
[20:44:28] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Quit: WeeChat 2.8)
[20:44:40] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[20:44:48] <gitesh> okay i don't need to know that it's okay i would like it
[20:45:06] <bjs> gitesh: this is the abstraction you were looking for, you don't know how/where the button actually comes from or how the event comes
[20:45:11] <bjs> but you can still tell tkinter what to do
[20:45:14] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:45:38] <gitesh> yeah
[20:46:25] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[20:46:35] <SnoopJ> it's that much less code you have to think about
[20:49:24] *** Joins: LifeOnMars (~Stick326@140.82.44.94)
[20:50:02] <gitesh> bjs: that means our gui program sees in to event queue
[20:51:00] <ssbr> gitesh: a GUI library doesn't necessarily have any centralized event queue, if that's what you're asking. It could just call things on demand without sending to a centralized one-to-many message bus
[20:51:04] *** Joins: gareppa (~gareppa@user/gareppa)
[20:51:44] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:53:02] *** Joins: schumaml4 (~schumaml@dslb-188-104-176-151.188.104.pools.vodafone-ip.de)
[20:53:23] <gitesh> i can't think deep
[20:53:57] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[20:54:12] *** Quits: schumaml3 (~schumaml@dslb-188-104-188-191.188.104.pools.vodafone-ip.de) (Ping timeout: 276 seconds)
[20:54:13] <gitesh> i won't call if function i will call it handler
[20:54:13] *** Joins: CombatVet (~c4@user/combatvet)
[20:54:23] <ssbr> gitesh: that's common. also "callback"
[20:54:37] <ssbr> gitesh: in some languages, you can't pass functions per se anyway (although that's less and less common)
[20:55:05] <grym> passing the string that is the same as the name of the function ... horror show :/
[20:55:09] <gitesh> ssbr: so how is event handler registered in that language
[20:55:26] <bjs> gitesh: maybe not using functions,  if they have other ways of doing it
[20:55:29] <gitesh> grym: hahaha
[20:55:36] <ssbr> gitesh: for example, using an object that has a `call` method
[20:55:48] <ssbr> (some languages don't even *have* functions...!)
[20:56:04] <bjs> gitesh: again it's not really the fact it's a function you care about, it's the fact it gives you some way to run some code. Functions are just one way (and in Python, pretty much the only way) to do that.
[20:56:11] <bjs> Other languages may have other ways, and so they have more choices
[20:56:16] <ssbr> bjs++
[20:56:18] <gitesh> bjs: yeah right they can have other ways of doing that
[20:56:22] <gitesh> it's just handler
[20:56:52] <gitesh> its' handler bjs function are supposed to be use
[20:56:54] <gitesh> *used
[20:57:11] <bjs> gitesh: what do you mean
[20:57:32] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[20:57:36] <gitesh> bjs:  i mean in event driven programming there are events and event handlers
[20:57:37] *** Quits: schumaml4 (~schumaml@dslb-188-104-176-151.188.104.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[20:57:42] <bjs> gitesh: yes
[20:57:46] <gitesh> main program is just waiting for things to happen
[20:57:49] <bjs> correct
[20:58:02] <gitesh> so if event is is que i can make handler for it
[20:58:09] <gitesh> functions are used to do it
[20:58:25] <gitesh> in my fantasy world and super naturally i could use any other construct
[20:58:29] <grym> gitesh: i wasn't joking, some languages do this string thing, and it's a nightmare to refactor
[20:58:55] <gitesh> omg grym i didn't know that
[20:59:03] <bjs> gitesh: yes, if the languge was desigend for it you might even just have a "code" construct that lets you pass code directly
[20:59:18] <gitesh> yeah
[20:59:59] <gitesh> but the main idea of function is the same that they do not execute direcly
[21:00:06] <gitesh> you have to call it
[21:00:27] <gitesh> anyways you have to call some code which are event handlers
[21:00:40] <gitesh> all good day guys
[21:00:43] <gitesh> have a nice day
[21:02:37] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[21:04:32] <gitesh> so you think for our keyboard if we took a-z keys , for them to working there are 26 handlers?
[21:04:54] <gitesh> did you get my question?
[21:05:13] *** Quits: argento (~argent0@168-227-96-53.ptr.westnet.com.ar) (Ping timeout: 250 seconds)
[21:05:37] <grym> gitesh: keyboards get wild in there! here is one way they work: https://github.com/qmk/qmk_firmware
[21:05:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 276 seconds)
[21:06:10] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[21:06:16] *** Joins: azazello (~azazello@109.75.158.195)
[21:06:24] <grym> gitesh: https://github.com/alex/what-happens-when#the-g-key-is-pressed  is fun to read too
[21:07:05] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:09:31] *** Joins: Blankspace (~abcd@user/blankspace)
[21:10:06] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[21:10:50] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[21:11:12] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Read error: Connection reset by peer)
[21:11:14] <gitesh> Blankspace: hey
[21:11:23] <Blankspace> Hey gitesh
[21:11:30] *** Quits: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com) (Read error: Connection reset by peer)
[21:11:54] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[21:11:55] *** Joins: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com)
[21:12:58] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 272 seconds)
[21:13:23] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 255 seconds)
[21:13:43] <caveman> why is this always -1.4*?  datetime.datetime.now(datetime.timezone.utc).timestamp() - time.time() = -1.430511474609375e-05
[21:14:00] <caveman> oh, didn't notice the e-05
[21:14:04] *** Quits: mikeliuk (~mikeliuk@213.205.198.158) (Quit: Connection closed)
[21:14:11] *** Joins: drant (~drant@2a05:f480:1c00:d82::)
[21:14:15] <caveman> so i guess that's zero difference, except for delay in execution?
[21:14:25] *** Quits: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com) (Read error: Connection reset by peer)
[21:14:29] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[21:14:43] *** Joins: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com)
[21:15:01] <ssbr> caveman: that sounds right, yeah.
[21:15:03] <gitesh> bjs: in that video they are saying system pulls those events out of event queue one at a time and executes handlers
[21:15:38] <bjs> gitesh: that is certainly one way you could implement things
[21:16:11] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[21:16:12] <caveman> how to store datetime.now(tz=...) in json?
[21:16:16] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[21:16:36] <ssbr> gitesh: architecturally, the only reason to have a centralized message bus like that is if you want more than just the widget's event handler to be able to see the message
[21:17:23] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:17:37] *** Quits: emika (~emika@83.136.182.234) (Quit: emika)
[21:17:49] <ssbr> you know what's awesome? writing event buses and then using them as aspect join points for plugging in from arbitrarily far away ðŸ˜Ž
[21:19:00] <ssbr> i'm sure i know what that means and am not just appropriating 90s technical terminology that seems vaguely related
[21:19:12] <ssbr> (what on earth is an "advice")
[21:19:36] *** Joins: ambv_ (~ambv@c138-59.icpnet.pl)
[21:19:52] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Ping timeout: 258 seconds)
[21:20:05] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[21:20:57] *** Joins: pnoud (~pnoud@user/pnoud)
[21:21:06] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[21:23:19] *** Joins: ice9 (~ice9@user/ice9)
[21:24:34] *** Quits: spiun (~spiun@89.36.68.218) (Read error: No route to host)
[21:24:50] *** Joins: spiun (~spiun@89.36.68.218)
[21:25:12] <ChrisWarrick> caveman: depends, isoformat is often used (although itâ€™s storing the offset, not necessarily the time zone name)
[21:25:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[21:25:52] <caveman> should i store time.time() and assume it's utc, then format its output by datetime (and apply tz)?
[21:26:18] *** Joins: evilroot (~evilroot@user/evilroot)
[21:26:30] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 244 seconds)
[21:28:01] *** Joins: Achylles (~Achylles_@2804:431:d724:510f:d7b1:4ecb:6877:1a1a)
[21:28:08] *** Quits: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[21:28:48] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:29:05] *** Quits: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[21:29:05] <bjs> caveman: time.time doesn't have a timezone
[21:29:06] <drant> time.time() is seconds since 1970-01-01 00:00:00Z so it is indeed relative to UTC
[21:29:45] <caveman> bjs: does it need tz?
[21:30:07] *** Joins: audio (~audio@2603-8081-1800-00ad-3736-d60e-b265-76c0.res6.spectrum.com)
[21:30:10] <bjs> caveman: no it has no timezone.  It's just the number of second since a fixed point in time that everyone agrees on
[21:30:22] <bjs> it doesn't matter what timezone you're in, it's the same number of second since then.
[21:30:34] <ssbr> drant: kind of a weird way to look at it. It's a time in absolute coordinates
[21:30:36] <caveman> time.time() is not in utc?
[21:30:40] *** Quits: ambv_ (~ambv@c138-59.icpnet.pl) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:30:41] <ssbr> I think bjs expressed it clearly
[21:30:41] <bjs> caveman: it *doesnt have a timezone*
[21:30:53] *** Joins: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:31:30] <ssbr> caveman: no matter what timezone you are in, the value of time.time() is the same at the same time
[21:31:33] <caveman> isn't it seconds since 1970-01-01 00:00:00 in UTC?
[21:31:44] <drant> caveman: try it like this: image you and I agree that *right now* is called epoch_2. *right now* doesn't have a timezone, it's a point in time and time is the same for everyone alive
[21:31:47] <bjs> caveman: it's the number of second since that UTC date yes
[21:31:52] <ssbr> caveman: "1970-01-01 00:00:00 in UTC" is a specific point in time. The "in UTC" is just to specify whta 1970 mmidnight is
[21:32:06] <caveman> bjs: see?  since utc time.  so that's where tz sneaked in.
[21:32:29] <ssbr> caveman: tz has nothing to do with it. they could just as easily have specified the epoch in terms of pacific time.
[21:32:30] <bjs> caveman: no there is no tz sneaking in here. You've just taken it and converted it to a date which you've written in the UTC timezone
[21:32:40] <ssbr> caveman: would we then say that time.time() was in pacific time?
[21:32:45] <ssbr> it's the same number either way
[21:33:06] <caveman> bjs: it has utc information in it.  you just don't see it directly.  it's in the arithmatics that counted it.
[21:33:08] <bjs> caveman: time.time() *does not have* an associated timezone. It's an absolute number of second since a fixed point in history. Everyone agrees how many seconds have passed since then no matter what timezone they're in.  Everyone agrees to count from that moment
[21:33:17] <bjs> caveman: it very much does not have any timezone
[21:33:18] *** Quits: ioe (~is0ke3@user/is0ke3) (Ping timeout: 265 seconds)
[21:33:20] <caveman> it does.  it's in the definition.
[21:33:30] <bjs> caveman: if you call time.time() at the same moment I call time.time(), no matter what timezones we are using
[21:33:32] <bjs> we get the same number.
[21:33:36] <bjs> caveman: there is not
[21:33:36] <caveman> time.time() = seconds since 1970-01-01 00:00:00 in UTC.
[21:33:43] <drant> caveman: 6 seconds ago for me was 6 seconds ago for you
[21:33:47] <drant> it's not about timezones
[21:33:48] <ssbr> caveman: the definition is arbitrary: you can define 4 as 2+2, or as 3+1, neither 2 nor 3 are more fundamental. Similarly, UTC is no more fundamental than pacific time.
[21:33:52] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 272 seconds)
[21:34:01] <bjs> caveman: yes you're choosing to write the date in UTC, but you could choose to write that date in any timezone you want
[21:34:04] <bjs> it doesn't mean it's in that timezone
[21:34:09] <caveman> ssbr: but is python's definition of time.time() arbitrary?
[21:34:11] <madprops> "Unix time does not have any way to represent the leap second in the form of 23:59:60. Instead it just uses the same second twice."
[21:34:13] <bjs> caveman: no
[21:34:14] <madprops> what does that mean though?
[21:34:25] <ssbr> caveman: the definition of time.time() in terms of UTC, instead of pacific time, is arbitrary.
[21:34:35] <bjs> caveman: it's so-called "unix time".
[21:34:35] *** Quits: Blankspace (~abcd@user/blankspace) (Ping timeout: 252 seconds)
[21:34:36] <ssbr> caveman: it gives the exact same results either way
[21:34:49] <bjs> caveman: everyone picked a point and unix time (aka time.time()) gives the number of seconds since then
[21:34:58] <bjs> everyone on the planet has the same unix time right now
[21:35:00] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[21:35:07] <caveman> i know time.time() is seconds since some UTC moment.
[21:35:12] *** Pixi_ is now known as Pixi
[21:35:16] <bjs> caveman: no
[21:35:19] <bjs> since some actual absolute moment
[21:35:26] <bjs> you just happen to write that moment in a date using UTC
[21:35:31] <bjs> but it's an actual date, you could write it in any timezone you wanted
[21:35:38] <ssbr> "UTC moments" don't exist: UTC is a format for expressing moments as a string
[21:36:18] <drant> caveman: what timezone are you in
[21:36:30] <caveman> time.time() is seconds since a moment that equals 1970-01-01 00:00:00 in UTC, or some other point in other timezone.  this makes time.time() encoding all timezone information in it already.
[21:36:53] <ssbr> caveman: there is no timezone information to encode in it.
[21:36:55] <bjs> caveman: no
[21:37:07] <bjs> caveman: is "right now" in UTC?
[21:37:21] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:37:21] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[21:37:22] <caveman> yes.  but in every other timezone too.
[21:37:43] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[21:37:44] <bjs> caveman: okay but everyone agrees what right now is,  they write it differently (the timezone) but we all agree
[21:37:53] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:37:57] *** Joins: pnoud (~pnoud@user/pnoud)
[21:38:05] <bjs> caveman: and we all agree when the start of unix time was.  Some people may write that start differently, but we all agree on what the *current* unix time is.
[21:38:24] <bjs> There is no timezone, and time.time() gives the same answer for everyone everywhere
[21:38:34] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[21:38:56] <bjs> caveman: like, there's no timezone associated with "in 10 seconds time". It doesn't *mean anything* to say "in 10 seconds time, in UTC"
[21:39:43] <caveman> imo this is a philosophical discussion.  we can say "10 seconds ago" is in every timezone possible.
[21:39:55] <drant> you are making my brain smooth
[21:40:05] <ssbr> caveman: it's a semantics discussion, yes. you're, most charitably, using the word "timezone" to mean something nobody else uses it to mean
[21:40:15] <ssbr> caveman: this is not a good way to use technical terms
[21:40:20] <caveman> i think the expression "10 seconds ago" contains information about any timezone you want.
[21:40:33] *** Quits: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 265 seconds)
[21:40:35] *** Joins: schumaml4 (~schumaml@dslb-188-104-165-136.188.104.pools.vodafone-ip.de)
[21:40:40] <ssbr> caveman: in other words, it's unrelated to timezone :)
[21:41:05] <SnoopJ> a delta is the same across timezones; the point to which the delta from "now" refers is variable
[21:41:13] <caveman> lel.  yes.  timezone i guess in our context should mean the fluffy happy end user setting where he says 'PST+somethin'?
[21:41:14] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:41:31] <bjs> caveman: but there is no "tz+something" in time.time
[21:41:42] <bjs> it's fixed-point-in-time + something
[21:41:57] <bjs> if you run time.time() right now, and I do too, we'll get the same number even if we're in different parts of the world
[21:42:00] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[21:42:00] *** Joins: Tuor (~quassel@user/tuor)
[21:42:02] <caveman> i'd argue that time.time() contains all timezones in its definition.  one just needs to apply logic on it to extract it.  sort of compressed.
[21:42:26] <SnoopJ> caveman, it contains a clock, but it contains nothing tz-aware
[21:42:30] *** meti_ is now known as meti
[21:42:33] <SnoopJ> (well, it contains several clocks, but yea)
[21:42:58] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[21:43:08] <caveman> i'll be importing datetime.  should i delete import time?  and use datetime.datetime.utcnow() instead of time.now()?
[21:43:18] <bjs> caveman: utcnow() is almost always a mistake
[21:43:23] <bjs> you get back a naive datetime object, not one in UTC
[21:43:29] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Quit: Leaving.)
[21:43:37] <caveman> naive as in like time.time()?
[21:43:48] *** Quits: Snyp (~rksht@49.207.197.197) (Quit: WeeChat 3.2)
[21:43:56] <bjs> caveman: a naive date is "3pm 1st January 2021"
[21:44:01] <bjs> datetime*
[21:44:26] <SnoopJ> without specifying *where* (datetime is also disappointing when it comes to timezones)
[21:44:27] <bjs> as in, no timezone info so you don't actually know *when* it refers to
[21:45:02] <bjs> caveman: utcnow() will be "17:14 July 22 2021" or something
[21:45:20] *** gbear605_ is now known as gbear605
[21:45:21] <bjs> if you call it ~right now that is
[21:45:27] <caveman> i have a problem.  i need to store the time in some json file.  then load it.  the file will get shared by people on different machines.  then each person will apply his/her own tz in the configs.  then that time needs to be displayed with proper format to make the user happy.
[21:45:29] <caveman> so my quetsion is 2 parts:  (1) how to store that time in the json file?  (2) how to format it for display?
[21:45:43] *** Joins: ttkap (~ttkap@user/ttkap)
[21:46:02] *** Quits: schumaml4 (~schumaml@dslb-188-104-165-136.188.104.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[21:46:03] <bjs> caveman: store it as a timestamp then load it on the other side into a datetime object with the correct timezone
[21:46:07] *** Parts: Tuor (~quassel@user/tuor) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:46:09] <bjs> is one way
[21:46:22] *** Joins: greedom (~greedom@2001:16b8:2ec8:4f00:b1c5:55bb:d2c6:89)
[21:46:46] <SnoopJ> another: a 3rd-party library that handles timezones better than the stdlib does
[21:46:47] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:46:48] <caveman> should i use time.time() to store it?  or datetime.datetime.utcnow()?
[21:46:48] *** Joins: schumaml4 (~schumaml@dslb-094-216-173-013.094.216.pools.vodafone-ip.de)
[21:47:09] <SnoopJ> or I should say "that has a better interface" since I guess nothing's amiss with handling where it exists :/
[21:47:31] <bjs> caveman: time.time() will give you the current unix time, so it will do fine (although you may want to int() it?)
[21:47:37] <gcbirzan> SnoopJ: hey, python3.9 has actually good tz support
[21:47:42] <gcbirzan> better than pytz one might argue
[21:47:54] <bjs> datetime is awkward because it gives you random naive datetime objects silently, so you have to be careful to get it right
[21:47:57] <SnoopJ> gcbirzan, yea, it's one of the things I hope continues to improve
[21:48:16] <caveman> bjs: how about datetime.datetime.utcnow().timestamp()?
[21:48:19] <SnoopJ> the compat story for datetime is probably a nightmare :(
[21:48:23] *** Joins: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net)
[21:48:35] <bjs> caveman: time.time() will 100% give you the correct current unix time
[21:48:53] <bjs> caveman: utcnow() does not give you the current local time so you must be careful
[21:48:54] <caveman> bjs: but i'll have an extra import line.  import time.
[21:49:04] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 272 seconds)
[21:49:06] <SnoopJ> how much does your editor charge per line?
[21:49:18] <caveman> bjs: odd.  utcnow() doesn't give the current local time?
[21:49:23] <bjs> caveman: no
[21:49:24] *** Quits: dale (dale@user/dale) (Remote host closed the connection)
[21:49:36] <caveman> how so?  it's literally saying "utc now".
[21:49:44] <bjs> caveman: if you run that function right now you'll get something like "17:19 2021/July/22"
[21:50:04] <caveman> you mean that will lose information about precision i the floats?
[21:50:14] *** Joins: dale (dale@user/dale)
[21:50:17] <bjs> which as a local time for me, was 1hr ago (i'm on BST)
[21:50:18] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[21:50:19] <bjs> caveman: no
[21:50:27] <bjs> caveman: for me. utcnow().timestamp() would be an hour ago
[21:50:32] <bjs> because my local time is not utc.
[21:51:25] <caveman> i think that contradicts the documentation.
[21:51:33] <bjs> caveman: it does not
[21:51:34] <bjs> sadly
[21:51:45] <caveman> ``This is like now(), but returns the current UTC date and time, as a naive datetime object''
[21:52:01] <bjs> caveman: infact I'm pretty sure utcnow() is just a big trap they actually have a big red warning in the docs for it
[21:52:12] <bjs> caveman: yes it's very very clear, it returns the current UTC time as a _naive_ object
[21:52:14] <bjs> without timezone info
[21:52:44] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 252 seconds)
[21:52:48] <gcbirzan> it's the same in reverse, isn't it
[21:52:58] <gcbirzan> or, well, fromutctimestamp, since thats' where we're going
[21:52:59] <caveman> bjs: but i don't need tz info when i store i the json file for storage.  i just need to load tz info for rendering when the user loads the json file and displays the timestamp.
[21:53:10] *** Quits: doev (~doev@p549d77d0.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[21:53:13] *** Quits: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com) (Read error: Connection reset by peer)
[21:53:25] <bjs> caveman: okay but utcnow() is currently "17:23 July 22 2021" for everyone here
[21:53:36] <bjs> but not everyone agrees on *when* that time is
[21:53:40] <bjs> I think it's an hour ago
[21:53:41] <gcbirzan> utcfromtimestamp, sorry
[21:53:57] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:54:09] <gcbirzan> caveman: By convention you could say , yes this timestamp is in UTC. but why not make it explicit and not have to bother with it
[21:54:24] <bjs> you can't say that because timestamps don't have timezones
[21:54:25] <gcbirzan> caveman: if you put the timezone in there, everyone will know it's UTC and won't need to guess as to what you meant
[21:54:30] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:54:35] <bjs> and if you go utcnow().timestamp() you're just going to get the wrong number
[21:54:39] <gcbirzan> bjs: I mean datetime
[21:54:56] <bjs> yeah you can put that literal string in the file with a big warning and make sure to read it as utc
[21:55:13] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[21:55:14] <bjs> but at that point you probably should just store the timezone info as well
[21:55:14] <caveman> bjs: i'd say timestamps have all timezones (than no timezone).  when displaying the timestamp for the end user, we'll need to pick one timezone that he prefers.  otherwise we can exhaustively fill his screen with all date formats by all timezones in existence.
[21:55:54] <bjs> caveman: just no, the timestamp is a number that is the number of seconds since a fixed point in time.  Everyone on the planet agrees on that number right now.
[21:56:04] <bjs> if everyone in the channel ran time.time() right now we'd all see the same number
[21:56:12] <bjs> if everyone ran utcnow().timestamp() we'd get lots of different numbers
[21:56:21] <bjs> the latter depends on your timezone, the former does not
[21:56:35] *** Quits: ferz (~ferz@93.48.251.229) (Ping timeout: 255 seconds)
[21:56:37] *** Quits: Barones (~Barones@2804:48dc:8500:0:f405:4bcb:2895:caaf) (Quit: Leaving)
[21:57:03] *** Joins: azazello (~azazello@109.75.158.195)
[21:57:15] <caveman> if i toss a fair coin, and i don't tell you the outcome, does it mean that there is no outcome?  or does it mean that it's both head and tail at the same time (with equal probability)?
[21:57:51] <bjs> caveman: but the point is there are two different outcomes, it's not like there are different timestamps in different timezones
[21:58:03] <bjs> caveman: if you and I are in different timezones and we both run time.time we will both get *the same number*
[21:58:18] <caveman> there are different datetime strings for different timezones.
[21:58:22] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[21:58:33] <bjs> caveman: yes but the timestamps are NOT different
[21:58:43] <bjs> caveman: if you give me a unix timestamp, I don't have to ask what timezone you're in to know when you're talking about
[21:58:45] <caveman> true.  never said they're.
[21:59:00] *** Joins: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com)
[21:59:12] *** Joins: fivegruel (~fivegruel@dynamic-046-114-146-110.46.114.pool.telefonica.de)
[21:59:22] <bjs> If I give you the timestamp 1626970752 then everyone here agrees on when that was,  we just write it differently
[21:59:29] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d) (Quit: Leaving)
[21:59:36] <bjs> so you should store that number in your JSON,  and then when you load it, present it to the user in the way they expect
[22:00:04] <caveman> i agree.
[22:00:52] <caveman> i think my language is globally simpler.  when a thing is unknown (e.g. tz setting user prefers), then it becomes a distribution over all possible tzs.
[22:00:53] *** Joins: Akuli (~Akuli@82-203-162-166.bb.dnainternet.fi)
[22:01:56] <caveman> time.time() doesn't tell me the tz the user likes.  but i can use it to generate a list of all formatted date-time strings in all timezones.
[22:02:18] <bjs> time.time doesn't tell you *anything* about timezones,  it just gives you a single point in time that everyone agrees on
[22:02:37] <bjs> it's not trying to compress timezone information in some clever way or store it in some unused bits, or anything like that
[22:03:37] <caveman> very deep philosophical subject about how language should work.
[22:03:53] <SnoopJ> ideally, you don't get into the situation where everyone invents their own concept of timezones
[22:04:22] <SnoopJ> that's why standardization is a thing: we tried it the other way already and it was *miserable*
[22:05:15] <caveman> the whole idea of tz is wrong.  we should live by utc.  then people should accept that in some countries the sun ruses at, say, 00:00.
[22:05:24] <caveman> rises*
[22:05:27] <gcbirzan> how would that be better
[22:05:31] <gcbirzan> if anything, it'd be worse
[22:05:41] <SnoopJ> it's unclear how "the concept is wrong" and "this one is preferable" are not mutually exclusive statements
[22:05:53] <caveman> gcbirzan: we will not need to convert timestamps for international coordination.  then local people will get used to it.
[22:06:00] <gcbirzan> now I have to remember at what time the sun rises in Japan, vs the offset
[22:06:05] <grawity> go one step further and make it metric https://en.wikipedia.org/wiki/Swatch_Internet_Time
[22:06:12] <SnoopJ> don't forget to think about non-terrestrial time-keeping, too
[22:06:26] <caveman> grawity: you don't need.  you just sleep when allowed to sleep and your work is done.  remember we don't even sleep at night any more.
[22:07:13] <SnoopJ> you can use any timekeeping system you like; if you want to communicate with others, that's where the problem gets tricky.
[22:07:28] <SnoopJ> "everyone should do it my way" is a valid solution, but kind of a hard one to implement
[22:07:31] <caveman> i think some militaries are internally in utc.
[22:07:53] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d)
[22:08:03] <drant> what does UTC stand for
[22:08:45] <drant> it could be UCT or CUT but not UTC
[22:08:47] <caveman> i'm surprised that bjs said that datetime.utcnow() is not identical to time.now().  i still don't get it.
[22:08:52] <SnoopJ> drant, it's from French "temps universel coordonnÃ©" which was written TUC, and English speakers wanted to use CUT ("coordinated universal time")
[22:08:55] *** Joins: schumaml (~schumaml@dslb-178-010-034-025.178.010.pools.vodafone-ip.de)
[22:09:02] <drant> caveman: time.now() doesn't exist
[22:09:06] <caveman> anyone knows where in the manual does it say something that implies that datetime.utcnow() is different than time.time()?
[22:09:06] <bjs> caveman: when was "17:38 22/07/2021" ?
[22:09:06] <SnoopJ> UTC is the compromise that makes everyone equally unhappy :)
[22:09:09] <bjs> caveman: to me, it was an hour ago
[22:09:14] <drant> SnoopJ: WHAT IF I HATE FRENCH PEOPLE
[22:09:27] <bjs> caveman: it said in the line you gave, it gives you the current UTC time as a _naive_ object, aka it has no timezone infio
[22:09:29] <bjs> info*
[22:09:30] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 240 seconds)
[22:09:36] <SnoopJ> drant, you tell me
[22:09:44] <caveman> bjs: time.time() is also naive.  so what's the difference?
[22:09:48] <bjs> caveman: it's not naive
[22:09:53] <caveman> drant: sorry, i meant time.time()
[22:10:00] <bjs> caveman: time.time has nothing to do with timezones
[22:10:05] <drant> caveman: time.time() is a float, datetime.utcnow() isn't
[22:10:13] <bjs> caveman: there is no concept of a "timezone aware time.time"
[22:10:18] <drant> caveman: datetime.utcnow() is a complex object that has space to hold a timezone
[22:10:23] <caveman> err, i mean datetime.utcnow().timestamp()
[22:10:31] *** Quits: schumaml4 (~schumaml@dslb-094-216-173-013.094.216.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[22:10:37] <bjs> datetime.utcnow() is the current UTC time, expressed as a naive datetime object (aka in local time)
[22:10:44] <caveman> how is datetime.utcnow().timestamp() diffrerrent than time.time()?
[22:10:49] <bjs> caveman: I just said
[22:10:51] <drant> .timestamp() measures the distance between datetime.utcnow() and 1970-01-01 00:00:00Z
[22:10:59] *** Parts: meatballs (~meatballs@2001:470:69fc:105::633) ()
[22:11:26] <caveman> drant: so, will it be identical to time.time()?
[22:11:28] <bjs> caveman: no
[22:11:32] <gcbirzan> Between utcnow() as the local timezone.
[22:11:51] <drant> well i assume it would be identical given utcnow() is also UTC
[22:11:53] <gcbirzan> and that's the problem, that it should be treated as UTC
[22:12:04] <gcbirzan> drant: but utcnow is naive, you have to manually convert it for it to work
[22:12:09] <caveman> bjs: documentation says about utcnow():  ``Return the current UTC date and time, with tzinfo None.''
[22:12:15] <bjs> caveman: utcnow() is the current UTC now written as a naive datetime. utcnow() gives an object like "2021/07/22 17:42" <- for me this _was an hour ago_
[22:12:20] <drant> comparing UTC >>> int(datetime.datetime.utcnow().timestamp()) == int(time.time())
[22:12:20] <drant> True
[22:12:22] <bjs> so the timestamp reflects that
[22:12:22] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[22:13:12] <drant> well this is unfair because my machine is set to timezone utc
[22:13:14] <gcbirzan> drant: FOr me thats not true, becuase I have a local timezone that's not UTC
[22:13:15] *** Quits: schumaml (~schumaml@dslb-178-010-034-025.178.010.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[22:13:43] *** Joins: ferz (~ferz@93.48.251.229)
[22:13:45] <bjs> caveman: yes the documentation says, very clear right there that is doesn't have any associated timezone info. the datetime object *does not know* that it was UTC
[22:13:47] <drant> right, so .utcnow() is actually a misnomer
[22:13:55] <drant> now_without_timezone()
[22:14:09] <bjs> drant: except it's not, that's now()
[22:14:13] <gcbirzan> utcnow_naive_don_t_use
[22:14:23] <gcbirzan> actually, I Think now takes a tzinfo and converts to that
[22:14:26] <drant> datetime sucks
[22:14:30] <gcbirzan> so the correct way would be now(UTC)
[22:14:46] <bjs> gcbirzan: yeah the docs for utcnow() even say please use now(timezone.utc)
[22:14:53] *** Joins: skapata (~Skapata@user/skapata)
[22:15:01] <caveman> bjs: datetime.utcnow() returns an object.  if you convert it into a str, then you get "2021/07/22 17:42".  but datetime.utcnow().timestamp() must equal time.time() as far as i understand.
[22:15:10] <bjs> caveman: no nobody says it should equal time.time
[22:15:13] *** Joins: schumaml (~schumaml@ipservice-092-211-207-070.092.211.pools.vodafone-ip.de)
[22:15:21] <gcbirzan> caveman: not necessarily. if your local timezone is not utc, it won't equal
[22:15:22] <bjs> caveman: for me, that time you wrote just there is *An hour ago*
[22:15:31] <bjs> caveman: it doesn't have any information saying it was UTC and not local time
[22:15:49] <caveman> gcbirzan: on a given machine.  can time.time() not equal datetime.utcnow().timestamp()?
[22:15:53] <bjs> YES
[22:16:01] <gcbirzan> In [8]: int(datetime.utcnow().timestamp()) == int(time.time())
[22:16:02] <gcbirzan> Out[8]: False
[22:16:06] <bjs> For example, for me, that time is an hour ago
[22:16:08] <gcbirzan> well, you know
[22:16:18] <gcbirzan> I could make it smarter, but still.
[22:16:36] <gcbirzan> caveman: the problem is utcnow returns a naive datetime that .timestamp then interprets as being in your local timezone, rather than UTC
[22:17:01] <drant> has anyone thought about fixing this because it seems counterproductively misleading
[22:17:09] <caveman> oh.  mind boggle biggly.
[22:17:23] <SnoopJ> drant, I would be shocked if nobody's at least thought about it, but I don't know what the broader picture looks like there.
[22:17:33] <gcbirzan> it's not a bug, it's documented :)
[22:17:37] <SnoopJ> Certainly someone is depending on the...unfriendly...way that datetime does this.
[22:17:44] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d) (Quit: Leaving)
[22:17:46] <gcbirzan> but there are quite a few traps in the datetime module
[22:17:50] *** Joins: nmoura (~nmoura@177.192.16.58)
[22:17:58] <drant> it might be documented but if you have a function called is_even() and there's a documentation saying it returns true if a number is odd then i'd want to change it
[22:18:06] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[22:18:23] <caveman> gcbirzan: how did it return false in your case?  i run it on a python interpretor, online, and it returned identical integers.
[22:18:32] <bjs> caveman: for the reasons I've explained...
[22:18:42] <gcbirzan> caveman: Yes, because my local timezone is UTC + 3
[22:18:47] <SnoopJ> perhaps it would be a good time to pause and re-read the explanations
[22:18:57] <bjs> drant: but the docs are very clear, it says it has no timezone info, it has a big red box with a warning and points you towards what to do instead.
[22:19:05] <drant> again
[22:19:22] <drant> sometimes you have to look at a function who's signature lies
[22:19:23] <caveman> bjs: you mean that website's timezone is utc+0, hence the identicality?
[22:19:32] <bjs> caveman: that would be a logical guess
[22:19:41] <drant> and decide it'd probably be worth changing it rather than putting big flashing signs around it
[22:19:54] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 240 seconds)
[22:20:02] <bjs> caveman: I can tell you that for me the time you pasted of "2021/07/22 17:42" was an hour ago, and the timestamp you'd get from that datetime object would be an hour ago
[22:20:25] <nedbat> drant: there's backward compatibility to consider
[22:20:27] <bjs> sorry no, the timestamp *I* would get from that object would be an hour ago
[22:20:42] <bjs> nedbat: it's hard to believe anyone is actually using utcnow() in a useful way :P
[22:20:43] <drant> how much of that backwards compat is relying on incorrect behaviour
[22:20:48] <drant> bjs: ++
[22:20:53] <bjs> or yeah a correct way
[22:20:58] <caveman> bjs: is int(datetime.now(timezone.utc).timestamp()) == int(time.time())?
[22:21:12] <drant> i know i've got code that's using utcnow() in a way that only works because the machine is set to UTC
[22:21:15] <bjs> caveman: yes it should be.
[22:21:20] <bjs> caveman: and you should be able to put any timezone in there
[22:21:21] <drant> and i won't go and fix it because im tired
[22:21:29] <nedbat> drant: open a bug at bugs.python.org and lay out your case.
[22:21:43] *** Parts: octav1a (~quassel@173.195.145.98) (~Called off to Sentinal the Sand Temple~)
[22:22:03] *** Joins: qlixed (~qlixed@152.170.36.244)
[22:22:51] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:22:56] <SnoopJ> are reports/etc. still preferred there, instead of GitHub? I don't know what that timeline is like.
[22:23:10] <drant> i hope people are avoiding github when they are able to
[22:23:13] <nedbat> SnoopJ: i don't know what the plans are for the move.  Currently it's still at bpo
[22:23:16] * SnoopJ has the sneaking suspicion he's asked that before
[22:23:26] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[22:23:32] <nedbat> SnoopJ: https://github.com/python/cpython doesn't have Issues enabled.
[22:23:39] <SnoopJ> well, that's that then, heh.
[22:24:35] <SnoopJ> Maybe the migration is part of the new dev-in-residence role
[22:24:38] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:26:34] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[22:27:50] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[22:28:52] <p-i-> What's a good way to store the last 30s of payloads?
[22:29:51] <p-i-> I'm thinking a 5s timer that flushes the old ones: L = L[newfirstitem:]
[22:30:09] *** Quits: greedom (~greedom@2001:16b8:2ec8:4f00:b1c5:55bb:d2c6:89) (Ping timeout: 250 seconds)
[22:30:13] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[22:30:15] <p-i-> size is variable, but within constraints.
[22:31:18] <p-i-> Can I preallocate somehow, to minimize dynamic allocations?
[22:31:41] <p-i-> Maybe it's not even a bottleneck...
[22:31:42] <nedbat> p-i-: use a deque
[22:31:55] <p-i-> tx
[22:32:15] <SnoopJ> deque +1, nice properties for that task
[22:32:40] <madprops> do most linux distros have a 'python3' binary, or do they replaced it with only 'python' ?
[22:32:53] <nedbat> madprops: most use "python3" as Python recommends
[22:33:08] <madprops> i see
[22:33:26] <OMGOMG> python is python2 according to pep isn't it
[22:33:35] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:33:38] <nedbat> yes
[22:33:50] <nedbat> (though in a virtualenv it's whatever version you made it)
[22:34:24] *** Quits: Achylles (~Achylles_@2804:431:d724:510f:d7b1:4ecb:6877:1a1a) (Remote host closed the connection)
[22:34:38] *** Joins: Achylles (~Achylles_@2804:431:d724:510f:d7b1:4ecb:6877:1a1a)
[22:34:47] *** Joins: Betal (~Beta@user/betal)
[22:34:53] <SnoopJ> hmm, there's a proscription from using `python` to refer to 3.x?
[22:35:58] <p-i-> huh. https://stackoverflow.com/questions/9507636/how-can-i-pop-lots-of-elements-from-a-deque answer by Raymond Hettinger says "There is no multi-pop method for deques. You're welcome to submit a feature request to bugs.python.org and I'll consider adding it."
[22:37:28] <p-i-> Anyway I can profile popping.
[22:37:50] <noarb> when using sphinx docs with rst, is there a way to remove the trailing whitespace with inline code? In markdown: `TLA`s works but in rst: ``TLA``s does not
[22:40:42] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[22:41:02] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[22:42:49] <jinsun> the PEP got edited it seems, now it says python3 can be used as python, https://www.python.org/dev/peps/pep-0394/#for-python-runtime-distributors
[22:43:24] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[22:43:55] *** Joins: schumaml1 (~schumaml@dslb-188-104-166-212.188.104.pools.vodafone-ip.de)
[22:44:01] *** Joins: tg (~tg@rockylinux/infra/tg)
[22:44:11] <graingert> jinsun: I use this https://packages.ubuntu.com/focal/python-is-python3
[22:44:25] <graingert> madprops: ^
[22:45:11] <graingert> I think ubuntu added https://packages.ubuntu.com/focal/python-is-python2 as a response to a paying customer failing an upgrade xD
[22:45:22] *** Quits: schumaml (~schumaml@ipservice-092-211-207-070.092.211.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[22:45:39] *** Quits: georgios (~georgios@ppp046176224061.access.hol.gr) (Ping timeout: 252 seconds)
[22:45:55] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 268 seconds)
[22:46:32] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 268 seconds)
[22:47:56] *** Quits: abraxas (~abraxas@2600:8805:c880:3:c7fe:fc8e:f2cc:8056) (Remote host closed the connection)
[22:48:40] <nedbat> noarb: what do you mean by trailing whitespace?
[22:50:04] *** Joins: computeiro (~Wender@189.37.64.123)
[22:50:53] <ChrisWarrick> noarb: reST isnâ€™t very flexible when it comes to inline markup and it wonâ€™t let you have only part of a word marked as bold, italic, or monospace
[22:51:33] <gordonjcp> ChrisWarrick: you can insert plain html into reST though can't you?
[22:51:50] <ChrisWarrick> gordonjcp: you can, but itâ€™s a bit of a pain â€” especially for a single word
[22:52:48] <ChrisWarrick> gordonjcp: If you need to say <code>FOO</code>s (with FOO being a specific constant) a lot, you could define whatever-a-custom-replacement-is-called and go with that
[22:53:48] *** Joins: cedric (~cedric@2a01:cb11:867:c200:5175:4046:4abc:8403)
[22:54:07] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[22:54:35] *** Joins: Blankspace (~abcd@user/blankspace)
[22:56:16] *** Joins: cuz (~user@38.140.58.234)
[22:56:19] *** Joins: c10l (~c10l@89.34.167.207)
[22:56:20] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[22:57:09] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:57:30] *** Quits: schumaml1 (~schumaml@dslb-188-104-166-212.188.104.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[22:57:41] *** Quits: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:58:45] <nedbat> gordonjcp: markdown says any HTML is fine. ReST doesn't assume the output is HTML, so it's not a simple thing.
[22:59:09] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[22:59:57] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:00:06] *** Joins: FluffyMask (~masque@user/fluffymask)
[23:00:50] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 252 seconds)
[23:01:09] *** Joins: schumaml1 (~schumaml@dslb-188-104-182-203.188.104.pools.vodafone-ip.de)
[23:01:17] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[23:01:55] <gordonjcp> nedbat: good point
[23:02:05] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[23:02:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:02:16] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[23:02:16] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Client Quit)
[23:03:46] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[23:03:59] <SnoopJ> what-is-python_4.tar.xz ðŸ¤”
[23:04:28] * rud0lf says "NEEE" to an older lady
[23:05:02] *** Joins: Barones (~Barones@2804:48dc:8500:0:e5c2:2c6d:8626:1ebb)
[23:05:44] *** Joins: CombatVet (~c4@user/combatvet)
[23:06:01] *** Joins: Roey (~Roey@user/Roey)
[23:06:24] *** Joins: Celeo (~Celeo@user/celeo)
[23:06:46] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[23:07:41] *** Quits: schumaml1 (~schumaml@dslb-188-104-182-203.188.104.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[23:08:47] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[23:09:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[23:10:15] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:9b0:5b02:289d:6c18)
[23:12:06] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: If dreams are like movies, then memories are films about ghosts.)
[23:12:34] <fofoni> when initializing an extension module in C we use the macro PyModuleDef_HEAD_INIT like {PyModuleDef_HEAD_INIT, .m_name=..., .m_doc=..., ...}
[23:12:48] *** Quits: rendar (~rendar@user/rendar) ()
[23:13:06] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[23:13:06] <fofoni> the problem is that this macro initializes the m_base member as a positional member, instead of using the "designated initializer" syntax
[23:13:29] <fofoni> and in C++ it's not allowed to mix positional and designated initializers
[23:13:37] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Client Quit)
[23:13:58] <fofoni> right now I'm actually writing { .m_base = PyModuleDef_HEAD_INIT, .m_name = ..... }
[23:14:19] <fofoni> that is, writing the ".m+base=" myself
[23:14:33] <fofoni> but I don't know if this could break in the future
[23:14:33] *** Joins: Jefren (~Jefren@16.sub-174-215-150.myvzw.com)
[23:14:59] <SnoopJ> fofoni, is there a reason not to do the module initialization in C that stands aside your C++?
[23:16:36] *** Quits: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com) (Quit: Leaving)
[23:16:40] <fofoni> well, mixing Python and C++ is already confusing enough, I'd like to avoid putting a third language in the loop
[23:16:51] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[23:17:32] <SnoopJ> The third language enters the room when C++ does
[23:17:54] <SnoopJ> CPython being written in C, that is
[23:17:59] <fofoni> yes i got it hehehe
[23:18:06] <InPhase> fofoni: That would not be necessary...  C++ can compile almost all C code other than the ultra modern C code, requiring only very slight tweaks.
[23:18:08] <fofoni> but at least i'm not writing the C myself
[23:18:11] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[23:18:42] <SnoopJ> fofoni, I had a headache similar to this with MicroPython just last night, and yea, just keeping the peas and porridge separate is I think worth the bother.
[23:19:06] <InPhase> fofoni: Wait, you raised a specific example above.  Read first, comment second.  :)
[23:19:16] <SnoopJ> at any rate, if your question is "what guarantees can I rely on for interfacing with CPython from C++?" the answer is I think "none"
[23:19:23] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 255 seconds)
[23:19:32] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Remote host closed the connection)
[23:19:38] <SnoopJ> except the ones that come with the API/ABI :)
[23:19:42] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[23:19:51] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[23:20:01] <foo> Does it make sense for API libraries to always use async libraries?
[23:20:05] <foo> Or does it depend on the API?
[23:20:21] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d)
[23:20:25] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[23:20:31] <oxipital> cxwhatever breaks c++?
[23:20:34] * oxipital TIL
[23:21:48] <fofoni> InPhase, actually mixing positional and designated initializers in GCC 11 with C++17 gives me a compiler warning, and in C++20 it's an outright error
[23:23:07] <fofoni> (oops just read your second comment :)
[23:23:17] <InPhase> fofoni: My first guess is that .m_base is an unlikely label to change.
[23:23:36] <foo> I think async with APIs might always make sense given the nature of network connectivity with APIs but want to make sure I'm understanding this
[23:24:01] *** Quits: Jefren (~Jefren@16.sub-174-215-150.myvzw.com) (Quit: CoreIRC for Android - www.coreirc.com)
[23:24:08] <InPhase> fofoni: Looks like it's specified here:  https://docs.python.org/3/c-api/module.html
[23:24:16] *** Joins: sectec84 (~sectec84@24.18.109.173)
[23:25:09] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:25:35] <fofoni> is it worth the trouble submitting pull request or something like that to change PyModuleDef_HEAD_INIT to include the .m_base ? is it this easy to change this kind of thing?
[23:26:22] *** Joins: nmoura (~nmoura@177.192.16.58)
[23:26:28] <fofoni> hmmm that link makes it clear, thanks
[23:26:32] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d) (Quit: Leaving)
[23:27:08] <fofoni> the examples in the tutorials skip the initializers but I think that makes it safe to use it
[23:27:20] <habnabit_> fofoni, Python.h is a pretty bad interface fwiw. cffi is vastly superior
[23:27:23] <habnabit_> fofoni, oh, this is for C++?
[23:27:23] <SnoopJ> there's always the option of a bindings layer like pybind11/cppyy too
[23:27:28] <SnoopJ> habnabit_, yea
[23:27:37] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 245 seconds)
[23:27:41] <fofoni> (and actually make it clear that the macro shouldn't be changed)
[23:27:52] <habnabit_> fofoni, cppyy or cython is good for binding C++ to python; there's also cffi if you have an extern "C" API available
[23:28:01] <habnabit_> fofoni, but Python.h is the worst option by far
[23:28:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[23:28:27] <graingert> foo: you could use httpx and unasync to provide a sync and async api
[23:28:52] <fofoni> I had heard that before (about cython and cffi) and i think it's time to look into that hehehe
[23:28:53] <fofoni> thanks!
[23:28:58] <SnoopJ> Cython has pretty nice C++ support, but it's a language unto itself, so might be ~ the same amount of headache as writing a "hourglass" for your module and doing the initialization in C proper
[23:29:06] *** Joins: zebrag (~chris@user/zebrag)
[23:29:10] <fofoni> hadn't heard of cppyy though, looks nice
[23:29:19] <foo> graingert: thanks, perhaps I can be more clear: when writing a wrapper for an API, does it always make sense to use async?
[23:29:32] <graingert> foo: no
[23:29:44] <SnoopJ> it is, with the caveat of ~100 MB runtime memory burden at the moment and/or distribution of headers. I think modules are changing that, though?
[23:30:17] <foo> graingert: in most cases does it make sense to use async for an api wrapper?
[23:30:26] <foo> graingert: thanks for the help, trying to wrap my head around this
[23:30:54] *** Joins: MD500_Pilot (~MD500_Pil@gatekeeper.rstechnical.com)
[23:31:56] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d)
[23:32:09] <SnoopJ> oh huh, looks like cppyy has overhauled the documentation about that. Anyway, C++20 might make it more attractive with modules
[23:33:15] *** Joins: georgios (~georgios@ppp046176224061.access.hol.gr)
[23:33:54] <MD500_Pilot> I have a simple command that grabs the output of a subprocess and I want to take that output and create a dictionary out of the iteration of the items but I am having trouble adding the split items to my dictionary: https://bpa.st/VEXA
[23:34:25] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:9af4:e021:9dca:50c4)
[23:34:31] <SnoopJ> not really sure what the impact of changing *just* the initializer syntax would be. Seems like it might be a build-breaker in the same fashion for users who are writing their decls positionally?
[23:34:31] <MD500_Pilot> I can get them to print, but I am not sure how to take the output and enter it into a diction in key:value pairs
[23:34:38] <SnoopJ> I don't really know how that is specified in C though
[23:34:43] <habnabit_> MD500_Pilot, use subprocess.run: subprocess.run(['lsblk -nolabel -o UUID,MOUNTPOINT
[23:34:43] <habnabit_>  | grep enclosure*"
[23:34:45] <habnabit_> oops
[23:35:09] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[23:35:11] <habnabit_> MD500_Pilot, use subprocess.run: result = subprocess.run(['lsblk', '-nolabel', '-o', 'UUID,MOUNTPOINT'], capture_output=True)
[23:35:25] *** Joins: djapo (~archangel@user/djapo)
[23:35:28] <habnabit_> MD500_Pilot, then `for item in result.stdout.splitlines():`
[23:35:39] <habnabit_> MD500_Pilot, you might want to also set check=True to run
[23:35:53] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[23:35:57] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[23:36:11] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[23:36:27] *** Quits: nmoura (~nmoura@177.192.16.58) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:36:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[23:36:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[23:37:52] <MD500_Pilot> I tried the subprocess run but had issues getting the grep in there
[23:37:59] <habnabit_> MD500_Pilot, you don't need the grep as a subprocess
[23:38:05] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Quit: ZNC - http://znc.in)
[23:38:05] <habnabit_> MD500_Pilot, doing that filtering in python is vastly simpler
[23:38:14] <MD500_Pilot> I do otherwise the command returns stuff I don't need
[23:38:20] <habnabit_> MD500_Pilot, yes, so filter it in python
[23:38:36] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[23:38:37] <habnabit_> MD500_Pilot, (also, `grep enclosure*` doesn't take a glob; you're matching 'enclosure' or 'enclosur' or 'enclosureeeeeeeee')
[23:38:40] <graingert> foo: most is tricky to nail down
[23:38:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:38:47] *** Joins: pnoud (~pnoud@user/pnoud)
[23:38:51] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.1)
[23:38:57] <habnabit_> MD500_Pilot, `if 'enclosure' not in item: continue` done
[23:39:07] <graingert> foo: if you're stripe then you want to publish an API wrapper that works in as many environments as possible
[23:39:41] *** Joins: upsala (~zcb@185.213.155.160)
[23:40:27] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:41:35] <MD500_Pilot> but I want to check if `enclosure` is in the item
[23:41:48] <habnabit_> MD500_Pilot, are you reading what i'm saying? :)  19:08:57 < habnabit_> MD500_Pilot, `if 'enclosure' not in item: continue` done
[23:42:00] *** Joins: fflam (~mdt@ip70-179-20-127.sd.sd.cox.net)
[23:42:14] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[23:42:27] *** Joins: nmoura (~nmoura@177.192.16.58)
[23:42:31] *** Quits: ferz (~ferz@93.48.251.229) (Ping timeout: 250 seconds)
[23:42:33] <MD500_Pilot> I am but I guess I don't understand it :-)
[23:42:47] <habnabit_> MD500_Pilot, `continue` means 'skip to the next loop item'
[23:42:52] <foo> graingert: I see. As it relates to what the value is for async in an api wrapper, the value would be not having to wait for network dependencies or similar, right?
[23:43:00] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c85d:b78b:4885:c67d) (Quit: Leaving)
[23:43:06] <graingert> foo: for wrappers it's who your customers are
[23:43:13] <graingert> more than what technology is best
[23:43:17] <MD500_Pilot> ah
[23:43:36] <MD500_Pilot> so add that after the iteration?
[23:43:45] <habnabit_> MD500_Pilot, no, as the first lines inside the loop body
[23:43:46] <foo> graingert: I see, I see, thank you. To be more clear, I'm using an unofficial API wrapper and they used async and I'm debating A) using it or B) writing my own wrapper
[23:43:50] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[23:43:59] <graingert> foo: what's the wrapper?
[23:44:04] <habnabit_> MD500_Pilot, then after that you'll have an item that contains enclosure
[23:44:10] *** Joins: Ard1t (~ard1t@user/ard1t)
[23:44:13] <foo> graingert: thanks - https://github.com/W1ndst0rm/Treillage
[23:44:13] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[23:44:54] <MD500_Pilot> `TypeError: a bytes-like object is required, not 'str'`
[23:45:23] <MD500_Pilot> `if b'enclosure' not in item: continue`
[23:45:27] <MD500_Pilot> proper fix?
[23:45:29] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[23:45:32] <foo> graingert: relatively small API I'm connecting to, it's the only option.
[23:46:14] <SnoopJ> MD500_Pilot, it really helps a lot and saves you time if you share complete error reports.
[23:46:19] *** Quits: Samian (~Sami@163.114.130.6) (Read error: Connection reset by peer)
[23:46:41] <SnoopJ> (nothing about that code looks obviously wrong, but maybe `item` is weird)
[23:47:24] <MD500_Pilot> I'm not getting an error
[23:47:39] <habnabit_> MD500_Pilot, TypeError is not an error? ;)
[23:47:42] <MD500_Pilot> I am simply trying to get the output from a subprocess into a dictionary :-)
[23:47:50] <MD500_Pilot> https://bpa.st/VEXA
[23:47:58] <SnoopJ> My mistake, I thought the TypeError you shared was an error.
[23:48:09] <habnabit_> MD500_Pilot, this code doesn't seem to be your current code
[23:48:24] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[23:48:29] <foo> Here's a question: if I'm using an async library, I'm used to doing pdb.set_trace() and then testing code and talking to APIs... but with async, it complicates that. Is it possible to have a similar workflow in async?
[23:48:33] <foo> (of testing viai pdb)
[23:48:38] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[23:48:44] *** Joins: schumaml1 (~schumaml@dslb-094-216-170-120.094.216.pools.vodafone-ip.de)
[23:48:51] <MD500_Pilot> @habnabit was showing me a better way to do get the info
[23:48:52] <graingert> foo: nope
[23:49:15] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:88c6:460a:5c1:7965)
[23:49:27] <MD500_Pilot> This is now my current code: https://bpa.st/N4AA
[23:49:53] *** Joins: milosz (~milosz@user/milosz)
[23:49:56] <habnabit_> MD500_Pilot, ok, and the full traceback?
[23:49:56] <MD500_Pilot> which outputs exactly the smae thing as I had but in a better way I am guessing, now I want to add all of the output to a dictionary
[23:49:57] <foo> graingert: Is there a different workflow I can use with async to test/talk to endpoints? I could rewrite the wrapper with requests, not sure if it's worth it to move away from async entirely or maybe just use requests manually but then use async in production. hmm
[23:50:05] <habnabit_> MD500_Pilot, also the continue means you don't need the else
[23:50:30] <MD500_Pilot> Ah
[23:50:31] <SnoopJ> MD500_Pilot, probably just `'enclosure'`, the result of splitlines() is I think a str
[23:50:38] <habnabit_> MD500_Pilot, anyway, it's pretty easy: k, v = item.split(); d[k] = v
[23:50:45] <MD500_Pilot> no traceback
[23:51:01] <habnabit_> MD500_Pilot, if you see `TypeError: a bytes-like object is required, not 'str'` there's a traceback
[23:51:15] <SnoopJ> habnabit_, I think that might have been from writing new code for the suggestion?
[23:51:17] <habnabit_> MD500_Pilot, the traceback is the lines above it
[23:51:18] <p-i-> What's the deal with sum(k.x for k in K) and sum([k.x for k in K])? The second case is easy to understand, but what's happening in the first case? What syntax is this?
[23:51:21] <SnoopJ> It's really hard to follow
[23:51:23] <habnabit_> SnoopJ, i can't tell!
[23:51:34] <p-i-> Does `? for ? in ?` resolve to a list?
[23:51:35] <habnabit_> p-i-, it's a generator comprehension
[23:51:37] <SnoopJ> p-i-, that's called a "generator comprehension"
[23:51:38] <habnabit_> p-i-, no
[23:51:38] <MD500_Pilot> that was the byte literal, I was just asking if `if b'enclosure' not in item: continue` this was the correct way to fix it
[23:51:39] *** Quits: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch) (Remote host closed the connection)
[23:51:43] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Quit: Leaving)
[23:52:00] *** Joins: resmo_ (~resmo@2a00:d420:9:8a00:ca4e:e8c3:6062:e811)
[23:52:01] <habnabit_> p-i-, it resolves to the type of the thing that contains it, so () for generators, [] for lists, {} for dict/set
[23:52:08] <grym> p-i-: generators are "lazy"
[23:52:10] <p-i-> SnoopJ: he beat you to it... fewer keystrokes :p
[23:52:16] *** Quits: Elon_Satoshi (~elonsatos@46.102.153.243) (Quit: Lost terminal)
[23:52:16] <SnoopJ> MD500_Pilot, when it comes to membership testing, the left-hand operand must match the right-hand for str/bytes
[23:52:19] <grym> if that piece of jargon's something you know about
[23:52:25] <MD500_Pilot> Got it!
[23:52:31] <SnoopJ> p-i-, I was answering "what's the deal..."
[23:52:34] <MD500_Pilot> Makes sense
[23:52:39] <habnabit_> p-i-, not a he
[23:52:51] <p-i-> My bad!
[23:52:51] <foo> graingert: not sure if I'm making sense, I haven't used async in a while, heh.
[23:53:18] <graingert> foo: I'm not sure what you mean
[23:53:22] <foo> I could just keep updating my .py file and keep re-running it so it gets ran within asyncio.run()
[23:53:32] <SnoopJ> p-i-, the [item for item in iterable] syntax is a list comprehension, long-form explanation here: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
[23:53:36] <graingert> foo: `breakpoint()` is sadly totally broken in async
[23:53:44] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[23:53:44] <graingert> and it seems very few people care!?
[23:53:52] <graingert> it's tricky to fix though
[23:53:55] <habnabit_> graingert, the builtin breakpoint is?
[23:54:04] <SnoopJ> p-i-, a generator comprehension is kind of the same idea, but it's lazy (i.e. your second sum() builds the list *first*, then it starts summing)
[23:54:16] <SnoopJ> https://docs.python.org/3/tutorial/classes.html#generator-expressions
[23:54:21] <graingert> habnabit_: yeah you can't trap from readline
[23:54:27] <MD500_Pilot> I don't understand this part: `k, v = item.split(); d[k] = v` I think `k, v = item.split();` takes the items that are split and makes then a key:value pair, correct?
[23:54:32] <foo> With sync code, I use requests. With async, I'm using this library which seems to be within asyncio.run(). If I want to manually test code within pdb.set_trace(), I can easily do this in requests.get() ... but with async code, I can't easily do projects = await tr.conn.get(endpoint='/core/projects', params=query_parameters) in pdb - is there any workaround?
[23:54:33] <p-i-> Ah, so the direct generator comp. is actually more efficient.
[23:54:34] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[23:54:54] <habnabit_> graingert, can it not return something so you can e.g. `await breakpoint()` and have an async debugger do the thing?
[23:54:58] <SnoopJ> it's common when you're trying not to load a bunch of data, but still want to use comprehension syntax to make an iterable thing, yea.
[23:55:10] <graingert> habnabit_: it's really tricky
[23:55:18] <habnabit_> MD500_Pilot, item.split() returns a list with two items in it (in your case) and that unpacks the two items into two locals
[23:55:19] <graingert> habnabit_: you need to drive readline with a thread ala https://github.com/python/cpython/blob/f1afef5e0d93d66fbf3c9aaeab8b3b8da9617583/Lib/asyncio/__main__.py#L70
[23:55:32] <graingert> habnabit_: `python -m anyio` PRs accepted :D
[23:55:43] <habnabit_> graingert, why do you need readline at all? run a unix socket for IO
[23:55:49] <p-i-> wow I keep finding gems in really basic Python syntax
[23:55:51] <grym> MD500_Pilot: `k,v = item.split()` is making the further assertion that "this split will return exactly two things every time".  it's the same as `x,y = ("foo","bar")`
[23:55:54] <graingert> not everyone has unix sockets habnabit_
[23:55:56] <p-i-> I'm sure I RTFMd the manual ... once
[23:56:10] <foo> graingert: sounds like there is no workaround
[23:56:15] <SnoopJ> p-i-, the stuff on offer for iteration is definitely Python's crown jewel, for me
[23:56:17] *** Quits: fivegruel (~fivegruel@dynamic-046-114-146-110.46.114.pool.telefonica.de) (Ping timeout: 255 seconds)
[23:56:20] <habnabit_> p-i-, the generator comprehension is more _memory_ efficient because it doesn't need to create a list that holds each item to sum
[23:56:25] <graingert> foo: it's feasable, nobody has done it yet afaik
[23:56:32] *** Quits: codl (~codl@user/codl) (Read error: Connection reset by peer)
[23:56:54] <p-i-> SnoopJ: yeah and with numpy over the top, I do sooo much in 10 lines of code. And it reads well too!
[23:56:57] *** Joins: codl (~codl@user/codl)
[23:56:59] <foo> graingert: in the situation where I can not do this and I'm testing API connections, would you A) keep updating coding and re-run, or B) augment what I'm doing with requests to test the API?
[23:57:03] <habnabit_> p-i-, paradoxically it can be less _CPU_ efficient because it can take a faster path for the actual iteration in sum's loop
[23:57:10] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:57:12] <graingert> foo: I write tests with pytest
[23:57:16] <habnabit_> p-i-, but that rarely matters
[23:57:31] <habnabit_> p-i-, sorry, i mean list iteration can take a faster path in sum
[23:57:32] <SnoopJ> yea, it has no option but to iterate, no "ooh, the user gave me a sequence, I'll take a shortcut!" trickery.
[23:57:53] <p-i-> ok I see... summing contiguous memory locations...
[23:58:04] <SnoopJ> you're still paying for the loop that builds the list comprehension though, so definitely sum([...]) is an antipattern here
[23:58:04] <foo> graingert: I usually like to manualyl walk the api with the api docs to see things firsthand, do you not do this? Perhaps this is not common
[23:58:11] <p-i-> but heavy sums should be numpified anyway
[23:58:22] <habnabit_> p-i-, well.. numbers in python are all boxed, so it's not like the integers are stored densely packed like in numpy
[23:58:24] <SnoopJ> p-i-, it has nothing to do with contiguity, but just think "it might do different stuff if it gets a fleshed-out sequence"
[23:58:58] <SnoopJ> many of the builtin/stdlib functions that are written in C have little optimizations like this
[23:58:59] <habnabit_> p-i-, very simply put, iterating over a list means it can bypass all the overhead of the iterator protocol
[23:59:00] *** Joins: ferz (~ferz@93.48.251.229)
[23:59:07] <habnabit_> p-i-, but again this rarely matters
[23:59:21] <MD500_Pilot> ok, that all works now, thank you but it is coming out as bytes in my dictionary instead of str
[23:59:23] <SnoopJ> yea, certainly not with cases where you'd call sum() except the ones where you probably want numpy anyway
[23:59:32] <p-i-> I see... at the expense of dynamic storage.. it's a tradeoff
[23:59:34] <habnabit_> MD500_Pilot, you can .decode().split()
[23:59:40] <SnoopJ> p-i-, not really
[23:59:43] <MD500_Pilot> ah
