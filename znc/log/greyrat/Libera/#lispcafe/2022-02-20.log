[00:43:40] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:9e4:e295:e419:65fb) (Remote host closed the connection)
[00:49:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:12:11] *** Parts: McParen (~McParen@user/mcparen) ()
[01:29:50] <hayley> https://www.youtube.com/watch?v=d6WFt5ygeh0
[01:29:50] *** Quits: Catie (~user@user/catie) (Quit: switching clients)
[01:29:51] -ixelp- Each Pink Floyd album explained by classic Simpsons - YouTube
[01:30:25] *** Joins: Catie (~user@user/catie)
[01:38:16] *** Joins: aeth_ (~aeth@user/aeth)
[01:38:17] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[01:38:20] *** aeth_ is now known as aeth
[01:39:13] *** Joins: rogersm (~rogersm@90.166.180.250)
[02:00:42] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Remote host closed the connection)
[02:18:29] *** Joins: dra (~dra@2a04:4540:6407:f400:5dfd:8f0:b5bd:1cf3)
[02:18:31] <dra> Hello!
[02:20:52] *** Quits: dre (~dre@2001:8003:c932:c301:147f:456a:d163:a87f) (Ping timeout: 250 seconds)
[02:33:04] *** Joins: dre (~dre@2001:8003:c932:c301:1811:4143:ef26:85c6)
[02:42:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[02:42:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:44:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Read error: Connection reset by peer)
[02:45:34] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 256 seconds)
[02:59:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[03:12:57] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:40:29] *** Quits: dra (~dra@2a04:4540:6407:f400:5dfd:8f0:b5bd:1cf3) (Quit: Leaving)
[03:46:32] *** Quits: dre (~dre@2001:8003:c932:c301:1811:4143:ef26:85c6) (Quit: Leaving)
[03:52:25] *** Quits: aeth (~aeth@user/aeth) (Quit: Reconnecting)
[03:52:27] <hayley> "What are the measurements for sizes of this shirt?" "We have small, medium and large." Well.
[03:52:35] *** Joins: aeth (~aeth@user/aeth)
[04:34:45] * hayley also does not know how much it costs to ship a shirt from the US to Australia
[04:35:45] <hayley> If it's the same as sending from Australia to US, then it's not so bad (if I can wait most of a month, which I probably can). But I can't tell what people in the US ship with, and how that pricing works.
[04:36:38] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 256 seconds)
[04:54:09] <selwyn> is it a nice shirt
[04:57:09] <hayley> It's the Coffee Compiler Club shirt.
[05:15:19] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[05:15:54] <vms14> gilberth: how would represent you an image that has to change a lot, ex sprites animations
[05:16:28] <vms14> would you just have an array of different frames and overpose them?
[05:16:48] <vms14> or would you go for something that allows you to edit the current image
[05:17:22] <vms14> more like svg, in the sense that would be instructions instead of an image
[05:17:32] <vms14> s/image/data/
[05:19:14] <vms14> I think it's better to have something able to draw the pixels directly instead of copy from a sample
[05:19:44] <vms14> but, could also be a piece set of this sample and could use that for generation
[05:21:14] <moon-child> vms14: what exactly is this for?
[05:21:52] <moon-child> You said 'sprites animations'; is it for a video game?  If so, separate buffer per animation state is great; or do some kind of skeletal rigging system if your representation permits it
[05:22:07] <moon-child> if it's something more like video, then--there are video codecs
[05:22:38] <vms14> moon-child: yes a game, but for some reason I want to be able to generate sounds/music and make the character dance
[05:22:57] <vms14> and yes, the usual way is just have an array in memory and go copy every step
[05:23:09] <vms14> but I wonder if it's really how we should do it
[05:23:31] <vms14> an easy improvement seems to generate using those frames even more divided
[05:24:02] <vms14> but if the language has a "native" understanding of the sprite, more than "it's an array of stuff"
[05:24:44] <vms14>  I think it could be better to generate the sprite on the fly than to copy
[05:24:58] <vms14> as long as you only change what is needed, but that seems very hard stuff
[05:25:11] <vms14> and the reason people just have a frame set
[05:26:20] <vms14> I suppose the best way is to have a skeleton
[05:27:10] <vms14> how can I represent a skeleton
[05:27:14] <vms14> a tree? xd
[05:27:26] <vms14> well a tree of segments
[05:28:58] <vms14> a segment should be like an object
[05:29:20] <vms14> and every segment should have different behaviour as it's a different part of the body
[05:33:21] <moon-child> sorry, making dinner.  Anyway: I think rigging systems are usually flatter: say, a list of joints
[05:33:50] <moon-child> behaviour of body parts is more likely to be encoded statically, by the animator, unless you wanna go really dynamic and fancy
[05:33:53] * hayley also had to check how to format an address for post, and forgot to mention the shirt size. Oops.
[05:34:50] <vms14> moon-child: having behavior in segments could allow a user to create a new character by creating those kind of segments
[05:35:01] <moon-child> 'unreachable() is especially empowering because it adds user-defined UB instead of leaving UB solely in the hands of the committee'
[05:35:05] <moon-child> holy shit holy shit
[05:35:29] <vms14> also would allow them to define the movement
[05:35:32] <hayley> And 1, 2, 3, 4
[05:35:33] <hayley> https://www.youtube.com/watch?v=tbHix56qfG8
[05:35:34] -ixelp- The Aircrash Bureau - YouTube
[05:37:18] <hayley> "My point is – it would not have happened in a statically typed language. No compiler in the world would just let you sum a string with an integer, or would at least warn you that you are about to do something stupid."
[05:37:21] <hayley> Java: am I a joke to you?
[05:37:32] <vms14> but this opens the door of 3d
[05:37:45] <vms14> hayley: I think a bad one
[05:38:17] <vms14> I don't want to open the 3d door
[05:38:50] <vms14> the game would never finished if I get on 3d stuff
[05:39:04] <vms14> and people say "it's easy" but I don't trust them
[05:39:35] <vms14> it's just another axe of complexity
[05:39:41] <hayley> .oO( https://itnext.io/running-untrusted-code-844ce4ad499a should be responded to in a Steve Balmer "Developers!"-esque thing with Bracha shouting "CAPABILITIES! CAPABILITIES!"
[05:39:41] <hayley> )
[05:40:05] <vms14> hayley: wth means .oO(.*)
[05:40:12] <hayley> Thinking bubble.
[05:40:15] <vms14> oh
[05:40:37] <vms14> .oO(oh)
[05:41:00] <vms14> .**(AAAHHH)
[05:41:08] <vms14> how to make the shouting ones?
[05:41:37] <vms14> .**{}
[05:41:59] <hayley> Just use the caps-lock key.
[05:43:06] <moon-child> vms14: think of it this way.  In 2d, you generally have a fixed camera; that means you have ot get it _exactly right_.  Whereas in 3d, you have the easy out of an FPS-style camera (and player-adjustable fov, to boot!), and then who cares
[05:43:15] <moon-child> (but also see, e.g., mario galaxy)
[05:43:49] <moon-child> as a player, I _prefer_ 2-d, on the whole and for the most part, but I don't think it's unequivocally easier.  Though obviously the addition of a spatial dimension means asset creatino times go up
[05:43:56] <moon-child> hayley: I don't think I've once used the caps lock key
[05:44:05] <vms14> moon-child: if I put 3d then I'll make rivers, sea, you could end going down to the sea, etc
[05:44:06] <moon-child> WHEN I NEED TO SHOUT< I DO IT THE OLD-FASHIONED WAY
[05:44:36] <vms14> :O
[05:44:52] <vms14> it's like you're writing lisp atoms
[05:45:10] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[05:45:25] <vms14> in an old lisp book
[05:45:49] <vms14> btw thanks for the skeleton recommendation
[05:45:56] <vms14> weren't you a ocaml fan?
[05:46:00] <hayley> Maybe I should ask ol' Gilad if he'd chant "CAPABILITIES CAPABILITIES CAPABILITIES" in his next presentation. Probably not.
[05:46:13] <vms14> and you liked gamedev too I think
[05:46:28] <vms14> well you did something not?
[05:47:12] <hayley> Whom?
[05:47:46] <vms14> moon-child: 
[05:48:06] <vms14> hayley: I know you are a Common Lisp and Python hacker
[05:48:18] <hayley> I've heard moon-child is into rendering stuff, but idk about OCaml.
[05:49:51] <|3b|> if you are making a game, first question should probably be "what kind of art can you make a lot of", and start code decisions from there  :)
[05:50:15] <sm2n> yeah I use python *opens sbcl*
[05:50:28] <vms14> |3b|: pixel art
[05:50:40] <vms14> that's also why I was thinking a skeleton is suitable
[05:50:51] <sm2n> moon-child: Where is the unreachable() thing from?
[05:51:04] <|3b|> are you the type to care about rotated pixel art looking like rotated pixel art?
[05:51:10] <moon-child> vms14: I don't really know anything about ocaml.  I took a brief interest in video games at one point, but am no longer that interested
[05:51:27] <vms14> |3b|: I usually care about nothing :D
[05:51:31] <moon-child> vms14: as |3b| says, skeletal rigging is not particularly suitable for pixel art.  At best, you can compose m arm states x n leg states, but
[05:51:48] <moon-child> sm2n: https://twitter.com/johnregehr/status/1495168906784231427
[05:52:04] * |3b| wasn't saying it is unsuitable, just that it has aesthetic vs coding time tradeoffs
[05:52:14] <vms14> moon-child: then maybe I confuse you
[05:52:27] <|3b|> if you don't mind the style of art you get, then it is a good way to go
[05:52:28] <vms14> but someone here recommended me ocaml
[05:52:39] <moon-child> |3b|: there's one part in celeste where they antialias the pixel art, and it is a major turnoff
[05:55:00] <|3b|> moon-child: yeah, having an inconsistent style tends to be worst of all :)
[05:55:00] <sm2n> lmao
[05:55:52] <|3b|> like low-res textures in 3d is fine, but mix one high-res in and suddenly everything looks horrible. or if all high res, one low-res will stand out
[05:56:00] <moon-child> eh.  Isn't pixelart inherently inconsistent with non-point sampling?
[05:57:23] <|3b|> "pixel art" by itself isn't really enough context to have inconsistency
[05:57:34] <moon-child> sure
[05:58:06] <|3b|> so just make sure when you add context, you try to keep it consistent.
[05:59:06] <|3b|> don't make most of the game block with a few random bits interpolated. don't smoothly rotate one sprite and make everything else rotate at fixed angles
[05:59:32] <|3b|> (or don't mix smooth rotation of the pixel grid, with smooth rotation behind a fixed pixel grid)
[06:04:10] <vms14> |3b|: why a skeleton necessarily involves pixel rotation?
[06:04:28] *** Joins: eugercek (~user@user/eugercek)
[06:04:30] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[06:04:36] <vms14> I mean they have to move, but not rotate
[06:05:18] <vms14> you mean moving pixels would have the same effects as rotate?
[06:05:19] <moon-child> well, you could move the whole skeleton from one point on the screen to another
[06:05:22] <moon-child> that's not very interesting
[06:05:29] *** Joins: Catie (~user@user/catie)
[06:05:43] <|3b|> most skeletons are made mostly of rotation joints :)
[06:05:48] <moon-child> otherwise, a skeleton is rigid, except for its joints, which are points at which you can rotate
[06:05:59] <vms14> no, the skeleton is a list of segments, but the representation of every segment is a bunch of pixels
[06:06:33] <vms14> you could somehow manage them
[06:06:37] <|3b|> so if you have a set of pixels that represents "upper arm", when the armo moves, that set of pixels rotates around the shoulder joint
[06:07:37] <vms14> rotates?
[06:07:46] <vms14> not all pixels have to move
[06:08:33] <vms14> some of them move, but others can remain unaffected, the position of the ppixels is relative to the position of the segment part it represents
[06:08:56] <vms14> in addition to relative to the movement it performs
[06:09:30] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 272 seconds)
[06:09:38] * |3b| will try describing things differently and see if that makes what i'm trying to say more clear:
[06:09:47] <vms14> xd sorry
[06:10:26] * |3b| was trying to suggest i am failing to explain, rather than that you are failing to understand, no need for sorrys :)
[06:10:28] <vms14> oh I think I get what you mean
[06:10:47] <vms14> the skeleton segments is what rotates, so you just rotate the pixels with it
[06:11:39] <|3b|> ok, sounds like you got it so i don't need to try again :)
[06:12:03] <vms14> but, still does not necessarily to have to "rotate" the segments
[06:12:19] <vms14> I was thinking the movement of the segments would be a bit more complex than just rotate
[06:12:32] <vms14> that's why I was thinking in adding behavior on them
[06:12:36] <|3b|> well, think of a physical skeleton... bones don't stretch much, but joints rotate a lot :)
[06:12:52] <|3b|> cartoons add more stretching, but that's on top of rotation
[06:13:08] <moon-child> also note a single joint can have multiple axes of rotation.  Shoulder is a good example of this
[06:13:19] <vms14> the behavior could encode how the pixel representation moves
[06:13:28] <|3b|> usually only 1 axis in 2d :)
[06:13:33] <vms14> so we could have kinds of segments with specific behavior
[06:13:40] <moon-child> |3b|: right!
[06:13:58] <|3b|> at least 2d pixel-art style
[06:15:38] <vms14> the problem is you want to take those pixels as a whole block that's why you want to rotate them
[06:15:40] <|3b|> vms14: usually in computer graphics, a "skeleton" is just a tree of transformation matrices, since that can do rotations, stretching, translations, and maps well to hardware
[06:15:49] <vms14> so there you loose definition I suppose
[06:16:03] * moon-child ponders miegakure-style puzzler with 4-d joints
[06:18:50] <|3b|> and similarly, the things drawn using the skeleton is either a rigid object at each node of the tree (chunk of 3d geometry, or a blob of pixels in 2d), or something that can blend influence of multiple levels of the tree into one object
[06:19:26] <vms14> I tend to overcomplicate things
[06:19:36] <|3b|> in 3d, the latter is called "skinned" geometry, where 1 mesh is drawn for entire skeleton and each vertex has weights for a few nodes of the skeleton
[06:19:48] <vms14> in my mind the model ended having hands with state, arms with state, etc
[06:19:59] <vms14> well objects
[06:20:21] <vms14> state and behavior
[06:20:25] <|3b|> in 2d, i think you can do something similar with vector art, not sure i've heard of anything like that for pixel art
[06:20:44] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:23:50] <|3b|> it is common to try to keep "drawing" state, like what gets drawn at each node, and the current state of the matrix, is kept separate from "controller" state, which is what decides what the values of the matrices should be
[06:25:03] <|3b|> for one thing, they might have different update rates, like if your physics always runs at 30Hz, but you interpolate the drawing state at monitor refresh
[06:26:34] <|3b|> but also because sometimes you want to play back a predefined animation, sometimes you want to do IK to make something follow player input, sometimes you need some complicated blend of those, etc
[06:26:35] <vms14> I was thinking on having that "drawing state" inside the segments
[06:27:05] <vms14> basically a body could be a set of objects with data and methods
[06:28:12] <vms14> and idk really but I think it's common to encode the representation of something inside the object is being represented
[06:28:15] <|3b|> unless you are running on particularly weak hardware, or want to have huge numbers of things active at once, it probably doesn't matter too much :)
[06:28:43] <vms14> so the skkeleton would be represented by itself
[06:29:03] <|3b|> and the animation should be represented by the animation :)
[06:29:11] <|3b|> and the behavior by the behavior
[06:29:24] <vms14> sounds logic
[06:30:22] <|3b|> and arguably the visual representation of the skeleton and the gameplay representation might be separate things
[06:30:46] <moon-child> counterexample: pixel-perfect collision detection
[06:30:48] <moon-child> but
[06:37:43] <dave0> that's oldschool !
[06:38:14] <dave0> i remember pixel-perfect collision games are really hard
[06:38:31] <dave0> too hard for when i was a kid
[06:38:45] <dave0> but then super mario bros uses hitboxes
[06:39:14] <|3b|> dave0: well, if you need pixel-level collisions, that suggests players will frequently need to get close enough for that to matter :)
[06:40:46] <moon-child> dave0: yeah, nice to leave some leeway.  And permit tricks like different hit/hurtbox size
[06:42:18] <dave0> https://github.com/fabiensanglard/xrick
[06:42:19] -ixelp- GitHub - fabiensanglard/xrick: Xrick is an open source implementation of the legendary game "Rick Dangerous".
[08:05:38] *** Joins: semz_ (~semz@user/semz)
[08:08:37] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[08:23:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:37:35] <vms14> I don't like to write parsers
[08:38:12] <vms14> states and stuff to maintain while reading chars
[08:38:43] <vms14> my parsers will always be buggy
[08:39:20] <kakuhen> is there such a thing as a bug-free parser
[08:41:29] * hayley looks for a job
[08:41:41] <hayley> "To be successful in this role, you will need: - Extensive Hardware Knowledge (Theoretical and Practical – builds and customizes PC) and Software IT Product Knowledge"
[08:41:50] <hayley> Let me tell you about cache coherency...
[08:42:49] <hayley> kakuhen: A recogniser for the empty language can't be so hard.
[08:43:02] <moon-child> yo check out my bug-free html5 parser
[08:43:05] <moon-child> html5 ::= .*
[08:43:19] * moon-child will never tire of that joke, until or unless they actually fix html5 ... lol
[08:43:38] <hayley> https://twitter.com/wcrichton/status/1495163619885010944 TIL they had Smalltalk hardware in 1972
[08:43:46] <hayley> (Ditto for Python in 1991, apparently.)
[08:44:16] <vms14> actually it's my faullt for not making the parser like the lisp one
[08:44:24] <vms14> which is kind of hookable and hackable
[08:44:29] <White_Flame> yeah, I basically wrote 1 parser, and hten I use it
[08:44:44] <White_Flame> certainly extending the lisp notion of breaking punctuation to strings instead of chars
[08:44:50] <moon-child> so is cl a turing language or a church language?
[08:45:19] <moon-child> i bet you'd have an easier time implementing pointers on a turing machine than a lambda calculator, buut certain influences are hard to deny
[08:46:13] <vms14> do you guys listen to some music when there is noise around and want to focus?
[08:46:26] <hayley> https://plover.com/~mjd/misc/hbaker-archive/ForthStack.html describes a mathematical metaphor (functional), von-Neumann machine (procedural), and a mechanical metaphor (object-oriented).
[08:46:27] -ixelp- ACM Sigarch Comp. Arch. News 22, 1 (Mar 1994), 34-43.
[08:46:30] <vms14> idk if there is music that can actually help at focus
[08:47:14] <moon-child> 'look forward to Fortran-0X, which we expect will utilize 2-D input notation'  never happened :/
[08:49:32] <White_Flame> vms14: I use earplugs
[08:49:43] <White_Flame> or get away from the noise
[08:50:03] <White_Flame> also every productivity test has shown less focus when listening to music with headphones
[08:50:29] <White_Flame> many people like it and defend it, but it doesn't stand up to actual testing
[08:51:41] <moon-child> bah.  I listen to music because it's fun, not for any reasons of productivity or focus
[08:52:55] <White_Flame> when I listen to music, I do that and nothing else
[08:53:09] <vms14> White_Flame: yes, it distracts you
[08:53:29] <vms14> but some music is less distracting than external noise
[08:53:56] <vms14> I'm trying to listen to stuff like https://www.youtube.com/watch?v=kGhHPX_TaI0
[08:53:56] -ixelp- ADHD Music | Focus Music for Better Concentration, Study Music for ADD - YouTube
[08:54:18] <vms14> don't think it empowers anything, but at least I can focus better than with the noise
[08:54:42] <vms14> but I cannot sttay hearing this shit too much
[08:55:37] <vms14> moon-child: actually when thinking is better to listen nothing but your own thoughts
[08:55:51] <vms14> music will always distract
[08:56:19] * hayley keeps looking through jobs
[08:56:39] <hayley> "Marketing / Social Media Personnel (Part time)" "Take full ownership of all social channels, _develop new strategy_ and execute to support the digital and media team to increase brand exposure ..."
[08:56:52] <vms14> but what I note, people say classical music helps at focus, I somehow think it powers up my creativity, but does not help at focus, my imagination goes 100% and cannot stop imagine stupid stuff
[08:57:01] <hayley> Allow me to introduce you to s h i t p o s t i n g
[08:57:15] <White_Flame> hayley: lol, sounds like they want somebody to wade into a dumpster fire someone else created
[08:57:18] <vms14> hayley: look real jobs
[08:57:26] <moon-child> you already have me to do your pr and marketing, now you are subletting?
[08:57:35] <hayley> vms14: I am trying very hard not to work at a supermarket.
[08:58:01] <vms14> then learn php
[08:58:02] <White_Flame> vms14: are you a musician yourself?  it's really difficult to have background music going if you are
[08:58:18] <vms14> White_Flame: haha no, I guess
[08:58:18] <hayley> I am also trying very hard to not write PHP, now that you mention it.
[08:58:33] <vms14> just wait until I play with sdl and make some kind of buggy piano
[08:58:35] <moon-child> 1. lisp->php compiler
[08:58:37] <moon-child> 2. php job
[08:58:39] <moon-child> 3. ???
[08:58:41] <moon-child> 4. profit
[08:58:43] * hayley bonks moon-child
[08:58:57] <vms14> but I have very good imagination/creativity
[08:58:57] <hayley> Alternately,
[08:59:00] * hayley sells moon-child by the pound
[08:59:09] <moon-child> hahaha
[08:59:17] <vms14> it's my best "feature" XD
[08:59:23] <White_Flame> hayley: then open up your own supermarket!  find a niche, like selling to brain damaged people, maybe call it "Vegetables for Vegetables" :-D
[08:59:44] <hayley> The supermarket that only puts on https://www.youtube.com/watch?v=hZw23sWlyG0 on the speakers
[08:59:44] -ixelp- The Clash - Lost in the Supermarket (Official Audio) - YouTube
[09:01:50] <hayley> "Flexible part-time (0.6FTE) working arrangement, on-site parking, centrally located, work in a fun, flexible workplace with a range of technologies." But I don't want to have fun. )))):
[09:02:21] <vms14> don't worry, it's a lie :D
[09:02:26] <hayley> And this place is associated with another university, which is too ironic for me.
[09:02:36] <hayley> Forgive me, but I am going on LinkedIn
[09:02:46] <vms14> go
[09:02:54] <vms14> luck with the fking recruiters
[09:03:29] <vms14> let's see how you explain someone you're able to do the job when this someone knows nothing about
[09:03:35] <hayley> Ah, wait, that is not where you get hired, that is Facebook for recruiters.
[09:03:45] <vms14> yes
[09:03:54] <vms14> actually it's facebook for recruiters
[09:04:26] <vms14> and you go there posting devshit to see if the recruiters notice
[09:06:01] <vms14> I imagine the recruiter thinking "oh he talks like he knows the stuff"
[09:06:27] <vms14> "and he mentioned all the tags yet"
[09:07:09] <vms14> now I just need to see the perfume he uses and everything will be set
[09:08:04] <vms14> you know next time in an interview just say "java,php,jquery,html5,css3,spring..."
[09:08:36] <vms14> as long as you say all the tags they're searching for, you've done the hardest part
[09:09:02] <vms14> then show random websites and claim they're yours
[09:09:29] <vms14> why do you struggle to get a job? so easy
[09:10:09] <vms14> well actually is easy as long as you accept to work with java or php
[09:10:34] * hayley looks for more jobs
[09:10:52] <vms14> and as I see you studing stuff about the java gc, maybe you can even get no fun
[09:10:57] <vms14> as you don't want fun
[09:11:01] <hayley> "IT Field Engineer" "What you'll need: [...] Your usual tool kit, troubleshooting equipment and parts inventory used in your own business." Very funny.
[09:11:14] <hayley> I also don't have a car.
[09:12:25] <vms14> hayley: didn't think about a startup?
[09:12:42] <hayley> I have thought about it, but I'm nowhere near ready to market.
[09:12:48] <vms14> actually the job market wants you to obey the rules
[09:12:58] <vms14> if you refuse, create a startup
[09:13:18] <hayley> https://twitter.com/kieran_eth/status/1495200364047437825 lol
[09:13:24] <hayley> "Hacker exploits @opensea contracts while @opensea CTO is on @EthereumDenver stage GG"
[09:13:28] <vms14> hayley: in a job interview the recruiter told me they expect you to go freelance and make a startup
[09:13:43] <vms14> and I was like wtf I wanted to do it at the inverse way
[09:14:03] <vms14> first get a job, get experience about the market and be a better programmer
[09:14:08] <vms14> then make a startup 
[09:14:57] <hayley> "Decommission old devices, which includes data wiping and coordination for any disposal requests" Yes, I know how to use a hammer.
[09:15:10] <vms14> I know a guy who takes 200 euros every month just because he put adsense on his blog
[09:15:22] <vms14> and is a blog almost nobody sees
[09:15:39] <hayley> Can't find that company on a map though.
[09:15:43] <vms14> but he has good seo and I saw how one of his cmake posts is the first result in spain
[09:15:46] <hayley> vms14: Tried it, I made like 2 cents.
[09:16:09] <vms14> hayley: I wanted to do something similar
[09:16:23] <vms14> but instead of blogging, making a blogging platform
[09:16:44] <hayley> "Laptop should have following program/software installed: Putty" But ssh is standard even on Windows now.
[09:17:07] <vms14> users do the job for you and you can somehow incite them with minimal payments for every nth visits 
[09:17:21] <hayley> I have everything but a UART cable, and any proper knowledge of networking.
[09:17:48] <hayley> "The right person for this job is: - highly organised - first class communication skills - energetic - professional"
[09:17:58] <vms14> it's you hayley
[09:18:15] <hayley> Let's see, I'm incredibly disorganised, I can barely talk unplanned, very lethargic, and I'm making fun of this listing on #lispcafe right now.
[09:18:29] <vms14> xD
[09:18:39] <vms14> what do you think your competence is doing
[09:18:49] <vms14> they're simple and mortal humans
[09:18:58] <vms14> and some of them use java
[09:19:30] <vms14> and get used to see how job offers demand very high stuff
[09:19:44] <vms14> recruiters will tell you to applu anyways as they do it on purpose
[09:19:53] <hayley> OTOH, I am apparently looking at a listing for another recruitment site. Hm.
[09:20:08] <hayley> So I can either apply to the recruitment site, or apply using the site to other places. Funny that.
[09:20:12] <vms14> .*#(I hate them)
[09:21:15] <vms14> work in your cv
[09:21:21] <vms14> make a portfolio
[09:21:29] <vms14> personal website? it's important
[09:21:50] <vms14> welcome to 2022 :D
[09:22:17] <vms14> you have to fucking sell yourself
[09:22:27] <vms14> and you have to do it exactly how they want it
[09:22:33] <vms14> and be original at the same time
[09:22:57] <vms14> so I hopee you are good at marketing, your first product is you
[09:23:23] <hayley> Hm, I have my resume in LaTeX, so I may as well say "Some \LaTeX knowledge"
[09:23:30] <vms14> actually it's not the most prepared who gets the job
[09:23:57] <vms14> hayley: I wanted to do it just for putting "written using latex" xD
[09:24:18] <vms14> the one who sells himslf better is the one who gets the job
[09:24:46] <vms14> lot of people much less prepared than even me has their job as a programmer
[09:24:52] * hayley uploaded an image: (33KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ZZeodWKjQnQTgPOkAykbTysE/Screenshot_2022-02-20_17-04-52.png >
[09:25:06] <vms14> because they did what the recruiters wanted and how they wanted
[09:25:13] <vms14> social skills? better you had
[09:25:48] <vms14> but in my case is because I refuse to use php java python or js
[09:26:12] <vms14> you have some studies so you can somehow overcome this
[09:26:46] <vms14> if you don't want to wait for a job just choose one of those 4 languages
[09:26:56] <vms14> actually I think you can get a job in python
[09:27:05] <vms14> django would help
[09:27:19] <vms14> also did you try hy?
[09:27:24] <vms14> it's lisp in python
[09:27:35] <vms14> has macros and some stuff and full python interop
[09:27:53] <hayley> Very funny.
[09:27:57] <vms14> https://docs.hylang.org/en/alpha/
[09:27:57] -ixelp- The Hy Manual — hy 1.0a4+1.gd56146b9 documentation
[09:27:57] <hayley> Does it have working LET yet?
[09:29:05] <vms14> does not seem
[09:29:17] <vms14> but you're a python hacker aren't you?
[09:29:24] <vms14> you can make your let
[09:29:33] <vms14> because you're not only a python hacker
[09:29:42] <vms14> but also a Common Lisp hacker
[09:29:50] <hayley> No, you can't, because scope in Python is busted.
[09:30:00] <vms14> you can make your cl in python
[09:30:11] <vms14> with the shitty lambdas of python xD
[09:30:19] <vms14> still only accept one expression?
[09:30:21] <vms14> ahahahah
[09:30:33] <vms14> it's like a chineese copy of a lambda
[09:31:17] <hayley> I'm sure that the Chinese sweatshop workers who produced the brand version are happy to hear you mocking imitations.
[09:31:48] <vms14> they know they make cheap copies of stuff and we buy them
[09:40:23] <hayley> Do we usually call it AMD64 or x86-64?
[09:40:44] <hayley> Google Trends says AMD64. Huh.
[09:42:31] <vms14> I prefer amd64
[09:42:53] <vms14> x86-64 takes much more time to write and even to understand
[09:43:09] <moon-child> linux people call it x86-64.  freebsd calls it amd64.  windows calls it x64
[09:43:17] <vms14> hayley: any idea of how to implement a return stack?
[09:43:31] <moon-child> intel and amd of course have their favoured monikers
[09:43:34] <vms14> why not just 64
[09:43:50] <vms14> or x
[09:44:05] <vms14> we should name everything x
[09:44:13] <moon-child> (well, intel also calls it em64t, buut)
[09:46:30] <hayley> "Designed various data-flow analyses for optimisation of simulating discrete finite automata" That's what I did, but now I think it is too jargon heavy, even for a resume somehow.
[09:46:56] <hayley> I better write Mealy machines, before I get in trouble with gilberth too.
[09:47:17] <moon-child> maybe get rid of 'various'
[09:47:20] <moon-child> and possibly also 'simulating'
[09:48:03] <hayley> I can see "various" being pointless, but "simulating" seems important to me. I am not simplifying the Mealy machine, I'm simplifying the code generated to act like a Mealy machine.
[09:48:24] <vms14> hayley: it's fine for a cv I think
[09:48:52] <vms14> it's like "want to read tags? hold my sbcl..."
[09:49:49] <hayley> Particularly, I remove bounds checks where possible, and I also have global value numbering. Though the latter does change machine output, sure.
[09:50:45] <vms14> hayley: would be nice if you manage to make a recruiter hint you to improve the cv once you'll have it "done"
[09:51:05] <vms14> a "good" recruiter
[09:51:34] <vms14> but not a recruiter from a job offer that actually interests you
[09:52:09] <vms14> in a job offer you are perfect
[09:52:24] <vms14> and they had the luck to find you
[09:54:27] * hayley tries to think of a summary of study at her old university
[09:54:43] <hayley> "Studied C++ and Java. Had an argument with a lecturer over what the sum of an empty set is."
[09:54:50] <vms14> xd
[09:55:10] <hayley> They believed it was undefined, rather than 0.
[09:56:00] <vms14> in java makes more sense to be undefined than 0
[09:56:16] <vms14> java does not know what fp is
[09:56:26] <vms14> well lately its trying
[09:56:29] <hayley> I can partition any set S into S and {}. And the sum of sums of partitions is the same as the sum of the union of the original set. So, \Sigma S + \Sigma {} = \Sigma S, thus \Sigma S is undefined. Congratulations!
[09:56:33] <vms14> and even has a repl :O
[09:57:49] <moon-child> hayley: your premise is 'the sum of sums of partitions is the same as the sum of the union of the original set', which is undefended.  It is a definitional issue; the argument is: such-and-such definition is more convenient and doesn't lead to any problems
[09:58:11] <vms14> but I meant in java sum an empty set seems more like an error than for example a base case
[09:58:11] <hayley> :[
[09:59:19] <vms14> why would you sum an empty set in java?
[09:59:24] <vms14> how dare you
[09:59:38] <hayley> Because we had to write a method to do it, recursively too, and we had to pick a base case.
[10:00:05] <vms14> oh so they decided to return undefined as base case?
[10:00:17] <hayley> They decided not to handle the case of an empty list.
[10:00:30] <hayley> (It was a list, not that the distinction really matters.)
[10:00:40] <vms14> hah told you, how dare you sum empty sets in java
[10:00:48] <vms14> we don't do that here
[10:01:01] <hayley> moon-child: I am pretty sure it follows from the definition of the sum of elements of a set.
[10:01:25] <moon-child> which definition?
[10:01:31] <vms14> but anyways still revolves around the fp
[10:01:35] <hayley> And, notably, that addition is associative (to hell with 'em floats).
[10:01:50] <vms14> you know it's reasonable to put 0 as base case because of induction and other stuff
[10:02:04] <vms14> they don't know this stuff neither care about
[10:02:14] <moon-child> (also: lists are not sets; e.g., the sum of list (2 1 2) is 5, while the sum of set {2 1 2} is 3; but that is not particularly relevant)
[10:02:43] <hayley> \sum {x₁, ..., xₙ} = x₁ + ... + xₙ
[10:02:56] <hayley> Yes, I meant to write "sum of a list" initially.
[10:03:14] <moon-child> ok, so \sum {} =
[10:03:53] <vms14> do you want to know what's my favourite chineese song?
[10:04:06] <moon-child> that doesn't define the zero-case
[10:04:08] <vms14> https://www.youtube.com/watch?v=CaYQCOevgwY
[10:04:08] -ixelp- Horse Race - 赛马 - (Sai Ma) - Er hu (Chinese Violin) - YouTube
[10:04:25] <moon-child> (and anyway it's not really a definition; ellipses are hand-wavy.  I would prefer something like: \sum {x} U y = x + \sum y \ {x}; \sum {} = 0.  Which _does_ explicate the empty case)
[10:04:35] <hayley> Sure.
[10:04:38] <Alfr> hayley, you don't necessarily have an identity for +.
[10:04:56] * hayley is supposed to be writing a resume, right?
[10:05:20] <vms14> you were supposed to find a job in python
[10:05:21] <moon-child> Alfr: what +?  Again: this is purely an issue of what you choose to define and how
[10:05:28] <vms14> do you know django?
[10:05:38] <hayley> Nope.
[10:06:03] <vms14> If you think in work in python I strongly recommend it
[10:06:16] <vms14> it's present in a lot of python job offers
[10:06:26] <kakuhen> >C23 will also have Binary Integer Literals
[10:06:26] <kakuhen> Welcome to the 80s, C programmers...Sincerely, cl-mafia.
[10:06:38] <kakuhen> wow element sure messed the formatting
[10:06:39] <vms14> and if you want a job, in your case knowing python I'd go for that
[10:06:55] <vms14> so I'd just start making web applications in django
[10:06:59] <vms14> but meh
[10:07:00] <Alfr> moon-child, sure, just give back 42, if you find nothing to sum. Why not?
[10:07:04] <vms14> depends on the job
[10:07:18] <vms14> django likely means also front end stuff
[10:07:32] <moon-child> Alfr: well, that is a valid definition of summation.  It is annoying to work with (which is why we don't use it), but there is nothing _wrong_ with it
[10:07:32] <vms14> aka fullstack :D
[10:07:46] <vms14> do the job of 2 by the price of one :D
[10:08:01] <Alfr> I shouldn't have chosen a number.
[10:08:05] <vms14> that's what fullstack means
[10:08:18] <kakuhen> django seems fun considering how much i enjoyed djula
[10:08:19] <vms14> and usually is the job of 3 
[10:08:34] <moon-child> Alfr: well, if you say sum of nothing is a cow, then I must ask you to define a cow; else your definition is incompelte :)
[10:10:44] <vms14> moon-child: cow is nil
[10:10:52] <Alfr> moon-child, something with purple spots and they excrete a murky liquid used to make chocolate.
[10:11:27] <vms14> actually if they had defined undefined as base case I would have taken for right specially in java context
[10:11:43] <moon-child> Alfr: what are 'purple', 'spots', 'excrete', 'murky', 'liquid', 'chocolate'?  I only know about sets
[10:11:46] <vms14> but, they defined it undefined by not defining it
[10:12:01] <vms14> so they're smarter 
[10:12:17] <vms14> not defined is nil
[10:12:25] <vms14> nil is acceptable base case
[10:12:43] <vms14> you were wrong hayley 
[10:12:46] <Alfr> moon-child, do you?
[10:12:53] * hayley hits vms14 with a stick
[10:12:56] <vms14> return to that university and apologize
[10:13:33] <hayley> For a list summation function which does what you would think integer summation does, not having a case for an empty list is weird.
[10:13:39] <moon-child> {{},{{}},{{},{{}}}}
[10:14:24] <vms14> moon-child: that's what people write me when I talk them about lisp
[10:14:43] <vms14> and the only thing they see in lisp
[10:15:14] <vms14> they only see nils
[10:15:51] <vms14> why they don't look at the words instead
[10:39:29] <hayley> Also, am I really supposed to make my resume look fancy?
[10:40:03] <kakuhen> here in the US we are told by "counselors" to not make a flashy resume, instead make something that the person can skim in 5 seconds and still get information out of
[10:40:17] <kakuhen> while also taking into account your resume first goes through some blackbox algorithm designed to filter out 99% of applicants
[10:40:28] <hayley> Yes, the AI doesn't care how it looks.
[10:40:45] <kakuhen> yeah but when a human finally takes a look, they'll want to be able to skim in 5 seconds and still get decent info out of it
[10:40:53] <sm2n> Definitely don't do the thing where you have a bar that goes from 1 to 5 for proficiency on stuff
[10:41:20] <hayley> I'll just measure in fractions of a beach.
[10:41:26] <kakuhen> my resume is pure black & white for instance, and it uses some generic helvetica font 
[10:41:35] <kakuhen> also tex'd, i stole the template from some 90s website lol
[10:41:43] <hayley> CL: probably like 1/3 tops, Java 3/2 since beach doesn't know much Java
[10:42:04] <kakuhen> what would -1 beach represent
[10:42:13] <hayley> Misinformation.
[10:42:23] <kakuhen> hmm i'm probably a -1/12 beach then
[10:42:42] <kakuhen> i did not intend to make the 1 + 2 + ... = -1/12 joke
[10:42:50] <hayley> e.g. this guy who missed my point that you can create a bad type system <https://www.reddit.com/r/programming/comments/swicdq/its_better_to_be_typesafe_than_sorry/hxo9by9/> and that is the issue at hand.
[10:42:51] -ixelp- It's better to be (type)safe than sorry : programming
[10:43:16] <hayley> "1" + 1 works in JS and Java (type-checking in the latter, too), but doesn't in Haskell or CL. These two partitions are not due to static/dynamic type system.
[10:43:43] <hayley> They are due to whoever specified + being too clever with coercions.
[10:43:48] <kakuhen> >my point is that you are looking at less frequent problems with a type system
[10:43:55] <kakuhen> this is what i jokingly call the "you're valid, but fuck you" response
[10:44:11] <sm2n> I use a variation of this: https://github.com/sb2nov/resume which is not the greatest LaTeX code, but
[10:44:12] -ixelp- GitHub - sb2nov/resume: Software developer resume in Latex
[10:44:16] <hayley> Actually...
[10:44:19] <sm2n> It really should use environments
[10:44:25] <sm2n> but I like the layout
[10:45:14] <kakuhen> anyway, something about C's type system has always felt odd to me because of how often I'd see code throwing void * to callback functions and casting them to pointers to random structs
[10:45:27] <kakuhen> almost feels like defeating the purpose of the type system
[10:45:27] <moon-child> yes, because it has no polymorphism
[10:45:35] <hayley> Blind faith in a static type system can really fuck you over. e.g. if I wrote var blabla = somethingReturningString() + 1; acceptInt(blabla); and I expected somethingReturningString to return a number instead, I'd be in some trouble.
[10:46:32] <hayley> The compiler will probably complain about acceptInt having invalid arguments. But the fix in my story is to not use somethingReturningString, I guess. You can't find out without more type declarations, or if you had a magical IDE that type annotates anything and everything.
[10:48:29] <kakuhen> speaking of types, in the past hour ive been writing a small typescript utility to replace transmission-rss
[10:48:41] <kakuhen> because i can not and do not want ot figure out how to work on a ruby codebase
[10:48:56] <kakuhen> and being able to npm install solution every single step for what i want is nice lol
[10:49:09] <hayley> "What's the problem with the type system then?" Type inference can move the site of the error away from what needs to be fixed.
[10:49:18] <kakuhen> basically, i was first thinking of a common lisp rss parser -> filter dates -> use transmission rpc to add torrents for me
[10:49:27] <kakuhen> but then i realized every lib i'd quickload is from fukamachi
[10:49:33] <kakuhen> and i have PTSD from his websockets library
[10:54:31] <hayley> "If you're a developer looking for a new role: send your resume to XXX with subject line "Direct" followed by the key programming technologies you use."
[10:55:09] <hayley> Time to write the most obtuse subject line ever.
[10:56:33] <hayley> "Direct: Common Lisp, compiler backends and optimisation, GNU/Linux, " and now I have lost steam. Hm.
[10:58:11] *** Joins: v3ga (~v3ga@cpe-98-25-21-91.sc.res.rr.com)
[11:05:57] <kakuhen> Direct: expert copy pasting
[11:14:32] <hayley> "Direct: Common Lisp, Java, optimising compilers, GNU/Linux, AMD64 and SIMD" There we go.
[11:15:13] <hayley> Now I have tried to find a job, I guess.
[11:17:01] <moon-child> hayley: I suggest viewing the emails you send to prospective employers as the bullets in an automatic firearm
[11:20:23] <hayley> Spray and pray?
[11:23:35] <moon-child> indeed
[11:23:48] * moon-child is still annoyed he never even got a response from the people doing cancer research
[11:27:57] <vms14> hayley: actually recruiters expect you to make 2 cv
[11:28:20] <vms14> a fancy one and a prepared for automated reading one
[11:28:36] <vms14> usually the fancy one is your website
[11:28:46] <vms14> written in django
[11:29:00] <vms14> using jquery xd
[11:29:47] <vms14> but the fancy one should be a pdf too
[11:30:24] <vms14> as if somehow you manage to pass their random algorithms they'll want to actually read the cv
[11:31:32] <vms14> I hate them
[11:32:09] <vms14> why all this fucking stuff just because they don't know about what they have to judge for
[11:34:30] *** Joins: treflip (~user@user/treflip)
[11:37:29] <mfiano> I am officially stumped
[11:38:30] <mfiano> https://gist.github.com/mfiano/d7486aa99e2daee828d2c6d9883f3a62
[11:38:30] -ixelp- color-convert.lisp · GitHub
[11:44:51] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Remote host closed the connection)
[11:58:03] <selwyn> vms14: really?
[12:00:25] *** semz_ is now known as semz
[12:00:31] <selwyn> baffled as to why anyone would want to read something automated
[12:01:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[12:07:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:10:17] <neominimum> mfiano: I can't help with that, but I wanted to say I'm impressed with your use of the multiline comment. I once attempted to throw one of those bad boys into my emacs buffer and found I couldn't even look at the thing sideways without it spontaneously multiplying and wreaking havok with the syntax highlighting. To make matters worse I mistakenly assumed I could just backspace the offender but instead emacs locked up and I had to restart the 
[12:10:17] <neominimum> daemon. It was pretty traumatic.
[12:10:50] <mfiano> ha I can imagine
[12:26:17] *** Joins: cosimone (~user@93-34-133-75.ip49.fastwebnet.it)
[12:43:12] *** Joins: shka (~herr@109.231.3.55)
[13:19:53] *** Joins: SR-71 (~user@user/SR-71)
[13:21:45] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:26:02] <shka> https://www.rferl.org/a/russian-troops-belarus-exercises-ukraine/31711282.html
[13:26:02] -ixelp- 'They Drink A Lot, Sell Their Fuel': Belarusians Give Low Marks To Russian Troops Deployed For Drills
[13:26:15] <shka> nice to see that Russian troops are still the same :-)
[14:09:44] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[14:11:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[14:13:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:26:33] *** Joins: treflip (~user@user/treflip)
[14:45:07] <shka> https://ew.com/movies/matrix-resurrections-scene-doing-sequel-without-wachowskis/
[14:45:08] -ixelp- Matrix 4 scene about doing sequel without Wachowskis has some truth | EW.com
[14:45:36] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[14:47:12] <hayley> https://www.youtube.com/watch?v=pA63bspHDpE
[14:47:13] -ixelp- Turn - YouTube
[15:39:11] *** Joins: random-nick (~random-ni@87.116.179.129)
[15:42:36] <gilberth> Bored.
[15:44:47] <gilberth> I am thinking. Who says that each symbol must have dedicated value and function cells? Wouldn't something like the olde approach to stick everything on a plist fare better when space is a premium?
[15:45:15] <moon-child> isn't that what they did, originally?
[15:45:32] <moon-child> (f y) was (funcall (get 'f 'function) y)
[15:45:58] <gilberth> Yes, this is what I meant by 'olde'. Lisp 1.5 was like that. But they used it also to tell SUBRs from FSUBRs apart.
[15:46:16] <moon-child> right.  /em skimming, and tired
[15:46:22] <moon-child> when is space at a premium?
[15:46:36] <moon-child> in such context I would rather not have a symbol-plist at all
[15:46:37] <gilberth> With an MCU.
[15:47:24] <gilberth> For speed I still could link. Which also is what early Lisp did.
[15:47:45] <moon-child> sure, but symbol-plist also takes up space, and semantically is not very interesting
[15:48:05] <gilberth> moon-child: It doesn't need to be a classical plist. Could be flags there, what is present and what not e.g.
[15:48:34] <gilberth> And don't want semantics different from CL.
[15:48:55] <moon-child> I see
[15:49:51] <gilberth> I am just thinking. E.g. functions outnumber special variables. When I could reduce the unbound case to essentially no extra word needed, that would be a win.
[15:50:49] <gilberth> But then Lisp 1.5 also had no string datatype, nor did MacLisp and symbols were used for strings.
[15:51:59] <gilberth> And when I link that is have direct pointers in my "compiled" code, SYMBOL-VALUE or SYMBOL-FUNCTION with an unknown argument doesn't need to be fast. You don't do that that often.
[15:53:03] <hayley> Return to first class global environments
[15:53:55] <gilberth> hayley: Right, have everything in an alist?
[15:54:18] <hayley> It's 2022, so linear probing hash tables.
[15:54:31] <gilberth> I always wonder why there are both plists and alists in Lisp.
[15:54:53] <hayley> But you still only materialise cells in the environment for function and variables bindings, rather than for all symbols.
[15:54:53] <gilberth> hayley: I won't need that.
[15:55:39] * hayley goes to compare a XMM full of metadata entries.
[15:55:47] <gilberth> Yes, the idea is that (setf fdefinition) creates the actual cells.
[15:56:30] <gilberth> That is both the "cell" set as well as the "cells" referred to. That is linking, what is given.
[15:56:41] <hayley> I put that on my resume too. Not only do I know CL and compilers, which no one hires for, I know some SIMD too.
[15:58:13] * gilberth is lucky that he does not need a job.
[15:58:30] <hayley> Reminds me that I do have to design a standard library. I don't have to mandate particular data structures, but general ideas would be nice.
[15:59:10] <gilberth> But then I won't write CVs either, even if. /me shrugs.
[15:59:27] <hayley> e.g. we have mutable vectors, immutable "vectors" which are actually hash array mapped tries, and immutable vectors which are slow to update. Now throw in maps, sets, and some other crap. idk
[15:59:59] *** Joins: eugercek (~user@user/eugercek)
[16:01:05] <dave0> a priest, a bishop, and a rabbi walk into a bar and the bartender says 'is this some kind of joke?'
[16:01:23] <hayley> I can't seem to figure out a nice way to get specialized arrays, since I don't even think I want a user-facing idea of a class. I mean, we can proxy objects, and do magic there. But I guess proxying immutable objects is unnecessary, since we can't affect them by definition.
[16:01:43] <gilberth> hayley: Any idea how flash with MCUs looks like these days. Can I flip a single bit from 1 to 0 (and not the other way around). Standard serial flash can do that. The MCUs I worked with could not with its internal flash.
[16:01:51] <hayley> (Rather, we have an idea of a class, but trying to pull the class of an object is considered poor taste.)
[16:01:59] <hayley> No idea.
[16:02:21] <moon-child> gilberth: well, you started a company.  You can get by on clout alone; the rest of us cannot
[16:02:22] <gilberth> hayley: So I have to read the data sheets?
[16:02:29] <hayley> Should find out, as I eventually have a startup to start up, and an oscilloscope to use.
[16:02:42] <hayley> You know MCUs better than I.
[16:02:52] <gilberth> moon-child: clout = ?
[16:03:00] <moon-child> ermm
[16:03:44] <dave0> authority
[16:04:04] <moon-child> yeah, that works
[16:04:18] <gilberth> dave0: Thanks. /me adds a new word to his vocabulary list.
[16:04:27] <dave0> i had to google it :-)
[16:04:46] <gilberth> lol. And I believed you were a native speaker.
[16:04:53] <hayley> "Social influence" too. S&A calls it "social capital", based on context.
[16:05:27] <hayley> Alternately, to clout is to hit with a hard object.
[16:05:33] <moon-child> I think 'influence' is more pertinent than 'capital'
[16:05:47] <gilberth> Ok. How could I have social capital or influence when I barely know anyone?
[16:05:49] <moon-child> as the latter implies it is like power: if you use it, you lose it
[16:05:59] <hayley> Sure.
[16:06:18] <gilberth> And I hide well.
[16:06:27] <hayley> The implication in the book was more "if you have it, you can do some pretty stupid shit".
[16:06:29] <moon-child> gilberth: you can simply say 'I started and ran a successful company', and people may take an interest
[16:06:48] <hayley> gilberth: If you published that paper, you might have some more.
[16:07:25] <gilberth> hayley: Yeah, right. You are truly persistent.
[16:08:25] <Gnuxie> LwL 
[16:08:34] <hayley> I try my best.
[16:09:03] <Gnuxie> Gilberth twitter account 
[16:09:20] <gilberth> Anyhow, I still wonder, if you could market Lisp for MCUs. Perhaps that's nice but nothing people want to use.
[16:09:30] <hayley> gilberth@applied-langua.ge
[16:10:00] <gilberth> hayley: Nope. I own lispcafe.org, forgot?
[16:10:26] * moon-child ponders getting transpo.se, to complement outerproduct.net
[16:10:34] <gilberth> Would make a nice company name even :-)
[16:10:40] <moon-child> transpose is much nicer than outer product.  But I disapprove of domain hacks
[16:11:07] <moon-child> gilberth: lisp cafe sounds like a name for abcl
[16:11:09] <Gnuxie> Ono
[16:11:51] <gilberth> moon-child: You mean like "java"? Or CoffeeScript?
[16:12:01] <moon-child> former, yeah
[16:12:17] <hayley> applied-language.computer
[16:12:36] <gilberth> computer is a TLD?
[16:12:42] <hayley> Yes.
[16:12:46] <moon-child> everything you can imagine is a tld
[16:12:53] <gilberth> What isn't a TLD?
[16:12:54] <hayley> interpretation.sucks
[16:13:56] <moon-child> what is wrong with interpretation?
[16:13:58] <gilberth> Any what should I twitter about?
[16:14:05] <moon-child> how should I make anything of your speech, without interpreting it?
[16:14:18] <moon-child> gilberth: your bowel movements
[16:14:42] <gilberth> Great!
[16:14:44] <hayley> Use it to annoy type weenies.
[16:15:09] <moon-child> why bother?
[16:15:13] <gilberth> I am not at war.
[16:15:39] <hayley> coffee.compiler.club
[16:16:02] <hayley> cliff.click <- It works.
[16:16:17] <gilberth> Frankly, I don't care what other hackers use. They can't stop me from using CL. And when I would be last CL in the universe, it wouldn't bother me.
[16:16:45] <gilberth> * CL hacker
[16:17:03] <hayley> You're going to write SICL?
[16:17:10] <gilberth> The very last key I will ever type will be ')'.
[16:17:39] <gilberth> hayley: I don't have an infinite amount of time at my hands.
[16:18:08] <hayley> unix.lol
[16:19:15] <hayley> oh-by-the-way-which-ones.pink
[16:23:13] <hayley> incremental-garbage-collection-with-mature-object.space
[16:23:14] <dave0> my last key will probably be "what does this button do?" ;-)
[16:23:17] <hayley> Does that count as a domain hack?
[16:24:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:24:58] <gilberth> dave0: lol. There was once a puzzle like that. Scientists find a hidden cave. On the wall is written "Get out!".
[16:25:33] <dave0> o_O
[16:26:04] <dave0> :-)
[16:26:06] <gilberth> Imagine the "!" not fully done, with the brush still sitting there. What happened? I forgot the answer.
[16:26:08] <hayley> https://www.artima.com/insidejvm/ed2/gc9.html Apparently the JVM once used MOS/the "Train".
[16:26:09] -ixelp- Why Garbage Collection?
[16:26:23] <hayley> Why not?
[16:30:46] *** Joins: notzmv (~zmv@user/notzmv)
[16:40:25] <gilberth> I like it that our garbage is collected on Mondays.
[16:40:49] <shka> hayley: write that down, WRITE THAT DOWN
[16:41:08] <shka> that is the key to the parallel GC
[17:08:26] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:21:22] <gilberth> About the plist approach of LISP. It isn't actually so bad. For "functions" there are two possible properties: EXPR, the function as an s-expression, and SUBR with the address of the primitive. I believe there also is FEXPR for what we would call special forms or macros. But might be a MacLISP thing.
[17:21:53] <gilberth> LISP doesn't use tagging to tell types apart, but essentially headers. Atoms are pairs with a CAR and CDR, too. The CAR being the [register address] -1 and the CDR being the plist. Hence when ADD1 is defined as (LAMBDA (X) (PLUS 1 X)), ADD1's plist is (EXPR (LAMBDA ...) PNAME (...)). When the system faces (ADD1 ..), it would peek at car[ADD1], see -1 as it is an atom, then follow cdr[ADD1] to get the plist.
[17:23:55] <gilberth> This plist again has its car be EXPR to tell that it is a lambda expression. So in number of pointers chased in comparision to having object headers to tell user defined lambda expressions from SUBRs or FEXPRs apart by a header, this isn't any worse. [I avoid the term closure, as LISP doesn't have closures, only FUNARGs, which work a bit different.]
[17:24:31] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[17:24:42] <gilberth> Having such a plist approach always appeared utterly inefficient to me. But it is in fact not.
[17:26:17] <gilberth> Symbol values would be the APVAL property. I would argue that having a symbol both as a variable and as a function is a rare case, so you should find the EXPR, SUBR, or FEXPR always at the very head of the plist, if you wish.
[17:26:50] <gilberth> And if present at all.
[17:29:33] <gilberth> [To be precise: There are additional bits besides the CAR and CDR in a pair. It's still not clear to me how many, but there could be a bit telling that when x has car[x] = <address -1> if it is a fixnum or a symbol. But the tag bit is not in the pointer.]
[17:29:59] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[17:31:56] <rotateq> hayley: Finally the truth about the most effective IDE out there: https://www.youtube.com/watch?v=X34ZmkeZDos
[17:31:56] -ixelp- Why Microsoft Word is the best IDE for programming - YouTube
[17:33:50] <rotateq> or doing it in Excel, one cell for every glyph
[17:42:35] * gilberth reads the IBM 7090 Reference Manual.
[17:44:46] <rotateq> Hey gilberth :) What are you up to with that?
[17:46:48] <rotateq> Ah maybe in conncetion to yourself self-built CPU?
[17:47:33] <gilberth> rotateq: I want to understand how LISP used to represent s-expressions. Otherwise: Just general interest in history.
[17:48:38] <rotateq> That's very cool.
[17:48:47] <gilberth> And my design is very, very loosely based on the EDVAC.
[17:50:29] <gilberth> Source code for LISP is available. I should at least learn the assembly language, so that I could read it.
[17:51:01] <rotateq> Oh yes, for me that would be impossible.
[17:51:43] <gilberth> Why? Assembly isn't that hard.
[17:52:08] <rotateq> Yes for you :)
[17:52:36] <rotateq> as many other nontrivial things ^^
[17:52:57] <gilberth> It's just that they use funny mnemonics you need to memorize. And yes, perhaps, assembly (machine code rather), was my second language after BASIC.
[17:54:23] <gilberth> The ideal starting point for Lisp :-)
[17:56:25] <rotateq> Yes indeed, as I see (sequential/imperative style) LISP not only look much nearer to assembly but also more naturally with that in contrast to other where all have their arguments with "machine closeness".
[17:58:15] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[17:59:23] <rotateq> It's as loosely as the "oh but it's turing complete" argument.
[18:05:02] <gilberth> Ok. Now I know why it is "decrement part". The "address part" is clear, it's the address part of an instruction. Like "add 42" adding the word at memory address 42 to the accumulator. They call those main memory words registers. So it's add register 42 to AC. But besides the accumulator AC, there are three index registers A, B, and C.
[18:07:31] <gilberth> Every instruction could then specify an index registers to be subtracted from the address given. Thus the "decrement registers". They write it funny and "add 142" would mean take index register A (the 1) decrement 42 by it and then add the word found at that effective address to AC. So if A=3, this instruction would add memory[137] to AC.
[18:09:05] <gilberth> There are three "tag bits" in an instruction. This is a bit field naming the A, B, and C registers. So "add 242" would use B and "add 442" would use C. However any number of bits could be lit, and "add 642" would use B and C. The effective address then is (- 42 (logior b c)). Nifty.
[18:10:35] <gilberth> When the decrement register alone is used, the lower half of an instruction would be the immediate which applies to that decrement register operation. That's our CDR. Got it.
[18:11:19] <gilberth> That's fun, lightens my mood.
[18:13:46] <ck_> has anyone here put macos on a non-mac?
[18:16:09] <gilberth> Ouch! An instruction could be indirect. So far so good. But: If the word read has tag bits lit too, index registers could be decremented too. Hence you could find pointers saying (42 - A) in memory. Puh!
[18:16:51] <gilberth> ck_: I contemplated once to do that. Are you planing to get a Hackintosh?
[18:22:40] <ck_> gilberth: I'm thinking about it, yeah
[18:24:01] <gilberth> Great! Tell me if it works. :) I am not so sure, if it is worth the hassle, you always keep reading that keeping it running is a challange. But I realized, that I never update a system anyway, so I ought to be safe, once I find a working configuration.
[18:25:02] <ck_> I'll try and remember if I do
[18:26:12] <gilberth> What I find most annoying about macs is their poor GPU performance. And I am too cheap for a macpro.
[18:27:01] <ck_> that's one of my reasons too, yes
[18:27:50] <gilberth> Do you plan to get new hardware according to the shopping lists you find?
[18:29:24] <ck_> I didn't plan that far yet, I'm not even sure about the whole thing at all at this point
[18:30:12] <ck_> this is a form factor I like -- https://www.quietpc.com/sys-db4a -- the 'fanless' part is most interesting. if there's mac-compatible hardware on their list, that could be an option
[18:30:13] -ixelp- DB4a Silent Cube
[18:30:24] <gilberth> Well, welcome to the club then. I never got past the stage .oO(Hmm, let's see and read a bit.) It sounds not all to easy to get it working.
[18:30:51] <ck_> but honestly I'll probably keep using my 2014 device for another few years. but it is getting long in the tooth
[18:34:12] <gilberth> Well, I don't know. I would need decent graphics for games only. I could as well just get a vanilla Windows gaming PC and threat it as a console. But then, I can't spend any money for myself --- mental blockade.
[18:35:57] <gilberth> "on myself" rather? .oO(idk. I'll never learn English.)
[18:36:03] <rotateq> or you wait a bit and buy a steam deck
[18:36:28] <gilberth> Would it run Windows games?
[18:36:29] <rotateq> haha but the German language is often weirder ^^
[18:36:40] <rotateq> ehm yes via this proton
[18:37:03] <rotateq> the situation got much better over the years as i heard (was ever more the playstation player)
[18:37:04] <shka> (proton is fork of WINE)
[18:37:08] <rotateq> shka: 
[18:37:10] <rotateq> yes
[18:37:22] <gilberth> The problem with German is, that the German and English are not different enough. Way too many false friends lurking there.
[18:37:46] <shka> also, old windows game often actually run better on wine then on new windows
[18:37:48] <rotateq> sometimes deepl helps me a lot translating
[18:37:57] <rotateq> shka: :D
[18:37:58] <shka> it is funny, but true
[18:38:26] <gilberth> shka: I am friend of Parallels. I could chose between Windows XP, Windows 7, and Windows 10.
[18:38:41] <shka> cool 
[18:39:00] <rotateq> gilberth: is this new S.T.A.L.K.E.R. game out right now that you wanted to play? (afair)
[18:39:07] <gilberth> I am not patient enough anymore to fiddle with Wine. Though most of the time it works great.
[18:40:21] <gilberth> rotateq: This new version is as far as I know not out yet. But I will probably need a real GPU for it anyway.
[18:41:44] <rotateq> this week the new horizon game came out, but surely i can just watch it (first because i wouldn't have 70 bugs right now and second i just have a normal PS4, i think one wants to play minimum on the pro)
[18:41:52] <gilberth> On that note: Thomb Raider is notorious for needed that specific Windows version of the time it came out. And, yes, I confess, I own a few Tomb Raider titles.
[18:42:30] <shka> and diablo 2 would not run on PCs with more then 64 mb memory graphic cards
[18:42:44] <rotateq> so in around 2-3 years when some permanent work place worked out i could afford a PS5 and a newer screen with higher resolution
[18:42:51] <shka> such was the PC during 90s, early 2000s
[18:42:54] <rotateq> shka: lel
[18:43:00] <gilberth> No problem, I could tell Parallels to emulate just 64MB on the video board.
[18:43:04] <shka> rotateq: it is true, look it up
[18:43:09] <shka> they had to patch it up
[18:43:14] <rotateq> shka: i was thinking about buying the remake
[18:43:25] <rotateq> gilberth: what's parallels?
[18:43:35] <rotateq> shka: i definitely believe you! :)
[18:43:50] <gilberth> rotateq: It's a PC emulator for the mac. Commercial software.
[18:44:06] <rotateq> ah nice, good old proprietary stuff ^^
[18:44:47] <rotateq> the people in the parallel course who do system administration will also have fun some weeks in the next 2 years with Cisco
[18:46:58] <gilberth> But it annoys me that I am restricted to titles circa 10 years old, because the HW is so poor.
[18:47:28] <rotateq> shka: would have been funny if the game give then a warning with "no, your hardware is from the future!"
[18:48:18] <gilberth> There is a reason why there isn't a Windows 9.
[18:48:26] <ck_> :)
[18:48:43] <ck_> but version[0] == '9' saved at least one cycle
[18:48:48] <ck_> certainly worth it
[18:48:57] <gilberth> And long time ago, CPUs got too fast for Borlands delay() library routine.
[18:49:05] <rotateq> :D
[18:49:45] <gilberth> Yeah it would first measure how many times a loop would do in a certain time. With faster CPUs that could overflow.
[18:50:09] <rotateq> nice
[18:50:42] <shka> gonna need that turbo button
[18:51:51] <gilberth> That's the point; delay() took an argument in milliseconds, and it was calibrated at program start.
[18:53:03] <gilberth> I can't remember that my Turbo button ever was not depressed.
[18:54:47] <rotateq> i need such a button for my brain ^^
[18:55:25] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:987:a889:ebb5:d519)
[18:55:45] <rotateq> but yes I've seen it on retro computers in different hackerspaces
[18:59:27] <shka> rotateq: turbo button was actually slowing down CPU :P
[19:00:01] <rotateq> :D
[19:00:14] <shka> it was compatibility mode for the original X86
[19:00:25] <rotateq> ah
[19:00:43] <rotateq> isn't there also a x87 thing?
[19:00:47] <gilberth> There is an instruction "Halt and Proceed". Now what? Halt or proceed?
[19:00:49] <rotateq> or for what is that?
[19:00:56] <rotateq> :D
[19:01:06] <rotateq> some funny and weird instructions in x86
[19:01:21] <rotateq> or a bit too specialized
[19:01:29] <shka> rotateq: it was for software (and games) that tied itself to the original clock
[19:01:40] <shka> which was surprisingly common
[19:02:00] <rotateq> ah right, time
[19:03:48] <gilberth> HPR - Halt and Proceed would halt the machine and when operator presses "start" button the machine would proceed. Easy.
[19:03:59] <shka> so if you had 66mhz CPU, but needed 8mhz, you press turbo button
[19:04:27] <shka> some old games would literally run faster, if CPU was faster 
[19:05:11] <gilberth> Not 4.77Mhz?
[19:05:28] <shka> uh, i recall that my PC would go down to 8mhz
[19:05:36] <shka> but afaik it was not even standardized
[19:05:56] <gilberth> Yeah, that was common later. Maybe the AT was 8MHz. idk.
[19:07:28] <shka> but yeah, the OG 8088 was 4.77 mhz cpu
[19:08:16] <gilberth> Yep, when I would dig deep enough at my basement, I will find an IBM XT.
[19:08:27] <shka> that's cool
[19:08:33] <shka> you still have that model f keyboard
[19:08:34] <rotateq> from when is that machine?
[19:08:35] <shka> ?
[19:08:49] <shka> rotateq: ibm XT is the PC
[19:08:57] <gilberth> shka: If that is the original IBM keyboard, yes.
[19:09:18] <shka> rotateq: i mean, the original
[19:09:24] <shka> gilberth: cool!
[19:09:34] <shka> model F is kinda awesome actually
[19:09:40] <rotateq> :)
[19:09:50] <gilberth> It's incompatible with IBM ATs.
[19:10:00] <shka> there are converters
[19:10:25] <gilberth> Sure, and such a converter would even be trivial to construct.
[19:10:41] <shka> https://www.ebay.pl/itm/USB-PS2-AT-to-XT-keyboard-converter-Vintage-PC-IBM-XT-5160-5150-UNIVERSAL/402759990336?hash=item5dc65dbc40:g:XLwAAOSwsfpgWGTc
[19:10:42] -ixelp- USB/PS2/AT to XT keyboard converter - Vintage PC IBM XT 5160 - 5150 - UNIVERSAL | eBay
[19:10:49] <shka> well, you can just buy one
[19:11:26] <gilberth> rotateq: Must have been '84 or so I got the machine.
[19:12:27] <rotateq> long before i reincarnated to my running body instance
[19:12:27] <gilberth> And the IBM PC was before the XT.
[19:16:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[19:18:11] <gilberth> Ok. The IBM 7090 isn't too weird. Pretty common ISA, but for the indirect addressing also taking the index registers into account on the address found, which is nasty.
[19:18:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:20:10] <gilberth> And it has bit-wise logical instructions even. Not all machines have these.
[19:22:44] <gilberth> Oh. RDS and WRS are instructions? Now I know where these SUBR names come from!
[19:26:23] <gilberth> While there are no CAR and CDR instructions.
[19:27:31] <rotateq> you mean like LOGAND and friends?
[19:27:54] <gilberth> Yep. And shifts and rotation.
[19:28:52] <rotateq> ah nice
[19:29:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:32:19] <rotateq> did the IBM7090 have a special chip for doing floating point operations?
[19:32:40] <gilberth> Chips weren't invented yet.
[19:32:53] <rotateq> as i read it was for 1960 a computer which was highly capable doing intensive scientific calculations
[19:32:57] <rotateq> haha right
[19:33:05] <rotateq> just the snacks maybe
[19:33:47] <gilberth> But as almost any machine of that era, it had floating point instructions, yes.
[19:34:12] <shka> computer without floating points was not very useful mainframe i suspect
[19:34:13] <rotateq> :)
[19:34:31] *** Joins: notzmv (~zmv@user/notzmv)
[19:34:35] <rotateq> they were mostly afraid of symbolic computing :D
[19:34:52] <gilberth> shka: I am not so sure about the non-scientific machines. I have seen fixed point ISAs.
[19:34:59] <shka> mmm, ok
[19:35:48] <gilberth> This is why the words are so long. You find 40 bits and more. The reasoning was: "Ought to be enough digits". I should take notes.
[19:36:01] <rotateq> i read in an article that when Martinus Veltman invented his SCHOONSCHIP system he used assembly because it's best for fast floating operations
[19:36:39] <gilberth> The IBM 7090 is a 36-bit machine. With 15-bit addresses thus capable to addressing 32K words.
[19:40:06] <gilberth> Even the Z3 did floating point.
[19:40:41] <rotateq> i saw a video that the rebuild of it in Munich is now put away
[19:41:07] <rotateq> They are closing the IT department in the German Museum.
[19:41:33] <gilberth> It was taken away, because it's a fire hazard.
[19:41:47] <rotateq> right
[19:46:09] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[19:49:17] *** Quits: Catie (~user@user/catie) (Ping timeout: 240 seconds)
[19:54:32] * gilberth found "Programming the IBM 7090 --- A Self-Instructional Programmed Manual". Some questionnaires even have answers scribbled at.
[19:55:44] <gilberth> Bitsavers is great. I love reading these ancient manuals.
[19:56:01] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[19:57:42] <gilberth> This is a beginner's text and starts with teaching binary numbers.
[19:57:59] <rotateq> nice
[19:58:23] *** Joins: treflip (~user@user/treflip)
[19:58:31] <rotateq> better to have strange "simple" knowledge than too much abstract and loose
[20:00:18] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[20:00:34] <gilberth> After page 20 this instructional text is nice as it explains the ISA. One could skip all the exercises.
[20:00:49] <rotateq> :D
[20:06:22] <gilberth> I should take notes. They already used the term BSS. I always believed it was a UNIX or perhaps PDP term.
[20:10:52] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:29:47] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[20:38:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[20:39:35] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[20:44:52] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:56:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:56:40] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[21:23:57] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[21:25:20] *** Joins: Achylles (~Achylles_@2804:431:d724:7449:3b4d:585c:367b:f390)
[21:34:30] * ck_ dials 1-800-gnus-expert
[21:35:26] <drakonis> i'm finally doing my project now
[21:35:32] <drakonis> but there's a small concern regarding uhhh
[21:35:36] <drakonis> the likes of hexstream
[21:35:50] <drakonis> i don't want all of my information to end up in a page because of his whims
[21:43:25] <ck_> he seems to have calmed down a little, but that aggregation page still exists and is maintained I guess
[21:43:46] <ck_> what do you mean by "the likes of"? he's unique in my mind and that regard
[21:44:26] <drakonis> unique? sure.
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:31:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:34:31] *** Joins: epony (epony@user/epony)
[22:53:54] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:01:19] *** Quits: Achylles (~Achylles_@2804:431:d724:7449:3b4d:585c:367b:f390) (Remote host closed the connection)
[23:02:42] *** Quits: parjanya (~esb@2804:14c:1ad:9351:a9f4:2cf3:2d0f:3397) (Ping timeout: 252 seconds)
[23:03:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:14:02] <aeth> right
[23:15:31] <aeth> As the leader of the Common Lisp community, I don't want a self-proclaimed leader of the Common Lisp community sharing my information, either. Fortunately, last I checked, he has no interest in my projects because they're on Gitlab instead of Github
[23:16:09] <aeth> If you want to avoid Github comment section drama, you can do that. Nobody has bothered to sign up to Gitlab to do drama so far.
[23:25:07] <drakonis> ha
[23:25:28] <drakonis> good to know
[23:27:28] <drakonis> i really dont want to participate on it because he disregards everything other people say
[23:37:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:41:04] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:987:a889:ebb5:d519) (Remote host closed the connection)
[23:51:46] *** Quits: jasom (f3e90f0325@2604:bf00:561:2000::3a6) (Ping timeout: 250 seconds)
[23:51:46] *** Quits: sm2n (ae95cb1267@user/sm2n) (Ping timeout: 250 seconds)
[23:51:54] *** Joins: jasom_ (f3e90f0325@2604:bf00:561:2000::3a6)
[23:52:02] *** jasom_ is now known as jasom
[23:52:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[23:56:15] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ec08:9ba4:bce:4350)
