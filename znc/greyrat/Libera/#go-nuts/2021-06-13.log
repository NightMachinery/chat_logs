[00:01:13] *** Joins: SincereFox (uid337158@user/sincerefox)
[00:04:56] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[00:05:32] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[00:05:53] *** Joins: phoenixh_ (~phoenixh@p200300dd6f0f660080448e96c5ecca68.dip0.t-ipconnect.de)
[00:06:35] *** Quits: SebastianM (~seba@user/sebastianm) (Ping timeout: 245 seconds)
[00:07:07] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[00:12:10] *** Joins: andlabs (~andlabs@68.237.68.71)
[00:13:03] *** Joins: falsifian (~falsifian@exoco.falsifian.org)
[00:15:22] *** Joins: shka (~herr@109.231.62.239)
[00:25:01] *** Joins: SebastianM (~seba@user/sebastianm)
[00:25:37] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[00:30:15] *** Quits: freswa (~freswa@2a01:4f8:1c0c:804b::2) (Quit: Bye!)
[00:31:01] *** Joins: freswa (~freswa@2a01:4f8:1c0c:804b::2)
[00:35:42] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[00:38:55] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[00:39:55] *** Quits: whoami (~whoami@d118-75-90-9.try.wideopenwest.com) (Ping timeout: 245 seconds)
[00:40:22] *** Joins: Techcable (~Techcable@168.235.93.147)
[00:49:13] *** Joins: hexfive (~eric@50.35.83.177)
[00:49:17] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[00:53:17] *** Joins: whoami (~whoami@d118-75-90-9.try.wideopenwest.com)
[00:58:33] *** Quits: endigma (~endigma@drmons0552w-134-41-82-6.dhcp-dynamic.fibreop.ns.bellaliant.net) (Ping timeout: 264 seconds)
[01:01:55] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Remote host closed the connection)
[01:02:10] *** Joins: arcatech (~arcatech@user/arcatech)
[01:12:05] *** Quits: souvik (~souvik@103.199.182.163) (Ping timeout: 255 seconds)
[01:16:17] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:ed84:fad8:49a1:17af) (Quit: Leaving)
[01:33:00] *** Quits: mikoto-c1 (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 268 seconds)
[01:33:20] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[01:34:49] *** Joins: dolmen (~X@91.206.7.93.rev.sfr.net)
[01:37:03] *** Quits: krthnz (~quassel@dslb-188-109-141-016.188.109.pools.vodafone-ip.de) (Changing host)
[01:37:03] *** Joins: krthnz (~quassel@user/krthnz)
[01:37:08] *** Quits: phoenixh_ (~phoenixh@p200300dd6f0f660080448e96c5ecca68.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[01:37:33] *** Quits: krthnz (~quassel@user/krthnz) (Quit: krthnz)
[01:37:52] *** Joins: krthnz (~quassel@dslb-188-109-141-016.188.109.pools.vodafone-ip.de)
[01:37:53] *** Quits: krthnz (~quassel@dslb-188-109-141-016.188.109.pools.vodafone-ip.de) (Changing host)
[01:37:53] *** Joins: krthnz (~quassel@user/krthnz)
[01:41:29] *** Joins: noxim (~noxim@user/noxim)
[01:48:44] *** Joins: SebastianM (~seba@user/sebastianm)
[01:48:51] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[01:52:51] *** noteness_ is now known as noteness
[01:54:30] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 250 seconds)
[02:03:51] *** Joins: noxim (~noxim@dyndsl-092-252-028-136.ewe-ip-backbone.de)
[02:04:00] *** Quits: noxim (~noxim@dyndsl-092-252-028-136.ewe-ip-backbone.de) (Changing host)
[02:04:00] *** Joins: noxim (~noxim@user/noxim)
[02:04:33] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 264 seconds)
[02:04:52] *** Quits: amahl (~amahl@87-95-128-122.bb.dnainternet.fi) (Remote host closed the connection)
[02:04:57] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[02:07:30] *** Joins: marlinc (~marlinc@user/marlinc)
[02:10:10] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[02:14:14] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:16:55] *** Quits: dolmen (~X@91.206.7.93.rev.sfr.net) (Read error: error:1408F10B:SSL routines:ssl3_get_record:wrong version number)
[02:25:11] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.1)
[02:29:55] *** Quits: Torr (~Torr@170.83.146.97) (Ping timeout: 245 seconds)
[02:32:07] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 272 seconds)
[02:33:59] *** Joins: endigma (~endigma@134.41.86.220)
[02:36:04] *** Joins: Torr (~Torr@170.83.146.97)
[02:38:57] *** Quits: seabass (~sebastian@user/seabass) (Quit: WeeChat 2.8)
[02:41:06] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[02:45:20] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[02:45:25] *** Quits: endigma (~endigma@134.41.86.220) (Ping timeout: 272 seconds)
[02:45:39] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[02:46:53] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[02:48:17] *** Joins: bpalmer (~user@user/bpalmer)
[02:54:24] <LambdaComplex> i wonder if this book is any good https://nostarch.com/networkprogrammingwithgo
[02:56:11] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[03:02:04] *** Joins: masoudd (~masoudd@user/masoudd)
[03:04:26] *** Quits: bodhi1 (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[03:05:31] *** Quits: Torr (~Torr@170.83.146.97) (Quit: leaving)
[03:05:41] *** Quits: sgen (~sgen@142.186.76.30) (Read error: No route to host)
[03:08:52] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[03:09:57] *** Joins: noxim6 (~noxim@37.120.145.68)
[03:11:04] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[03:12:30] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 250 seconds)
[03:12:44] *** ruhnet is now known as ruel
[03:13:55] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[03:16:40] *** Joins: endigma (~endigma@134.41.87.209)
[03:16:43] *** Quits: zanshin (~zanshin@user/zanshin) (Quit: WeeChat 3.0)
[03:17:10] *** Joins: zanshin (~zanshin@user/zanshin)
[03:18:09] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:20:41] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[03:24:37] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[03:28:02] *** Joins: FreeBDSM (~uzer@user/freebdsm)
[03:29:06] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[03:30:37] *** Quits: noxim6 (~noxim@37.120.145.68) (Quit: Client closed)
[03:31:44] *** Joins: yoonkn (~user@175.197.208.79)
[03:31:44] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[03:36:38] <b0nn> rsc posted a link to this on twitter https://lobste.rs/s/d5ytly/rust_vs_go_why_they_re_better_together#c_evukit
[03:36:46] <FreeBDSM> hello. Really newbie question here. What's the correct type of 'updates' here https://github.com/go-telegram-bot-api/telegram-bot-api/blame/master/README.md#L48 ? next line iterates over it via `for update := range updates {`, so it looks like an array of dicts. I'd like to pass it to another function (my own one), but I can't figure what type for that arg should I specify. Reading https://blog.golang.org/declaration-syntax and not unde
[03:36:46] <FreeBDSM> rstanding
[03:37:04] <b0nn> David's answer, I'm a bit lost about his sharing of slices between goroutines
[03:38:15] <b0nn> FreeBDSM: Get your editor to go to the definition of  bot.GetUpdatesChan(u) to see what it returns
[03:39:23] <FreeBDSM> b0nn: return ch, nil
[03:39:30] <FreeBDSM> ch := make(chan Update, bot.Buffer)
[03:39:48] <b0nn> ok
[03:39:56] <b0nn> does that not clear it up for you?
[03:40:00] <FreeBDSM> no
[03:41:10] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[03:41:15] *** Joins: klltkr (~klltkr@2a00:23c5:d198:ad01:1aa:440f:daed:5ddc)
[03:41:22] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[03:41:54] <b0nn> It's a channel that carries objects of type Update and has a buffer of length bot.Buffer
[03:42:31] <FreeBDSM> so 'an object of objects'
[03:43:21] <bpalmer> what does an object of objects mean?
[03:43:22] <b0nn> ok, channels are "typed" - that is, you create a channel that carries instances of a given type
[03:43:48] <b0nn> the channel "object" carries Update "objects" and only Update "objects"
[03:44:34] <FreeBDSM> what's "typed"?
[03:44:36] <src> any suggestions for my second go book? my favorite as of now is https://www.amazon.com/Learning-Go-Programming-Vladimir-Vivien-ebook/dp/B01D1HI97Y
[03:44:41] <b0nn> the word object is a bit contentious (I should not have used it) - because Go isn't an Object oriented language, but you can think of instances of a given type as objects of that type
[03:45:20] <b0nn> FreeBDSM: Do you have experience in other languages?
[03:45:38] <src> though I wished I had something short and sweet with a lot of exercises at the end of each chapter
[03:45:57] <FreeBDSM> b0nn: a bit. Not really familiar with channels yet, reading rn about them in go
[03:46:09] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[03:47:38] <b0nn> Ok, a channel is a synchronised queue, that is, you can place instances of a given type in a queue, and they /type/ that that queue can be composed of is, in this case, Update
[03:48:24] <b0nn> You "type" a channel to indicate to users (and the compiler) precisely what type your channel will carry (and only that type)
[03:49:22] <src> I don't want to be cynical but this person found code on github they want to use somehow, but they don't know the language + have little programming experience to begin with
[03:49:38] <src> b0nn: and you plan on hand holding that person so this person can hack something together they don't understand?
[03:49:43] <src> seems weird
[03:50:20] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[03:50:41] <b0nn> src: 1) *Everybody* starts somewhere, 2) Learn by doing is *super* common 3) I'd rather help people get started than be snarky and put people off the idea of programming (or using a certain technology)
[03:51:37] <b0nn> Also Right now I am trying to port some C to Go, and the people of #C have been *super* helpful to me when I ask stupid questions
[03:51:48] <src> of course that's up to ; I've been helped a lot when I didn't deserve too as well I guess
[03:51:56] <b0nn> When I was porting some C++ to Go, the people of #C++ were also very helpful
[03:52:24] <FreeBDSM> I think src is right. I don't know the language and wanted to learn it by changing a program that already works fine for me and I see what I want to improve in it. I am not familiar with the concept of channels yet and comping from Python - I have a problems working with a strongly statically typed language.
[03:52:50] <b0nn> Python has sychronised queues for communicating between threads
[03:53:37] <FreeBDSM> in Python I just pass an instance of an object if I want so
[03:53:37] <src> FreeBDSM: the golang tour is a very _succinct_ way to get an overview of go, I also think I glimpsed some "Python to Go" talks that might be particularly suited to you. That might be a good place to start, I don't want to discourage you. I've dabbled in Python and I quite like Go, you might too :)
[03:53:56] <b0nn> The key difference between Python and Go (in this case) is that in Python you don't have to convey /what/ your synchronised queue is going to carry, because it will carry anything you throw at it - Go, on the other hand, you have to explicitly tell everybody what type it will carry
[03:53:57] <LambdaComplex> lmao FreeBDSM is a great nick
[03:55:03] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:55:20] <FreeBDSM> b0nn: exactly, my current problem is Go's types. Each variable has a type, and thus the functions I declare need to know it beforehand.
[03:56:23] <b0nn> There is /some/ leeway - the use of interfaces, which allow you to describe a group of types, as long as they implement certain methods
[03:56:36] <FreeBDSM> a simple debug approach tells me that there should be something as simple as `log.Printf("Type of myvar is: %s", typeof(myvar))`
[03:56:59] <b0nn> use %T, and no typeof
[03:57:26] <b0nn> %Ta Go-syntax representation of the type of the value
[03:58:16] <b0nn> But (IME) it's easier to learn to walk up the call stack looking at what types are used
[03:58:22] <FreeBDSM> it returned `tgbotapi.UpdatesChannel`
[03:58:39] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[03:59:47] <b0nn> yes, and in package tgbotapi you will find a definition for UpdatesChannel
[03:59:57] <b0nn> which is what I think you posted before
[04:00:40] <FreeBDSM> b0nn: I have so little experience right now with golang that it just is not a simple task for me to do: looking at the declaration of GetUpdatesChan function - I would never figure out the type it returns should be referenced like tgbotapi.UpdatesChannel instead of just UpdatesChannel. I am on that level of understanding right now.
[04:01:04] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[04:01:21] <LambdaComplex> FreeBDSM: https://tour.golang.org/welcome/1
[04:01:44] <FreeBDSM> actually what I'm trying to solve right now is not even correct my program to do something else, I'm trying to understand whether I like Golang enough as to invest my time in it. I've skimmed through The Tour.
[04:03:27] <FreeBDSM> The Tour didn't really help me solve my problem, it just teaches Go (and does that pretty poorly, IMO).
[04:03:58] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[04:08:35] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:09:53] *** Joins: andlabs (~andlabs@68.237.68.71)
[04:14:51] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[04:15:34] <Tv_> the thing about the tour, and just about all golang.org material, is that it *only* teaches you Go, not computers or unix
[04:15:57] <Tv_> much of the material assumes a basic understanding of e.g. C-style static types
[04:16:25] <Tv_> (which line drawn in the sand i am personally fine with; there's a limit to what effort a language author should have to go to)
[04:16:44] <FreeBDSM> yeah, so it's value is debatable, especially if you take provided examples into consideration.
[04:16:45] <Tv_> Go ain't gonna tell you *what* a pointer is, just how pointers look and behave in Go
[04:16:55] <Tv_> the value is just fine
[04:17:07] <FreeBDSM> is debatable
[04:17:27] <Tv_> *shrug* complain as much as you want, i'll listen as much as i want ;)
[04:18:27] <FreeBDSM> fine for you, poor for me. IMO tours like that should be targeted at someone without prior programming experience and example demos should be simple and demonstrate something in the most obvious way.
[04:19:05] <FreeBDSM> apart from that - it's pretty good
[04:19:27] <Tv_> that was never the intended audience for Go
[04:19:48] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[04:19:54] <src> even the more or less official go book is targeted more at experienced programmers
[04:20:06] <src> there's some beginners stuff around though it's definitely not python in that regard
[04:20:34] <Tv_> and python had the *explicit goal* of being a teaching language
[04:21:05] <FreeBDSM> so are many others
[04:21:20] <Tv_> actually that's pretty rare
[04:21:32] <Tv_> something like ocaml might qualify?
[04:21:34] <foobaz> go's intended audience is grizzled 50 year old unix veterans :)
[04:21:34] <Tv_> not sure
[04:21:38] <Tv_> eiffel.
[04:21:45] <FreeBDSM> I didn't know of Go's elitist/snobbish basis, it makes more sense now why The Tour is the way it is.
[04:21:59] <Tv_> foobaz: actually, no. the intended audience was the people who'd bother those grizzled veterans.
[04:22:05] <b0nn> ^ *this* is what I was trying to avoid
[04:22:20] <Tv_> FreeBDSM: it's not elitism, it's pragmatism and limited resources
[04:22:22] <foobaz> MIT's scratch is a teaching language
[04:22:23] <bpalmer> FreeBDSM: a tour is not a class. Similarly, taking a few hour tour in Rome if you've no background in European history is probably not going to radically enlighten you.
[04:22:32] <Tv_> it's *really rare* for a programming language to be aimed at beginners
[04:22:52] <Tv_> foobaz: Scratch is a great example.
[04:23:00] <bpalmer> There are a lot of people who are curious what go looks like and want a few landmarks; that's what the tour is aimed at.
[04:23:06] <FreeBDSM> Tv_: pragmatism would tell: try to be aspired by all
[04:23:09] <foobaz> also microsoft small basic
[04:23:11] <Tv_> scratch probably succeeds at teaching better than python (with the trade-off of seeing less real-world use)
[04:23:23] <Tv_> FreeBDSM: i have no idea what you're trying to communicate with that
[04:23:32] <foobaz> i once had the misfortune of maintaining a legacy codebase written in small basic
[04:23:44] <Tv_> foobaz: i'll argue baics are a historical accident, not intended for teaching ;)
[04:24:12] <bpalmer> (go could be a not terrible teaching language -- at least the errors would be clearer than C -- but you wouldn't teach beginners how to program in a few hours)
[04:24:13] <foobaz> only an accident could account for such a weird language becoming standard
[04:24:46] <FreeBDSM> Tv_: imagine you developed some New Awesome Programming Language. You wish it to become as popular as possible. In order to do so - you try to target the widest auditory there is, which is beginners.
[04:24:47] <Tv_> bpalmer: yeah, but you'd have to *also* teach computers
[04:25:08] <Tv_> FreeBDSM: so you're just repeating that others should use their precious time in a way you tell them to
[04:25:38] <FreeBDSM> Tv_: no, not at all.
[04:25:52] <FreeBDSM> there is no 'should'
[04:25:58] <b0nn> We're heading down the Should a University teach Computer Science, or Programming route I think
[04:26:06] <FreeBDSM> there are people and their desires
[04:26:08] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[04:26:18] <FreeBDSM> I want to learn some cool modern language to solve problems quickly
[04:26:19] <Tv_> b0nn: that fight was lost when MIT switched to "programming by gluing things together" :(
[04:26:39] <FreeBDSM> I presume authors of %lang% programming language want their language to become dominant
[04:26:46] <bpalmer> Yeah. As soon as people were allowed to just solder together some existing circuitry, all was lost.
[04:26:54] <Tv_> i feel the US doesn't have enough of a split between universities and technical colleges (whatever is the right word). CS goes in the Uni, EE & other engineering concerns in the technical college.
[04:26:55] <b0nn> FreeBDSM: that problem statement has to be couched in "What sort of problems"
[04:27:18] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[04:27:23] <b0nn> I wouldn't use python to write kernels - for example
[04:27:32] <foobaz> FreeBDSM: honestly it sounds like python is perfect for your needs
[04:27:33] <b0nn> Although I presume it's possible
[04:27:43] <FreeBDSM> b0nn: IMO, no. Programming is programming, there are just a few niche programming languages, the rest try to be holistic
[04:27:50] <foobaz> i use go when i
[04:27:56] <Tv_> FreeBDSM: typically programming language creation only gets accomplished by people with much more grounded goals, and *much* more solving their *own* problems
[04:28:01] <foobaz> when i need performance and reliability
[04:28:12] <foobaz> but when i want to throw together something quick i use python
[04:28:18] <KirkMcDonald> Every language exists for a reason.
[04:28:32] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1006)
[04:28:33] <bpalmer> Sometimes that reason involves a compiler student having a few too many drinks.
[04:28:56] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[04:28:58] <Tv_> that's a might fine reason though. also why my OS exists...
[04:29:01] <Tv_> *mighty
[04:29:24] <FreeBDSM> Tv_: that doesn't seem to contradict my point. Every PL author want their PL to be as popular as possible.
[04:29:31] <KirkMcDonald> Most often the reason is, "What if this other thing, but different?"
[04:29:31] <b0nn> If programming was just programming there'd only be one language
[04:29:33] <Tv_> much better than microsoft or such going "oh yeah we're gonna need to enter that market too"
[04:29:35] <bpalmer> FreeBDSM: that's really not the case.
[04:29:47] <Tv_> FreeBDSM: you keep stating your own opinion without listening enough
[04:29:55] <Tv_> FreeBDSM: programming languages are created to solve the author's itch
[04:30:00] <Tv_> FreeBDSM: you assume the origin of the itch
[04:30:07] <FreeBDSM> Tv_: no, that's not so
[04:30:15] <FreeBDSM> I don't assume that
[04:30:18] <Tv_> Go was created because Google needed a better/easier language than Java or C++
[04:30:27] <FreeBDSM> good for them
[04:30:31] <Tv_> all assumptions about world domination are FreeBDSM's alone
[04:30:33] <pl> Haskell even had a motto that they are explicitly trying to not be be popular
[04:30:43] <FreeBDSM> but then they decided to make it open, publish it and all that
[04:30:44] <b0nn> and they succeeded :)
[04:30:59] <FreeBDSM> and they want people to learn it
[04:31:03] <Tv_> FreeBDSM: and thereby you assume they are obligated to teach you static typing?
[04:31:08] <bpalmer> I know several programming languages that are very explicit about not being general purpose, because that complicates their efforts to be small and fit their niche.
[04:31:12] <Tv_> that's really not how the world works
[04:31:13] <pl> Tv_: there's also some 35 years of history in Go that predates Google
[04:31:30] <bpalmer> They don't want to be popular, because then they'll lose their specialization.
[04:31:30] <FreeBDSM> Tv_: you keep making claims about my assumptions I never assumed, please stop that.
[04:31:34] <Tv_> pl: oh for sure, in this case the giants were often standing on their own shoulders
[04:31:44] <Tv_> pl: like turtles, but giants and up not down
[04:31:58] <src> Go is doing well, FreeBDSM why are you on a language channel arguing about what that language creators should do to be more popular or what they're doing wrong
[04:32:00] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[04:32:13] <Tv_> 18:00 <FreeBDSM> and they want people to learn it
[04:32:17] <src> FreeBDSM: I think they had a pretty decent strategy what they wanted Go to be and what people they wanted Go to use :)
[04:32:21] <pl> Tv_: for example, early go could easily be summarised as plan9 C with GC and syntax sugar for certain system libraries ;-)
[04:32:29] <bpalmer> in particular, though, i stand by my point: the tour is not designed to be teaching absolute beginners, so complaining that it doesn't do that is pointless.
[04:32:30] <FreeBDSM> src: why are you talking about deviant sexuality in a programming language channel?
[04:32:34] <Tv_> Google wanted/wants their employees to use Go. i doubt anyone at Google has an agenda of replacing Python in the whole world.
[04:32:46] <Tv_> FreeBDSM: what
[04:32:49] <FreeBDSM> exactly
[04:32:55] <pl> Wait, what, replace python? Where can I sign up?
[04:32:56] <bpalmer> Read Donovan & Kernighan's book for a more thorough introduction to the language.
[04:33:37] <src> FreeBDSM: ?
[04:33:51] <FreeBDSM> src: why?
[04:34:19] <Tv_> okay weird troll is weird now
[04:34:36] <src> yes, I mean if the joke is what I think it is it's a pretty bad one, and it's getting really silly
[04:34:48] <FreeBDSM> it's not a joke, I'm just mirroring you
[04:35:05] <FreeBDSM> because you reference 'my' claims I never claimed
[04:35:24] <FreeBDSM> that's as nice as asking "why are you against children?"
[04:35:36] <Tv_> FreeBDSM: please stop
[04:35:43] <FreeBDSM> I never claimed authors 'should' do anything
[04:35:58] <FreeBDSM> but you claimed that I claimed so, that's a lie
[04:36:06] <foobaz> b0nn: if you have any other C questions hit me up, i'd be happy to help
[04:36:12] <Tv_> 17:59 <FreeBDSM> Tv_: that doesn't seem to contradict my point. Every PL author want their PL to be as popular as possible.
[04:36:36] <FreeBDSM> Tv_: yes, `|grep 'should'` will return 0 results
[04:36:47] <Tv_> FreeBDSM: okay this is  a boring conversation now
[04:36:53] <FreeBDSM> then quit it
[04:37:01] <Tv_> FreeBDSM: your assumptions of other people's motivations are *demonstrably* false
[04:37:24] <Tv_> your assumptions about their employers agenda for them are not aligned with what they people have stated
[04:37:43] <Tv_> and then you complain the world you encounter doesn't match your view of it
[04:37:45] <src> Tv_: I know it can be difficult to really quit discussions like these, but I don't think there's any point in continuing here
[04:37:49] <FreeBDSM> I might be wrong. That's just my opinion and I shared it. And I understand it's subjective and I don't even try to 'convert the other side'
[04:37:53] <Tv_> yeah. so, how about that Go
[04:37:58] <src> some people like being contrarians and starting online fights, getting into semantics and playing smart
[04:39:05] <FreeBDSM> I don't like any of that, I just hate when someone starts a fight with references to opponent's claims that were not claimed in reality.
[04:40:20] <FreeBDSM> I agree we should just move on from this topic
[04:43:44] <FreeBDSM> why are there seemingly similar packages in standard lib like fmt and log? afaiu they serve the same purpose, so why keep both?
[04:43:57] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[04:44:52] <KirkMcDonald> Their purposes are distinct.
[04:45:13] <KirkMcDonald> One depends on the other.
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:07] <b0nn> Hmm, doesn't one default to std.Err
[04:47:26] <b0nn> or do they both default to std.Out
[04:47:32] <LambdaComplex> Tv_: Go is pretty okay alright
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:24] <b0nn> Oh, it's the pre-defined logger "hat logger writes to standard error and prints the date and time of each logged message. "
[04:48:34] <FreeBDSM> yeah, log.Print* uses fmt.Print* (|f|ln)
[04:48:40] <bpalmer> log.Default() is bound to os.stderr
[04:48:51] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[04:49:07] <bpalmer> you can create your own log.Logger that is attached to any writer you want.
[04:49:38] <b0nn> I had trouble with it the other day when I was writing tests - had to hijack stdout/er so I could capture the logger output
[04:49:59] *** ruel is now known as lvlinux
[04:50:55] <gilesc> b0nn: i hate that :( The way i usually develop is using a lot of printlns when i'm just quickly prototyping something out... took me a while to realize that the testing framework eats all those lol
[04:50:57] <Tv_> one bit that most people ignore: only log says it's goroutine-safe, os.Stdout makes no such claim
[04:50:57] <LambdaComplex> FreeBDSM: technically speaking, it doesn't
[04:51:42] <b0nn> it uses fmt.Sprint to format the message, which isn't fmt.Print
[04:51:44] <LambdaComplex> a Logger contains an io.Writer and Write() gets called on that
[04:51:57] <LambdaComplex> and yeah, what b0nn said
[04:52:15] <LambdaComplex> looks like fmt.Sprintf and fmt.Sprintln are the only things from fmt that get used in the log package
[04:52:22] <FreeBDSM> LambdaComplex: yeah, you are right, it uses fmt.Sprint*
[04:57:01] <FreeBDSM> fmt.Printf formats according to a format specifier and writes to standard output. fmt.Sprintf formats according to a format specifier and returns the resulting string. log.Printf uses fmt.SprintF and log.Output which returns std.Output
[04:57:38] *** Quits: src (~src@user/src) (Quit: leaving)
[05:01:36] *** Joins: src (~src@user/src)
[05:02:09] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:02:44] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[05:07:25] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[05:08:35] *** Quits: KDDLB (kevin@user/kddlb) (Quit: The Lounge - https://thelounge.chat)
[05:09:43] *** Quits: eck0_ (~Android@mobile-166-173-63-55.mycingular.net) (Read error: Connection reset by peer)
[05:11:16] *** Joins: eck0 (~Android@068-186-235-203.res.spectrum.com)
[05:11:40] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:13:17] *** Joins: andlabs (~andlabs@68.237.68.71)
[05:16:32] *** Joins: KDDLB (kevin@user/kddlb)
[05:18:42] <Tv_> well i meant to write "deriving" but i ended up writing "deriding a XXX interface" and it's vague and overly abstract enough that i don't disagree with that...
[05:19:57] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[05:20:33] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[05:24:36] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[05:33:04] <b0nn> However, in Go I can create an object with a slice field and share it between two goroutines and then have one write update it in a loop with a small slice and a large slice and the other goroutine read until it sees the base of the small slice and the length of the large slice. I now have a slice whose bounds are larger than the underlying object and I can violate all of the memory-safety invariants"
[05:33:34] <b0nn> This is really getting me - if the slice is resized then the backing array has been resized
[05:34:20] <b0nn> Is he trying to say a slice has been shrunk, but the original slice struct isn't aware?
[05:34:29] <b0nn> Oh, https://lobste.rs/s/d5ytly/rust_vs_go_why_they_re_better_together#c_evukit
[05:34:36] <Vigdis> looks like you've been nerd sniped :)
[05:35:28] <b0nn> Slices really irk me in Go, because of the pointer to the backing array, which effectively prevents thread safety
[05:35:43] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[05:36:08] <b0nn> I mean, you can add a mutex to control access to the slice information, but you cannot use one to protect the backing array
[05:38:38] *** Joins: tessellator (~tessellat@24.96.157.86)
[05:40:20] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[05:42:56] <Tv_> b0nn: not really about slices. assign two different types to an interface, observe from another goroutine.
[05:43:06] <Tv_> races are not memory safe
[05:44:05] <Tv_> rust pays a *very* heavy complexity cost to wrangle that
[05:46:01] *** Quits: moog (~moog@107.242.124.101) (Read error: Connection reset by peer)
[05:46:07] *** Joins: moog (~moog@107.242.124.101)
[05:46:24] *** Quits: justBull (~justache@user/justache) (Remote host closed the connection)
[05:46:35] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: Ping timeout (120 seconds))
[05:46:36] *** Quits: Gnuman (~gnuman@user/gnuman) (Ping timeout: 252 seconds)
[05:47:02] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[05:47:53] *** Joins: justBull (~justache@user/justache)
[05:48:03] *** Joins: Gnuman (~gnuman@user/gnuman)
[05:49:47] *** Quits: tessellator (~tessellat@24.96.157.86) (Quit: Leaving...)
[05:51:28] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[05:56:30] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[05:57:42] <b0nn> I'm beginning to think that the Getter/Setter model is more useful in Go, such that users are *forced* to use mutexes (because they are what the getter/setters use internally)
[05:59:13] <b0nn> type Foo struct {M sync.Mutex; Data []Stuff} // the mutex is optional for access to Data - unless access is only available through a getter that specifically asks for the mutex
[06:00:35] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:00:41] *** iliaf is now known as iluxa
[06:01:02] *** Joins: c10l (~c10l@89.34.167.207)
[06:07:14] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[06:11:30] *** cfebs_ is now known as cfebs
[06:11:54] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[06:12:33] <b0nn> https://play.golang.org/p/vAovvthliHb
[06:13:12] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Ping timeout: 250 seconds)
[06:16:27] <src> insane how cumbersome epub conversion is (given that .epub is some sort of xhtml underneath)
[06:16:39] <src> I wonder how hard it would be to come up with some custom solution ... (possible Go project?!)
[06:17:42] <src> haven't yet found a really nice lightweight reader/ebook library program too, also in the back of my mind
[06:18:29] <iluxa> src: What about Calibre?
[06:18:47] <src> calibre is quite heavy (300 mb or so?), can't be used to respect simple file hierarchy (instead of tags and messing everything up)
[06:19:00] <src> has a very ugly UI and is quite overly complicated (I think)
[06:19:11] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[06:19:15] <src> it's a "one stop to do all" kind of thing though, granted
[06:20:21] <src> (I could go into way more detail but this isn't the place for it)
[06:21:16] <iluxa> Unfortunately I'm not aware of any alternatives. If you (or anyone else) decides to write one in Go I'll be keen to join and help.
[06:22:45] <src> foliate is a somewhat nice ebook reader
[06:22:56] <b0nn> I'd bee wiling to be that there are DRM issues that are prerventing active conversion
[06:22:58] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[06:23:15] <src> file formats are messy anyways
[06:23:48] <Skyz> Is everything gonna be on the web still?
[06:24:44] <src> yes, prepare for your almost daily "ransomware attack" and "devices x, y z found to be part of botnet" use
[06:24:47] <src> but yes, it will be
[06:25:00] <src> s/use/news (:D)
[06:26:23] <Skyz> I saw some interesting implementations with plan 9
[06:26:33] <Skyz> It's like the web never existed
[06:27:01] <src> plan9 is a funny crowd
[06:27:18] <src> love browsing cat-v
[06:27:51] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[06:28:40] <Skyz> Reading it now
[06:29:02] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[06:29:33] <FreeBDSM> what's cat-v?
[06:29:44] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[06:29:55] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 245 seconds)
[06:30:21] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 264 seconds)
[06:30:55] <src> FreeBDSM: a secret society of elitists :P
[06:31:20] <b0nn> http://cat-v.org/
[06:31:36] <src> k, the secret part maybe not so much
[06:31:47] <FreeBDSM> their https is broken
[06:31:56] <src> the site doesn't have https
[06:32:00] *** Joins: jespada (~jespada@90.254.242.55)
[06:32:06] <FreeBDSM> exactly
[06:32:14] <src> it doesn't need https
[06:32:25] <b0nn> Send them a PR
[06:32:33] <LambdaComplex> src: at least they're not suckless
[06:32:53] <src> LambdaComplex: what do you mean by that?
[06:33:04] <LambdaComplex> src: i think they're even more elitist :P
[06:33:35] <src> haven't kept up with suckless for quite a while, used to use dwm though and auto-join their irc years back for quite some time
[06:33:42] <src> LambdaComplex: yes might be
[06:34:05] <src> I like opinionated people
[06:34:21] <src> golang is an opionionated language I guess (in some respects)
[06:34:48] <src> well, I butchered that word
[06:37:16] <morgan> golang is an onionated language
[06:37:58] *** Joins: tg (~tg@rockylinux/infra/tg)
[06:38:34] <LambdaComplex> it has layers? it makes you cry? it grows in the ground?
[06:38:42] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[06:39:07] <src> what do gophers eat?
[06:43:15] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[06:47:00] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Ping timeout: 250 seconds)
[06:47:04] *** Joins: Skyz29 (~Skyz@ool-43538427.dyn.optonline.net)
[06:48:33] *** Skyz29 is now known as skyz
[06:49:27] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: closed)
[06:52:17] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 272 seconds)
[06:54:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 268 seconds)
[06:55:12] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[06:55:39] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[06:59:45] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[07:00:05] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[07:03:12] *** Joins: MrFantastik (~user@2603-7080-ae03-948a-ade1-7856-249c-08f8.res6.spectrum.com)
[07:05:42] *** Joins: gregf (~gregf@user/gregf)
[07:12:54] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[07:13:54] *** Quits: skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[07:17:25] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[07:18:16] *** Quits: klltkr (~klltkr@2a00:23c5:d198:ad01:1aa:440f:daed:5ddc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:20:38] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[07:23:05] <MrFantastik> how would i parse a string with layout "15:04" to a time?
[07:23:17] <MrFantastik> that is also time zone aware?
[07:24:00] <MrFantastik> I'm trying to convert HH:MM from a timezone to another timezone
[07:26:00] <MrFantastik> my non working solution https://pastebin.com/S9spPXpy
[07:26:51] <MrFantastik> I'm trying to parse from layout "15:04:00" because that doesn't error, but the timezone is incorrect
[07:28:46] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[07:29:45] <MrFantastik> oh wait its working with layout = "15:04"
[07:29:47] <Tv_> MrFantastik: i'd suggest ripping out the extra, just having input as a variable, and making something runnable on play.golang.org, that makes it a lot easier to help you
[07:29:52] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1006) (Quit: ZNC 1.8.2 - https://znc.in)
[07:30:13] <MrFantastik> okay i will next time
[07:30:27] <Tv_> just based on that question, nobody knows whether it won't compile, you get an error, or you get the wrong result, etc
[07:30:44] <Tv_> without emulating a computer in their head, that is
[07:33:15] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[07:39:04] <b0nn> MrFantastik: What TZ is your input supposed to be in
[07:39:30] <b0nn> What format is the string you are parsing in?
[07:39:46] <b0nn> https://golang.org/pkg/time/#Time.In
[07:43:45] *** Joins: souvik (~souvik@103.199.182.181)
[07:46:54] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[07:49:31] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[07:51:35] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[07:57:33] <MrFantastik> b0nn: "15:04"
[07:59:23] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:00:14] *** Quits: moog (~moog@107.242.124.101) (Remote host closed the connection)
[08:00:36] <b0nn> so, you have a set TZ for input then?
[08:02:13] <b0nn> You'd have to, because 15:04 doesn't convey any information on TZ
[08:02:45] <b0nn> So, it's one of three possibilities, local time for the user, local time for the server or UTC
[08:03:14] <b0nn> if it's local time for the user, then you need them to (somehow) convey what their local TZ is
[08:03:29] <b0nn> in the other two cases it's a business decision
[08:03:53] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[08:08:30] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[08:10:58] *** Quits: whoami (~whoami@d118-75-90-9.try.wideopenwest.com) (Ping timeout: 272 seconds)
[08:13:21] <lavadonut> wWWWAaaaaaaaarKIgarhakrahrakrahrhawWWWAaaaaaaaarKIgarhakrahrakrahrhawWWWAaaaaaaaarKIgarhakrahrakrahrhawWWWAaaaaaaaarKIgarhakrahrakrahrhawWWWAaaaaaaaarKIgarhakrahrakrahrhawWWWAaaaaaaaarKIgarhakrahrakrahrhawWWWAaaaaaaaarKIgarhakrahrakrahrhawWWWAaaaaaaaarK!!
[08:19:52] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[08:21:11] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[08:21:34] *** Joins: eck0_ (~Android@mobile-166-173-63-57.mycingular.net)
[08:23:54] *** Quits: eck0 (~Android@068-186-235-203.res.spectrum.com) (Ping timeout: 252 seconds)
[08:23:54] *** Quits: endigma (~endigma@134.41.87.209) (Ping timeout: 252 seconds)
[08:24:01] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:26:10] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[08:26:29] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[08:27:48] *** Joins: Snyp (~rksht@49.207.218.69)
[08:30:11] *** Quits: Snyp (~rksht@49.207.218.69) (Client Quit)
[08:31:40] *** Joins: Snyp (~rksht@49.207.218.69)
[08:37:21] *** Quits: eck0_ (~Android@mobile-166-173-63-57.mycingular.net) (Read error: Connection reset by peer)
[08:37:35] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[08:37:41] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:31d0:be79:8bea:8cd9) (Quit: WeeChat 3.1)
[08:38:45] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[08:39:25] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[08:42:36] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[08:43:02] *** Joins: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[08:43:05] <MrFantastik> b0nn: yes the timezone for input is set as a command arguement
[08:43:30] <MrFantastik> the grammer is /tz HH:MM <tz from> <tz to>
[08:45:58] <b0nn> what does <tz from> look like?
[08:46:08] <b0nn> is it an offset, or a location?
[08:46:40] *** Joins: eck0_ (~Android@047-007-119-133.res.spectrum.com)
[08:47:16] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:50:20] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 245 seconds)
[08:52:07] <b0nn> look at https://golang.org/pkg/time/#example_LoadLocation
[08:52:33] *** Joins: endigma (~endigma@134.41.87.209)
[08:53:21] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[08:54:20] <b0nn> And https://play.golang.org/p/JZXJnrXKgYS
[08:59:05] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[09:01:18] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[09:01:56] *** Quits: justBull (~justache@user/justache) (Excess Flood)
[09:03:08] *** Quits: cmj (~cmj@68.207.254.124) (Quit: Leaving)
[09:03:26] *** Joins: justBull (~justache@user/justache)
[09:04:42] *** Joins: SebastianM (~seba@user/sebastianm)
[09:11:36] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[09:16:09] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[09:20:12] *** Quits: icy (~icy@user/icy) (Remote host closed the connection)
[09:24:19] *** Quits: gregf (~gregf@user/gregf) (Quit: WeeChat 3.1)
[09:24:31] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[09:29:21] *** Quits: endigma (~endigma@134.41.87.209) (Read error: Connection reset by peer)
[09:29:38] *** Joins: endigma (~endigma@134.41.87.209)
[09:30:31] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[09:34:56] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[09:35:57] *** Quits: endigma (~endigma@134.41.87.209) (Ping timeout: 252 seconds)
[09:37:34] *** Joins: ibejohn (~jhardy@104.4.30.169)
[09:42:27] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:44:52] *** Joins: icy (~icy@user/icy)
[09:45:44] *** Joins: endigma (~endigma@134.41.87.209)
[09:46:20] *** Joins: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[09:47:56] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[09:48:27] *** Joins: eck0 (~eck0@047-007-119-133.res.spectrum.com)
[09:48:43] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[09:49:40] *** Joins: andlabs (~andlabs@68.237.68.71)
[09:51:01] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[09:53:33] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[10:09:25] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[10:14:27] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[10:17:45] *** Quits: vhost- (~vhost@65.102.48.134) (Quit: WeeChat 2.8)
[10:22:33] *** Joins: telboon (~telboon@165.173.0.102)
[10:26:43] *** Quits: ibejohn (~jhardy@104.4.30.169) (Quit: WeeChat 3.2-rc1)
[10:26:45] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[10:28:36] *** Quits: telboon (~telboon@165.173.0.102) (Changing host)
[10:28:36] *** Joins: telboon (~telboon@user/telboon)
[10:31:27] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[10:32:12] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[10:34:58] *** Joins: jhardy (~jhardy@104.4.30.169)
[10:38:12] *** Quits: jhardy (~jhardy@104.4.30.169) (Client Quit)
[10:42:47] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[10:47:27] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[10:48:03] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:50:36] *** Joins: frost (~frost@59.71.241.190)
[10:56:03] *** Joins: mrig (~mrig@user/mrig)
[10:56:20] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[10:58:42] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[11:01:09] *** Joins: amahl (~amahl@dxv5skyhc49fswhfjlcpy-3.rev.dnainternet.fi)
[11:03:16] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[11:06:23] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 272 seconds)
[11:07:42] *** Joins: mrig (~mrig@user/mrig)
[11:12:07] <rudi_s> a3
[11:12:27] <rudi_s> Ups
[11:17:04] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[11:21:36] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[11:23:10] *** Joins: andlabs (~andlabs@68.237.68.71)
[11:25:46] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[11:33:33] *** Quits: frost (~frost@59.71.241.190) (Quit: Connection closed)
[11:33:40] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 245 seconds)
[11:38:33] *** Joins: bodhi1 (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[11:39:06] *** Joins: frost (~frost@59.71.241.190)
[11:42:50] *** Quits: bodhi1 (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[11:50:27] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[12:00:43] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[12:04:13] *** Joins: michelem (~Adium@51.154.167.11)
[12:05:18] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[12:05:53] <michelem> Hi folks! I'd like to get a design opinion from you. I'm building a gRPC application (first time). I use a bunch of self-written modules that expose some structs. As this data gets passed over gRPC, I ended up writing protobuf definitions for the exact same data.
[12:07:29] <michelem> Once the go code is generated from the .proto, I end up having 2 near-identical definitions of the same structs. That's not very DRY, at the same time it makes sense to have the data defined by the modules that master it. What are your thoughts on that? This seems like an everyday problem when building gRPC apps, so I suppose there are patterns or best practices?
[12:09:31] <foobaz> why not use the protobuf structs for everything, and get rid of the other version?
[12:12:28] <michelem> I saw reasons for and against it. On the surface it seems reasonable. At a second view, I see disadvantages. For example, I cannot define private fields; and I am constrained in the module logic by choices driven by network-level concerns rather than software design.
[12:12:42] *** Quits: amahl (~amahl@dxv5skyhc49fswhfjlcpy-3.rev.dnainternet.fi) (Remote host closed the connection)
[12:15:01] <foobaz> regarding private fields, do you mean you want the same fields as in the protobuf struct, but private instead of public?
[12:15:22] <foobaz> or do you mean you want additional fields that are not serialized/deserialized?
[12:16:14] *** Joins: l2dy (~l2dy@user/l2dy)
[12:18:12] *** Joins: avemestr (~avemestr@2a01:4f8:212:2719::2)
[12:19:16] <michelem> exactly, the latter. Fields that may be needed for the internal implementation which are not exposed.
[12:19:46] <foobaz> how about embedding the protobuf struct inside the struct with private fields
[12:20:10] <foobaz> you'll still have two structs, but at least they won't have duplicate fields, and you won't have to manually keep them in sync
[12:21:15] *** Quits: telboon (~telboon@user/telboon) (Quit: Leaving)
[12:21:27] <michelem> I'm thinking how I maintain the mapping between The struct as it's passed around by the library clients, and My struct in which I enveloped it
[12:21:34] *** Joins: telboon (~telboon@user/telboon)
[12:26:22] *** Quits: avemestr (~avemestr@2a01:4f8:212:2719::2) (Quit: WeeChat 1.9.1)
[12:26:36] *** Joins: avemestr (~avemestr@2a01:4f8:212:2719::2)
[12:32:15] *** Quits: Ohlov389517490 (~Ohlov3@dyndsl-085-016-106-106.ewe-ip-backbone.de) (Quit: The Lounge - https://thelounge.chat)
[12:32:49] *** Joins: Ohlov389517490 (~Ohlov3@dyndsl-085-016-106-106.ewe-ip-backbone.de)
[12:36:32] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 268 seconds)
[12:38:26] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[12:38:34] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[12:38:55] *** Joins: mikoto-c1 (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[12:41:53] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 272 seconds)
[12:54:14] *** Quits: kinduff (~kinduff@user/kinduff) (Read error: Connection reset by peer)
[12:54:37] *** Joins: kinduff (~kinduff@user/kinduff)
[12:57:24] *** Quits: kinduff (~kinduff@user/kinduff) (Read error: Connection reset by peer)
[12:57:41] *** Joins: kinduff (~kinduff@user/kinduff)
[12:58:46] *** Quits: kinduff (~kinduff@user/kinduff) (Read error: Connection reset by peer)
[12:59:16] *** Joins: kinduff (~kinduff@user/kinduff)
[13:19:06] *** Joins: itok (sid418430@id-418430.charlton.irccloud.com)
[13:25:55] *** Joins: shka (~herr@109.231.62.239)
[13:30:35] *** Joins: noxim (~noxim@user/noxim)
[13:33:11] *** Quits: michelem (~Adium@51.154.167.11) (Quit: Leaving.)
[13:53:55] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[13:58:40] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[14:02:43] *** Joins: Garb0 (~Garb0@user/garb0)
[14:13:11] *** Joins: michelem (~Adium@51.154.167.11)
[14:19:26] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[14:20:03] *** Joins: rusua (uid124537@id-124537.highgate.irccloud.com)
[14:21:03] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[14:33:47] *** Quits: src (~src@user/src) (Quit: leaving)
[14:38:06] <michelem> I gave a go to the other approach of using the protobuf types in the code. It's highly suboptimal too.
[14:38:10] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[14:40:30] <michelem> 1) You can't import the protobuf package, because that prevents defining methods on the type. So you need to duplicate the protobuf code in each package and adapt the go_package option.
[14:40:46] <michelem>  2) You need to "snoop" into the generated code to extrapolated the various internal names given for the various constants; I found no reason to believe that the stability of those internal names be guaranteed.
[14:41:42] <michelem> 3) You end up writing "protobuf code" instead of go code, to work around the various type restrictions – such as timestamppb instead of time, etc.
[14:42:19] *** Quits: souvik (~souvik@103.199.182.181) (Ping timeout: 252 seconds)
[14:44:08] <michelem> perhaps that works better in some other language, but in go it's a hard or unviable choice. I'm somewhat sorry that neither of the options is really clean – replicate the protobuf type defs vs embed them.
[14:44:58] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Ping timeout: 244 seconds)
[14:48:05] *** Joins: souvik (~souvik@103.199.182.181)
[14:53:46] *** Joins: dr0n (~nabromov@217.138.202.124)
[14:55:10] *** Quits: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Quit: Lost terminal)
[14:55:33] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[15:03:15] *** Joins: milosz (~milosz@user/milosz)
[15:08:55] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[15:14:50] *** Joins: VaniaPy (~VaniaPy@46.12.111.76.dsl.dyn.forthnet.gr)
[15:14:58] <b0nn> michelem: DTO pattern is what you're talking about
[15:15:42] <b0nn> With the handler (gRPC) layer talking to the business layer you're having to decide whether to map (DTO) or use the proto defined by gRPC
[15:16:29] <b0nn> From a modularity POV (IMO) DTO makes more sense in that you can decide to change the interface from gRPC to... REST.. and the BL won't need to know about it
[15:17:04] *** Joins: Progster (~blah@pool-72-80-87-95.nycmny.fios.verizon.net)
[15:17:13] <b0nn> but it comes with the overhead and maintenance of - making sure that the mapping is always uptodate
[15:18:26] *** Parts: VaniaPy (~VaniaPy@46.12.111.76.dsl.dyn.forthnet.gr) ()
[15:21:51] *** purpleid1a is now known as purpleidea
[15:22:09] *** Joins: jhardy (~jhardy@104.4.30.169)
[15:22:38] <michelem> b0nn: that is good input, thank you. It's what I was looking for with my initial question several hours ago.
[15:22:41] *** Joins: Crassus (~Crassus@user/crassus)
[15:23:08] <michelem> Do you have "top-line" considerations that I should account for when looking into it?
[15:23:42] <b0nn> What's "top-line" mean?
[15:24:34] <michelem> :) I mean "typical best practices" or high-level properties that would guide me into one option or the other.
[15:25:16] <b0nn> ok, my POV is heavily influenced by the fact that I <3 hexagonal architecture that makes use of SOLID patterns
[15:25:45] *** jhardy is now known as ibejohn
[15:26:16] <b0nn> https://en.wikipedia.org/wiki/Data_transfer_object
[15:26:46] <b0nn> Where the article says "processes" I see the word "layers" or "services"
[15:28:12] <michelem> Ok, I'll read up. Thanks for the good input 🙏🏻👍🏻
[15:29:12] *** Quits: icy (~icy@user/icy) (Quit: ZNC 1.9.x-nightly-20210409-e0ffdddd - https://znc.in)
[15:35:16] *** Joins: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de)
[15:42:26] *** Joins: michelem1 (~Adium@51.154.167.11)
[15:42:27] *** Quits: michelem (~Adium@51.154.167.11) (Read error: Connection reset by peer)
[15:44:13] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[15:44:18] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[15:46:12] *** Jigsy` is now known as Jigsy
[15:46:39] *** Quits: michelem1 (~Adium@51.154.167.11) (Client Quit)
[15:49:19] *** Joins: fef (~thedawn@user/thedawn)
[15:56:05] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 252 seconds)
[15:58:34] <iivvoo> I'm looking for a gui / widget toolkit that can ideally, compile to wasm and run in a browser. It's for a rather specific tool that should run in a browser but I'm not going to do it in "traditional" js/ts+canvas/html
[15:58:52] <iivvoo> https://github.com/therecipe/qt could be an option - has anyone actually built with that? Any thoughts on its wasm support?
[16:01:51] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[16:04:07] *** Joins: riv (~river@tilde.team/user/river)
[16:04:11] <riv> great
[16:04:21] <riv> i have to learn some entirely new module system thing just to build my code
[16:04:24] <riv> thanks!
[16:11:40] *** Joins: d18n (~d18n@cpc76464-belc9-2-0-cust934.2-1.cable.virginm.net)
[16:22:22] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[16:22:57] <mrig> riv: You could turn modules off if you so chose, a default is not an obligation :)
[16:23:05] <mrig> choose rather.
[16:23:06] <riv> ty
[16:23:16] *** Joins: fef (~thedawn@user/thedawn)
[16:23:25] <riv> I ended up making this
[16:23:33] <riv> https://bpa.st/6QVQ
[16:23:58] <riv> do you know if i need to do anything special after editing the blackfriday code?
[16:24:05] <riv> (my changes don't seem to be happening)
[16:24:14] <mrig> But I do not recommend working on packages simultaneously that have differing git repos.
[16:26:48] *** Quits: ibejohn (~jhardy@104.4.30.169) (Ping timeout: 252 seconds)
[16:30:19] *** Joins: SincereFox (uid337158@user/sincerefox)
[16:30:33] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[16:34:03] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[16:34:15] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[16:34:55] *** Joins: ibejohn (~jhardy@104.4.30.169)
[16:38:33] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[16:40:47] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[16:42:19] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:43:27] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[16:44:31] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Ping timeout: 245 seconds)
[16:45:49] *** Quits: mikoto-c1 (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Quit: mikoto-c1)
[16:46:04] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[16:46:38] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[16:46:56] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[16:49:21] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[17:00:26] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[17:05:27] *** Quits: Snyp (~rksht@49.207.218.69) (Quit: WeeChat 3.1)
[17:06:02] *** Joins: Snyp (~rksht@49.207.218.69)
[17:09:23] *** Joins: klltkr (~klltkr@2a00:23c5:d198:ad01:d8e5:148c:522b:bae7)
[17:09:30] *** Quits: dr0n (~nabromov@217.138.202.124) (Ping timeout: 245 seconds)
[17:09:43] *** Quits: alyx (~alyx@atheme/alyx) (Read error: Connection reset by peer)
[17:10:02] *** Quits: d18n (~d18n@cpc76464-belc9-2-0-cust934.2-1.cable.virginm.net) (Read error: Connection reset by peer)
[17:16:22] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[17:16:48] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[17:17:12] *** Joins: leah2 (~leah@vuxu.org)
[17:21:29] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[17:21:39] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[17:22:33] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 264 seconds)
[17:22:44] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[17:23:30] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:24:32] *** Jigsy` is now known as Jigsy
[17:27:49] *** Joins: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[17:31:16] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:33:45] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:50:20] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[17:50:56] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:64ef:945a:d61f:344)
[17:55:27] *** Joins: baijum (~Guest81@43.229.89.185)
[17:55:27] *** Quits: dmgk (~dmgk@user/dmgk) (Quit: ZNC - https://znc.in)
[17:55:39] *** Joins: dmathieu (~textual@pop.92-184-110-218.mobile.abo.orange.fr)
[17:56:01] *** Quits: cim (~cim@205.185.117.110) (Ping timeout: 272 seconds)
[17:56:09] <Vigdis> I want to write a RSA private key to disk, so I want to encrypt it. I thought about using x509.EncryptPEMBlock() however it's deprecated. I can't find what I should use/do insteand. Any advice?
[17:57:24] *** Joins: pleb66 (~pleb66@user/pleb66)
[17:58:12] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:59:54] *** Joins: cim (~cim@205.185.117.110)
[18:00:04] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[18:00:26] *** Quits: jolan_ (~jolan@ec2.jolan.org) (Quit: leaving)
[18:00:46] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[18:00:59] *** Joins: jolan (~jolan@ec2.jolan.org)
[18:01:14] *** Joins: c10l (~c10l@89.34.167.207)
[18:01:41] *** Quits: pleb66 (~pleb66@user/pleb66) (Client Quit)
[18:01:59] *** Joins: pleb66 (~pleb66@user/pleb66)
[18:02:27] *** Quits: pleb66 (~pleb66@user/pleb66) (Client Quit)
[18:02:47] *** Joins: andlabs (~andlabs@68.237.68.71)
[18:02:53] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[18:03:12] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:64ef:945a:d61f:344) (Quit: WeeChat 3.2)
[18:03:41] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[18:04:40] <riv> if you can avoid implementing a new crypto system you will sav a lot of work
[18:04:57] <riv> i dont know the specifics of your application, but for example GPG implements password protected RSA keys
[18:05:07] <riv> so it maybe possible to integrate with that
[18:05:20] *** Joins: michelem (~Adium@51.154.167.11)
[18:06:47] <michelem> Hi folks. I'm confused by the intended usage of "package main". Am I supposed to have multiple files claiming "package main", to break down my executable? What should be the name of the module in go.mod ?
[18:07:13] *** LSD is now known as acidsys
[18:07:39] <Vigdis> riv, I want to create my own PKI (I actually already have one but https://golang.org/doc/go1.15#commonname is biting me)
[18:08:19] <riv> if you want to discuss the crypto details in depth you could join ##crypto
[18:08:48] *** Joins: opv (~opv@methodsofcontrol.com)
[18:08:49] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 272 seconds)
[18:08:55] <opv> hi all! great name :D
[18:09:04] <Vigdis> I don't want to discuss crypto details, I want to know which go api I should use
[18:09:18] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:09:29] <opv> i got this go repository for an application which seems pretty simple, but theres no build instructions. can you guys tell me the cmds? its github.com/sqshq/sampler
[18:09:30] <Vigdis> michelem, all files in the same dir should have the same package name, the go.mod name should be your repo name (e.g. github/org/reponame)
[18:10:42] *** Joins: Torr (~Torr@170.83.146.97)
[18:10:53] <Vigdis> opv, try `go build`
[18:11:09] *** Joins: mytec (~mytec@ip68-9-156-249.ri.ri.cox.net)
[18:11:26] <opv> thank you kind person :)
[18:11:26] <mrig> j
[18:11:47] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:f8d6:632e:e88e:c51f)
[18:11:47] *** Quits: dmathieu (~textual@pop.92-184-110-218.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:11:56] <michelem> Vigdis: Ok, thank you. If that is the case, any hint as to how I can troubleshoot an error "undefined: MethodName" on go run , provided that "MethodName" is actually defined in another fname.go file in the same directory and also declared as "package main" ?
[18:14:38] <Vigdis> are you the receiver on which the method applies is the same type than what you're trying to call the method on?
[18:15:14] <Vigdis> put the method in the same file and check if it works better otherwise :)
[18:16:22] *** Joins: andlabs (~andlabs@172.58.227.150)
[18:17:02] *** Joins: dmgk (~dmgk@user/dmgk)
[18:17:12] <michelem> My brain has parse error for your first question :) To the second: it works if I paste the whole file2.go into file1.go . (moving the method alone does not help, as the method uses other type defs from the other files, and the error moves to "undefined: MyStruct")
[18:17:13] *** Quits: cim (~cim@205.185.117.110) (Quit: Ping timeout (120 seconds))
[18:17:53] *** Joins: bodhi1 (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[18:18:18] *** Joins: andlabs_ (~andlabs@2607:fb90:f801:5f8:fda1:d668:5cc4:c251)
[18:18:42] *** Joins: cim (~cim@205.185.117.110)
[18:19:26] <Vigdis> oops it was "are you sure [...]"
[18:19:59] <Vigdis> regarding my own question https://github.com/golang/go/commit/57af9745bfad2c20ed6842878e373d6c5b79285a "we can't recommend an alternative" :(
[18:21:30] *** Quits: andlabs (~andlabs@172.58.227.150) (Ping timeout: 272 seconds)
[18:21:48] <Vigdis> michelem, oh I get it, `go run` can use only one file afaik, you should use go build && ./your-artifact
[18:22:17] <michelem> Vigdis: you rock star! Thank you
[18:23:24] *** Parts: opv (~opv@methodsofcontrol.com) ()
[18:23:48] *** Quits: baijum (~Guest81@43.229.89.185) (Ping timeout: 250 seconds)
[18:27:03] *** Quits: andlabs_ (~andlabs@2607:fb90:f801:5f8:fda1:d668:5cc4:c251) (Ping timeout: 272 seconds)
[18:27:18] *** Joins: andlabs (~andlabs@2607:fb90:f804:b3eb:603b:70ed:d966:9543)
[18:29:48] *** Joins: andlabs_ (~andlabs@172.58.230.191)
[18:30:33] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 252 seconds)
[18:30:53] *** Joins: SebastianM (~seba@user/sebastianm)
[18:30:59] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[18:31:21] *** Joins: andlabs__ (~andlabs@2607:fb90:f80c:f387:ddbd:9af0:c374:7f4b)
[18:31:44] *** Quits: andlabs (~andlabs@2607:fb90:f804:b3eb:603b:70ed:d966:9543) (Ping timeout: 252 seconds)
[18:32:43] *** Joins: andlabs (~andlabs@172.58.230.186)
[18:33:10] *** Joins: jespada (~jespada@90.254.242.55)
[18:34:05] *** Quits: andlabs_ (~andlabs@172.58.230.191) (Ping timeout: 245 seconds)
[18:35:43] *** Quits: andlabs__ (~andlabs@2607:fb90:f80c:f387:ddbd:9af0:c374:7f4b) (Ping timeout: 244 seconds)
[18:36:57] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[18:37:30] *** Joins: dmgk_ (~dmgk@user/dmgk)
[18:37:49] *** Quits: jinie (~jimmy@188.114.173.37) (Ping timeout: 272 seconds)
[18:39:01] *** Joins: Crassus (~Crassus@user/crassus)
[18:40:04] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[18:40:18] *** Quits: dmgk_ (~dmgk@user/dmgk) (Client Quit)
[18:40:40] *** Joins: qilx (~quassel@62.201.21.8)
[18:40:57] *** Quits: Chepra (~chepra@summer.c137.eu) (Quit: WeeChat 3.1)
[18:42:26] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: Connection reset by peer)
[18:44:02] *** Quits: Torr (~Torr@170.83.146.97) (Changing host)
[18:44:02] *** Joins: Torr (~Torr@user/torr)
[18:46:11] *** Quits: dmgk (~dmgk@user/dmgk) (Quit: ZNC - https://znc.in)
[18:48:50] *** Joins: dmgk (~dmgk@user/dmgk)
[18:48:56] *** Joins: oxum (~oxum@106.201.113.95)
[18:48:56] *** Joins: Guest88 (~Guest88@2600:1700:1930:16af:95e3:5b21:7212:3e17)
[18:49:24] *** Joins: jinie (~jimmy@188.114.173.37)
[18:50:40] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[18:54:05] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 245 seconds)
[18:56:06] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:56:27] *** Quits: dmgk (~dmgk@user/dmgk) (Quit: ZNC - https://znc.in)
[18:56:27] *** Joins: andlabs_ (~andlabs@2607:fb90:f801:a59c:ecf4:cfef:e0d7:8fc9)
[18:57:04] <bodhi1> Does go:embed work with nested directories?
[18:58:28] *** Joins: andlabs__ (~andlabs@172.58.227.245)
[18:59:13] <bodhi1> ah ignore it should.
[18:59:21] *** Joins: dmgk (~dmgk@user/dmgk)
[18:59:31] *** Quits: andlabs (~andlabs@172.58.230.186) (Ping timeout: 245 seconds)
[18:59:40] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[19:00:04] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 252 seconds)
[19:00:41] *** Joins: andlabs (~andlabs@2607:fb90:f80a:1646:fd31:fc2d:6c06:ec01)
[19:01:26] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:02:06] *** Quits: andlabs_ (~andlabs@2607:fb90:f801:a59c:ecf4:cfef:e0d7:8fc9) (Ping timeout: 264 seconds)
[19:03:15] *** Joins: andlabs_ (~andlabs@172.58.230.159)
[19:04:06] *** Quits: andlabs__ (~andlabs@172.58.227.245) (Ping timeout: 252 seconds)
[19:05:32] *** Joins: andlabs__ (~andlabs@2607:fb90:f80a:5432:590d:865d:edcb:9e58)
[19:06:56] *** Quits: andlabs (~andlabs@2607:fb90:f80a:1646:fd31:fc2d:6c06:ec01) (Ping timeout: 252 seconds)
[19:06:57] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 264 seconds)
[19:07:44] *** Quits: ibejohn (~jhardy@104.4.30.169) (Ping timeout: 272 seconds)
[19:07:57] *** Joins: andlabs (~andlabs@172.58.227.96)
[19:08:40] *** Quits: andlabs_ (~andlabs@172.58.230.159) (Ping timeout: 245 seconds)
[19:11:06] *** Joins: arcatech (~arcatech@user/arcatech)
[19:11:20] *** Joins: andlabs_ (~andlabs@2607:fb90:f809:1fcb:41b7:f2cc:6700:e075)
[19:11:42] *** Quits: andlabs__ (~andlabs@2607:fb90:f80a:5432:590d:865d:edcb:9e58) (Ping timeout: 264 seconds)
[19:11:50] *** Joins: bleloch_ (bleloch@gateway/vpn/protonvpn/bleloch)
[19:12:38] *** Joins: tg (~tg@rockylinux/infra/tg)
[19:14:13] *** Joins: logarus (~logarus@2001:8003:4d47:a500:3cd1:f15:f46c:9bc)
[19:14:13] <Sam> Yes, it does.
[19:14:20] *** Quits: andlabs_ (~andlabs@2607:fb90:f809:1fcb:41b7:f2cc:6700:e075) (Client Quit)
[19:14:33] *** Quits: andlabs (~andlabs@172.58.227.96) (Ping timeout: 252 seconds)
[19:16:07] *** Joins: oxum (~oxum@106.201.113.95)
[19:16:17] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[19:16:31] *** Quits: klltkr (~klltkr@2a00:23c5:d198:ad01:d8e5:148c:522b:bae7) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:16:46] *** bodhi1 is now known as bodhi
[19:17:42] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Read error: Connection reset by peer)
[19:19:16] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[19:19:16] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[19:19:16] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[19:19:17] *** Quits: mytec (~mytec@ip68-9-156-249.ri.ri.cox.net) (Quit: Leaving)
[19:20:24] <bodhi> trying to see if I can post :-)
[19:20:32] <bodhi> yes :-)
[19:23:03] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[19:23:18] *** Quits: michelem (~Adium@51.154.167.11) (Read error: Connection reset by peer)
[19:23:29] *** Joins: michelem (~Adium@51.154.167.11)
[19:26:39] *** Quits: frost (~frost@59.71.241.190) (Ping timeout: 252 seconds)
[19:27:29] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Quit: leaving)
[19:27:41] *** Quits: Guest88 (~Guest88@2600:1700:1930:16af:95e3:5b21:7212:3e17) (Quit: Client closed)
[19:27:44] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[19:27:59] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Ping timeout: 272 seconds)
[19:28:02] *** Joins: michelem1 (~Adium@51.154.167.11)
[19:29:11] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Client Quit)
[19:29:42] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[19:29:45] *** Quits: michelem (~Adium@51.154.167.11) (Ping timeout: 264 seconds)
[19:30:20] *** Joins: ef (~thedawn@user/thedawn)
[19:30:45] *** ef is now known as Guest1368
[19:33:04] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[19:36:34] *** Joins: dr0n (~nabromov@217.138.202.124)
[19:37:27] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Remote host closed the connection)
[19:38:07] *** Joins: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[19:39:11] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[19:41:25] *** Quits: michelem1 (~Adium@51.154.167.11) (Quit: Leaving.)
[19:44:46] *** Joins: emcconville (~emcconvil@c-98-222-200-8.hsd1.in.comcast.net)
[19:46:28] *** Guest1368 is now known as feef
[19:47:22] *** feef is now known as keyboard
[19:47:29] *** keyboard is now known as keyboards
[19:48:11] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Quit: leaving)
[19:49:32] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[19:52:19] *** Joins: minichiello (uid197844@id-197844.tinside.irccloud.com)
[19:53:47] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[19:56:45] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[19:57:52] *** Joins: Chepra (~chepra@summer.c137.eu)
[19:57:55] *** Quits: bleloch_ (bleloch@gateway/vpn/protonvpn/bleloch) (Remote host closed the connection)
[19:58:04] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 268 seconds)
[20:00:24] *** Joins: th0th (uid499569@id-499569.brockwell.irccloud.com)
[20:03:25] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[20:04:10] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Client Quit)
[20:05:33] *** Joins: SebastianM (~seba@user/sebastianm)
[20:07:37] *** Joins: holgersson (~quassel@user/holgersson)
[20:07:42] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[20:08:18] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[20:14:17] *** Joins: jld (~jld@c-24-9-144-115.hsd1.co.comcast.net)
[20:22:38] *** Quits: pez (~pez@westphal.uberspace.de) (Changing host)
[20:22:38] *** Joins: pez (~pez@user/pez)
[20:25:41] *** Joins: icy (~icy@user/icy)
[20:29:09] *** Joins: eck0__ (~Android@047-007-119-133.res.spectrum.com)
[20:30:12] *** Joins: int3l (~int3l@78-83-124-208.spectrumnet.bg)
[20:30:22] *** Joins: eck0___ (~Android@mobile-166-173-62-237.mycingular.net)
[20:30:46] *** Quits: eck0_ (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 245 seconds)
[20:31:11] *** Quits: MrFantastik (~user@2603-7080-ae03-948a-ade1-7856-249c-08f8.res6.spectrum.com) (Ping timeout: 272 seconds)
[20:33:45] *** Quits: eck0__ (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 252 seconds)
[20:36:23] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 272 seconds)
[20:37:33] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[20:40:02] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[20:41:03] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[20:44:19] *** Quits: Chepra (~chepra@summer.c137.eu) (Quit: WeeChat 3.1)
[20:44:41] *** Joins: Chepra (~chepra@summer.c137.eu)
[20:47:01] *** Quits: Chepra (~chepra@summer.c137.eu) (Client Quit)
[20:49:42] *** Quits: oxum (~oxum@106.201.113.95) (Remote host closed the connection)
[20:50:36] *** Joins: Chepra (~chepra@summer.c137.eu)
[20:51:07] *** Joins: oxum (~oxum@106.201.113.95)
[20:56:41] *** Quits: oxum (~oxum@106.201.113.95) (Remote host closed the connection)
[21:01:27] *** Quits: Chepra (~chepra@summer.c137.eu) (Quit: WeeChat 3.1)
[21:01:40] *** Joins: Chepra (~chepra@summer.c137.eu)
[21:02:20] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[21:02:35] *** Joins: oxum (~oxum@106.201.113.95)
[21:03:09] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[21:04:00] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Quit: leaving)
[21:04:33] *** Quits: lemmi (~lemmi@user/lemmi) (Remote host closed the connection)
[21:04:36] *** Quits: pez (~pez@user/pez) (Quit: WeeChat 2.7.1)
[21:04:37] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[21:05:17] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Quit: mikoto-chan)
[21:07:00] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 245 seconds)
[21:07:27] *** Joins: pepee (~user@user/pepee)
[21:08:49] *** Joins: lemmi (~lemmi@user/lemmi)
[21:09:16] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[21:10:43] *** Joins: mytec (~mytec@ip68-9-156-249.ri.ri.cox.net)
[21:12:04] *** Joins: pez (~pez@user/pez)
[21:12:31] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:14:16] *** Quits: lemmi (~lemmi@user/lemmi) (Quit: WeeChat 3.2)
[21:14:27] *** Joins: lemmi (~lemmi@user/lemmi)
[21:16:09] *** Joins: dyslexic1t (~dyslexica@ymir.whatbox.ca)
[21:16:51] *** Quits: lemmi (~lemmi@user/lemmi) (Client Quit)
[21:17:07] *** Joins: lemmi (~lemmi@user/lemmi)
[21:17:50] *** Joins: dkmueller (~dkmueller@2a01:c22:6e41:3300:284c:bb18:ef6f:f2a4)
[21:23:16] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Quit: leaving)
[21:26:44] *** Quits: dkmueller (~dkmueller@2a01:c22:6e41:3300:284c:bb18:ef6f:f2a4) (Ping timeout: 244 seconds)
[21:30:57] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:35:00] *** Joins: publio (~publio@5.2.79.154)
[21:39:27] *** Joins: dkmueller (~dkmueller@2a01:c22:6e41:3300:284c:bb18:ef6f:f2a4)
[21:41:02] *** Joins: dmathieu (~textual@pop.92-184-110-218.mobile.abo.orange.fr)
[21:46:40] *** Joins: oxum (~oxum@106.201.113.95)
[21:53:02] *** Quits: dmathieu (~textual@pop.92-184-110-218.mobile.abo.orange.fr) (Ping timeout: 272 seconds)
[21:55:42] *** Quits: minichiello (uid197844@id-197844.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[21:56:45] *** Quits: dyslexic1t (~dyslexica@ymir.whatbox.ca) (Ping timeout: 264 seconds)
[21:57:28] *** fjmorazan_ is now known as fjmorazan
[22:00:13] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[22:02:47] *** Joins: Vukan (~drazen@62.240.24.153)
[22:03:29] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[22:03:41] *** Quits: oxum (~oxum@106.201.113.95) (Remote host closed the connection)
[22:04:41] *** Joins: oxum (~oxum@106.201.113.95)
[22:05:45] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 245 seconds)
[22:08:25] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[22:08:44] *** Joins: notepad (~notepad@129.159.46.243)
[22:12:52] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[22:15:17] *** Joins: noxim82 (~noxim@user/noxim)
[22:15:23] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[22:16:33] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 264 seconds)
[22:16:42] *** noxim82 is now known as noxim
[22:19:31] *** Parts: falsifian (~falsifian@exoco.falsifian.org) ()
[22:21:48] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[22:28:40] *** Quits: dr0n (~nabromov@217.138.202.124) (Ping timeout: 245 seconds)
[22:30:23] *** Quits: Vukan (~drazen@62.240.24.153) (Ping timeout: 272 seconds)
[22:35:40] *** Quits: keyboards (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[22:40:45] *** Joins: oxum (~oxum@106.201.113.95)
[22:44:57] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[22:46:09] *** Quits: oxum (~oxum@106.201.113.95) (Remote host closed the connection)
[22:48:54] *** Quits: dkmueller (~dkmueller@2a01:c22:6e41:3300:284c:bb18:ef6f:f2a4) (Ping timeout: 264 seconds)
[22:50:46] *** Joins: dkmueller (~dkmueller@dynamic-077-002-119-164.77.2.pool.telefonica.de)
[22:54:40] *** Joins: oxum (~oxum@106.201.113.95)
[22:58:01] *** Joins: Ohlov3895174903 (~Ohlov3@dyndsl-091-248-236-022.ewe-ip-backbone.de)
[23:01:36] *** Quits: Ohlov389517490 (~Ohlov3@dyndsl-085-016-106-106.ewe-ip-backbone.de) (Ping timeout: 245 seconds)
[23:07:33] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 264 seconds)
[23:09:24] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[23:16:22] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:16:47] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:5d20:8abb:c69e:4e8f)
[23:19:29] *** Joins: SebastianM (~seba@user/sebastianm)
[23:21:09] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:819a:333a:30f2:f49a)
[23:21:35] *** Parts: ctrypoph (~ctrypoph@2600:1702:3000:9090:819a:333a:30f2:f49a) ()
[23:24:49] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[23:29:12] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[23:36:29] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[23:37:30] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Remote host closed the connection)
[23:38:20] *** Joins: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[23:40:50] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:5d20:8abb:c69e:4e8f) (Read error: Connection reset by peer)
[23:41:11] *** Quits: mytec (~mytec@ip68-9-156-249.ri.ri.cox.net) (Ping timeout: 245 seconds)
[23:41:11] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:41:26] *** Joins: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de)
[23:42:44] *** Joins: purpleidea (~james@user/purpleidea)
[23:42:48] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[23:43:23] *** Joins: mytec (~mytec@ip68-9-156-249.ri.ri.cox.net)
[23:43:35] *** Quits: dkmueller (~dkmueller@dynamic-077-002-119-164.77.2.pool.telefonica.de) (Remote host closed the connection)
[23:44:02] *** Joins: dkmueller (~dkmueller@2a01:c22:6e41:3300:284c:bb18:ef6f:f2a4)
[23:45:38] *** Quits: dkmueller (~dkmueller@2a01:c22:6e41:3300:284c:bb18:ef6f:f2a4) (Client Quit)
[23:48:00] *** Joins: dkmueller (~dkmueller@dynamic-077-002-119-164.77.2.pool.telefonica.de)
[23:50:53] *** Quits: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:56:25] *** Quits: dkmueller (~dkmueller@dynamic-077-002-119-164.77.2.pool.telefonica.de) (Quit: WeeChat 3.1)
