[01:02:46] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[01:03:15] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:06:04] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[01:06:30] <KeepCoding> Hey, so I have the "schema" variable and in order to deploy the app I have to provide the connection data for which I use the "->dsn" as showed in the documentation (https://metacpan.org/pod/Test::PostgreSQL#SYNOPSIS)
[01:06:32] <Paperbot> Link title(s): [ Test::PostgreSQL - PostgreSQL runner for tests - metacpan.org ]
[01:06:37] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[01:07:02] <KeepCoding> Is working fine, but I want to ignore the version of the schema because I only use this for testing
[01:08:32] <KeepCoding> I can hard-code this like so: {'dbi:Pg:dbname=test;host=127.0.0.1;port=15432', 'postgres', '', {ignore_version => 1});}", but I was wandering if somebody can knows how to "ignore" the schema version while using the "->dsn" field
[01:19:02] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[01:20:50] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:21:02] <Botje> what prevents you from doing so now?
[01:21:12] <Botje> ->dsn just generates that single dbi:pg:... string
[01:23:19] <Botje> also, what exactly supports this ignore_version thing?
[01:25:58] <Botje> I can't find any documentation about it.
[01:26:11] <Botje> KeepCoding: ^
[01:28:32] *** Quits: martinus__ (~martin@201.28.201.77.rev.sfr.net) (Ping timeout: 240 seconds)
[01:31:39] *** Quits: jpn_ (~jpn@user/jpn) (Ping timeout: 252 seconds)
[01:33:39] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[01:38:35] <KeepCoding> is a dbi_argument
[01:38:51] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[01:39:25] <KeepCoding> the connection_string is made by [$dsn, $user, $password, %dbi_arguments, %extra_arguments]
[01:39:47] <KeepCoding> But I don't want to hard-code the $dsn
[01:40:11] <KeepCoding> As I showed above
[01:42:23] *** Joins: kevin-oculus (~kevin-ocu@c188-149-14-10.bredband.tele2.se)
[01:43:26] <buu> KeepCoding: Are you saying the dsn method generates the datastructure or what?
[01:43:39] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[01:44:10] <buu>  
[01:44:11] <buu> sub dsn {
[01:44:11] <buu>     my %args = shift->_default_args(@_);
[01:44:11] <buu>  
[01:44:11] <buu>     return 'DBI:Pg:' . join(';', map { "$_=$args{$_}" } sort keys %args);
[01:45:31] <buu> Looks like you just do ->connect(x->dsn, {ignore_version}) or something
[01:46:12] <simcop2387> paster!
[01:46:20] <KeepCoding> Yeah, I thought that too, but it doesn't seem to work
[01:46:20] <buu> fight me
[01:46:27] <KeepCoding> I'm not sure why
[01:46:30] *** ChanServ sets mode: +o simcop2387
[01:46:33] <simcop2387> perlbot: battle of buu
[01:46:33] <perlbot> simcop2387: The two Buu's battle each other until Good Buu unleashes his conversion beam on Evil Buu. Being more powerful, Evil Buu simply reflects it right back. Good Buu is turned into a piece of chocolate and eaten by Evil Buu, resulting in Super Buu.
[01:46:43] <buu> SUPER BUU
[01:46:46] *** simcop2387 sets mode: -oooo buu KeepCoding perlbot simcop2387
[01:46:48] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:47:01] <buu> KeepCoding: what exactly did you try?
[01:47:37] <KeepCoding> ->connect($pgsql->dsn, {ignore_version => 1})
[01:48:15] <KeepCoding> I keep getting this error: "Your DB is currently unversioned. Please call upgrade on your schema to sync the DB."
[01:48:52] <KeepCoding> Even if I use that extra argument
[01:48:57] <buu> And it works fine if you manually connect using the ignore flag?
[01:49:53] <KeepCoding> It works fine anyway, I just get that warning
[01:50:04] <buu> You can also define connection attribute values within the $data_source parameter. For example: dbi:DriverName(PrintWarn=>0,PrintError=>0,Taint=>1):...
[01:50:33] <buu> Who uses ignore_version anyways
[01:51:08] <buu> I don't see it documented on any of of these pages
[01:51:28] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[01:51:50] <KeepCoding> "Who uses ignore_version anyways" => The guys that created the project I'm working on
[01:52:15] <buu> KeepCoding: So how are you supposed to tell these guys you want to use it?
[01:52:46] <KeepCoding> I can't find it in the documentation eather, that's why I come here
[01:52:56] <buu> Well, I didn't write it
[01:55:51] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[01:56:42] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:57:02] *** Quits: magla (~gelignite@d5363125.access.ecotel.net) (Quit: Stay safe!)
[02:04:02] *** Quits: wingfold (~wingfold@173.38.117.90) (Ping timeout: 240 seconds)
[02:06:55] * GumbyPAN CPAN Upload: Mojolicious-Plugin-Route-0.06 by LTM https://metacpan.org/release/LTM/Mojolicious-Plugin-Route-0.06
[02:08:13] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[02:13:02] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[02:13:02] *** Quits: anthk_ (~anthk_@113.85-85-9.dynamic.clientes.euskaltel.es) (Ping timeout: 240 seconds)
[02:13:22] *** Joins: jpn (~jpn@user/jpn)
[02:16:56] * GumbyPAN CPAN Upload: Webservice-Judobase-0.005 by LANCEW https://metacpan.org/release/LANCEW/Webservice-Judobase-0.005
[02:21:42] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 252 seconds)
[02:21:56] * GumbyPAN welcomes CCEBINGER - Carl-Clemens Ebinger to CPAN!
[02:22:04] *** Joins: anthk_ (~anthk_@113.85-85-9.dynamic.clientes.euskaltel.es)
[02:22:07] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[02:26:57] * GumbyPAN CPAN Upload: Alien-proj-1.22 by SLAFFAN https://metacpan.org/release/SLAFFAN/Alien-proj-1.22
[02:29:57] *** Quits: anthk_ (~anthk_@113.85-85-9.dynamic.clientes.euskaltel.es) (Ping timeout: 240 seconds)
[02:29:59] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:32:38] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[02:32:40] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Client Quit)
[02:35:38] *** Joins: jpn (~jpn@user/jpn)
[02:36:09] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:36:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:38:35] *** Joins: anthk_ (~anthk_@113.85-85-9.dynamic.clientes.euskaltel.es)
[02:44:47] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 252 seconds)
[02:47:55] *** Joins: jpn (~jpn@user/jpn)
[02:51:17] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[02:52:45] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[02:53:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[02:53:03] *** Quits: KeepCoding (~KeepCodin@188.27.132.38) (Remote host closed the connection)
[02:57:00] * GumbyPAN CPAN Upload: Webservice-Judobase-0.06 by LANCEW https://metacpan.org/release/LANCEW/Webservice-Judobase-0.06
[03:05:39] *** Joins: whynot (~whynot@37.73.70.106)
[03:09:19] *** Joins: monkey_ (~user@190.104.116.153)
[03:11:20] *** Quits: waltman (waltman@2601:4a:701:4451:a31c:1629:7abe:863e) (Quit: leaving)
[03:12:16] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[03:13:36] *** Quits: proller (~p@2a02:6b8:b081:20::1:21) (Ping timeout: 268 seconds)
[03:14:46] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:16:51] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:17:28] *** Joins: waltman (waltman@2601:4a:701:4451:d111:4104:6be1:f932)
[03:23:09] <aquanight> 10:01:33/6AF17 < LeoNerd> aquanight: I've read that four times now and I can't actually work out what the question is ## basically
[03:23:29] <aquanight> how much of the "entersub cost" is *specfically @_*
[03:23:57] <aquanight> or would it equally exist if the parameter target was something else
[03:25:22] <aquanight> the way I look at it, when considering a sub to inline, I'd have to figure out how to deal with the arguments. The best case is a sub that only ever accesses each argument once and the argument list is a fixed-size list of scalars: I could theoretically emplace the argument expression directly.
[03:26:11] <aquanight> then there's the "worst case" where I basically have to assign the argument list to a manually prepared @_, e.g. the equivalent of do { local @_ = <arg expressions>; <inlined sub> }
[03:27:24] <aquanight> (I haven't even sorted out return values yet.)
[03:28:24] <aquanight> the key being: is there a difference between 'local @_ = ...;' and 'my @some_array = ...;' in terms of performance here? If I'm already having to pack the arguments into an array so the inlined sub can behave correctly, is there any point in said array being anything other than @_ ?
[03:32:38] *** Quits: pizdets_ (~pizdets@183.182.114.133) (Ping timeout: 252 seconds)
[03:33:58] *** Joins: pizdets (~pizdets@183.182.115.102)
[03:34:47] <LeoNerd> No, it's the same cost
[03:34:56] <LeoNerd> The point of optimising it away is there's no point in *two* copies
[03:35:03] *** Joins: proller (~p@80.240.216.69)
[03:35:06] <LeoNerd> caller -> @_ -> sub. vs  caller -> sub
[03:37:28] *** Quits: e1f (~user@user/e1f) (Quit: poke her)
[03:44:05] <rewt> do { local @_ = <arg expressions>; <inlined sub> }  wouldn't really be equivalent;  in a sub, @_ holds aliases to the passed in args, but in this case it would be copies
[03:44:32] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[03:45:41] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 256 seconds)
[03:45:43] *** Quits: hodbogi (~fatalnix@user/fatalnix) (Quit: Lost terminal)
[03:46:09] <rewt> eval: sub x { $_[0]++ } $x = 0; x($x); $x;
[03:46:11] <perlbot> rewt: 1
[03:46:19] <rewt> eval: $x = 0; do { local @_ = $x; $_[0]++ }; $x;
[03:46:21] <perlbot> rewt: 0
[04:09:15] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 256 seconds)
[04:20:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[04:20:35] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 256 seconds)
[04:20:54] *** Joins: proller (~p@2a02:6b8:b081:b407::1:10)
[04:24:09] *** Quits: quernd (~quernd@boethin.uberspace.de) (Quit: Ping timeout (120 seconds))
[04:24:29] *** Joins: quernd (~quernd@boethin.uberspace.de)
[04:25:30] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Read error: Connection reset by peer)
[04:28:10] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[04:33:23] *** Joins: Trigon (~reuben@144.39.114.115)
[04:36:52] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:38:57] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Ping timeout: 256 seconds)
[04:42:12] * GumbyPAN CPAN Upload: Alien-7zip-0.01 by ZMUGHAL https://metacpan.org/release/ZMUGHAL/Alien-7zip-0.01
[04:45:06] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[04:46:02] *** Quits: dacav (~dacav@h94-245-9-196.cust.a3fiber.se) (Ping timeout: 240 seconds)
[04:47:13] * GumbyPAN CPAN Upload: App-Greple-8.5701 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-Greple-8.5701
[04:49:19] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:51:22] <aquanight> rewt: the point will be to alias, yes, it's not something easily expressible in perl though
[04:51:56] <aquanight> as I don't *think* you can do \(@_) = \(arbitrary list)
[04:52:13] <aquanight> sweval: my @x; \(@x) = \(1..10); \@x;
[04:52:15] <perlbot> aquanight: [1,2,3,4,5,6,7,8,9,10]
[04:52:26] <aquanight> well then
[04:52:31] <aquanight> that makes it a bit easier
[04:53:16] *** Joins: lureevar (~lureevar@2804:d45:477e:f300:9067:d28f:c8b4:79db)
[04:53:23] <aquanight> LeoNerd: so then I'm understanding there's no point in inlining if I'm forced to setup an argument array of some sort, whether it's @_ or something else.
[04:53:37] <aquanight> That the only timesave can occur if I can emplace argument expressions into the inlined code
[04:54:49] *** Quits: lureevar (~lureevar@2804:d45:477e:f300:9067:d28f:c8b4:79db) (Client Quit)
[04:56:08] <aquanight> I suppose there might be some options to do deep optree analysis for things like unrolling loops based on what is known about the argument list. (E.g. for (@_) situations can be unrolled with an argument list of known size.)
[04:59:47] *** Joins: zmac (~zelda@97-113-136-234.tukw.qwest.net)
[05:01:51] <cjac> LeoNerd: I heard that you're talking with curtis about an object model syntax thing.
[05:02:15] * GumbyPAN CPAN Upload: MooX-TaggedAttributes-0.15 by DJERIUS https://metacpan.org/release/DJERIUS/MooX-TaggedAttributes-0.15
[05:02:18] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 252 seconds)
[05:03:01] <cjac> buu: BUPER SUU
[05:06:11] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[05:09:01] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:11:17] <cjac> buu: are you in Seattle these days?  I'm trying to get a third tuesday meeting going in April
[05:11:25] <cjac> ingy1: sames goes for you
[05:15:27] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[05:16:32] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 240 seconds)
[05:17:30] *** Joins: XV9 (~XV8@2601:5cb:c001:50::94d3)
[05:17:47] *** Joins: grunge (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:18:02] *** grunge is now known as CrazyEddy
[05:19:24] *** Quits: XV8 (~XV8@2601:5cb:c001:50:f138:1e1a:7095:9508) (Ping timeout: 240 seconds)
[05:21:12] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[05:23:47] *** Joins: microscopy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:24:02] *** microscopy is now known as CrazyEddy
[05:25:38] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[05:25:59] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[05:26:22] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[05:26:43] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[05:27:07] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[05:27:30] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[05:27:53] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[05:30:30] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:35:04] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[05:38:39] *** Quits: Croran (~Croran@71.231.214.173) (Quit: leaving)
[05:41:19] * GumbyPAN CPAN Upload: Image-Randim-0.09 by SEATEK https://metacpan.org/release/SEATEK/Image-Randim-0.09
[05:42:17] *** Quits: whynot (~whynot@37.73.70.106) (Quit: leaving)
[05:47:23] *** Quits: Pali (~pali@user/pali) (Ping timeout: 250 seconds)
[06:04:41] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:13:50] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:22:22] *** Joins: Russell- (russell@bnc4free/staff/russell)
[06:22:34] *** Quits: Russell (russell@bnc4free/staff/russell) (Ping timeout: 260 seconds)
[06:23:05] *** Russell- is now known as Russell
[06:23:38] *** Quits: SpiceMan (~Don_Spice@user/SpiceMan) (Remote host closed the connection)
[06:25:10] *** Joins: SpiceMan (~Don_Spice@user/SpiceMan)
[06:29:18] *** Joins: dacav (~dacav@h94-245-9-200.cust.a3fiber.se)
[06:43:37] *** Quits: Su-Shee (~Susanne@202-109-142-46.pool.kielnet.net) (Ping timeout: 256 seconds)
[06:45:07] *** Joins: Su-Shee (~Susanne@98-125-142-46.pool.kielnet.net)
[06:49:34] *** Joins: Trigon (~reuben@144.39.114.115)
[06:50:15] <tm604> cjac: it's a bit more than just talk, see https://metacpan.org/pod/Object::Pad for a prototype implementation
[06:50:24] <Paperbot> Link title(s): [ Object::Pad - a simple syntax for lexical field-based objects - metacpan.org ]
[06:52:32] *** Quits: kevin-oculus (~kevin-ocu@c188-149-14-10.bredband.tele2.se) (Ping timeout: 240 seconds)
[06:52:32] *** Quits: vrurg (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[06:52:44] *** Joins: vrurg (~vrurg@45.74.95.181)
[06:55:55] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[06:58:21] *** Quits: vrurg (~vrurg@45.74.95.181) (Ping timeout: 252 seconds)
[07:07:32] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 240 seconds)
[07:14:21] *** Joins: vrurg (~vrurg@45.74.95.181)
[07:14:21] *** Quits: vrurg_ (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[07:14:56] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[07:15:29] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[07:20:37] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[07:21:00] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[07:25:13] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:40:51] *** Joins: Norkle_ (~norkle@admin.nasa-g0v.com)
[07:40:51] *** Joins: elcaro_ (~anonymous@45.32.191.75)
[07:40:53] *** Joins: thowe_ (~thowe@66.39.169.133)
[07:40:54] *** Joins: _DaTa (~DaTa@user/data)
[07:40:56] *** Joins: merpader1 (~ircuser@89.111.36.243)
[07:41:02] *** Joins: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[07:41:06] *** Joins: asdflkj1 (~asdflkj@bsdforall.org)
[07:41:08] *** Joins: mplsCorwin (someone@fosshost/director/corwin)
[07:41:08] *** Joins: perldoc_ (~perldoc@24.88.46.213)
[07:41:10] *** Joins: earthbre- (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[07:41:29] *** Quits: thowe (~thowe@66.39.169.133) (*.net *.split)
[07:41:29] *** Quits: perldoc (~perldoc@2603-6081-6402-7801-ccfb-fc51-df28-5e01.res6.spectrum.com) (*.net *.split)
[07:41:29] *** Quits: asdflkj_sh (asdflkj@2605:6400:10:fe:bebd:57ba:41a5:636d) (*.net *.split)
[07:41:29] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[07:41:29] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[07:41:29] *** Quits: merpaderp (~ircuser@89.111.36.243) (*.net *.split)
[07:41:29] *** Quits: splatt990 (4b25e29db1@198.108.77.17) (*.net *.split)
[07:41:29] *** Quits: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net) (*.net *.split)
[07:41:29] *** Quits: peetee (c0ce52d876@user/peetee) (*.net *.split)
[07:41:29] *** Quits: corwin (someone@fosshost/director/corwin) (*.net *.split)
[07:41:29] *** Quits: DaTa (~DaTa@user/data) (*.net *.split)
[07:41:29] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[07:41:29] *** Quits: gko` (~user@user/gko) (*.net *.split)
[07:41:29] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[07:41:29] *** Quits: judabuda (kowbunga@user/judabuda) (*.net *.split)
[07:41:29] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[07:41:29] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[07:41:29] *** _DaTa is now known as DaTa
[07:41:29] *** perldoc_ is now known as perldoc
[07:42:06] *** Joins: gko`` (~user@2400:8902::f03c:91ff:fe70:e605)
[07:42:16] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:43:43] *** Norkle_ is now known as Norkle
[07:43:56] *** Joins: mcint1 (mcint@pox.ocf.berkeley.edu)
[07:45:23] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[07:47:30] *** Joins: judabuda (kowbunga@kowbunga.thunderirc.net)
[07:58:33] *** Joins: peetee (c0ce52d876@198.108.77.17)
[08:19:14] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[08:23:03] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[08:31:38] * GumbyPAN CPAN Upload: JSON-Schema-Modern-0.549 by ETHER https://metacpan.org/release/ETHER/JSON-Schema-Modern-0.549
[08:33:05] *** Joins: monkey_ (~user@190.104.116.153)
[08:37:49] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[08:38:42] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[08:41:08] *** Quits: Trigon (~reuben@144.39.114.115) (Read error: Connection reset by peer)
[08:42:41] *** Quits: v` (~v@user/ctrl) (Ping timeout: 250 seconds)
[08:47:30] *** Joins: Trigon (~reuben@144.39.114.115)
[08:55:05] <buu_> cjac: sorry, austin
[08:56:06] *** Quits: Peppard (~quassel@2001:470:1f0b:751:3f32:b925:3e03:a2f1) (Ping timeout: 260 seconds)
[08:57:41] *** Joins: Peppard (~quassel@2001:470:1f0b:751:d395:aecb:1000:d2da)
[08:59:06] *** Joins: k8yun (~k8yun@user/k8yun)
[09:06:52] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:07:39] *** Joins: dansan (~daniel@75.81.148.51)
[09:21:26] *** Joins: Martchus_ (~martchus@2a01:c23:c0da:2d00:d250:99ff:fe49:3cce)
[09:22:14] *** Quits: Martchus (~martchus@dynamic-077-007-087-072.77.7.pool.telefonica.de) (Ping timeout: 260 seconds)
[09:38:17] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[09:46:05] *** Quits: japh (~scp1@user/japh) (Ping timeout: 252 seconds)
[09:46:24] *** Joins: japh (~scp1@user/japh)
[09:47:17] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[09:52:27] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[09:54:29] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[09:57:15] *** buu_ is now known as buu
[10:01:25] *** Joins: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net)
[10:02:21] <vms14> https://termbin.com/7rrk now it's even worse than before
[10:02:53] <vms14> I've made a very dirty hack to add strings just because I'm doing split " ", to the whole text
[10:03:57] <vms14> forth::execute_text(': meh 1 2 3 ; : oh meh + + .s ; oh meh 9 8 7 "my cat is ~a very ~a nice ~% and you should know it" .s') prints 1 2 3 6 1 2 3 9 my cat is 7 very 8 nice \n and you should know it
[10:04:37] <vms14> ~a takes an item of the stack and inserts it
[10:04:44] <vms14> ~% is a newline
[10:06:49] * GumbyPAN CPAN Upload: Log-Log4perl-Tiny-1.6.0 by POLETTIX https://metacpan.org/release/POLETTIX/Log-Log4perl-Tiny-1.6.0
[10:08:11] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:08:47] *** Quits: dansan (~daniel@75.81.148.51) (Quit: The C preprocessor is a pathway to many abilities some consider to be unnatural.)
[10:11:55] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:698f:94dd:b270:5a5c) (Ping timeout: 256 seconds)
[10:14:19] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[10:20:12] *** Joins: jplesnik (~jplesnik@83.240.62.151)
[10:23:36] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:24:27] *** Quits: R2robot_ (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[10:30:18] *** Joins: R2robot (~R2robot@user/r2robot)
[10:36:32] *** Joins: ekathva (~ekathva@2001:999:50:7590:b428:f6a6:94c7:d128)
[10:39:01] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[10:40:49] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 256 seconds)
[10:44:16] *** Joins: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi)
[10:50:17] *** thowe_ is now known as thowe
[10:51:34] *** Quits: gko`` (~user@2400:8902::f03c:91ff:fe70:e605) (Quit: ERC (IRC client for Emacs 27.2))
[10:52:24] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 268 seconds)
[10:53:10] *** Joins: gko (~user@user/gko)
[10:54:55] *** Quits: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:56:05] *** Joins: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi)
[10:58:20] *** Quits: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:58:46] *** Joins: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi)
[10:59:02] *** Quits: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:59:15] *** Joins: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi)
[11:05:37] *** Quits: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi) (Remote host closed the connection)
[11:06:03] *** Joins: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi)
[11:08:08] *** Quits: ekathva (~ekathva@2001:999:50:7590:b428:f6a6:94c7:d128) (Remote host closed the connection)
[11:08:26] *** Joins: ekathva (~ekathva@2001:999:50:7590:3e0c:28bd:f451:9781)
[11:11:53] *** Quits: mattil (~mattil@d5z9twsjm3l1r8pnczt-4.rev.dnainternet.fi) (Ping timeout: 252 seconds)
[11:16:39] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:18:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:18:52] *** Joins: mattil (~mattil@d5z9txtqvzmxc523x2y-4.rev.dnainternet.fi)
[11:19:35] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:20:47] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[11:20:51] *** Quits: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[11:21:20] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[11:23:19] *** Quits: mattil (~mattil@d5z9txtqvzmxc523x2y-4.rev.dnainternet.fi) (Ping timeout: 256 seconds)
[11:28:58] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[11:31:05] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[11:31:32] *** Quits: randir (~randir@95-25-111-216.broadband.corbina.ru) (Remote host closed the connection)
[11:34:01] *** Joins: veesh (~veesh@5.28.156.164)
[11:35:33] *** Quits: Su-Shee (~Susanne@98-125-142-46.pool.kielnet.net) (Ping timeout: 252 seconds)
[11:37:06] *** Joins: Su-Shee (~Susanne@204-108-142-46.pool.kielnet.net)
[11:46:14] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[11:47:13] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[11:55:56] *** Quits: gk_ (~irkk@debrecziner.extrawurst.systems) (Remote host closed the connection)
[11:57:17] *** Joins: gk_ (~irkk@debrecziner.extrawurst.systems)
[12:01:35] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:03:09] *** Joins: R2robot (~R2robot@user/r2robot)
[12:18:51] *** Joins: kevin-oculus (~kevin-ocu@c188-149-14-10.bredband.tele2.se)
[12:21:14] *** Joins: art1 (~romeyke@p200300ccdf043b003c86b19ea57fb774.dip0.t-ipconnect.de)
[12:25:37] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 240 seconds)
[12:31:36] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:33:49] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 256 seconds)
[12:35:29] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[12:37:45] *** Joins: mexen_wfh (uid495612@id-495612.ilkley.irccloud.com)
[12:37:51] *** Quits: vrurg (~vrurg@45.74.95.181) (Ping timeout: 268 seconds)
[12:49:40] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:52:18] *** Joins: ekathva_ (~ekathva@2001:999:50:a96:4ee5:c816:f561:d86f)
[12:53:20] *** Joins: choroba (~E.Choroba@88.146.255.106)
[12:54:44] *** Quits: ekathva (~ekathva@2001:999:50:7590:3e0c:28bd:f451:9781) (Ping timeout: 252 seconds)
[12:57:35] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 268 seconds)
[12:59:40] *** Quits: sokan (~sokan@85.73.229.195) (Quit: Reality.is.a.lie)
[13:23:24] *** Joins: Pali (~pali@user/pali)
[13:38:12] *** Quits: gbristol (gbristol@hermes.gbristol.net) (Ping timeout: 252 seconds)
[13:38:38] *** Joins: gbristol (gbristol@hermes.gbristol.net)
[13:44:18] *** Joins: ccntrq (~Thunderbi@2a01:c23:8960:6a00:997e:ae12:2988:d2c3)
[13:45:24] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:47:24] *** Quits: Pali (~pali@user/pali) (Ping timeout: 240 seconds)
[13:47:49] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[13:50:32] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4.1)
[13:51:49] *** Quits: surrounder (~surrounde@user/surrounder) (Remote host closed the connection)
[13:52:19] *** Joins: surrounder (~surrounde@tanaka.surrounder.nl)
[13:53:41] *** Joins: Furai (~Furai@furai.pl)
[14:00:59] *** Joins: randir (~randir@93.159.239.42)
[14:06:02] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[14:08:29] *** Joins: floppy_disk (~floppy_di@user/floppy-disk/x-6577422)
[14:16:02] <floppy_disk> how do you define a reference to a Class::Tiny setter? i am trying to iterate over a list of setters, but `\&$self->bees' gives a `Not a CODE reference' error.
[14:18:01] <haarg> the same as any method
[14:18:16] <haarg> $object->can('bees')
[14:18:39] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 256 seconds)
[14:18:55] <haarg> but it is only a reference to the sub - you'd still need to pass in the object when calling it
[14:19:08] <floppy_disk> i see, thanks
[14:20:34] <haarg> another option something like sub { $object->bees(@_) }
[14:20:51] <haarg> but you haven't shared what the actual problem you are trying to solve is
[14:22:41] *** Joins: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de)
[14:29:59] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[14:30:29] <LeoNerd> Yeah we don't have true method references, you'll have to make a closure
[14:34:47] <LeoNerd> As part of the giant sprawling monstrosity that is `use feature 'class'` I might consider permitting `$obj->\&method` as a referencing operator
[14:34:54] <LeoNerd> ->\&  is four symbols
[14:36:39] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[14:40:59] *** Joins: wingfold (~wingfold@173.38.117.89)
[14:43:25] <aquanight> "true method references" wut?
[14:46:30] <LeoNerd> Actually, I could write a Syntax::Operator::MethodRef to add the synta
[14:46:33] <LeoNerd> +x
[14:46:44] <LeoNerd> aquanight: Imagine if a CV ref could store the $self as well
[14:46:54] <LeoNerd> So rather than a full closure, you just store the combined CV + $self RV
[14:47:06] <LeoNerd> Then invoking it would be more efficient too
[14:47:42] <aquanight> I figured that's where you were going with it.
[14:48:09] <LeoNerd> A CPAN module could add the syntax but it would be stored with a regular closure
[14:48:17] <LeoNerd> It might make a nice addition as a real core feature though one day
[14:49:25] *** Quits: veesh (~veesh@5.28.156.164) (Remote host closed the connection)
[14:49:49] *** Quits: art1 (~romeyke@p200300ccdf043b003c86b19ea57fb774.dip0.t-ipconnect.de) (Quit: Leaving.)
[14:50:50] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:50:59] *** Joins: veesh (~veesh@5.28.156.164)
[14:52:01] <aquanight> you know, it'd even solve the problem with.. I want to think it was to do with private methods and having them close over $self which sucked because CV cloning is awful.
[14:52:40] <LeoNerd> Have you seen the way we've attacked private methods in Object::Pad so far?
[14:52:47] *** Joins: PancakeMatsuri_ (~tofu~@222-152-174-14-fibre.sparkbb.co.nz)
[14:52:49] <aquanight> method $thing I believe
[14:53:00] <LeoNerd> https://metacpan.org/pod/Object::Pad#method-(lexical)
[14:53:01] <Paperbot> Link title(s): [ Object::Pad - a simple syntax for lexical field-based objects - metacpan.org ]
[14:53:01] <LeoNerd> Yup
[14:53:15] *** Joins: Darkcoal (~user@user/Darkcoal)
[14:53:34] <aquanight> yeah I think I remember trying to suggest something related to the core lexical subs approach
[14:53:45] <aquanight> and it was awful because CV cloning
[14:54:21] *** Quits: PancakeMatsuri (~tofu~@222.155.102.190) (Ping timeout: 256 seconds)
[14:55:08] <aquanight> but if we had this "CV with $self" reference it'd fix that problem.
[14:57:12] <LeoNerd> It would
[14:57:43] <floppy_disk> seems like a good idea
[14:59:20] <aquanight> of course, the other solution would be inlining but ... well. Trying to inline subs in perl is a recipe for 47 simultaneous headaches apparently.
[15:00:14] <LeoNerd> Hrm.. *counts* I'm not sure I could enumerate all 47 of them, but yes.. I can imagine inlining is nontrivial
[15:00:20] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Quit: Awaru)
[15:00:38] <LeoNerd> Things like caller() get in the way. Since functions can inspect their callstack, there's always lots of optimisations you can't make in case someone notices you doing it
[15:00:54] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[15:00:57] <LeoNerd> E.g. even if we had true method refs in core, we couldn't optimise   sub { $obj->meth(@_) }  into it, because someone might inspect caller()
[15:01:19] <LeoNerd> ... I say "couldn't". Actually that's a lie
[15:01:27] <aquanight> I mean
[15:01:46] <LeoNerd> We could add a CXt_PLACEHOLDER entry, which doesn't have to do much except provide *just enough* information that caller() can expand it out lazily if needed
[15:01:56] <LeoNerd> On the observation that most of the time, it won't be needed
[15:02:01] <LeoNerd> Ooooh I like this idea
[15:02:10] <aquanight> you could optimize such things. There's not some "coding law" that will strap you into the electric chair if you do it. Just that hypothetically you shouldn't.
[15:02:19] <aquanight> ALso wouldn't that be a tailcall optimization anyway?
[15:02:29] <LeoNerd> Getting perl to do TCO would be loooovely
[15:02:34] <LeoNerd> ooh sorry my Scheme hat is showing
[15:03:01] <aquanight> I mean
[15:03:06] <aquanight> keep in mind you could already do
[15:03:08] <LeoNerd> Honestly, I really want  use more 'scheme';  # equivalent to   use feature qw( tco kebab-case extended-symbols! ... );
[15:03:21] <aquanight> sub { my $m = $obj->can("meth"); unshift @_, $obj; goto &$m; }
[15:03:23] <LeoNerd> use more 'scheme';  sub is-bool? ($x) { ... }
[15:03:31] <aquanight> and the trampoline will be invisible to caller()
[15:03:51] <LeoNerd> Yes. People can write that. But they'd have chosen to write that
[15:04:17] <LeoNerd> The problem situation I'm imagining above, is retroactively optimising people who didn't write that
[15:04:46] <aquanight> but besides caller(), there's also some other subtle traps
[15:05:00] <aquanight> like what should \@_ be if someone decides to do that.
[15:05:05] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[15:05:17] <aquanight> or what does @_ look like once you enter an XSUB
[15:05:48] <LeoNerd> @_ is set up by pp_entersub when calling a non-xsub. When it calls an xsub it doesn't touch @_, so that remains whatever it was
[15:05:50] <aquanight> as if I'm not mistaken, an xsub call doesn't setup @_, so they can see their caller's @_
[15:05:53] <LeoNerd> Yup
[15:05:59] <LeoNerd> xsub args arrive directly on the stack
[15:06:24] <aquanight> which is why L:U can do lightcalls into their callback and allow them to see the surrounding sub's @_
[15:06:46] <LeoNerd> Oh that's dMULTICALL and it is simply crazy
[15:06:56] <LeoNerd> See how List::Keywords does it instead. That's much nicer
[15:07:32] <LeoNerd> There's a longstanding WONTFIX bug in List::Util to do with closure captures that can't be fixed without basically destroying the dMULTICALL advantage, in a way that doesn't turn up with List::Keywords
[15:07:59] <aquanight> I'm going to guess the answer is "OP_CUSTOM and arranging it like map/grep"
[15:08:09] <LeoNerd> You're getting good at this ;)
[15:09:12] <aquanight> we're going to get to some point where a program is 90% OP_CUSTOM and not a single actual entersub anywhere
[15:10:22] <LeoNerd> ;)
[15:11:03] <aquanight> but yeah, it's something I was thinking about with inlining... how much to preserve the idea of the inlined sub "existing" as a called sub (preserving caller is right out, but @_ is another story)
[15:11:33] <aquanight> and if you want to start doing some deep optree optimizations of the inlined code to take advantage of the parameter list being known (stuff like for(@_) unrolling for example)
[15:12:26] <aquanight> well, stuff like unrolling @_ iteration, also treating 'wantarray' as a constant (except you still frickin can't because at that stage you don't know the damned context GOD DAMMIT)
[15:12:28] <LeoNerd> I think caller() stands in the way of quite a few optimisations, but perhaps some sort of opt-in   use less 'caller-correctness';   style feature might be useful, wherein you say "I don't mind if caller() tells lies, if it means you can optimise more stuff"
[15:12:38] <LeoNerd> So things like sub inlining would work and not have to worry about making it correct
[15:12:56] <LeoNerd> Ahyes, vague context ;)
[15:13:02] <LeoNerd> The fourth context type
[15:13:07] <aquanight> use less 'debugger'; # "useless debugger"
[15:13:50] <aquanight> LeoNerd: oh no the context isn't vague. It's just that in the course of building an optree, the tree doesn't know what context it'll be until the parent op is built and by that point it's too late to do anything useful.
[15:13:57] <aquanight> If you're lucky peephole can do a thing.
[15:14:15] <aquanight> but this shit is why flop { flip { range } } is a thing
[15:14:42] <LeoNerd> It might be vague. The final expression of a sub is usually in vague context
[15:14:44] <aquanight> because the $x .. $y optree can't know if it's a range or a flipflop in that moment.
[15:14:52] <LeoNerd> sub f { A(); B(); C(); }   <== the call to C here
[15:14:56] <aquanight> yeah there's entersub context too
[15:15:09] <aquanight> I think that's what core calls it anyway.
[15:15:19] <aquanight> or "return" context might be better
[15:15:55] <aquanight> that context shit sucked for :pure
[15:16:04] <aquanight> and is why I had to do :Pure and :PureList
[15:17:15] <LeoNerd> I keep meaning to make a set of  :void :scalar :list  attributes to put on subs
[15:17:20] <vague> Don't pull me into this
[15:17:24] <LeoNerd> To force the final-expr context, and also warn if called from the wrong place
[15:17:33] <LeoNerd> Certain core ops have that warning. Why can't user subs?
[15:17:41] <LeoNerd> eval:  my $x = sort 1 .. 5;
[15:17:44] <perlbot> LeoNerd: Useless use of sort in scalar context at (IRC) line 1. 
[15:17:53] <LeoNerd> ^-- that. I want my list-returning subs to have the same warning
[15:19:22] <LeoNerd> It'd also be -really- useful in things like object accessors.  :scalar to force it to run in scalar context
[15:19:39] <LeoNerd> my %args = ( red => $col->r, green => $col->g, ... );  for example
[15:22:11] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[15:25:19] <aquanight> yeah calling subs in a hash without scalar() is just a recipe for disaster
[15:26:07] <aquanight> => really should've bound tightly and forced scalar on both sides
[15:26:37] <aquanight> rather than just being a q()/, shortcut
[15:27:11] <aquanight> LeoNerd: also context is a problem for the hypothetical BEGIN expression
[15:27:29] <aquanight> my @q = BEGIN 1 .. $x; ## what's in @q
[15:28:17] <aquanight> it's either a range-constant with whatever $x was, or an uninitialized error against $.
[15:28:46] <aquanight> and the way the optree is built it wouldn't know which one to give you
[15:29:09] <aquanight> the expression would be evaluated in a moment where the existence of 'my @q =' is even known
[15:29:17] <aquanight> not* even known
[15:32:37] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 250 seconds)
[15:32:54] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:33:35] *** Joins: csrf (~csrf@user/csrf)
[15:46:45] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[15:47:48] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[15:51:50] <Altreus> isn't 'my' done at BEGIN time too?
[15:52:20] <ilmari> only the pad slot allocation. the RHS evaluation and assignment happens at runtime
[15:52:38] <Altreus> the old my $x if $y thing
[15:52:42] <Altreus> er, with an = in it
[15:53:31] <Altreus> Maybe we shouldn't have operators that behave completely differently in different contexts :)
[15:55:45] *** Joins: tobybl_ (~tobybl@227.192.115.87.dyn.plus.net)
[15:58:26] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Ping timeout: 252 seconds)
[16:02:34] *** Quits: tobybl_ (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[16:05:30] *** Quits: floppy_disk (~floppy_di@user/floppy-disk/x-6577422) (Remote host closed the connection)
[16:06:50] *** Joins: v` (~v@user/ctrl)
[16:08:28] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[16:10:18] <LeoNerd> `my @q = BEGIN 1 .. $x`  would still be fine. At compiletime we know that it's in list context
[16:15:41] *** Joins: art1 (~romeyke@p200300ccdf043b003c86b19ea57fb774.dip0.t-ipconnect.de)
[16:22:36] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[16:24:06] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 245 seconds)
[16:25:24] *** Quits: proller (~p@2a02:6b8:b081:b407::1:10) (Ping timeout: 252 seconds)
[16:30:24] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-68.dsl.bell.ca) (Quit: clscott)
[16:34:12] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[16:34:34] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[16:40:56] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:42:15] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[16:48:24] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:51:25] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[16:58:09] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:05:02] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[17:05:58] *** Joins: jaggz (~jaggz@user/jaggz)
[17:06:25] <jaggz> why's my length(@{aref}) giving me a value of 2?  https://paste.debian.net/hidden/cb5bd9ba/
[17:06:26] <Paperbot> Link title(s): [ Debian Pastezone ]
[17:06:34] <Altreus> cos length is for strings
[17:06:37] <jaggz> I mean, lengt(@{$aref}0
[17:06:39] <jaggz> grr
[17:06:46] <Altreus> your ref has between 10 and 99 things in it
[17:06:56] <Altreus> thus it is 2 digits long
[17:06:58] <Altreus> :)
[17:07:27] <simcop2387> jaggz: you want scalar @$aref
[17:07:31] <jaggz> ugh..
[17:07:34] <jaggz> UGH
[17:07:49] <simcop2387> and probably $sum not length(@arr)
[17:08:41] <Altreus> There's a lot to pick up in this if you were to take it to code review :D
[17:09:16] <jaggz> do you think this will have affected my averages?  ;)
[17:09:20] <Altreus> you don't use $lastval for example
[17:09:40] <Altreus> also you should use POD :D
[17:09:54] <Altreus> but yeah, scalar - although, in this case, you can just use @$aref
[17:09:55] <jaggz> well, it's the summed array there, simcop2387 
[17:09:58] <Altreus> cos it's already in scalar context
[17:10:25] *** Joins: Shells (~michelle@203.206.128.220)
[17:11:10] <simcop2387> jaggz: yea but you're getting the length of the number that is the length again.
[17:11:48] *** Quits: Michelle (~michelle@2407:8800:bc20:200a:1915:6f25:36fc:6013) (Ping timeout: 240 seconds)
[17:13:25] <jaggz> hm
[17:13:49] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:14:42] <jaggz> simcop2387, here?  "  SumArrLen: ", scalar(@arr)
[17:14:45] <simcop2387> jaggz: if i had to guess you're implementing the load average logic that some system (probably linux) uses to calculate load averages for 1 5 and 15 minute intervals? with 1 minute sampling times in the array?
[17:15:01] <jaggz> no, ekg samples
[17:15:07] <jaggz> https://www.flickr.com/photos/32284628@N05/?
[17:15:10] <Paperbot> Link title(s): [ jaggz.h | Flickr ]
[17:15:12] <simcop2387> ah, guess it just looks incredibly similar
[17:15:22] <jaggz> (first img is zoom-in of right side.. 2nd block to end).. 
[17:17:42] <jaggz> okay, slowly getting better: https://live.staticflickr.com/65535/51954757490_afb151cf92_b.jpg
[17:17:46] <simcop2387> i'm sure there's a module that has this implemented but i can't think of it
[17:17:54] <jaggz> simcop2387, that's funny and interesting (the ecg relation to cpu load)
[17:18:04] <jaggz> or system load or whatever
[17:18:47] <simcop2387> essentially what it looks like you're calculating is a moving average over the samples, but the terms you're using and the way it looks like a ring buffer for the samples makes it look very much like how something like the linux kernel would do it.
[17:19:17] <jaggz> heh
[17:19:31] <simcop2387> i'm also only partially awake right now too so that probably helps
[17:19:36] <jaggz> yeah, not a ring buffer in this case -- just fixing the start/ends so the avg is still the same width
[17:20:03] <jaggz> it. with radius 5, at idx = 100, I might go from 95-105
[17:20:18] <jaggz> but within the first 10 samples the avg used will be 0..9
[17:20:53] <jaggz> just wanted to reduce edge-effect weirdness
[17:22:10] <simcop2387> given the kind of data you have, https://en.wikipedia.org/wiki/Gaussian_filter might be a better fit for denoising the data.  
[17:22:11] <Paperbot> Link title(s): [ Gaussian filter - Wikipedia ]
[17:22:38] <simcop2387> though i don't know a good way to use it in perl, except maybe PDL.  https://metacpan.org/pod/PDL::Filter::Linear
[17:22:39] <Paperbot> Link title(s): [ PDL::Filter::Linear - linear filtering for PDL - metacpan.org ]
[17:23:37] <jaggz> the normalization is okay for now I think.. was just a way of flattening the thing a bit
[17:23:38] <jaggz> https://live.staticflickr.com/65535/51954242068_23fb8f29fb_b.jpg
[17:23:47] <jaggz> the main issue right now is this crazy high frequency noise in there
[17:23:56] <jaggz> which I think is 60hz from the environment 
[17:24:44] <jaggz> I want to try to remove 60hz from it now..  I was thinking of doing a fourier analysis first, to confirm it's 60hz, then remove that from a spectrogram, then inverse fourier it
[17:24:50] <jaggz> http://chris35wills.github.io/simple_fft_filter/
[17:24:50] <Paperbot> Link title(s): [ Removing a component of a signal using FFT – Geo-code – My scratchpad for geo-related coding and ... ]
[17:24:57] <jaggz> (^ python)
[17:25:10] <simcop2387> odds are good you'll see it as 120hz in there because of the non-linear pickup that the ekg will have
[17:25:48] <jaggz> hm?
[17:25:56] <simcop2387> jaggz: you should really take a look at PDL then, https://metacpan.org/pod/PDL::FFT
[17:25:59] <Paperbot> Link title(s): [ PDL::FFT - FFTs for PDL - metacpan.org ]
[17:26:10] <jaggz> oh nice, perl has it
[17:26:22] <jaggz> is there a convenient "plot and display the plot" thing in perl?
[17:26:23] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:26:25] <jaggz> like python's matplotlib
[17:26:29] <jaggz> (which is gross, but convenient)
[17:26:53] <simcop2387> i'm betting that there's going to be a big harmonic at 120hz from the 60hz mains hum because your body isn't a linear antenna for it and then with weird electrical effects from the ekg being non-linear too
[17:27:17] <simcop2387> jaggz: pdl has some plotting stuff
[17:27:20] <jaggz> fft will show it I think.. need to fft and examine
[17:27:44] <simcop2387> https://metacpan.org/pod/PDL::Graphics::PGPLOT
[17:27:45] <Paperbot> Link title(s): [ PDL::Graphics::PGPLOT - PGPLOT enhanced interface for PDL - metacpan.org ]
[17:27:59] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[17:28:11] <simcop2387> it's been a while since i've used a lot of PDL though
[17:28:32] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[17:29:21] <jaggz> hmm.. 
[17:31:50] <jaggz> Can't call method "get_datatype" on unblessed reference
[17:32:22] <jaggz> for my $i (0 .. $#in) { push @norma, $in[$i]-$avg[$i]; }
[17:32:22] <jaggz> say realfft(\@norma);
[17:33:36] <jaggz> maybe these need to be some special array type for pdl
[17:34:08] *** Quits: Woodzy (~quassel@198.204.246.228) (Ping timeout: 252 seconds)
[17:34:39] *** Joins: Woodzy (~quassel@198.204.246.228)
[17:34:41] <simcop2387> yea pdl uses it's own array format.  it's not too hard to do though, something like $pdl_arr = pdl \@norma; or something like that
[17:35:26] <jaggz> my $data = PDL->new(\@norma);
[17:35:26] <jaggz> say realfft($data);
[17:35:50] <jaggz> looking into it.  that errors too
[17:36:02] <jaggz> Prototype mismatch: sub main::min (@) vs none at (eval 1) line 9.
[17:36:22] <jaggz> Can't locate object method "clump" via package "1024" (perhaps you forgot to load "1024"?) at /usr/lib/x86_64-linux-gnu/perl5/5.32/PDL/Ufunc.pm line 1271.
[17:36:31] <simcop2387> https://metacpan.org/dist/PDL/view/Basic/Pod/Tutorials.pod has some links on how to use it
[17:36:31] <Paperbot> Link title(s): [ PDL::Tutorials - A guide to PDL's tutorial documentation. - metacpan.org ]
[17:36:56] <jaggz> thanks
[17:37:14] <simcop2387> i don't think you ever do PDL->new()
[17:37:39] <jaggz> that was from here: https://www.perlmonks.org/?node_id=174329
[17:37:42] <Paperbot> Link title(s): [ Manipulating Audio Data in Perl ]
[17:37:48] <jaggz> but don't bother with it if it's wrong.. reading the docs 
[17:38:25] <jaggz> (this one https://metacpan.org/dist/PDL/view/Basic/Pod/QuickStart.pod )
[17:38:25] <Paperbot> Link title(s): [ PDL::QuickStart - Quick introduction to PDL features. - metacpan.org ]
[17:38:44] <jaggz> and, yeah, they say it's more like just "pdl (1,2,3,4)"
[17:38:53] <jaggz> pdl [[1,2,3],[4,5,6]];
[17:38:55] <jaggz> etc
[17:39:04] <jaggz> heh, they even process string representations
[17:39:11] <jaggz> pdl '[1 2 3; 4 5 6]';
[17:40:15] <jaggz> shoot.. I think they're conflicting my min max sum stuff from listutils
[17:40:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[17:40:46] <jaggz> from List::Util
[17:41:47] <jaggz> okay, fixed that.  hrm.  realfft() doesn't return anything printable
[17:42:07] <jaggz> I wonder how the "inplace" stuff works here
[17:44:03] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[17:44:26] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:44:28] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[17:45:24] *** Joins: sh0ne (~sh0ne@178.237.217.167)
[17:47:30] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[17:48:23] <jaggz> weird array ref thing
[17:48:30] <jaggz> more reading to do. yay
[17:48:33] <jaggz> thanks again buds
[17:50:43] *** Joins: bmeneg (~bmeneg@131.100.62.62)
[17:52:58] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[17:53:18] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[17:57:54] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 268 seconds)
[17:58:03] *** Joins: rootx74 (~rootx74@user/rootx74)
[17:59:01] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[17:59:25] *** XV9 is now known as XV8
[17:59:26] *** Joins: gast0n (~g4570n@user/gast0n)
[17:59:28] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[17:59:43] *** Joins: Darkcoal (~user@user/Darkcoal)
[18:02:08] *** Joins: monkey_ (~user@190.104.116.153)
[18:02:14] *** Quits: Darkcoal (~user@user/Darkcoal) (Read error: Connection reset by peer)
[18:06:12] *** Quits: monkey_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[18:06:40] *** Joins: monkey_ (~user@190.104.116.153)
[18:07:58] *** Joins: Darkcoal (~user@user/Darkcoal)
[18:11:03] <jaggz> how do you install pgplot?
[18:11:19] <jaggz> Failed to download http://www.cpan.org/authors/id/P/PD/PDL/Graphics/PGPLOT
[18:13:44] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[18:14:28] <jaggz> got it.. needed to just use the package name PGPLOT, and had to install my debian's pgplot5
[18:16:09] *** Joins: sobukus (~sobukus@sourcemage/mage/sobukus)
[18:16:48] <sobukus> Hi, I'm a long-time Perl user, but I got some rookie confusion. For sure  there's a switch for that, but I am surprised that the default behaviour is $ perl -e '$string="mean"; $string =~ /^\s*(.+|)\s*(min|mean|max|)$/; print "matched: >$1< >$2<\n";'
[18:16:53] <sobukus> matched: >mean< ><
[18:17:28] <sobukus> So only the second match is stored as $1. I expected $1 = '' and $2 = 'mean'.
[18:17:50] <sobukus> Anyone sharing my confusion/explaining why I shouldn't be confused?
[18:18:27] <ilmari> the second capture matches the empty string, so it won't backtrack
[18:18:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:18:55] <jaggz> is  .+? nongreedy?
[18:18:57] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[18:19:06] <ilmari> yes
[18:19:07] *** Quits: judabuda (kowbunga@kowbunga.thunderirc.net) (Changing host)
[18:19:07] *** Joins: judabuda (kowbunga@user/judabuda)
[18:19:21] <jaggz> sobukus, so maybe throw a ? after your .+ which makes it "as few as possible"?
[18:19:22] <ilmari> also, (.+|) is a very strange way of writing (.*)
[18:19:34] <jaggz> or, yeah, just do (.*?)
[18:19:46] <jaggz> 0 or more, as few as possible.
[18:20:37] *** Quits: anthk_ (~anthk_@113.85-85-9.dynamic.clientes.euskaltel.es) (Ping timeout: 240 seconds)
[18:20:38] <jaggz> okay, so PGPLOT is not PDL::Graphics::PGPLOT
[18:20:42] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:20:45] <jaggz> and I don't know how to cpanm the full one
[18:21:16] *** Joins: Darkcoal (~user@user/Darkcoal)
[18:21:28] <ilmari> PDL::Graphics::PGPLOT is part of the main PDL dist
[18:21:34] <ilmari> PGPLOT is a separate dist
[18:22:11] <ilmari> `cpanm PDL::Graphics::PGPLOT` will install PDL, because the module is part of the PDL distribution
[18:23:09] <jaggz> that wasn't finding it
[18:23:27] <jaggz> but i'm cpanm'ing PDL (it was working, itself, with 'use PDL;'  .. but.. dunno)
[18:23:37] <ilmari> wasn't finding what?
[18:23:43] <ilmari> vague problem description is vague
[18:23:48] <jaggz> Can't locate PDL/Graphics/PGPLOT.pm in @INC
[18:24:01] <simcop2387> sobukus: you might also want to look at named capture groups that are supported in perl for a long time.  /(?<whatever>.*)\s*(?<operation>min|mean|max)$/ and then use %+, $+{whatever} and $+{operation}
[18:24:08] <jaggz> pardon me, that's not from the cpanm command
[18:25:01] <jaggz> (can't see the cpanm PDL/Graphics/PGPLOT right now.. hidden in history, and cpanm PDL is running right now)
[18:25:04] <simcop2387> eval: use PDL::Graphics::PGPLOY;
[18:25:05] <perlbot> simcop2387: ERROR: Can't locate PDL/Graphics/PGPLOY.pm in @INC (you may need to install the PDL::Graphics::PGPLOY module) (@INC contains: $BLEAD/lib/site_perl/5.35.9/x86_64-linux $BLEAD/lib/site_perl/5.35.9 $BLEAD/lib/5.35.9/x86_64-linux $BLEAD/lib/5.35.9) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[18:25:07] <simcop2387> eval: use PDL::Graphics::PGPLOT;
[18:25:08] <perlbot> simcop2387: ERROR: Can't locate PDL/Graphics/PGPLOT.pm in @INC (you may need to install the PDL::Graphics::PGPLOT module) (@INC contains: $BLEAD/lib/site_perl/5.35.9/x86_64-linux $BLEAD/lib/site_perl/5.35.9 $BLEAD/lib/5.35.9/x86_64-linux $BLEAD/lib/5.35.9) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[18:25:15] <simcop2387> hrm
[18:25:20] <ilmari> eval: use PDL::Graphics::PGPLOT::PGPLOT
[18:25:21] <perlbot> ilmari: ERROR: Can't locate PDL/Graphics/PGPLOT/PGPLOT.pm in @INC (you may need to install the PDL::Graphics::PGPLOT::PGPLOT module) (@INC contains: $BLEAD/lib/site_perl/5.35.9/x86_64-linux $BLEAD/lib/site_perl/5.35.9 $BLEAD/lib/5.35.9/x86_64-linux $BLEAD/lib/5.35.9) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[18:25:43] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 256 seconds)
[18:26:13] <simcop2387> pdl should be there on the bot, but yea i'm not seeing the obvious issue or solution myself
[18:26:14] *** Joins: lureevar (~lureevar@2804:214:8187:6589:f128:9d6b:be01:83b5)
[18:26:29] <jaggz> let's see what pdl sets up
[18:26:44] * GumbyPAN CPAN Upload: Tesla-API-0.08 by STEVEB https://metacpan.org/release/STEVEB/Tesla-API-0.08
[18:26:44] * GumbyPAN CPAN Upload: Tesla-Vehicle-0.05 by STEVEB https://metacpan.org/release/STEVEB/Tesla-Vehicle-0.05
[18:26:56] <jaggz> maybe i was using my system pdl ..
[18:27:01] <ilmari> ah, it only installs PDL::Graphics::PGPLOt if you have PGPLOT installed when you install PDL
[18:27:26] <jaggz> I only have a debian libpdl-io-matlab-perl installed
[18:27:29] <ilmari> so `cpanm PGPLOT`, then `cpanm --reinstall PDL`
[18:27:51] <ilmari> well, that has nothing to do with pgplot …
[18:27:54] <jaggz> okay.. pdl's going in now, with cpanm, so let's see if that works
[18:28:10] <jaggz> libpdl-ccs-perl libpdl-linearalgebra-perl libpdl-graphics-gnuplot-perl libpdl-netcdf-perl libpdl-io-hdf5-perl libpdl-stats-perl libpdl-io-matlab-perl libpdl-vectorvalued-perl
[18:28:12] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[18:28:20] <jaggz> well, those are the only debian packages libpdl-*
[18:28:42] <jaggz> oh, there is this one: libpgplot-perl
[18:28:44] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[18:28:50] <jaggz> that might have done it
[18:29:00] <jaggz> or that might have been the core PGPLOT thing (use PGPLOT;)
[18:29:03] <ilmari> the PDL package is just pdl
[18:29:06] <jaggz> no clue how they all relate
[18:29:50] <sobukus> ilmari: Yes, I started with .* and then wondered if explicit empty string would work.
[18:31:06] <sobukus> simcop2387: That's an idea. Didn't know that. Seems a lot safer, yes.
[18:32:15] <ilmari> jaggz: if you are using the debian packages, `apt install pdl libpgplot-perl` should do the trick
[18:32:21] <sobukus> But I had the impression that $N would always refer to the Nth capture group in the regex, not shift according to contents.
[18:32:31] <ilmari> the pdl package includes PDL::Graphics::PGPLOT
[18:32:45] <ilmari> sobukus: it is referring to the second capture group, but that is empty
[18:33:13] <ilmari> because the first capture group matched as much as it could, and the alternation inside the second group includes the empty string
[18:33:16] <simcop2387> sobukus: yea i try to encourage them more whenever possible since there's some gotchas about groups that don't match and the numbered ones.
[18:33:18] <sobukus> Oh! Now I see.
[18:33:19] <sobukus> Sorry.
[18:33:35] <simcop2387> you can end up with some really weird ones with nested parens
[18:33:46] <jaggz> okay.. not exactly sure what kind of spectrogram this is
[18:33:50] <sobukus> ilmari: Yes, I was blind to that. Faith in my understanding of regexes restored. Of course, .* will swallow everything.
[18:34:13] <jaggz> 5000 data points resulted in a 5001 length realfft() result, https://i.imgur.com/6kLDup4.png
[18:34:24] * sobukus makes condescending face to the mirror
[18:34:50] <simcop2387> jaggz: so this is really old, undocumented, embarrassing code that uses PDL, https://github.com/simcop2387/autosub
[18:34:50] <Paperbot> Link title(s): [ GitHub - simcop2387/autosub: A tool to help the creation of subtitles for any audio/video ]
[18:34:59] <ilmari> sobukus: and (foo|) will happily match the empty string at the end
[18:35:03] <simcop2387> but i think i did something like what you're after there with an FFT
[18:35:41] <simcop2387> https://github.com/simcop2387/autosub/blob/master/lib/FFTW.pm # this specifically i think
[18:35:41] *** Quits: rootx74 (~rootx74@user/rootx74) (Quit: Leaving)
[18:35:41] <Paperbot> Link title(s): [ autosub/FFTW.pm at master · simcop2387/autosub · GitHub ]
[18:35:44] <jaggz> MakeAss::writeass($tmp, "fake8+pitch.ass", @results);
[18:35:46] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:36:19] <simcop2387> jaggz: ASS is a subtitle format :)
[18:36:22] <jaggz> heh
[18:37:57] <simcop2387> i'll end up writing a lot of that code again but in python because i need to work with some video codec stuff that needs to be more modern and then a more advanced VAD to start cutting up cartoons into voices
[18:38:17] <simcop2387> all so i can retrain a TTS with cartoon voices.
[18:38:41] <jaggz> that'll be nice.  i've been trying mozilla tts .. weird models
[18:38:45] <jaggz> they do weird things
[18:39:26] *** Joins: rootx74 (~rootx74@user/rootx74)
[18:40:10] <Altreus> huh, turns out local *subname = sub {}; is a perfectly workable alternative to my sub subname, for the long ago
[18:41:30] *** Joins: lureevar_ (~lureevar@2804:d45:4788:bb00:890b:9a9a:267:fb74)
[18:44:06] *** Quits: japh (~scp1@user/japh) (Ping timeout: 245 seconds)
[18:44:16] <ilmari> Altreus: except it's not lexical
[18:45:23] *** Quits: lureevar (~lureevar@2804:214:8187:6589:f128:9d6b:be01:83b5) (Ping timeout: 268 seconds)
[18:45:23] *** lureevar_ is now known as lureevar
[18:45:36] <ilmari> sweval: sub foo { say "original foo" } sub bar { foo() } { local *foo = sub { say "who what where now?!" }; bar() }
[18:45:38] <perlbot> ilmari: who what where now?! 
[18:45:50] <ilmari> sweval: sub foo { say "original foo" } sub bar { foo() } { my sub foo { say "who what where now?!" }; bar() }
[18:45:52] <perlbot> ilmari: original foo 
[18:46:35] <ilmari> sweval: local *foo = sub { say "who what where now?!" }; __PACKAGE__->foo() # in the symbol table = not lexical
[18:46:36] <perlbot> ilmari: who what where now?! 
[18:51:55] *** Joins: japh (~scp1@user/japh)
[18:53:31] *** mplsCorwin is now known as corwin
[18:55:54] *** Joins: splatt990 (4b25e29db1@198.108.77.17)
[18:56:22] *** Joins: mattil (~mattil@d5z9tx9ptqggt4d8xry-4.rev.dnainternet.fi)
[18:56:39] *** Quits: japh (~scp1@user/japh) (Ping timeout: 252 seconds)
[18:56:58] *** Joins: japh (~scp1@user/japh)
[18:59:34] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 268 seconds)
[19:00:03] <Altreus> eh, if I find myself doing things that complex I'll be rethinking the way it's written
[19:00:46] <Altreus> I just wanted not to have to write $subref->() every time
[19:00:59] *** Quits: mattil (~mattil@d5z9tx9ptqggt4d8xry-4.rev.dnainternet.fi) (Remote host closed the connection)
[19:01:01] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:01:26] *** Joins: mattil (~mattil@d5z9tx9ptqggt4d8xry-4.rev.dnainternet.fi)
[19:01:42] *** Quits: mattil (~mattil@d5z9tx9ptqggt4d8xry-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[19:01:55] *** Joins: mattil (~mattil@d5z9tx9ptqggt4d8xry-4.rev.dnainternet.fi)
[19:03:32] *** Quits: mattil (~mattil@d5z9tx9ptqggt4d8xry-4.rev.dnainternet.fi) (Remote host closed the connection)
[19:04:33] *** Joins: mattil (~mattil@d5z9tx9ptqggt4d8xry-4.rev.dnainternet.fi)
[19:04:45] *** Joins: thrig (~thrig@207.108.197.156)
[19:06:02] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[19:06:34] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[19:07:55] *** Joins: mattil_ (~mattil@d5z9twwhkqzqff84b9y-4.rev.dnainternet.fi)
[19:10:47] *** Quits: mattil (~mattil@d5z9tx9ptqggt4d8xry-4.rev.dnainternet.fi) (Ping timeout: 250 seconds)
[19:16:50] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[19:17:08] *** Joins: thrig (~thrig@207.108.197.156)
[19:18:55] *** Quits: lureevar (~lureevar@2804:d45:4788:bb00:890b:9a9a:267:fb74) (Quit: lureevar)
[19:19:43] *** Joins: lureevar (~lureevar@152-238-250-137.user.veloxzone.com.br)
[19:21:00] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[19:22:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[19:23:02] *** Quits: rootx74 (~rootx74@user/rootx74) (Ping timeout: 252 seconds)
[19:23:05] *** Quits: mattil_ (~mattil@d5z9twwhkqzqff84b9y-4.rev.dnainternet.fi) (Remote host closed the connection)
[19:23:35] *** Quits: japh (~scp1@user/japh) (Ping timeout: 252 seconds)
[19:24:12] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[19:26:01] *** Joins: mattil (~mattil@d5z9twwhkqzqff84b9y-4.rev.dnainternet.fi)
[19:26:07] *** Quits: mattil (~mattil@d5z9twwhkqzqff84b9y-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[19:30:48] *** vrurg_ is now known as vrurg
[19:31:35] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:32:27] *** Quits: rootx74 (~rootx74@user/rootx74) (Remote host closed the connection)
[19:32:32] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:698f:94dd:b270:5a5c)
[19:32:37] *** Joins: japh (~scp1@user/japh)
[19:32:54] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:34:02] *** Quits: rootx74 (~rootx74@user/rootx74) (Max SendQ exceeded)
[19:34:28] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:35:40] *** Quits: rootx74 (~rootx74@user/rootx74) (Max SendQ exceeded)
[19:36:09] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:36:56] *** Quits: rootx74 (~rootx74@user/rootx74) (Max SendQ exceeded)
[19:37:41] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[19:38:34] *** Joins: japh (~scp1@user/japh)
[19:39:45] *** Quits: lureevar (~lureevar@152-238-250-137.user.veloxzone.com.br) (Quit: lureevar)
[19:51:53] * GumbyPAN CPAN Upload: Crypt-OpenSSL-EVP-MD-0.01 by ABBYPAN https://metacpan.org/release/ABBYPAN/Crypt-OpenSSL-EVP-MD-0.01
[19:52:03] *** Joins: haj1 (~haj@p200300eda707e000c1e947c5f0921895.dip0.t-ipconnect.de)
[19:52:37] *** Quits: fuzzix_ (~fuzzix@188-141-87-139.dynamic.upc.ie) (Quit: Reconnecting)
[19:52:50] *** Joins: fuzzix (~fuzzix@188-141-87-139.dynamic.upc.ie)
[19:54:27] <simcop2387> hell yes.  got the netroot working!
[19:55:39] <simcop2387> now to reboot on the sd card again and rsync the working config around again and then my riscv board is network booted :)
[19:57:19] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:59:24] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:00:22] <gordonfish> Nifty
[20:01:01] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[20:01:54] * GumbyPAN CPAN Upload: Crypt-OpenSSL-EVP-MD-0.01-fix by ABBYPAN https://metacpan.org/release/ABBYPAN/Crypt-OpenSSL-EVP-MD-0.01-fix
[20:04:51] <Altreus> netwoot
[20:05:35] <simcop2387> gordonfish: yea the board doesn't support pxe boot or anything like it, so i'm using the sd card to load an initrd that does all the heavy lifting.  that way the card isn't important or written to except for boot updates
[20:05:58] <simcop2387> but now i have 1TB of reliable storage for a tiny SBC to use
[20:06:19] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[20:07:04] *** Quits: thrig (~thrig@207.108.197.156) (Read error: Connection reset by peer)
[20:07:29] *** Joins: thrig (~thrig@207.108.197.156)
[20:13:56] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:14:10] *** Quits: rootx74 (~rootx74@user/rootx74) (Quit: Leaving)
[20:15:04] *** Joins: rootx74 (~rootx74@user/rootx74)
[20:16:36] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[20:17:07] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[20:22:16] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[20:24:33] *** Joins: Trigon (~reuben@144.39.114.115)
[20:32:25] *** Quits: subie (~subie@2601:4c0:4080:bc0:ca0f:1d28:f742:47b5) (Ping timeout: 256 seconds)
[20:35:18] *** Parts: art1 (~romeyke@p200300ccdf043b003c86b19ea57fb774.dip0.t-ipconnect.de) ()
[20:36:06] *** Joins: subie (~subie@2601:4c0:4080:bc0:ca0f:1d28:f742:47b5)
[20:41:19] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 268 seconds)
[20:41:28] <EvanCarroll> We noticed you haven’t set up a username yet for your Plex account, me@evancarroll.com (created on Nov 25, 2017), so we’ve created a unique username for you: m####
[20:41:35] <EvanCarroll> lol.
[20:43:01] *** Quits: jplesnik (~jplesnik@83.240.62.151) (Quit: Leaving)
[20:43:04] <EvanCarroll> software development has scarred me. I can see into the past and understand that SCRUM meeting...
[20:43:45] <thrig> {{#if (or isSignedIn isSigninIn) }}  cool webpage content, that
[20:43:54] <EvanCarroll> "Everyone needs a user-name, and they don't have them what shall we do? Well, we could ask them when they sign in, but the smallest sliver of value would be just to randomly assign their user-id."
[20:44:26] <simcop2387> EvanCarroll: it's actually because they're working on social logins and so they can't uniquely tie things to an email only.  probably.
[20:44:57] <Botje> m65301 is acting up again. up the dodage
[20:45:04] <Botje> *dosage
[20:45:05] <simcop2387> https://support.plex.tv/articles/use-federated-authentication-to-sign-in/ oh they have that already
[20:45:06] <Paperbot> Link title(s): [ Use Google, Facebook, or Apple to Sign in with Plex | Plex Support ]
[20:45:18] *** Joins: morte_ (~user@190.104.116.153)
[20:45:47] <Botje> SOP is that you create a proxy account tied to the social login and do everything the same from then on, no?
[20:50:19] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: Client closed)
[20:53:21] *** Quits: lxdn00b (~lxdn00b@47.153.28.33) (Remote host closed the connection)
[20:57:27] *** Quits: ccntrq (~Thunderbi@2a01:c23:8960:6a00:997e:ae12:2988:d2c3) (Remote host closed the connection)
[21:05:15] *** Joins: e1f (~user@141.117.1.153)
[21:05:36] *** Quits: e1f (~user@141.117.1.153) (Changing host)
[21:05:36] *** Joins: e1f (~user@user/e1f)
[21:06:39] *** Joins: Trigon (~reuben@144.39.114.115)
[21:07:39] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[21:07:47] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[21:09:09] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:16:17] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[21:22:35] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[21:30:07] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[21:30:11] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[21:33:33] *** Joins: martinus__ (~martin@201.28.201.77.rev.sfr.net)
[21:34:57] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:42:10] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[21:43:01] *** Quits: sh0ne (~sh0ne@178.237.217.167) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:44:50] *** Joins: sh0ne (~sh0ne@178.237.217.167)
[21:53:40] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[22:00:02] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:00:43] *** Quits: ekathva_ (~ekathva@2001:999:50:a96:4ee5:c816:f561:d86f) (Remote host closed the connection)
[22:01:52] *** Joins: diskin (~diskin@5.139.76.74)
[22:05:17] *** Quits: peder (4822@nidur.ifi.uio.no) (Ping timeout: 252 seconds)
[22:06:40] *** Joins: ekathva (~ekathva@2001:999:50:a96:4ee5:c816:f561:d86f)
[22:07:02] *** Quits: veesh (~veesh@5.28.156.164) (Ping timeout: 268 seconds)
[22:07:27] *** Joins: veesh (~veesh@89.237.101.141)
[22:08:27] *** Joins: Pali (~pali@user/pali)
[22:08:30] *** Quits: TieUpYourCamel (~david@2600:1702:26a0:2000:28cc:6b76:1d59:3651) (Remote host closed the connection)
[22:10:43] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[22:11:11] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[22:11:12] *** Quits: Peppard (~quassel@2001:470:1f0b:751:d395:aecb:1000:d2da) (Quit: No Ping reply in 180 seconds.)
[22:12:21] *** Joins: Peppard (~quassel@2001:470:1f0b:751:3674:c4:366b:3c25)
[22:14:05] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[22:17:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[22:17:39] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[22:18:32] *** Joins: laidback_01 (~jax@98.97.66.6)
[22:20:34] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[22:22:59] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 250 seconds)
[22:24:43] *** Quits: gbristol (gbristol@hermes.gbristol.net) (Ping timeout: 250 seconds)
[22:27:03] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:27:18] *** Quits: mexen_wfh (uid495612@id-495612.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:29:23] <simcop2387> geebus, the new nvidia Hopper (H100) datacenter gpu can do 1 PetaFLOP of 32bit floating point operations
[22:29:26] <simcop2387> per device
[22:30:10] <simcop2387> going to be a limited benchmark version of that set of operations but still that's insane
[22:30:31] <simcop2387> https://news.ycombinator.com/item?id=30767586 # discussion
[22:30:32] <Paperbot> Link title(s): [ Nvidia Hopper GPU Architecture and H100 Accelerator | Hacker News ]
[22:30:43] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:31:36] <kjetilho> 32 bit sounds useless for anything but games?
[22:33:08] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[22:33:14] *** Joins: Trigon (~reuben@144.39.114.115)
[22:33:26] <simcop2387> kjetilho: yea this is all ML/AI/DL stuff
[22:33:39] <ilmari> https://www.nvidia.com/en-us/data-center/grace-cpu/
[22:33:40] <Paperbot> Link title(s): [ NVIDIA Grace CPU and Arm Architecture  | NVIDIA ]
[22:33:41] <simcop2387> nobody is going to spend $10-50k on GPUs for gaming :)
[22:34:15] <kjetilho> oh right, I guess ML/AI doesn't need accuracy
[22:34:53] <simcop2387> yea a lot of the inference stuff will go at single precision floats for the better memory sizes.  train at 32 or 64 and quantize the weights after you're done
[22:36:50] <gordonfish> I'm wondering why they still call that a "GPU" and not a CMU (cryto-currency mining unit)
[22:37:03] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[22:37:14] <kjetilho> gordonfish: serious mining doesn't use GPUs
[22:37:25] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[22:37:46] <simcop2387> kjetilho: depends on the coin, not all of them can use an ASIC or FPGA (by design)
[22:38:02] <gordonfish> kjetilho: Admittedly I'm not up on the latest dedicated mining tech but aren't most dedicated boards still built around GPU based units?
[22:38:29] <simcop2387> gordonfish: nah sometimes there's FPGAs or custom silicon (ASICs) involved these days
[22:38:40] <gordonfish> ah
[22:38:41] <kjetilho> gordonfish: for Bitcoin, look up AntMiner
[22:38:52] <kjetilho> they use a custom ASIC
[22:38:57] <simcop2387> basically a bitcoin on silicon implementation to do several brazillian operations per second
[22:40:21] *** Joins: gbristol (gbristol@hermes.gbristol.net)
[22:40:21] <LeoNerd> Does that involve wax?
[22:40:27] * gordonfish wonders how "silicoin" hasn't been... coined.. yet
[22:41:23] <gordonfish> LeoNerd: Or a region form of martial arts
[22:41:31] <gordonfish> regional*
[22:43:09] <gordonfish> Hmm, spoke too soon, apparently "silicoin" is a thing, just not one I've heard talked about
[22:43:39] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[22:46:26] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[22:46:46] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[22:49:28] *** Joins: randir (~randir@95-25-111-216.broadband.corbina.ru)
[22:50:03] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[22:52:29] *** Joins: peder (4822@nidur.ifi.uio.no)
[22:53:41] *** Quits: wingfold (~wingfold@173.38.117.89) (Ping timeout: 245 seconds)
[22:54:33] <simcop2387> hrm i need to change this iscsi setup.  it's going through my router right now
[22:59:44] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[23:14:52] *** Joins: tamwile (~user@2a01:e34:ec06:13a0:2ab1:807:3a89:2ff7)
[23:17:32] *** Joins: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d)
[23:19:56] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:20:52] *** Joins: justOkay (~justache@user/justache)
[23:23:31] <sokan> Is there any book that is good for intro (chomp, index, rindex, substr, regex and pattern matchinf to get a general idea) in perl and has exercises?
[23:24:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[23:25:17] *** Joins: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net)
[23:28:32] <vms14> there's a way to add a modifier in a regex that comes from a variable?
[23:28:49] <vms14> I want to /$regex/$modifier
[23:29:06] <vms14> I only see eval to do that
[23:30:48] <ether> you don't need eval. the variable will be interpolated (as long as you don't use s''' as the delimiter)
[23:30:55] <ether> try it and see.
[23:33:16] <vms14> ether: I do but I get an error
[23:33:18] <vms14> https://termbin.com/z5lc7
[23:33:32] <vms14> Scalar found where operator expected at m.pl line 9, near "m/$regex/$modifier"
[23:34:22] <vms14> and if I try $string =~ "$regex/$modifier does not seem to work
[23:34:35] <vms14> $string =~ "$regex/$modifier" *
[23:34:56] *** Quits: bscan (~bscan@2600:380:5815:872d:f813:29ca:71a9:3506) (Ping timeout: 252 seconds)
[23:34:57] <ether> oh sorry I misread the question. you want to use a variable for the regex flags?
[23:35:16] <ether> like m/blah/i for case-insensitive matching etc?
[23:35:33] <vms14> yes, I want to have the modifier as a variable
[23:35:45] <vms14> and I only see eval as a solution
[23:36:08] <ether> flags can also go in the regex itself -  e.g. try this:  perl -wle'print qr/foo/i'
[23:36:18] * GumbyPAN CPAN Upload: Webservice-Judobase-0.07 by LANCEW https://metacpan.org/release/LANCEW/Webservice-Judobase-0.07
[23:36:29] <ether> (?^ followed by the modifier flag
[23:36:52] <ether> that's in 'perldoc perlre' under "(?^alupimnsx)"
[23:37:12] <ether> so you can do   m/(?^$flags$pattern)
[23:37:22] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:37:33] <vms14> :0
[23:37:36] <vms14> I'll try
[23:37:37] <ether> er with a colon -  m/(?^$flags:$pattern)
[23:37:57] <ether>  m/(?^$flags:$pattern)/   (typing is hard)
[23:40:01] <vms14> it works :D
[23:40:11] <ether> \o/
[23:40:11] <vms14> thank you so much ether <3
[23:44:25] <vms14> does not seem to work with "g"
[23:44:29] <vms14> Useless (?g) - use /g modifier in regex; marked by <-- HERE in m/(?^ig <-- HERE :Oh)/
[23:44:49] <vms14> I'll check the perldoc
[23:45:41] <vms14> alupimnsx ok that seems to be the only available choices
[23:47:55] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 256 seconds)
[23:51:07] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[23:52:00] <ether> *nod*, g is not a regex modifier really, but a modifier to the m// operation itself
[23:52:10] *** Quits: rake (~anomander@vps-e9abfd3d.vps.ovh.net) (Quit: Caesar si viveret, ad remum dareris)
[23:52:17] *** Joins: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28)
[23:52:28] <ether> maybe it's time to step back and rethink your design :)
[23:52:58] *** Joins: anomander (~anomander@vps-e9abfd3d.vps.ovh.net)
[23:53:27] <huf> or just make an if for /g
[23:53:51] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[23:53:58] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[23:55:25] <vms14> ether: xD if you knew the "design"...
[23:55:39] <vms14> I've made additional stuff for g
[23:56:09] <vms14> https://termbin.com/omjj 
[23:56:33] <vms14> you can just execute with perl, although it has no readline
[23:56:40] <vms14> I use rlwrap for now
[23:56:40] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:56:48] *** Joins: PancakeMatsuri__ (~tofu~@222-152-174-14-fibre.sparkbb.co.nz)
[23:56:54] <vms14> "oh my oh oh cat" "Oh" "i" match/g .    this is an example
[23:57:42] <vms14> "oh my oh oh cat" "Oh" "i" "meh" s//g .    this is for substition it returns meh my meh meh cat
[23:58:19] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[23:58:25] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[23:59:20] <vms14> it's a forth like language, a bit weird and it's not a real forth
[23:59:29] *** Quits: PancakeMatsuri_ (~tofu~@222-152-174-14-fibre.sparkbb.co.nz) (Ping timeout: 256 seconds)
