[00:14:45] *** Quits: amb007 (~a_bakic@179.246.204.77.rev.sfr.net) (Ping timeout: 258 seconds)
[00:15:39] *** Joins: akoana (~ah@user/akoana)
[00:24:20] <lucerne> How do I convert a string to a stream? `with-input-from-string' doesn't help me, because the conversion needs to bind the value in `let', and not immediately use it.
[00:25:46] <phoe> what do you mean, not immediately use it?
[00:25:48] *** Joins: amb007 (~a_bakic@179.246.204.77.rev.sfr.net)
[00:28:25] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[00:28:29] <greyrat> phoe: (let (s (create-stream-here)) (use-stream s))
[00:28:33] <White_Flame> you should be able to pass that stream around, and even store it somewhere, as long as you're within that dynamic context
[00:28:52] <phoe> greyrat: with-input-from-string is going to work with dynamic context
[00:29:11] <phoe> if indefinite extent is needed for whatever reason, MAKE-STRING-INPUT-STREAM
[00:30:05] *** Quits: amb007 (~a_bakic@179.246.204.77.rev.sfr.net) (Ping timeout: 258 seconds)
[00:30:52] *** Joins: amb007 (~a_bakic@81.198.204.77.rev.sfr.net)
[00:32:11] <greyrat> phoe: Thanks, that's exactly what I wanted.
[00:32:52] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[00:33:25] <phoe> greyrat: but still, this code should be equivalent to (with-input-from-string (s "...") (use-stream s)) as long as S does not leak outside this context
[00:33:58] <greyrat> Yes, but that example was simplified
[00:34:10] <phoe> oooh, that would explain things
[00:34:13] <White_Flame> if it does leak out, I presume that actions on S would yield a plain closed stream error
[00:35:03] <White_Flame> and not some weird undefined state
[00:35:27] <phoe> White_Flame: actually for W-I-F-S the stream is DX
[00:35:35] <phoe> so it's completely undefined behavior if S leaks out
[00:36:25] <White_Flame> the stream object itself, or the stream-holding variable?
[00:36:32] <phoe> the stream object itself
[00:36:38] <phoe> you can't leak the variable out because it is lexical
[00:36:45] <phoe> see (describe (with-input-from-string (s "123") s)) on a freshly launched SBCL
[00:36:57] <phoe> there are fireworks
[00:37:11] <White_Flame> huh
[00:38:28] <White_Flame> yeah, found that in the spec now
[00:39:39] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[00:39:40] *** Quits: amb007 (~a_bakic@81.198.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:39:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[00:40:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:40:55] *** Joins: Guest63 (~Guest63@5.30.23.247)
[00:41:09] <Guest63> Recommendations for persistent data store?
[00:41:19] <phoe> postgresql + postmodern
[00:41:24] <Guest63> I'm looking at BKNR but not sure if its updated
[00:41:28] <phoe> if you want nosql, then bknr.datastore works
[00:42:01] <Guest63> phoe: I was doing that, but now looking at a RAM solution
[00:42:27] <Guest63> unless there is a way to load on startup the whole db? Also need to parse all the data contained inside it into CLOS objects, so not sure if its the best way
[00:44:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 252 seconds)
[00:47:44] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[00:52:56] <White_Flame> Guest63: maybe just save the whole lisp image?
[00:53:37] <White_Flame> if you're doing a fully RAM-based solution
[00:54:03] <White_Flame> reconnecting everything you need at startup is an easier task that figuring out all the random serialization issues yourself
[00:55:11] <Guest63> white_flame: thanks
[00:55:18] <Guest63> I will look into that too
[00:55:21] <_death> https://github.com/robert-strandh/Clobber may be interesting
[00:57:58] *** Joins: derelict (~derelict@user/derelict)
[00:58:13] <Guest63> _death: looking into it now
[01:01:32] *** Joins: frgo_ (~frgo@dynamic-046-114-150-088.46.114.pool.telefonica.de)
[01:03:57] *** Quits: frgo (~frgo@dynamic-046-114-147-229.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[01:07:57] <Guest63> _death: what's the difference between clobber and just writing to file?
[01:08:14] <Guest63> is it just mainly a wrapper around with-open-file etc?
[01:08:42] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[01:09:03] <_death> it's a way to serialize object graphs
[01:09:22] <White_Flame> Guest63: what would you write?
[01:09:23] <_death> you could write your own, sure
[01:10:47] <Guest63> lol the only thing I could write would likely delete the whole filesystem '=D
[01:11:16] <White_Flame> I meant what would you write to the file? :)
[01:11:22] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[01:11:23] <White_Flame> that's what clobber & such address
[01:11:30] <Guest63> structures and Clos objects
[01:11:36] <White_Flame> how?
[01:11:38] <Guest63> maybe a hash table
[01:11:45] <White_Flame> the textual form is generally not readable.  Same for hash tables
[01:11:53] *** Quits: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 265 seconds)
[01:12:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:12:12] <Guest63> One could just store the lisp instructions to recreate them
[01:12:19] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:12:23] <Guest63> and run eval on that
[01:12:25] <White_Flame> sure, that would be a manual serialization
[01:12:52] <White_Flame> now, as slots share values, or deeply interconnected values, or hold things like gensyms that are shared between things, it can get rough
[01:13:13] <White_Flame> and serializing closures are one of the hardest things as they're not introspectable via standard means
[01:13:13] <Posterdati> hi
[01:13:47] <Posterdati> flip214: are you there?
[01:14:46] <Guest63> white_flame: thanks, I can see how it would get tricky
[01:15:07] <White_Flame> but if your data is intentionally simple, then yes you can have simple serialization/deserialization passes
[01:15:25] <White_Flame> it's just not possible for the general case, which is what most people tend to ask for
[01:15:33] <Guest63> would clobber capture most of the complexity?
[01:15:47] <White_Flame> I've not used clobber
[01:15:57] <_death> it can't serialize functions
[01:16:04] <White_Flame> and it all depends on what complexity your particular data has
[01:16:12] <_death> for that there are libraries like common-cold
[01:16:12] <Guest63> thanks
[01:16:25] <White_Flame> heh, nice name
[01:16:27] <_death> that are implementation dependent and limited
[01:16:43] <Posterdati> is anyone using gsll on freebsd?
[01:17:00] <Guest63> I will have to have a think on the best way forward, but I learnt some new stuff today :)  thanks
[01:17:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:20:26] <White_Flame> btw, if you consider what databases do, by reifying every reference into a numeric ID, that means every field is just a plain value that it has no issue serializing
[01:20:32] <White_Flame> *SQL databases
[01:21:07] <Guest63> yeah exactly. I am assuming that reading all the plain text back into lisp is more expensive than an in-memory solution
[01:21:24] <White_Flame> I do even mean databases dumping into a plain text .sql file
[01:21:33] <Guest63> actually I take that back
[01:21:49] *** Joins: Quasus (~Quasus@a89-152-209-125.cpe.netcabo.pt)
[01:21:51] <Guest63> if you can load the full database on startup, then it should be the same speed or so
[01:22:18] <White_Flame> the load speed would probably be slower for a text rather than binary file, but yeah none of that should affect runtime performance after load
[01:23:11] <Guest63> I guess I realised I didn't really need SQL (even though I am a big fan), so a nosql solution is fine and is easier to handle in lisp
[01:23:21] <Guest63> for my use case
[01:24:36] <Guest63> Is CLIki still active and meant to be the goto wiki?
[01:24:50] <Guest63> I saw it in the welcome message
[01:26:10] <White_Flame> yes, though certainly sections drift out of date
[01:27:13] <Guest63> cool, thanks - I was going to put some lisp notes on the web, but I'll just add pages to the wiki instead
[01:36:02] <greyrat>  Guest63 
[01:54:48] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[01:57:41] *** Joins: bilegeek (~bilegeek@2600:1008:b017:63a6:c26d:d119:faaa:a6d7)
[01:59:36] *** Joins: omr (~omr@185-86-106-185.pool.ovpn.com)
[01:59:46] *** Quits: Guest63 (~Guest63@5.30.23.247) (Ping timeout: 252 seconds)
[02:02:48] *** Joins: lottaquestions (~nick@104.221.94.126)
[02:03:26] *** Joins: bldr (~bull@185.117.72.168)
[02:03:31] *** Quits: Wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[02:04:18] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a600:79d6:b2a9:7eb2:2cc1) (Ping timeout: 240 seconds)
[02:07:14] *** Quits: lottaquestions (~nick@104.221.94.126) (Client Quit)
[02:07:43] *** Joins: lottaquestions (~nick@2607:fa49:5041:a600:302c:2ca5:9f37:1500)
[02:14:14] *** Quits: Noisytoot (noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[02:16:57] *** Joins: Noisytoot (noisytoot@sourcehut/user/noisytoot)
[02:23:10] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[02:23:18] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[02:50:04] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[02:53:41] *** Joins: Wilfred (uid159@id-159.highgate.irccloud.com)
[02:54:24] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[02:57:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[02:59:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:07:21] *** Quits: omr (~omr@185-86-106-185.pool.ovpn.com) (Quit: zzz)
[03:07:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 265 seconds)
[03:10:17] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[03:11:51] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 258 seconds)
[03:12:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[03:12:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[03:13:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:19:59] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[03:38:20] *** Quits: Quasus (~Quasus@a89-152-209-125.cpe.netcabo.pt) (Ping timeout: 265 seconds)
[03:39:40] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[03:39:57] *** Wilfred is now known as wilfred
[03:40:41] *** Quits: rgherdt (~rgherdt@ip5f5af414.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[03:54:18] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 264 seconds)
[03:56:30] *** Quits: bilegeek (~bilegeek@2600:1008:b017:63a6:c26d:d119:faaa:a6d7) (Quit: Leaving)
[03:57:54] *** Joins: sm2n (~sm2n@user/sm2n)
[04:02:46] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[04:07:56] *** Joins: ceblan (~user@237.red-81-40-102.staticip.rima-tde.net)
[04:19:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 244 seconds)
[04:21:51] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:22:31] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 268 seconds)
[05:11:50] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[05:16:18] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[05:18:42] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:25:26] *** Joins: srhm (~ascii@user/srhm)
[05:31:26] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 265 seconds)
[05:46:21] *** Joins: djuber (~user@65.79.128.64)
[06:22:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[06:29:39] *** Joins: Oladon (~olad@98.43.81.226)
[06:37:34] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 268 seconds)
[06:48:19] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:a024:24ed:1421:f945)
[06:48:19] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:a024:24ed:1421:f945) (Changing host)
[06:48:19] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:20:26] *** Joins: raeda (~raeda@72.49.219.33)
[07:32:51] <beach> Good morning everyone!
[07:39:19] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:42:36] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[07:46:39] <Josh_2> Mornin'
[08:05:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:05:47] <phantomics> Morning beach
[08:06:16] <kakuhen> good evening
[08:07:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[08:07:43] *** Lord_of_Life_ is now known as Lord_of_Life
[08:07:58] <phantomics> A question: normally, you can create lexical aliases of dynamic variables inside a function, reset the values for those aliases and then the new values will be effective inside the function but the dynamic variable outside will not be changed. Is there any reason that the dynamic variable could end up getting changed anyway? I'm having that happen
[08:08:20] *** Quits: slyrus (~slyrus@135.180.166.51) (Ping timeout: 268 seconds)
[08:09:08] <phantomics> For example, let's say you have a dynamic var called *io* and then you do this: (defun bla (aa) (let ((*io* *io*)) (setq *io* 33) (* aa *io*)))
[08:09:35] <beach> phantomics: That's not a "lexical alias".
[08:09:46] <phantomics> You run (bla 5) and then you find that the dynamic *io* is set to 33
[08:09:59] <beach> phantomics: When the variable is special, LET creates a dynamic binding.
[08:10:24] <phantomics> Ok, if it's defined as special
[08:10:35] <White_Flame> you sure it's not a simple paren scoping problem?
[08:10:53] <beach> Yeah, I am with White_Flame.
[08:10:57] <phantomics> White_Flame: it shouldn't be, checked that thoroughly
[08:11:09] <phantomics> My test case with *io* worked correctly, and I created *io* with (defvar)
[08:11:14] <White_Flame> and yeah, the asterisk earmuffs are not relevant in any way, just a human-oriented style policy
[08:11:25] <phantomics> Know about the earmuffs
[08:11:37] <White_Flame> it is the defvar/defparameter that make the special declaration
[08:12:06] <White_Flame> in weird cases, you might also do (declare (special *foo*)) if it's not known at compiletime
[08:12:13] <White_Flame> inside a scope
[08:13:00] <phantomics> That test case up there works right but something inside April has a problem and is changing the dynamic var outside the (let) scope
[08:13:35] <phantomics> April's (let) form isn't created until after macroexpansion but that shouldn't affect what happens at runtime afaik
[08:14:27] <White_Flame> right, it's all compile-time decision making as to what access code to generate
[08:14:36] <White_Flame> lexical vs dynamic
[08:14:41] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[08:17:55] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.2)
[08:19:52] <phantomics> So the variable scoping is decided at compile time? That could be the cause
[08:20:33] <mfiano> Are you familiar with how special variables form a stack of multiple bindings?
[08:20:35] <phantomics> There are a few stages of macroexpansion before that (let) form is generated, meanwhile inside the macro there's a (setq) changing the value of the dynamic var
[08:20:59] <phantomics> mfiano: not really
[08:21:02] <mfiano> At compile time and during macro-expansion, only the value of the "root" binding is available.
[08:21:42] <mfiano> Ah I suggest you look into special variables or ask a more specific question then. I'm not sure where the end of your knowledge begins :)
[08:22:08] <phantomics> So it would associate the (setq *something* ...) with the dynamic var and not the lexical one whose binding is generated through macroexpansion
[08:22:30] <mfiano> I am not sure what yoiu mean by "lexical"
[08:22:42] <mfiano> a special variable always has a dynamic binding, not lexical
[08:23:01] <phantomics> The (let ((*io* *io*)) ...) binding
[08:23:15] <mfiano> How was *io* initially defined before that form?
[08:23:18] <phantomics> When I run that test case above, *io* is not changed even though I (setq) it in the function
[08:23:26] <phantomics> (defvar *io* 11)
[08:23:37] <mfiano> Then *io* is forever a special variable and there is no lexical
[08:23:48] <mfiano> The value of the "root" binding is 11
[08:24:23] <mfiano> (let ((*io* 'foo)) ...) pushes FOO onto the stack of values for the duration of the LET, even across function call boundaries
[08:24:37] <mfiano> When the LET ends, the binding is popped, and the 11 is back in business
[08:24:48] <phantomics> Ok, I see
[08:24:55] *** Joins: dsk (~dsk@user/dsk)
[08:25:12] <phantomics> And what happens if the (let) is generated through macroexpansion? For example...
[08:25:44] <phantomics> (expand-to-fun bla *io* (setq *io* 33) (* aa *io*))
[08:25:57] <phantomics> This macro expands to the (defun bla ...) above
[08:26:29] <mfiano> First, I would urge you to never use SETQ
[08:26:35] <mfiano> SETF will do all it can do and more
[08:27:00] <phantomics> Ok
[08:27:44] <phantomics> That macro should actually be: (expand-to-fun bla (aa) *io* (setq *io* 33) (* aa *io*))
[08:27:52] <mfiano> To answer your question, all that matters is that you have code that expands into (defvar *io* ...) ... (let ((*io* ...)) ...) which will push a new binding onto the special variable's stack at runtime
[08:29:12] <mfiano> As an experiment, try PRINT-ing the value of the variable directly before, inside, and after the all of the nested LET forms
[08:29:26] <beach> phantomics: Again, I agree with White_Flame.  There must be something wrong with the expansion so that the assignment is outside the binding scope.
[08:29:27] <mfiano> s/the all/all/
[08:31:16] <mfiano> phantomics: pastebin macroexpand-1 or whatever
[08:31:28] <mfiano> and the macro definition
[08:32:18] <phantomics> Ok, generating the code...
[08:32:18] <mfiano> I agree with White_Flame and beach. We would need to see the macro and client code if it's contained enough
[08:38:07] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:38:20] *** Joins: beach` (~user@2a01:cb19:150:3400:a1fa:cc82:d570:b580)
[08:38:49] <phantomics> Ok here it is: https://pastebin.com/L8SfJTXD
[08:39:11] <phantomics> Showing four steps of macroexpansion, just the macros that should be relevant are expanded
[08:39:24] *** Quits: beach (~user@2a01:cb19:150:3400:a00:cd4:816c:6b7f) (Killed (NickServ (GHOST command used by beach`!~user@2a01:cb19:150:3400:a1fa:cc82:d570:b580)))
[08:39:28] *** beach` is now known as beach
[08:39:40] *** ChanServ sets mode: +o beach
[08:39:54] <mfiano> also add the macro definition, and the unexpanded call site
[08:40:49] *** beach sets mode: -o beach
[08:41:59] *** Joins: knusbaum (~kjn@2601:240:8480:9990:14db:ffa6:a67:f86d)
[08:42:22] <phantomics> (in-april-workspace) defined at https://github.com/phantomics/april/blob/master/utilities.lisp#L37, and the (alambda) definition I'm currently using is at https://pastebin.com/6u4LhCZN
[08:44:51] <phantomics> Lmk if anything else will help, (apl-call ...) is just a (funcall) in this situation and the (apl-assign) just expands  to the (setq) here, the important thing is the assignment of the *index-origin*
[08:44:53] <mfiano> Ok this is more complicated than I thought. The docstring says its a reader macro, but it's not, but also says it works in combination with a reader macro that I am not familiar with...if this is generating code that happens at read time, I don't have enough time to step through that
[08:45:49] <mfiano> I also don't see any backquoited expression to generate, so I'm not sure.
[08:47:00] <phantomics> Oh, you mean (in-april-workspace)?
[08:47:14] <phantomics> The reader macro in question is 𝕊
[08:47:32] <phantomics> When it expands it replaces all the 𝕊something with symbols interned in the workspace package
[08:47:38] <phantomics> You can see this happen between Step 1 and 2
[08:47:40] <mfiano> Where is the defvar for *index-origin*?
[08:48:04] <phantomics> It happens when the workspace package is created
[08:48:11] <phantomics> Looking up that code...
[08:50:51] <phantomics> Here's how the workspace is created: https://pastebin.com/tg7GPQW3
[08:51:27] <mfiano> You are using SET, not DEFVAR/DEFPARAMETER
[08:51:33] <phantomics> It's not actually defvared, since workspace creation is done through a macro.
[08:51:56] <mfiano> You need to declare it special somehow if you don't want to assignment to persist
[08:52:04] <mfiano> s/to/the/
[08:52:04] <phantomics> I proclaim the symbol special and the SET it
[08:52:10] <mfiano> Oh let me see
[08:52:25] <phantomics> See the PROCLAIM there
[08:53:06] <mfiano> Wow apl-assign looks complicated
[08:53:26] <phantomics> That's because it has to handle stranded assignment
[08:54:30] <mfiano> I'm sorry but it's very hard to read your code because you are mixing spaces and tab characters for indentation
[08:54:48] <phantomics> I see, I'm just using emacs auto-indent
[08:55:38] <phantomics> Is there a setting I should change? The raw on Github looks fine for me
[08:56:11] <mfiano> Yeah the raw is the only way to make sense out of it :)
[08:57:06] <phantomics> The regular Github view looks fine to me too, I guess my settings are different
[08:57:07] <mfiano> There are a few settings in emacs to use x number of spaces instead of a tab character, but I forget, it's sort of off-topic, and #emacs would be of more help than me
[08:57:18] <phantomics> Yeah I'll ask there
[08:57:34] <mfiano> https://i.lisp.cl/Nw3PUc.png
[08:58:04] <mfiano> vs raw https://i.lisp.cl/IQgM2Y.png
[08:58:24] <mfiano> if i inspect the bytes i can see multiple whitespace characters
[08:59:28] <mfiano> I don't see anything fishy with the code except that i still suspect some compiler phase ordering issue with the way your reader macros/macros are executed
[08:59:48] <mfiano> Sadly I don't have anymore time, bvut might be able to check more later if nobody else can help
[09:02:43] <phantomics> Got it, really appreciate your help
[09:03:59] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[09:04:23] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:08:41] <phantomics> The 𝕊 reader macro probably has something to do with it since my test code doesn't have anything like it
[09:12:35] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[09:12:42] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[09:13:03] *** Joins: selwyn (~selwyn@user/selwyn)
[09:17:36] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[09:18:42] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 258 seconds)
[09:20:42] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:20:54] <kakuhen> when indentation in emacs is normal but looks weird elsewhere, I normally fix that with C-u M-x untabify
[09:21:07] <kakuhen> not sure why, but other editors dont recognize the tabs set by auto-indenting
[09:41:57] *** Joins: akoana (~ah@user/akoana)
[09:43:50] *** Joins: unyu (~pyon@user/pyon)
[09:45:09] <beach> Put (setq-default indent-tabs-mode nil) in your .emacs and it will not use TABs.
[09:51:01] <phantomics> I'll see how that works
[09:51:09] <moon-child> probably want an extra guard; tabs are appropriate for most languages other than lisps
[09:51:14] <moon-child> *lisp
[09:55:50] <beach> Why would anyone want to use other languages? :)
[09:56:14] <moon-child> :)
[10:37:56] *** Quits: knusbaum (~kjn@2601:240:8480:9990:14db:ffa6:a67:f86d) (Remote host closed the connection)
[10:38:50] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:42:11] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[10:42:48] <kakuhen> sometimes i want to inflict pain on myself, so i use languages that aren't lisp
[10:42:51] <kakuhen> QED
[10:43:28] <kakuhen> anyway, turns out cl-tui has enough comfortable abstractions, and cl-charms has too many C buffer stuff going on under the hood that kept giving unexpected behaviors
[10:44:16] <kakuhen> i still dont like the whole situation with ncurses on common lisp, but to be fair, I should've known what I signed up for when wanting to access a C library of all things via lisp.
[10:51:05] *** Quits: lottaquestions (~nick@2607:fa49:5041:a600:302c:2ca5:9f37:1500) (Ping timeout: 244 seconds)
[10:52:09] *** Joins: lottaquestions (~nick@2607:fa49:5040:5c00:302c:2ca5:9f37:1500)
[11:03:09] *** Quits: gigo (~gigo@user/gigo) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:03:18] *** Quits: susam (~susam@user/susam) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:03:54] *** Joins: susam (~susam@user/susam)
[11:04:55] *** Joins: gigo (~gigo@user/gigo)
[11:09:20] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:34:20] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[11:34:39] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[11:34:53] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:38:36] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[11:39:00] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 258 seconds)
[11:40:20] <jackdaniel> kakuhen: I've made a fair hack that doesn't rely on ncurses
[11:40:58] <jackdaniel> http://turtleware.eu/posts/Charming-CLIM-tutorial-part-2--Rethinking-The-Output.html (there is a second part of this)
[11:41:04] <jackdaniel> or rather the first part
[11:41:25] <jackdaniel> http://turtleware.eu/posts/Controlling-the-terminal.html <-
[11:47:37] *** Quits: d4ryus (~d4ryus@ppp-188-174-87-123.dynamic.mnet-online.de) (Quit: WeeChat 3.1)
[11:52:01] *** Joins: makomo (~makomo@user/makomo)
[12:02:00] <gigo> (= t t) leads to error: The value T is not of type NUMBER when binding NUMBER. What is the correct equality comparison function for T and NIL?
[12:02:15] <beach> ::clhs eq
[12:02:16] <Colleen> Clhs: function eq http://www.lispworks.com/documentation/HyperSpec/Body/f_eq.htm
[12:02:31] <beach> gigo: T and NIL are symbols and you can compare symbols with EQ.
[12:02:43] <gigo> beach: thanks
[12:02:50] <beach> Pleasure.
[12:04:08] <beach> Also important in your example, T and NIL evaluate to themselves.  So you can't do (EQ MUMBLE MUMBLE) without giving a value to MUMBLE.
[12:04:20] <flip214> Posterdati: sometimes
[12:09:58] *** Joins: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:219a:bc5b:d512:ca68)
[12:09:59] *** Quits: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:219a:bc5b:d512:ca68) (Client Quit)
[12:13:06] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[12:13:45] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 244 seconds)
[12:14:48] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[12:19:22] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[12:22:01] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:219a:bc5b:d512:ca68)
[12:22:02] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:219a:bc5b:d512:ca68) (Changing host)
[12:22:02] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:37:19] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:52] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:47:43] <gigo> Does it bother anyone else that autocomplete in SLIME REPL is a simple <Tab> but autocomplete in source code buffer is <Alt> + <Tab>? I always keep getting the two mixed up while switching between source code and SLIME REPL.
[12:48:13] *** Quits: gpiero (~quassel@193.182.16.91) (Quit: Quitting...)
[12:48:32] *** Joins: gpiero (~quassel@193.182.16.91)
[12:49:56] *** Joins: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de)
[12:56:31] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[12:59:00] *** Quits: frgo_ (~frgo@dynamic-046-114-150-088.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[12:59:06] *** Joins: frgo (~frgo@p200300deef27d7003cd976f651aaf725.dip0.t-ipconnect.de)
[13:00:03] *** Joins: abraham (~abraham@191.96.120.28)
[13:00:52] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[13:07:38] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806)
[13:18:47] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 265 seconds)
[13:28:52] *** Joins: selwyn (~selwyn@user/selwyn)
[13:37:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[13:40:25] *** Quits: frgo (~frgo@p200300deef27d7003cd976f651aaf725.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:41:00] *** Joins: frgo (~frgo@dynamic-046-114-150-088.46.114.pool.telefonica.de)
[13:43:18] *** Joins: Krystof (~user@81.174.155.115)
[13:52:31] *** Joins: Guest57 (~Guest57@151.30.85.5)
[13:52:47] <dsk> gigo: You can bind <tab> to 'slime-indent-and-complete-symbol in slime-mode-map or just use M-<tab> in both the REPL and Lisp buffers.
[14:04:06] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[14:18:14] *** Quits: micro (~micro@user/micro) (Remote host closed the connection)
[14:20:41] *** Joins: micro (~micro@user/micro)
[14:22:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (*.net *.split)
[14:22:22] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[14:22:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[14:22:57] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:26:08] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[14:28:41] *** Joins: Quasus (~Quasus@a89-152-209-125.cpe.netcabo.pt)
[14:31:03] <gigo> dsk: thanks
[14:41:29] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[14:42:40] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:49:43] *** Quits: Guest57 (~Guest57@151.30.85.5) (Ping timeout: 246 seconds)
[14:50:14] *** Joins: random-nick (~random-ni@87.116.177.92)
[14:50:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[15:05:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[15:05:48] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:16:48] *** Joins: zacts (~zak@user/zacts)
[15:17:18] *** Quits: zacts (~zak@user/zacts) (Client Quit)
[15:22:52] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[15:23:50] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[15:24:04] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[15:24:22] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:48:31] *** Quits: sm2n (~sm2n@user/sm2n) (Quit: Leaving)
[15:50:31] *** Joins: sm2n (~sm2n@user/sm2n)
[15:53:28] *** Joins: knusbaum (~kjn@2601:240:8480:9990:dd5b:865e:e04b:2c82)
[15:57:08] *** Parts: susam (~susam@user/susam) ()
[15:59:27] *** Quits: knusbaum (~kjn@2601:240:8480:9990:dd5b:865e:e04b:2c82) (Ping timeout: 268 seconds)
[16:06:09] *** Joins: susam (~susam@user/susam)
[16:07:30] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[16:07:44] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:14:36] *** Joins: djuber` (~user@65.79.128.64)
[16:16:44] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 268 seconds)
[16:18:56] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[16:19:02] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[16:20:12] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[16:20:21] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:23:26] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 258 seconds)
[16:23:56] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[16:31:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[16:32:48] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:37:22] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[16:39:43] *** Parts: susam (~susam@user/susam) ()
[16:43:43] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 265 seconds)
[16:45:53] *** Joins: susam (~susam@user/susam)
[16:56:16] *** Joins: tfb (~tfb@88.98.95.237)
[16:58:34] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[17:03:47] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[17:04:41] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[17:21:09] *** Joins: Alfr (~Alfr@user/alfr)
[17:28:59] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:34:40] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[17:43:39] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[17:43:56] *** Quits: andreyorst (~andreyors@2.92.127.117) (Ping timeout: 252 seconds)
[17:45:39] *** Quits: frgo (~frgo@dynamic-046-114-150-088.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[17:45:45] *** Joins: frgo_ (~frgo@p200300deef27d7003cd976f651aaf725.dip0.t-ipconnect.de)
[17:46:58] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[17:48:24] *** Joins: andreyorst (~andreyors@2.92.125.229)
[17:59:13] *** Joins: tfb (~tfb@88.98.95.237)
[17:59:42] *** Quits: abraham (~abraham@191.96.120.28) (Ping timeout: 252 seconds)
[18:06:14] *** Joins: dsk (~dsk@user/dsk)
[18:41:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-36.dsl.bell.ca)
[18:46:28] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[18:57:20] *** Joins: dickbar__ (~dickbaren@dyndsl-031-150-225-023.ewe-ip-backbone.de)
[18:57:35] *** Joins: Guest5791 (~Guest57@151.30.85.5)
[19:01:53] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[19:02:03] *** Parts: susam (~susam@user/susam) ()
[19:02:08] *** Joins: susam (~susam@user/susam)
[19:02:53] *** Parts: gigo (~gigo@user/gigo) ()
[19:02:58] *** Joins: gigo (~gigo@user/gigo)
[19:03:35] <gigo> Is there a difference between (cons 10 20) and '(10 . 20)?
[19:04:27] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:04:54] <beach> Yes, the second is a literal and you can't modify it.
[19:05:12] <beach> I mean, the consequences are undefined if you do.
[19:05:39] <gigo> beach: thanks
[19:07:47] *** Joins: Josh_2 (~user@37.25.47.130)
[19:08:06] <Josh_2> 'ello
[19:08:25] <beach> Hello Josh_2.
[19:08:41] <gigo> Say I have a list like this: '((cons "key1" "val1") (cons "key2" "val2")). Let us say I have two such lists one in variable a and another in variable b. Is there a way to perform equality comparison of both lists?
[19:09:54] <beach> You need to read about the equality predicates, but I think EQUAL will work.
[19:09:58] <beach> ::clhs equal
[19:09:59] <Colleen> Clhs: function equal http://www.lispworks.com/documentation/HyperSpec/Body/f_equal.htm
[19:10:30] <beach> gigo: I am assuming you want two stings with the same characters in them to be equal in this respect.
[19:11:15] <beach> gigo: Try this one (defun ff () '(10 . 20))  then (defparameter *c* (ff)) then (setf (car *c*) 234) then (ff)
[19:12:37] <gigo> beach: Do you know why I get NIL for this comparison? - https://plaster.tymoon.eu/view/2505#2505
[19:13:11] *** Joins: ggoes (~gregf@user/ggoes)
[19:13:40] <beach> Yes, the first list contains the symbol CONS.
[19:13:54] <beach> Not the second.
[19:14:22] <beach> Each sublist in the first list is a list of three elements...
[19:14:27] <beach> The symbol CONS and two strings.
[19:15:11] <beach> Each element in the second list is just a CONS cell with a string in the CAR slot and another string in the CDR slot.
[19:15:27] <beach> So they are not even structurally similar.
[19:16:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-36.dsl.bell.ca) (Remote host closed the connection)
[19:17:31] <beach> You might want to change the first one from '((cons "foo" "bar") (cons "bar" "qux")) to (list (cons "foo" "bar") (cons "bar" "qux"))
[19:18:35] <beach> Or if you are adventurous, to `(,(cons "foo" "bar") ,(cons "baz" "qux")).  Notice the backquote.
[19:20:48] <beach> gigo: Did you faint?
[19:23:44] <Josh_2> Whats the default implementation of a classes accessor? is it just a method by that name that calls slot-value?
[19:23:58] <Josh_2> for reading
[19:24:11] <Josh_2> and then a setf method that sets the slot-value for setting?
[19:25:15] <tfb> Josh_2: for standard-cla[19:27:37] <Josh_2> rip
[19:27:48] <tfb> beach: yes, that's what I mean: it effectively calls slot-value but it may not actually do that
[19:28:02] <tfb> Josh_2: sorry, I was being confusing / confused
[19:28:22] <tfb> Josh_2: what beach says is more accurate
[19:28:33] <Josh_2> bnkr.datastore requires (with-transaction ..) to be wrapped around setfs. Bit annoying
[19:28:41] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[19:29:29] <Josh_2> Not sure about a nice solution that doesn't require writing a special setter for all of my slots that will be modified
[19:30:25] <Josh_2> Maybe I need a custom metaclass that has a :within-transaction key which automatically writes new setter methods that are within the with-transaction xD
[19:31:03] <gigo> beach: Thanks it worked. The difference also became clear after I put each list in REPL and seeing how REPL printed the list.
[19:31:46] <beach> Right.
[19:32:09] <beach> Also try the DEFUN example to see how literals may behave.
[19:32:30] <loke[m]> Josh_2 you can use SLOT-VALUE-USING-CLASS
[19:32:55] <Josh_2> I already tried that, bknr was complaining about an anonymous transaction
[19:33:58] <Josh_2> I made an :around method on slot-value-using-class then put (with-transaction (<my-label>) (call-next-method)) but I kept getting an error
[19:35:26] <loke[m]> Josh_2 well that should have worked
[19:35:31] <Josh_2> hmm
[19:35:35] <Josh_2> I will try it again
[19:36:01] <gigo> (defun ff () '(10 . 20)) (defparameter *c* (ff)) (setf (car *c*) 234) (ff) => (234 . 20). How is it that it was able to modify the literal? Was it a result of undefined behavior?
[19:36:10] <gigo> beach: ^
[19:36:31] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[19:36:43] *** Joins: tfb (~tfb@88.98.95.237)
[19:36:47] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[19:37:33] <beach> gigo: Since this is undefined behavior, the implementation is allowed to represent the literal once.
[19:37:45] <beach> gigo: Common Lisp uses what I call "uniform reference semantics".
[19:37:57] <beach> So that each object is referred to by a reference or a pointer.
[19:38:15] <beach> FF returns a pointer to a unique object and it's the same object each time FF is called.
[19:38:28] <beach> A reference to that object is then stored in *c*.
[19:38:50] <beach> Then, when you modify the CAR of that object, the result is what you observe.
[19:39:10] <gigo> beach: okay. would it be correct to say that the above example, specifically, the part (setf (car *c*) 234), is undefined behavior and therefore should be avoided in actual software code?
[19:39:30] <beach> Yes.
[19:39:45] <beach> That form is modifying a literal.
[19:39:54] <gigo> beach: thanks! it is making a lot of sense now
[19:40:03] <beach> Great!
[19:41:15] <Josh_2> Nope doesn't work :(
[19:43:10] <Josh_2> 'anonymous transaction in transaction was signalled'
[19:46:20] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:49:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[19:54:53] *** Joins: Guest8 (~Guest8@188.214.106.83)
[19:55:37] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[19:57:29] <phantomics> Hi, a question: what's considered the proper way to create a lambda that can reference itself in CL? Similar to "this" in Javascript anonymous functions. I solved my prior problem but it turns out my method for building anonymous self-referencing lambdas was the problem
[19:58:00] <luis> phantomics: labels
[19:58:13] <phantomics> like this? (funcall (labels ((this-fn (a b) ...)) #'this-fn) 1 2)
[19:58:25] <edgar-rft> clhs labels
[19:59:06] <luis> phantomics: yes. See alexandria:named-lambda if that’s too verbose
[19:59:26] <phantomics> I was using labels and having a problem with the value stack of dynamic variables
[20:00:14] <luis> phantomics: what sort of problem?
[20:00:52] <phantomics> I may have just figured out how to solve it. Hang on a minute...
[20:04:41] <beach> phantomics: There is no such thing as "a lambda" in Common Lisp.  There is a "lambda expression" and there are functions, named or anonymous.
[20:05:34] <phantomics> Ok, solved. What's going on was that I had a lexical variable that I was assigning a locally scoped variable inside a let, and then inside that let I had an anonymous self-referencing function created with (labels)
[20:06:03] <phantomics> It turns out that the (let) form needs to be inside the (labels) function declaration to work correctly, you can't wrap the (labels) in the (let)
[20:06:49] <derelict> wouldnt flet avoid that issue?
[20:07:15] <phantomics> The goal is to have an anonymous function that can self-reference, can't do that with flet
[20:08:04] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[20:08:21] *** Joins: amb007 (~a_bakic@113.198.204.77.rev.sfr.net)
[20:09:12] <mfiano> phantomics: Oh you finally got it? Nice!
[20:09:47] <phantomics> Yes
[20:09:54] <phantomics> It turns out the (labels) was the problem
[20:10:13] <mfiano> If the let is inside the labels then it isn't closing over the bindings.
[20:12:42] <luis> phantomics: hard to know what’s correct or not without knowing what you’re trying to achieve
[20:13:13] <beach> I agree with luis.
[20:15:14] <phantomics> It's resolved now, the goal was to create a macro to implement lambda forms creating functions that 1. include a self-reference symbol and 2. always include locally-scoped aliases of external dynamic variables
[20:17:04] <phantomics> This is needed for my APL compiler because in APL functions you can enter ∇ to reference the function itself for recursion. It also needs to be possible to reassign certain system-level variables like the index origin inside a function and have that reassignment only apply to things happening inside the function
[20:21:27] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:22:13] <luis> What's an external dynamic variable?
[20:23:27] <luis> And what does alias mean in this context? Is it a lexical variable that's bound to the value of a dynamic variable at
[20:23:46] <luis> the time the closure is created?
[20:25:05] <phantomics> Like imagine I start with (defvar *io* 11), and then I create a lambda like so: (let ((*io* *io*)) (lambda (a) (setq *io* 22) (* *io* a)))
[20:25:27] <phantomics> So I'm creating a locally-scoped *io*, that (setq) shouldn't change its value outside of that scope
[20:25:52] <phantomics> My case was more complicated, creating a (labels) form inside the (let), and it turned out that was causing a problem, the outside *io* was getting assigned
[20:26:02] <phantomics> I moved the (let) inside the (labels) declaration and now it works
[20:26:48] *** Quits: Guest8 (~Guest8@188.214.106.83) (Quit: Client closed)
[20:35:14] <sm2n> phantomics, another way to do self-referential anonymous functions is to use the Y-combinator
[20:38:05] *** Joins: shka (~herr@109.231.62.239)
[20:38:13] <sm2n> i.e (Y (lambda (f) (lambda (..) ..))) will give you the inside (lambda (..) ..) with all recursive references to f resolved
[20:38:33] <sm2n> you can use a gensym for f if you're generating code
[20:40:29] *** Joins: eddof13 (~textual@187.246.227.157)
[20:42:20] <_death> phantomics: the function does not capture the *IO* binding there..
[20:42:21] *** Quits: amb007 (~a_bakic@113.198.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:42:47] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:43:11] <_death> phantomics: what you possibly want is (let ((io *io*)) (lambda ... (setq io 22) ...))
[20:43:20] *** Joins: Bike (~Bike@2603-6081-2340-023a-0529-e6bd-b770-8333.res6.spectrum.com)
[20:43:20] *** ChanServ sets mode: +o Bike
[20:43:21] *** Quits: Bike (~Bike@2603-6081-2340-023a-0529-e6bd-b770-8333.res6.spectrum.com) (Client Quit)
[20:44:14] *** Joins: Bike (~Bike@2603-6081-2340-023a-0529-e6bd-b770-8333.res6.spectrum.com)
[20:44:14] *** ChanServ sets mode: +o Bike
[20:45:02] *** Quits: dickbar__ (~dickbaren@dyndsl-031-150-225-023.ewe-ip-backbone.de) ()
[20:47:19] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[20:47:36] *** Joins: amb007 (~a_bakic@113.198.204.77.rev.sfr.net)
[20:50:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[20:50:04] *** Quits: amb007 (~a_bakic@113.198.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:50:27] <beach> _death: phantomics was told that the other day, and was also told that this binding is not lexical.
[20:50:41] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:50:58] <_death> maybe https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node43.html would make things clearer, then
[20:52:45] <Josh_2> with bknr.datastore can I stop some slots from being stored? I have two slots which are local-time:timestamps I dont need these stored as I store a universal-time
[20:54:10] *** Joins: Guest63 (~Guest63@5.30.23.247)
[20:54:56] <Guest63> Hi
[20:55:29] <Guest63> My brain is fried trying to get my head around bknr.datastore. I got most things to work, but I'm unable to get restore to work correctly
[20:56:23] <Guest63> Does anybody have experience with this package and are able to get rollback of the datastore smoothly? Every time I try (except for the odd couple of times - so I think the order of steps I'm doing may be wrong), restore just loads the full snapshot
[20:57:50] *** Quits: Bike (~Bike@2603-6081-2340-023a-0529-e6bd-b770-8333.res6.spectrum.com) (Quit: Client closed)
[21:08:45] <Guest63> Got my answer
[21:09:08] <Guest63> Doesn't look like restore "until" has been implemented for object subsystems
[21:09:46] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[21:11:02] <phantomics> _death: (let ((io *io*)) ...) doesn't work in my case because I'm compiling code and the *io* needs to be generated the same way whether or not it's inside a closure aliasing *io*
[21:12:07] <phantomics> The problem is solved now, the key was to create the (let) binding inside the (labels) definition for the function
[21:13:32] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:14:30] <_death> not sure what you mean, maybe I'm missing some context.. but hey, if it's solved..
[21:14:51] *** Joins: shka (~herr@109.231.62.239)
[21:25:36] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:29:08] *** Quits: eddof13 (~textual@187.246.227.157) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:49] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 265 seconds)
[21:45:55] *** Joins: srhm (~ascii@user/srhm)
[21:54:43] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[21:57:26] *** Quits: Guest63 (~Guest63@5.30.23.247) (Ping timeout: 265 seconds)
[22:12:48] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[22:14:50] *** Joins: x88x88x (~x88x88x@188.214.106.69)
[22:15:37] *** Quits: Guest5791 (~Guest57@151.30.85.5) (Ping timeout: 246 seconds)
[22:20:35] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[22:23:29] *** x88x88x is now known as x88x88x88x
[22:25:55] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[22:26:24] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 265 seconds)
[22:27:52] *** Joins: silasfox (~sbv@2001-4dd6-57a2-0-a504-35b8-bb69-198e.ipv6dyn.netcologne.de)
[22:27:56] *** Joins: x88x88x (~x88x88x@188.214.106.69)
[22:28:33] *** Quits: x88x88x (~x88x88x@188.214.106.69) (Client Quit)
[22:30:27] *** Quits: x88x88x88x (~x88x88x@188.214.106.69) (Quit: WeeChat 2.8)
[22:34:17] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[22:40:30] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 264 seconds)
[22:40:49] *** Joins: dsk (~dsk@user/dsk)
[22:42:00] *** Joins: j0nd0e (~user@158.181.245.46)
[22:42:57] *** Quits: j0nd0e (~user@158.181.245.46) (Remote host closed the connection)
[22:45:14] *** Joins: Guest5753 (~Guest57@151.30.85.5)
[22:45:58] *** Joins: akoana (~ah@user/akoana)
[22:54:35] *** Joins: x88x88x (~x88x88x@188.214.106.69)
[23:13:33] *** Quits: hendursa1 (~weechat@user/hendu[23:26:33] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[23:29:26] *** Joins: selwyn (~selwyn@user/selwyn)
[23:33:08] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:33:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:34:22] *** Quits: Guest5753 (~Guest57@151.30.85.5) (Ping timeout: 246 seconds)
[23:36:55] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net)
[23:40:11] *** Joins: bilegeek (~bilegeek@2600:1008:b017:63a6:c26d:d119:faaa:a6d7)
[23:40:54] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:50:01] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[23:50:46] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[23:50:46] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:51:35] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net) (Quit: Client closed)
[23:51:42] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[23:52:09] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:55:51] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
