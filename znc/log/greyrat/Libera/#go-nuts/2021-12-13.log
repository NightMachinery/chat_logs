[00:01:15] *** Joins: neurocyte0132889 (~neurocyte@94.46.81.14)
[00:01:16] *** Quits: neurocyte0132889 (~neurocyte@94.46.81.14) (Changing host)
[00:01:16] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:01:26] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[00:01:45] *** Joins: noonien (~noonien@user/noonien)
[00:02:11] <bbear58> thanks
[00:03:13] <bbear58> do I have to write my package as cmd/app/?
[00:03:25] *** Joins: jla (~jordi@64.225.79.195)
[00:03:33] <ikke> either the full name, or a path starting with ./
[00:03:59] <ikke> or go build -o app ./...
[00:04:14] <bbear58> I have 'package app/foo is not in GOROOT (/home/dkremer/.local/go/src/app/foo
[00:04:57] <b0nn> what's the import path
[00:05:15] <ikke> Do you use go modules?
[00:05:24] <bbear58> I would like to but I?m not familiar with it.
[00:06:25] <bbear58> a bit mysterious for me.
[00:06:44] <bbear58> from what I understand you declare your modules in go.mod and then go build takes care of building everything
[00:06:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[00:06:58] <bbear58> but do you still have to specify which entrypoint you want to build ?
[00:10:37] <bbear58> "A file named go.mod there declares the module path: the import path prefix for all packages within the module. The module contains the packages in the directory containing its go.mod file as well as subdirectories of that directory, up to the next subdirectory containing another go.mod file (if any)."  <- this sentence is *complicated*
[00:12:18] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[00:13:41] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[00:14:27] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 250 seconds)
[00:15:31] *** Joins: noonien (~noonien@user/noonien)
[00:16:17] *** Quits: bbear58 (~bbear@2a01:e34:ec2b:d430:e0dd:e718:df68:1877) (Quit: Client closed)
[00:16:30] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[00:16:32] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[00:17:16] *** Joins: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca)
[00:18:58] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[00:19:00] <ikke> Just ignore the last part
[00:19:49] <ikke> You run go mod init <import-path> and go wil create a go.mod file
[00:21:15] *** Joins: smach (~savio@177.12.48.108)
[00:22:21] *** Quits: smach (~savio@177.12.48.108) (Remote host closed the connection)
[00:25:50] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[00:27:39] *** Joins: noonien (~noonien@user/noonien)
[00:34:17] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:37:18] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[00:37:39] *** Joins: noonien (~noonien@user/noonien)
[00:40:15] *** Quits: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca) (Ping timeout: 252 seconds)
[00:42:59] <b0nn> hrm - I put all my code into ~/go/src/github.com/<username>/<project> so that when I do `go mod init` the github.com/<username>/<project> is automagically inserted
[00:43:35] <b0nn> I mean, it doesn't have to be on $GOPATH (mine is because I /like/ $GOPATH) but having the FQDN makes life super easy
[00:44:20] *** Quits: lilgopher (~textual@2601:241:8000:38f0:d8b7:26a3:1475:24de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:44:31] <b0nn> hrm FQDN is probably the wrong term, URI is better?
[00:47:00] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:48:06] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[00:48:10] *** Joins: Torr (~Torr@user/torr)
[00:49:03] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 252 seconds)
[00:51:19] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:53:21] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-3867-449b-5d1d-345f.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:59:12] *** Joins: DM430784214951 (~DM4307@047-234-129-039.res.spectrum.com)
[01:01:03] *** Quits: egm (~egm@user/egm) (Ping timeout: 268 seconds)
[01:01:20] *** Joins: jjido (~Denis@90.213.58.125)
[01:02:44] *** Quits: DM430784214951 (~DM4307@047-234-129-039.res.spectrum.com) (Client Quit)
[01:03:03] *** Joins: DM430784214951 (~DM4307@047-234-129-039.res.spectrum.com)
[01:07:32] *** Joins: sleepingforest (~sleepingf@pool-74-98-255-220.pitbpa.fios.verizon.net)
[01:08:45] *** Joins: lilgopher (~textual@2601:241:8000:38f0:d8b7:26a3:1475:24de)
[01:08:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-3867-449b-5d1d-345f.res6.spectrum.com)
[01:13:18] <dostoyevsky2> From the net package: `func ParseIP(s string) IP` v `func ParseCIDR(s string) (IP, *IPNet, error)' -- as you know, ips can always be parsed but cidr might cause an error
[01:14:10] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:17:38] *** Joins: egm (~egm@user/egm)
[01:27:45] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Remote host closed the connection)
[01:28:01] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[01:30:02] *** Quits: sleepingforest (~sleepingf@pool-74-98-255-220.pitbpa.fios.verizon.net) (Ping timeout: 268 seconds)
[01:34:46] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[01:36:49] *** Quits: egm (~egm@user/egm) (Ping timeout: 268 seconds)
[01:44:52] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[01:46:21] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[01:58:07] *** Joins: egm (~egm@user/egm)
[01:58:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[01:59:02] <mikoto-chan> https://dpaste.com/EJKM6YG7W
[01:59:17] <mikoto-chan> is this the most efficient way to compare all the elements of an array with each other?
[02:00:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:00:59] *** Joins: fikran (~fikran@user/fikran)
[02:02:34] <fizzie> It does about double the work needed, since it compares each pair both ways.
[02:03:33] <fizzie> `for i := 0; i < len(numbers)-1; i++ { for j := i+1; j < len(numbers); j++ { m, n := numbers[i], numbers[j]; ... } }` is the obvious alternative that only considers each pair once.
[02:07:32] <fizzie> (Depending on what "do something ..." is, you may or may not need to literally compare each pair of values, in which case a map-based O(n) thing can be, but isn't necessarily, more efficient.)
[02:08:10] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[02:18:05] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:81db:767f:9ed7:8882) (Quit: WeeChat 3.3)
[02:23:41] <b0nn> hrm, the map solution, how would you cater for the fact that the searched item /is/ in the map already
[02:24:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:24:30] <b0nn> eg if the list was [1,2,3,4,1] and the comparison was intended to find if a duplicate existed
[02:24:45] <b0nn> you'd potentially create n maps?
[02:30:15] *** Joins: mud (~mud@user/kadoban)
[02:30:34] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:03] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:31:12] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-3867-449b-5d1d-345f.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:34:08] <mikoto-chan> fizzie: why not k := range numbers if you want to use the index?
[02:34:24] <b0nn> I guess that the map would have to be map[int][]int where the key is the value, and the value is the slice of indicies that that value exists at
[02:42:24] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[02:51:12] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[02:51:34] *** Joins: rcernin (~rcernin@101.189.144.104)
[02:56:39] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[02:59:19] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:59:45] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[03:02:17] *** Joins: ajunior (~ajunior@189-49-228-177.user3p.veloxzone.com.br)
[03:04:29] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:07:00] *** Joins: arinov (~arinov@213.194.126.155)
[03:10:31] *** Quits: normen (~normen@p200300d71734cf00fc87702b367baee7.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[03:12:32] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:13:01] <fizzie> The for-range version would look like `for i, n := range numbers[:len(numbers)-1] { for _, m := range numbers[i+1:] { ... } }`, I just don't think it looks any cleaner.
[03:14:40] <mikoto-chan> fizzie: indeed, forget what I said, I assumed you just converted what I already had to a for version
[03:15:59] <fizzie> (And for the alluded-to map solution, that depends on what you want to accomplish as the result of the comparison. If you just need a true/false result of whether the list contains any duplicates, for example, it could be just a `map[int]struct{}` or a `map[int]bool`, and you stop the first time the value's in the map already.)
[03:18:28] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:19:30] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[03:21:39] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:23:19] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[03:24:13] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:25:50] *** Joins: SoF3 (~skius@user/skius)
[03:26:14] *** Quits: SoF (~skius@user/skius) (Killed (NickServ (GHOST command used by SoF3)))
[03:26:14] *** SoF3 is now known as SoF
[03:26:14] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[03:36:43] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:37:11] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:39:57] *** Quits: averell (~averell@user/averell) (Remote host closed the connection)
[04:01:44] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:02:16] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:03:12] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[04:06:09] <b0nn> for _, v := range numbers { if _, ok := m[v]; ok {fmt.Println("%d has a pair", v)} else {m[v] = struct{}{}}}
[04:06:35] <b0nn> although the index knowledge will be lost, so you'd probably want to store it as you built the map
[04:08:12] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[04:09:54] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 256 seconds)
[04:10:19] *** Joins: fikran (~fikran@user/fikran)
[04:11:08] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:16:00] *** Joins: sleepingforest (~sleepingf@pool-74-98-255-220.pitbpa.fios.verizon.net)
[04:17:30] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[04:24:14] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:24:45] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:26:43] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:31:57] <dalan> Curious issue here, https://github.com/dalanmiller/advent-of-code/blob/master/2021/12/12.go#L76-L103, I think I'm making a gross misjudgement on pointers, as I'm finding that I'm ending up with Paths here that don't have a terminal node of 'end' and I'm unsure on how they are being added. I tried replicating the issue here, but it all works fine:
[04:31:58] <dalan> https://go.dev/play/p/TB8aqxUgHJT
[04:32:34] *** Quits: egm (~egm@user/egm) (Ping timeout: 256 seconds)
[04:33:40] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:34:52] *** Joins: smach (~savio@177.12.48.108)
[04:35:26] *** Quits: smach (~savio@177.12.48.108) (Client Quit)
[04:37:07] *** Joins: roshanavand (~roshanava@194.36.25.27)
[04:37:21] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[04:37:29] *** Quits: sleepingforest (~sleepingf@pool-74-98-255-220.pitbpa.fios.verizon.net) (Ping timeout: 250 seconds)
[04:37:44] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Client Quit)
[04:37:59] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[04:39:11] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[04:45:33] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 252 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:08] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Read error: Connection reset by peer)
[04:48:35] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[04:50:21] <fizzie> dalan: Suspecting the problem is around slices sharing their backing arrays. When you do `p = append(p, &c)` on line 87, the returned slice will keep using the same underlying array as long as cap(p) > len(p). Then, when you return from your recursion and then descend again in another branch on a longer path, the same `append` in that branch will overwrite the data.
[04:50:48] <fizzie> dalan: Since there's nothing concurrent about it, a simple fix would be to make a copy of the full path whenever you append a path to the global history.
[04:51:21] <fizzie> (That way the single array will be used as "working storage" for the entire recursion, but changes in it won't affect what got recorded.)
[04:52:59] <fizzie> You can validate the above guess by doing `*ps = append(*ps, append(Path(nil), p...))` in place of `*ps = append(*ps, p)` on line 92 -- that will make a brand new slice to put in the history.
[04:55:26] <dalan> Ahhhhhh thank you so much for the pointer fizzie! You're a legend
[04:55:46] <dalan> > the returned slice will keep using the same underlying array as long as cap(p) > len(p)
[04:55:46] <dalan> Is this indicated in the spec somewhere? Or why is this?
[04:55:53] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 250 seconds)
[04:56:38] <fizzie> https://pkg.go.dev/builtin#append "If it has sufficient capacity, the destination is resliced to accommodate the new elements. If it does not, a new underlying array will be allocated."
[04:56:54] <fizzie> https://go.dev/ref/spec#Appending_and_copying_slices "If the capacity of s is not large enough to fit the additional values, append allocates a new, sufficiently large underlying array -- Otherwise, append re-uses the underlying array."
[04:57:12] <dalan> TIL!
[04:57:21] *** Joins: rcernin (~rcernin@101.189.144.104)
[04:57:27] <fizzie> As for why, presumably because it's often the efficient way of using memory. But it does come with a few gotchas, as you've discovered.
[04:58:06] <dalan> Yeah! And it appears that it only happens on certain sizes? As I tried to replicate it here: https://github.com/dalanmiller/advent-of-code/blob/master/2021/12/12_test.go#L36-L84
[04:58:32] <dalan> But this passes fine.
[04:59:06] <fizzie> When `append` does reallocate, it will allocate some undefined amount, but it's more than just what's strictly needed. So the behavior can be also a little unpredictable.
[04:59:28] <fizzie> But on a more positive note, it also makes a simple `xs = append(xs, x)` loop only reallocate a reasonable amount of times.
[04:59:49] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[05:00:23] <fizzie> (The logic is something similar to doubling the allocated size every time, except IIRC it's not _exactly_ that.)
[05:06:12] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[05:07:08] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 256 seconds)
[05:07:24] <fizzie> Here's a (possibly slightly hard-to-follow) playground example: https://go.dev/play/p/dm6BAV_Plf1
[05:09:07] <fizzie> Where the "surprising" part is that the values "6, 7" in the early paths (from lines 19, 20) got overwritten by "666, 777" (from lines 28, 29). But that _didn't_ happen for the things added in lines 22-26, because (by coincidence) there was no room to append anything to the `p2` slice.
[05:09:23] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[05:09:26] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 265 seconds)
[05:10:13] <fizzie> (You can add print statements for len(p2), cap(p2), len(p5) and cap(p5) to compare why.)
[05:10:55] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Read error: Connection reset by peer)
[05:11:14] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[05:11:55] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[05:12:59] *** Joins: rcernin (~rcernin@101.189.144.104)
[05:16:38] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:20:23] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 252 seconds)
[05:20:45] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[05:22:00] *** Joins: rcernin (~rcernin@101.189.144.104)
[05:30:51] *** Joins: shtirlic (~shtirlic@178.70.132.77)
[05:34:06] *** Quits: shtirlic_ (~shtirlic@178.70.132.135) (Ping timeout: 260 seconds)
[05:35:19] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[05:37:32] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[05:41:01] *** Quits: hackers (~self@user/hackers) (Ping timeout: 268 seconds)
[05:43:47] *** Joins: darkapex (~darkapex@user/darkapex)
[05:43:58] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[05:50:03] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:55:29] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 250 seconds)
[05:57:50] *** Joins: rcernin (~rcernin@101.189.144.104)
[06:05:40] *** Joins: haniaF (~haniaF@83.24.213.124.ipv4.supernova.orange.pl)
[06:05:59] *** Quits: haniaF_ (~haniaF@83.24.213.124.ipv4.supernova.orange.pl) (Ping timeout: 265 seconds)
[06:06:51] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:09:24] *** Quits: mickey88 (~user@user/mickey) (Remote host closed the connection)
[06:09:51] *** Joins: mickey8 (~user@user/mickey)
[06:10:37] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 252 seconds)
[06:17:06] *** Quits: lilgopher (~textual@2601:241:8000:38f0:d8b7:26a3:1475:24de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:17:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:19:39] *** Joins: fikran (~fikran@user/fikran)
[06:22:04] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[06:27:08] *** Quits: justicefries (sid26447@id-26447.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:31:03] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:28] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:34:45] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:39:20] *** Joins: rcernin (~rcernin@101.189.144.104)
[06:39:27] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 250 seconds)
[06:43:13] *** Joins: lilgopher (~textual@2601:241:8000:38f0:d8b7:26a3:1475:24de)
[06:43:31] *** Quits: lilgopher (~textual@2601:241:8000:38f0:d8b7:26a3:1475:24de) (Client Quit)
[06:47:07] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:50:37] *** Joins: dozn (uid249292@user/dozn)
[06:52:30] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 260 seconds)
[06:54:22] *** Quits: roshanavand (~roshanava@194.36.25.27) (Ping timeout: 260 seconds)
[07:11:01] *** Quits: andlabs (~andlabs@70.107.171.168) (Read error: Connection reset by peer)
[07:11:11] *** Joins: andlabs_ (~andlabs@70.107.171.168)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:17:52] *** Joins: JPT (~jpt@classified.name)
[07:18:42] <b0nn> https://ece.uwaterloo.ca/~dwharder/aads/Algorithms/Array_resizing/
[07:18:51] <b0nn> Increasing the capacity of the array by a constant results in an amortized Θ(n) copies being made for each insertion. Increasing the array capacity by an arithmetically increasing sequence of entries (e.g., 1, 2, 3, 4, ...) results in an amortized Θ(√n) copies being made for each insertion. When the capacity of the array is increased geometrically, i.e., by a multiplicative factor r > 1, the number of
[07:18:57] <b0nn> copies is an amortized Θ(1).
[07:19:48] <b0nn> Array resizing is quite the studied topic (whether it be Java's ArrayList, Go's slice, C# Resize, or what have you
[07:20:39] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:22:55] *** Joins: lilgopher (~textual@2601:241:8000:38f0:d8b7:26a3:1475:24de)
[07:31:28] <b0nn> Hmm, Rust seems to demand that you do the calculation yourself
[07:37:18] <bpalmer> not sure what you're looking at , but rust's std::vec::Vec will handle growing as needed
[07:38:24] <b0nn> oh, I was looking at https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#1959-1961
[07:38:39] <b0nn> What's the 'append' I should be looking for?
[07:38:49] *** Quits: moog (~moog@107.126.53.217) (Remote host closed the connection)
[07:38:49] <bpalmer> push()
[07:40:06] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[07:40:35] <bpalmer> (or insert)
[07:41:13] <bpalmer> search for [`push`] and [`insert`] will never (re)allocate ... in the comments; the paragraphs right around there speak to its strategy
[07:41:16] <b0nn> push() calls reserve() (and rthe Rust channel mentioned reserve too) https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#808
[07:41:34] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[07:44:33] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[08:04:47] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:05:18] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[08:08:12] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[08:09:02] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 256 seconds)
[08:10:52] <b0nn> annd  kicked from ##rust because they did everything they could to not post links to the code
[08:11:26] <b0nn> The closest I have for Rust is this https://docs.rs/containers/0.8.5/src/containers/collections/raw_vec.rs.html#57 but it's not standard library, it's a crate
[08:11:58] *** Joins: rcernin (~rcernin@101.189.144.104)
[08:17:02] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 268 seconds)
[08:25:10] <bpalmer> I believe that's because stuff under std:: is not available for bare metal rust binaries that don't want to use the standard library.
[08:26:15] <bpalmer> rust's standard library is fairly rich, much like go's; it has networking support, threads, high level containers, etc
[08:27:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[08:28:59] *** Joins: fikran (~fikran@user/fikran)
[08:29:58] <b0nn> All I want to see is how they grow arrays :(
[08:30:08] <b0nn> I mean, it shouldn't be such an issue
[08:31:11] <b0nn> I mean, if someone came in here asking for the Go strategy, it's as simple as .. <link to growslice in runtime/slice.go>
[08:31:22] <bpalmer> you know from the comments that they promise O(1) amortized cost, and you can see the current crate source to see how it currently is done
[08:31:33] <bpalmer>  self.grow(match n.checked_add(n_more).and_then(|n| n.checked_next_power_of_two()) {
[08:32:11] <b0nn> I can see the promise, yes, I cannot see the growth strategy in the code, at least not in a way that makes sense
[08:32:21] <b0nn> n_more looks supplied to me
[08:32:43] <b0nn> I mean, keeping in mind that my Rust is fairly rudimentary
[08:33:34] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[08:34:10] <bpalmer> when push() is called in that link in alloc/vec 's insert (it calls self.reserve(1), which calls self.buf.reserve(self.len, 1)   which calls raw_vec's reserve which means add 1 to self.len and then go up to the next power of 2 that's >= self.len+1
[08:34:38] <bpalmer> the n_more is the 1 ("make sure there's room for at least 1 more")
[08:35:23] <bpalmer> and these are "checked" functions because it will throw an exception if there are any overflows.
[08:35:34] <b0nn> Yeah I saw the constant check
[08:36:13] <b0nn> so if the vec is 2**1, it becomes 2**2 +1?
[08:36:25] <b0nn> and then 2**3+1?
[08:36:40] <b0nn> or is the +1 before the 2** growth so included in it
[08:36:42] <bpalmer> oh, sorry, not an exception, it will just return false. I'm not sure where the panic comes in.
[08:37:14] <bpalmer> say the capacity was 7 ; it goes to 8, and then the next power of 2 is 8.  But if capacity was 20; it goes to 21 and then the next power of 2 is 32
[08:37:58] <b0nn> oh, that makes sense, kind of, becausde if it lands on 8, then I would have hoped it would grow to 2**4, 16
[08:38:26] <b0nn> to save on the growth calls
[08:40:11] *** Joins: doorzan (~doorzan@c-98-35-231-137.hsd1.ca.comcast.net)
[08:41:39] *** Quits: doorzan (~doorzan@c-98-35-231-137.hsd1.ca.comcast.net) (Changing host)
[08:41:39] *** Joins: doorzan (~doorzan@user/doorzan)
[08:41:42] <bpalmer> well, growing from n to 2**(ceil(log_2(n+1)))  gives you the basic asymptotic performance, which is intentionally kind of dumb; for small vectors, it's easy to just over-reserve a bit if that really causes issues.
[08:42:45] <b0nn> yeah - the reason Rust's actual implementation is so important to me here is because of its approach to memory
[08:43:08] <b0nn> I guess that they allocate and say "reserved for this vector"
[08:43:13] <b0nn> just like everyone else
[08:49:06] *** Quits: ajunior (~ajunior@189-49-228-177.user3p.veloxzone.com.br) (Ping timeout: 268 seconds)
[09:13:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:23:07] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c2a5:ef0e:5ed1:6178) (Ping timeout: 252 seconds)
[09:24:04] *** Joins: zwr (~zwr@2804:d45:b966:fb00:8070:51d:80f2:cc47)
[09:26:49] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[09:39:15] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 252 seconds)
[09:45:13] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:55:21] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:9879:4d99:c237:3a79)
[10:00:06] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:9879:4d99:c237:3a79) (Ping timeout: 260 seconds)
[10:02:41] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:08:50] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:10:30] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[10:10:51] *** Quits: lilgopher (~textual@2601:241:8000:38f0:d8b7:26a3:1475:24de) (Quit: Textual IRC Client: www.textualapp.com)
[10:11:27] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[10:25:32] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[10:25:45] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:27:24] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:36:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[10:38:19] *** Joins: fikran (~fikran@user/fikran)
[10:40:54] *** Joins: whaley (~whaley@2603-6080-a301-33d1-a5df-1574-27e5-a3a1.res6.spectrum.com)
[10:42:29] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:51:05] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:52:40] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[10:52:42] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[10:53:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:53:37] *** Quits: TFKyle (~kyle@64.201.205.70) (Quit: :q!)
[10:55:25] *** Quits: pkx (~pkx@user/pkx) (Quit: leaving)
[10:58:47] *** Joins: ewintr (sid512156@id-512156.hampstead.irccloud.com)
[10:58:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:00:57] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:01:09] *** Joins: snupples (~snupples@2603-8001-7e00-f84e-45dd-6d07-ddb8-7b90.res6.spectrum.com)
[11:12:18] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:9879:4d99:c237:3a79)
[11:16:02] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 256 seconds)
[11:19:54] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:9879:4d99:c237:3a79) (Ping timeout: 260 seconds)
[11:26:17] *** Joins: mrig (~AdiIRC@user/mrig)
[11:28:26] *** Joins: ajunior (~ajunior@189-49-228-177.user3p.veloxzone.com.br)
[11:32:23] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:35:22] *** Joins: jla (~jordi@64.225.79.195)
[11:37:59] *** Joins: shka (~herr@109.231.0.226)
[11:46:04] *** Joins: nabaiste^ (~nabaiste@wsip-98-188-240-142.mc.at.cox.net)
[11:48:00] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:50:33] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:53:53] *** Quits: snupples (~snupples@2603-8001-7e00-f84e-45dd-6d07-ddb8-7b90.res6.spectrum.com) (Quit: Leaving)
[12:02:59] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[12:04:13] *** Joins: rendar (~rendar@user/rendar)
[12:04:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[12:06:08] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[12:18:46] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[12:21:07] *** Joins: arinov (~arinov@213.194.126.155)
[12:23:12] *** Quits: ewintr (sid512156@id-512156.hampstead.irccloud.com) ()
[12:26:17] *** Joins: jjido (~Denis@90.213.58.125)
[12:26:47] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[12:31:43] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:35:39] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[12:36:14] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:9879:4d99:c237:3a79)
[12:41:06] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:9879:4d99:c237:3a79) (Ping timeout: 260 seconds)
[12:43:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:45:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[12:46:23] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:47:39] *** Joins: fikran (~fikran@user/fikran)
[12:54:44] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[12:56:50] *** Joins: mrig_ (~AdiIRC@lfbn-mar-1-864-160.w92-150.abo.wanadoo.fr)
[12:58:09] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:fd1e:2655:1e47:6124)
[13:00:11] *** Quits: mrig (~AdiIRC@user/mrig) (Ping timeout: 252 seconds)
[13:02:45] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:fd1e:2655:1e47:6124) (Ping timeout: 252 seconds)
[13:07:52] *** Joins: shka (~herr@109.231.0.226)
[13:09:02] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[13:11:00] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:15:22] *** Quits: mrig_ (~AdiIRC@lfbn-mar-1-864-160.w92-150.abo.wanadoo.fr) (Remote host closed the connection)
[13:15:35] *** Joins: mrig_ (~AdiIRC@lfbn-mar-1-864-160.w92-150.abo.wanadoo.fr)
[13:21:19] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[13:22:15] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[13:23:24] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[13:28:47] *** Quits: mrig_ (~AdiIRC@lfbn-mar-1-864-160.w92-150.abo.wanadoo.fr) (Quit: Going offline, see ya! (www.adiirc.com))
[13:29:14] *** Joins: mrig (~AdiIRC@user/mrig)
[13:31:10] *** Joins: jjonah (~jjonah@p200300d5d7149500dea632fffeb3342f.dip0.t-ipconnect.de)
[13:33:17] *** Joins: arinov (~arinov@176.89.29.127)
[13:41:12] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:45:42] *** Joins: krux02 (~krux02@194.8.199.29)
[13:47:25] *** Quits: krux02 (~krux02@194.8.199.29) (Client Quit)
[13:47:32] *** Joins: krux02_ (~krux02@194.8.199.29)
[13:48:25] *** krux02_ is now known as krux02
[13:48:51] *** Quits: doorzan (~doorzan@user/doorzan) (Read error: Connection reset by peer)
[13:49:06] *** Joins: doorzan (~doorzan@c-98-35-231-137.hsd1.ca.comcast.net)
[13:50:40] <sobukus> My software qemu build of go succeeded with the increased timeout. The tests took in sum 5652 seconds (I presume they run in parallel somewhat, 4 cores). So at least for me, raising that timeout to 1800 s helps. It still would probably better to turn it off completely.
[13:57:17] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:01:35] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[14:06:32] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[14:08:35] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[14:20:56] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:31:09] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Quit: %bye mirc%)
[14:31:56] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:32:31] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[14:43:34] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:43:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[14:49:25] *** Joins: arinov (~arinov@213.194.126.155)
[14:52:44] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[14:55:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:56:59] *** Joins: fikran (~fikran@user/fikran)
[15:00:06] *** Quits: dozn (uid249292@user/dozn) (Quit: Connection closed for inactivity)
[15:14:31] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[15:18:34] *** Joins: mrig (~mrig@user/mrig)
[15:45:52] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Read error: Connection reset by peer)
[15:54:52] *** Joins: darkapex_ (~darkapex@user/darkapex)
[15:55:24] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[16:04:08] *** Quits: menace (~someone@user/menace) (Quit: menace)
[16:05:58] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 260 seconds)
[16:07:36] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[16:07:55] *** Joins: jespada (~jespada@87.74.33.157)
[16:10:29] *** Quits: ajunior (~ajunior@189-49-228-177.user3p.veloxzone.com.br) (Ping timeout: 252 seconds)
[16:11:47] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:13:37] *** Joins: neverfindme (~hayden@158.123.160.43)
[16:17:22] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:17:31] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[16:17:54] *** Joins: neverfindme (~hayden@158.123.160.43)
[16:23:51] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[16:24:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:24:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:24:58] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[16:25:55] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[16:26:28] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[16:29:00] *** Joins: ajunior (~ajunior@189-49-228-177.user3p.veloxzone.com.br)
[16:30:45] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[16:40:30] *** Quits: rbn (~rbn@user/rbn) (Read error: Connection reset by peer)
[16:43:34] *** Quits: gbmor (~gbmor@gbmor.dev) (Ping timeout: 256 seconds)
[16:52:12] *** Joins: arinov (~arinov@78.187.169.227)
[17:04:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:05:29] *** Quits: arinov (~arinov@78.187.169.227) (Ping timeout: 252 seconds)
[17:06:19] *** Joins: fikran (~fikran@user/fikran)
[17:15:05] *** Parts: jla (~jordi@64.225.79.195) ()
[17:26:30] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:27:14] *** Joins: arinov (~arinov@176.89.29.127)
[17:35:42] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[17:36:03] *** Joins: jjido (~Denis@90.213.58.125)
[17:36:06] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:43:49] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 240 seconds)
[17:46:57] *** Joins: ewintr (~ewintr@46.23.91.175)
[17:57:24] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:57:46] *** Quits: andlabs_ (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:01:25] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[18:05:50] *** Joins: moog (~moog@107.77.244.121)
[18:13:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:15:25] *** Quits: nabaiste^ (~nabaiste@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[18:15:42] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:16:31] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[18:17:53] *** Joins: strubbl891941988 (~strubbl@188.193.133.157)
[18:18:37] *** Joins: roshanavand (~roshanava@185.209.196.147)
[18:20:16] *** Joins: normen (~normen@p200300d71734cf00fc87702b367baee7.dip0.t-ipconnect.de)
[18:22:36] *** Quits: whaley (~whaley@2603-6080-a301-33d1-a5df-1574-27e5-a3a1.res6.spectrum.com) (Ping timeout: 268 seconds)
[18:23:14] *** Joins: whaley (~whaley@2603-6080-a301-33d1-6003-4db3-18f7-d344.res6.spectrum.com)
[18:23:38] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[18:26:47] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[18:30:07] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[18:38:41] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[18:40:59] *** Joins: andlabs (~andlabs@2604:ca00:178:14ff:9053:400a:9e23:ae44)
[18:42:45] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[18:42:59] *** Joins: mickey8 (~user@user/mickey)
[18:44:14] *** Joins: jla (~jordi@64.225.79.195)
[18:44:17] *** Parts: jla (~jordi@64.225.79.195) ()
[18:45:34] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 260 seconds)
[18:46:19] *** Quits: doorzan (~doorzan@c-98-35-231-137.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[18:47:14] *** Joins: arinov (~arinov@31.223.11.114)
[18:47:14] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[18:48:42] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[18:49:39] *** Joins: teasea (~teasea@user/teasea)
[18:52:00] *** Joins: gbmor (ben@gbmor.dev)
[18:52:57] *** Joins: norbinaa (~be3uykpy@2a00:a040:19a:b060:90b:ea0c:be99:478a)
[18:54:00] *** Quits: arinov (~arinov@31.223.11.114) (Ping timeout: 265 seconds)
[18:54:37] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:c85b:f859:adce:f674) (Ping timeout: 250 seconds)
[18:54:50] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:90b:ea0c:be99:478a)
[18:55:36] *** Joins: arinov (~arinov@176.89.29.127)
[18:56:33] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[18:56:49] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[18:57:23] *** Quits: norbinaa (~be3uykpy@2a00:a040:19a:b060:90b:ea0c:be99:478a) (Ping timeout: 265 seconds)
[18:57:51] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:58:21] *** Quits: krux02 (~krux02@194.8.199.29) (Remote host closed the connection)
[19:02:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:04:45] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[19:05:02] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[19:08:16] *** Joins: andlabs_ (~andlabs@2604:ca00:178:14ff:d837:9137:7fc1:ddcf)
[19:08:37] *** Joins: lilgopher (~textual@2601:241:8000:38f0:69e0:b444:d9a6:9610)
[19:09:52] *** Joins: andlabs__ (~andlabs@2604:ca00:178:14ff:e4ca:d5fa:c3d9:d19b)
[19:10:38] *** Quits: lilgopher (~textual@2601:241:8000:38f0:69e0:b444:d9a6:9610) (Client Quit)
[19:12:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:12:01] *** Joins: yolo (~xxiao@159.89.184.51)
[19:12:22] *** Quits: andlabs (~andlabs@2604:ca00:178:14ff:9053:400a:9e23:ae44) (Ping timeout: 265 seconds)
[19:12:43] *** Quits: andlabs_ (~andlabs@2604:ca00:178:14ff:d837:9137:7fc1:ddcf) (Ping timeout: 252 seconds)
[19:13:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[19:13:55] *** Joins: andlabs (~andlabs@2604:ca00:178:14ff:34d2:d75c:49dd:bed4)
[19:14:47] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[19:15:39] *** Joins: fikran (~fikran@user/fikran)
[19:16:01] *** Quits: andlabs__ (~andlabs@2604:ca00:178:14ff:e4ca:d5fa:c3d9:d19b) (Ping timeout: 252 seconds)
[19:17:15] *** Joins: andlabs_ (~andlabs@2604:ca00:178:14ff:a481:3010:a587:c1d0)
[19:19:25] *** Joins: lilgopher (~textual@2601:241:8000:38f0:8069:4c9b:8bfc:2a0e)
[19:20:25] *** Quits: andlabs (~andlabs@2604:ca00:178:14ff:34d2:d75c:49dd:bed4) (Ping timeout: 252 seconds)
[19:21:30] *** Joins: Atque (~Atque@user/atque)
[19:24:51] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[19:25:16] *** Joins: noonien (~noonien@user/noonien)
[19:26:05] *** Joins: andlabs (~andlabs@2604:ca00:178:14ff:cde6:f56c:45eb:52ff)
[19:28:04] *** Joins: andlabs__ (~andlabs@2604:ca00:178:14ff:1cf5:a473:d4a:444f)
[19:29:00] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[19:29:13] *** Quits: andlabs_ (~andlabs@2604:ca00:178:14ff:a481:3010:a587:c1d0) (Ping timeout: 252 seconds)
[19:29:26] *** Joins: andlab___ (~andlabs@209.107.190.130)
[19:31:25] *** Quits: andlabs (~andlabs@2604:ca00:178:14ff:cde6:f56c:45eb:52ff) (Ping timeout: 252 seconds)
[19:31:40] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Remote host closed the connection)
[19:32:31] *** Quits: andlabs__ (~andlabs@2604:ca00:178:14ff:1cf5:a473:d4a:444f) (Ping timeout: 252 seconds)
[19:34:03] *** Quits: andlab___ (~andlabs@209.107.190.130) (Read error: Connection reset by peer)
[19:34:25] *** Joins: andlabs (~andlabs@2604:ca00:178:14ff:cdb6:c8b5:878e:39b5)
[19:34:51] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:90b:ea0c:be99:478a) (Remote host closed the connection)
[19:35:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[19:35:44] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:36:04] *** Joins: andlabs_ (~andlabs@2604:ca00:178:14ff:d00e:8883:6ae8:ab6e)
[19:36:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:36:32] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:36:50] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[19:37:22] *** Joins: gspbirel56601 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[19:39:29] *** Quits: andlabs (~andlabs@2604:ca00:178:14ff:cdb6:c8b5:878e:39b5) (Ping timeout: 252 seconds)
[19:40:46] *** Quits: andlabs_ (~andlabs@2604:ca00:178:14ff:d00e:8883:6ae8:ab6e) (Client Quit)
[19:41:34] *** Joins: hackers (~self@user/hackers)
[19:42:48] *** Joins: noonien (~noonien@user/noonien)
[19:45:08] *** Quits: noonien (~noonien@user/noonien) (Client Quit)
[19:45:29] *** Joins: noonien (~noonien@user/noonien)
[19:46:42] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:48:40] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[19:51:19] *** Joins: vazz (~vazzx@cpc76298-cosh16-2-0-cust576.6-1.cable.virginm.net)
[19:53:10] <vazz> Hi folks, I have a memory leak problem. Go pprof shows only 50MB usage but top shows the process using increasing amounts until ram runs out until process is killed - any tips on how to debug
[19:53:14] *** Joins: Garb0 (~Garb0@user/garb0)
[19:54:19] <ikke> What value do you look at
[19:54:38] <ikke> A process can request an infinite amount of memory while using actually very little
[19:56:26] <vazz> I look at RES in top, it keeps increasing, the machine reports low ram then the kernel kills it
[19:56:42] <vazz> the fact it doesnt show in pprof suggests to me go isnt tracking it for some reason?
[19:57:30] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[19:57:34] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 268 seconds)
[19:57:46] <siXy> Are you using cgo?
[19:59:05] <vazz> I'm using golang from fedora
[19:59:11] <vazz> and also from debian 10
[19:59:30] <siXy> ...
[19:59:43] <siXy> Did you write this yourself?
[19:59:55] <vazz> have tried updating go too, and setting madvdontneed=1
[19:59:57] <vazz> yes code is mine
[20:00:09] <vazz> I need help to identify what is using so much ram but not showing in pprof
[20:00:15] <davidkrauser> vazz: cgo lets your go code interact with native libraries/code
[20:00:24] <siXy> Are you importing any C code using https://pkg.go.dev/cmd/cgo
[20:00:26] <vazz> Ohh I see
[20:00:28] <vazz> let me check
[20:01:25] <vazz> not in my code
[20:01:29] <vazz> but a depedancy could be?
[20:01:38] <vazz> dependancy
[20:02:38] <siXy> Possibly. Without seeing your code we can only guess. cgo is the most likely culprit for this
[20:03:24] <vazz> OK thats hugely helpful anyway I could memtrace this with traditional tools to detect culprit?
[20:05:11] <vazz> and anyway to scan depedancies for cgo?
[20:05:36] <siXy> https://github.com/iovisor/bcc/blob/master/tools/memleak.py is probably where I'd start.
[20:06:31] <siXy> Run your go program, then run that python script with -p <pid of go program> and see what it tells you.
[20:06:53] <vazz> thank you
[20:09:30] *** Joins: jla (~jordi@64.225.79.195)
[20:09:42] *** Parts: jla (~jordi@64.225.79.195) ()
[20:11:13] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[20:11:36] *** Joins: noonien (~noonien@user/noonien)
[20:12:31] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:14:19] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 252 seconds)
[20:17:48] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[20:20:35] *** Joins: noonien (~noonien@user/noonien)
[20:24:50] *** Quits: noonien (~noonien@user/noonien) (Client Quit)
[20:25:08] *** Joins: noonien (~noonien@user/noonien)
[20:28:24] *** Quits: grantbow_ (~grantbow@tatooine.princessleia.com) (Quit: Lost terminal)
[20:31:41] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e)
[20:39:50] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[20:46:18] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[20:47:22] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[20:54:08] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:58:26] *** Joins: arinov (~arinov@213.194.126.155)
[21:06:30] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[21:10:54] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[21:22:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[21:24:59] *** Joins: fikran (~fikran@user/fikran)
[21:35:21] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 252 seconds)
[21:40:59] *** Joins: Garb0 (~Garb0@user/garb0)
[21:42:06] *** Quits: Garb0 (~Garb0@user/garb0) (Remote host closed the connection)
[21:43:10] *** Joins: Garb0 (~Garb0@user/garb0)
[21:44:07] *** Quits: Garb0 (~Garb0@user/garb0) (Remote host closed the connection)
[21:48:26] *** Joins: Garb0 (~Garb0@user/garb0)
[21:50:14] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:2093:12ca:1020:e988)
[21:52:29] *** Joins: hackers_ (~self@user/hackers)
[21:52:42] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[21:52:49] *** Quits: hackers_ (~self@user/hackers) (Client Quit)
[21:52:55] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[21:55:19] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 250 seconds)
[21:56:03] *** Joins: cobber (~protorom@213.240.182.77)
[21:57:44] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[21:58:05] *** Joins: kulak (~kulak@user/kulak)
[21:58:37] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:9563:3661:427a:9acd)
[22:00:57] *** Quits: nekron_ (~nekron@noordsee.de) (Remote host closed the connection)
[22:02:13] *** Joins: nekron (~nekron@noordsee.de)
[22:06:42] *** Quits: vazz (~vazzx@cpc76298-cosh16-2-0-cust576.6-1.cable.virginm.net) (Quit: Leaving)
[22:17:59] *** hackers is now known as remote
[22:18:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:24:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:24:46] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:26:12] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:27:29] *** Joins: ldiamond (~ldiamond@142.126.46.115)
[22:27:29] *** Quits: ldiamond (~ldiamond@142.126.46.115) (Changing host)
[22:27:29] *** Joins: ldiamond (~ldiamond@user/ldiamond)
[22:28:12] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[22:31:08] *** Joins: lechner (~lechner@debian/lechner)
[22:33:55] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:2093:12ca:1020:e988) (Quit: Textual IRC Client: www.textualapp.com)
[22:35:54] <mehwork> if i unit test a lambda handler, is that considered a unit test because it tests one handler or an integration test or something else?  I'm using the same unit test/mocking framework
[22:38:24] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:110f:5a28:c196:25e)
[22:38:30] *** Joins: Anton[m]12 (~antongmoz@2001:470:69fc:105::1:4e88)
[22:39:29] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[22:48:03] <cobber> not sure what you mean by "lambda handler" (simple closure? function pointer?) - either way, if your test runs without communicating with "anything else" (except perhaps a mock object or two), then it's a unit test... integration tests are intended for testing the "whole-shebang" - multiple parts that depend on each other... or round-trip etc
[22:48:42] <cobber> but it's more important that your writing tests than what you call them :-)
[22:50:38] <Tv_> mehwork: the definitions are sort of intentionally vague. it's a unit test if it tests a single "unit". whether your handler is really a single unit or not depends on what it does.
[22:51:05] <Tv_> mehwork: integration test implies involving multiple pieces of software by multiple vendors, and testing their integration
[22:53:30] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[22:54:14] *** Joins: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de)
[22:54:14] *** Quits: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de) (Changing host)
[22:54:14] *** Joins: tane (~tane@user/tane)
[23:08:41] <cobber> I can't get "go mod" to work with my local gitea installation :-( GOPRIVATE is set and "git url insteadof" works, but "go get" and "go mod tidy" time-out with 410 gone :-(
[23:09:19] <cobber> I use ssh for my git connections, but my gitea https port is 3000 instead of 443 - go seems to insinst on port 443
[23:11:48] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:18:56] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:9563:3661:427a:9acd) (Quit: smeeagle)
[23:24:45] *** Quits: shtirlic (~shtirlic@178.70.132.77) (Remote host closed the connection)
[23:32:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[23:34:19] *** Joins: fikran (~fikran@user/fikran)
[23:39:01] *** Joins: shtirlic (~shtirlic@178.70.132.77)
[23:40:48] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:42:07] *** Joins: tristero (~nobody@user/tristero)
[23:43:59] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:48:59] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e) (Quit: Leaving)
[23:50:51] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:54:58] *** Quits: ajunior (~ajunior@189-49-228-177.user3p.veloxzone.com.br) (Ping timeout: 260 seconds)
