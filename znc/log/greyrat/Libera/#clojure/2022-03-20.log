[00:19:37] *** Quits: Xylon (~joseph@mail.xylon.me.uk) (Ping timeout: 240 seconds)
[00:32:10] *** Quits: boogiepop (~boogiepop@S01066c55e885c6e1.cg.shawcable.net) (Quit: Lost terminal)
[00:55:00] *** Quits: austb (~austb@c-24-20-191-69.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[00:55:00] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 250 seconds)
[01:00:47] *** Joins: austb (~austb@c-24-20-191-69.hsd1.or.comcast.net)
[01:08:51] <seebs> btw, i originally used :type as the metadata key for the "which NBT type is this", and it behaved very strangely, and just changing :type to :nbt fixed it. not sure why.
[01:09:11] <seebs> it looks like :tag should be the magic one providing type hinting
[01:09:26] <seebs> ... it's possible that actually i used :tag and not :type and my memory is just wrong, though
[01:10:22] *** Joins: vats (~vats@103.216.143.232)
[01:11:08] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:17:29] *** Joins: AKEmily (~AlaskanEm@user/alaskanemily)
[01:17:32] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[01:17:40] *** AKEmily is now known as AlaskanEmily
[01:19:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:37:25] <seebs> > whereas printf sends the formatted string to *out*.
[01:37:43] <seebs> (1) what's "*out*" (2) what is the form for sending a formatting string to a thing that isn't that
[01:38:16] <seebs> oh hey what if i clicked on the link labeled "*out*" on this same cheet sheet page
[01:39:01] <seebs> huh. so the idiom is "bind *out* to something else" rather than "have a form that takes the something else as an argument"?
[01:43:03] *** Joins: son0p (~ff@181.136.122.143)
[02:08:00] <seebs> huh. apparently i can't with-meta an int-array, but i can a (vec iarray).
[02:57:10] *** Quits: Major_Biscuit (~MajorBisc@c-001-024-004.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[03:19:01] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Remote host closed the connection)
[03:43:24] *** Quits: kristianpaul (~paul@user/kristianpaul) (Ping timeout: 240 seconds)
[04:16:04] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:35:57] *** Quits: austb (~austb@c-24-20-191-69.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[04:51:39] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[04:55:56] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 250 seconds)
[05:04:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:05:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:09:03] <v3ga> ok, now things are loading properly =P
[05:14:02] *** Quits: op2 (~op2@user/op2) (Ping timeout: 240 seconds)
[05:17:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:18:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:24:33] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[05:27:25] *** Joins: amk (~amk@109.255.169.126)
[05:41:03] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[06:45:20] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[07:11:39] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[07:15:02] *** Quits: vats (~vats@103.216.143.232) (Ping timeout: 240 seconds)
[07:23:00] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:24:31] *** Joins: irontom (~user@38.81.106.5)
[07:29:20] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[07:39:58] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[07:44:15] *** Joins: amk (~amk@109.255.169.126)
[07:49:17] *** Quits: irontom (~user@38.81.106.5) (Ping timeout: 240 seconds)
[08:32:25] *** Joins: shiranaihito (~textual@2001-b011-4011-161f-6898-5cb9-ccf0-9348.dynamic-ip6.hinet.net)
[08:55:21] *** Joins: AKEmily (~AlaskanEm@user/alaskanemily)
[08:57:44] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Ping timeout: 250 seconds)
[09:00:19] *** AKEmily is now known as AlaskanEmily
[09:01:38] *** Joins: Xylon (~joseph@mail.xylon.me.uk)
[09:43:38] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[09:44:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:54:16] *** Joins: Core7389 (~Core7389@c-98-32-73-225.hsd1.ut.comcast.net)
[09:54:41] *** Quits: Core7389 (~Core7389@c-98-32-73-225.hsd1.ut.comcast.net) (Client Quit)
[10:18:02] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[10:20:54] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[10:22:36] *** Quits: Xylon (~joseph@mail.xylon.me.uk) (Quit: Konversation terminated!)
[10:44:59] *** Joins: zmt01 (~zmt00@user/zmt00)
[10:47:07] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[10:47:48] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:55:47] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[11:05:25] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:20:17] *** Joins: MetalMWM (~user@185.83.218.119)
[11:41:27] *** Joins: op2 (~op2@user/op2)
[12:26:30] *** Joins: MajorBiscuit (~MajorBisc@c-001-023-015.client.tudelft.eduvpn.nl)
[12:33:12] *** Quits: iomonad (~whoami@user/iomonad) (Ping timeout: 272 seconds)
[12:33:31] *** Joins: iomonad (~whoami@user/iomonad)
[13:37:53] *** Joins: seschwar (~seschwar@user/seschwar)
[14:19:05] <ridcully_> seebs: :tag in meta is already claimed: https://clojure.org/reference/metadata#_metadata_reader_macros
[14:20:26] <ridcully_> you can use with-out-str to get the string from out, if you have to deal with things, that can only print
[14:20:28] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[14:53:00] *** Joins: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[14:57:13] *** Quits: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[15:12:11] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[15:12:23] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[16:37:02] *** Quits: MetalMWM (~user@185.83.218.119) (Ping timeout: 240 seconds)
[16:39:34] *** Joins: MetalMWM (~user@185.83.218.119)
[16:41:59] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:c43:c097:cf3e:e138)
[16:45:00] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:c43:c097:cf3e:e138) (Ping timeout: 240 seconds)
[17:14:35] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[17:14:47] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[17:15:16] *** Joins: puchka (~marius@165.73.241.11)
[17:16:42] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e51b:ac6b:af96:5d6c) (Ping timeout: 252 seconds)
[17:29:03] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:156d:4cd3:81cf:f50c)
[17:43:42] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 268 seconds)
[17:45:11] *** Joins: choas (~lars@ppp-188-174-61-49.dynamic.mnet-online.de)
[17:57:02] *** Quits: op2 (~op2@user/op2) (Ping timeout: 240 seconds)
[18:13:48] *** Quits: MajorBiscuit (~MajorBisc@c-001-023-015.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[18:22:55] <seebs> oh, that's convenient.
[18:35:19] *** Joins: mzan (~quassel@mail.asterisell.com)
[18:38:44] *** Joins: xulfer_ (uid452788@id-452788.ilkley.irccloud.com)
[18:38:50] *** Joins: amk_ (~amk@109.255.169.126)
[18:39:22] *** Joins: nivag_2c (~gavin@103-76-144-176.ip.cis.gen.nz)
[18:39:40] *** Joins: super_pizza_cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net)
[18:40:17] *** Joins: farn_ (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[18:40:44] *** Joins: _iomonad (~whoami@user/iomonad)
[18:42:04] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: iomonad (~whoami@user/iomonad) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: nivag (~gavin@103-76-144-176.ip.cis.gen.nz) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: nulluint (uid547282@user/nulluint) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (Ping timeout: 240 seconds)
[18:42:05] *** Quits: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net) (Ping timeout: 240 seconds)
[18:42:06] *** xulfer_ is now known as xulfer
[18:42:09] *** Joins: nulluint_ (uid547282@id-547282.uxbridge.irccloud.com)
[18:46:42] *** Quits: nulluint_ (uid547282@id-547282.uxbridge.irccloud.com) (Client Quit)
[18:54:31] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[18:54:52] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Ping timeout: 250 seconds)
[18:55:54] *** Joins: wink_ (fhtagn@user/wink)
[18:56:19] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[18:56:24] *** Joins: duke-_ (~duke@198.20.115.180)
[18:56:43] *** Quits: duke- (~duke@198.20.115.180) (Ping timeout: 250 seconds)
[18:57:38] *** Quits: wink (fhtagn@user/wink) (Ping timeout: 250 seconds)
[18:57:38] *** Quits: mala (~mala@user/malaclyps) (Ping timeout: 250 seconds)
[18:58:06] *** Joins: jinks_ (~jinks@2001:470:1f18:3aa:1d8:0:1c:34ac)
[18:58:18] *** Joins: ns128 (~ns12@user/ns12)
[18:58:20] *** Quits: jinks (~jinks@2001:470:1f18:3aa:1d8:0:1c:34ac) (Ping timeout: 250 seconds)
[18:58:32] *** Joins: mala (~mala@user/malaclyps)
[18:58:55] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[18:59:26] *** Joins: meinside_ (uid24933@id-24933.helmsley.irccloud.com)
[19:00:19] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: ajb (~ajb@cupid.whatbox.ca) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[19:00:19] *** Quits: ns12 (~ns12@user/ns12) (Ping timeout: 250 seconds)
[19:00:21] *** meinside_ is now known as meinside
[19:00:22] *** ns128 is now known as ns12
[19:00:32] *** Joins: kst (~krjst@2604:a880:800:c1::16b:8001)
[19:11:56] *** Quits: amk_ (~amk@109.255.169.126) (Remote host closed the connection)
[19:12:05] *** Joins: amk (~amk@109.255.169.126)
[19:15:31] *** Joins: op2 (~op2@user/op2)
[19:16:59] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[19:17:11] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[19:33:11] *** Joins: tv3n (~tv3n@2601:647:8101:e370::d65e)
[20:44:11] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[20:46:37] *** Quits: shiranaihito (~textual@2001-b011-4011-161f-6898-5cb9-ccf0-9348.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[20:56:08] *** Quits: super_pizza_cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net) (Quit: Leaving)
[21:08:43] *** Joins: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net)
[21:10:28] *** Quits: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net) (Client Quit)
[21:15:21] <seebs> > Overall, records will be better than structmaps for all information-bearing purposes, and you should move such structmaps to defrecord. It is unlikely much code was trying to use structmaps for programming constructs, but if so, you will find deftype much more suitable.
[21:15:29] <seebs> i don't understand this, possibly because i don't know what "structmaps" are
[21:18:29] <Para> Probably something relevant at the time when deftype was relevant.
[21:18:39] <Para> So yeah I don't know either.
[21:19:00] <Para> deftype of course still has its uses, its just...not common
[21:19:43] <Para> oh this is interesting https://gist.github.com/reborg/dc8b0c96c397a56668905e2767fd697f
[21:20:21] <seebs> oh neat
[21:21:39] <seebs> wow this is fascinating
[21:23:30] <seebs> i'm definitely having some trouble getting used to the "all the functions are just sort of bundled into a namespace together" thing. on the other hand, it does mean less writing of completely trivial functions.
[21:25:59] <Para> Yep, that skips a lot of boiler plate.
[21:26:33] <Para> I would like to have a better public/private semantics though, I like the `exports` thing typescript modules uses.
[21:27:04] <Para> JVM also has package private which was quite useful but way too underused, but that'd be leaning on the host platform way too much.
[21:27:36] <Para> https://stackoverflow.com/a/215505/44523
[21:27:47] <Para> someone's made a nice table of those :)
[21:29:12] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[21:30:09] <seebs> this document is super useful in understanding design intent.
[21:30:43] <Para> Clojure is surprisingly designed.
[21:30:54] <Para> Or, there is surprising amount of design in Clojure.
[21:31:04] <seebs> I spent about ten minutes being convinced Go's export/don't-export was incredibly underpowered, but since then I've concluded that actually it is pretty much exactly what I want in most cases, and the simplicity win is enormous.
[21:31:35] <seebs> (For the unfamiliar: Go's answer is that if a name starts with a capital letter, you can refer to it from outside the package, aka namespace, it comes from. that's it, you're done, there is nothing else.)
[21:34:05] <seebs> > There is a perfectly adequate and well documented way to get the last element of a vector quickly, and code for which that matters can (and should, even if last were made faster) use it.
[21:34:16] <seebs> hmm. what is that adequate and well-documented way?
[21:36:16] <Para> It's `peek`
[21:36:19] <technomancy> Para: I also very much prefer the route of listing exports rather than exporting being the default
[21:36:33] <Para> Curiously the mentions push to that gist as source for this and it just mentions exactly that.
[21:36:37] <technomancy> it's *so* nice to be able to look in one place and see the entire interface that a namespace/module exposes
[21:36:43] <Para> So you'll end up in some google recursion.
[21:37:11] <seebs> > For a list or queue, same as first, for a vector, same as, but much more efficient than, last. If the collection is empty, returns nil.
[21:37:14] <seebs> oh fascinating
[21:37:23] <seebs> i simultaneously love this and hate this
[21:37:27] <Para> technomancy: Yep, and optionally allow limiting how "wide" it is exported would be nice as well, but made slightly cumbersome on purpose.
[21:38:01] <Para> sort of similar deal with https://medium.com/@greg_63957/conj-cons-concat-oh-my-1398a2981eab
[21:38:05] <seebs> having used various systems with complex architectures of visibility: "it's visible" and "it isn't" is much, much, easier to reason about
[21:38:40] <seebs> heh "(don't)"
[21:39:40] <technomancy> the problem with golang's policy is it forces specific orthographies upon you
[21:39:58] <technomancy> you want to code in thai or korean? too bad. you can't export anything.
[21:40:38] *** Joins: Intelo (~Intelo@user/Intelo)
[21:40:45] <Intelo> Hi
[21:40:57] <Intelo> Is all lisp code valid clojure code?
[21:41:07] <technomancy> Intelo: no
[21:41:18] <Intelo> clojure is not a superset of lisp?
[21:41:33] <technomancy> that's like being a superset of indo-euorpean
[21:41:52] *** Quits: puchka (~marius@165.73.241.11) (Quit: leaving)
[21:41:56] <Intelo> so as a lisp dev, how much allien would one feel in clojure?
[21:42:12] <technomancy> depends which lisp you're coming from?
[21:42:19] <Intelo> comon lisp
[21:42:47] <Intelo> the lisp lisp...
[21:43:05] <Para> Sorry, I read that as "Come on, LISP!" and now I'm laughing at my own dumbness :)
[21:43:09] <technomancy> well, it'll be less alien than using a non-lisp language but a lot more alien than using like ... elisp or autolisp
[21:44:23] <Para> https://clojure.org/reference/lisps
[21:44:27] <technomancy> more alien than kotlin or forth; less alien than scheme or zetalisp
[21:44:37] <Intelo>  ok
[21:45:35] <Intelo> Thanks
[21:46:14] <Intelo> Can I write web apps (frontend) without JS and only in clojure?
[21:46:54] <technomancy> yes, there is a clojure->js compiler, but I haven't used it
[21:48:08] <technomancy> Para: from that link "In Clojure nil means 'nothing'." https://p.hagelb.org/lies.gif
[21:48:38] <Para> technomancy: https://www.youtube.com/watch?v=cOTmy9J4KQU
[21:50:05] <technomancy> I mean, I get how coming from CL that claim would be a helpful approximation; I just wish it were ... actually true =)
[21:51:46] <seebs> huh, i would have considered forth extremely alien from any lisp
[21:52:16] <technomancy> seebs: oops I got that backwards
[21:52:58] <Intelo> technomancy ok i don't know and wonder that is it even possible to totally avoid JS syntax but use clojure?
[21:53:20] <Para> Intelo: Syntax won't leak, but interop structures will.
[21:53:28] <Para> And some of the JS interops are just plain disgusting.
[21:54:28] <Para> ` (set! (.. (.getElementById js/document input-id) -value) label)`
[21:54:56] <Para> That might not be the best way to write that particular thing, but it works and is something I've did a while back.
[21:57:11] <Intelo> Para so if I have been using node.js and reactjs on frontend with typescript. How can I use clojure to replace both node and react?
[21:57:44] <technomancy> replacing server side JS is easy; just ... use a different language? =)
[21:58:03] <Para> ClojureScript's most popular frontend library reagent wraps React in full.
[21:58:54] <Para> And I think most use shadow-cljs or cljsbuild for the compilation nowadays?
[21:59:38] *** farn_ is now known as farn
[22:00:58] *** zmt01 is now known as zmt00
[22:01:19] <Intelo> Para ok
[22:01:23] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[22:19:00] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[22:20:35] *** Joins: justAstache (~justache@user/justache)
[22:25:20] <seebs> huh. so (defprotocol) names still overlap with the regular not-this-protocol namespace, apparently?
[22:29:11] *** Quits: uncleyear (~ian@178.176.78.213) (Remote host closed the connection)
[22:30:38] *** Joins: uncleyear (~ian@178.176.78.213)
[22:36:50] <technomancy[m]> protocols were designed for maximum efficiency (for self hosting) so their behavior doesn't always make sense 
[22:38:48] <seebs> so, what i am trying to do, approximately, is clean up parallel/related/similar handling in my NBT parser
[22:39:46] <seebs> NBT has a bunch of data types, denoted by the values 0-12 currently, and for each it would be useful to be able to map it to a human-readable name, a function to load it, a function to pretty-print it, and a function to write it back out in raw binary.
[22:41:10] <seebs> and i'm not quite sure how to reasonably clearly map those to... i guess data structures or protocols or something. basically, my intent would be roughly to define a (something) which was vaguely type-like, with thirteen specific values of it which are indexable in a table or something. 
[22:44:44] <Para> I'd probably go with `case` or `cond(p)` first and just type it all out.
[22:46:43] <Para> Something I've also used is that I have a vector of functions matching to desired implementation and do an index lookup on it...not my favorite solution but works.
[22:46:52] <Para> There's of course multimethods as well.
[22:47:52] <seebs> yeah, but i sort of want to express that several of these things are parallel? like, there's a related set of "what's the name of this type", "what's the function to load this type", etc, and i don't really want them all to have separate condp or whatever.
[22:49:12] <Para> number -> keyword, then use keyword-indexed maps to pair kw->fn, do a few lookups, `comp` everything together to produce a map number -> comp'd fn.
[22:50:28] <Para> That's kind of what I meant with my vector thing.
[22:55:44] <technomancy> seebs: you can use namespaces to group related operations without protocols
[23:02:23] *** Parts: Intelo (~Intelo@user/Intelo) ()
[23:02:34] <seebs> > Syntax error (NullPointerException) compiling at (/tmp/form-init2263320552469648389.clj:1:73).
[23:02:34] <seebs> > Cannot invoke "clojure.lang.IFn.invoke(Object)" because the return value of "clojure.lang.IFn.invoke(Object)" is null
[23:02:47] <seebs> is there anything i can do to get a hint as to what part of any code that i actually wrote led to this?
[23:04:25] <Para> in REPL *e prints the full stacktrace, although if you've defined everything in REPL, there's no file to point to so it's mostly just noise
[23:20:50] <seebs> so it eventually turned out: i was using :field on a deftype when that wants .field
[23:50:40] *** Joins: theruran (uid11305@id-11305.hampstead.irccloud.com)
[23:56:10] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
