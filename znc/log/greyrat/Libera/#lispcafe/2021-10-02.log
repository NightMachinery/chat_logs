[00:05:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:18:08] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[00:37:45] * gilberth wanted to inject simulated automatic keyboard input to the initial request to read time to the CADR and notices that the keyboard queue somehow is garbled as keystrokes make it to the CADR in some random order.
[00:38:28] <pl> maybe you're sending them too fast?
[00:42:00] <gilberth> Yep, I do. Still this needs fixing as it is the CADR simulator dequeuing in wrong order somehow. But then I miss proper synchronisation between the console simulator thread and the CPU simulator thread.
[00:43:22] <gilberth> When I figure out how to make a new load band, I'll implement a kind of RTC for the CADR. I still find it ironic that you have a $100k machine without one.
[00:44:02] <gilberth> But then my car is too cheap to have a DCF77 receiver either.
[00:44:49] <gilberth> And as I always forget to change my car's clock twice a year because of DST, I set it to UTC.
[00:46:06] <pl> I think CADR could use time services from elsewhere
[00:49:36] <gilberth> The load band I have here doesn't even attempt to ask around on Chaosnet for the time.
[00:50:53] <gilberth> Perhaps Brad Parker disabled that, so that you run the CADR without? Who knows? Anyhow, when I get the FILE server to work, I'll figure out how to make new load band.
[00:54:11] <pl> gilberth: there's also a globally routed CHAOS network operational that works with usim
[00:55:20] <pl> also, I think usite repo has instructions on load band creation
[00:55:33] <gilberth> pl: Really? That sounds exciting. I would still need a working chaosd.
[00:56:18] <pl> there are few ways to connect, but it's related idea to HECnet (hobbyist DECnet)
[01:05:53] <gilberth> This sounds really exciting, thanks for the pointer!
[01:07:11] <gilberth> Anyhow, I now could inject keystrokes to give the time to the CADR and login and tell it the proposed FILE host -- This will hopefully speed up my debugging.
[01:11:10] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[01:23:26] *** Quits: shka (~herr@109.231.6.176) (Ping timeout: 252 seconds)
[01:34:09] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[01:52:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[02:03:32] *** Quits: Catie (~user@24.19.51.175) (Quit: leaving)
[02:05:22] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[02:12:17] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[02:47:36] <hayley> Good morning everyone!
[02:54:08] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[02:55:49] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[02:56:45] *** Joins: X-Scale` (~ARM@83.223.242.77)
[02:57:30] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[02:57:54] *** X-Scale` is now known as X-Scale
[03:00:38] <contrapunctus> hayley: good morning, beach üòè
[03:00:52] <hayley> Hello contrapunctus.
[03:17:45] <hayley> https://i.redd.it/c53ki7c0svi71.jpg
[03:37:23] *** Joins: robin_ (~robin@user/terpri)
[03:39:41] *** Quits: robin (~robin@user/terpri) (Ping timeout: 245 seconds)
[03:47:11] *** Joins: notzmv (~zmv@user/notzmv)
[03:48:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[03:48:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:49:19] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:13:11] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[04:13:15] <hayley> https://www.youtube.com/watch?v=eZHDc3RmZgE
[04:16:09] *** Joins: robin (~robin@user/terpri)
[04:19:21] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:24:16] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[04:46:17] *** Joins: robin (~robin@user/terpri)
[04:54:31] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[05:00:00] *** Joins: robin (~robin@user/terpri)
[05:00:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:04:53] <hayley> http://cliffc.org/blog/wp-content/uploads/2017/12/2004_SBA.pdf even says "thread-local GC" for cleaning up stack allocation.
[05:08:17] *** Joins: cyberbanjo (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23)
[05:11:29] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[05:11:53] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[05:23:09] <hayley> "Figure 10.6: Incremental incrementally compacting garbage collection." - Jones, Hosking and Moss
[05:24:05] <gilberth> Some documentation about the Chaosnet FILE protocol would be nice.
[05:25:16] <hayley> Gnuxie üíúüêù: FWIW the Handbook states that stack allocation "reduces memory management costs sufficiently to make it worthwhile."
[05:25:26] <hayley> Er, rather that it doesn't clearly reduce memory management.....
[05:30:20] <hayley> Indeed they say what we'd usually say, which is "lol use a generational GC"
[05:30:54] <hayley> ...though shared young generations are shared, whereas stacks aren't. So nowadays it should be "lol use thread-local nurseries"
[05:48:37] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[05:49:40] <hayley> Also, the Azul JVM had an elegant (but obvious in hindsight) way of back-propagating runtime information about which objects escape their stack frame; you just find the stack frame which created it and fiddle with allocation points in the corresponding function.
[05:51:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[05:52:02] <hayley> But that only works with stacks, and not arbitrary heaps.
[06:08:43] <hayley> Now I'm struggling to find the presentation on the Shenandoah GC where the presenter said the use of the load-value barrier in Pauseless/ZGC/et al caused a trap storm that was as bad as a pause.
[06:09:32] <hayley> Here it is: https://www.youtube.com/watch?v=4d9-FQZZoVA&t=791s
[06:15:29] <hayley> gilberth: Do you have somewhere to put a cached escapes/doesn't escape value in that interpreter which optimistically stack allocates environments?
[06:17:05] <gilberth> hayley: You are speaking in puzzles to me.
[06:17:21] <hayley> You still have the Lisp interpreter which tries to cons environments on the stack?
[06:17:43] <gilberth> Yes, unless someone ate it.
[06:19:12] <hayley> Just curious, could you somehow tag environment-allocating forms with a bit representing if the environment escaped before, then only heap allocate later if it has escaped before?
[06:20:35] <gilberth> Let me think.
[06:21:13] <gilberth> As a gross hack, I could do that. But this is a pure interpreter, so you would need to tag a LAMBDA s-expr.
[06:22:09] <gilberth> But my whole point was that I only evacuate, if needed.
[06:22:19] <hayley> I guess the other thing is that you'd need to find the interpreter call frame from an environment object, which sorta makes more sense with compiled call frames (at least to me).
[06:23:43] <gilberth> This could be part of the box. But I fear, I don't get what you are trying to do.
[06:24:33] <hayley> The aim is to avoid constantly evacuating.
[06:25:34] <gilberth> Constantly = (1) evacuate always (2) evacuate when a closure could potentially be made?
[06:26:20] <hayley> (2), constantly evacuating when a closure is made (and, ideally, when it escapes too).
[06:26:40] <gilberth> That is: Do you want to save evacuation for (let (x) (if full-moon-p (lambda () x) :never-mind)), when it's not full moon?
[06:28:35] <gilberth> Wait a second! Or are talking about the closure escaping too?
[06:29:48] <gilberth> I mean, I still evacuate on (let ((y 1)) (mapcar (lambda (x) (+ x y)) list)), it's not that clever.
[06:29:55] <hayley> The former? I mean (let (x) (lambda () x)) would naively stack allocate, then evacuate the environment upon closure creation. So you add a bit/counter/something that tells you if the environment tends to escape, and directly allocate in the heap then.
[06:30:35] <hayley> I think it's sort of elegant as no compile-time analysis is needed, and the feedback required is tiny (one bit at least).
[06:30:38] <gilberth> My keeping a statistic? Sure, that could be done, why not?
[06:31:10] <gilberth> Kinda like branch prediction. :-)
[06:31:45] * gilberth still mixes 'm' and 'b' up all the time and wonders why.
[06:32:01] <hayley> The CPU I'm using to write to you uses a damn perceptron for branch prediction.
[06:32:34] <gilberth> On the CADR Terminal-E would call the evaluator to the 9th floor.
[06:33:28] <gilberth> Which is funny as I once had our elevator wired up, so I practically could do the same.
[06:33:55] <gilberth> hayley: That could actually be a win! Nice idea.
[06:35:04] <hayley> Well, I didn't make it (again). Though I had the idea to do some sort of gradient descent(?) on flipping allocation sites from thread local to global and back, in order to reduce the number of traps.
[06:36:01] <hayley> And that is much more complex and non-deterministic, though it allows for dynamic global program analysis, as the use of thread-local heaps is more of a global property than stacks.
[06:36:14] <gilberth> Sick.
[06:36:45] <gilberth> That is a brilliant idea, milady.
[06:38:35] <hayley> Well....I still think it is of dubious value. Hence why I'd rather optimize evacuation, by being able to give up a whole region at a time (making evacuation basically O(1)) and by disabling thread-local allocation if we consistently evacuate.
[06:38:49] <gilberth> So with time you tell the temporary data from the consed-for-later data apart without any doomed static analysis. I like that.
[06:40:11] <hayley> The original Java thread-local heaps paper said static analysis was doomed, then a few years later, some other people published an analysis pass which sort of worked, and ran fast enough. But I'd still not count on it.
[06:41:15] <hayley> However, looking for such stuff either gives you information on 1. thread local allocation buffers (i.e. threads take a larger page to allocate in at a time, SBCL does this) or 2. thread local variables.
[06:41:20] <gilberth> Well, also here I could imagine that you wind up wanting to solve the halting problem. This is why I said "doomed".
[06:42:05] <hayley> Hence "sort of worked". But IIRC Cliff Click said he went from 30% objects being stack allocated with static analysis to 60% with runtime profiling, so you can do better than "sort of works".
[06:42:14] <gilberth> My favorite example: CHECK-TYPE
[06:43:28] <gilberth> It must close over the checked place, but when it does, you already are in the debugger and normal program execution should not require the place to be closed over.
[06:44:49] <gilberth> Unlike TAGBODY tags ore BLOCK tags, closed over lexicals cannot become stale, when out of dynamic scope.
[06:45:03] <hayley> I remember this from SICL, actually. We made the decision to have CHECK-TYPE turn into (loop until (typep variable 'type) do (setf variable (signal-and-get-better-value variable))) for variables IIRC.
[06:46:23] <hayley> My recollection could be very wrong, still.
[06:46:25] <gilberth> Yep. But you get what I wanted to tell.
[06:47:22] <hayley> Yes.
[06:49:01] <gilberth> This FILE serve is a nightmare to debug. It works kind of with Linux and not with macOS. And I deal with a total of 5+n UNIX processes. The /n/ is for actual file I/O which is offloaded by the FILE server by another process to implement async I/O.
[06:49:24] <gilberth> And pass packets to and fro in different formats.
[06:49:28] <hayley> Actually, escape analysis could still help, as we only either allocate all thread local, or all global otherwise (short of other pre-tenuring like large vectors, code going in the global heap).
[06:50:42] <hayley> Though the former case could win frequently enough. Say, a compiler allocates a lot of thread-local IR, and then eventually spits out a code vector which doesn't have references into IR.
[06:51:07] <gilberth> Otherwise I am at like 10ns cycle time on the "fast" machine. A CADR at 100MHz!
[06:51:46] <hayley> Wow!
[06:51:54] <hayley> https://www.youtube.com/watch?v=jjbKSg97-SI
[06:52:15] <gilberth> hayley: Well, I like the general idea. After all GC itself is like that: Figure out what is garbage at runtime and not try to solve the halting problem at compile time or hack time.
[06:53:31] <hayley> BTW (saying it again) apparently they still had to GC the stack on the Azul machines.
[06:54:07] <gilberth> ok.
[06:54:25] <hayley> But the stack is still smaller and thread local, so it's still a win, it's just embarrasing if you put all your eggs into stack allocation working without compacting the stack.
[06:55:33] <gilberth> Lady, I call it a day. This '84 C code frustrates me, I am stuck with it whole week. I'll chill at little at our cozy Caf√©.
[06:55:56] <hayley> That's really funny to me, that stack allocation sorta works, but you still have to collect the damn stack sometimes. Tell that to someone who likes stack allocation in the C/C++/Rust sense of it.
[07:00:11] <gilberth> hayley: This reminds of this Scheme implementation which would pile up activation frames on the stack and then just GC.
[07:00:24] <gilberth> Forgot which one it is.
[07:00:29] <hayley> Chicken.
[07:00:56] <hayley> That's part 2 of Baker's CONS should not CONS its arguments; part 1 is about allocating on the stack, then evacuating to the heap when you violate LIFO order.
[07:01:06] <gilberth> But then, yes, you could consider unwinding a stack frame an optimization.
[07:02:55] <gilberth> Nice tunes you made the juke box to play.
[07:03:26] * hayley works on statistics homework and continues to mess up which axis is the X axis, when the graph is rotated.
[07:03:46] <gilberth> Label them. :)
[07:04:03] <White_Flame> label them Y and Z
[07:04:22] <hayley> You know, usually the Y axis is the dependent variable and X is independent, but I have a fair few horizontal graphs, and matplotlib insists that, after rotation, Y is still vertical.
[07:04:50] <gilberth> "No! I meant the other abscissa."
[07:05:12] <hayley> I guess that makes more sense, as X and Y axes are aligned on "physical" geometry, but I think of X and Y like an equation of Y = f(X).
[07:06:14] <gilberth> Statistics is weird as they use a different vocabulary for familiar things.
[07:06:54] <gilberth> Stochastics rather. At least I recall it that way.
[07:07:54] <hayley> So, thus, after rotation, the X axis should be vertical and the Y should be horizontal to me.
[07:08:43] <gilberth> When in doubt just turn your head.
[07:10:12] <gilberth> Like those people who turn maps in the direction they're moving. I cannot cope with that, I must have north pointing up, otherwise I get confused.
[07:11:44] <hayley> There's a third person RPG that someone got me to play, and I get confused as the camera can be rotated, but the minimap rotates too. So when I check the full map and I say "this place is south-west of here", I have to still translate that all the time.
[07:13:07] <gilberth> Exactly that kind of thing. Navigation systems like to do that, too. Seems to be the default even.
[07:14:40] <gilberth> My wife is the reverse, she must have the map pointing in direction of movement. At times this ended us flipping the navigation system back and forth when traveling together.
[07:15:03] <mfiano> You probably mean perpendicular to the direction of movement
[07:15:14] <mfiano> and that you prefer it being perpendicular to north
[07:15:47] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[07:15:48] <gilberth> The other perpendicular, yes.
[07:15:50] <mfiano> unless the map is on a table and you aren't holding it in front of your face
[07:15:57] *** Joins: semz (~none@user/semz)
[07:16:31] <gilberth> In olde times I would have the map on my lap while navigating.
[07:16:51] <hayley> OTOH the thing about parts 1 and 2 of CONS should not CONS is that part 1 handles cache behaviour (as stack allocation goes back and thus reuses lines in cache already), and part 2 doesn't really.
[07:16:54] <mfiano> same
[07:17:27] <gilberth> Well, my map's north would not be the true north, then.
[07:17:30] <hayley> The other solution w.r.t is to make the nursery cache-sized and thread-local.
[07:23:20] * hayley spots a problem in the dataset.
[07:23:57] <hayley> I have a dataset with a snapshot of car listings from 2019, more or less. The problem is that cars which take a long time to sell would be more likely to appear in a snapshot, than cars which sell quickly.
[07:24:29] <hayley> So e.g. people greatly overestimating the value of their cars would be overrepresented.
[07:27:10] <White_Flame> yeah, you need car sales, not just listings
[07:28:01] <hayley> Oh well, the other datasets had way too few samples to be useful. At least this is useless in an interesting way.
[07:35:42] <hayley> https://www.reddit.com/r/LispMemes/comments/pzo0ih/andrew_appel_garbage_collection_can_be_faster/
[07:38:48] <moon-child> shenandoah presenter says 'I _posit_ a read storm is as bad as a pause', and later 'I wish y'all would open-source azul so it would be possible to compare properly'.  So it sounds much less certain
[07:39:23] <hayley> There is always ZGC, though I dunno which of Shenandoah and ZGC came first.
[07:40:06] <hayley> The presentation dates to 2015, ZGC 2017. Go figure.
[07:40:10] <moon-child> yeah.  And I don't think either were so mature 5 years ago
[07:40:14] <moon-child> *was
[07:42:03] <hayley> Apparently the trap storm cost 20ms over 300ms in 2005. Not bad, I guess.
[07:43:22] <gilberth> DAMMIT! stderr is now the data connection on the Chaosnet. How to debug with that?
[07:43:32] <moon-child> Hmm.  Trapping is faster now, but throughput is also higher now.  So those numbers probably have not changed much since?
[07:44:20] <moon-child> gilberth: chaosnet?
[07:44:33] <gilberth> moon-child: Don't mention it. ;)
[07:44:36] <hayley> I'm not sure about "trapping is faster", since they had a proper <10 cycle-ish trap in hardware. But traps are fast enough, I guess. 
[07:44:59] <moon-child> Well, worse and worse!
[07:45:45] <gilberth> The UNIX software is olde, very olde like '84. And it kinda behaves with Linux but not with macOS and this drives me crazy.
[07:46:26] <gilberth> moon-child: And how should I debug without stderr?
[07:47:03] <moon-child> gilberth: fd 3!
[07:47:31] <moon-child> 3> log.txt #or whatever
[07:47:52] <gilberth> Yes, that is a pipe from the FILE connection process to the FILE server process.
[07:48:40] <moon-child> surely it does not use all the 31-bit fd space?
[07:48:44] <moon-child> they did not have so many fds in '84
[07:49:27] <gilberth> moon-child: I have a chaosd which listens on unix domain sockets. A server daemon which talks to chaosd, which forks a FILE server, which for each connection forks a connection process, which fork a transfer process for each file read. All passing data back and forth. A twisty maze of pipes and processes.
[07:51:15] <gilberth> moon-child: I need to find that close(2) and dup call, I'll manage.
[07:51:36] <hayley> One thing they did in Java was to amortize trapping by processing all the references in a page at a time. But then you have the latency of processing a whole page.
[07:51:59] <hayley> https://dl.acm.org/doi/10.1145/1029873.1029877
[07:54:59] <hayley> n.b. they protect EVERY page to avoid having a load-value barrier, and thus still have trap storms (page 10).
[08:01:08] <moon-child> hmm.  CPUs speculatively execute branches, and then roll back if they find they've made a mistake.  I wonder if there is space for a similar optimization in JIT, where you perform some accesses which might be incorrect (but never perform any side effects based on them--like an SSB), but later undo everything if you find out that's what happened
[08:01:33] <moon-child> seems kinda like intra-thread transactions, now that I think about it
[08:07:10] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:08:02] <hayley> stylewarning confirmed that captioning #sbcl logs with a name of one of Andrew Appel's papers does count as a Coalton meme.
[08:13:37] <Qwnavery> gilberth: ftp://ftp.lambdaspace.xyz/mirror/gilberth/cadr-remote.mov
[08:13:42] <dave0> maw
[08:14:05] <Qwnavery> *you need the user anonymous@ftp.lambd.... or ftp@ftp.lambd....
[08:14:11] <White_Flame> do a load, tell a thread to check the address/datatags, do any non-committal work, block on thread completing (or giving you a new value), do committal work
[08:14:41] <White_Flame> not sure that can be faster than a small barrier inline
[08:15:22] <White_Flame> also the interaction with the thread will probably be larger
[08:21:56] <White_Flame> hardware will always be more parallel at the micro-level than software, excepting maybe certain VLIW architectures
[08:22:47] <gilberth> ioctl(x->x_pfd, FIONREAD, (char *)&nread);¬† <-- The culprit.
[08:23:03] <gilberth> So what are the semantic differences between BSD and SYSV here?
[08:23:41] <gilberth> Qwnavery: FTP? How old school! :-)
[08:24:12] <Qwnavery> I might end up putting a http frontend on it :>
[08:24:30] <gilberth> A HTTP to FTP gateway? Cute.
[08:24:40] <Qwnavery> Depends if the reverse proxy I'm using will wake tf up.
[08:25:41] <gilberth> I am using ftp(3).
[08:25:47] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/mELRpGpGzGGfvpwcFsjeFGKe/randall-smith.jpeg >
[08:26:26] <Qwnavery> ._. I literally have no idea why or how it stopped working but it had something to do with my nginx.conf .-.
[08:26:39] <Qwnavery> I'm using vsftpd
[08:27:15] <gilberth> Hey, I have a directory there! :-)
[08:28:40] <hayley> https://www.youtube.com/watch?v=lwx8A0XUpfM
[08:29:16] <Qwnavery> if you would like, I can mirror clim.rocks/gilbert/ as an offsite backup. I would be more than happy to
[08:29:18] <gilberth> Qwnavery: Hmm, I get 213KB/s only. Do you host that at home?
[08:29:24] <Qwnavery> gilberth: yes
[08:29:31] <Qwnavery> and I'm in Australia
[08:29:49] <gilberth> That would only add latency.
[08:30:25] <Qwnavery> h,
[08:30:27] <Qwnavery> hm.
[08:30:35] <Qwnavery> I'm not quite sure why it would be that slow
[08:30:36] <gilberth> It's not that photons excaust and get slower with distance.
[08:30:42] <Qwnavery> It was pretty slow downloading from yours
[08:30:53] <hayley> Could be bad olde Australian internet.
[08:30:55] <Qwnavery> we're mixed-cable
[08:31:18] <Qwnavery> so it's like 1/3 fibre and the rest is still copper
[08:32:01] <Qwnavery> hayley: would you mind seeing what speeds you get downloading from my ftp?
[08:32:23] <Qwnavery> if you're still getting 213KB/s there's a problem.
[08:34:38] <hayley> 1.76MB/s here.
[08:35:23] <Qwnavery> thanks, really appreciate it
[08:37:55] <gilberth> Qwnavery: I get 536KB/s from another host which is directly connected to the internet.
[08:39:35] <Qwnavery> gilberth: Not sure why, but this is pretty much always been the case with transcontinental lines down here. Everything's slow, that's why mirroring is great.
[08:41:02] <gilberth> I just wanted to make that this wouldn't just be bad peering with this toy landline I have here.
[08:41:37] <gilberth> wget doesn't like ftp.lambdaspace.xyz :( Somehow
[08:43:22] <Qwnavery> gilberth: I haven't pushed it through nginx, that's why.
[08:43:26] <Qwnavery> I'm workin
[08:43:31] <Qwnavery> workin' on it.
[08:45:02] <gilberth> Qwnavery: So http://free-clim.org/cadr/cadr-munch.mov is slow for you, too?
[08:47:10] <Qwnavery> gilberth: very. that's why I'm offering to mirror it here in Australia incase any other OCE people want it. plus, offsite backups are always a good thing.
[08:55:00] <mfiano> gilberth: 404 for that link
[08:59:45] <gilberth> Sorry. http://free-clim.org/cadr-munch.mov
[09:00:06] <mfiano> too small of a file to measure speed :)
[09:00:22] <gilberth> 30MB? IIRC
[09:00:54] <mfiano> it completers in about 1s, before the speed report stabilizes
[09:03:34] <gilberth> Guess, that would be fast enough then. :)
[09:03:53] <mfiano> Cool. I'm in NY
[09:04:34] * hayley tries to make a stacked histogram comparing car colours vs. year and the histogram colours are very wrong.
[09:04:50] * hayley uploaded an image: (11KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/dpwcrlctmrDALhbCzEkfqXRH/Screenshot_2021-10-02_15-41-26.png >
[09:22:37] <hayley> https://www.youtube.com/watch?v=eZHDc3RmZgE
[09:27:54] <gilberth> Ok. Seems like the code I have has a 4GB problem. The arg to ioctl was an off_t*, while it still is int* for ioctl, while off_t is 64-bit. It works now for some files. Wasn't there some #define to have off_t be an int?
[09:28:57] * hayley now struggles to count variables used in the graphs.
[09:29:11] <semz> _FILE_OFFSET_BITS i think
[09:29:31] <gilberth> hayley: 1, 2, 3, 4, 5, many, yet more, a gazillion.
[09:29:40] <gilberth> semz: Yes, sth like that. Thanks.
[09:29:52] <hayley> count(blah) is not a variable, but everything else is. Hurts my head as I have a lot of histograms.
[09:39:33] * moon-child tries to work out why an 'add' is taking 1% of the perf samples in a heavyweight function.  (Well, technically it's an lea, but the sample applies to the previous insn)
[09:39:39] <moon-child> and it's in the prologue
[09:39:47] <hayley> Very odd.
[09:49:59] <Qwnavery> gilberth: have you done stuff with lambdadelta?
[09:50:50] <gilberth> lambdadelta?
[09:51:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:53:18] <gilberth> Qwnavery: Nope.
[09:53:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:53:59] <Qwnavery> gilberth: I was just asking because I stumbled upon a blog that mentioned it and looked further into as an emulator. It looks like it may be able to emulate zetalisp.
[09:55:01] <hayley> How do I say "hindsight's a bitch" but PG-rated?
[09:55:20] <moon-child> hindsight is an emancipated bitch?
[09:55:34] <hayley> PG, not PC?
[09:55:54] <hayley> "Our future selves always seem to be wiser than our present selves" would do.
[09:56:03] <gilberth> Qwnavery: This detour is taking too much time already. But I could perhaps make it's console fast :-) Nah, I'll concentrate on the CADR to make it actually usable.
[09:56:52] <moon-child> I think canonical is 'hindsight is 20/20'
[09:57:01] <hayley> "Our future selves always seem to be wiser than our present selves, so attempting to figure out how to lose the least money choosing a car is worth some consideration."
[09:57:07] <hayley> Yeah, that sounds about right. Thanks.
[09:58:29] <Qwnavery> "The blind man cannot see. It is because he writes everything in C."
[09:59:32] <Qwnavery> - Some philosophical mumbo jumbo that doesn't actually have any meaning, grammatically nor poetically.
[10:03:57] <dave0> it rhymes
[10:04:24] <dave0> in fact, rhyming see with c is genius
[10:05:13] <contrapunctus> It's time to write about Python or Rust üòè
[10:05:20] <Qwnavery> I literally named my programming directory for C "See" and for C++ I named it "SeePlusPlus"
[10:05:47] <Qwnavery> :>
[10:06:19] <gilberth> Terrific, the communication on the internal pipes is packet-wise, yet there is no length header, so when the file read process reads too fast, the file connection process get's all data at once, which leads to garbage. This is a design error.
[10:07:06] <semz> how did that one EVER work?!
[10:07:19] <gilberth> When I artificially pace the file read process, it works. But time is not a proper packet delmiter.
[10:07:49] <gilberth> semz: I don't know. Different scheduler on Linux?
[10:08:21] <gilberth> Though I had some hangups with Linux, too. But far less.
[10:09:52] <moon-child> lmao
[10:14:00] <gilberth> Or it's a multi-core issue. It makes sense, when I call write(2) and am in the kernel anyway, I schedule to the process waiting for that data. This would make the system more prompt and limit the amount of data piled in the pipe's buffer.
[10:19:57] <hayley> https://www.youtube.com/watch?v=kixKhypM7Ps
[10:25:33] <gilberth> Anyhow, would I take this serious, I should switch to IP, provided that this is available to mere mortal processed. I have no clue, but read that there is actually an IP protocol number for Chaosnet. Otherwise: Perhaps a bad idea.
[10:26:39] <gilberth> This is of kind ironic as there is provision to talk to the Arpanet from Chaosnet.
[10:27:14] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[10:27:14] <gilberth> That would then be a metacircular network stack :-)
[10:27:49] <hayley> https://en.wikipedia.org/wiki/IP_over_DVB
[10:28:13] *** Joins: shka (~herr@109.231.6.176)
[10:29:45] <gilberth> This is almost as silly as RFC1149.
[10:31:21] <Qwnavery> if you go the ip route (pun intended), be sure to make it ipv6. there's not point in deprecating it from the get-go.
[10:32:01] <moon-child> there is a world in which ipv6 was decent
[10:35:05] <mfiano> Hmm, I might actually get something rendered on the screen this weekend. Been working on a complex protocol for about a month, staring at a black screen, and wondering if it even works correctly :)
[10:36:20] <gilberth> Qwnavery: I would not invent it, it exists. And this would imply that I would go ipv6 first.
[11:14:37] <mfiano> moon-child: o.O. Was it something I said, or them?
[11:14:47] <mfiano> I don't understand the reason
[11:15:36] <moon-child> them.  And nothing in particular; just that that kind of thing seems to come up a lot and I've run out of patience for it
[11:16:32] <mfiano> Yes, I see. This is the third day helping familiar names of old that haven't seemed to learn much of anything.
[11:16:40] <mfiano> I hope this isn't a pattern
[11:35:28] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:44:33] <mfiano> I feel like I should start offering less of my help. I am becoming annoyed at the wasted time, and if it wasn't obvious, you left at a good time.
[11:46:36] <mfiano> I know I don't explain things very well some times, but it also makes _me_ feel stupid when people can't understand or don't read at all simple language addressed to them multiple times.
[11:46:43] <mfiano> I think I need a break from IRC :/
[11:56:12] <dave0> i took a couple of 10 year breaks from irc
[11:56:26] <dave0> when i came back it was the same :-)
[11:57:08] <mfiano> I've been on IRC for several decades, and the only thing that changed was the number of users, and the amount of time I waste.
[12:16:36] <susam> So I went to the main channel to read what this was all about. Wow! What a frustrating conversation. I felt frowns forming on my forehead until I read this: "I didn't know that SBCL was the Evil". This one made me laugh out loud.
[12:33:59] * Qwnavery proceeds to write everything in brainfuck with a lisp syntax that compiles to bytecode to avoid the evil
[13:02:21] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[13:06:02] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[13:10:45] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[13:17:36] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:19:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:52:58] *** Joins: random-nick (~random-ni@87.116.183.117)
[13:55:18] <hayley> I really really regret not having anything to call "the Aircrash Bureau". As per the best letter ever sent to the ACM, you would send pious C programmers to get checked by them.
[14:57:25] <hayley> gilberth: Minutiae w.r.t bounds checking elimination and (- position constant) inference: the minimum length flows backwards from winning states, whereas methinks the constant flows forwards from where the tag is defined.
[15:01:41] <shka> i've just beat Ion Fury, what a funny game
[15:02:13] <shka> and a nice MIDI soundtrack https://www.youtube.com/watch?v=m4YLaKG98Ek
[15:58:27] *** Joins: selwyn (~selwyn@user/selwyn)
[16:03:53] <selwyn> https://www.bbc.co.uk/news/uk-england-northamptonshire-58767230
[16:05:35] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 252 seconds)
[16:06:57] <shka> selwyn: lol
[16:07:05] <selwyn> yes
[16:07:07] <selwyn> genius island
[16:07:44] <shka> hehe
[16:08:00] <shka> this remind me the story behind the original mad max movie
[16:08:44] <shka> https://www.businessinsider.com/mad-max-what-happened-to-world-2016-2?IR=T
[16:09:14] <shka> "people would do almost anything to keep vehicles moving and the assumption that nations would not consider the huge costs of providing infrastructure for alternative energy until it was too late."
[16:09:32] * selwyn shifts uncomfortably
[16:09:54] <selwyn> the uk seems to be doing well on alternative energy targets (for now)
[16:10:20] <shka> no
[16:10:28] <shka> there is no substitute for oil
[16:11:30] <selwyn> gas?
[16:11:36] <shka> nope
[16:12:07] <shka> i mean, you need farming running
[16:12:19] <shka> and i don't know how to that without oil
[16:12:48] <selwyn> oh right
[16:14:21] <shka> so that's in addition to global warming
[16:14:50] <selwyn> well
[16:16:17] <shka> but you can extract uranium out of the sea water
[16:17:03] <shka> and you won't be running out of it any time soon
[16:17:13] <shka> just, so you know
[16:28:45] <selwyn> idk i am optimistic about polish czech border coal
[16:29:19] <hayley> Tier 3 one-more-re-nightmare: install PCI-e FPGA card in computer, o-m-r-n compiler generates Verilog code for hardware FSMs
[16:43:42] <selwyn> nice
[16:44:31] <hayley> Tier 4: place order for 10,000 chips to nearest silicon fab
[16:45:18] <selwyn> i wonder where your nearest fab is, actually
[16:45:26] <selwyn> maybe taiwan?
[16:45:54] <hayley> https://www.aumanufacturing.com.au/the-terrible-trickiness-of-growing-an-australian-semiconductor-sector
[16:46:47] <hayley> Singapore is closer still.
[16:46:54] <selwyn> australia is weirdly good at quantum computing but everyone good seems to leave to do actual work elsewhere
[16:47:15] <hayley> There is Silanna in Sydney apparently.
[16:51:43] <selwyn> there is an apparently very good fab in dresden
[16:51:52] <selwyn> wondering why they put it there exactly
[16:52:57] <selwyn> huh it was the silicon valley of the eastern bloc
[16:57:13] <shka> selwyn: robotron
[16:57:35] <shka> major electronics producers
[16:58:03] <shka> https://en.wikipedia.org/wiki/VEB_Robotron
[16:58:04] <selwyn> i see
[17:00:06] <shka> dunno what happens to that company after the unification, wiki mentions simens 
[17:00:13] <shka> *siemens
[17:12:02] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[17:12:29] *** Joins: makomo (~makomo@user/makomo)
[17:19:07] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[17:19:34] *** Joins: makomo (~makomo@user/makomo)
[17:32:04] *** Joins: random-nick (~random-ni@87.116.165.220)
[17:33:34] <selwyn> iirc eastern blocs problem was that they started too late
[17:33:58] <selwyn> cause the politburo thought that computer chips were a psyop by the west to convince them not to do nuclear stuff
[17:35:26] <shka> that's odd statement
[17:56:56] <dave0> nite all
[17:57:22] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:09:06] *** Quits: cyberbanjo (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23) (Remote host closed the connection)
[18:21:12] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:25:12] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1061-static.midco.net)
[18:25:15] *** Joins: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1061-static.midco.net)
[18:25:43] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1061-static.midco.net) (Remote host closed the connection)
[18:38:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:42:45] *** Joins: selwyn (~selwyn@user/selwyn)
[18:46:04] <selwyn> sabine weighs in on fusion https://www.youtube.com/watch?v=LJ4W1g-6JiY
[18:46:21] <selwyn> she has great insights on physics culture
[18:57:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:02:09] <pl> shka: somehow I bet what was there got ransacked, either through buyout or liquidation
[19:03:47] <shka> pl: yeah, i don't think that the german government had interest in running this venture
[19:05:39] <pl> While I do not claim that eastern companies were somehow pearls of technological advancement (like certain groups in poland) there's some truth in the rather predatory way that kind of enterprises got treated
[19:07:58] <shka> selwyn: i am glad somebody is pointing this out, fusion is nowhere near being viable 
[19:08:46] <shka> it should be considered as purely scientific experiment aiming to expand human knowledge 
[19:11:15] <shka> but i kinda wish some of that fusion money would be spent on the fission reactors instead :/
[19:21:43] <pl> different budgets, and different blockades
[19:22:10] <pl> it's ridiculously funny that thanks to the total bungling by current party, we might end up with 6 /private/ nuclear reactors
[19:22:33] <shka> pl: task failed successfully
[19:22:53] <pl> shka: except it might bungle regulations for getting it running too :/
[19:23:13] <shka> hopefully not
[19:23:23] <pl> shka: the state-owned NPP project is pretty much in the same spot it was in 2015
[19:23:29] <shka> i really do like that nu-reactor design
[19:24:05] <shka> nothing fancy, but it is simply practical solution
[19:24:41] <pl> except by then it existed only for 2 years as funded company, it's been 6 years since and the biggest news we have is some mumbling that sounds like yet another american bribery scandal (that will never go public) and a crazy politician farting promises in Be≈Çchat√≥w
[19:25:28] <pl> shka: I wish a) there was more readily available bismuth b) geopolitical conditions would allow to grab mass-production SVBR line
[19:25:42] <pl> also, we could seriously use a 10 or so CANDU-900
[19:26:33] <shka> sometimes i wonder what would have been if in the 90s nuclear power was trendy and there would be massive technological transfer from Russia
[19:27:04] <pl> I think they have one of the few continuously operating production lines for reactors now?
[19:27:31] <pl> VVR series, same design line as the two Poland bought for the failed NPP in ≈ªarnowiec
[19:27:31] <shka> Chernobyl made nuclear power smell funny, especially Russian nuclear power
[19:27:49] <pl> shka: There was strong opposition even earlier
[19:27:56] <shka> i am aware
[19:28:12] <pl> can't recall if greenpeace-aligned ecoterrorist fired rockets towards IIRC Superphenix before or after Chernobyl
[19:28:26] <pl> think it was before
[19:28:50] <shka> but i think that reality of the global warming would make us go nuclear if not for the Chernobyl
[19:29:13] <gilberth> [Good morning #lispcafe!]
[19:29:21] <shka> i mean, it is certainly only option for Germany in Poland
[19:29:35] <shka> but Germany decided to go full retard
[19:29:38] <gilberth> Forget Germany.
[19:29:45] <shka> never go full retard
[19:29:47] <pl> shka: reality of global warming is not stopping germans as a whole being full retard /and exporting/ it
[19:30:22] <shka> yeah, i am angry about that, don't mention
[19:30:40] <gilberth> Don't mention it.
[19:31:31] <shka> anyway, WTF we are doing here
[19:31:38] <shka> Germany is not Egypt
[19:31:50] <gilberth> I haven't changed my opinion in the last 30 decades. We should go nuclear and burn coal. But that is not PC here.
[19:31:52] <shka> it does not have endless swats of sunny sahara for solar power
[19:32:10] <gilberth> and *NOT* burn coal.
[19:32:14] <gilberth> It's evil.
[19:32:16] <shka> gilberth: and not 30 decads 
[19:32:29] <gilberth> Hmm?
[19:32:36] <pl> shka: and it's not exactly feasible to turn sahara into power generation location
[19:32:46] <shka> 30 decades is 300 years
[19:32:48] <pl> not to mention huge impact on climate and ecology
[19:32:53] <shka> you are blowing your cover vampire
[19:33:15] <gilberth> shka: Nuclear in 1700?
[19:33:50] <gilberth> Na, what I meant was that even right after Chernobyl, I was PC incorrect and said that coal is more evil than nuclear.
[19:33:59] <shka> pl: i mean, you don't need to convert the whole Sahara into solar power, but if for instance Egypt decides that It wants to run on solar power it probably can pull it off 
[19:34:02] <gilberth> nvm. I need coffee.
[19:34:21] <shka> Germany can't simply because they don't get enough of sunlight whole year around
[19:34:43] <pl> shka: there are issues with that, but generally assuming best efficiency we can theoretically gain, there would be interest in putting all of sahara under
[19:34:51] <gilberth> Renewables is no option, it won't work.
[19:35:14] <shka> gilberth: it can work in some places
[19:35:23] <gilberth> Storage?
[19:36:09] <shka> manageable if you can count on production being stedy 
[19:36:18] <shka> but you can't in Germany
[19:36:47] <gilberth> No, it can't. Tell that to the other 80e6 or so Germans.
[19:37:22] <shka> pl: putting Sahara under the solar panels is a pipe dream honestly
[19:37:49] <gilberth> And beside, when I don't burn the oil, someone else would. This is a global problem.
[19:37:53] <shka> it is the least populated and the most remote place on earth
[19:38:01] <shka> there is like one road coming trough it
[19:38:48] <shka> so good luck with that project
[19:39:02] <pl> I just love how putting constant 1GW of zero emission energy in germany requires 8GW of renewables and 280GWh of hydrogen storage
[19:39:22] <shka> pl: yes, this is just insanity
[19:39:42] <shka> but i have something better for ya
[19:39:58] <shka> Germany is just having coal shortage.
[19:40:06] <gilberth> It's still not PC to mention it here.
[19:41:22] <gilberth> IIRC it's next year or so that we finally shut nuclear down. Thus Nord Stream II. And guess who always was against Nord Stream II? The Green party, a bunch of dreamers.
[19:41:42] <pl> ehhh, I broke the solver by demanding zero emissions
[19:41:45] <shka> i think that history won't be kind for this anti-nuclear movement
[19:42:49] <gilberth> Neither does me. The plan is to make heating that expensive that the poor can't effort it anymore. This will get funny.
[19:44:08] <gilberth> Anyhow, I am happy that the recent vote for parliament is over. I am tired talking against this sort of religious beliefs.
[19:45:15] <gilberth> BTW, why FIONCTL? Wasn't select(2) not yet available?
[19:47:57] <gilberth> FIONREAD rather.
[19:49:32] <pl> Select is a relative latecomer
[19:50:18] <pl> by 4 years, and a foreign API at that
[19:52:33] <gilberth> IIRC select(2) was late in the game. Doesn't matter, I'll have to fix a few other things, too.
[19:53:42] <gilberth> And it still doesn't work on files. Thus the fuss of the FILE server to fork processes for transfers to get sth like async I/O.
[19:57:45] <gilberth> And not a single read(2) call cares for EINTR. At times not even the number of bytes read are checked.
[19:58:45] <gilberth> But EINTR was often broken and meant "game over".
[20:02:35] <pl> gilberth: there was a big problem in some systems when Linux started actually returning EINTR
[20:03:46] <gilberth> Well, some UNIXes were broken, read(2) would read some data be interrupted and returning EINTR with that data actually being consumed already and thus lost.
[20:04:27] <gilberth> pl: Indeed. And while I need to fix this all, I could as well care for EINTR and EAGAIN while I am at it. Won't hurt.
[20:13:33] <gilberth> There even is some "#ifdef SELECT" partly done. So I presume this is about select(2).
[20:21:33] <pl> gilberth: I'm not sure if the FILE.c code doesn't predate BSD sockets existence
[20:33:14] <gilberth> You looked at that code?
[20:33:56] <gilberth> And yes, FILE.c doesn't use sockets at all.
[20:35:24] <gilberth> In good old inetd fashion, it is spawned by server.c with its stdin and stdout being the network connection somehow.
[20:46:52] <gilberth> This is fishy: { struct xfer *x; ... read(fd,(char*)&x, sizeof(x)); .. } Reading a pointer? Who knows.
[20:50:43] <gilberth> But this would make sense, the part where I miss a length header, is the pipe between the server.c and FILE.c it seems. And when this was some socket initially, it perhaps was packet oriented. This still is a maze to me.
[20:51:19] * gilberth scratches head.
[21:21:27] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:24:20] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:24:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:25:01] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[21:39:25] <shka> i was reading on the *lisp
[21:40:18] <shka> features in that language would make surprisingly a lot sense on modern PCs
[21:40:24] * gilberth is still having fun.
[21:41:20] <gilberth> shka: It's a pity that I never got around to play with the CM our uni had.
[21:41:54] <shka> oh, they had one? that is super cool
[21:42:03] <shka> i really like CM-1
[21:42:29] <gilberth> I own the book. And at that time I was fascinated by the design.
[21:42:33] <shka> looks bad ass, has weird parallel architecture, was programmed in lisp
[21:42:44] <shka> also, powerful
[21:42:48] <shka> what else could you want?
[21:43:32] <gilberth> A mere Lisp machine as a front end processor? How decadent!
[21:43:47] <shka> but it feels so wrong
[21:43:58] <gilberth> Wrong?
[21:44:18] <shka> well, lisp machine as over-glorified terminal 
[21:44:24] <shka> but i love it 
[21:45:21] <shka> maybe someday i will try to make custom computer case that will mimic CM-1
[21:45:32] <shka> well, or at least half of it
[21:45:47] <gilberth> The one with the blinkenlights?
[21:46:02] <shka> yeah
[21:46:31] <shka> i may stick one of these USB LED strips under it to monitor CPU usage 
[21:48:45] <gilberth> I always wanted to hook up an analogue gauge to show the load average.
[21:49:23] <gilberth> shka: But please don't make them RGB. ;)
[21:49:27] <shka> no
[21:49:31] <shka> god no
[21:49:32] <shka> RED
[21:49:42] <shka> you need to stick to the original
[21:49:51] <gilberth> The only true LED colour(TM).
[21:49:55] <shka> nah
[21:50:08] <shka> IIRC red leds were the cheapest
[21:50:17] <shka> that's why everybody was using those
[21:50:19] <gilberth> Yep.
[21:51:05] <shka> hooking up analogue gauge is possible
[21:51:20] <shka> would be nice arduino project i guess
[21:51:32] <gilberth> Could be as cheap as to use a PWM.
[21:51:58] <shka> https://hackaday.io/project/10629/gallery#0c62c7f214004b049ad83a1f459cf309
[21:52:23] <shka> typematrix keyboard... uhhh
[21:53:07] *** Joins: ixelp (~ixelp@p5492d8bb.dip0.t-ipconnect.de)
[21:53:08] *** ChanServ sets mode: +o ixelp
[21:55:11] <gilberth> My idea was to bit bang a pin on say the useless Centronics port from inside the scheduler. Never got around this.
[21:56:15] <shka> well, using USB would be more flexible
[21:56:53] <gilberth> But I once had a process which would reflect disk activity to an keyboard LED, as my machine was in the attic with display and keyboard routed there, I couldn't stand the noise.
[21:57:09] <gilberth> shka: These days, yes.
[21:58:17] <White_Flame> it's really easy to have a silent PC nowadays
[21:58:42] <White_Flame> I kind of accidentally fell into that probably 10 years ago, got sick of dying PSU fans and got a fanless one, and noticed the sound difference
[22:04:07] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1061-static.midco.net) (Ping timeout: 252 seconds)
[22:05:17] <gilberth> White_Flame: Not so much in like '95. However my friends were surprised that you could run a video signal over like some 10m. Actually it was the PS/2 interface which had glitches at times over that distance.
[22:06:26] <White_Flame> yeah, analog has huge advantages in distance over digital
[22:06:43] <White_Flame> can get a smidge blurrier, but at least the sync & everything survives
[22:07:38] <White_Flame> even in the HDMI era, people would run component video for long runs instead of digital.  Not sure if it's any better today
[22:08:22] <gilberth> Well, a current loop could be routed over way longer distance with no trouble. The PS/2 interface isn't just designed for that. Being OC to begin with.
[22:08:46] <gilberth> White_Flame: My display was pretty sharp. It's all about impedance.
[22:10:44] <gilberth> I get ENOBUFS = No buffer space available? Seriously? Never seen that.
[22:11:34] <gilberth> Shouldn't write(2) just block if the buffer is full on a pipe?
[22:14:05] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[22:28:56] <pl> gilberth: isn't that dependant on flags?
[22:29:31] <pl> White_Flame: long HDMI runs are still evil, too. Anything HDMI, actually :V
[22:38:44] <gilberth> pl: Perhaps. But it would be odd to set NBLOCK or sth without any provision for handling that while calling write(2). And isn't there EWOULDBLOCK? I diving into obscure depth of UNIX, I never visited.
[22:39:46] <gilberth> pl: Again, I bet that this file descriptor was some socket on whereever FILE.c initially was run on. Here it's a pipe to chaosd.
[22:40:03] <gilberth> No, server.c, rather.
[22:40:42] <pl> gilberth: the code AFAIK comes from hodgepodge networking chacked into BSD pre sockets or at best early in sockets existence
[22:41:27] <gilberth> Funny is that poll(2) tells me the file descriptor in question would be fit for output, while ENOBUFS.
[22:42:10] <gilberth> pl: Yes, this is what I believe, too. This FILE.c must have been run by something like inetd, but for chaosnet.
[22:44:38] <gilberth> But this is irritating I get ENOBUFS while poll(2) says me everything is fine. When I persist and keep trying again ENOBUFS goes away after a while. Need to check whether some odd flags are set on that fd.
[22:46:25] <gilberth> You find commented out ioctl's like: "ioctl(0, CHIOCACCEPT, NOSTR);"
[22:49:15] <gilberth> Reminds me of /me porting X11 to XENIX while it had no sockets at all. I wrote a device driver to have connections between X clients and the server. Kinda like bidi pipes.
[22:55:25] <pl> Before desperate DoD grant pushed BSD Sockets down everyone's throat, there was a bunch of random attempts to network Unix, yep 
[23:04:45] <gilberth> This ENOBUFS issue appears to be a common macOS or even BSD issue. At least I get that from asking aunt Google.
[23:05:50] <gilberth> Anyhow, I am on the right track. Finally.
[23:08:17] <shka> how was networking done before the unix anyway?
[23:09:14] <edgar-rft> with fishing nets
[23:09:37] <edgar-rft> petrus was a networker!
[23:10:43] <gilberth> shka: Carrying a stack of punch cards around?
[23:11:02] <shka> heh, right
[23:17:27] <gilberth> This land line I have here is just bad, switching to mobile data; so no YT for me.
[23:18:15] <gilberth> shka: Networking predates UNIX.
[23:18:33] <shka> well, that what i thought
[23:19:22] <gilberth> But from reading early RFCs there always was some extra processor which handled the networking for the host.
[23:20:17] <pl> shka: UNIX was latecomer to networking
[23:20:34] <shka> yes, which make sense
[23:20:38] <shka> it was for minicomputer
[23:20:42] <shka> not mainframe
[23:21:17] <pl> ARPANET originally used IMPs which were minicomputers with specialized I/O devices running routing stack + interface for hosts
[23:21:32] <pl> there were two main interface variants and there was a lot of experimentation
[23:22:11] <pl> there was a lot of serial-port based networking (IBM SNA, all the crazy stuff people built on DEC PDP-8s running as port concentrators for PDP-10s, etc)
[23:28:57] <pl> UNIX "networking" was UUCP file exchange on scheduled modem calls
[23:30:48] <shka> anyway
[23:31:07] <shka> i was reading on the "C is not low-level language" paper again
[23:32:29] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9472:a2eb:3822:1241)
[23:33:43] <gilberth> Ah yes, I was on UUCP before getting access to the internet.
[23:34:51] <gilberth> Could happen that an email took a few days to arrive. Like snail mail.
[23:35:01] <shka> and that paper makes me question the very idea of the memory model
[23:35:30] <gilberth> C looks pretty low level to me.
[23:36:02] <shka> well, it was, at one point
[23:36:38] <gilberth> Look at B, that's fun. We have C only because the PDP-11 was byte oriented and not work oriented.
[23:38:26] <gilberth> Inspired by BCPL. I once watched a talk, that BCPL was "based" on CPL, which was designed as a proper language including GC, but they struggled to write a compiler and so they came up with BCPL on the idea that the compiler should be trivial and not guard the programmer in any way, because the programmer is supposed to know what he is doing. Thus the weak typing all around.
[23:40:16] <gilberth> B had no datatypes beside a word, what now is "int". This could either be an integer or used as an address for pointer dereference. This is why "int" still is optional in C. A local variable would have been declare by just "auto foo;" for automatic storage.
[23:41:13] <gilberth> Just saying e.g. abs(x) { if (x < 0) return -x; else return x; } is both valid B and C. The types were optional in C and crammed in.
[23:42:32] <gilberth> There are minor syntax changes. In B you would say "auto x 10" to declare 'x' and have its init value be 10. pcc still accepted that syntax and the original UNIX C code is full of that.
[23:43:51] <gilberth> By toy language called PLZ for my yet to be build TTL CPU design is inspired by B, everything is a word. Only difference is that I use s-expr syntax.
[23:44:09] <gilberth> * My ; dammit.
[23:46:03] <gilberth> And here we are, still stuck for the most part on this lazy hack called C.
[23:51:43] <gilberth> All based on simplicity. But then Lisp really is simple, too, yet so much more powerful.
