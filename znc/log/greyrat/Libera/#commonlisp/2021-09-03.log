[00:05:09] *** Joins: vats (~vats@180.149.226.8)
[00:08:28] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[00:10:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:16:45] *** Quits: pve (~pve@178-55-196-182.bb.dnainternet.fi) (Quit: leaving)
[00:20:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:21:03] <hexology> i have a table of the form '((x "a" 0x01 "ITEM A") (y "b" 0x02 "ITEM B")). i want to perform lookups such that any of the 2nd-4th elements in a row returns the 1st element in the row. so looking up "b", 0x02, or "ITEM B" should return Y. any suggestions for a tidy way to store this kind of data?
[00:21:09] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:21:44] <hexology> it's safe to assume that the lookup keys are unique, so there will not be 2 rows with the same key in any field
[00:22:14] <Bike> do you want to use the data in other ways? probably, but if not, i'd think a hash table is fine
[00:22:17] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[00:22:25] <hexology> in this case i don't, i just need to look up individual elements
[00:22:39] <hexology> would i have 3 separate hash tables? one for each set of keys
[00:22:48] <hexology> or i'd "flatten" the keys all into a single hash table
[00:22:54] <Bike> i don't see why you'd need more than one table, if the keys never overlap
[00:22:57] <hexology> right
[00:23:00] <hexology> good idea
[00:25:46] <moon-child> could also find-if
[00:25:51] <moon-child> (member (cdr x))
[00:26:00] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
[00:28:14] *** Joins: seere (~seere@user/seere)
[00:29:10] <White_Flame> hexology: 0x02 is a symbol, or did you want #x02?
[00:30:28] <hexology> White_Flame i'm actually undecided as of yet, it would either be #x02 or "0x02"
[00:31:06] <White_Flame> also, (find "a" my-table :key #'second :test #'string=)
[00:31:30] <mfiano> (car (rassoc '0x02 table :test (lambda (x y) (find x y :test #'equal))))
[00:31:51] <hexology> these all involve linear scans over the list, right?
[00:32:03] <mfiano> that is highly inefficient for large data
[00:32:04] <White_Flame> yeah, it's the easiest way.  slow but compact
[00:32:10] <hexology> in this case it's not a big enough pile of data to care about performance
[00:32:11] <mfiano> Best would be to use a hash table if tables are large
[00:32:34] <White_Flame> if you use a hash table, you really mean 4 hash tables here
[00:32:47] <White_Flame> and makes it more complex to add/remove
[00:32:48] <mfiano> Depends if rows are also large
[00:32:53] <mfiano> If not single would be fine
[00:33:08] <hexology> White_Flame i mentioned this above, but in this case there are exactly 3 "keys" per "value", and the keys are all distinct, so they can be in a single flat hash table
[00:33:15] <hexology> that was Bike's idea
[00:33:37] <White_Flame> ok, but it's still 4 adds/removes per item to manage
[00:34:16] <hexology> true. also in this case the table won't be modified, just read from
[00:34:53] <White_Flame> I tend to just stick with very simple/dumb/linear approaches in the beginning, then if it's too slow you can find exactly what you need to optimize
[00:38:42] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:38:47] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2)
[00:39:00] <White_Flame> and oftentimes, as you look at optimization strategies, you'll see that there's other data also associated with this, and do a more holistic optimization pass rather than just focus on 1 individual data structure
[00:39:02] *** Joins: mariari (~mariari@user/mariari)
[00:39:17] <White_Flame> eg, algorithmic optimization or refactoring how things work
[00:39:51] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:40:37] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
[00:47:55] <etimmons> borodust: Doesn't seem to have fixed it :(
[00:49:42] <borodust> etimmons: :( something else then
[00:49:52] <borodust> one day i'll tend to it :)
[00:50:47] <borodust> till then for generating bindings ccl will suffice
[00:51:04] *** Quits: silasfox (~sbv@p200300cec704065cdb41befe26522709.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[00:51:04] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[00:51:39] <hexology> that's very fair White_Flame. another reason to use a list is that i can do fuzzy search that way in the future
[00:52:25] *** Quits: karlosz (~karlosz@5.9.160.72) (Ping timeout: 244 seconds)
[00:54:31] *** Joins: antonv (~antonv@46.53.240.182)
[00:55:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:07:18] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:09:17] <pjb> (let ((table '((x "a" 0x01 "ITEM A") (y "b" 0x02 "ITEM B"))) (keys '("a" 2 0x02 "item b"))) (loop for key in keys collect (first (find key table :key (function rest) :test (lambda (k l) (member k l :test (function equalp))))))) #| --> (x nil y y) |#
[01:09:21] <pjb> hexology: ^
[01:09:41] <pjb> hexology: note: 0x02 is a symbol. #x02 is an integer.
[01:10:42] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
[01:10:55] *** Quits: antonv (~antonv@46.53.240.182) (Quit: Client closed)
[01:11:43] <hexology> if i use 0x02 i'll do it as a string, not a symbol
[01:11:47] <hexology> but yes
[01:11:50] <hexology> thanks for the snippet
[01:11:56] *** Joins: silasfox (~sbv@2001-4dd6-4b95-0-383d-e94d-aa82-1e8f.ipv6dyn.netcologne.de)
[01:14:16] <hexology> interesting, the hyperspec doesn't appear to actually explain what :key does http://clhs.lisp.se/Body/f_find_.htm
[01:14:36] <pjb> hexology: then you can also use string-equal instead of equalp  (string-equal '0x02 "0X02") #| --> t |#
[01:14:39] <hexology> (i do know what it does, but interesting omission)
[01:14:55] <_death> use an abstract data type.. write make-index and lookup-index operators
[01:15:04] <pjb> It's explained once for all such functions in the first sections of the chapter.
[01:15:07] <hexology> ahh
[01:16:00] <hexology> it's in REDUCE specifically http://clhs.lisp.se/Body/f_reduce.htm
[01:16:33] <_death> internally you can use, say, a hash-table.. later you can switch to whatever representation you need
[01:18:37] *** Joins: karlosz (~karlosz@5.9.160.72)
[01:18:41] *** Joins: Everything (~Everythin@128-124-169-247.mobile.vf-ua.net)
[01:18:45] <hexology> i was already planning on having a function like (lookup-index *items-table* #x02)  -->  'y
[01:20:08] *** Joins: Guest71 (~Guest71@adsl-72-50-5-53.prtc.net)
[01:20:41] <Bike> the operation of key arguments is explained in detail in clhs 17.2.1 and 17.2.2. sequence functions don't actually reference those sections, which is pretty annoying
[01:21:42] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:22:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[01:24:24] *** Lord_of_Life_ is now known as Lord_of_Life
[01:36:55] *** Quits: karlosz (~karlosz@5.9.160.72) (Quit: karlosz)
[01:38:30] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:38:55] *** Joins: Lycurgus (~juan@98.4.106.186)
[01:43:29] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
[01:49:28] *** Joins: karlosz (~karlosz@5.9.160.72)
[02:00:23] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.2)
[02:02:11] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[02:02:39] *** Joins: lisp123_ (~lisp123@45.86.202.65)
[02:02:48] *** Quits: lisp123_ (~lisp123@45.86.202.65) (Read error: Connection reset by peer)
[02:05:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:08:24] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:10:46] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:11:00] *** ec_ is now known as ec
[02:13:20] *** Quits: karlosz (~karlosz@5.9.160.72) (Quit: karlosz)
[02:15:13] *** Quits: silasfox (~sbv@2001-4dd6-4b95-0-383d-e94d-aa82-1e8f.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[02:16:11] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[02:23:07] *** Quits: Guest71 (~Guest71@adsl-72-50-5-53.prtc.net) (Ping timeout: 256 seconds)
[02:35:01] *** Quits: john__ (~john@dynamic-095-117-104-039.95.117.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:38:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:40:47] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[02:41:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 245 seconds)
[02:41:39] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[02:44:11] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:47:08] *** Quits: frgo (~frgo@p200300deef0cee007cf7494187de1fef.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:47:37] *** Joins: frgo (~frgo@p200300deef0cee007cf7494187de1fef.dip0.t-ipconnect.de)
[02:51:22] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[02:53:24] *** Joins: luna-is-here (~quassel@ip-95-223-58-39.hsi16.unitymediagroup.de)
[03:00:36] *** Parts: khoa (~khoa@user/khoa) ()
[03:06:29] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:06:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:07:25] *** Joins: akoana (~ah@user/akoana)
[03:18:07] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 244 seconds)
[03:23:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:35:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:38:20] <Xach> mainke rainke
[03:40:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:45:25] *** Quits: Lycurgus (~juan@98.4.106.186) (Quit: Exeunt)
[03:48:40] *** Quits: andreyorst (~andreyors@2.92.127.106) (Ping timeout: 252 seconds)
[03:50:16] *** Joins: andreyorst (~andreyors@2.92.127.106)
[03:54:48] *** Quits: andreyorst (~andreyors@2.92.127.106) (Ping timeout: 244 seconds)
[03:57:37] *** Quits: random-nick (~random-ni@87.116.183.125) (Ping timeout: 245 seconds)
[04:02:23] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:03:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:06:19] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[04:07:21] *** Joins: andreyorst (~andreyors@2.92.126.234)
[04:08:02] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:10:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:31:00] *** Quits: semz (~none@user/semz) (Quit: Leaving)
[04:31:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:36:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:41:47] *** Joins: Oladon (~olad@98.43.81.226)
[04:44:57] *** Quits: VincentVega (~user@212.241.16.18) (Remote host closed the connection)
[04:55:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:00:52] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[05:05:50] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[05:06:03] *** Joins: montxero (~user@149.167.149.74)
[05:42:38] *** Joins: charles__ (~charles@cpe-76-186-124-165.tx.res.rr.com)
[05:44:58] *** Quits: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 250 seconds)
[06:03:02] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[06:28:05] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:30:00] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:31:25] *** Joins: sander (~sander@user/sander)
[06:33:10] *** Quits: Everything (~Everythin@128-124-169-247.mobile.vf-ua.net) (Ping timeout: 240 seconds)
[06:39:36] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[06:43:56] <lad> Is there a way to get get at the # identifier for a lambda? for instance: (lambda ()); #<FUNCTION (LAMBDA ()) {52C7A18B}>
[06:45:24] <lad> i'm making a stupid closure/lambda based little object system and want to try to assign object identifiers to my "objects"
[06:47:58] <saturn2> those can change due to GC
[06:48:26] <White_Flame> clhs print-unreadable-object
[06:48:26] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_pr_unr.htm
[06:48:36] <White_Flame> that can output the "identity" when printing
[06:50:07] <White_Flame> which will generally be used inside defmethod print-object specializations for your objects.  But since you're probably just using function objects, you'd still need some way of distinguishing if it's one of yours or not
[06:57:19] *** Joins: Oladon (~olad@98.43.81.226)
[07:04:19] <saturn2> you probably want to use a :test 'eq hash-table or funcallable-objects
[07:15:48] *** Joins: beach` (~user@2a01:cb19:150:3400:9bf0:4a9a:854e:dd91)
[07:19:55] *** Quits: beach (~user@2a01:cb19:150:3400:ae0f:af4c:d551:1e8b) (Ping timeout: 252 seconds)
[07:24:40] *** beach` is now known as beach
[07:24:48] *** ChanServ sets mode: +o beach
[07:27:40] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[07:29:13] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[07:29:26] *** Joins: montxero (~user@149.167.149.74)
[07:30:38] *** beach sets mode: -o beach
[07:32:59] <beach> Good morning everyone!
[07:55:04] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 252 seconds)
[07:55:18] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[07:58:53] *** Joins: Qwnavery_ (~Qwnavery@115-64-44-64.tpgi.com.au)
[07:59:17] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 245 seconds)
[08:21:40] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[08:22:08] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[08:31:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[08:31:24] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[08:33:07] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:34:24] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[08:39:03] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: leaving)
[08:48:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[08:48:17] *** Joins: amb007 (~a_bakic@238.134.22.93.rev.sfr.net)
[09:29:10] *** Quits: amb007 (~a_bakic@238.134.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[09:52:07] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:54:23] *** Joins: john__ (~john@dynamic-095-118-088-074.95.118.pool.telefonica.de)
[10:33:11] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b008:864b:ef0a:309f:3e32:427b)
[10:34:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:05:44] *** Quits: Qwnavery_ (~Qwnavery@115-64-44-64.tpgi.com.au) (Quit: WeeChat 3.2)
[11:06:10] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:09:19] *** Joins: amb007 (~a_bakic@238.134.22.93.rev.sfr.net)
[11:10:15] *** Quits: amb007 (~a_bakic@238.134.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:10:23] *** Joins: amb007 (~a_bakic@238.134.22.93.rev.sfr.net)
[11:10:23] *** Quits: amb007 (~a_bakic@238.134.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:10:42] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:14:32] *** Joins: Duuqnd38 (~Duuqnd@185.201.174.78)
[11:14:37] *** Parts: Duuqnd38 (~Duuqnd@185.201.174.78) ()
[11:15:56] *** Quits: john__ (~john@dynamic-095-118-088-074.95.118.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:16:11] *** Joins: duuqnd (~Duuqnd@185.201.174.78)
[11:20:40] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:20:57] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:26:48] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Quit: Leaving)
[11:29:41] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:30:47] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:32:15] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[11:33:02] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Client Quit)
[11:35:32] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[11:37:51] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[11:39:31] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 252 seconds)
[11:41:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:44:13] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[11:46:07] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[11:47:40] *** Joins: pve (~pve@188-67-201-194.bb.dnainternet.fi)
[11:50:40] *** Joins: shka (~herr@109.231.62.239)
[11:59:10] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Quit: Leaving)
[11:59:36] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[11:59:52] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Quit: Leaving...)
[12:00:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:01:13] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[12:07:10] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[12:08:13] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 244 seconds)
[12:08:13] *** hhdave_ is now known as hhdave
[12:11:07] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[12:13:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[12:15:32] <mfiano> Could anyone recommend a library providing a message queue? I'm not sure what the proper terminology is, but I need an efficient non-heap-based queue where consumers only dequeue items that are addressed to them.
[12:16:20] <mfiano> I could try to roll my own event queue, but i was just worrying about performance here and if it's been done before.
[12:16:54] <mfiano> (many event types, worried about large case-based jump table)
[12:17:46] <hayley> Define "addressed"? Is each message going to one consumer? Does every consumer get one? I've heard "message queue" before but I couldn't guess the general data structure used.
[12:19:32] <mfiano> Not particularly. I am implementing a module system, where each module is a separate system/package, and it wants to check a queue to see if any other modules left a message type it is interested in. It's just an attempt to remove coupling of modules, since they shouldn't know of each other.
[12:21:06] <mfiano> Which I suppose means the message should be left intact until all modules get a chance to read from the queue. Maybe...I don't know yet.
[12:24:28] <mfiano> Not sure if anything like this is known as something. Sounds similar to the actor paradigm...idk. Not sure if this is even recommended for my use-case or what a good way to go about implementing it is yet. Just trying to get some ideas to refine it a bit
[12:24:51] <hayley> Actors would be "each message goes to exactly one consumer" to my knowledge.
[12:24:56] <mfiano> Oh I see
[12:26:13] <mfiano> Sounds similar to a syncrhonous "event bus" then
[12:27:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:30:07] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 252 seconds)
[12:31:14] <mfiano> Hmm, maybe all I really want is progn method combination here.
[12:33:22] <mfiano> Will try that first, since it's simple, and see what I think. Thanks for the rubber duck.
[12:34:12] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:34:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[12:36:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:42:57] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Read error: Connection reset by peer)
[12:43:55] *** Joins: greaser|q (greaser@antihype.space)
[12:44:36] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[12:49:25] *** Joins: karlosz (~karlosz@5.9.160.72)
[12:52:41] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Ping timeout: 250 seconds)
[12:52:49] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[12:54:41] *** Quits: scymtym_ (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Remote host closed the connection)
[12:55:56] *** Joins: silasfox (~sbv@2001-4dd6-4b95-0-383d-e94d-aa82-1e8f.ipv6dyn.netcologne.de)
[13:00:35] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:00:57] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[13:01:31] <mfiano> Ok so progn alone won't work, since any messages sent while modules are registering themselves won't be seen by subsequent modules, but I can just store the closures in a queue and execute once per iteration.
[13:02:49] <mfiano> Dead simple and will work for what I need I think.
[13:12:37] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 245 seconds)
[13:14:24] <pjb> lad: the identifier that is printed by print-unreadable-object, IS the object itself. (or you must consider as such); as saturn2 said, you can use eql (or eq) to compare the object instead of using = on integers…  That said, there's (com.informatimago.common-lisp.cesarum.utility:object-identity (lambda (x) (+ 1 x))) --> "#x30200557227F" (it just tries to parse the printed string, not conforming!).
[13:16:53] <pjb> mfiano: you seem to have quite specific specifications for your message queue…
[13:19:58] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:22:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:23:28] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 252 seconds)
[13:23:54] *** Quits: ullbeking (sid5364@id-5364.charlton.irccloud.com) ()
[13:24:20] *** Joins: ullbeking (sid5364@id-5364.ilkley.irccloud.com)
[13:27:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:32:15] *** Joins: rain3 (~rain3___@79.115.250.43)
[13:42:18] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:45:07] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[13:45:26] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:51:06] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[13:54:49] *** Quits: lad (~lad@user/lad) (Ping timeout: 252 seconds)
[13:57:35] *** Quits: drmeister (sid45147@id-45147.charlton.irccloud.com) ()
[13:57:50] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[14:00:50] *** Quits: phoe (~phoe@user/phoe) (Ping timeout: 272 seconds)
[14:01:04] *** Joins: phoe (~phoe@user/phoe)
[14:03:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:04:12] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Ping timeout: 245 seconds)
[14:04:38] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[14:05:52] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 245 seconds)
[14:06:31] <beach> Here is an interesting project suggestion: A McCLIM-based program that combines the features of `gitk' and `magit'.
[14:06:52] *** Quits: karlosz (~karlosz@5.9.160.72) (Quit: karlosz)
[14:06:54] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[14:07:17] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[14:08:05] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 244 seconds)
[14:08:10] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Client Quit)
[14:08:36] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:09:49] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[14:16:20] <beach> It could be called McGIT for example.
[14:17:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[14:18:24] <flip214> MCLIgit, spoken as "mmmhhh...clickit"
[14:24:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:32:53] <lisp123> beach: I found magit overrated, I tried replicating its 'transient' menu but found it pretty average to be honest. One of the biggest issues was that menus are not dynamically created, everything is hardcoded.
[14:33:55] <lisp123> A version with dynamic menus would be a considerable improvement. All that said, I (personally) find Magit overly complicated in its UI. Plain hydras I think are much better, with a level of nesting on the menu
[14:35:54] <beach> I guess I tend to agree.  With a tool like magit, most of the functionality is used very infrequently, and then it is hard to remember the commands to invoke that functionality.  It would be a much better solution for such a tool to use way more menus.
[14:37:03] <beach> In fact, I think McCLIM would be the perfect GUI toolkit for such a project.
[14:37:12] *** Quits: silasfox (~sbv@2001-4dd6-4b95-0-383d-e94d-aa82-1e8f.ipv6dyn.netcologne.de) (Ping timeout: 245 seconds)
[14:37:21] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[14:38:11] <lisp123> I agree
[14:39:04] *** Joins: silasfox (~sbv@2001-4dd6-4b95-0-383d-e94d-aa82-1e8f.ipv6dyn.netcologne.de)
[14:44:15] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[14:44:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[14:47:08] *** Quits: frgo (~frgo@p200300deef0cee007cf7494187de1fef.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:47:36] *** Joins: frgo (~frgo@p200300deef0cee00210c991e7a48e585.dip0.t-ipconnect.de)
[14:47:37] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 252 seconds)
[14:48:58] *** Joins: lisp123_ (~lisp123@45.86.202.23)
[14:50:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:51:17] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 245 seconds)
[14:52:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:57:42] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:57:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:04:56] *** Joins: igemnace (~ian@user/igemnace)
[15:07:09] *** Quits: jcowan (sid325434@id-325434.charlton.irccloud.com) ()
[15:07:24] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[15:08:35] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[15:09:17] *** Joins: amb007 (~a_bakic@222.134.22.93.rev.sfr.net)
[15:18:00] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[15:18:38] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[15:20:07] *** Quits: amb007 (~a_bakic@222.134.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:21:50] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:28:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[15:29:38] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[15:34:18] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:34:44] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:45:13] *** Joins: VincentVega (~user@212.241.16.18)
[15:48:22] *** Joins: random-nick (~random-ni@87.116.176.59)
[15:50:19] *** Joins: sm2n_ (~sm2n@user/sm2n)
[15:51:20] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[15:54:44] <pjb> beach: I converted http://metamodular.com/Common-Lisp/suggested-projects.html to https://gitlab.com/informatimago/cl-suggested-projects/-/tree/master and added https://gitlab.com/informatimago/cl-suggested-projects/-/blob/master/git-front-end.org ; perhaps you'd want to clone it and take it over at s-expressionists ?
[15:59:51] <pjb> beach: I added a 'Create new gitlab project' link on each suggested project page: https://gitlab.com/informatimago/cl-suggested-projects/-/blob/master/word-processor.org  to make it easy for people to do it ;-)
[16:01:20] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:02:33] <mfiano> pjb: Indeed, but I solved it. Gotta love when builtin language features make a good replacement to complex data structures (progn method combination here, well and a simple Norvig queue, too)
[16:13:57] <beach> pjb: Wow, that's impressive.
[16:14:20] <beach> Let me contemplate what to do about it.
[16:14:32] <beach> pjb: I might just let you manage it. :)
[16:15:49] <pjb> beach: but it may have a better visibility under s-expressionists; or perhaps at common-lisp.net?
[16:15:58] *** Joins: yitzi (~yitzi@172.98.105.250)
[16:18:25] <beach> I'll think about it.
[16:19:22] <beach> pjb: Thanks for doing that!
[16:22:51] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Read error: Connection reset by peer)
[16:23:16] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[16:31:55] <lotuseater> I was asked yesterday by someone new why typing in lower case in code. I said it's easier to type, that the reader nonetheless (in default readcase) transforms it to uppercase and it's more convenient. What would you answer?
[16:33:31] <beach> Lower case is easier to *read* because of the varied vertical shape of the characters.
[16:33:59] <beach> The translation to upper case is for hysterical raisins.
[16:34:30] <lotuseater> yeah, you mean historical reasons? ^^
[16:34:49] <beach> Of course.
[16:35:20] <lotuseater> I wonder how the hysterical raisins would yell at one. :)
[16:36:20] <pjb> lotuseater: early hardware (pre-computer) used 5-bit codes to encode the 26 letters, space and 5 other codes.
[16:36:46] <pjb> lotuseater: this gives you the telegraphic style where numbers and digits are spelled out and count as words.
[16:37:19] <pjb> lotuseater: then early computers added 1 bit to encode letters, digits and a few special characters.
[16:37:30] <lotuseater> some times I asked kids I was working with why the codes for A-Z are smaller than those for a-z :)
[16:38:11] <pjb> The ibm-709 character set where lisp was developped had the following charcters and encoding: "0123456789#=\"###+ABCDEFGHI%.)###-JKLMNOPQRØ'*### /STUVWXYZ±,(###" # = unassigned)
[16:38:22] <pjb> Note: digits 0-9 were encoded as codes 0-9 ;-)
[16:38:59] <lotuseater> and on telegraphs you had real backspace to make a new symbol out of two, like ⌹
[16:39:08] <pjb> 0 was also end of list, so 0 = integer 0, character 0, boolean false, and nil and ().
[16:39:24] <lotuseater> wow okay
[16:39:46] <pjb> lotuseater: and of course, they also introduced shifting codes (amongst those 5 free) to have extended character sets.
[16:39:55] <lotuseater> :)
[16:40:11] <pjb> lotuseater: 6*6 = 36 you could easily pack 6 characters in a 36-bit word or register.
[16:40:42] <pjb> Then ascii was invented which used 7-bit, plus 1 parity bit, so 8-bit and 32-bit computers became a thing.
[16:41:05] <pjb> The iso-8859-* using the full 8-bit, because ascii with national variants was a mess.
[16:41:19] <lotuseater> and how was it with certain lisp machines, they had 36 bit word length, right?
[16:41:33] <pjb> Then unicode because iso-8859 iso-2202 koi-r and big5 chinese encoding were still a mess.
[16:41:41] <lotuseater> haha yes i can imagine, a mess
[16:41:50] <pjb> And now we have a new unicode version every year, with added emojis, and it's still amess.
[16:42:16] <lotuseater> someone posted i think it was in #lispcafe a picture of a big circled chinese keyboard
[16:42:30] <lotuseater> phew yes all those ever new emojis
[16:42:39] <pjb> Do you think the martians will be able to impose a single clean computing architectures, or will they have to be compatible with Earth and Chinese base communications?
[16:42:40] <pjb> LOL
[16:42:46] <lotuseater> sure texting with it can be quite compressive
[16:42:55] <pjb> We're making a stellar mess, and soon an interstellar mess!
[16:43:21] <lotuseater> as long as it doesn't infect the multi/omniverse
[16:44:04] <duuqnd> Imagine making first contact with intelligent alien life and they take one look at our computers and just leave
[16:44:42] <pjb> well there was an early IBM chinese keyboard where you had to remember 4-decimal-digit codes for each ideogram. One chinese girl could do that for the demoes.  Then the chinese put a professor in reeducation camp, and he came with the common chinese encoding system, based on the graphical decomposition of the ideograms, which he had implemented when he was freed.
[16:44:49] <lotuseater> duuqnd: i think they would leave cause for example of the financial system madness
[16:45:34] <pjb> No, I think they would just bring the chips and beer and have a good laugh the whole evening. And then leave.  This is why there are so many UFO but so few aliens.
[16:45:43] *** Quits: witchuer (uid515958@id-515958.charlton.irccloud.com) ()
[16:45:57] *** Joins: witchuer (uid515958@id-515958.ilkley.irccloud.com)
[16:46:12] <pjb> You wouldn't say to live even a week in a zoo!  You just go there for an afternoon, fill your belly with popcorn and icecream and then bring back the children home.
[16:46:35] <lotuseater> yeah we're just for entertainment, all this unnecessary violence and hatred
[16:46:37] *** Joins: vats (~vats@180.149.226.8)
[16:47:50] <pjb> lotuseater: of course.  Gladiators, and all the violence in movies we watch.
[16:48:22] <lotuseater> but too much is still real in this world, things you don't want to even imagine
[16:48:51] <pjb> For the amusement of gods and alien visitors.
[16:49:00] <lotuseater> yes
[16:49:30] <lotuseater> but with some chosen ones they could talk "Surely we have Common Lisp too."
[16:51:58] *** Joins: Bike (~Glossina@71.69.170.70)
[16:51:58] *** ChanServ sets mode: +o Bike
[16:55:17] <lotuseater> but okay, the animal world is full of big wars, like ants vs ants or fungi vs bacteria
[16:58:40] *** Joins: semz (~none@user/semz)
[17:35:53] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:36:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:37:38] <contrapunctus> TFW Lisp talk in #lispcafe and non-Lisp talk in #commonlisp 🙃
[17:39:56] <hayley> Hey, I will have you know that my monologues on comparing snapshot-at-the-beginning and incremental update write barriers aren't exclusively Lisp talk, thankyou very much.
[17:40:54] <contrapunctus> 😁
[17:43:10] <hayley> And, well, all the interesting GC papers since...the 90s I guess seem to either cover ML (or Haskell) or Java. So...there's that.
[17:43:40] <hayley> (With the exceptions of CONS should not CONS its arguments, and An improvement to sliding garbage collection, of course.)
[17:45:31] *** Joins: keir (~keir@user/keir)
[17:47:21] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:47:51] *** Joins: didi (~user@user/didi)
[17:50:51] <jcowan> Well, I don't see no p'ints about Lisp GCs that's any better'n any other GCs.
[17:51:01] <jcowan> --not quite Mark Twain
[17:51:55] <didi> Speaking of user-extensible sequences in Common Lisp, is it possible to use SBCL's sequence protocol to implement an infinite sequence? As far as I can tell it's impossible because one needs to specialize `length'.
[17:54:31] <beach> didi: But LENGTH can signal an error if the sequence is not proper.  Then, it can also go into an infinite loop.
[17:54:39] <beach> That's conforming behavior.
[17:55:58] <didi> beach: What do you mean?
[17:57:14] <beach> didi: Try (length '#1=(a b c . #1#))
[17:57:21] <beach> That's an infinite list.
[17:57:48] <beach> You can do the same with your sequence.
[17:58:03] <beach> Or if you know that it is infinite, you can have LENGTH signal an error.
[17:58:10] <beach> clhs length
[17:58:10] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm
[17:58:20] <yitzi> didi: Do you mean the sequence protocol and make-sequence-iterator?
[17:58:30] <didi> yitzi: Yes.
[17:58:47] <didi> beach: Thanks.
[17:58:51] <beach> didi: See the "Exceptional Situations"
[17:59:24] <didi> yitzi: It seems to require a functional `length'.
[18:00:18] <yitzi> didi: make-sequence-iterator returns a 'limit' value which I don't think is interpreted just passed to endp.
[18:01:44] <didi> yitzi: Interesting. Thank you.
[18:03:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:03:49] <yitzi> didi: The spec is linked here https://shinmera.github.io/trivial-extensible-sequences/
[18:04:01] <didi> yitzi: Thank you.
[18:15:59] <Bike> the sequences protocol isn't really intended to work for infinte lists. in particular a circular list is not actually a proper sequence by clhs's definition, and some sequence functions may be written to try to take lengths beforehand (e.g. map)
[18:16:16] <didi> Bike: oic. Thank you.
[18:18:07] *** Quits: silasfox (~sbv@2001-4dd6-4b95-0-383d-e94d-aa82-1e8f.ipv6dyn.netcologne.de) (Quit: WeeChat 3.2)
[18:27:25] *** Quits: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887) (Quit: Ping timeout (120 seconds))
[18:29:06] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:29:39] *** Quits: lisp123_ (~lisp123@45.86.202.23) (Remote host closed the connection)
[18:38:04] *** Quits: duuqnd (~Duuqnd@185.201.174.78) (Ping timeout: 252 seconds)
[18:40:25] *** Joins: lisp123 (~lisp123@45.86.202.23)
[18:51:46] *** Quits: raeda_ (~raeda@72.49.219.33) (Ping timeout: 252 seconds)
[18:53:46] *** Quits: lisp123 (~lisp123@45.86.202.23) (Quit: Leaving...)
[18:57:51] *** Joins: raeda (~raeda@72.49.219.33)
[19:06:51] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[19:17:24] *** Quits: charles__ (~charles@cpe-76-186-124-165.tx.res.rr.com) (Read error: Connection reset by peer)
[19:18:06] *** Joins: charles__ (~charles@cpe-76-186-124-165.tx.res.rr.com)
[19:22:20] <lotuseater> Interesting, I found online by coincidence the list of books in the personal of Erik Naggum that were sold back in 2010.
[19:22:34] *** Quits: yitzi (~yitzi@172.98.105.250) (Remote host closed the connection)
[19:24:03] <pve> I just want to say I love "McGIT", and I hope it becomes a thing :)
[19:24:24] <lotuseater> ha yes the name has something ^^
[19:24:31] <pve> Reminds me of DrRacket, or Mr. Coffee
[19:26:28] <lotuseater> DrRacket sounds like a therapist
[19:27:45] <beach> pve: Heh, glad you like the name.
[19:27:58] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[19:52:58] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-205.prtc.net)
[19:54:31] *** Quits: lotuseater (~user@p200300e7871bf00038fb8d6cf7d8260d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:16:47] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Read error: Connection reset by peer)
[20:17:16] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[20:17:34] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 256 seconds)
[20:25:45] <beach> pjb: I am not sure how those links work.  I can click on an org link, but the links in the project list seem to go to non-existing HTML files.  What am I missing?
[20:26:35] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-205.prtc.net) (Ping timeout: 256 seconds)
[20:29:35] *** Joins: Oladon (~olad@98.43.81.226)
[20:43:06] <jcowan> Link for "McGIT"?  Dr. Google not helpful today
[20:43:56] <beach> That's good news.  It means it is not taken.
[20:45:18] <beach> https://gitlab.com/informatimago/cl-suggested-projects/-/blob/master/git-front-end.org
[20:57:10] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 240 seconds)
[21:01:09] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Read error: Connection reset by peer)
[21:01:28] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[21:12:07] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[21:12:13] *** Joins: lotuseater (~user@p200300e7871bf00038fb8d6cf7d8260d.dip0.t-ipconnect.de)
[21:22:55] *** Joins: karlosz (~karlosz@5.9.160.72)
[21:32:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:34:11] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:34:40] *** Joins: amb007 (~a_bakic@206.134.22.93.rev.sfr.net)
[21:50:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:51:18] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b008:864b:ef0a:309f:3e32:427b) (Quit: Leaving)
[21:59:42] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:59:48] *** Quits: amb007 (~a_bakic@206.134.22.93.rev.sfr.net) (Ping timeout: 244 seconds)
[22:00:13] *** Joins: amb007 (~a_bakic@254.148.22.93.rev.sfr.net)
[22:12:38] <shka> well, having graphical git graph would be alone improvement over the magit
[22:15:44] *** Quits: karlosz (~karlosz@5.9.160.72) (Quit: karlosz)
[22:16:04] *** Joins: vats (~vats@180.149.226.8)
[22:19:43] *** Quits: VincentVega (~user@212.241.16.18) (Remote host closed the connection)
[22:35:28] *** Quits: amb007 (~a_bakic@254.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:35:44] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:40:44] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[22:41:41] *** Joins: amb007 (~a_bakic@254.148.22.93.rev.sfr.net)
[22:41:42] *** Quits: amb007 (~a_bakic@254.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:41:53] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:44:14] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (Quit: No Ping reply in 180 seconds.)
[22:44:28] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[22:44:28] *** ChanServ sets mode: +o fe[nl]ix
[22:44:42] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[22:46:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[22:46:19] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:48:32] *** Joins: pjb (~pjb@user/pjb)
[22:49:23] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:50:47] *** Quits: seanw (spwhitton@debian/spwhitton) (Ping timeout: 240 seconds)
[22:51:04] *** Joins: seanw (~spwhitton@debian/spwhitton)
[22:52:04] <pjb> beach: I've corrected the links.  Thanks for the bug report. ;-)
[22:52:30] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[22:52:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:52:52] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[22:56:59] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[22:57:40] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 244 seconds)
[22:58:05] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:58:30] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:59:02] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:01:31] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[23:02:14] *** Joins: john__ (~john@dynamic-095-118-088-074.95.118.pool.telefonica.de)
[23:05:05] *** Joins: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887)
[23:08:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 244 seconds)
[23:09:16] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:09:24] *** Joins: Everything (~Everythin@37.115.210.35)
[23:09:50] *** Quits: semz (~none@user/semz) (Quit: Leaving)
[23:12:21] *** Joins: semz (~none@user/semz)
[23:13:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 256 seconds)
[23:26:08] *** Joins: akoana (~ah@user/akoana)
[23:30:07] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[23:33:14] *** Joins: raeda_ (~raeda@72.49.219.33)
[23:35:37] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 252 seconds)
[23:45:00] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Read error: Connection reset by peer)
[23:45:46] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[23:53:11] *** Parts: keir (~keir@user/keir) ()
[23:54:19] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
