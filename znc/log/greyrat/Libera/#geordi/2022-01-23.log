[09:16:56] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[15:50:04] <CarloWood> { regex re = R"()"; string str = "foo [this should[0] be matched] bar"; auto sv = f(str); SHOW(sv); } string_view f(regex const& re, string const& in) { return "foo"; }
[15:50:04] <geordi> error: conversion from 'const char [1]' to non-scalar type 'regex' {aka 'basic_regex<char>'} requested
[15:50:26] <CarloWood> { regex re = R"()"; string str = "foo [this should[0] be matched] bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string const& in) { return "foo"; }
[15:50:26] <geordi> Same error.
[15:51:02] <CarloWood> { regex re(R"()"); string str = "foo [this should[0] be matched] bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string const& in) { return "foo"; }
[15:51:03] <geordi> sv = foo
[15:53:06] <CarloWood> { regex re(R"()"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return {}; return in.substr(mr.position(), mr.length()); }
[15:53:06] <geordi> error: no matching function for call to 'regex_search(string::const_iterator, string::const_iterator, match_results<const char*>&, const regex&)'
[15:53:31] <CarloWood> { regex re(R"()"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return {}; return in.substr(mr.position(), mr.length()); }
[15:53:33] <geordi> sv = 
[15:53:46] <CarloWood> { regex re(R"()"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:53:48] <geordi> sv = 
[15:53:56] <CarloWood> { regex re(R"(should)"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:53:58] <geordi> sv = should
[15:54:18] <CarloWood> { regex re(R"(\((?>\((?<c>)|[^()]+|\)(?<-c>))*(?(c)(?!))\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:54:24] <geordi> terminated by regex_error: Invalid '(?...)' zero-width assertion in regular expression
[15:55:04] <CarloWood> { regex re(R"(\((?:[^)(]+|(?R))*+\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:55:06] <geordi> Same output.
[15:55:28] <CarloWood> { regex re(R"(\((?:[^)(]*(?R)?)*+\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:55:30] <geordi> Still same output.
[15:55:47] <CarloWood> { regex re(R"(\([^)(]*+(?:(?R)[^)(]*)*+\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:55:49] <geordi> Again, same output.
[15:56:08] <CarloWood> { regex re(R"(\((?>[^)(]+|\g<0>)*\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:56:10] <geordi> Same output.
[15:56:43] <CarloWood> { regex re(R"(\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:56:45] <geordi> sv = (this should(0) be matched)
[15:57:33] <CarloWood> { regex re(R"(\(([^()]|(?R))*\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:57:35] <geordi> terminated by regex_error: Invalid '(?...)' zero-width assertion in regular expression
[15:58:04] <CarloWood> { regex re(R"([^\(]*(\(.*\))[^\)]*)"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:58:06] <geordi> sv = foo (this should(0) be matched) bar
[15:59:47] <CarloWood> { regex re(R"(\((?>[^()]+|(?1))*\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[15:59:49] <geordi> terminated by regex_error: Invalid '(?...)' zero-width assertion in regular expression
[16:04:06] <CarloWood> { regex re(R"(\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))"); string str = "foo (this should(0) be matched) bar"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[16:04:08] <geordi> sv = (this should(0) be matched)
[16:04:31] <CarloWood> { regex re(R"(\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))"); string str = "foo (this should(0) be matched) bar (this not) ok?"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[16:04:32] <geordi> Same output.
[16:05:04] <CarloWood> { regex re(R"(\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))"); string str = "foo (this should(1 + (4 + (a - b))) be matched) bar (this not) ok?"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[16:05:06] <geordi> sv = (1 + (4 + (a - b)))
[16:05:36] <CarloWood> { regex re(R"(\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))"); string str = "foo (this should(1 + [4 + (a - b])) be matched) bar (this not) ok?"; auto sv = f(re, str); SHOW(sv); } string_view f(regex const& re, string_view const& in) { match_results<string_view::const_iterator> mr; if (!regex_search(in.cbegin(), in.cend(), mr, re)) return "no match"; return in.substr(mr.position(), mr.length()); }
[16:05:38] <geordi> sv = (this should(1 + [4 + (a - b])) be matched)
[17:38:02] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:48:21] <CarloWood> { regex rx(R"(ab)"); string const message("aaabxxxaab"); vector<int> object_starts;   std::transform(std::sregex_iterator(message.begin(), message.end(), rx), std::sregex_iterator(), std::back_inserter(object_starts), [](auto& m) { return m.position(); }); SHOW(object_starts); }
[21:48:23] <geordi> object_starts = {2, 8}
