[00:17:14] *** Quits: rotateq (~user@p200300e78715be00fdfeed040e17b750.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[00:19:38] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[00:23:07] * edgar-rft hands pjb a light bulb to illuminate the problem
[00:31:38] <pjb> lisp123: well, sometimes all the implementations are non-conforming!
[00:31:54] <pjb> I had a case recently…
[00:32:43] <lisp123> pjb: Sounds like a painful experience to debug, hope you found it pretty quick
[00:33:40] <mfiano> Well they all are non-conforming! :)
[00:33:54] <pjb> Well, it was an abstract case, but still, it's surprising to find that sometimes obvious interpretation of the CLHS are not taken by implementations.
[00:33:59] <pjb> more or less.
[00:34:14] <mfiano> Since they all derive LOOP from MIT LOOP, and I'm sure there are other conformance issues in other areas.
[00:34:33] <mfiano> SICL is non-conforming because it is not yet a CL implementation :)
[00:35:06] <pjb> mfiano: clisp has a different loop IIRC.
[00:35:10] <mfiano> Similiarly for GCL (lol)
[00:35:50] <mfiano> That's why I said probably other areas too
[00:35:53] <pjb> Yes, this is this:       (let ((last (list 1 2 3))) (tailp last (loop for list in (reverse (cons last (quote ((4 5 6) (7 8 9))))) append list))) #| --> nil |# 
[00:35:57] <pjb> they should return t.
[00:36:08] <mfiano> CLISP for example has arbitrary precision floats, which conflicts with PI being a "constant variable"
[00:36:13] <mfiano> That might be a case, not sure
[00:36:23] <pjb> 6.1.3 Value Accumulation Clauses says:
[00:36:35] <pjb> The append keyword causes its list values to be concatenated into a single list, as if they were arguments to the function append. 
[00:36:52] <pjb> but the function append doesn't copy the last list.
[00:38:22] <lisp123> Interesting - well that doesn't sound good, append is such a common operation
[00:38:50] <pjb> to get nil in a conforming case, we'd have to add an append nil: (let ((last (list 1 2 3))) (tailp last (loop for list in (reverse (cons 'end (cons last (quote ((4 5 6) (7 8 9)))))) append (if (eq list 'end) '() list)))) #| --> nil |#   but without this final '(), we must find last in the result.
[00:39:26] <mfiano> Sometimes I wish pjb would use a pastebin service. I gave up reading most of his inline unindented code a while ago :)
[00:39:26] <pjb> lisp123: we can mix append with nconc and collect, but this is not a reason.  
[00:39:44] <pjb> I stay formally in the limit: one line! 
[00:40:06] <pjb> Perhaps I should provide an erc extension to reformat sexps…
[00:40:26] <mfiano> Indentation is important for reading CL. At some point it becomes a bigger chore to parse :)
[00:40:48] <lisp123> pjb: That would be cool
[00:42:09] <lisp123> mfiano: I've become indentation-agnostic these days ;) 
[00:42:54] <lisp123> After a bit of practice, I've been putting more things on one line (but I should fix it if I ever make my code more public)
[00:43:37] <mfiano> To me code is easier to read vertically, so I don't agree with maximizing horizontal space.
[00:43:57] <mfiano> Every try reading a web page with a 300-column paragraph and lose which line you are moving to? :)
[00:44:00] <mfiano> Ever*
[00:45:55] <lisp123> Not yet, but can imagine it would happen :) These days most websites seem to limit the width, they generally caught onto good practices
[01:05:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:12:43] *** Quits: lisp123 (~lisp123@45.86.202.96) (Remote host closed the connection)
[01:13:29] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 268 seconds)
[01:16:32] *** Joins: lisp123 (~lisp123@45.86.202.96)
[01:21:19] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 252 seconds)
[01:32:02] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:35:04] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:39:16] *** Joins: santiagopim (~user@90.167.66.93)
[01:40:24] *** Joins: tophullyte (~tophullyt@68.170.104.27)
[01:56:23] *** Joins: lisp123 (~lisp123@45.86.202.96)
[02:07:36] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[02:08:26] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 245 seconds)
[02:09:50] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:30:31] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[02:31:00] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:44:40] *** Joins: lisp123 (~lisp123@45.86.202.96)
[02:48:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:48:51] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 245 seconds)
[02:54:34] *** Quits: tophullyte (~tophullyt@68.170.104.27) (Quit: Leaving)
[03:18:46] *** Joins: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com)
[03:25:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:34:16] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[03:42:40] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[03:43:29] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[03:44:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:44:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:45:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:37:26] *** Quits: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[04:43:50] <CptKirk> can you have &optional and &rest in the same arglist?
[04:47:18] <mfiano> Depends
[04:47:25] <mfiano> Is this an ordinary lambda list, or other?
[04:47:36] <CptKirk> defun?
[04:47:53] <mfiano> Yes, that uses an OLL. The answer is no, it does not make any sense to do so.
[04:50:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:53:23] <mfiano> (with (&optional a &rest b), there is no way to specify [B1, B2, ..., Bn] bindings if A is not specified. In this case have B1 serve as A. With (&rest a &optional b), there is no way to bind B without binding [A1, A2, ... An]. In this case use An for B. Or mix &key and &rest which is possible because &key are not positional parameters.
[04:53:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:55:23] <mfiano> However with destructuring-lambda-lists, or macro-lambda-lists, you can mix them, because they support a tree structure.
[04:56:19] <mfiano> method-lambda-lists are in the same category as ordinary-lambda-lists, so no there too.
[05:39:16] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[05:49:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:57:46] *** Quits: sts-q (~sts-q@212.53.219.132) (Ping timeout: 268 seconds)
[06:07:43] *** Joins: sts-q (~sts-q@212.53.219.181)
[06:32:50] <beach> mfiano: I am not sure I understand.  I do know that both &optional and &rest are allowed in ordinary lambda lists.
[06:37:15] <mfiano> Oh yes, I am mistaken. Thanks for the wakeup call.
[06:37:33] <beach> Sure.
[06:38:44] <mfiano> That is a strange API I will admit
[06:39:08] <mfiano> Especially since I usually rely on the suppliedp form of an optional parameter when I use it.
[06:39:21] <mfiano> and it must be supplied if rest is non-nil
[06:39:45] <beach> Right.
[07:04:09] *** Joins: lisp123 (~lisp123@45.86.202.96)
[07:05:54] *** Joins: selwyn (~selwyn@user/selwyn)
[07:09:12] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 265 seconds)
[07:39:49] *** Joins: lisp123 (~lisp123@45.86.202.96)
[07:44:29] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 265 seconds)
[07:46:23] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[08:04:38] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[08:07:02] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[09:00:05] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[09:15:32] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[09:19:16] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[09:37:41] *** Joins: shka (~herr@109.231.6.176)
[10:16:16] *** Joins: paule32 (~paule32@user/paule32)
[10:16:24] <paule32> hello
[10:44:16] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:46:25] <pjb> mfiano: it's not strange.  It's just some early destructuring.  (&optional first second &rest rest) vs. (&rest all) (destructuring-bind (first second . rest) all …)
[10:46:31] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:00:59] <paule32> how can i use a class as parameter in a defmethod ?
[11:01:28] <beach> Parameters are symbols, not class objects.
[11:03:11] <rotateq> paule32: you specify on what to specialize your method to: (defmethod foo ((x my-class) (y built-in-class)) ...)
[11:04:20] <rotateq> okay of course there must be for example integer, vector or something instead of the place holder built-in-class
[11:04:37] <paule32> https://dpaste.com/6U4YMVAX8
[11:05:14] <rotateq> a good convention would be wrapping symbols for constants into + :)
[11:06:13] <paule32> ok, fixed
[11:06:24] <rotateq> and most times you can have both getter and setter at once with :accessor so you can use the powerful SETF facility
[11:07:22] <paule32> why did i get argument error
[11:07:29] <rotateq> i don't know
[11:07:41] <paule32> the object to it self - int get-help ?
[11:07:50] <paule32> -t in
[11:07:55] <rotateq> I'm even not sure if this with handler-case leaves it toplevel forms.
[11:08:44] <paule32>   The generic function
[11:08:44] <paule32>   #<STANDARD-GENERIC-FUNCTION COMMON-LISP-USER::GET-HELP (1)> takes 1 required
[11:08:44] <paule32>   argument; was asked to find a method with specializers (T T)
[11:09:20] <rotateq> ah you want to instanciate a circuit?
[11:09:28] <rotateq> this is with make-instance
[11:09:57] <paule32> i get this error at compile run
[11:10:05] <paule32> not on make-instance
[11:11:18] <paule32> with get-help, i would like print out a help string (get-help circuititem)
[11:12:49] <rotateq> for the languages stuff you don't have to rely so wobbly on number associations, you can just use symbols for good expressiveness
[11:13:15] <rotateq> (defparameter *language* 'german)
[11:13:44] <paule32> ok
[11:14:30] <rotateq> or with the keyword form, what fits better
[11:16:43] <rotateq> your (defgeneric circuit ()) would imply it takes no arguments at all and may just rely on side effects
[11:18:19] <paule32> is this member neccassary
[11:18:20] <paule32> ?
[11:18:30] <rotateq> which member?
[11:18:38] <paule32> defgeneric
[11:18:58] <rotateq> no not necessarily
[11:19:30] <rotateq> the MOP handles to iniziating it automatically when defining with defmethod and it hasn't been seen before
[11:20:10] <rotateq> but it's good for having an overview in one file like "generic-functions.lisp"
[11:24:38] <White_Flame> paule32: the error is saying that get-help only expects 1 parameter, and you're giving it (T T), eg two unspecialized parameters
[11:24:44] <White_Flame> (defmethod get-help (c circuit) ...) is 2 parameters, not 1 specified parameter
[11:24:49] <rotateq> so your "member" could also have been a type specializer :)
[11:24:58] <White_Flame> it's another parentheses error
[11:25:49] <paule32> White_Flame: the idea was, to give the object name, when make-instance is done, give the instance id to this method
[11:26:15] <White_Flame> the method is a :reader, it takes 1 parameter
[11:27:20] <paule32> https://www.tutorialspoint.com/lisp/lisp_clos.htm
[11:27:28] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:27:29] <paule32> the example
[11:27:31] <paule32> ; method calculating volume   
[11:27:44] <paule32> (defmethod volume ((object box))
[11:28:08] <White_Flame> right, that's still a 1-parameter reader
[11:28:21] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[11:28:26] <mfiano> My reader was waiting until the expression was terminated
[11:28:32] <White_Flame> it's not passing an additional ID or anything
[11:29:13] <rotateq> maybe he wants using some method combination?
[11:29:44] <White_Flame> you can have as many parameters as you want with your own defgeneric, instead of reusing the builtin :reader/:writer/:accessor
[11:33:42] <paule32> (defmethod get-help ((c)) (write c))
[11:33:50] <paule32> ; in: DEFMETHOD GET-HELP "<illegal syntax>"
[11:33:50] <paule32> ;     ((C))
[11:33:51] *** Joins: nocturnal-one (~gilbert@p5492d8bb.dip0.t-ipconnect.de)
[11:34:34] <rotateq> args, again
[11:34:45] <beach> paule32: Learn to read the specification and understand the syntax. 
[11:35:05] <White_Flame> yes, you're basically trying to genetically engineer the syntax superficially
[11:35:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:36] <White_Flame> erm, genetic algo search
[11:36:54] <paule32> (get-help item)
[11:37:09] <paule32> (volume item) ; in the example
[11:37:14] <paule32> (get-help item) ; in my code
[11:37:17] <White_Flame> (get-help 'paule32)
[11:37:55] <paule32> i don't call get-help
[11:37:59] <paule32> i define it
[11:38:08] <paule32> noting else - at the moment
[11:38:15] <paule32> nothing
[11:38:17] <White_Flame> also, those are the call sites, not the definition sites
[11:38:39] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:38:50] <paule32> yes, i would show you how/what i pirate from voodoo programming
[11:39:18] <paule32> also the code from the webpage
[11:39:44] <White_Flame> (I have a voodoo3, but never programmed it)
[11:41:28] <paule32> https://dpaste.com/43U58K2A7
[12:20:23] *** Joins: ck_ (~ck@plskthx.org)
[13:33:32] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:37:36] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[14:44:27] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[14:48:06] *** Joins: selwyn (~selwyn@user/selwyn)
[14:51:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[14:58:40] *** Parts: ck_ (~ck@plskthx.org) ()
[15:09:21] *** Joins: santiago` (~user@185.124.31.61)
[15:23:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:30:04] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Ping timeout: 252 seconds)
[15:41:25] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:57:11] *** Joins: selwyn (~selwyn@user/selwyn)
[15:57:57] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[15:58:21] *** Joins: selwyn (~selwyn@user/selwyn)
[16:25:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:29:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[16:37:42] <paule32> hello
[16:37:49] <paule32> i have a fiddle:  http://tpcg.io/ZUHWAJ 
[16:38:07] <paule32> the problem is, that the error condition is not handled
[16:39:53] <Duuqnd> The division by zero is happening at read-time
[16:42:15] <Duuqnd> This is because you're not performing the action of dividing one by zero, you're creating a rational number that is one zeroth.
[16:44:08] <Duuqnd> Also, you missed a parenthesis.
[16:44:59] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:45:10] <Duuqnd> And, the handler-case doesn't have any clauses, because you put the clause inside the PROGN
[16:54:48] <Duuqnd> And you still are not formatting the parentheses properly
[17:08:52] <paule32> where should be the parens be ?
[17:11:18] <paule32> (handler-case ( (1/0) )
[17:11:18] <paule32>   (division-by-zero (c)
[17:11:18] <paule32>     (format T "Caught division by zero: ~a~%" c)))
[17:12:09] <beach> Wow.
[17:13:32] <paule32> this bring not wider, too
[17:13:38] <paule32> bring me
[17:17:13] <beach> paule32: I feel sorry for you.  But I have already spent way too much of my time helping you in the past.  When I decide to help people, it's in the hope that less help will be needed over time, and that the person will ultimately become a net contributor to the community.  I don't see that happening with you, so I must give up.
[17:18:34] <paule32> then i apologies me, net contributor? on stackoverflow ?
[17:18:46] *** Joins: Josh_2 (~user@37.25.47.130)
[17:18:50] <paule32> they can't love me there
[17:19:22] <beach> No, providing free, high-quality Common Lisp code for general use.
[17:19:24] <paule32> i don't know why, but i can't read english very well, and stack stuffers a very strict as it seems
[17:20:38] <beach> Maybe you can ask someone to translate the Common Lisp standard to German.  Perhaps that would make it easier for you.
[17:21:44] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[17:22:02] *** Joins: Josh_2 (~user@37.25.47.130)
[17:22:29] <paule32> beach: i am a person with some disadvantages, i write this to you, so i had hope you can understand my position. i will not cry again and again, ... but i am a little bit c/c++, and pascal formed, and i felt in these conventions very often as this lisp.
[17:24:06] <paule32> i know, the coding conventions have a big change since the days of lisp, so i more modern, but you all profs, wich only code with lisp, i do this in many others, so i can't know all ...
[17:28:10] <beach> I can understand your position, but unfortunately, I can't afford to spend any more time helping out.
[17:56:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:14:40] *** Quits: santiago` (~user@185.124.31.61) (Quit: ERC (IRC client for Emacs 28.0.50))
[18:16:26] *** Joins: santiago` (~user@185.124.31.61)
[18:44:32] *** Joins: thrig (~thrig@65.113.153.50)
[18:45:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:46:21] *** Quits: santiago` (~user@185.124.31.61) (Ping timeout: 245 seconds)
[18:52:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:53:30] *** Joins: santiago` (~user@185.124.31.61)
[18:57:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:04:16] *** Quits: santiago` (~user@185.124.31.61) (Ping timeout: 245 seconds)
[19:05:29] *** Joins: santiago` (~user@185.124.31.61)
[19:15:47] *** Joins: rotateq (~user@p200300e78715be00fdfeed040e17b750.dip0.t-ipconnect.de)
[19:35:18] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:05:20] *** Quits: Oladon (~olad@98.43.81.226) (Ping timeout: 250 seconds)
[20:13:41] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[20:37:34] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[20:39:13] *** Joins: minion (~minion@common-lisp.net)
[20:43:07] *** Joins: emacsoma1 (~emacsoman@136.60.128.68)
[20:47:36] *** Quits: santiago` (~user@185.124.31.61) (*.net *.split)
[20:47:36] *** Quits: shka (~herr@109.231.6.176) (*.net *.split)
[20:47:36] *** Quits: sts-q (~sts-q@212.53.219.181) (*.net *.split)
[20:47:36] *** Quits: santiagopim (~user@90.167.66.93) (*.net *.split)
[20:47:37] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[20:47:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[20:47:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:55:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[20:56:51] *** Joins: sts-q (~sts-q@212.53.219.181)
[20:59:01] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:59:15] *** Joins: paule32_ (~paule32@user/paule32)
[21:02:28] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 265 seconds)
[21:02:28] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[21:02:43] *** Joins: shka (~herr@109.231.6.176)
[21:06:51] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:06:52] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:13:24] *** Joins: sjl_ (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[21:13:27] *** Joins: bldr_ (~bull@185.117.72.168)
[21:14:29] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: bldr (~bull@185.117.72.168) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Ping timeout: 265 seconds)
[21:15:38] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:29:21] *** Joins: anddam (~anddam@user/anddam)
[21:37:23] *** Joins: selwyn (~selwyn@user/selwyn)
[21:37:38] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[21:38:03] *** Joins: selwyn (~selwyn@user/selwyn)
[21:54:33] *** Joins: tyson2 (~user@bras-vprn-toroon020aw-lp130-30-184-148-172-130.dsl.bell.ca)
[22:00:09] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[22:03:04] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:1fb3:85e4:b473:1e4)
[22:10:32] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:13:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[22:15:01] *** Quits: tyson2 (~user@bras-vprn-toroon020aw-lp130-30-184-148-172-130.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:27:40] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 260 seconds)
[22:34:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[22:36:59] *** Joins: aeth (~aeth@user/aeth)
[22:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:39:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:41:42] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:1fb3:85e4:b473:1e4) (Ping timeout: 268 seconds)
[22:58:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:00:28] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:e928:1558:13de:74e5)
[23:18:48] *** Joins: tyson2 (~user@bras-vprn-toroon020aw-lp130-30-184-148-172-130.dsl.bell.ca)
[23:21:19] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:e928:1558:13de:74e5) (Ping timeout: 252 seconds)
[23:27:08] *** Quits: tyson2 (~user@bras-vprn-toroon020aw-lp130-30-184-148-172-130.dsl.bell.ca) (Remote host closed the connection)
[23:31:07] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[23:33:32] *** Quits: madnificent_ (~madnifice@static.210.74.63.178.clients.your-server.de) (Ping timeout: 252 seconds)
[23:37:21] *** Joins: minion (~minion@common-lisp.net)
[23:37:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Read error: Connection reset by peer)
[23:38:04] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[23:41:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:42:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:43:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:47:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[23:50:51] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[23:52:24] *** Joins: minion (~minion@common-lisp.net)
