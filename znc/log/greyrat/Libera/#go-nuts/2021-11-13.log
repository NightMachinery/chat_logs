[00:04:16] *** Joins: independent56 (~independe@2.31.88.82)
[00:04:57] <b0nn> RSC on trying out generics for yourself https://twitter.com/_rsc/status/1459251833633972229
[00:05:47] <b0nn> Actually, it's a thread on him answering questions
[00:07:28] *** teasea90 is now known as teasea
[00:08:00] <b0nn> And someone linked to a go playground that is pointed to tip https://gotipplay.golang.org/
[00:10:25] *** Quits: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1) (Remote host closed the connection)
[00:11:02] <ikke> Is that different from https://go2goplay.golang.org/?
[00:11:46] <b0nn> I'm not sure to be honest - gotip implies that you're getting the bleeding edge
[00:12:34] <ikke> right
[00:13:45] *** Joins: INeedAHandle (~INeedAHan@user/ineedahandle)
[00:14:35] <fizzie> go2go was that translation tool from Go-with-generics to Go-without-generics, written for exploring the design.
[00:14:47] <fizzie> I imagine gotip's just the upcoming actual implementation of generics.
[00:14:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[00:15:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:15:33] <fizzie> https://go.googlesource.com/go/+/refs/heads/dev.go2go/README.go2go.md has some context.
[00:16:09] <b0nn> That makes the gotip one seem more attractive TBH
[00:16:20] <ikke> ahuh
[00:16:26] <foobaz> how are generics implemented? code generation at link time for detected types?
[00:16:30] <b0nn> Not just for generics, but for all the other fancy that's been added to the repo
[00:18:31] *** Joins: neurocyte0132889 (~neurocyte@94.46.73.137)
[00:18:31] *** Quits: neurocyte0132889 (~neurocyte@94.46.73.137) (Changing host)
[00:18:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:19:15] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:21:31] *** Joins: mjanssen (mpcjanssen@2a01:7e01::f03c:92ff:fe02:7c97)
[00:21:42] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 260 seconds)
[00:23:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[00:23:28] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[00:24:09] *** Joins: neurocyte0132889 (~neurocyte@94.46.73.137)
[00:24:09] *** Quits: neurocyte0132889 (~neurocyte@94.46.73.137) (Changing host)
[00:24:09] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:25:24] <lilgopher> I don't even know what generics are :D, I guess I'll have to read about them soon
[00:26:34] *** Joins: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1)
[00:26:55] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[00:27:36] <bpalmer> Paying for name-brand types is expensive, so your program insurer may push you towards using cheaper generic types which are just as effective.
[00:27:36] *** Quits: INeedAHandle (~INeedAHan@user/ineedahandle) (Quit: Textual IRC Client: www.textualapp.com)
[00:27:37] *** Joins: X-Scale` (~ARM@46.50.4.208)
[00:27:43] <ikke> :D
[00:28:19] <fizzie> I've no idea what the 1.18 implementation looks like, but there were three proposed high-level designs earlier; https://github.com/golang/proposal/blob/master/design/generics-implementation-gcshape.md is one of them, and links to the other two.
[00:28:33] <fizzie> (All three are also pretty vague on when exactly instantiations are generated.)
[00:29:08] *** X-Scale` is now known as X-Scale
[00:29:28] <fizzie> (Hopefully there's something more up to date about the ongoing implementation too, I just haven't come across any.)
[00:29:59] *** Joins: solitonmedic (~c0a80069@cpe-68-174-133-242.nyc.res.rr.com)
[00:31:16] *** Quits: solitonmedic (~c0a80069@cpe-68-174-133-242.nyc.res.rr.com) (Client Quit)
[00:34:36] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[00:41:17] <lilgopher> xD
[00:41:59] *** Quits: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a) (Ping timeout: 268 seconds)
[00:45:36] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[00:46:26] *** Joins: Fault (~Fault@150.230.39.7)
[00:50:08] <walkr> Hey there. I'm searching for the definition of "chan" keywork and I was not able to find it so far by looking at Go's repo. I did search for it and now I'm looking in the 77 pages of result.
[00:50:27] <walkr> Does anyone knows where it is defined?
[00:51:03] <KirkMcDonald> walkr: Are you looking for the implementation, or the documentation?
[00:51:51] <walkr> KirkMcDonald: implementation.. I would like to see the details of it
[00:52:29] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[00:54:03] <walkr> I understand the documentation can be found here. https://golang.org/ref/spec#Channel_types
[00:54:18] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[00:54:57] *** Joins: Fault (~Fault@150.230.39.7)
[00:56:17] <walkr> is it this one?! it doesn't seem to be https://github.com/golang/go/blob/0d0193409492b96881be6407ad50123e3557fdfb/src/go/types/chan.go
[00:56:29] <mjanssen> walkr: src/runtime/chan.go would be a start I guess
[00:57:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[00:58:12] <walkr> mjanssen: Good point! Reading. Thanks
[00:58:22] <mjanssen> interesting src folder that
[00:58:50] <KirkMcDonald> Channels are as much part of the runtime as anything, so it makes sense.
[00:59:26] <b0nn> sometimes it's a bit hard finding things that jump from the runtime to the compiler - but channels aren't one of them
[01:00:36] <mjanssen> the magic github search was "channel" :)
[01:00:52] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[01:04:23] *** Joins: alzgh (~alzgh@user/alzgh)
[01:05:05] <walkr> mjanssen: right. I've searched for "chan" and got 77 pages, that's why I decided to ask here.
[01:05:41] <walkr> Thank you guys for your help
[01:06:03] <mjanssen> yw
[01:08:35] <alzgh> I just came here to say that I see only 2 methods for the `Interface` in `container/heap`, namely `Push` and `Pop`, and don't know why the example implements `Less`, `Len` and `Swap`. As soon as I typed that out, I realized that those methods come from `sort.go`. :D
[01:09:22] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[01:10:15] <KirkMcDonald> alzgh: Yeah, it also embeds the sort.Interface interface.
[01:11:38] <alzgh> I'm new, so just to make sure I get this right. When an interface is embedded withing another interface without a variable name, it can be called directly on objects of that interface and if it has a variable the variable must be called first. Right?
[01:12:05] <KirkMcDonald> Interfaces don't have variables.
[01:13:05] <KirkMcDonald> An interface is just a set of method signatures.
[01:13:30] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Quit: Leaving)
[01:13:44] <KirkMcDonald> Embedding one interface within another adds that interface's method signatures to the current one's.
[01:13:44] <alzgh> Oh right, I confused that with embedding interfaces in structs. KirkMcDonald
[01:14:04] <alzgh> right
[01:16:38] *** Quits: teasea (~teasea@user/teasea) (Remote host closed the connection)
[01:19:48] *** Joins: teasea (~teasea@user/teasea)
[01:22:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[01:22:46] *** Quits: lilgopher (~textual@2601:241:8000:38f0:807d:c372:c18d:5d1a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:24:14] *** Joins: fikran (~fikran@user/fikran)
[01:29:07] <trewq> I am interested in implementing the following a logging a scenario:  I'm running an executable and suddenly I find a problem and I want to enable some deeper logging. I run some commands and suddenly I have  more detailed logs being recorded to my log file and then I ran another command to make it go back to normal. This is how I imagined log into work, am I on the right path?
[01:29:54] <trewq> In order for logging to work in the above matter, I will have to restart my application.
[01:30:04] <trewq> that seems to be my problem
[01:30:31] <trewq> in the way I have implented logging in the past
[01:30:54] <bpalmer> trewq: that is the way many logging packages work, but not the standard go logger
[01:31:35] <bpalmer> trewq: that is to say, the standard go log package does not have different log levels, so you don't have an option to restart with , e.g., verbose logging.
[01:32:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:32:42] <bpalmer> if you use a different log package, you might be able to, e.g., have an embedded http handler that switches a global log level
[01:33:34] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[01:34:25] <b0nn> There's also the idea of having a "debug" logger that's only running when some configuration variable has been set
[01:34:41] <b0nn> The way to set that variable seems to be the second part of the problem
[01:42:51] *** Joins: lilgopher (~textual@2601:249:8a00:6480:f08c:1939:78fd:78fa)
[01:43:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:43:50] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[01:56:18] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 265 seconds)
[01:56:24] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[01:57:11] *** Joins: Fault (~Fault@150.230.39.7)
[01:57:45] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:04:29] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[02:04:51] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Quit: Leaving)
[02:06:15] *** Joins: rickay (rickybob@gateway/vpn/protonvpn/rickybob)
[02:06:28] <trewq> thanks folks
[02:10:46] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[02:10:49] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Quit: Client closed)
[02:14:10] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[02:17:45] *** Joins: iandi (~iandi@78-56-21-61.static.zebra.lt)
[02:22:22] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[02:30:52] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:06] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:33:38] *** Quits: mikey__ (~mikey__@user/mikey/x-6463285) (Remote host closed the connection)
[02:34:11] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[02:36:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:37:54] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[02:38:41] *** Quits: independent56 (~independe@2.31.88.82) (Quit: Leaving)
[02:51:10] *** Joins: Torr_ (~Torr@user/torr)
[02:52:35] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[02:53:22] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 260 seconds)
[02:53:35] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[02:57:31] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[02:58:24] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa) (Read error: Connection reset by peer)
[03:00:04] *** Joins: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a)
[03:00:05] *** Joins: rockyh (~rockyh@user/rockyh)
[03:08:45] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:13:37] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[03:21:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:22:03] *** Quits: yonson (~yonson@2600:8801:d900:e:1e69:7aff:fea2:4e85) (Remote host closed the connection)
[03:22:17] *** Joins: yonson (~yonson@2600:8801:d900:e:1e69:7aff:fea2:4e85)
[03:25:54] *** Quits: Torr_ (~Torr@user/torr) (Quit: leaving)
[03:26:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[03:31:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[03:33:35] *** Joins: fikran (~fikran@user/fikran)
[03:38:43] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[03:39:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:40:12] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:44:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[03:45:06] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:45:49] *** Quits: normen (~normen@p200300d71739c0009543f8c757bca72e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:46:16] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Read error: Connection reset by peer)
[03:46:28] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[03:48:15] *** Quits: servytor (uid525486@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:48:57] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[03:49:33] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:50:50] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[03:50:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:55:04] <Tv_> Current level of javascript ecosystem: `error: Unknown command "make:migration". Did you mean command "make:migration"?`
[03:55:26] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[03:56:48] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:01:27] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:05:52] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:09:51] *** Quits: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1) (Remote host closed the connection)
[04:11:01] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[04:11:29] *** Joins: normen (~normen@p200300d71739c000ed997b0e6dfe883b.dip0.t-ipconnect.de)
[04:11:35] *** Quits: Praise (~Fat@user/praise) (Quit: Vado a fare qualcosa di utile.)
[04:11:43] *** Quits: dalan62367 (~dalan@203.214.91.172) (Quit: dalan62367)
[04:13:54] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Quit: Bouncer Surgery)
[04:14:26] *** Joins: Praise (~Fat@user/praise)
[04:16:59] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[04:17:54] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[04:18:10] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[04:19:34] *** Joins: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de)
[04:19:34] *** Quits: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de) (Changing host)
[04:19:34] *** Joins: menace (~someone@user/menace)
[04:22:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:27:40] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[04:29:59] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[04:30:32] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:41:18] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:44:28] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:45:29] *** Joins: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1)
[04:45:39] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:45:51] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:50:56] *** Quits: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1) (Ping timeout: 245 seconds)
[04:52:18] *** Joins: iateadonut (~dan@121.177.17.154)
[04:53:19] <lilgopher> should I wrap an error multiple times with "errors.Wrap()" or should I check somehow if an error has been already wrapped and if so use "errors.WithMessage()" instead? I've read somewhere that wrapping multiple times is redundant
[04:54:09] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:55:16] <iateadonut> i've got a wallet seed as an .env variable.  it's handy as i'm using a test network.
[04:55:16] <iateadonut> however, i'd like to deploy the binary without using an .env file, at least not with the wallet seed in it.  but i'd also like to keep the code in a git repo and not accidentally commit the wallet seed.  any idea how i can do that?
[04:56:27] <iateadonut> so, something like: set a constant, but only if the .env variable doesn't exist, and get the constant from a file that will be in the .gitignore
[04:58:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:01:57] <fizzie> I tend to just default to fmt.Errorf's special %w formatting verb. It does something very much along the lines of `errors.WithMessage`, though not exactly.
[05:02:38] <b0nn> The multiple errors being wrapped sounds like - the error isn't really being handled at all
[05:05:15] <lilgopher> I just have a couple of layers and I want to handle it after it propagates
[05:05:40] <lilgopher> the default %w is ok, errors.Wrap gives me the position where it happened
[05:06:27] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:07:00] <fizzie> Well, the position where the *wrapping* happened. Most of the time that's just the `if err != nil` statement immediately following one of the calls of the stack of the wrapped error, which I imagine is what whoever said it's "redundant" meant.
[05:11:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[05:22:24] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:22:36] <iateadonut> for anyone interested, this is easy enough: my tests are the only thing that actually use .env; all pertinent functions are in their own package.  so i can just create two programs, one for staging and one for live, each that simply have constants, and have a .gitignore main.go in the live one, and be able to share the staging one if i need
[05:23:21] <lilgopher> I just found this in the std library(in errors.Unwrap(err error)) and my mind stopped working "u, ok := err.(interface{ Unwrap() error })"
[05:23:37] <lilgopher> / Unwrap returns the result of calling the Unwrap method on err, if err's
[05:23:37] <lilgopher> / type contains an Unwrap method returning error.
[05:23:55] <lilgopher> interesting how they checked if err contains an Unwrap method
[05:23:58] <iateadonut> (for a second, i thought your mind stopped working becuase the function asked "u ok?"
[05:24:27] <lilgopher> xD
[05:27:01] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[05:32:42] <mikoto-chan> is it a goof habit to declare `var err error` at the top of your main function to avoid scope confusion when declaring already initialized variables as is the case `foo, err = bar()`?
[05:32:45] <mikoto-chan> good*
[05:34:59] <Tv_> lilgopher: you shouldn't be using github.com/pkg/errors anymore, error wrapping is part of stdlib now
[05:35:06] *** Quits: normen (~normen@p200300d71739c000ed997b0e6dfe883b.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:36:01] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[05:39:05] <lilgopher> I guess you folks are right, as long as the messages I use are unique I dont really need a stack trace
[05:39:10] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:40:55] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[05:41:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[05:42:21] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[05:42:56] *** Joins: fikran (~fikran@user/fikran)
[05:44:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[05:46:25] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Read error: Connection reset by peer)
[05:53:05] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 256 seconds)
[05:55:38] *** Joins: normen (~normen@p200300d71739c000ed997b0e6dfe883b.dip0.t-ipconnect.de)
[05:55:52] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:58:13] *** Quits: lilgopher (~textual@2601:249:8a00:6480:f08c:1939:78fd:78fa) (Quit: Textual IRC Client: www.textualapp.com)
[06:00:27] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[06:00:59] *** Quits: normen (~normen@p200300d71739c000ed997b0e6dfe883b.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[06:03:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[06:05:03] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[06:11:45] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:15:33] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:16:22] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[06:22:02] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[06:23:21] *** Joins: marlinc (~marlinc@user/marlinc)
[06:25:35] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[06:29:15] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:33:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[06:34:04] <iateadonut> i've got an error.  i have constants in another file in the main package.  when i compile, i can run the binary, but when i do "go run main.go" i get undefined CONSTANT errors
[06:35:52] <bpalmer> list the other file, too, if you're listing filenames
[06:36:09] <bpalmer> or do 'go run' with no filenames
[06:36:24] <iateadonut> d'oh!  thanks.
[06:36:36] <iateadonut> (i was doing go run main*go as if i were trying to execute tests...)
[06:43:58] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:44:12] *** Joins: cskr (~cskr@49.207.217.118)
[06:46:17] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:46:28] *** Joins: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de)
[06:48:13] *** Joins: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1)
[06:49:51] *** Quits: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1) (Remote host closed the connection)
[06:50:40] *** Quits: krux02 (~krux02@p54932086.dip0.t-ipconnect.de) (Quit: Leaving)
[06:50:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[06:51:21] *** Quits: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:54:19] *** Joins: lilgopher (~textual@2601:241:8000:38f0:f03f:654:e769:8104)
[06:56:46] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[06:56:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:58:40] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[06:59:35] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[06:59:41] <iateadonut> i have my constants in two files now, one constants.go and constants_staging.go... i'm wondering if i can do something in staging like if CONST doesn't exist, then define constants?
[06:59:54] *** Joins: mickey8 (~user@user/mickey)
[07:01:39] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:04:45] <bpalmer> you might use build tags
[07:05:36] <bpalmer> or, rather than using constants, use vars, set from some config machinery
[07:06:21] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:13:13] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:15:25] *** Joins: bindu (~bindu@user/bindu)
[07:15:38] *** Quits: cskr (~cskr@49.207.217.118) (Quit: Leaving)
[07:18:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:22:16] *** Joins: darkapex (~darkapex@user/darkapex)
[07:23:34] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 260 seconds)
[07:31:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:32:35] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:36:13] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:38:38] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:39:16] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[07:39:56] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:40:07] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[07:43:54] <iateadonut> build tags sounds smart
[07:47:48] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:50:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[07:52:17] *** Joins: fikran (~fikran@user/fikran)
[07:52:39] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:54:42] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[07:55:21] *** Joins: arinov (~arinov@213.194.126.155)
[07:56:32] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[07:56:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:01:09] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:03:10] *** Joins: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1)
[08:08:11] *** Quits: internut (~internut@2601:280:4e00:7b70:e4b3:c254:8260:7bf1) (Ping timeout: 264 seconds)
[08:08:50] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[08:09:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:09:48] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[08:14:04] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:18:43] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:25:41] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:27:49] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[08:31:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[08:33:00] *** Joins: internut (~internut@2601:280:4e00:7b70:11a9:3a99:1a12:9bb1)
[08:34:20] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[08:37:36] *** Quits: internut (~internut@2601:280:4e00:7b70:11a9:3a99:1a12:9bb1) (Ping timeout: 245 seconds)
[08:46:19] *** Joins: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e)
[08:48:13] *** Joins: dalan62367 (~dalan@203.214.91.172)
[08:48:52] *** Joins: mohan43u (~mohan@user/mohan43u)
[08:50:56] *** Quits: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e) (Ping timeout: 245 seconds)
[08:51:08] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[08:53:02] *** Quits: batdog (batdog@lnsq.elkins.co) (Quit: Bye)
[08:54:59] *** Joins: batdog (~batdog@lnsq.elkins.co)
[08:55:42] *** Joins: jpw (~jpw@user/jpw)
[08:58:15] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 265 seconds)
[08:58:22] *** Joins: mohan43u (~mohan@user/mohan43u)
[09:00:06] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[09:02:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:03:29] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 256 seconds)
[09:06:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:11:29] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:11:32] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 240 seconds)
[09:13:19] *** Joins: analoq (~yashi@user/dies)
[09:15:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:18:05] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:20:36] *** Parts: iateadonut (~dan@121.177.17.154) ()
[09:26:49] *** Joins: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de)
[09:29:06] *** Joins: jbauer (~jbauer@146.71.11.98)
[09:29:29] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[09:31:35] *** Quits: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[09:32:54] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[09:34:00] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[09:42:56] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[09:44:16] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[09:46:00] *** Joins: Atque (~Atque@user/atque)
[09:52:15] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[09:55:53] *** Joins: cation21 (cation@user/cation)
[09:57:06] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[09:59:10] *** cation21 is now known as cation
[09:59:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:01:38] *** Joins: fikran (~fikran@user/fikran)
[10:08:34] *** Joins: mei3 (~mei@user/mei)
[10:08:42] *** mei3 is now known as mei
[10:13:07] *** Parts: mikey__ (~mikey__@user/mikey/x-6463285) (WeeChat 3.3)
[10:15:36] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[10:27:21] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[10:31:40] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:34:42] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[10:35:31] *** Quits: amolith (~amolith@nixnet/founder/amolith) (Read error: Connection reset by peer)
[10:35:56] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[10:38:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:41:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:44:15] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:44:27] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:46:18] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[10:48:12] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:50:30] *** Joins: keyke (~qi@user/keyke)
[10:52:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[10:53:17] *** Joins: mrig (~AdiIRC@user/mrig)
[10:53:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:56:01] <keyke> when we gonna fix the world?
[10:58:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[11:09:54] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 260 seconds)
[11:12:12] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:12:14] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 260 seconds)
[11:23:54] *** Joins: amolith (~amolith@nixnet/founder/amolith)
[11:28:53] *** Joins: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e)
[11:28:58] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[11:30:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[11:33:23] *** Quits: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e) (Ping timeout: 264 seconds)
[11:35:47] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 264 seconds)
[11:38:32] *** Joins: darkapex (~darkapex@user/darkapex)
[11:41:26] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Remote host closed the connection)
[11:42:18] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:42:26] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[11:42:40] *** Joins: mickey8 (~user@user/mickey)
[11:44:00] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:48:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[11:52:16] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[11:52:52] *** Joins: Everything (~Everythin@37.115.210.35)
[11:52:56] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[11:54:20] *** Joins: bango (~bango@80.255.7.101)
[11:55:36] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Remote host closed the connection)
[11:56:26] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:57:17] *** Quits: keyke (~qi@user/keyke) (Quit: keyke)
[11:58:43] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[11:59:53] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:04:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[12:06:42] *** Quits: bango (~bango@80.255.7.101) (Quit: Leaving)
[12:09:25] *** Joins: oxum (~oxum@122.172.47.114)
[12:09:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[12:10:59] *** Joins: fikran (~fikran@user/fikran)
[12:12:11] *** Joins: bango (~bango@80.255.7.101)
[12:14:11] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 264 seconds)
[12:14:42] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:19:08] <mickey8> im writing an api (like the server, not the client) with http endpoints, and id like to cache the results for some endpoints, so the i dont have to query a database with expensive queries multiple times in a short period of time
[12:19:21] <mickey8> what would be your approach for this?
[12:19:31] <b0nn> nosql
[12:19:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[12:19:40] <mickey8> how is that even related
[12:19:44] <Fault> redis
[12:20:10] <b0nn> NoSQL is the set of datastores that are NOT RDBMS
[12:20:20] <mickey8> i know what nosql is
[12:20:54] <b0nn> They tend to have fast lookup for simple queries (O(1), with axost for hashing) vs O(log n) for RDBMS
[12:21:13] <b0nn> I mean, if you *know* what it is, why so flipant
[12:21:22] <b0nn> or, do you just know the word
[12:22:16] <mickey8> because i asked about how to cache answers to an api request, less about what are the options to replacing the whole database (why'd you assume i'm working with relational db?)
[12:22:35] <b0nn> " query a database "
[12:22:41] <mickey8> that was an example.
[12:22:44] <b0nn> ..
[12:22:46] <ikke> mickey8: They are not mutually exclusive
[12:22:51] <mickey8> i also have to look through files, for example
[12:22:52] <b0nn> look, best of luck with your project
[12:23:39] <mickey8> b0nn you just chose to stick to one single word that is the least significant in my question
[12:23:57] <b0nn> and you chose to argue like a child
[12:24:33] <mickey8> let me rephrase my question then, i want to cache the results of some time consuming function that would give the same answer every hour and the next hour would possibly change
[12:24:46] <Fault> use redis
[12:24:49] <b0nn> as I already said, best of luck with your project
[12:24:55] <b0nn> please don't tag me again.
[12:31:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:32:54] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:36:33] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[12:44:00] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[12:45:04] *** Quits: justicefries (sid26447@tinside.irccloud.com) (Ping timeout: 256 seconds)
[12:45:04] *** Quits: seds (sid492514@user/seds) (Ping timeout: 256 seconds)
[12:45:04] *** Quits: itok_ (sid418430@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[12:45:19] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:46:36] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[12:47:49] *** Joins: itok_ (sid418430@ilkley.irccloud.com)
[12:47:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:48:13] *** Joins: seds (sid492514@user/seds)
[12:48:47] <j416> mickey8: put a CDN in front of your service, and/or in-memory cache (that'd of course be per-instance), and/or something shared (i.e. database); I don't know about redis and friends vs. e.g. postgres; both are plenty fast
[12:49:01] *** Joins: justicefries (sid26447@tinside.irccloud.com)
[12:49:01] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[12:49:19] *** Quits: maxamillion (sid276220@ansible/staff/maxamillion) (Read error: Connection reset by peer)
[12:49:27] *** Joins: maxamillion (sid276220@ansible/staff/maxamillion)
[12:49:32] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Max SendQ exceeded)
[12:49:35] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:49:35] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[12:49:35] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: Manouchehri (sid384576@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[12:49:50] *** Joins: Pent (sid313808@lymington.irccloud.com)
[12:49:58] *** Joins: wangledorf (sid505185@ilkley.irccloud.com)
[12:50:11] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[12:50:11] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[12:50:31] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[12:50:42] *** Joins: obviyus (sid415299@user/obviyus)
[12:50:44] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 256 seconds)
[12:50:51] *** Joins: Manouchehri (sid384576@hampstead.irccloud.com)
[12:51:17] *** Quits: derfj (sid19429@tinside.irccloud.com) (Ping timeout: 256 seconds)
[12:52:10] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[12:52:21] *** Joins: r0bby (r0bby@user/r0bby)
[12:52:34] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[12:53:29] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[12:53:33] *** Joins: pl (sid98063@helmsley.irccloud.com)
[12:53:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:54:18] *** Quits: r0bby (r0bby@user/r0bby) (Max SendQ exceeded)
[12:54:59] *** Joins: derfj (sid19429@tinside.irccloud.com)
[12:56:24] *** Quits: kubblai (sid478659@fedora/kubblai) (Ping timeout: 256 seconds)
[12:56:47] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 264 seconds)
[12:56:58] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 256 seconds)
[12:58:11] *** Joins: obviyus (sid415299@user/obviyus)
[12:58:25] *** Joins: r0bby (r0bby@user/r0bby)
[12:59:26] *** Joins: bw (sid2730@user/betawaffle)
[12:59:33] *** Joins: kubblai (sid478659@fedora/kubblai)
[13:01:38] <novns> mickey8, ignore b0nn, he loves trolling
[13:01:55] <novns> mickey8, redis would be ok
[13:02:44] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:07] <b0nn> Seems like everyopne is interpreting the question in the same way.
[13:04:32] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:05:49] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[13:09:25] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:10:38] *** Quits: batdog (~batdog@lnsq.elkins.co) (Quit: Bye)
[13:11:01] *** Joins: batdog (batdog@lnsq.elkins.co)
[13:15:01] *** Quits: bango (~bango@80.255.7.101) (Quit: Leaving)
[13:20:34] *** Joins: oxum (~oxum@122.172.47.114)
[13:20:44] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:21:10] <seebs> mickey8, b0nn's answer was exactly right. the canonical way to handle caching is to use some kind of nosql/cache server. this does not *replace* your database. you check the cache for an already existing answer, otherwise you build the answer however you normally would, possibly involving a real database.
[13:21:31] <seebs> so, yes, nosql tools, such as redis, are probably the right tool for that.
[13:23:57] <seebs> that said i'd also suggest double-checking that the database queries aren't slow for stupid reasons
[13:24:20] <seebs> i once saw a thing that had a caching layer because queries were slow, by the time i saw it they took up to 45 seconds for a single query, and multiple queries could just bog down the server to multiple minutes
[13:24:27] <seebs> so we added an index and it was around 10-100ms after that
[13:24:48] <seebs> note that there was a caching layer, and then someone bumped the timeout on the caching layer
[13:25:03] <seebs> before anyone thought "hey should we be indexing on this weird query into a json blob column"
[13:25:33] <novns> seebs, the problem with b0nn's answer is he assumes out of nothing that mickey8 confuses nosql with relational databases
[13:25:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[13:25:35] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 264 seconds)
[13:25:56] <seebs> i don't think he does, because mickey8 says
[13:26:03] <seebs> > because i asked about how to cache answers to an api request, less about what are the options to replacing the whole database (why'd you assume i'm working with relational db?)
[13:26:10] <novns> seebs, and then he start arguing with haughty and arrogant tone
[13:26:27] <seebs> and that seems to imply that he's confused in the direction of "thinking that the answer was advice to replace his database layer, rather than an answer to how to do caching"
[13:26:28] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:27:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[13:28:04] <seebs> i mean, b0nn can be a bit prickly sometimes, but in this case, definitely not trolling, his answer was correct, and was substantially the same answer Fault gave, and basically comparable to j416's.
[13:28:12] <novns> seebs, it's not the first time b0nn acts this way, and he got this reputation of a troll
[13:28:37] <novns> and he rarely helps actually
[13:28:53] <novns> he's just arguing about some terms
[13:29:04] <seebs> i think i literally had a fight with b0nn the first day they were in this chat, and i thought that for a while, but then i actually paid attention, and decided that they're sorta prickly but actually pretty good and know what they're talking about
[13:30:00] <seebs> what is a good approach to caching results for some endpoints? a nosql database is usually a good fit because they tend to have better lookup times for simple cases and often have expiration-type features built in. redis is one such tool. it's a good fit for the job.
[13:30:20] <j416> knowledgeable or not; that's not an argument for breaking code of conduct.
[13:30:20] <novns> in my opinion he often speaks about things he have very little experience
[13:30:28] <seebs> seems like a solid answer. i don't dispute that b0nn can be prickly and get snarky with people, but this is definitely one of the cases where the answer is straightforwardly good.
[13:30:41] <j416> s/argument/justification/
[13:30:54] <seebs> oh, i agree that it's not a good argument for breaking code of conduct, but i'd say that calling someone a troll because they're a bit fighty is also a violation, really.
[13:31:39] <seebs> mho, b0nn's been making a real effort to improve in things and be polite and withdraw from conversations rather than getting in shouting matches, which is a great skill to develop and one nearly all of us will someday need
[13:31:46] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[13:32:02] <seebs> source: i was that fighty once. it's been a long road.
[13:33:24] <mickey8> let it go guys, b0nn is okay, he helped me here before as well. maybe i didn't understand him completely and maybe he just had a busy day.
[13:33:32] <novns> seebs, some newcomers come here with their questions, they meet b0nn who tells them "you should better educate yourself"
[13:33:36] <novns> and they go away
[13:34:03] <seebs> That is a valid concern to bring up, I guess, but I don't think it happened here.
[13:34:53] <novns> it happened to my for example, but I just put him in ignore list
[13:34:58] <novns> *to me
[13:35:02] <seebs> I've found that, when I ask questions, b0nn often has good answers, and sometimes really interesting answers. And sometimes they don't know and try to make educated guesses and tell me that's what they're doing, and I'm fine with htat too.
[13:35:30] <novns> dixi
[13:35:37] <seebs> I originally wrote them off because we had a really bad first interaction, but I tend to watch people occasionally over time because most people are better than their worst days.
[13:37:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:38:19] <dostoyevsky2> I've also found b0nn's answer very helpful when being new to Go (which isn't too long ago)
[13:42:08] <dostoyevsky2> Slightly off-topic, but I noticed that there was this divide between NoSQL and RDBMS but then RDBMS devs realized that NoSQLs make a good data store..  So many modern RDBMs are based on e.g. LevelDB/S3 (S3 e.g. with Redis for caching) ... So they've become more of a useful primitive in modern RDBMs development (E.g. Snowflake DB/Redshift/ and recently Verticat too are based on k/v stores)
[13:42:17] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:51:53] <novns> dostoyevsky2, even oracle have bough out Berkeley DB and now sells it with a less permissive license
[13:52:30] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[13:52:54] <novns> you can pay for their commercial license or you have to publish your code
[13:53:27] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[13:55:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:55:08] <novns> or use it privately without any network communications in your code
[13:57:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:59:46] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[14:00:07] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:03:00] *** Joins: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e)
[14:05:42] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[14:07:11] *** Quits: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e) (Ping timeout: 245 seconds)
[14:11:29] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[14:12:36] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:12:47] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:16:27] *** Joins: independent56 (~independe@2.31.88.82)
[14:16:50] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:17:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[14:18:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[14:19:13] *** imm__ is now known as imm_
[14:20:20] *** Joins: fikran (~fikran@user/fikran)
[14:26:06] *** Joins: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de)
[14:30:25] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:30:31] *** Quits: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[14:34:24] <egy> if i've two struct types t1 and t2, where t2 differs only by an additional field. how do i convert a variable of type t2 to t1 ?
[14:34:27] <egy> example: https://play.golang.org/p/Ut0Vlo4KJ_g
[14:35:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[14:37:49] <ikke> I don't think that's possible to do directly
[14:39:06] <demsh> explicitly https://play.golang.org/p/7z2JMdlg8GI
[14:40:21] <egy> i thought that as well. thanks ikke and demsh
[14:40:27] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[14:41:18] *** Joins: noxim (~noxim@user/noxim)
[14:43:25] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Remote host closed the connection)
[14:43:30] <ikke> You probably can do something with unsafe operations, but I would not go there
[14:46:21] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[14:46:30] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[14:48:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:53:26] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[14:57:54] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 268 seconds)
[15:00:11] *** Joins: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de)
[15:00:40] *** Joins: noxim95 (~noxim@user/noxim)
[15:01:35] *** Quits: crazymax (~crazymax@user/crazymax) (Quit: Bye!)
[15:02:04] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[15:03:56] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 256 seconds)
[15:05:34] <egy> i would not either
[15:11:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:13:12] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[15:18:34] *** Joins: arinov (~arinov@178.240.135.64)
[15:19:31] *** Joins: bindu (~bindu@user/bindu)
[15:21:24] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:25:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[15:35:10] *** Joins: oxum (~oxum@122.172.47.114)
[15:36:08] *** Quits: caubert (~caubert@136.244.111.235) (Quit: WeeChat 3.2)
[15:37:12] *** Joins: caubert (~caubert@136.244.111.235)
[15:38:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:40:06] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 260 seconds)
[15:42:36] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[15:48:13] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:51:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:53:26] *** Quits: yonson (~yonson@2600:8801:d900:e:1e69:7aff:fea2:4e85) (Ping timeout: 245 seconds)
[15:54:35] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:54:44] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:55:06] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[15:59:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[16:03:47] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[16:09:48] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[16:11:35] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:11:48] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:1540:5021:16c3:8fd5)
[16:14:16] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:16:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[16:27:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[16:28:47] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:29:41] *** Joins: fikran (~fikran@user/fikran)
[16:30:32] *** Quits: independent56 (~independe@2.31.88.82) (Remote host closed the connection)
[16:30:45] *** Joins: independent56 (~independe@2.31.88.82)
[16:33:25] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[16:35:34] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[16:36:56] *** Quits: independent56 (~independe@2.31.88.82) (Ping timeout: 265 seconds)
[16:38:29] *** Joins: independent56 (~independe@2.31.88.82)
[16:39:49] *** Joins: feuerrot (~feuerrot@shells.chaosdorf.de)
[16:45:13] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:45:48] *** Joins: internut (~internut@98.38.226.136)
[16:49:18] *** Quits: arinov (~arinov@178.240.135.64) (Ping timeout: 256 seconds)
[16:49:51] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[16:50:19] *** Quits: henry40408 (~henry4040@112-104-129-195.adsl.dynamic.seed.net.tw) (Quit: Ping timeout (120 seconds))
[16:54:15] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:57:34] *** Quits: internut (~internut@98.38.226.136) (Ping timeout: 260 seconds)
[17:00:29] *** Joins: henry40408 (~henry4040@112.104.114.35)
[17:01:27] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:06:17] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[17:17:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:22:06] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:22:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[17:33:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:37:29] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:37:34] *** Quits: noxim95 (~noxim@user/noxim) (Quit: Ping timeout (120 seconds))
[17:38:01] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[17:38:06] *** Joins: noxim95 (~noxim95@user/noxim)
[17:38:47] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 264 seconds)
[17:38:48] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[17:40:44] *** Joins: Atque (~Atque@user/atque)
[17:41:31] *** Joins: internut (~internut@98.38.226.136)
[17:41:42] *** Quits: independent56 (~independe@2.31.88.82) (Ping timeout: 265 seconds)
[17:46:46] *** Quits: internut (~internut@98.38.226.136) (Ping timeout: 245 seconds)
[17:49:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:50:03] <HisShadow_> is there a way to make http.Request write method not write User-Agent: Go-http-client/1.1 if there's no user-agent in the request?
[17:51:43] <fizzie> Set it to blank explicitly, and it won't be sent.
[17:52:02] <fizzie> https://cs.opensource.google/go/go/+/master:src/net/http/request.go;l=625;drc=4d8db00641cc9ff4f44de7df9b8c4f4a4f9416ee "Use the defaultUserAgent unless the Header contains one, which may be blank to not send the header."
[17:52:47] <HisShadow_> oh, didn't see that, thanks
[17:53:22] <fizzie> (I don't think it's mentioned in the documentation.)
[17:54:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[17:54:45] *** Joins: Nspace (~Nspace@user/nspace)
[17:59:32] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[18:00:06] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[18:05:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:09:08] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[18:10:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[18:11:33] *** Quits: rickay (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: rickay)
[18:12:43] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[18:15:13] *** Joins: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e)
[18:18:49] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[18:20:13] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[18:23:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:24:41] *** Quits: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e) (Ping timeout: 245 seconds)
[18:28:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[18:29:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:34:20] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:35:45] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:36:10] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1007.inf6.spectrum.com)
[18:36:50] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:36:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[18:37:19] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:37:22] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:38:31] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:39:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:39:02] *** Joins: fikran (~fikran@user/fikran)
[18:40:24] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:44:47] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[18:44:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[18:45:30] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1007.inf6.spectrum.com) (Ping timeout: 265 seconds)
[18:52:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:57:14] *** Joins: mrig (~mrig@user/mrig)
[18:57:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[18:58:16] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:00:21] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[19:04:39] *** Joins: independent56 (~independe@2.31.88.82)
[19:06:49] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:07:29] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Remote host closed the connection)
[19:09:55] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:12:06] *** Quits: noxim95 (~noxim95@user/noxim) (Quit: Client closed)
[19:13:38] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:14:16] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[19:14:50] *** Joins: yonson (~yonson@2600:8801:d900:e:1e69:7aff:fea2:4e85)
[19:14:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[19:18:00] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[19:18:09] *** Joins: ItsNotGoodName02 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[19:18:11] *** Joins: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e)
[19:18:23] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 264 seconds)
[19:23:43] *** Quits: internut (~internut@2601:280:4e00:7b70:5da:dee2:ffb6:f70e) (Quit: Leaving...)
[19:24:28] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:27:56] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:32:29] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[19:33:02] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[19:33:18] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[19:33:25] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:33:59] *** Quits: ItsNotGoodName02 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[19:35:05] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[19:35:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:37:05] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:38:09] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[19:39:17] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:43:51] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[19:45:09] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:47:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:50:12] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[19:55:24] *** Joins: Atque (~Atque@user/atque)
[19:56:14] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[19:56:18] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[19:58:19] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:58:29] <rawtaz> sup peeps
[19:58:33] <rawtaz> this fine weekend
[19:58:36] <rawtaz> of yours
[19:58:40] *** Joins: mickey8 (~user@user/mickey)
[20:04:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:08:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[20:08:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:10:07] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:10:16] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[20:11:37] *** Joins: Atque (~Atque@user/atque)
[20:13:03] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[20:13:24] *** Joins: mickey8 (~user@user/mickey)
[20:14:12] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[20:14:33] *** Joins: jla (~jordi@64.225.79.195)
[20:16:49] *** Joins: rednul (~textual@098-127-178-044.biz.spectrum.com)
[20:24:45] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[20:28:25] <leitz> I'm not getting interfaces. Why do lines 23-28 in interface_test.go produce the error?   https://gist.github.com/LeamHall/761103f5ef95bcb4b454618d15a6f98c
[20:28:52] *** Joins: Ergo^ (~ergo@91.238.59.144)
[20:31:40] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[20:34:19] <ikke> (Namer method has pointer receiver)
[20:35:45] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[20:36:05] <ikke> leitz: You need to call the method on a pointer to person/system
[20:36:23] <ikke> p := &person{name: "Al"}
[20:36:25] <ikke> for example
[20:36:27] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:39:06] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:39:48] <leitz> ikke, hmmm....removing all pointer annotation to the recievers means I can remove the & from d := person { name: "Wilbur" } The other tests passed with the pointers.
[20:41:01] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[20:41:16] <fizzie> The reason why the other tests pass is because a call like `s.Namer()` is rewritten to `(&s).Namer()` if `s` is addressable, the type of `s` is `T`, and the type `*T` has a method that could be called.
[20:41:40] <fizzie> But that's a syntactical shorthand for *calling* a method; it doesn't make the type `T` implement an interface.
[20:42:16] <fizzie> https://golang.org/ref/spec#Calls "If x is addressable and &x's method set contains m, x.m() is shorthand for (&x).m()."
[20:43:15] <leitz> Hmmm...yup. Put the * and & back in, and it all works.
[20:43:21] <leitz> Guess I have a lot more to learn.
[20:46:12] <fizzie> And in terms of the method sets of types (which is what determines if a type implements an interface), there's an asymmetry in that `func (x T) Method()` is part of the method sets of both `T` and `*T` (so you can call methods defined with a non-pointer receiver on a pointer value), but `func (x *T) Method()` is only in the method set of `*T`.
[20:46:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[20:48:24] *** Joins: fikran (~fikran@user/fikran)
[20:51:35] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[20:52:09] *** Joins: ugjka (~ugjka@ugjka.net)
[20:52:30] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Read error: Connection reset by peer)
[21:00:30] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:01:42] *** Joins: fub (uid190747@ilkley.irccloud.com)
[21:06:09] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[21:09:24] *** Joins: pepee (~pepee@user/pepee)
[21:11:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:11:52] *** Joins: bindu (~bindu@user/bindu)
[21:17:14] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:22:25] *** Quits: jcajka (~jcajka@ip-86-49-254-207.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[21:30:34] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[21:32:01] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:36:51] *** Joins: Torr_ (~Torr@user/torr)
[21:36:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[21:37:53] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:42:02] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[21:42:15] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[21:42:23] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Client Quit)
[21:42:43] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[21:43:06] *** Joins: nehsou^ (~nehsou@h50.174.139.63.static.ip.windstream.net)
[21:45:07] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[21:46:18] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[21:46:55] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: rickybob)
[21:47:48] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[21:47:51] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 250 seconds)
[21:49:30] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[21:49:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:50:35] *** Joins: c10l (~c10l@user/c10l)
[21:51:13] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[21:53:12] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[21:55:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[21:58:50] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 265 seconds)
[22:00:29] *** Joins: Fault (~Fault@150.230.39.7)
[22:02:40] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[22:03:24] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[22:06:00] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:08:17] <rawtaz> so, what's the actual point of := instead of var, considering that := is only available inside functions and that they just mkae for slightly fewer characters?
[22:09:25] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[22:14:27] *** Quits: strubbl891941988 (~strubbl@ipb21a9322.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[22:14:46] <dragonmaster> implicit typing
[22:14:56] <fizzie> That's a thing also with `var`.
[22:15:23] <fizzie> But := qualifies as a "simple" statement, so you can use one as a part of an if/switch/for statement.
[22:15:53] *** Joins: strubbl891941988 (~strubbl@ipb21a9322.dynamic.kabel-deutschland.de)
[22:16:16] <fizzie> And it has that combined "declare some variables and assign some others" feature, if you count that as a positive, though it can be a little confusing too.
[22:25:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[22:25:59] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[22:26:42] *** Joins: Fault (~Fault@150.230.39.7)
[22:32:45] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:36:54] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:37:42] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[22:42:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[22:44:40] <rawtaz> its really a thin line between the two isnt it. i mean, one could sum it up as they both have one thing that differ from the other in that the other cant do it, but in the end these arent big things
[22:45:01] <rawtaz> e.g. with var you can group/factor them, if you fancy that syntax
[22:45:04] <rawtaz> cant do that with :=
[22:45:41] <rawtaz> but its not like := shortens the amount of text typed to any relevant extent, so on that topic its mostly the ability to use it in control structures that makes this aspect relevant.
[22:46:06] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:46:06] <ikke> You don't have to repeat the type 2 times
[22:46:38] <ikke> var foo Mytype = Mytype{} vs foo := Mytype{}
[22:46:47] *** Joins: tyson2 (~user@cpe3497f6b5e860-cmbc4dfbbe6670.sdns.net.rogers.com)
[22:47:24] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:47:53] <rawtaz> ikke: yeah and thats in favor or := then
[22:47:55] <rawtaz> of*
[22:48:40] <ikke> hmm, just tested it, var foo = Mytype{} works as well
[22:48:50] *** Quits: independent56 (~independe@2.31.88.82) (Remote host closed the connection)
[22:48:51] <ikke> https://play.golang.org/p/3EoeFHhhXab
[22:49:08] *** Joins: independent56 (~independe@2.31.88.82)
[22:52:30] <ikke> In that case, I suppose it's a matter of preference
[22:53:10] <rawtaz> so what's a good convention, so keep these two from being too mixed in ones code - use var outside functions, use := inside functions? what would be a recommendation?
[22:54:58] <seebs> the recommendation is to use whichever seems appropriate at a given time
[22:55:04] *** Quits: ryu` (~ryu`@67.165.91.34.bc.googleusercontent.com) (Quit: SCV ready!)
[22:55:06] <seebs> they aren't a binary toxin
[22:55:10] <seebs> they won't kill you if mixed
[22:55:24] <rawtaz> of course. but since they can both we used in like 99% of the cases,...
[22:55:36] <rawtaz> of would be good to follow a well established convention
[22:55:40] <seebs> why?
[22:55:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[22:55:59] <seebs> if you can't identify a problem that will occur if you use the wrong one, the convention isn't really helping you
[22:56:00] <rawtaz> for code consistency, readability and cleanness
[22:56:13] <rawtaz> i understand that. thats not the problem.
[22:56:16] <rawtaz> let me rephrase:
[22:56:31] <seebs> it's readable either way, and it doesn't make code better to add more rules just for the sake of having added a rule.
[22:56:35] <rawtaz> in situations where you can use both (which is arguably *a lot* of the times), which would be a good idea to use?
[22:56:57] <rawtaz> seebs: i understand that. i guess im not conveying my thoughts properly
[22:56:58] <seebs> i tend to use var if i don't know the initial value and := if i do.
[22:57:10] <ikke> same
[22:57:20] <seebs> and outside of functions i don't get a choice, but inside, that seems to work mostly?
[22:57:43] *** Joins: fikran (~fikran@user/fikran)
[22:57:45] <ikke> and var if you need to assign it in an inner scope but use it outside of that scope
[22:57:51] <seebs> so if i'm about to conditionally-initialize something, i'll declare it outside the loop with `var foo`, probably, but if i know the initializer i probably := it. probably. sometimes not.
[22:57:58] <rawtaz> seebs: right. and just to understant better where youre coming from in that caes, why not just := with an "empty" value yourself? that way the code is more explicit and less magical
[22:58:25] <rawtaz> seebs: yeah i think what you say makes sense
[22:58:26] <seebs> because i can't spell an empty value generically
[22:58:37] <seebs> as opposed to C, which will take {} for even `int`. :)
[22:58:50] <rawtaz> ok :D
[22:58:51] <rawtaz> fair enough
[22:59:20] <seebs> the distinction i think i'm making is: i tend to use := to express that i'm picking a value, and `var` to express that i'm not.
[22:59:43] <seebs>  so if i just write "var err error", i'm telling you that i don't yet have an opinion on the error, roughly.
[23:00:05] <seebs> "var i int" and "i := 0" are distinct because one of them is saying "i should be 0" and the other is *not* saying that, even though it happens to have that effect.
[23:00:47] <rawtaz> yeah. im pretty fine with that, but i am not entirely fine with the thought of a variable getting an initial (albeit "empty") value implicitly. it just somehow feels more controlled to either declare a variable that doesnt have a value at all (or e.g. nil) or specify the value. the middle ground of it automatically getting an "empty" value doesnt feel great.
[23:00:57] <rawtaz> for example an int has an empty value of 0, right?
[23:01:55] <rawtaz> what doesnt feel right is that even though that "empty" int has a 0, thats still a value. so if i fek up in my code later and accidentally not give that var a proper value, then it still has a "real" value
[23:02:09] <rawtaz> i simply feel that the "empty" values can be mistaken for "real" values, so to speak.
[23:02:19] <rawtaz> but its just something i have to get used to dealing with, so no super biggie :)
[23:04:53] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 264 seconds)
[23:05:23] <fizzie> The thing is, even if you're "explicit" about initializing the variable to its zero value, if it's not the "real" value and you mess up and forget to set it, the end result is the same: you forgot to set it, and treated the zero as the real value.
[23:06:24] *** Joins: grzywacz (~grzywacz@user/grzywacz)
[23:07:12] <rawtaz> fizzie: yes, agreed. the difference in that i know what i set as empty value, and what empty value it otherwise gets (and hence i have to make sure i know), is small and simply something to understand and handle properly.
[23:12:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[23:14:20] <rawtaz> the Go tour is scary with that gopher staring at you all the time >_>
[23:14:33] <rawtaz> staring straight into your soul..
[23:22:19] *** eldritch_ is now known as eldritch
[23:36:09] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[23:46:42] *** Joins: lauraaah (uid156848@ilkley.irccloud.com)
[23:47:00] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 260 seconds)
[23:47:08] *** Joins: whoami_ (~whoami@d118-75-170-49.try.wideopenwest.com)
[23:49:16] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[23:51:15] *** Quits: Torr_ (~Torr@user/torr) (Quit: leaving)
[23:53:51] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[23:54:20] <rawtaz> im not sure i see the point of putting the v assignment in the if line in https://tour.golang.org/flowcontrol/6 , as opposed to put right above it :D
[23:54:53] <ikke> It's a style
[23:55:17] <ikke> v is not used outside of the if statement, so you want to keep the scope limited
[23:55:23] *** whoami_ is now known as whoami
[23:55:38] *** Joins: pepee (~pepee@user/pepee)
[23:55:59] <ikke> (if it _is_ used outside, then ofcourse you do need to assign it outside of the scope of the if-statement)
[23:56:35] <rawtaz> ok that's why
[23:57:21] <rawtaz> it doesnt have any practical relevance though i guess? i mean its not like the GC will better deal with that variable just because of this
[23:57:41] <ikke> It's a good practice
[23:58:28] <ikke> You want to limit the scope of variables as much as possible so it's easier to follow what happens
[23:58:55] <rawtaz> yep
[23:58:58] <ikke> If you know that a variable can only be used in a specific scope, you do not need to worry about it being used later
[23:59:20] <rawtaz> i understand the point. just trying to establish that this is the only practical difference
