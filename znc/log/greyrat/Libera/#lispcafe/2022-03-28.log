[00:03:54] *** Joins: Oddity (~Oddity@user/oddity)
[00:10:51] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:9051:e090:d06f:de24)
[00:22:19] <shka> good night all, and because it feels like the end of the world https://www.youtube.com/watch?v=0Hfoue_LIDM
[00:22:19] -ixelp- Divine Mother (The Tower Crumbles) - YouTube
[01:19:38] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[01:54:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:54:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[01:55:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:00:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[02:13:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[02:29:19] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:34:43] *** Joins: pjb (~pjb@user/pjb)
[02:51:32] <hayley> https://www.youtube.com/watch?v=M2irYat2wf4
[02:51:33] -ixelp- Julia's Song (Remastered 2003) - YouTube
[03:00:22] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:9051:e090:d06f:de24) (Remote host closed the connection)
[03:07:29] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:9c20:d63f:c73d:dcb7)
[03:09:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[03:11:26] *** Joins: aeth (~aeth@user/aeth)
[03:20:15] *** Joins: hhh92 (~hhhh92@2804:14d:78b1:54b6::1000)
[03:20:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:27:53] *** Quits: hhh92 (~hhhh92@2804:14d:78b1:54b6::1000) (Quit: Leaving)
[03:32:39] *** Joins: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1000)
[03:35:03] *** Quits: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1000) (Client Quit)
[03:41:37] *** Joins: hhhh92 (~Srain@187.3.223.220)
[03:50:56] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:54:29] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 256 seconds)
[04:00:15] *** Joins: biluga_felpucia (~hhhh92@2804:14d:78b1:54b6::1000)
[04:08:36] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 272 seconds)
[04:11:12] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[04:17:25] *** Quits: biluga_felpucia (~hhhh92@2804:14d:78b1:54b6::1000) (Quit: Leaving)
[04:17:42] *** Joins: biluga_felpucia (~hhhh92@2804:14d:78b1:54b6::1000)
[04:17:46] *** Quits: hhhh92 (~Srain@187.3.223.220) (Remote host closed the connection)
[04:25:47] *** Quits: biluga_felpucia (~hhhh92@2804:14d:78b1:54b6::1000) (Quit: Leaving)
[04:25:59] *** Joins: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1000)
[04:27:03] *** Quits: dra (~dra@2a04:4540:6410:c100:4cc4:f220:91bd:91f9) (Ping timeout: 252 seconds)
[04:35:12] <drakonis> https://factorcode.org/
[04:35:12] -ixelp- Factor programming language
[04:35:17] <drakonis> now this, this is a weird language.
[04:45:12] <edgar-rft> the dino in the logo make me think this lanuage badly needs an asteroid impact
[04:46:37] * hayley uploaded an image: (13KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/WSZCxHXpwruiNMcXjXZnagLn/Screenshot_2022-03-28_11-15-27.png >
[04:46:42] <hayley> An attempt at transphobia was made
[04:48:43] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:9c20:d63f:c73d:dcb7) (Remote host closed the connection)
[04:56:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[04:57:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:02:21] <moon-child> https://pbs.twimg.com/media/FO3Ug-oXsAMllvm.jpg
[05:03:06] <hayley> "Women don't have beards" "but they do" "But on average" "I could say a lot of things you wouldn't like starting with 'but on average'"
[05:14:46] <edgar-rft> let's talk about average butts
[05:15:28] <moon-child> on average, I have one testicle, one boob, one ovary, and half a Y chromosome
[05:18:18] <selwyn> moon-child: dudes rock
[05:18:40] <hayley> "You just proved my point" "I wasn't trying not to"
[05:21:46] *** Joins: lisp123 (~lisp123@139.168.166.203)
[05:21:56] <hayley> There's also huge selection bias in sports, cause, well, you send the best people you find to compete.
[05:26:31] *** Quits: lisp123 (~lisp123@139.168.166.203) (Ping timeout: 256 seconds)
[05:56:46] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:58:15] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 240 seconds)
[05:59:01] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[06:03:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[06:05:25] *** Joins: aeth (~aeth@user/aeth)
[06:24:26] <gilberth> moon-child: Speaking of object files. I just remember that in the 80s my father used to hack his software for the 8080/8085 on an 8-bit machine, using multiple source files and linking the resulting .REL. The reason was that the machine had too little address space for another approach. At that time I wrote him an ASM.COM clone for DOS, so he could assemble his files with DOS. We decided against linking and object files.
[06:26:09] <gilberth> moon-child: Instead I implemented an INCLUDE directive. Which he also didn't use much as the DOS machine had enough RAM to load the circa 150KB source file into the editor at once. The assembler was fast enough and given sufficient RAM and I/O bandwidth there was no point anymore in separate compiling.
[06:26:35] *** Joins: Inline__ (~Inline@p200300cd47094800372fcc81f701114e.dip0.t-ipconnect.de)
[06:26:53] <gilberth> Hence the assemble was a very simple two pass assembler.
[06:28:10] <hayley> "We stopped to snack on a random berry bush and I had a few handfuls. I got so sick I was hallucinating for hours. Turns out the seeds need to be spit out or you can die if you eat enough of them." "By that time they were so sick of his ass that they just said, "yeah they're tasty""
[06:29:19] *** Quits: Inline (~Inline@p200300cd473c9e009f1d7d6dc4a648e3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:37:00] <hayley> Hm, the expensive AMD processors don't come with coolers. How do I know which are going to sink enough heat? Guesswork?
[06:41:14] <hayley> And I guess I am going to have to pay for a new motherboard too, since I can't figure if this one will work with newer processors. Not exactly cheap. sigh
[06:58:42] <gilberth> Well, I bought my CPU with Intel's fan. Just because I know nothing about fans and wanted to avoid guessing. Yet there somehow is not sufficient cooling. When I max out all cores after a few minutes the clock would be throttled quite a bit. I suspect the CPU runs too hot then.
[06:59:59] <hayley> My current one doesn't throttle, but now it gets to 70Â°C which is a lot of Â°C.
[07:00:26] <moon-child> I wish I could use the heat my cpu generates for something useful
[07:00:35] <qhong> Question: Does it make you mad if CONS is immutable?
[07:01:00] <moon-child> qhong: ml'ers say no
[07:01:03] <gilberth> moon-child: Well, it would heat the room, wouldn't it?
[07:01:16] <moon-child> gilberth: I prefer if the room is cool
[07:01:20] <moon-child> but, say, cooking, or making hot water
[07:01:38] <qhong> moon-child: ml'ers live in UNIX, let's not consider them
[07:01:43] <moon-child> qhong: also: (defun cons (a d) (lambda (c) (if c a d)))
[07:01:55] <hayley> gilberth: Depends on if it can disperse heat fast enough.
[07:01:57] <gilberth> moon-child: Well, I prefer around 24Â°C in my room, so I need heating.
[07:02:32] <gilberth> hayley: I guess, I could use more case fans.
[07:02:34] <moon-child> wow.  I prefer closer to 14.  I would be uncomfortable at 24C
[07:02:53] <gilberth> 14Â°C? I would freeze to death.
[07:03:23] <qhong> moon-child: what does this imply? the user can make their own cons? That's not the point, those CONS aren't the same interface as the CONSes used to bootstrap the system (and thus probably make up a significant amount of population)
[07:04:08] <gilberth> Still even for freezing 14Â°C you would need heating. And 14Â°C is even below the standard 20Â°C. At which I also would freeze.
[07:04:37] <moon-child> qhong: well, it seems to me your system is built around prototypes and closures.  So a cons should just be an object to which I can send 'car' and 'cdr' messages.  Why does it need to be special?
[07:04:45] <gilberth> Only problem: Before the Ukraine war it was not political correct to use electricity for heating.
[07:04:54] <moon-child> so, maybe some objects can also receive 'rplaca' and 'rplacd' messages.  And maybe others cannot
[07:05:55] <qhong> moon-child: The "immutability" I mean is stronger than not receiving setter messages, it means they lose object identitiy
[07:06:12] <qhong> moon-child: thus eq? (or universal equality) defined on them is structural equivalence
[07:06:18] <qhong> moon-child: That's quite a big deal
[07:06:51] <moon-child> but that's a general mechanism, no?  I can define my own immutable objects which are compared structurally?
[07:07:20] <qhong> hmm, if eq? is extensible, maybe
[07:08:22] <moon-child> you were all up in arms about generality earlier, now you want to disempower users from making their own immutable objects? :)
[07:09:56] <qhong> surely they can make it, but they might not interop well with built-in objects which initially make up most of the population
[07:10:23] <qhong> I know that an extensible system make it possible to "impost" and extend an type of object
[07:10:50] <qhong> but this does not apply to mutable/immutable distinction. Real immutable datum are not object
[07:13:45] <qhong> I think there is a discussion about this before. You can put an immutable datum into the place where a mutable object is expected (so if base system expect mutable object, users are able to make immutable variants)
[07:14:10] <qhong> but if it's the other direction things might not play well. And that's my question, is it acceptable that base system has immutable CONSes
[07:40:58] <kakuhen> gilberth: how do you configure X11 for high DPI displays? I get very blurry output despite having a seemingly okay .Xresources
[07:41:30] <kakuhen> http://0x0.st/oqaz.txt this is the file
[07:41:47] <kakuhen> the specific Xft.dpi value is to match the one of my screen
[07:48:39] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[07:52:48] *** Joins: semz_ (~semz@user/semz)
[07:55:39] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[07:58:33] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[08:22:41] *** Quits: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1000) (Quit: Leaving)
[08:28:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[08:29:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:03:34] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[09:05:45] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:05:49] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (*.net *.split)
[09:05:49] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (*.net *.split)
[09:05:49] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[09:05:50] *** Quits: jeosol (~jeosol@user/jeosol) (*.net *.split)
[09:06:14] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[09:06:21] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[09:06:33] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[09:11:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[10:00:10] *** Joins: ck_ (~ck@plskthx.org)
[10:00:16] * hayley hears her two least favorite things in the news
[10:00:34] <hayley> "[old university] gets $45e6 donation for research into autism"
[10:01:42] <hayley> "including early detection and diagnosis, intervention and supports, and employment and wellbeing." FUUUUUUUUUck
[10:05:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[10:07:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:13:29] <kakuhen> i sometimes have second thoughts about transferring, too
[10:15:52] <hayley> No, I mean that they have more money than sense, and "early detection" for disability usually is a funny way of saying that they'll help someone to abort their child specifically if they are disabled.
[10:16:13] * hayley wanted to vandalise the building while she was there...in Minecraft ofc
[10:19:45] <gilberth> I am not into the topic, but by the sheer amount of attention this so called autism has, I wonder, if children with the mild form formally named Asperger would be label with a defect which perhaps is none. Mind you, we live in an extravert world made for the extravert. And from a glimpse introvert could be mistaken for Asperger or vice versa.
[10:20:32] <gilberth> I mean, at times this feels like applying some norm to people. We aren't all alike. And attention to things and detail isn't per se a bad thing.
[10:21:33] <gilberth> And being introvert (which is sth else) isn't bad per se either. And being a night owl, isn't a sign of being lazy.
[10:21:44] <gilberth> But I really don't know.
[10:22:05] <moon-child> I agree broadly
[10:22:26] <gilberth> I am just asking questions.
[10:22:34] <moon-child> I went to a psychologist once.  He said 'you have asd'.  Ok, so ... what significance does that have for my life?  It's going to be the same regardless of whether I have a line to draw around myself or not
[10:23:27] <gilberth> At times it feels like they, whoever they are, want to press children into a "standard child".
[10:23:55] <kakuhen> (coerce 'son 'standard-child)
[10:24:49] <hayley> The only issue I have is that people are assholes to me. And I don't know what $45e6 of research will do to reduce that.
[10:25:00] <gilberth> My aunt for example was very concerned about me preferring to tinker with things instead of with children. That most of those fellow children in kindergarten were just boring and stupid, was none of her concerns. My mother and my aunt had quite some arguments over this issue.
[10:25:12] <masinter> if only names for diseases had packages and namespaces
[10:25:26] <moon-child> gilberth: my grandmother was a bit like this also
[10:25:42] <hayley> I mean, I'm normal to me. It's just the rest of the world that is stupid and/or rude.
[10:25:49] <gilberth> Yes, and this is why I prefer to Asperger. Asperger doesn't exist anymore.
[10:26:33] <gilberth> Likewise the delayed sleeping phase syndrom that I enjoy having, doesn't exist here by definition. It's not listed in the catalogue of disorders.
[10:26:36] <hayley> The diagnosis just lets me ask for some extra time on exams. And apparently it makes me more appealing to universities.
[10:27:07] <masinter> at one time i had a theory about expert systems having to do with the failure of terminology to distinguish meaning as it changed over time
[10:27:29] <gilberth> And what is a "disorder", any way. In my case sleeping late isn't a disorder and looking at my family rather the norm, though I am the most extreme.
[10:27:46] <hayley> Early detection and diagnosis are mostly useful to ditch your child IMO. And then "supports and wellbeing" are moot when people are assholes.
[10:28:26] <masinter> everyone has one
[10:28:36] <hayley> has-a vs is-a.
[10:28:58] <moon-child> yes!
[10:29:17] <gilberth> Anyhow, I wouldn't coerce my child, if would ever have one, to be a standard child. A mild form of Asperger IMHO is completely healthy. The only disorder part is that the society isn't made for that type of persons.
[10:29:26] <hayley> But this money is also going to the brilliant minds that claim the sum of an empty sequence is undefined. And we're not having the discussion on the definition of a sum again, I mean +/ and I mean that only.
[10:29:40] <gilberth> It's like coercing a left handed person to a right handed person. We don't do that anymore.
[10:30:12] <moon-child> could I be stupider, and better at talking to people, I would be
[10:30:16] <hayley> (Or (reduce #'+ xs) or whatever. Pick your language, but I mean the usual reduction of addition over a sequence of integers.)
[10:30:23] <masinter> three legged stool with one leg broken
[10:30:50] <hayley> Those were quite fun to sit on at high school.
[10:30:50] <gilberth> moon-child: Don't laugh, at times I wish I would be more stupid. I believe live would be easier then.
[10:31:22] <gilberth> * life ;I'll never learn to pay attention.
[10:32:07] <masinter> let's suppose you wrote an expert system with a rule: "if there are more people than chairs, then soneone can't sit"
[10:32:32] <gilberth> You assume that people can't share a chair.
[10:32:43] <moon-child> do expert systems speak english, now?
[10:32:46] <masinter> and the question is, "what is a chair'
[10:32:55] <hayley> Yes, also a good option at high school.
[10:34:00] <masinter> the programming doesn't scale; as more programmers fiddle with the rules over time, the fuzzier the logic
[10:34:35] <masinter> three legged stools
[10:34:35] <moon-child> what is wrong with that?
[10:35:03] <masinter> it gets more and more unstable
[10:35:07] <moon-child> I mean, many people have written philosophy over thousands of years.  Rarely do they agree with each other.  But that doesn't mean they are not worth reading
[10:35:10] <moon-child> is philosophy unstable?
[10:35:47] <moon-child> I can write a negative review of some movie, and you can write a positive one, and these can coexist; is the system that contains them then unstable?
[10:38:13] <masinter> the tree falls in the forest
[10:38:37] <masinter> the stump looks like a chair, but no one sits on it
[10:39:16] <gilberth> [Wow! My emulated Z80 roams at 12GHz.]
[10:39:20] <moon-child> can_sit(human, stump).
[10:39:43] <hayley> gilberth: do u even JIT
[10:40:05] <gilberth> hayley: I don't. It's an emulator.
[10:40:19] <hayley> Does the emulator even JIT
[10:40:27] <gilberth> Nope.
[10:41:01] * hayley thinks 4 cycles/instruction-ish Z80 * 12 GHz = 3 GIPS
[10:41:57] <gilberth> hayley: 4 cycles per instructions is the bare minimum for a Z80. It applies to simple things like 8-bit register-register transfers.
[10:43:10] <gilberth> Although the 8086 instruction set is a super set of the 8080 instructions and there is more or less a direct mapping for 8080 -> 8086, I can't imagine how to do JIT because of the von Neumann architecture.
[10:43:16] <hayley> Still, that VM we found was way less than 1 instruction/host cycle.
[10:44:38] <gilberth> As the 4KB page size is far too coarse for faulting on code modifications. I could live with 256B pages though.
[10:45:35] <gilberth> Otherwise it would be trivial. Heck, even the flag bit arrangement in the 8086 is the same as with the 8080.
[10:48:39] <gilberth> And now you know why the x86 instruction is as it is. It's designed to be somewhat compatible to 8080, which is designed to be somewhat compatible to the 8008.
[10:50:34] <hayley> https://twitter.com/geofflangdale/status/1484301673137078275 lmao
[10:50:50] <hayley> "Personally I find the idea of using Rust to be incredibly goofy for tools like this: "omg, there might be a gc pause in 'find' or 'cut', we need to use a Serious Language"." - Geoff Langdale
[10:54:19] <hayley> "A compiled GC language with decent startup time would probably be fine." GL on one-more-re-nightmare when
[10:54:32] <sham1> There might be an argument to be had about start-time, but the GC argument is just bunk
[10:56:03] <hayley> He also has an interesting point on global pipeline optimisation in that thread.
[10:56:47] <moon-child> authorship of unix utilities is predicated on the notion that unix is a good idea.  So it shouldn't be surprising that no one implements them in good languages
[10:57:11] <moon-child> 'global pipeline optimisation'  gpu/numa/distributed apl compiler when
[10:57:43] <hayley> moon-child: what Unix does to a mf
[10:57:48] * moon-child has a bad habit of picking up projects and never dropping them ... maybe I'll finish something by 2030
[10:58:21] * gilberth has the hope that he finishes anything before he dies.
[10:58:42] <gilberth> But perhaps I don't finish projects just because of that?
[10:59:35] <dave0> pass the torch
[10:59:57] <moon-child> I also hope to be able to be able to play pure white at some point
[10:59:59] <dave0> you could hire an assistant
[11:00:05] <moon-child> it has too many triplets.  I am not good at triplets
[11:00:13] <moon-child> so it sounds like crap
[11:00:24] <gilberth> dave0: Is that a metaphor? To pass a torch?
[11:00:41] <moon-child> gilberth: yes, it means you hand over your projects to somebody else
[11:01:17] <gilberth> Oh, does that refer to the Olympic games?a
[11:01:29] <moon-child> huh, probably
[11:01:31] <moon-child> I hadn't considered that
[11:32:42] *** Joins: shka (~herr@109.231.3.55)
[11:45:42] * hayley has new album
[11:45:44] <hayley> https://soundcloud.com/user-308419292/sets/music-for-dire-situations
[11:45:44] -ixelp- Stream no-defun-allowed | Listen to Music for Dire Situations playlist online for free on SoundCloud
[11:46:04] <hayley> One person I don't like called it "cancer to their ears". Couldn't have hoped for anything better.
[11:48:01] <dave0> far out time is flying today.. it's already 6:20pm
[11:49:46] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Bridge terminating on SIGTERM)
[11:49:48] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Bridge terminating on SIGTERM)
[11:49:49] *** Quits: drbluefall (~alexbluef@2001:470:69fc:105::1:1c68) (Quit: Bridge terminating on SIGTERM)
[11:49:49] *** Quits: sp (~sp@user/susam) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: Jaen (~jaen@2001:470:69fc:105::15f4) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[11:53:31] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[11:58:41] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[11:58:41] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:58:48] *** Joins: sp (~sp@user/susam)
[11:58:48] *** Joins: Jaen (~jaen@2001:470:69fc:105::15f4)
[11:59:02] *** Joins: sepanko (~sepanko@user/sepanko)
[11:59:15] <qhong> hayley: should use CL to generate it :D
[11:59:33] *** Joins: hayley (~theemacss@user/hayley)
[11:59:44] <qhong> I did quite a few generative live coding performances when I was at MIT, using a framework I wrote myself
[12:19:30] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[12:39:41] <gilberth> Ok. I believe it is reasonable to assume that applications aren't actually self modifying. I may further assume that even when written in assembly they follow the usual layout of text + data + bss. The .COM files don't say. Those files are just loading to address 0100h and contain no header or meta information at all.
[12:41:24] <gilberth> However if the layout is like text + data + bss, there should be some minimum data address which is written to. I could keep track of that and move the image such that the boundary between believed-to-be-text and believed-to-be-data lies on a page boundary.
[12:41:51] <moon-child> 'I believe it is reasonable to assume that applications aren't actually self modifying'  quite a big assumption there
[12:44:01] <gilberth> moon-child: What would a reason to have self-modifying code?
[12:45:02] <gilberth> I mean, I hacked quite a bit of 8080. I never occurred to me to use self-modifying code.
[12:45:52] <gilberth> But granted, there may be programmers feeling smart doing that. I'll see.
[12:48:56] <gilberth> I could instruct the emulator to tell me which bytes are written and later executed.
[12:52:34] <dave0> this man page on unix signals mentions a signal trampoline code on the user stack.. https://man7.org/linux/man-pages/man2/sigreturn.2.html
[12:52:34] -ixelp- sigreturn(2) - Linux manual page
[12:53:08] <dave0> executing code on the stack "might" count as self-modifying maybe, i'm not sure
[12:54:07] <dave0> Once upon a time, UNIX systems placed the signal trampoline code       onto the user stack.  Nowadays, pages of the user stack are       protected so as to disallow code execution
[12:54:38] <dave0> but it's "unix" and it's "signals" and it's probably rubbish
[12:57:27] <gilberth> Talking of which. I always found it bothersome with the 8086 that hardware interrupts push the PC onto what ever SP happens to be. How can there be a reliable OS, when you depend upon that SP points somewhere sane?
[12:58:10] <gilberth> And from the perspective of the user application? How to know how much stack interrupt handlers need?
[13:00:32] <dave0> my forth uses SP as a kind of instruction pointer, and RET to execute threaded code, and a lot of the threaded code is in a read-only segment
[13:01:08] <gilberth> What CPU do you use?
[13:02:00] <dave0> x86 and amd64 ... it works in protected mode, because unix and windows uses ring 0 stacks for interrupts
[13:02:24] <dave0> the kernel never writes to the usermode ring 3 stack
[13:02:45] <dave0> i did my research and it works in unix and windows
[13:03:13] <gilberth> Yes, Intel fixed that with the 80286 and protected mode.
[13:03:20] <dave0> it does NOT work in dos because it uses usermode stack for interrupts
[13:03:23] <dave0> yep yep
[13:03:28] <dave0> 286
[13:03:35] <dave0> but nothing runs 16 bit protected mode
[13:03:38] <dave0> at least netbsd doesnt
[13:03:48] <dave0> so i run it in dosbox with interrupts turned off :-p
[13:04:17] <gilberth> Has there ever been a 16-bit protected mode OS? What about Windows? OS/2?
[13:05:03] <gilberth> dave0: How rude of you!
[13:05:13] <dave0> ehehe
[13:05:52] <gilberth> But then DOS doesn't really use interrupts. The BIOS does. For the keyboard, but not for anything else.
[13:06:29] <dave0> using SP as an instruction pointer and RET to jump to code was re-invented by the crackers as return-oriented-programming
[13:07:25] <gilberth> With the IBM AT it was possible to have asynchronous disk read and writes. You would do the BIOS call and pass a callback or sth. The call would return right away and when the transfer is done, you get called. However, none of the BIOSes of the various DOS emulators actually implement that.
[13:07:47] <dave0> nice
[13:08:15] <gilberth> I found some 16-bit version of UNIX 7 for the IBM PC. It hangs when you boot it, perhaps it uses that interrupt driven disk I/O.
[13:08:54] <dave0> there is Coherent and Minix
[13:09:03] <gilberth> dave0: Yep, all you would need to have to implement a UNIX just in terms of the BIOS.
[13:09:50] <dave0> but i have never actually used msdos.. i had an amiga into the late 90's, and then when i finally moved to ibm-pc's cos amiga just couldn't keep up, it was straight to linux
[13:09:57] <gilberth> dave0: The thing I found is older. And you forgot XENIX. It could run the IBM XT.
[13:09:58] <dave0> march of time
[13:10:06] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[13:10:25] <gilberth> dave0: You haven't missed much.
[13:11:31] *** Joins: aeth (~aeth@user/aeth)
[13:11:53] <gilberth> I mean. DOS is the true UNIX. As in "uniplexed". Think a CP/M clone and UNIX wannabie without multitasking.
[13:12:19] <dave0> i was spoiled by amigas
[13:12:26] <gilberth> Which is ironic as there also was MP/M by Digital research both for 8-bit and 16-bit machines, which did multithreading and multiuser fine.
[13:12:45] <gilberth> CP/M compatible.
[13:13:24] <dave0> gilberth: do you have an IBM PC/AT ?
[13:13:41] <dave0> are you a computer collector?
[13:14:03] <gilberth> For DOS this was spoiled because everybody would directly write to the frame buffer even for text output. Just because text output through DOS and the BIOS was slow. BIOS was slow because it sat in ROM.
[13:14:26] <gilberth> dave0: Nope. I don't have my AT anymore.
[13:14:36] <dave0> doh bummer
[13:15:02] <gilberth> For CP/M multithreading was easier as each machine had different HW and so you needed to go through the BDOS for console I/O.
[13:15:21] <gilberth> dave0: I still have both my beloved CP/M 80 box as well as my XT.
[13:17:03] <dave0> the reason i ask about AT is because i believe it has a 286 in it? and i like the idea of having an os run in 16 bit protected mode
[13:17:04] <gilberth> As well as a VT1200 and two other vintage X terminal. Complete with the original 19" b/w screen.
[13:18:18] <gilberth> dave0: Yes, the AT was a '286 machine. But in general the 80286 machines were a very brief occurrence as the 80386 appeared soon.
[13:19:36] <pl> OS/2 1.0 had, IIRC, a 286 version
[13:20:46] <gilberth> It is ironic that it took ages for the DOS/Windows crowd to actually use 32-bit software.
[13:21:34] *** Joins: christophergray (~christoph@186.151.84.243)
[13:23:05] <gilberth> Even in 1996 my HW dealer advised me that the PPro would run 16 bit software somewhat slower. Hah! As if I would run any 16-bit software at all.
[13:23:51] <gilberth> dave0: But why must it be a real 80286? Later CPUs are compatible, aren't they?
[13:24:39] <gilberth> Actually I may have a '286 board. I am not sure and can't have a look.
[13:24:44] <dave0> i dunno, it just seems authentic
[13:24:58] <gilberth> ok. That's reasonable.
[13:25:06] <dave0> :-)
[13:25:29] <dave0> afaik linux hasn't penetrated old ibm pc's
[13:25:41] <dave0> i don't think it ever ran on 16-bit computers
[13:26:18] <dave0> and now, even if it could, linux is just too large
[13:26:25] <gilberth> Although it's political incorrect here, but I could consider to port UNIX to either the 8088 or the Z80. Perhaps the later with a homebrew MMU. I could implement I/D space separation. --- when bored.
[13:27:08] <dave0> will unix fit?
[13:27:18] <gilberth> dave0: Yes, 32-bit is hardwired into Linux. I would never attempt to port. And if, I would start with uCLinux. Which is a Linux for machines w/o MMU.
[13:27:43] <gilberth> dave0: The PDP-11 is a 16-bit machine. So it'll fit nicely.
[13:27:54] <dave0> nice :-)
[13:28:32] <gilberth> The PDP-11 has only 64kB address space. Some machines could have different address spaces for instructions (I) and data (D). The I/D separation.
[13:29:20] <pl> dave0: there was a port to 16bit x86, limited one
[13:29:28] <gilberth> The 8080, 8085, and Z80 have a bus pin indication an opcode fetch. It's for the interrupt controller. But when I decode the instruction to know how long it is, I could craft an MMU which implements I/D separation for a Z80.
[13:29:59] <gilberth> pl: There are multiple UNIX ports to the 8086.
[13:30:28] <gilberth> And you could make good use of the segment registers here.
[13:30:48] <pl> PDP-11 later on had primitive MMU which provided segmentation combined with internal I/D split which mapped onto 22-bit external bus, iirc
[13:31:08] <gilberth> Just have the applications as 16-bit applictaions w/o touching the segment register and you could move applications within RAM.
[13:31:09] <pl> well, max 22bit, unibus/early qbus was 18bit
[13:31:47] <pl> what I want is amd 29k to play with - apparently it had access control *on registers*
[13:31:59] <gilberth> pl: Yep, this is what I gathers, there as an MMU for the PDP-11. But I/D separation was option. So I read.
[13:32:18] <pl> gilberth: the MMU and I/D split were combined
[13:32:32] <pl> as it impacted address generator unit, I think
[13:33:14] <gilberth> pl: Are you sure? Or had a PDP-11 w/o MMU some primitive bank switching at least?
[13:33:14] <pl> I do not know if the MMU was replicated in soviet single-chip PDP-11s (their own from scratch design, but made to be compatible)
[13:33:40] <pl> gilberth: the MMU was kinda bank switching
[13:34:30] <gilberth> Yes, I read a lot about "_When_ we have I/D separation we could blah." So I gathered that I/D was an option. /me shrugs.
[13:35:16] * hayley plays around with gdb on Garry's Mod, and finds several threads stuck in SSL_peek of all things.
[13:35:20] <gilberth> Anyhow, I could hack I/D separation for a Z80 or a 8080. Actually the 8085 would be better for C with the undocumented instructions, but I have no compiler using it.
[13:36:16] <hayley> It's also going through this libbass.so, which makes me wonder if it is doing something dumb with SSL.
[13:36:33] <gilberth> The 8080 isn't really fit for C. Stack relative addressing is a pain. I would only attempt it with a C compiler which would figure out which functions are not re-entered to be able to allocate local variables static.
[13:37:48] <pl> gilberth: pretty sure the I/D split was available only with the segmentation unit and not otherwise, and I think some versions had optional "moby" memory model
[13:38:11] <gilberth> What is the "moby" memory model?
[13:40:42] <hayley> Somehow I'm willing to bet that this libbass, which I can't get sources for, isn't handling some error and just keeps running SSL_peek wasting my CPU time.
[13:40:50] <pl> gilberth: essentially the common modern approach of splitting address space in half with one half being kernel and other half being user, but done without all the other MMU bits
[13:41:25] <pl> and you could implement it with simple hack on bus interface (some latches and flip-flops)
[13:42:13] <gilberth> Leaving me with just 32kB for everything?
[13:42:59] <pl> gilberth: I think it also provided option to remap those segments (at least that's how PDP-10, from which it was copied, did it)
[13:43:25] <pl> but yes, early unix on pdp-11 supported 32kb of memory altogether for userland and 32kb for resident kernel, iirc
[13:43:37] <gilberth> Ouch.
[13:44:30] <pl> also probably why sticky bit was useful
[13:44:32] *** Quits: christophergray (~christoph@186.151.84.243) (Quit: WeeChat 3.5)
[13:45:00] <pl> and why sbrk() wasn't as shitty as it is now
[13:45:01] <gilberth> Anyhow, it will be quite feasible to port UNIX to a Z80, given some MMU HW. I can't do demand paging though, I won't need that.
[13:45:34] <gilberth> The only problem is all the assembly code in UNIX. And the very old C. I would need to craft a C -> C translator first.
[13:46:08] <gilberth> pl: Ah, so the "break" was the break between user land and kernel land?
[13:46:30] <pl> gilberth: between stack and "normal memory"
[13:46:48] <pl> the memory you sbrk()ed away meant less memory for stack
[13:46:49] <gilberth> Stack ops were somehow spoofed?
[13:47:12] * gilberth is puzzled.
[13:47:25] <pl> gilberth: no, it had now-traditional downwards growing stack, iirc
[13:48:25] <gilberth> Ah! So the break between stack and heap?
[13:48:39] <pl> without checking for references (so beware dragons of assumption ;)) the memory model went: <user data+code><sbrk space><available stack space><stack> <kernel space>
[13:48:42] <pl> yeah
[13:49:00] <gilberth> And where does the kernel go? Above the stack?
[13:49:28] <gilberth> You told me already.
[13:49:38] <pl> depending on whether they used upper or lower half, but yeah, the other 32kb
[13:50:15] * pl ponders spelunking in 2.11 BSD to check for more details
[13:50:39] <gilberth> Well, in theory another bus address bit and a flip flop on some I/O port could make 64kB minus a tiny bit available to applications.
[13:51:45] <gilberth> This was my initial idea for a Z80 UNIX machine. Just put A16 and on onto some I/O port and be set.
[13:58:00] <pl> > We knew the PDP-11/45, which did support memory mapping and protection for the kernel and other processes, was coming, but not instantly; in anticipation, we arranged with Digital Special Systems to buy a PDP-11/20 with KS-11 add-on. This was an extra system unit bolted to the processor that made it distinguish kernel from user mode, and provided a classical PDP-10 style "hi-seg" "low-seg" memory mapping unit. I seem to recall that 
[13:58:01] <pl> maybe 6 of these had been made when we ordered it.
[13:58:03] *** semz_ is now known as semz
[13:59:14] <pl> KS-11 provided 2 segments of remapping plus special handling for EAE unit
[13:59:35] <edgar-rft> The kernel went to a pub to drink some beer.
[14:00:04] <hayley> Now I can't get anyone to trigger the bug that I want to work out. sigh
[14:00:44] * edgar-rft triggers hayley's bug to make her happy
[14:04:25] <hayley> Didn't seem to work.
[14:06:13] <gilberth> pl: Ah ok. That explains a few things. Thanks.
[14:06:49] <pl> https://www.modulaware.com/history/vrsmop.pdf has diagrams of memory layout on RT-11 with Modulaware Modula-2/VRS 
[14:07:52] <pl> using the extended memory model of LSI-11 (which is essentially 22-bit expansion of PDP-11/45 in this case)
[14:08:07] <pl> http://www.modulaware.com/history/Vrsmot.pdf a bit of description
[14:10:13] * gilberth reads.
[14:17:08] <gilberth> pl: Hmm, I can't gather much from that. :/
[14:20:03] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:23:44] * hayley clicks
[14:23:44] <hayley> "23 years ago I created Freenet, the first distributed, decentralized peer-to-peer network. Today I'm working on Locutus, which will make it easy to create completely decentralized alternatives to today's centralized tech companies."
[14:23:50] <hayley> "Contracts are implemented in Web Assembly." AAAAAAAAAAAAAAAAAA
[14:24:18] <moon-child> whelp
[14:24:23] <moon-child> freenet seemed cool, at any rate
[14:24:48] <hayley> https://github.com/freenet/locutus â massively inferior Netfarm?
[14:24:49] -ixelp- GitHub - freenet/locutus: Declare your digital independence
[14:25:31] * hayley checks issues
[14:25:53] <hayley> "Write an anti "write amplification" layer to avoid running the same ops repeteadly [sic]" You don't converge on anything?
[14:26:00] * hayley borrows gilberth's desk to faceplant into
[14:26:32] <moon-child> hayley, pillow thyself
[14:28:49] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:3df8:ed64:e02c:f418)
[14:30:12] <hayley> And apparently all "state" is just an array of bytes. No redundancy whatsoever.
[14:34:31] <hayley> "The scenario is such that when you subscribe initially, currently you are stuck with that peer. There is missing logic yet to recover subscriptions when the node you are subscribed to drops the network" omg
[14:34:44] <hayley> Even netfarm-client does that, and my network code is total shit.
[14:36:44] <hayley> Must be time for https://www.youtube.com/watch?v=3YBmS5oaNwU
[14:36:44] -ixelp- Amateur Hour - YouTube
[15:01:29] *** Joins: X-Scale` (~ARM@140.218.137.78.rev.vodafone.pt)
[15:02:12] *** Quits: X-Scale (~ARM@80.199.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[15:02:13] *** X-Scale` is now known as X-Scale
[15:35:07] *** Joins: mgl (~mgl@82.11.145.235)
[15:35:09] *** Quits: Jaen (~jaen@2001:470:69fc:105::15f4) (Quit: User was banned)
[15:35:09] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: User was banned)
[15:35:10] *** Quits: hayley (~theemacss@user/hayley) (Quit: User was banned)
[15:35:19] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: User was banned)
[15:35:32] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: User was banned)
[15:36:29] *** Quits: sp (~sp@user/susam) (Quit: User was banned)
[15:36:29] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: User was banned)
[15:39:25] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[15:57:59] *** Joins: razetime (~quassel@117.254.35.152)
[16:02:14] *** Joins: hayley (~theemacss@user/hayley)
[16:07:31] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:3df8:ed64:e02c:f418) (Ping timeout: 250 seconds)
[16:10:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:30:47] <sm2n> lol
[16:31:01] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[16:31:15] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[16:31:29] *** Joins: sepanko (~sepanko@user/sepanko)
[16:31:43] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[16:31:43] *** Joins: sp (~sp@user/susam)
[16:31:57] *** Joins: Jaen (~jaen@2001:470:69fc:105::15f4)
[16:37:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[16:39:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:50:01] *** Joins: treflip (~user@user/treflip)
[16:53:07] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[16:54:54] <gilberth> moon-child: What I found so far in execute after write is memory probing and perhaps sth like fixing the freshly loaded binary. I see a call target adjusted and a load instruction e.g. But after that is over and the applications runs proper, I don't see any code modifications any more. So I may have luck. But the whole exercise is pointless. Who cares for CP/M-80?
[16:55:45] <hayley> "In many cases Garbage Collection does perform better than C's static allocation. This advantage is over and above the important service of avoiding dangling references. Most C/C++ programmers are quite amazed by this -- as if finding out about sex for the first time after being kept ignorant about it by their parents..." - Henry the Baker
[16:56:39] <dave0> sexy gc
[16:58:26] <gilberth> And "how much memory is there?" is a bit of interesting with CP/M. The more or less silent agreement is that what is below the BDOS jump you find at address 00005h is RAM. Never the less most application probe for RAM there. Above BDOS is off limits, but below their might be hole. In theory.
[17:06:39] <gilberth> dave0: Speaking of interrupts. I wonder why interrupt controllers aren't more clever, of if they are. As the interrupt controller arranged for the CPU to fetch a CALL instruction to the ISR when an interrupt is due. That is bypassing RAM. So the PC at the time of interrupt is present on the address bus. An interrupt controller could just stash that PC. Of course the controller then would better inject a JMP.
[17:07:18] <gilberth> The CPU could then ask the controller for the observed PC and make a return. Look ma! No user stack pointer needed.
[17:08:32] <gilberth> But Intels don't work that way. Which perhaps is why I never saw create use of POP. It would be a convenient auto-increment otherwise.
[17:10:04] <gilberth> E.g. a memcpy using the stack pointer as one of the index registers ought to faster on poorer machines.
[17:13:44] <dave0> ah ha!
[17:14:30] <dave0> gilberth: i actually used pop in my indirect threading...   pop rbp / jmp [rbp]
[17:16:15] <dave0> gilberth: i wrote a program to time such things, because the speed of those instructions (pop/jmp or ret) has the most effect on forth's speed
[17:17:07] <dave0> it was interesting... if the cpu could predict the indirect jump, it was much faster than ret
[17:17:19] *** Quits: sp (~sp@user/susam) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: Jaen (~jaen@2001:470:69fc:105::15f4) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[17:17:33] <pl> hmm, Am29k apparently didn't save registers on interrupt
[17:17:42] <dave0> so i added randomization to defeat the predictor, then ret was better
[17:18:05] <dave0> the interesting thing was that `ret` was the same speed whether or not it could predict the indirect jmp
[17:18:44] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[17:18:45] <dave0> but things like   losd rax,[rsi] / jmp rax   or    pop rax / jmp rax     varied widely if it could be predicted
[17:19:04] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[17:19:18] *** Joins: sepanko (~sepanko@user/sepanko)
[17:19:19] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[17:19:35] *** Joins: sp (~sp@user/susam)
[17:19:35] *** Joins: Jaen (~jaen@2001:470:69fc:105::15f4)
[17:19:42] <dave0> i'll run the benchmark to find the timings
[17:20:17] <pl> also, 3-bus CPUs make my head spin a little
[17:21:24] *** Quits: X-Scale (~ARM@140.218.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[17:22:39] *** Joins: X-Scale` (~ARM@89.214.146.40)
[17:22:55] *** X-Scale` is now known as X-Scale
[17:24:53] <pl> though I guess if you latch address bus appropriately with bus grant you could have separate instruction read only read without disrupting device DMA...
[17:25:45] <dave0> i ran the benchmark ... predictable indirect jumps was 5x faster than ret
[17:26:11] <dave0> unpredictable jumps was 8% slower than ret
[17:26:34] <dave0> predictability made no difference to ret
[17:26:39] <gilberth> dave0: Perhaps this because the RET would not match the last CALL?
[17:26:41] <pl> lol @ AMD throwing shade at function call performance of stack cpus
[17:26:56] <dave0> gilberth: there were no calls at all
[17:27:02] <gilberth> I could imagine a shadow stack in the CPU to pairing CALL and RET for prediction.
[17:27:39] <dave0> gilberth: everything was an indirect JMP
[17:27:59] <pl> gilberth: I'm reading Am29k datasheet, it has hardware register stack
[17:28:11] <dave0> gilberth: basically i made a vector of pointers to code, set SP to the base of the vector, and JMP'ed
[17:28:14] <pl> with *variable-size* register windows
[17:28:15] <gilberth> Yes, but when the CPU sees RET I imagine it would predict to take it to the last CALL that there was.
[17:29:08] <pl> 192 registers :3
[17:29:18] <pl> I see where Knuth got his MMIX design
[17:29:18] <gilberth> dave0: Yes. A funny case of tail calls if you wish :-)
[17:29:30] <dave0> gilberth: right right! tail calls yes exactly!
[17:30:05] <dave0> i did not test CALL/RET pairs
[17:30:19] <gilberth> Nice idea. The instruction stream this is just a previously setup of CALLs, that never happened. I like that idea.
[17:30:30] <dave0> yeah right basically every forth primitive was a tail call
[17:30:55] <gilberth> Still, I can see why an indirect jump is faster.
[17:31:59] <gilberth> dave0: But the idea is brilliant!
[17:32:25] <dave0> chuck moore invented it :-)
[17:32:52] <gilberth> Oh. I thought it were yours.
[17:33:06] <dave0> oh actually i don't know who invented "threaded code" ... wikipedia said early cobol compilers produced threaded code
[17:33:24] <dave0> gilberth: i only thought of the trick to use SP
[17:33:39] <gilberth> Nah, I mean the use of the SP and RET as "do next instruction".
[17:33:59] <gilberth> dave0: Yes, and that trick is brilliant.
[17:34:09] <dave0> thanks :-)
[17:34:44] <gilberth> I mean, RET has all you need to do in one instruction.
[17:35:13] <dave0> it doesn't work with interrupts, that probably held everyone back
[17:35:19] <gilberth> A perfect fit. Only misnamed. I mean, you don't RETurn, you advance.
[17:35:38] <gilberth> dave0: Yes, on silly 8086 machines.
[17:37:07] <gilberth> But now I get why you are concerned about signals. Have you tried saying that you want a separate stack?
[17:37:35] <dave0> yes i have that working
[17:37:41] <dave0> sigaltstack()
[17:37:55] <dave0> but the plan is to make it much more user friendly
[17:38:19] <dave0> instead of killing the program with ctrl-c, i just want it to print "interrupt!" and drop back into the REPL
[17:38:44] <gilberth> Yes, and you would bets on that every UNIXish OS would be careful about the user stack here.
[17:39:00] <dave0> windows too
[17:39:33] <gilberth> SIGINT is tricky. It's asynchronous.
[17:40:26] <dave0> how does SBCL do it?
[17:40:36] <gilberth> Does it use libc?
[17:40:48] <dave0> oh good point
[17:41:04] <dave0> i have no idea how signals work under the covers
[17:41:42] <gilberth> Well, it's okay to longjmp out of a signal handler, but for libc.
[17:42:38] <gilberth> I mean, nobody says that the handler needs to return.
[17:43:27] <dave0> if you do that and something holds a lock, does the lock get released?
[17:43:42] *** Quits: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[17:43:44] <dave0> like i have getc() to read from the keyboard
[17:43:51] <dave0> using stdio
[17:43:55] <gilberth> Of what do you dream at night?
[17:43:57] <dave0> i'm pretty sure it uses mutex's
[17:44:08] <dave0> crazy shit lol
[17:44:09] <gilberth> It's not CL.
[17:44:28] <dave0> oh
[17:44:31] <dave0> right
[17:44:32] <gilberth> CL has unwind-protect proper.
[17:45:34] <gilberth> But locks are a problem in general. As with CL SIGINT would bring you to the debugger. Very few people bother to use WITHOUT-INTERRUPTS in their CL code to defer interrupts until you left the critical section.
[17:46:51] <gilberth> But when you do a non-local exit from inside the interrupt handler back, the WITH-LOCK-HELD form would while stack is unwound past it release the lock.
[17:47:35] <dave0> lisp is like a whole nother world compare to c
[17:47:54] <gilberth> With C, you are really out of luck, as you be right in the middle of libc. C hackers don't believe in doing something useful with SIGINT besides quitting.
[17:47:55] <dave0> c just says it's undefined
[17:48:24] <dave0> that's so user un-friendly
[17:48:53] <gilberth> Well, stick to POSIX. Good bye FILE*.
[17:49:45] <dave0> far out you've got me thinking now
[17:52:49] <dave0> unix weenie answer: "doing it right is too hard"
[17:55:50] <gilberth> Well, to be fair. As long as you stick to POSIX, things are well defined.
[17:56:22] <gilberth> But that means not using <stdio.h>. Implement your own buffering, and don't forget to handle EAGAIN and perhaps EINTR.
[17:56:24] *** Quits: razetime (~quassel@117.254.35.152) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:58:19] <dave0> dammit gilberth you've made a convincing point
[18:02:19] <dave0> i have the whole of forth written in assembler, and a couple of i/o functions written in c, which i call as coroutines (the best kind of routine)... including a blocking read to get a character from the keyboard ... i would have to make the signal handler depend on whether i'm executing forth at the time, or c at the time
[18:05:39] <dave0> groan
[18:05:45] <gilberth> Do you do anything else with C besides I/O?
[18:05:51] <dave0> i'm gonna finish reading my story and not think about this
[18:06:58] <gilberth> Or put otherwise: Could you survive on open(2), read(2), write(2), close(2)?
[18:07:14] <dave0> i could yes
[18:08:40] <dave0> main() installs the signal handlers and initializes the terminal.. the signal handler is in c, but it just sets the PC to call into forth... i have a c wrapper around putchar(), and a c wrapper around getchar()
[18:08:45] <gilberth> And you could make read(2) return on an interrupt. I always forget the details. And bailing out of an active read(2) also ought to be sane.
[18:09:40] <dave0> i could replace getchar with read(2)
[18:09:41] <gilberth> Well, at the end of day you want buffering. But that isn't hard.
[18:10:38] <dave0> i have never written anything in depth with signals, i don't really like them
[18:11:08] <dave0> i would have to make a distinction between an endless loop in forth, and a blocking read in c
[18:11:29] <gilberth> Well, as long as you take libc out of the equation signal are fine.
[18:12:37] <gilberth> dave0: Well, you perhaps want to bail out of the blocking read, don't you?
[18:13:15] <dave0> gilberth: yes
[18:13:16] <pl> once a kernel update in google had to be rolled back and kernel patched to remove a change... because Google code was not ready to handle EINTR from syscalls
[18:13:38] <gilberth> lol
[18:14:59] <pl> gilberth: it's one of the many things where linux behaviour resulted in code that was not compatible with POSIX due to unforeseen assumptions (like all the code that isn't checking result value of malloc() and such failing on Solaris but working "fine" on Linux)
[18:15:35] <pl> gilberth: the change was that up to some kernel version the documented behaviour was that Linux might return EINTR, but the actual behaviour was that unless something catastrophic happened, a signal would not interrupt I/O
[18:15:46] <gilberth> Heh, what is fine in malloc returning NULL?
[18:17:08] <gilberth> pl: If the man page says there can be EINTR, there can be EINTR. I have the habit to look for EAGAIN and EINTR just in case. Doesn't hurt.
[18:17:14] <pl> gilberth: malloc and other functions allocating memory return errors when memory cannot be guaranteed on Solaris unless you explicitly call for uncomitted
[18:17:31] <gilberth> But this is why I usually don't advise not using stdio e.g.
[18:17:38] <pl> Linux in default configuration always succeeds memory requests then wakes up OOM-killer if they cannot be provided after all
[18:18:01] <sham1> malloc returning NULL is supposed to be your signal that "yeah, we're out of memory chief", but since Linux indeed overcommits... that doesn't exactly work
[18:18:14] <gilberth> Ah "overcommit", right?
[18:18:43] <pl> ok, AMD, we need to talk about why you had the the bright idea to number GPRs as 65-255
[18:18:44] <gilberth> Linux just tries to be helpful.
[18:18:47] <sham1> The real problem is that people build applications that assume that behaviour
[18:19:37] <sham1> Making the programs a) unportable and b) very confusing when the program actually dies.
[18:19:47] <pl> https://usercontent.irccloud-cdn.com/file/xrKo3otO/am29k-register-layout.png
[18:20:00] <gilberth> Maybe people don't realize that there are different operating systems and that Linux at times has its own idea how to do thing.
[18:20:09] <sham1> It's supposedly about "avoiding the underutilization of physical RAM" which I at least find to just be bollocks
[18:21:10] <pl> sham1: it makes sense if you look at it from the perspective of desktop OS running on underpowered machines, i.e. Linux origins :P
[18:21:27] <gilberth> pl: Plenty of registers to play with!
[18:21:49] <pl> gilberth: yes, 192 GPRs, 64 global and 128 local
[18:22:05] <gilberth> Can't you turn overcommit off?
[18:22:23] <pl> gilberth: you can turn overcommit off, but the behaviour is hairy (I know, I tested it)
[18:22:32] <pl> and it exposes things like MMAP_NORESERVE being lies
[18:22:54] <gilberth> ok. I see.
[18:23:37] <gilberth> pl: What's your interest in 29k?
[18:26:41] <sham1> pl: fair enough. Although I don't know enough of the history to be able to say whether the overcommit was a Linus-original or if it was added later
[18:30:09] <pl> sham1: probably somewhere around when pagecache became a thing
[18:31:02] <pl> gilberth: General interest in similar designs, plus all the rumours of "AMD used a RISC with x86 translator" I heard decades ago, plus Am29k being used in aviation
[18:33:38] <semz> Overcommit is kind of necessary because fork() is a dumbass design. But there's also the problem that when malloc() returns NULL, it's usually way too late to handle the problem.
[18:34:13] <semz> A condition system could have prevented this.
[18:44:58] <semz> So it's not really fair to blame Linux for this.
[18:52:02] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:3df8:ed64:e02c:f418)
[19:07:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[19:18:40] *** Inline__ is now known as Inline
[19:36:21] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[19:46:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:48:38] *** Joins: Catie (~user@user/catie)
[19:53:45] *** Joins: razetime (~quassel@117.254.35.152)
[20:00:30] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[20:12:15] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Remote host closed the connection)
[20:26:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:38:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[20:40:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:43:10] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:47:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[21:03:17] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[21:03:24] *** Quits: Brucio-61 (~Brucio-39@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[21:20:28] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:21:12] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:30:52] <gilberth> Is there any language that accepts "0 <= n < 10" as "0 <= n" and "n < 10"?
[21:31:53] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:33:04] <semz> I think Python does this
[21:33:35] <gilberth> Oh!
[21:35:57] <semz> >>> 0 <= 6 < 5 # False   >>> 0 <= (6 < 5) # True   >>> (0 <= 6) < 5 # True   Yeah seems that way.
[21:36:35] <semz> Don't think I've ever seen it in the wild though.
[21:43:38] *** Quits: razetime (~quassel@117.254.35.152) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:43:57] *** Joins: razetime (~quassel@117.254.35.152)
[21:44:27] *** Quits: razetime (~quassel@117.254.35.152) (Client Quit)
[21:44:38] <gilberth> Ok. It seems to do the right thing. I was wondering because we almost have that with (<= 0 n 9) or (< -1 n 10), what we don't have is these half-open intervals.
[21:46:08] <gilberth> Unless you say (typep x '(real 0 (,n)) :-)
[21:46:16] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:07:52] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:10:55] *** Joins: Oddity (~Oddity@user/oddity)
[22:21:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[22:42:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[22:44:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:51:12] <Alfr> gilberth, mathematica does that too.
[23:15:24] <pjb> #hn gilberth invalid syntax. You need a backquote somewhere!
[23:16:21] <pjb> gilberth: IIRC, in Eiffel, you can write 0<=n<10
[23:17:15] <rotateq> Eiffel :D
[23:17:35] <rotateq> so a "real" OO language :P
[23:17:42] <pjb> Yes, a very good language.
[23:17:59] <shka> angry smalltalk noises 
[23:18:54] <rotateq> pjb: tell me what you really think of it :)
[23:19:07] <pjb> Eiffel is a very good language.
[23:19:15] <rotateq> oki
[23:19:31] <pjb> But then, it's used even less than lisp, soâ¦
[23:19:53] <rotateq> i see this contract idea like a similar idea as dependent types maybe
[23:21:07] <pjb> pre- and post- conditions. 
[23:21:11] <rotateq> yes
[23:32:13] <rotateq> i like learning things that make sense and expand my mind in the long run
[23:38:25] <pjb> rotateq: the interesting thing in Eiffel contrary to languages like C++, is that it uses parameter covariance https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)
[23:39:32] <rotateq> okay :)
[23:40:00] <rotateq> I know those words from theoretical physics
[23:41:34] <rotateq> maybe I should read some of Bertrand Meyers writings when we learn just fake OOP
[23:41:44] *** Quits: mala (~mala@user/malaclyps) (Quit: ZNC 1.6.1 - http://znc.in)
[23:42:29] *** Joins: mala (~mala@user/malaclyps)
[23:43:25] <rotateq> but before to make better progress the rest of the Keene book and AMOP of course :)
[23:46:40] <shka> https://www.cnbc.com/2022/03/28/us-bonds-treasury-yields-invert-flashing-recessionary-warning-sign.html
[23:46:42] <shka> yay
[23:47:09] <shka> so global pandemic and embryo WW3 are bad for economy 
[23:48:44] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[23:48:48] <rotateq> indeed
[23:49:52] <shka> undiscovered country 
