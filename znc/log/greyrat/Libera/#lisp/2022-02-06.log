[00:00:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:01:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:15:57] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[00:18:09] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[00:19:21] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[00:20:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:22:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:24:57] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[00:26:36] *** Joins: kevingal (~quassel@80.233.61.220)
[00:27:11] *** Joins: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net)
[00:29:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:31:47] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:44:17] *** Joins: dlowe (~dlowe@user/dlowe)
[00:50:09] *** Quits: MiningMarsh (~MiningMar@user/miningmarsh) (Quit: ZNC 1.8.2 - https://znc.in)
[00:51:01] *** Joins: MiningMarsh (~MiningMar@user/miningmarsh)
[00:54:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:05:49] *** Quits: kevingal (~quassel@80.233.61.220) (Ping timeout: 256 seconds)
[01:08:39] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[01:13:57] *** Joins: dre (~dre@2001:8003:c932:c301:3356:3f6e:5d90:d014)
[01:14:37] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:b5bf:8685:d5d5:da42) (Ping timeout: 240 seconds)
[01:16:22] *** Quits: dra (~dra@2a04:4540:6411:e900:7815:ce5f:337c:547c) (Quit: Leaving)
[01:20:41] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[01:29:54] *** Joins: dlowe (~dlowe@user/dlowe)
[01:31:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:31:12] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[01:34:08] *** Joins: cuz` (~user@50.226.229.246)
[01:47:11] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:49:15] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1042-static.midco.net) (Ping timeout: 250 seconds)
[01:53:20] *** Joins: molson_ (~molson@172-103-21-94-dynamic.midco.net)
[01:53:54] *** Quits: wacki (~wacki@87.122.86.194) (Quit: Leaving.)
[01:58:23] *** Quits: cuz` (~user@50.226.229.246) (Remote host closed the connection)
[01:58:34] *** Joins: cuz` (~user@50.226.229.246)
[02:16:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:19:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:28:39] *** Quits: dmiles_afk (~dmiles@c-98-232-203-68.hsd1.wa.comcast.net) ()
[02:39:51] *** Quits: emad (~emad@156.214.198.176) (Quit: Leaving)
[02:45:06] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[02:46:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[02:47:49] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[02:49:09] *** Joins: gproto23 (~gproto23@user/gproto23)
[02:54:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:01:54] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[03:14:47] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[03:31:57] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[03:34:07] *** Quits: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[03:34:07] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[03:34:16] *** Joins: xiews (~wxie@101.93.17.62)
[03:53:48] *** Joins: dlowe (~dlowe@user/dlowe)
[03:54:15] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[03:57:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[04:03:45] *** Quits: szos (~user@178.74.52.55) (Ping timeout: 256 seconds)
[04:10:20] *** Joins: unyu (~pyon@user/pyon)
[04:31:51] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:33:45] *** Joins: jao (~jao@68.235.43.173)
[04:51:37] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:57:00] *** Quits: yauhsien_ (~Yau-Hsien@61-231-25-133.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[05:32:30] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:35:02] *** Joins: dlowe (~dlowe@user/dlowe)
[05:37:15] *** Quits: xiews (~wxie@101.93.17.62) (Ping timeout: 256 seconds)
[05:37:57] *** Joins: xiews (~wxie@2409:891f:1824:56f:fada:8d46:7c65:13f6)
[05:40:00] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[05:40:02] *** Joins: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[05:41:57] *** Quits: xiews (~wxie@2409:891f:1824:56f:fada:8d46:7c65:13f6) (Ping timeout: 240 seconds)
[05:44:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:45:47] *** Joins: xiews (~wxie@180.171.128.57)
[05:46:04] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[05:56:27] *** Quits: jkordani (~jkordani@2601:146:300:d2d0:92d:2ad9:1b61:28f7) (Quit: Client closed)
[05:56:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 256 seconds)
[05:57:28] *** Quits: jao (~jao@68.235.43.173) (Remote host closed the connection)
[06:02:45] *** Quits: dlowe (~dlowe@user/dlowe) (Ping timeout: 256 seconds)
[06:13:51] *** Joins: pingpongball (~pingpongb@43.228.192.107)
[06:13:57] <pingpongball> Hey
[06:14:04] <pingpongball> Anybody provide more pros
[06:14:06] <pingpongball> https://www.slant.co/versus/110/2105/~python_vs_common-lisp
[06:22:51] *** Quits: pingpongball (~pingpongb@43.228.192.107) (Quit: Client closed)
[06:27:34] *** Joins: pingpongball (~pingpongb@43.228.192.107)
[06:28:55] *** Joins: xsperry (~xs@user/xsperry)
[06:30:21] *** Joins: yoonkn (~user@175.197.208.79)
[06:30:47] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[06:31:07] <sm2n> stability
[06:33:31] <pingpongball> how to define two variables using let at once.
[06:33:35] <pingpongball> sm2n https://bpa.st/CCGQ
[06:33:59] <pingpongball> i see there is *let** but it didnt worked
[06:34:31] <sm2n> fix your formatting
[06:34:50] <sm2n> is that elisp?
[06:34:57] <pingpongball> which isnt syntax correct
[06:35:32] <sm2n> I don't understand
[06:36:07] <pingpongball> it is elisp
[06:36:26] <sm2n> ok
[06:36:59] *** Quits: cuz` (~user@50.226.229.246) (Ping timeout: 256 seconds)
[06:37:14] <sm2n> well 1. stop writing elisp like C; if you select the whole thing and press TAB it should indent it for you
[06:37:22] <sm2n> don't put trailing parens on a separate line
[06:37:35] <sm2n> as for why it doesn't work, your body code is in the let bindings list
[06:37:58] <sm2n> which again, is impossible to see immediately because your code is not formatted correctly
[06:41:51] *** Quits: pingpongball (~pingpongb@43.228.192.107) (Ping timeout: 256 seconds)
[06:51:20] *** Quits: cylb (~cylb@pool-173-76-181-138.bstnma.fios.verizon.net) ()
[07:04:56] *** Quits: xiews (~wxie@180.171.128.57) (Ping timeout: 245 seconds)
[07:07:22] *** Joins: jao (~jao@68.235.43.173)
[07:12:48] *** Joins: xiews (~wxie@2409:891f:1824:56f:1199:dcf0:5e19:71d5)
[07:13:35] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:4100:dd4:ee5e:72a7)
[07:14:41] *** Joins: cuz` (~user@50.226.229.246)
[07:19:15] *** Quits: cuz` (~user@50.226.229.246) (Ping timeout: 256 seconds)
[07:20:20] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 250 seconds)
[07:24:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:25:51] *** Joins: Guest61 (~Guest61@2405:201:3003:8024:348e:466c:a606:1eb8)
[07:26:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:27:24] *** Quits: Guest61 (~Guest61@2405:201:3003:8024:348e:466c:a606:1eb8) (Client Quit)
[07:33:17] *** Quits: xiews (~wxie@2409:891f:1824:56f:1199:dcf0:5e19:71d5) (Ping timeout: 240 seconds)
[07:35:22] *** Joins: xiews (~wxie@101.93.17.62)
[07:46:25] <aeth> Unlike most languages, Lisps make scope explicit. Not indenting LET/LET* properly defeats this property of the language.
[07:47:06] <aeth> it's quite clear with something like this that x is contained to that scope: (let ((x 42)) (+ x x))
[07:47:26] <aeth> but once you use more than one line, you really have to pay attention to where you put the lines and how you indent it
[07:53:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:56:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:08:22] <White_Flame> IRC also doesn't tell you when you're replying to someone who left
[08:08:44] * White_Flame almost replied before, too :)
[08:10:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:12:14] *** Joins: lispnik (~lispnik@68.21.148.119)
[08:12:43] *** Joins: Akiva (~Akiva@user/Akiva)
[08:15:34] <moon-child> my client colours nicknames of users who have left differently
[08:16:43] <White_Flame> in the scrollback?
[08:16:57] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[08:18:23] <moon-child> yes
[08:18:41] <White_Flame> cool.  I just try to remember to tab-complete their name to check
[08:28:10] *** Quits: lispnik (~lispnik@68.21.148.119) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:28:12] *** Joins: akarle (~akarle@user/akarle)
[08:33:45] <mfiano> I created #clprojects and edited CLiki appropriately. I talk to myself a lot when I'm designing a new project, mostly for the log of ideas, and thought it could be a common ground rather than some scratch log file.
[08:35:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:35:43] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 250 seconds)
[08:43:41] *** Quits: jao (~jao@68.235.43.173) (Ping timeout: 256 seconds)
[08:47:41] *** Joins: akarle (~akarle@user/akarle)
[08:52:33] *** Joins: lispnik (~lispnik@68.21.148.119)
[09:01:02] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:01:17] *** Quits: xiews (~wxie@101.93.17.62) (Ping timeout: 240 seconds)
[09:03:19] *** Joins: xiews (~wxie@2409:891f:1824:56f:8f2c:eb12:6e6d:6027)
[09:06:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:08:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:09:09] *** Quits: lispnik (~lispnik@68.21.148.119) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:11:27] <sm2n> aeth: JS is the worst criminal here
[09:12:22] <sm2n> They have this concept of "temporal dead zone" which comes directly from their braindead scoping rules
[09:12:28] <sm2n> <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz>
[09:23:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:25:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:27:13] <moon-child> sm2n: I don't think 'here' is a necessary qualification :)
[09:27:42] <sm2n> I dunno, there are languages worse than JS on other things
[09:27:50] <sm2n> for ex. segfaulting
[09:29:18] <moon-child> why's a segfault worse than, say, a 'type error: null does not have properties'?
[09:31:40] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:d8d5:ad63:210:577a)
[09:32:26] <moon-child> (or, for that matter, 'There is no applicable method for the generic function SOME-ACCESSOR when called with arguments (NIL)')
[09:34:27] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:36:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:39:01] <sm2n> Yes, I suppose that was badly phrased
[09:39:08] <sm2n> a segfault is the good scenario
[09:39:15] <sm2n> but â€” memory corruption
[09:47:06] <edgar-rft> luckily my memory is so corrupted that I already pretty much forgot the shittyness of other languages I used once :-)
[09:48:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:49:29] <moon-child> memory corruption is just a symptom
[09:49:41] <moon-child> you can always have 'memory corruption' at the level of your abstracitons
[09:49:54] <moon-child> the problem comes when it's difficult, cumbersome, or even impossible to create such abstractions
[09:50:23] <moon-child> it's easy to write int x[] = {1, 2, 3}; x[5], but hard to write int_array x = make_int_array((int[]){1, 2, 3}, 3)
[09:50:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:50:38] <moon-child> however it's equally easy to write (aref (vector 1 2 3) 5) and (my-aref (my-vector 1 2 3) 5)
[09:53:18] *** Joins: Everything (~Everythin@37.115.210.35)
[09:58:00] <edgar-rft> Good morning Everything! :-)
[10:02:05] <sm2n> That is true, you can write C in any language
[10:02:30] <sm2n> but only in some languages does that let you run shellcode
[10:03:09] <sm2n> though you could argue that some forms of weird machines are buffer overflows in disguise, I suppose, to continue that line of thought
[10:03:12] *** Parts: Everything (~Everythin@37.115.210.35) ()
[10:03:24] <moon-child> in c, shellcode is generally dead
[10:03:48] <moon-child> even ROP can be trivially defeated by switching calling conventions, but compilers are ... reluctant
[10:03:52] <moon-child> for ... reasons
[10:05:39] <sm2n> I don't think W^X is universal yet
[10:06:24] <moon-child> you don't need W^X enforced.  You just need ... not X.  Which you generally get
[10:06:33] <sm2n> for calling conventions, compatibility, I would guess, though that hasn't stopped glibc devs historically (I know, they have backwards compatibility and not forwards, but still)
[10:07:02] <edgar-rft> sm2n: C is very low-level, not all languages provide such a destructive ways of programming. Destructive meant in a neutral sense, most programming languages for example try to save you from producing segfaults by *not* providing direct memory manipulation. What means you can't write C in *all* languages.
[10:07:09] <moon-child> very few c applications have genuine use for executable memory.  Moreover, if you _do_ have use for executable memory, language safety isn't going to save you; you could just generate the wrong code
[10:07:15] <sm2n> what alternate calling convention would you propose?
[10:07:23] <moon-child> separate call/data stacks
[10:07:29] <moon-child> (NB. This is completely backwards compatible!)
[10:07:52] <sm2n> It isâ€½
[10:08:16] <sm2n> Actually, that makes sense
[10:08:44] <sm2n> Why have I never heard of that approach?
[10:08:46] <moon-child> there is some complication with calling a new-abi function from an old-abi one.  But the reverse works fine
[10:09:28] <sm2n> Also, yes, I agree. But it's not fair to read so much into a simple jab at a prone target :)
[10:12:52] <sm2n> Oh, it's listed very sneakily on wikipedia
[10:12:54] <sm2n> https://en.wikipedia.org/wiki/Return-oriented_programming#Against_control_flow_attacks
[10:13:05] <sm2n> doesn't even have a descriptive name
[10:19:28] *** Joins: rtypo (~alex@user/rtypo)
[10:22:24] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[10:22:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[10:22:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:24:17] *** Quits: xiews (~wxie@2409:891f:1824:56f:8f2c:eb12:6e6d:6027) (Ping timeout: 240 seconds)
[10:24:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:30:19] *** Joins: xiews (~wxie@2409:891f:1824:56f:8f2c:eb12:6e6d:6027)
[10:34:46] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[10:36:50] *** Joins: letto (~letto@86.120.81.105)
[10:41:19] *** Joins: alfonsox (~quassel@103.87.57.95)
[10:44:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:47:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:13:59] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:2509:bf2b:aa9a:d931)
[11:18:37] *** Quits: xiews (~wxie@2409:891f:1824:56f:8f2c:eb12:6e6d:6027) (Ping timeout: 240 seconds)
[11:22:08] *** Joins: xiews (~wxie@2409:891f:1824:56f:8f2c:eb12:6e6d:6027)
[11:31:41] *** Joins: wacki (~wacki@87.122.93.168)
[11:38:53] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:08:17] *** Quits: xiews (~wxie@2409:891f:1824:56f:8f2c:eb12:6e6d:6027) (Ping timeout: 240 seconds)
[12:17:32] *** Joins: yauhsien (~Yau-Hsien@61-231-25-133.dynamic-ip.hinet.net)
[12:18:41] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:25:57] *** Joins: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce)
[12:31:40] *** Quits: akarle (~akarle@user/akarle) (Remote host closed the connection)
[12:47:27] *** Joins: xiews (~wxie@101.93.17.62)
[12:47:42] *** Joins: shka (~herr@109.231.0.226)
[12:49:26] *** Joins: akarle (~akarle@user/akarle)
[13:08:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:10:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:20:04] *** Joins: lisp123 (~lisp123@45.86.203.177)
[13:26:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c49f:99ea:fe:b5c8)
[13:26:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c49f:99ea:fe:b5c8) (Changing host)
[13:26:32] *** Joins: skapata (~Skapata@user/skapata)
[13:27:59] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[13:39:36] *** Quits: lisp123 (~lisp123@45.86.203.177) (Quit: Leaving...)
[13:45:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:55:57] *** Quits: xiews (~wxie@101.93.17.62) (Ping timeout: 250 seconds)
[14:02:22] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:04:16] *** Joins: Everything (~Everythin@37.115.210.35)
[14:05:51] *** Parts: Everything (~Everythin@37.115.210.35) ()
[14:16:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:26:26] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:27:39] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:27:43] *** Lord_of_Life_ is now known as Lord_of_Life
[14:29:45] *** Quits: santiagopim (~user@84.78.243.45) (Remote host closed the connection)
[14:29:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[14:30:26] *** Joins: amk (~amk@109.255.169.126)
[14:36:31] *** Joins: Arw- (~Arwalk@lfbn-dij-1-961-160.w90-125.abo.wanadoo.fr)
[14:37:17] *** Quits: Arw| (~Arwalk@lfbn-dij-1-961-160.w90-125.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[14:39:47] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[14:40:18] *** Joins: xiews (~wxie@61.152.201.154)
[14:40:54] *** Joins: amb007 (~a_bakic@209.104.204.77.rev.sfr.net)
[14:41:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[14:43:05] *** Joins: aeth (~aeth@user/aeth)
[14:45:13] *** Quits: amb007 (~a_bakic@209.104.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[14:45:21] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:10:57] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:15:43] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[15:15:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:29:02] *** Joins: szos (~user@178.74.52.55)
[15:29:02] *** szos is now known as shozo
[15:31:37] *** Quits: xiews (~wxie@61.152.201.154) (Ping timeout: 240 seconds)
[15:32:17] *** Quits: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[15:32:17] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[15:39:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[15:40:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:42:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:54:02] *** Joins: lisp123_ (~lisp123@45.86.203.177)
[15:54:43] *** Quits: lisp123_ (~lisp123@45.86.203.177) (Client Quit)
[15:57:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[16:05:07] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[16:10:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:26:51] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:47bd:184a:3faf:50d) (Quit: Client closed)
[16:41:52] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[16:42:34] *** Joins: yauhsien_ (~Yau-Hsien@61-231-25-133.dynamic-ip.hinet.net)
[16:43:04] *** Quits: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca) (Remote host closed the connection)
[16:43:34] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[16:43:34] *** Quits: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca) (Remote host closed the connection)
[16:45:55] *** Quits: yauhsien (~Yau-Hsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:50:00] *** Joins: treflip (~user@user/treflip)
[17:00:19] *** Joins: dlowe (~dlowe@user/dlowe)
[17:01:45] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[17:02:44] *** Joins: dlowe (~dlowe@user/dlowe)
[17:19:18] *** Quits: ultera (~Thunderbi@user/ultera) (Quit: ultera)
[17:34:34] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:68d8:ec99:8e45:2472)
[17:39:15] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[17:39:17] *** Joins: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[17:49:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:53:17] *** Joins: occ (~occ@user/occ)
[17:58:36] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[18:17:20] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[18:20:57] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 240 seconds)
[18:21:41] *** Quits: shozo (~user@178.74.52.55) (Ping timeout: 256 seconds)
[18:22:37] *** Joins: psf (~pi@206.55.172.18)
[18:27:46] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c12f:e1ba:6835:4862)
[18:27:46] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c12f:e1ba:6835:4862) (Changing host)
[18:27:46] *** Joins: skapata (~Skapata@user/skapata)
[18:29:44] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[18:50:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:53:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:57:37] *** Quits: HDurer (~hdurer@104.132.45.86) (Ping timeout: 256 seconds)
[19:04:47] *** Parts: mason (~mason@redhat/mason) ()
[19:05:27] *** Quits: wyrd_ (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:23:11] *** Joins: jao (~jao@static-68-235-44-10.cust.tzulo.com)
[19:37:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:44:06] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[19:58:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[20:12:32] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[20:20:09] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[20:24:37] *** Quits: alfonsox (~quassel@103.87.57.95) (Remote host closed the connection)
[20:33:30] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[20:38:15] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:68d8:ec99:8e45:2472) (Ping timeout: 256 seconds)
[20:39:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:41:10] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[20:41:44] *** Joins: derelict (derelict@user/derelict)
[20:50:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:51:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:51:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[20:52:27] *** Joins: amb007 (~a_bakic@209.149.22.93.rev.sfr.net)
[20:52:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:53:51] *** Joins: cuz` (~user@23-30-167-57-static.hfc.comcastbusiness.net)
[21:16:39] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[21:21:00] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[21:22:31] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[21:36:06] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:36:52] *** Quits: cuz` (~user@23-30-167-57-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[21:44:48] *** Quits: amb007 (~a_bakic@209.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:45:31] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[21:45:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:47:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:47:52] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:d8d5:ad63:210:577a) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:50:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:53:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[21:54:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:57:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:57:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[22:00:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[22:00:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:02:22] *** Joins: masinter_ (~igloo@c-73-158-116-21.hsd1.ca.comcast.net)
[22:03:15] *** Joins: strajder (~strajder@user/strajder)
[22:06:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:06:35] *** Quits: masinter_ (~igloo@c-73-158-116-21.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:07:17] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[22:07:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:07:51] <ASau> sm2n: Forth lovers are expecting you!
[22:08:19] <ASau> sm2n: though I recommend strongly against it.
[22:08:36] <sm2n> ASau: why?
[22:10:33] <ASau> Why what? Why expecting or why against?
[22:11:34] <sm2n> why expecting
[22:12:16] <ASau> Because it is the most elaborate case when data and control stacks are separated.
[22:12:42] <sm2n> oh hm
[22:12:44] <sm2n> interesting
[22:13:19] <ASau> But I recommend strongly against it.
[22:13:25] <ASau> Better read about Krivine machines.
[22:13:50] <ASau> It is much less known example, yet it is more sound and thus more useful.
[22:14:59] <ASau> O'Caml and Haskell people are waiting you then. :D
[22:18:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[22:19:57] <ASau> sm2n: alternatively, you can drop typing and have untyped predecessor of ML family.
[22:24:29] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 252 seconds)
[22:24:41] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:35:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:38:48] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:5873:aea:dc30:5c15)
[22:40:25] *** Joins: Thom2503 (~Thom2503@248-217-158-163.dynamic.caiway.nl)
[22:40:53] <sm2n> hah
[22:41:07] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[22:44:38] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:45:21] <moon-child> untyped ml is just lambda calculus
[22:45:25] <moon-child> which sucks for usability
[22:48:23] *** Joins: santiagopim (~user@44.pool90-167-219.static.orange.es)
[22:51:17] <ASau> moon-child: it is very strange to read this on Lisp channel.
[22:51:36] <moon-child> it is?
[22:51:41] <ASau> I agree that reading it on Scheme channel would be even stranger.
[22:51:58] <moon-child> lisp has strong typing.  lambda calculus does not
[22:52:14] <ASau> Strong typing in which sense?
[22:52:28] <sm2n> lisp always makes progress
[22:52:29] <moon-child> in the sense that you can't, say, add a string to a number
[22:52:30] <ASau> That "(+ 2 nil)" raises error?
[22:52:38] <sm2n> untyped lambda calculus doesn't
[22:52:41] <moon-child> lc is more _expressive_ than ml, but you pay for that expressiveness
[22:52:56] <moon-child> sm2n: what do you mean by 'progress'?
[22:53:10] <energizer> "If we comment out the first shift, we already know the result, it is (2)" https://en.wikipedia.org/wiki/Delimited_continuation
[22:53:35] <energizer> why is it evaluating the second one first?
[22:54:09] <sm2n> I mean in the PLT sense, you always have a step to do or return a value (which includes exceptions)
[22:54:19] <sm2n> whereas lc can get stuck
[22:54:37] <sm2n> let me open up TAPL and I'll give a ref
[22:54:37] <moon-child> oh
[22:54:45] <moon-child> lc doesn't run, so it can't get stuck
[22:54:49] <ASau> moon-child: how does that differ from "+" clearing stacks or just stopping algorithm, when it detects non-numerical argument?
[22:55:04] <sm2n> yes, it's formulated in terms of reduction
[22:55:08] <moon-child> it is not
[22:55:12] <moon-child> lc does not specify an evaluation strategy
[22:55:29] <sm2n> I mean proofs of progress are
[22:55:39] <sm2n> that's how you prove correctness for type systems
[22:55:41] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[22:55:58] <moon-child> ASau: how would you detect if something is 'numeric' in  lambda calculus?  There are no numbers; they are an abstraction that you build
[22:56:00] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:56:19] <ASau> moon-child: you are lost, we've been talking about Krivine machines and how they relate to programming languages.
[22:56:45] <moon-child> sm2n: ah--sure.  It doesn't seem like a practical concern, though
[22:56:53] <moon-child> ASau: oh.  I missed that tidbit!
[22:57:05] *** Quits: Thom2503 (~Thom2503@248-217-158-163.dynamic.caiway.nl) (Remote host closed the connection)
[22:57:22] <ASau> In more detailed elaborations you are just fine having any objects of any sane and allowed type.
[22:57:48] <energizer> nm, moving to #scheme
[22:58:03] <moon-child> sm2n: (in particular, cases of irreducibility seem no likelier to come up than ordinary type errors, and might even result from them)
[22:58:25] <sm2n> TAPL: "3.5.15 Definition: A closed term is _stuck_ if it is in normal form but not a value. â–¡"
[22:58:45] <sm2n> well that's the thing
[22:59:01] <sm2n> in untyped lambda calculus whenever you have a type error you get stuck
[22:59:17] <sm2n> there's no recovery strategy or anything, that's the point
[22:59:19] <moon-child> I don't think it happens 'whenever'
[22:59:20] <sm2n> it's formalized that way
[22:59:26] <moon-child> you will also get nonsense results sometimes
[22:59:38] <sm2n> What do you mean?
[23:00:13] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[23:00:21] <ASau> Personally, I don't follow either.
[23:00:29] <sm2n> you mean like using church numerals as regular functions?
[23:00:34] <ASau> Sure, you can implement pure lambda calculus, but why?
[23:01:00] <moon-child> sm2n: yes, something like that.  When you use a term in a different fashion than you intended to
[23:01:03] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:01:12] <sm2n> right
[23:01:35] *** Joins: Thom2503 (~Thom2503@248-217-158-163.dynamic.caiway.nl)
[23:01:35] <ASau> sm2n: now I don't follow even when starting from here.
[23:02:20] <ASau> Addition of numerals defined as application of one numeral to another, or?
[23:02:37] <moon-child> yeah that specific case doesn't make sense
[23:02:57] <sm2n> I think I was assuming that there was at least one non-function value, like lambda calculus with additive natural numbers
[23:02:57] <moon-child> but imagine using a church-encoded list where you meant to use a boolean
[23:03:04] <ASau> Repetitive application of some function is defined as application of numeral to said function, or?
[23:03:44] <sm2n> yes, well you could use it wrong, you could do for ex 1_c f_c
[23:04:03] <sm2n> where _c denotes that they are church encoded
[23:04:25] <ASau> char *x= "asdf"; int y = 10; x+y; /* C */
[23:04:44] <ASau> How does that differ?
[23:05:15] <sm2n> I sentence you to the array hole!
[23:05:26] <ASau> char x = 'a'; int y = 10; x+y;
[23:05:29] <moon-child> c is not known for being very strongly typed
[23:06:45] <ASau> Lambda calculus too.
[23:07:48] <ASau> Note that I don't bring up examples from _really_ untyped languages, like one of mentioned above.
[23:08:06] <sm2n> yeah, I'm not entirely sure what we're talking about now either
[23:08:18] <sm2n> it's one of those days
[23:08:31] <ASau> Anyway.
[23:08:52] <ASau> sm2n: if you're interested in the topic of separation of data and control stacks, I suggest that you read about Krivine machines.
[23:09:01] <ASau> First.
[23:09:07] *** Joins: ewwegweg (~ewwegweg@user/ewwegweg)
[23:09:12] <ASau> Only then, optionally, you can read about Forth.
[23:10:01] <sm2n> lol okay
[23:10:02] <ASau> If you're acquainted to KMs, you understand that programming in Forth feels like operating some primitive simulation of KM directly.
[23:10:23] <ASau> Something like programming Turing machine directly.
[23:10:55] <ASau> Also, you may refresh your knowledge of SECD.
[23:11:03] <ASau> Just to feel relation.
[23:11:20] <sm2n> what's the canonical reference?
[23:11:30] <ASau> Ufff....
[23:11:49] <ASau> Do you mind searching it youself?
[23:12:14] <sm2n> sure, I just asked in case you had something off the top of your head you like
[23:12:23] <ASau> I just don't have my archive reachable, and thus I'll have to do it just like you.
[23:13:29] <ASau> It _may_ be useful, it you start searching around works of Xavier Leroy of O'Caml.
[23:14:22] <ASau> Or maybe his early works from the time preceding O'Caml.
[23:17:14] *** Quits: Thom2503 (~Thom2503@248-217-158-163.dynamic.caiway.nl) (Quit: Leaving...)
[23:18:27] <masinter> i need a glossery of current irc slang. O'Caml= ????
[23:18:36] <ASau> While we are on such deeply theoretical topics...
[23:18:54] <ASau> Does anyone know how one could measure complexity of algorithm in algol-type language?
[23:19:11] <masinter> does the language matter?
[23:19:18] <ASau> Yes.
[23:19:31] <ASau> Target application is Java and C.
[23:20:05] <ASau> No C++ with all its heavy templatology.
[23:20:38] <masinter> is C "algol-like"?
[23:20:43] <ASau> Sure.
[23:21:13] <masinter> it depends on the linearity of the language to implementation cost
[23:21:13] <moon-child> 'kolmogorov complexity', I think?
[23:22:09] <masinter> in Lisp it's easy to write things that are order N^2 in list length
[23:22:34] <moon-child> oh, computational complexity
[23:22:47] <ASau> moon-child: something in the line of Kolmogorov, yes.
[23:22:56] <moon-child> oh nvm
[23:23:05] <ASau> Run-time/space complexity doesn't matter.
[23:24:02] <ASau> I need something to estimate probability of mistake introduced when implementing/reimplementing algorithm.
[23:25:27] <masinter> who would make the mistake
[23:25:41] <ASau> Theoretically, there are some nearly anecdotical references to number of lines, but, I'm afraid, this depends on formatting, plus it doesn't take into consideration modern tooling like syntax highlighting.
[23:26:00] <masinter> doesn't it depend more on the mistake-makers frame of reference?
[23:26:22] <moon-child> yeah doesn't make much sense to me either
[23:26:47] <masinter> I'd think these days you'd use AI/Machine learning to figure out what factors are a good prediction
[23:26:47] <moon-child> if you reimplement an algorithm and make a small mistake, is that likely to affect the overall complexity of the implementation?
[23:27:08] <moon-child> and: what's to say you don't simplify--or complicate--the implementation when porting it anyway?
[23:27:31] <masinter> how likely is it that the result will cause the computer running the algorithm to explode
[23:27:53] <moon-child> :D
[23:27:57] <moon-child> 'lp0 on fire'
[23:29:16] <masinter> why isn't porting software like language translation
[23:29:39] <moon-child> cuz the latter is called 'compilation'
[23:29:44] <moon-child> (kinda kinda)
[23:30:26] <masinter> someone gave me a file from Greenblat's garage archives tapes
[23:30:52] <masinter> written for LMI lisp... called "Interlisp"
[23:31:52] <masinter> but it was way to small
[23:31:56] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[23:33:45] <masinter> beach i'd like an implementation of LOOP to add to medley if there is one with a suitable license
[23:33:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:34:21] <moon-child> did you catch earlier discussion of sicl loop in #commonlisp?
[23:34:43] <moon-child> anyway https://github.com/robert-strandh/SICL/tree/master/Code/Loop
[23:34:45] <masinter> yes, he said ask in here or on sicl
[23:34:58] <moon-child> not here.  He is not here
[23:34:58] *** Joins: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net)
[23:35:09] <moon-child> this is #lisp, not #commonlisp 
[23:35:16] <masinter> sorry i'm rusty on irc
[23:35:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:36:43] *** Joins: robin__ (~robin@user/terpri)
[23:37:04] *** Quits: robin (~robin@user/terpri) (Ping timeout: 250 seconds)
[23:45:35] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:2509:bf2b:aa9a:d931) (Ping timeout: 256 seconds)
[23:48:39] *** Joins: Akiva (~Akiva@user/Akiva)
[23:55:16] *** Joins: inky (~inky@188.115.245.22)
[23:56:44] *** Joins: yauhsien (~Yau-Hsien@61-231-29-69.dynamic-ip.hinet.net)
[23:58:37] *** Quits: robin__ (~robin@user/terpri) (Ping timeout: 240 seconds)
[23:59:45] *** Quits: yauhsien_ (~Yau-Hsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
