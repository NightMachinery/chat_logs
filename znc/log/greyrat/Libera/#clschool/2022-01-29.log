[00:21:05] *** Quits: artchad (~user@public-gprs225103.centertel.pl) (Read error: Connection reset by peer)
[00:33:49] *** Quits: tewi (~tewi@apn-95-40-157-204.dynamic.gprs.plus.pl) (Ping timeout: 240 seconds)
[00:33:57] *** Quits: bremner (~bremner@notmuch/developer/bremner) (Quit: Coyote finally caught me)
[00:35:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:36:39] *** Quits: neceve (~quassel@2.26.93.228) (Read error: Connection reset by peer)
[00:36:53] *** Joins: aeth (~aeth@user/aeth)
[00:54:29] *** Joins: dra (~dra@2a04:4540:6410:fa00:1daf:f543:2c33:ce21)
[01:22:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[01:23:54] *** Joins: aeth (~aeth@user/aeth)
[01:33:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[01:33:31] *** Joins: Oladon (~olad@98.43.81.226)
[01:35:20] *** Joins: aeth (~aeth@user/aeth)
[01:46:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:21:14] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[02:22:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[02:22:59] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 252 seconds)
[02:24:23] *** Joins: aeth (~aeth@user/aeth)
[02:24:40] *** Quits: dra (~dra@2a04:4540:6410:fa00:1daf:f543:2c33:ce21) (Quit: Leaving)
[02:34:10] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[02:35:52] *** Joins: aeth (~aeth@user/aeth)
[02:39:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:47:51] *** Quits: occ (~occ@user/occ) (Ping timeout: 245 seconds)
[03:31:33] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[04:08:10] *** Quits: mrmr (~mrmr@user/mrmr) (Quit: The Lounge - https://thelounge.chat)
[04:33:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[04:36:08] *** Joins: aeth (~aeth@user/aeth)
[04:54:29] *** Joins: occ (~occ@user/occ)
[05:27:03] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Read error: Connection reset by peer)
[05:28:05] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[05:48:13] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Remote host closed the connection)
[05:50:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[05:52:38] *** Joins: aeth (~aeth@user/aeth)
[05:53:08] *** Joins: danilo` (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[05:53:39] *** Quits: danilo` (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Remote host closed the connection)
[06:12:34] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[06:34:42] <White_Flame> Bike: wouldn't "slots" be appropriate here?
[06:35:26] <White_Flame> slot n. a component of an object that can store a value.
[06:35:35] <White_Flame> object n. 1. any Lisp datum. ``The function cons creates an object which refers to two other objects.''
[06:49:13] <neominimum> https://pastebin.com/raw/tdk46J4b
[06:49:26] <neominimum> I wrote a purely iterative tree walker that collects the first elements of each sub-tree. Is it conventional to use tagbody like I did here? Is there a shorter way to walk a tree using iteration instead of relying on the shorter recursive solution (which is not portable for large tree size )
[06:53:42] <White_Flame> your TT function could be made a lot smaller, with the implicit NIL return values of using WHEN instead of IF
[06:53:51] <White_Flame> or even AND if you really want to code golf
[06:54:49] <White_Flame> eg (if a b nil) => (when a b) => (and a b)
[06:55:03] <White_Flame> (when a (when b c)) => (and a b c)
[06:56:05] <White_Flame> the manual traversal is always going to be larger than stack-based, but it does look a bit excessive here
[06:57:10] <White_Flame> so how does this work, (1 2 (3 4 (5 6)) 7) => (1 3 5) ?
[06:57:34] <White_Flame> oh, there's an example
[06:57:50] <neominimum> (1 3 5) yes that's correct
[06:57:53] <White_Flame> you could also do iterative passes
[06:58:40] <White_Flame> where on each pass you remove non-first elements, and convert lists to their first element then the sublists.  But I think the details of that might get hairy
[06:59:30] <White_Flame> (1 2 (3 4 (5 6)) 7) => (1 (3) (5 6)) => (1 3 5) etc
[07:00:51] <White_Flame> regarding your tagbody, I woudl probably start with (loop while stack ..) with stack initialized to the initial tree form
[07:02:01] <White_Flame> for each stack entry, COLLECT the CAR, push any remaining sublists to the stack.  but you have to manage ordering
[07:02:12] <neominimum> iterative passes, that's an interesting approach I hadn't thought of. 
[07:04:47] <White_Flame> is this for some form of homework or is there a real problem being solved here?
[07:08:59] <neominimum> okay I'll give that (loop while stack) method a shot later. This is for a personal project, ultimately the tree walker will look for funcallable objects in the first position of each sub-tree. I'm working on asynchronous message passing but utilising direct style programming rather than CPS. I'm just looking for style tips for this particular problem.
[07:11:04] *** Quits: sts-q (~sts-q@91.200.108.174) (Ping timeout: 250 seconds)
[07:11:37] <White_Flame> code walkers are kinda tough.  things like LET statements and quasiquotes can easily mess then up
[07:11:55] <White_Flame> there are usually real codewalkers in implementations, and some libs for them, too
[07:14:21] <neominimum> Yes for my purposes I have temporarily outlawed the use of special forms until I can square away how they will need special treatment to work in an async fashion. ie, transform progn into a synchroniser, etc.
[07:14:53] <White_Flame> hmm, so ordering isn't a problem though?
[07:15:11] <White_Flame> eg ((foo (bar)) (baz)) => (foo baz bar) isn't problematic?
[07:17:03] <neominimum> the list is returned just so I can tell the appropriate elements are being isolated, the tree won't ultimately be transformed but the elements will be checked for functionp-ness.
[07:17:23] <neominimum> I got side tracked by the problem
[07:18:49] <White_Flame> https://plaster.tymoon.eu/view/2895#2895
[07:19:11] <neominimum> actually the tree will be transformed in later steps but I'm still yet to get there.
[07:19:45] <White_Flame> a (push-last subitem stack) instead of plain push would fix the ordering
[07:20:27] <neominimum> alright thanks, that looks much better than the tagbody approach!
[07:21:14] <White_Flame> a list starting with NIL might not end up correct, but that's always an issue
[07:21:42] <White_Flame> eg would end up with NIL in the result
[07:21:53] <White_Flame> since I used consp instead of listp
[07:22:26] *** Joins: sts-q (~sts-q@212.53.219.192)
[07:22:51] <White_Flame> also, since this is talking about source code forms, I think you'd have to have something like 10,000 nested forms in order to blow the stack
[07:23:00] <White_Flame> probably not an issue
[07:23:07] <White_Flame> in terms of just using a recursive solution
[07:29:31] <neominimum> oh cool that's good to know. elsewhere someone told me that I should consider going to scheme if I wanted to use recursion instead of an iterative solution, so I thought I'd give the iterative way a go just for laughs.
[07:29:42] <neominimum> thanks for the assist
[07:30:27] <beach> Good morning everyone! 
[07:31:39] <beach> neominimum: That recommendation was just made in order to piss on me for saying that an external macro such as ITER should not be recommended to newbies over LOOP.  It was not a serious recommendation.  Just a way to see whether it would make me lose my temper.
[07:34:18] <neominimum> beach: Good morning
[07:34:36] <beach> neominimum: And you probably missed it, but I said recursion is fine on tree-like structures where the depth can be limited to log(n), but should be avoided for linear structures. 
[07:36:10] <beach> neominimum: SBCL does not do tail-call optimization on high values of the DEBUG quality.  Since I run all my code with (DEBUG 3), I do blow the stack on linear structures. 
[07:37:49] <neominimum> LOOP is love. Yes ITER has parentheses but to me it's no more lispy than loop, it is still a DSL.
[07:38:00] <beach> jasom in #commonlisp gave the right advice.  Definitely use recursion on tree-like structures.
[07:39:14] <beach> So my argument, kind of hinted by _death in #commonlisp, was that if you manage to convert a newbie to ITER, and then that newbie needs help with some code, there are fewer people there to help.  I won't help for instance, because I don't know the ITER macro, and I have nothing against LOOP.
[07:39:37] <beach> I certainly won't take time off from my projects to learn ITER just to help a newbie who took that advice. 
[07:40:27] <beach> I guess some people think we are paid to hang out in #clschool and help newbies.  But that is definitely not the case. 
[07:42:15] <neominimum> Yep,  I'll keep the recursive approach as I like the aesthetics, but I think I'm going to experiment with other iterative methods too though today, just for the sake of the exercise.
[07:42:28] <neominimum> Nor should you, thanks for the help
[07:42:35] <neominimum> :)
[07:42:42] <beach> jasom is also right that most recursive code that is also understandable is not tail recursive, and any attempt to convert ordinary recursive code to tail recursive, as the Scheme literature sometimes favors, makes it unreadable. 
[07:42:59] <beach> Sure.
[07:43:40] <neominimum> That's because of the explicit stack management, am I correct?
[07:44:21] <neominimum> Oh wait I misunderstood
[07:44:30] <neominimum> I'll have to look into that
[07:44:53] <beach> Not sure what you are asking.  Code that is artificially turned into tail recursive code often has these magic accumulators that do not correspond to any application abstraction.
[07:45:41] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[07:45:57] <neominimum> Ah yep I have seen accumulators in recursive code, I see what you meant now
[07:46:02] <beach> White_Flame: I always recommend against the use of WHEN and UNLESS in a context where the value is needed.  They should be used only for conditional side-effect code.
[07:46:50] <beach> Yes, so again, jasom is right.  Recursion is quite readable, when it is done "naturally", but then it is most often not tail recursive anyway.
[07:48:08] <beach> White_Flame: And I recommend against using AND for things other than computing a Boolean value from other Boolean values.  So your recommendations represented a return to the initial state of the code that I carefully tried to improve. :)
[07:48:54] <beach> White_Flame: And I recommend against using variables such as STACK as Booleans.
[07:55:47] <neominimum> beach: I didn't have the heart to mention it  :P /hyperbole
[07:57:51] <beach> You made the right decision there. :)
[08:13:01] <White_Flame> I didn't see the prior discussion; if the goal is to make code smaller, the code golfing isn't about increasing readability ;)
[08:13:29] <beach> Oh, sorry.  I missed the "smaller" objective. 
[08:15:53] <beach> Then, yes, different advice is appropriate. 
[08:33:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:41:45] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleepin)
[09:05:11] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Read error: Connection reset by peer)
[09:05:26] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[09:06:20] *** Joins: artchad (~user@public-gprs233403.centertel.pl)
[09:06:43] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Remote host closed the connection)
[09:10:29] *** Joins: Oladon (~olad@98.43.81.226)
[09:22:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:32:00] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[09:32:24] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:247f:ed9b:32f9:1faf)
[09:45:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:53:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:01:46] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[10:02:20] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[10:04:02] *** Joins: aeth (~aeth@user/aeth)
[10:11:16] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:37:20] *** Quits: artchad (~user@public-gprs233403.centertel.pl) (Read error: Connection reset by peer)
[10:40:55] *** Joins: artchad (~user@public-gprs233403.centertel.pl)
[10:46:01] *** Quits: artchad (~user@public-gprs233403.centertel.pl) (Read error: Connection reset by peer)
[10:57:14] *** Joins: occ (~occ@user/occ)
[11:06:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:29:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:40:02] *** Joins: artchad (~user@public-gprs233403.centertel.pl)
[11:57:33] *** Joins: tewi (~tewi@apn-95-41-106-165.dynamic.gprs.plus.pl)
[12:00:51] *** Quits: artchad (~user@public-gprs233403.centertel.pl) (Read error: Connection reset by peer)
[12:47:17] *** Joins: shka (~herr@109.231.0.226)
[13:26:04] *** Joins: random-nick (~random-ni@87.116.167.125)
[13:51:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[15:19:04] *** Quits: sts-q (~sts-q@212.53.219.192) (Quit:  )
[15:19:30] *** Joins: sts-q (~sts-q@212.53.219.192)
[15:23:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:03:44] <ns12> Hello, is (eq nil nil) guaranteed to be T? What about (eq nil '())?
[16:04:51] <pjb> depends.
[16:05:10] <pjb> is eq actuall COMMON-LISP:EQ  or is it read as another symbol with CL:EQ shadowed?
[16:05:32] <pjb> is ' the standard reader macro that reads (CL:QUOTE …) or another reader macro?A
[16:05:44] <pjb> is ( the standard reader macro that reads lists, or another reader macro?
[16:05:57] <beach> ns12: Short answer, yes.
[16:06:02] <beach> ns12: And yes.
[16:06:28] <beach> I think pjb must have had a bad start of the weekend. :)
[16:06:39] <pjb> is nil COMMON-LISP:NIL, bound to COMMON-LISP:NIL, or is it another symbol bound to something else? Or perhaps a symbol macro returning different values each time?
[16:07:03] <ns12> The reader reads NIL, (), '() as the same COMMON-LISP:NIL?
[16:07:18] <lisp123> lol. Lisp is simple, yet complicated
[16:07:19] <pjb> There are a number of assumptions that you are making when answering "yes", which don't necessarily hold.
[16:07:49] <pjb> ns12: with the default read table, and in a package that uses the CL package, yes.
[16:08:44] <pjb> ns12: but it's trivial to do: (defpackage "FOO" (:use "CL") (:shadow "NIL")) (in-package "FOO") (defvar NIL 42)  and then (eq nil '()) -> CL:NIL
[16:08:44] <ns12> This means it's valid to write (defun f nil) ?
[16:09:00] <pjb> ns12: well, not in the FOO package.
[16:09:28] <pjb>  (defpackage "FOO" (:use "CL") (:shadow "NIL")) (in-package "FOO") (defvar NIL 42)  (defun f nil) --> The value foo::nil is not of the expected type list.
[16:09:50] <pjb> But if CL:NIL is not shadowed, then yes, it's valid.
[16:10:28] <ns12> Do functions return NIL by default if they have no body? e.g. (defun f ())
[16:10:54] <ns12> (f) => nil ?
[16:11:17] <pjb> it's implicit: they have an implicit (block f …)  which implies an implicit (progn …) which is specified to return nil for (progn).
[16:11:57] <ns12> Okay. Thank you.
[16:17:18] <ns12> pjb: What is the name of the implicit block?
[16:17:39] <ns12> * What is the name of the implicit block in a defun?
[16:18:06] <pjb> it's the function name.
[16:18:20] <pjb> or the symbol in the (setf …) if that's the function name.
[16:19:26] <pjb> So you can write: (defun foo () (return-from foo 42))
[16:19:51] <beach> ns12: (defun foo (...) ...) expands to something like (setf (symbol-function 'foo) (lambda (...) (block foo ...)))
[16:19:51] <pjb> or: (defun (setf foo) (new-value) (return-from foo new-value))
[16:20:24] <ns12> Why is the block not named NIL instead, so that we don't have to repeat the name of the function within its body? i.e. (return 42) instead of (return-from f 42)
[16:20:42] <pjb> A lot of other operator have an implicit block nil.
[16:20:54] <pjb> This is so you can easily return from the function from inner scopes.
[16:22:57] <ns12> (defun foo () (return-from foo 42))
[16:22:57] <ns12> (setf (fdefinition 'bar) #'foo)
[16:22:57] <ns12> (bar)  ; Returns: 42
[16:22:57] <ns12> What's happening?
[16:23:35] <ns12> How did the (return-from foo 42) work for #'bar?
[16:24:05] <beach> ns12: First you get (setf (fdefinition 'foo) (lambda () (block foo (return-from foo 42))))
[16:24:20] <beach> ns12: That function is now independent of what name it is bound to.
[16:24:38] <beach> So (bar) just calls the same function.
[16:24:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:25:02] <beach> ... i.e., (lambda () (block foo (return-from foo 42)))
[16:25:08] <beach> What is so strange about that?
[16:25:43] <ns12> Okay. Makes sense.
[17:01:02] *** Joins: artchad (~user@public-gprs233403.centertel.pl)
[17:43:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:53:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:56:29] *** Joins: Bike (~Bike@71.69.170.70)
[18:04:57] *** Joins: dra (~dra@2a04:4540:6422:4100:b557:981:2db:8b1)
[18:22:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:33:12] *** Joins: domovod (~domovod@176.196.122.197)
[19:47:51] *** Quits: dra (~dra@2a04:4540:6422:4100:b557:981:2db:8b1) (Remote host closed the connection)
[19:49:34] <tewi> do i understand correctly, that function call arguments are evaluated strictly in left-to-right order, but whether the first element (function name) is evaluated before or after the evaluation of arguments is left to the implementation?
[19:52:38] <beach> Sort of.  The first element is not "evaluated".
[19:52:56] <beach> If it is a symbol, it is just looked up in the environment.
[19:53:15] <beach> ... in the function namespace to be more precise.
[19:53:27] <beach> If it were evaluated, it would be looked up in the variable namespace.
[19:56:00] *** Joins: treflip (~user@user/treflip)
[19:57:54] <beach> It is pretty clearly written in section 3.1.2.1.2.3
[19:58:14] <beach> Sixth paragraph.
[19:59:06] <beach> It can even be looked up "between the evaluation of any two argument forms"
[19:59:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[19:59:59] <beach> tewi: Are you still around?
[20:00:25] <tewi> beach: yeah, i was in the kitchen for a while
[20:00:58] <beach> Did my explanation make sense to you?
[20:05:23] <tewi> so symbol is only a form if it's referring to a variable?
[20:06:19] <beach> I have never heard it put that way, but yes, that's right. 
[20:06:43] <beach> It is usually put the other way around...
[20:07:09] <beach> When a symbol is in a context of evaluation (i.e., it is a form) it is considered to be a variable.
[20:08:28] <beach> Also, if you know Scheme, or hear about it some day, you should know that the function name is evaluated just like the argument forms in Scheme.
[20:09:17] <bremner> which *cough* some people find less confusing :)
[20:09:28] <bremner> of course there are pros and cons
[20:10:01] <beach> Luckily, the main purpose of a programming language is not to minimize confusion in people.  It is to write programs.
[20:11:03] <tewi> is the looking up of a symbol the job of the reader? in Practical Common Lisp, there's a talk on the reader interning symbols - looking them up in a table called "package". is this the same thing?
[20:11:47] <beach> tewi: No, the reader creates a symbol from a sequence of characters, using things like package prefixes or the value of *PACKAGE*.
[20:12:41] <beach> Well, I guess that's a "yes".
[20:13:02] <beach> I thought you were referring to turning the function name into a function.  Sorry.
[20:14:04] <beach> So, yes, the reader figures out whether there is already a symbol with that name in the package that is the value of *PACKAGE*, or in the package named by the package prefix of the name.
[20:14:40] <beach> If so, it returns the existing symbol.
[20:14:44] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[20:15:11] <beach> If not, it may create a new symbol, or it may error, depending on whether it has a single package marker or not.
[20:17:32] <tewi> i see, thanks
[20:17:45] <tewi> i didn't see that the glossary site also had the standard, pretty useful
[20:41:43] <beach> The glossary is part of the standard. 
[20:43:34] <beach> And the Common Lisp HyperSpec is a HTML version of the draft standard, which is widely thought to be nearly identical to the standard itself.
[20:56:12] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[21:41:27] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:247f:ed9b:32f9:1faf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:49:29] *** Joins: [w] (~w]@2601:8c1:80:70d0::4b06)
[21:55:19] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:05:37] *** Joins: Bike (~Bike@71.69.170.70)
[22:15:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[22:45:43] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 268 seconds)
[22:46:33] *** Joins: jealousmonk (~user@2804:431:e7c5:6582:4810:3ee3:3f59:e857)
[22:55:32] <tewi> in the definition of special form, what does manipulating evaluation environment mean exactly? are there any examples?
[22:58:27] <tewi> is it like in if, where one of the branches doesn't get evaluated?
[23:09:12] <White_Flame> ns12: the reader reads NIL and () as the exact same object, and '() as (QUOTE NIL)
[23:09:40] <White_Flame> the latter will evaluate to NIL in your executable source code, not in your data
[23:10:01] <White_Flame> '(() '()) evaluates to (nil 'nil) when printed
[23:10:10] <White_Flame> well, (NIL 'NIL) :)
[23:14:24] <White_Flame> tewi: I believe it means like what LET does, it manipulates the lexical environment (which is part of the execution environment) to introduce new bindings
[23:14:37] <White_Flame> *evaluation environment
[23:21:51] *** Joins: Bike (~Bike@71.69.170.70)
[23:22:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:22:37] <tewi> hmm, couldn't it be both? White_Flame
[23:22:49] <White_Flame> it's not a glossary term
[23:23:04] <tewi> you mean evaluation environment?
[23:23:08] <White_Flame> yes
[23:23:22] <tewi> it's used in special form's definition
[23:24:17] <tewi> but it's actually hyperlinks to evaluation and environment, so i guess it's not defined as a term indeed
[23:24:26] <White_Flame> oh, evaluation environment is in the glossary, it's just not linked from 3.1.2.1.2.1 for some reason
[23:24:45] <tewi> wow
[23:25:40] <White_Flame> I don't know what the difference is to the compilation environment specifically, as it describes what goes on there, too
[23:30:10] <White_Flame> back to your first question, an IF would fall under "manipulating control flow", LET would fall under "manipulating evaluation environment", and CATCH would be both
[23:37:27] <tewi> lexical environment would be where the variables and symbols and such are?
[23:38:38] <White_Flame> the lexical scope are the literal scopes in your forms, that only apply to what's inside their body
[23:38:57] <White_Flame> if you function call out from inside a lexical form, you've left that lexical environment
[23:39:08] <White_Flame> and return back into it when the function returns
[23:39:30] <White_Flame> the lexical environment is purely a compile-time thing, tracking what's visible within the form's body itself
[23:40:57] <tewi> so it's sort of like a scope?
[23:40:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:41:57] <White_Flame> yes, the "lexical environment" is the description about the "lexical scope" being compiled :)
[23:42:00] *** Quits: artchad (~user@public-gprs233403.centertel.pl) (Read error: Connection reset by peer)
[23:44:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:44:19] <tewi> makes sense, thanks
[23:45:08] <tewi> about evaluation environment, i found something like this
[23:45:13] <tewi> "an evaluation environment is a compilation environment posing as an interpreter environment. It has many of the same characteristics of a compilation environment, and in fact is created with the augment-environment/setf technique described above. "
[23:46:04] <tewi> from https://franz.com/support/documentation/10.1/doc/environments.htm
[23:48:15] <Bike> "compilation environment" and "startup environment" and so on are terms related to the details of compile-file semantics. shouldn't normally be too important
