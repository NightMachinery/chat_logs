[00:02:55] *** Quits: aidenw (~Aiden@156.57.146.89) (Remote host closed the connection)
[00:09:18] *** Joins: dsk (~dsk@user/dsk)
[00:13:15] *** Joins: zacts (~zacts@user/zacts)
[00:18:47] *** Quits: voidengineer (~ultrables@186.11.99.94) (Quit: Leaving)
[00:26:57] *** Quits: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:28:36] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Remote host closed the connection)
[00:29:36] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[00:33:54] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Ping timeout: 240 seconds)
[00:34:29] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 268 seconds)
[00:53:46] *** Quits: zos (~zosthegoa@ool-457a8044.dyn.optonline.net) (Quit: WeeChat 2.8)
[00:55:57] <Josh_2> Combining spinneret with the progn method combination is great :D
[00:57:25] *** Joins: Guest82 (~Guest82@190.218.237.48)
[00:59:38] *** Joins: akoana (~ah@user/akoana)
[01:00:56] <Guest82> Hi, sorry for the incredibly late reply (I've had a crazy time in my life lately...) but: Josh_2 contrapunctus shka loke[m] etimmons and beach thank you so much for answering me! on the questions I asked on July 4th! :D  Thanks for pointing out at the commercial uses of lisp for web apps and the help dealing with some issue. Cheers!
[01:01:42] <phoe> Guest82: no worries, a ping value of three and half a week is still tolerable on IRC
[01:03:36] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[01:06:17] <Guest82> thanks :D
[01:08:00] *** Quits: Guest82 (~Guest82@190.218.237.48) (Quit: Client closed)
[01:10:51] *** Quits: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:11:17] *** Joins: Guest82 (~Guest82@190.218.237.48)
[01:13:22] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[01:14:03] *** Quits: Guest82 (~Guest82@190.218.237.48) (Client Quit)
[01:14:13] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:15:53] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 250 seconds)
[01:19:49] <pl> Maybe worth job change I'll have the time to write some libs for a very commercial lisp use XD
[01:20:54] <pl> In a world where vendor-locked IDEs are accepted, SBCL doesn't look that unique ;-)
[01:24:57] <shka> pl: that's cool
[01:26:24] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[01:27:14] <phantomics> Guest82: what were those commercial uses? Interested to see...
[01:29:07] *** Joins: Guest82 (~Guest82@190.218.237.48)
[01:29:32] <phantomics> since you're back, Guest82: what were those commercial uses? Interested to see...
[01:30:01] *** Quits: Guest82 (~Guest82@190.218.237.48) (Client Quit)
[01:31:03] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:32:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[01:32:59] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:35:02] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:42:18] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[01:46:41] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[01:47:32] *** Joins: amb007 (~a_bakic@76.144.204.77.rev.sfr.net)
[01:47:32] *** Quits: amb007 (~a_bakic@76.144.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[01:47:57] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:51:32] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 256 seconds)
[02:09:54] *** Joins: gaqwas (~john@dynamic-077-002-028-240.77.2.pool.telefonica.de)
[02:24:24] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[02:25:37] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:32:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[02:32:36] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:35:58] <phoe> is there a portable way to get a type specifier that matches only something of type X and not its subtypes?
[02:36:11] <phoe> something equivalent to EQ CLASS-OF if we were talking classes instead
[02:36:40] <phoe> if BAR inherits from FOO, I'd like something that is (AND FOO (NOT BAR)), except obviously I cannot enumerate all subtypes in the NOT because new ones can be created at any time
[02:37:19] <_death> satisfies
[02:37:40] <phoe> I was worried that would be the answer
[02:39:29] *** Quits: pve (~pve@37-33-112-179.bb.dnainternet.fi) (Quit: leaving)
[02:43:31] <_death> out of curiosity, why do you want to do that?
[02:45:26] <phoe> deep-copying structures around
[02:46:29] <phoe> and thinking what exactly I want to achieve
[02:47:02] <_death> I see
[02:49:43] <Bike> i don't understand what exactly this would mean except in relation to classes
[02:50:18] <phoe> yes, I'm still thinking
[02:58:01] *** Quits: gaqwas (~john@dynamic-077-002-028-240.77.2.pool.telefonica.de) (Ping timeout: 265 seconds)
[03:01:31] <pjb> phoe: subtypes are usually subsets.
[03:01:41] <phoe> yes, I was talking garbage, don't mind me
[03:02:21] <pjb> the only case is when you can't insert a type between tyep type and NIL. eg (subtypep 'nil '(integer 42 42)) #| --> t ; t |#
[03:02:44] <pjb> For classes, that would be meaningful indeed.
[03:02:45] <moon-child> pjb: types are not sets.  Your broader point applies however
[03:02:49] <pjb> = direct-instances
[03:03:02] <pjb> moon-child: more or less, yes.
[03:13:39] <_death> what are types if not sets?
[03:14:08] <moon-child> https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence
[03:15:11] <_death> seems like an equivocation
[03:15:29] <phoe> I mean, that's a long article
[03:15:32] <phoe> is there a tl;dr?
[03:15:44] <_death> in Common Lisp, types are sets
[03:16:24] <moon-child> actually, since in common lisp types can be defined according to arbitrary predicates
[03:16:35] <Bike> yeah, common lisp types wouldn't work for curry howard so well. they define a naive set theory.
[03:16:35] <moon-child> types are classes
[03:16:46] <moon-child> :^)
[03:16:48] <phoe> more like the other way around
[03:16:57] <phoe> KEYWORD is not a class even though I wish it was
[03:17:09] <_death> I guess you mean "class" in the set theory sense
[03:17:12] <moon-child> phoe: I mean, lisp-level types are maths-level classes
[03:17:13] <Bike> also, the standard literally defines types to be sets within the context of the language, just to make it clear
[03:17:14] <phoe> oh!
[03:17:14] <moon-child> _death: yeah
[03:17:16] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[03:17:17] <phoe> welp
[03:17:36] <_death> but they are sets (which are classes)
[03:18:16] <Bike> yeah, naive set theory. so things like "barbers that shave only those who do not shave themselves" are sets
[03:18:42] <Bike> (satisfies barber-who-shaves-only-those-who-do-not-shave-themselves-p)
[03:20:13] <_death> you need to provide the definition of this predicate :)
[03:20:15] <phoe> how would you even properly express that in a CL type system
[03:21:37] <_death> types are not first class objects in Common Lisp
[03:21:45] <Bike> (defun type-that-contains-itself-p (type-specifier) (typep type-specifier type-specifier)) (satisfies type-that-contains-itself-p)
[03:21:58] <Bike> for the actual paradox throw some nots in there
[03:22:33] <Bike> and then marvel as a math thing from a hundred and twenty years ago leads to the practical consequence of needing to restart your lisp
[03:22:46] <phoe> :(
[03:23:18] *** Joins: cjb (~cjb@user/cjb)
[03:24:47] <Bike> e.g., (typep 'cons '(satisfies type-doesnt-contain-itself-p)) => T, (typep '(cons t) ...) => NIL, (typep '(satisfies type-doesnt-contain-itself-p) '(satisfies type-doesnt-contain-itself-p)) => hang
[03:25:07] <Bike> or just a stack overflow i guess. forgot about those
[03:25:28] <aeth> SATISFIES is cheating, though
[03:25:35] <aeth> since you can just do (loop)
[03:25:40] <phoe> typep should be able to return (VALUES NIL NIL)
[03:25:45] <moon-child> Bike: yeah, lots of things are easy to express mathematically but not so much in code
[03:25:50] <Bike> i'm not talking about how to hang the type system, i'm talking about how types are sets.
[03:25:50] <moon-child> see also: y combinator, in eager languages
[03:25:58] <Bike> it's easy to express in code! the result just sucks is all
[03:26:41] <aeth> hmm, apparently SBCL doesn't like me using FLET with a satisfies type
[03:26:50] <Bike> satisfies is literally unrestricted comprehension. the lisp type system is set theory pre-russell.
[03:26:59] <Bike> satisfies only works with global function names.
[03:27:13] <aeth> (defun loop* (x) (declare (ignore x)) (loop)) (typep 42 '(satisfies loop*))
[03:27:20] <_death> Bike: well, wasn't Russell's solution to introduce multiple levels (meta)
[03:27:32] <phoe> is there any strictly technological reason why it cannot accept function objects?
[03:27:42] <phoe> like `(satisfies ,(lambda (x) (oddp x))
[03:27:44] <aeth> for all I know, other implementations do
[03:27:46] <Bike> wasn't levels quine? or was everyone doing that?
[03:28:06] <Bike> an implementation accepting a function would be nonconforming, and i don't think any of them do
[03:28:11] <Bike> i don't think there's a technological reason though.
[03:28:13] <phoe> yes, I know
[03:28:14] <_death> think everyone was doing that, but not in that context
[03:28:23] <phoe> just a question for the Hypothetical Future Revisionâ„¢
[03:28:36] <_death> I especially liked Tarski :)
[03:28:46] <Bike> well tarski is the coolest logician.
[03:28:47] <phoe> since type specifiers can already be unreadable, adding a function object in there won't break anything
[03:28:56] <Bike> or was, i guess he's dead probably.
[03:30:27] *** Joins: aidenw (~Aiden@156.57.146.89)
[03:30:46] <_death> so the thing is, types are not first class objects.. you can only refer to them via type specifiers
[03:30:58] <Bike> more seriously i think any HFT of types would warrant some thought about what types are actually for. i thought about it once and came up with four uses pulling them in different directions, though i don't remember the fourth now
[03:42:15] <aeth> four?
[03:42:31] <aeth> I can think of only two: types-for-verification and types-for-performance-hints.
[03:42:41] <aeth> verification as in precondition/postcondition
[03:49:26] <Bike> types are a predication DSL, used to describe constraints to the compiler for optimization, and used to describe storage classes for arrays and structures and stuff.
[03:57:33] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[03:58:51] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 276 seconds)
[04:04:42] *** Quits: Hafat (~hafat@95.70.168.45) (Ping timeout: 245 seconds)
[04:07:17] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[04:24:54] *** Joins: Hafat (~hafat@95.70.168.45)
[04:26:44] *** Quits: Hafat (~hafat@95.70.168.45) (Client Quit)
[04:28:18] *** Joins: hafat (~hafat@95.70.168.45)
[04:31:15] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 258 seconds)
[04:36:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:37:28] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:48:52] *** Joins: Guest82 (~Guest82@190.218.237.48)
[04:48:53] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 258 seconds)
[04:49:15] <Guest82> Hi phantomics just seeing your message now
[04:49:21] <Guest82> give me a sec to get the link
[04:51:30] <Guest82> Here: https://irclog.tymoon.eu/libera/%23commonlisp?around=1625415280#1625415280
[04:55:07] *** Joins: zacts (~zacts@user/zacts)
[04:55:33] *** Joins: zacts40 (~zacts@user/zacts)
[04:56:04] *** Joins: zacts47 (~zacts@user/zacts)
[04:56:10] *** Quits: zacts47 (~zacts@user/zacts) (Write error: Broken pipe)
[04:57:33] <phantomics> Guest82: thanks
[04:57:41] <phantomics> I've also built web servers with CL, mostly serving React apps
[04:58:55] <Guest82> oh, that's what I'm trying to do phantomics :)
[04:59:10] <Guest82> did you use ngnix at all or just lisp?
[04:59:23] <Guest82> what libraries do you use?
[04:59:29] <Guest82> qlot and utopian or caveman2?
[04:59:35] <Guest82> or just hunchenhoot?
[04:59:49] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[05:00:10] *** Quits: zacts40 (~zacts@user/zacts) (Ping timeout: 246 seconds)
[05:00:32] *** Quits: lotuseater (~user@p200300e7871b3f0034ed9e810c3724ce.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:02:00] <Guest82> phantomics do you use mito or your own classes?
[05:08:15] <phantomics> Just built my own classes, haven't used with a relational DB
[05:11:01] <Guest82> ok, thanks... I'm trying now. I hope I will learn lisp but also be successful making an app haha
[05:11:47] <phantomics> What's your goal app?
[05:13:07] *** Quits: aidenw (~Aiden@156.57.146.89) (Quit: Leaving)
[05:39:36] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 276 seconds)
[06:07:07] *** Quits: engblom (~foo@62-121-47-42.static.lounea.fi) (Quit: Lost terminal)
[06:08:53] *** Quits: Guest82 (~Guest82@190.218.237.48) (Quit: Client closed)
[06:11:00] <pjb> phoe: note that deftype is like defmacro.  If you allow closures in satisfies, each time the type is expanded you get a different closure!
[06:11:32] <pjb> phoe: AFAICS, this is the reason why we're restricted to functions (that have to be defined in the compilation environment too, most of the time, so eval-when).
[06:14:13] <pjb> phoe: but granted, it makes it very difficult to define list-of (deftype list-of (element-type) `(satisfies ,(once-or-twice (eval `(defun ,(gensym) (object) (is-proper-list-of ,',element-type object)))))) etcâ€¦
[06:14:39] <pjb> in the current spec, you need to define a toplevel function for each type of list-of lists.
[06:16:39] <pjb> phoe: perhaps like this: (deftype list-of (element-type) (let ((predicate (lambda (object) (typep object element-type)))) `(satisfies ,(compile (gensym) predicate))))
[06:17:00] <pjb> I mean: (deftype list-of (element-type) (let ((predicate (lambda (object) (is-proper-list-of object element-type)))) `(satisfies ,(compile (gensym) predicate))))
[06:18:22] <pjb> Yes, that works, with eg. (defun is-proper-list-of (object element-type) (and (proper-list-p object) (every (lambda (element) (typep element element-type)) object)))
[06:19:36] *** Joins: zacts (~zacts@user/zacts)
[06:20:57] <pjb> But as I said, this generates a new closure and a new toplevel function for each occurences of (list-of foo) (list-of foo) (list-of foo) ->  3 equal closures, 3 toplevel functions. So you want to manage a cache, which has the misfortune of having to live across the compilation-environment and the runtime environment. ie. you need to rebuild the cache at load-time or executeâ€¦
[06:21:55] <pjb> satisfies would have to do the same without necessarily knowing what keys to use for the cache, if it had to deal with closures itself. at least, when the user does it, he knows what he's doingâ€¦
[06:22:15] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[06:26:00] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[06:27:27] *** Joins: zacts (~zacts@user/zacts)
[06:27:39] *** Quits: zacts (~zacts@user/zacts) (Write error: Broken pipe)
[06:41:28] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[06:42:15] *** Joins: zacts (~zacts@user/zacts)
[06:46:33] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 276 seconds)
[07:07:41] *** Joins: prxq_ (~quassel@x4db6a48f.dyn.telefonica.de)
[07:11:46] *** Quits: prxq (~quassel@x4db512e7.dyn.telefonica.de) (Ping timeout: 265 seconds)
[07:17:01] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[07:24:32] *** Parts: akoana (~ah@user/akoana) (Leaving)
[07:29:09] *** Joins: zacts (~zacts@user/zacts)
[07:30:35] *** Joins: frgo (~frgo@p200300deef181d0090707bac581a69e2.dip0.t-ipconnect.de)
[07:35:10] <beach> Good morning everyone!
[07:35:40] *** Quits: frgo (~frgo@p200300deef181d0090707bac581a69e2.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[07:35:43] <char> Hello beach
[07:41:52] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:55:06] <phantomics> Morning beach
[08:05:19] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[08:05:25] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[08:10:14] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[08:34:59] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:48:27] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:53:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:21:20] *** Quits: waaron (~aaron@194.110.112.10) (Quit: WeeChat 3.0.1)
[09:30:34] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[09:31:25] *** Quits: cjb (~cjb@user/cjb) (Read error: Connection reset by peer)
[09:42:31] *** Joins: selwyn (~selwyn@user/selwyn)
[09:56:25] <char> I just want to confirm that there is no common lisp reverse proxy?
[10:04:27] <hayley> I can't think of one, but nginx has worked fine for me. Is there anything specific you need from it?
[10:07:36] *** Joins: gaqwas (~john@dynamic-077-004-083-210.77.4.pool.telefonica.de)
[10:22:48] <edgar-rft> (reverse "proxy") => "yxorp" if that counts
[10:27:11] <recordgroovy> that would make a good name for a reverse proxy
[10:34:16] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[10:37:53] *** Joins: shka (~herr@109.231.62.239)
[10:44:27] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 276 seconds)
[10:44:43] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[10:50:47] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:51:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:51:59] *** Lord_of_Life_ is now known as Lord_of_Life
[10:58:37] <susam> Good morning, beach!
[11:00:39] <pjb> Good morning, susam!
[11:01:07] <susam> Good morning, pjb!
[11:01:33] <pjb> susam: beach is on food supply chore right now.  He'll be back soon.
[11:01:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[11:02:29] *** Joins: amb007 (~a_bakic@108.144.204.77.rev.sfr.net)
[11:06:54] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[11:11:36] *** Joins: rain3 (~rain3___@79.115.250.43)
[11:13:28] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[11:25:15] *** Quits: amb007 (~a_bakic@108.144.204.77.rev.sfr.net) (Ping timeout: 258 seconds)
[11:25:33] *** Joins: amb007 (~a_bakic@187.106.204.77.rev.sfr.net)
[11:32:46] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[11:32:55] *** Quits: gaqwas (~john@dynamic-077-004-083-210.77.4.pool.telefonica.de) (Ping timeout: 258 seconds)
[11:52:25] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[11:56:12] *** Quits: amb007 (~a_bakic@187.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:56:31] *** Joins: heisig (~heisig@p57942813.dip0.t-ipconnect.de)
[11:56:40] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:58:22] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[12:10:52] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[12:14:59] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 250 seconds)
[12:15:06] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[12:16:49] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[12:17:16] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Remote host closed the connection)
[12:17:46] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[12:23:24] *** Joins: frgo (~frgo@p200300deef181d0090707bac581a69e2.dip0.t-ipconnect.de)
[12:27:54] *** Quits: frgo (~frgo@p200300deef181d0090707bac581a69e2.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:29:24] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[12:34:52] *** Joins: pve (~pve@87-93-199-34.bb.dnainternet.fi)
[12:34:52] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:35:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:36:00] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:00] *** Quits: prxq_ (~quassel@x4db6a48f.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[12:38:57] *** Joins: prxq (~quassel@x4db6a48f.dyn.telefonica.de)
[12:39:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 245 seconds)
[12:40:05] *** Joins: amb007 (~a_bakic@187.106.204.77.rev.sfr.net)
[12:42:43] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 250 seconds)
[12:46:53] *** Quits: amb007 (~a_bakic@187.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:47:03] *** Joins: amb007 (~a_bakic@187.106.204.77.rev.sfr.net)
[12:47:03] *** Quits: amb007 (~a_bakic@187.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:47:10] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[12:47:20] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:47:45] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[12:49:20] *** Joins: lotuseater (~user@p200300e7871b3f0034ed9e810c3724ce.dip0.t-ipconnect.de)
[12:49:24] *** Joins: lisp123__ (~lisp123@45.130.83.181)
[12:52:19] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Read error: Connection reset by peer)
[13:00:56] *** Quits: lisp123__ (~lisp123@45.130.83.181) (Remote host closed the connection)
[13:01:43] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:03:47] *** Joins: amb007 (~a_bakic@187.106.204.77.rev.sfr.net)
[13:03:47] *** Quits: amb007 (~a_bakic@187.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[13:04:05] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:05:41] *** Joins: lisp123__ (~lisp123@45.130.83.181)
[13:10:18] *** Quits: lisp123__ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[13:10:27] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[13:14:58] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[13:25:42] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[13:44:00] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:50:33] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[14:01:46] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[14:04:55] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[14:05:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:13:40] <lisp123_> would it be possible to implement a reverse proxy through hunchentoot?
[14:14:36] <flip214> lisp123_: of course.
[14:14:47] <flip214> you can use drakma to make outgoing HTTP connections.
[14:15:04] <lisp123_> flip214: then that would be the answer to the earlier query on how to reverse proxy in CL
[14:15:36] <lisp123_> thanks for confirming
[14:15:50] <flip214> unless there is some specific rewriting to do, I'd go for a standard product, though (nginx, apache, haproxy, etc.). even casual text changes (via regexes) can be done in apache, for example.
[14:16:19] <lisp123_> yeah nginx is a very easy to use reverse proxy imo (well since I know how to use it, hence its easy to use :D)
[14:21:05] <flip214> lisp123_: depending on the answer time of the http services "behind" the proxy you might have quite a lot of simultaneous active http connections.
[14:21:43] <flip214> HT by default creates threads; quux-ht uses a thread pool; perhaps you should take a look at tpd2 or so, to have a bounded number of threads for an (more or less) unbounded number of connections.
[14:22:12] *** Joins: frgo (~frgo@p200300deef181d0054bb4d3d4cc00379.dip0.t-ipconnect.de)
[14:22:14] *** Quits: frgo (~frgo@p200300deef181d0054bb4d3d4cc00379.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:22:44] *** Joins: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de)
[14:22:59] <lisp123_> flip214: Good to know :) I was just answering the earlier question on the chat, I've personally moved away from web dev for the foreseeable future
[14:23:16] <lisp123_> perhaps I will come back in the future, after all everything commercial is a SaaS these days
[14:24:13] *** Joins: zacts (~zacts@user/zacts)
[14:31:10] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:5:7c36:6d3c:3648)
[14:34:21] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Remote host closed the connection)
[14:35:07] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[14:39:22] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[14:39:32] *** Joins: selwyn (~selwyn@user/selwyn)
[14:42:33] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:53:30] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[14:53:31] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:54:46] *** Joins: amb007 (~a_bakic@171.106.204.77.rev.sfr.net)
[14:55:31] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[14:55:40] *** Joins: random-nick (~random-ni@87.116.182.181)
[14:58:11] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 265 seconds)
[15:16:07] *** Quits: amb007 (~a_bakic@171.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:16:58] *** Joins: amb007 (~a_bakic@171.106.204.77.rev.sfr.net)
[15:16:58] *** Quits: amb007 (~a_bakic@171.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:17:15] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:19:34] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:21:32] *** Joins: tfeb (~tfb@109.249.185.24)
[15:22:16] *** Quits: tfeb (~tfb@109.249.185.24) (Client Quit)
[15:25:05] *** Quits: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:25:32] *** Joins: frgo (~frgo@p200300deef181d00098771fc254aaf01.dip0.t-ipconnect.de)
[15:31:25] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[15:36:50] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Read error: Connection reset by peer)
[15:48:49] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[15:53:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[16:03:52] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[16:06:34] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:08:25] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:17:15] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 276 seconds)
[16:30:01] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[16:30:22] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Remote host closed the connection)
[16:30:58] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[16:35:22] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 258 seconds)
[16:36:13] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:38:54] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[16:46:04] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[16:48:26] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[16:53:24] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[16:55:57] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[16:58:08] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[17:01:46] <Josh_2> Afternoon
[17:05:02] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[17:05:24] *** Joins: Bike (~Glossina@71.69.170.70)
[17:05:24] *** ChanServ sets mode: +o Bike
[17:08:57] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[17:13:54] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[17:23:50] *** Quits: rain3 (~rain3___@79.115.250.43) (Quit: Leaving)
[17:24:39] *** Joins: selwyn (~selwyn@user/selwyn)
[17:25:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:38:05] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[17:38:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 276 seconds)
[17:42:22] *** Quits: heisig (~heisig@p57942813.dip0.t-ipconnect.de) (Quit: Leaving)
[17:45:09] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:48:14] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:54:34] *** Joins: Noisytoot_ (~noisytoot@sourcehut/user/noisytoot)
[17:55:40] *** Joins: mrSpec (~mrSpec@user/spec)
[17:56:54] *** Joins: jdz_ (~jdz@185.23.160.114)
[17:57:16] *** Joins: phadthai_ (mmondor@ginseng.pulsar-zone.net)
[18:01:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:04:08] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[18:04:09] *** Quits: spec (~mrSpec@user/spec) (*.net *.split)
[18:04:09] *** Quits: phadthai (mmondor@user/phadthai) (*.net *.split)
[18:04:09] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[18:06:55] *** mrSpec is now known as spec
[18:09:46] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[18:10:45] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:11:06] *** Quits: jdz_ (~jdz@185.23.160.114) (Quit: I'm done)
[18:12:01] *** Joins: jdz (~jdz@185.23.160.114)
[18:12:52] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Client Quit)
[18:13:09] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[18:17:23] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:25:57] *** Joins: zacts (~zacts@user/zacts)
[18:31:42] *** Joins: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de)
[18:33:57] *** Joins: pve_ (~pve@37-136-132-0.rev.dnainternet.fi)
[18:34:54] *** Quits: pve_ (~pve@37-136-132-0.rev.dnainternet.fi) (Client Quit)
[18:35:54] *** Quits: pve (~pve@87-93-199-34.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[18:50:15] *** Quits: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de) (Quit: Leaving)
[18:52:58] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[18:55:30] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 256 seconds)
[19:00:35] *** Joins: pve (~pve@37-136-132-0.rev.dnainternet.fi)
[19:01:13] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:13:27] *** Quits: eta (~eta@chat.i.eta.st) (Ping timeout: 245 seconds)
[19:14:36] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[19:24:32] *** Joins: zacts (~zacts@user/zacts)
[19:30:57] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 276 seconds)
[19:33:33] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[19:38:18] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:39:21] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:39:40] *** Joins: eta (~eta@chat.i.eta.st)
[19:41:42] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:41:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:49:59] *** Parts: manicennui (uid349235@id-349235.tinside.irccloud.com) ()
[19:57:23] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[19:58:54] *** Joins: selwyn (~selwyn@user/selwyn)
[19:59:24] *** Noisytoot_ is now known as Noisytoot
[20:09:34] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[20:23:51] <nij-> Can someone recommand a noob friendly CL implementation that comes with an editor, works with windows and macos, and that allows the user to start playing with the repl after a quick download?
[20:30:10] <beach> I would think LispWorks would do all that.
[20:30:24] <nij-> Oh no I forgot to mentin "free" in price.
[20:30:44] <beach> I think they have free trial editions.
[20:31:04] <nij-> I'm not precise enough - free in price forever xD
[20:31:21] *** Joins: aeth_ (~aeth@user/aeth)
[20:31:27] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[20:31:30] <nij-> I remember there's one that satisfies all of these requirements.. but I couldn't find its name..
[20:31:32] *** aeth_ is now known as aeth
[20:32:32] *** Quits: dj_ (uid509723@id-509723.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[20:35:57] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 276 seconds)
[20:41:09] <etimmons> nij-: People like Portacle, but it's not an implementation. Just a bundling of an implementation and other things.
[20:42:26] <Shinmera> Unfortunately macOS' release of Portacle is pretty busted, and I don't have the time... or, rather, the patience and energy to play catch-up with Apples BS.
[20:43:36] <Shinmera> If there's any other poor souls willing to sacrifice themselves to do the work though, by all means, PRs are open.
[20:43:47] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[20:46:36] <beach> I just don't understand why people put up with that "BS" at all.
[20:48:44] <Josh_2> Because it has an apple logo on it
[20:48:58] <Josh_2> don't you like the logo beach, its all about the brand
[20:53:45] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Quit: WeeChat 3.2)
[20:53:59] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[20:54:55] <Shinmera> beach: In my case it's because other people that do use Apple devices heckle me about it
[20:57:46] <nij-> Oh yeas, it's called Portacle! Thanks etimmons!
[21:02:09] <shka> well, it is XXI century, essentially a cyberpunk dystopian future, but boring
[21:02:25] <shka> and corporations can do as they please
[21:05:57] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 245 seconds)
[21:06:26] *** Joins: luna-is-here (~quassel@ip-95-223-58-220.hsi16.unitymediagroup.de)
[21:16:44] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[21:17:11] *** Joins: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de)
[21:17:15] <nij-> M1 seems promising though.
[21:17:32] <nij-> Wonder how long it will take for it to be ported to nonapple machines.
[21:20:18] *** Joins: srhm (~ascii@user/srhm)
[21:20:59] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[21:33:47] *** Joins: dsk (~dsk@user/dsk)
[21:35:51] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:41:21] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[21:41:31] *** Joins: amb007 (~a_bakic@171.106.204.77.rev.sfr.net)
[21:42:14] <jeosol> * debugging an application that works correctly in serial mode but gives inconsistent results in parallel mode (race problems, etc) is a different kind of hell
[21:44:41] *** Joins: aeth_ (~aeth@user/aeth)
[21:44:46] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[21:44:49] *** aeth_ is now known as aeth
[21:44:49] <nij-> Shinmera: if Portacle is just a bunch of implementations, why wouldn't it do well on macos?
[21:45:52] <Shinmera> First fo all, that's being very dismissive of all the work that had to be done, and second the reason is because apple wants you to distribute stuff solely through the app store and makes everything else a huge pain in the ass to force your hand.
[21:47:01] <jackdaniel> I have to confirm, even windows isn't such a pita as macos for maintanance
[21:47:38] <shka> OSX used to be pretty nice platform for the software distribution, shame that it ends this way
[21:48:16] <Shinmera> Turns out when companies are doing well they start fucking everyone over. Who knew???
[21:49:52] <nij-> Sign.
[21:50:18] <shka> i guess they want they share from the app store
[21:50:27] <nij-> Sigh* Do you think doing that favors the those who will never learn any bit of programming?
[21:50:30] <Josh_2> Shinmera: hopefully you dont start doing well then
[21:50:42] <Josh_2> ofc that is a jk
[21:50:50] <shka> to be fair apple always was trying to fuck people over
[21:50:58] <shka> ever since the OG mac
[21:51:00] <Shinmera> Don't worry, I'm currently bleeding through all of my savings and probably will end up bankrupt within the next year, so me not doing well is virtually guaranteed :)
[21:51:21] <Josh_2> well guess you wont be able to fuck anyone over!
[21:51:49] <shka> they had a single pin incompatible keyboard cable... that cost premium
[21:52:00] <shka> 50 years later they are doing more or less the same :P
[22:06:28] *** Quits: amb007 (~a_bakic@171.106.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[22:07:04] *** Joins: amb007 (~a_bakic@168.244.204.77.rev.sfr.net)
[22:07:16] <jackdaniel> I think that it is a matter of incentives; when you respond before a board assigned by shareholders, then you aim for growth and revenue; when you respond to your family business then you seek stability; when you respond to a non-profit then you have "its" goal in mind
[22:08:42] <jeosol> Shinmera: hopefully not, you won't go bankrupt ...
[22:09:37] <Shinmera> I absolutely will if I don't get any grants or other funding.
[22:10:03] *** Joins: pjb` (~pjb@2a01cb040b1ae100445395ee53681b27.ipv6.abo.wanadoo.fr)
[22:10:10] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[22:10:58] <shka> Shinmera: can i buy something from you?
[22:11:11] <jeosol> I am sure we'd be able to rally round. when my lot changes soon, i should be able to make some contributions to your efforts
[22:11:29] <shka> like that platformer game you are working on
[22:11:45] <Shinmera> shka: You can! https://gum.co/yukari2022 you could also support me on github if you want: https://github.com/sponsors/shinmera
[22:12:06] <Shinmera> The game isn't for sale yet
[22:13:02] <shka> calendar looks kinda nice
[22:13:22] <shka> i am a sucker for abandoned places i guess
[22:15:48] <jeosol> calling out threading experts, my code exhibiting weird behavior and I don't throwing locks here and there is the way to do it. I am using bordeaux threads for simd-like tasks. I have 3 tasks A, B, C that I would like to run in parallel: A writes files required for step B, B does a system call using the file from step A and 3rd party exe, and C
[22:15:48] <jeosol> reads the output of step B.
[22:16:52] <jeosol> For step A, I occassionally, get the inputs jumbled when I look at the files for different cases, e.g., a file for a different task ends up being included for a different task.
[22:17:15] <Bike> i don't understand that last clause
[22:17:26] <jeosol> I would like to chain all three steps A, B, C, but perhaps doing A serially, B parallel, C serially is more tractable
[22:17:38] <jeosol> Bike: apologies
[22:18:22] <Josh_2> Instead of a lock you could use semaphores to signal when B when A is done, and C when B is done
[22:18:32] <Josh_2> signal B when A *
[22:19:16] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[22:20:32] <jeosol> Bike: It is a population-based optimization I am doing and I need to evaluate F(X) for several iterations and populations. Step B is the most expensive and can run for hours, I have created a small case that finishes in 2 seconds for my testing. steps A and C are very fast and not the bottle neck
[22:21:33] <jeosol> issue is when writing the files, some of the indices are jumbled. For instance in a given iteration, say iteration 1, I can have 20 solutions. so I append the iteration index and population index to the ends of files in each folder. e.g., input_iter1_sol2.dat
[22:21:49] <shka> Shinmera: i grabbed two for 15 bucks each, it also looks like something i could appreciate on aesthetically
[22:22:12] <shka> hope your financial situation gets better
[22:22:21] <Josh_2> jeosol: http://alumni.cs.ucr.edu/~kishore/papers/semaphores.pdf maybe you would find the pattern in section 3.5 useful
[22:22:34] <jeosol> All relevant files in the same folder should have same iteration and solution indices: e.g., <prefix file>_iter1_sol2.dat
[22:22:52] <jeosol> Josh_2: thanks, I will take a look
[22:23:26] <jeosol> So far, I have used locks, but it stinks and works in some cases and other it doesn't. However in serial mode, everything is kosher
[22:23:36] <Bike> i'm sorry, you're giving a very high level description of your system but it's hard to understand the particular problem. is it something like, a file produced by an A task is being processed by the wrong kind of B task?
[22:26:19] <Josh_2> does sound to me like you need semaphores, you can use them to pause and synchronize the execution of the tasks. if B depends on the completion of A, then B can sit on its semaphore until A signals it, then B will execute, same for B and C
[22:26:34] <jeosol> Bike: I didn't want to get into too much details. I wanted to understand any CL aspects in case I am missing something. In the above only step A is critical, as if the wrong files ended up in the wrong folder, the application will file as it can't get the folder so I say objective function is some high value 1e10 (for minimization task)
[22:27:03] <Bike> i would guess that there's nothing CL-specific to worry about
[22:27:06] <jeosol> I want to be able to do a call, e.g., like (call-with-thread-lock (function-A) ...) or something similar so the file writing steps is correct
[22:27:20] <jeosol> Bike: That's my guess too
[22:27:28] <Bike> what is a "thread-lock"?
[22:28:06] <jeosol> (bt:make-lock)
[22:29:31] <jeosol> Bike: https://paste.ubuntu.com/p/VM2WKpyD2v/
[22:29:48] <shka> jeosol: well, the obvious solution would be to use locks
[22:29:48] <jeosol> I am trying to do something like the that
[22:29:58] <Bike> i think you are confused about what with-lock-held does?
[22:30:14] <Bike> when you exit the with-lock-held form, the lock is released. your release-lock call is redundant and probably an error or something.
[22:30:50] <jeosol> Bike: ah I see you mean the release part
[22:30:53] *** Joins: Guest82 (~Guest82@190.218.237.48)
[22:31:18] <Bike> your cleanup form thing is also very strangely written
[22:31:22] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Ping timeout: 245 seconds)
[22:31:30] <Bike> it will evaluate the cleanup form once unconditionally, and then again if it returns true
[22:31:58] <Bike> you probably meant to check whether there's a cleanup form at macroexpansion time rather than runtime
[22:32:31] <jeosol> Bike: yeah, mixed up compile- and runtime here .. you are right
[22:32:54] <Guest82> phantomics a simple social network like app with a reactjs front end (or angular) and managing docs, videos, commenting, and the like
[22:32:58] <Bike> ,@(when cleanup-form (list cleanup-form)) is what you want i think?
[22:33:47] <Bike> just to be very clear about with-lock-held - the lock will be released if the form is exited in any way. it essentially does an unwind-protect to ensure it's released.
[22:34:30] <jeosol> so my unwind-protect on top is reduntant since the with-lock-held would have released the lock on exit
[22:34:31] <jeosol> ?
[22:35:38] <jeosol> I guess I can simplify things, I rarely have a cleanup form, or just chain all tasks together
[22:35:58] <phantomics> Guest82: better to choose React, from what I heard Angular has been abandoned
[22:36:52] <Bike> you could dispense with this macro, and instead just do (unwind-protect (with-lock-held ...) cleanup) when you need to
[22:36:57] <yitzi> Does anybody know if it is a hard requirement that logical pathname words get upcased? CLHS 19.3.1.1.7 seems to imply that to me, but CCL appears to preserve case words.
[22:37:00] <jeosol> Bike: Thanks for helping brain stop this. But in your view, if I do something like this, it should help with the race issues?
[22:37:03] <shka> (the non-obvious solution would be to use lparallel future and chain)
[22:37:20] <Bike> jeosol: like i said, i don't understand your race issues. i just know that you're doubly releasing locks and that can't be good
[22:37:33] <jeosol> ok
[22:37:39] *** Quits: svillemot (~sebastien@rama.villemot.name) (Quit: WeeChat 3.0)
[22:38:17] <Bike> and Josh_2 is right that from your description you might want a semaphore structure rather than locks per se
[22:38:37] *** Joins: tfeb (~tfb@109.249.185.24)
[22:38:47] <_death> it's not clear to me what you expect to gain by parallelization, if processes A and C are much faster than B
[22:39:02] <Bike> that's also a little mysterious
[22:39:40] <Guest82> phantomics oh, didn't know that...  have seen many people using react, yet also see many people and companies using angular...
[22:39:48] <Guest82> so I wanted to learn react
[22:42:29] <jeosol> Josh_2: thanks for that link on semaphores, I'll need to read it to refresh.
[22:42:55] <jeosol> have a crazy deadline so tryign to sort this out.
[22:44:54] <phantomics> React is worth learning for sure, you can also use the Panic library to generate React in tandem with CL-WHO
[22:44:55] *** Quits: amb007 (~a_bakic@168.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:45:02] <jeosol> _death: I apologize since I it's not very clear. I am doing optimization and for each F(X) evaluation, I run three steps A, B, and C. B is a numerical simulation step (fluid modeling on a 3d grid) using a 3rd party application. Writing the input files and reading the output are easy  and fast they are both textfiles
[22:45:06] <phantomics> It's a lot more elegant than using React's JSX
[22:45:06] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[22:45:47] <jeosol> For task B, the size of the grid affects the run time, so I created a smaller grid 40x40x1 for my test case. Realistic ones can have 500K cells and takes longer to run
[22:46:13] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:46:18] <phantomics> Using CL-WHO and Panic, you can meld React components, JS and HTML together in a seamless way
[22:47:10] <_death> jeosol: so are you running a single B process, or multiple ones doing different inputs?
[22:47:18] *** Joins: thmprover (~user@047-042-215-236.res.spectrum.com)
[22:47:20] <jeosol> death: so in a population-based optimizer, in each iteration you get 20 solutions, there are 20 F(X)'s to compute, if each F(X) takes an hour, if I can do all F(X) in parallel, they would take 1 hour ceteris paribus, instead of 20 hours - that is where the parallelization comes in
[22:47:47] <jeosol> death: yes, the inputs are different, I use threads to run them. bordeaux-threads
[22:49:02] *** Quits: tfeb (~tfb@109.249.185.24) (Quit: died)
[22:49:25] <jeosol> one process, but I create as many threads as need and call the function that does steps A, B, and C. But I think steps A where I write the input files, results get jumbled. Onces the files are written correctly, Step B is deterministic and Step C is just read a file in the correct folder
[22:49:27] <_death> jeosol: right.. so basically it sounds like https://zguide.zeromq.org/docs/chapter1/#Divide-and-Conquer
[22:50:27] <jeosol> _death: more or less after all steps are finished and threads returned
[22:50:31] <jeosol> or joined
[22:50:43] <shka> gosh
[22:50:46] <shka> jeosol: https://lparallel.org/pmap-family/
[22:50:58] <shka> lparallel is good for you
[22:51:09] <lisp123_> i really dislike angular
[22:51:15] <lisp123_> terrible syntax imho
[22:51:27] <shka> jeosol: it fits your use case really, really, really well
[22:53:55] <jeosol> shka: thanks for the link
[22:54:04] <shka> you are welcome
[22:54:31] <shka> so when you call lparallel:pmapcar, you will get list of results, just like with mapcar
[22:54:49] <shka> and it will block until everything is completed
[22:54:55] <shka> but it will complete in parallel
[22:54:59] <shka> which is what you want
[22:55:06] <shka> (i think, at least)
[22:56:52] <jeosol> yeah its similar to what I am doing, but I can't say I am using lparallel. My issue is the shear size of parameters - unfortunately, I have functions all over the place. So I was wondering if I could somehow tie them together and use the lock, everything will be kosher
[22:57:13] <jeosol> but I will look into other options, like you suggested.
[22:57:45] <jeosol> it seems it will do that I want especially with the blocking part but still running in parallel
[22:58:30] <shka> jeosol: also check lparallel:plet
[22:58:41] <Josh_2> Best not use locks if you are going to be blocking for a long time
[22:58:49] <Josh_2> because they spin (I believe) and so they take up CPU
[23:00:07] <jeosol> I was only using it for those Task A writing files that don't take much time, but for B, no locking, until I get to C again to read out. The task B - more expensive part, has no locking
[23:00:33] <jeosol> But a cleaner solution that allows me to just chain everything and not worry, if at all, is better.
[23:01:04] <shka> jeosol: well, you can use lparallel:future and lparallel:chain
[23:01:35] <Bike> Josh_2: only a really dumb lock implementation actually just spins. they try to yield the processor.
[23:01:52] <jeosol> several months ago, some I chatted with on linked advised to look at lparallel but since bt-threads was working, I never saw the need. I guess I have to look into it now
[23:02:01] <shka> most spin loccks usually have a maximum spin count
[23:02:17] <Bike> lparallel is a library on top of bordeaux. higher level, if you like
[23:02:34] <Bike> bordeaux mostly just provides primitives like threads and locks and stuff.
[23:02:37] <jeosol> @Bike
[23:02:46] <_death> jeosol: maybe you can arrange it so that you have a function (defun my-task (number) (read-outputs (magic (write-inputs number)))) .. then pmapcar it as shka suggested
[23:02:50] <shka> i use lparallel almost everyday, it saved me countless hours of programming and debugging
[23:03:10] <jeosol> ok, I was low level, writing my joins, etc. May be I need to stay higher-level since there are aspects I may not understand very well
[23:04:28] <jeosol> _death: I see. That's would be much cleaner - so at the level of calling my-task function, the locking (?) and blocking is taken care of?
[23:05:01] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[23:05:12] <Bike> well if each indexed task can be handled independently you shouldn't really need to lock anything
[23:05:29] <jeosol> shka: I think I should do same, move to lparallel. I debugged yesterday and was able to isolate the issue to the parallelization as serial model gives the correct results and I noticed the jumbled input files
[23:06:05] <jeosol> Bike: There are some shared resources (CLOS objects) - this may be where the issues are
[23:06:20] <shka> jeosol: not if those are read-only
[23:06:50] <_death> jeosol: there's no need for locking if the inputs and outputs are written in separate files, and magic only depends on the inputs.. a naive approach would be to have start a thread for each task and just join them all.. lparallel allows you to limit the number of tasks running at once
[23:07:15] <jeosol> shka: good point, unfortunately, not all the way through, for instance, I am taking some parameters from a higher level object and saving them in a lower object (iteration and solution indices) - i noticed an issue there
[23:08:50] <jeosol> _death: ok I see, I am doing something similar but have a loop with bt-threads functionality to track the join, specify a batch-job parameter and all. But I should probably just be using a library if it will save me all the headache
[23:09:19] <_death> jeosol: right, often threads are too low level an abstraction
[23:09:33] <jeosol> ultimately, my goal is to do distributed computing, but I have only used swank-crew to run on another box, for one of computation and it's ok so far
[23:09:49] <jeosol> _death: I agree with you completel
[23:11:29] <_death> there is also an lparallel for multiple machines, called lfarm.. I've no experience with it though
[23:13:19] <jeosol> oh really. that'd be interesting - I checked aws but they were expensive. Someone here referred me to some European option. The plan will be to have some machines with the executable  for task B installed, and SBCL running, route the jobs, and get the results back
[23:13:54] <jeosol> I am far from that point, but I will look into lfarm
[23:13:55] <_death> https://github.com/lmj/lfarm
[23:13:59] <_death> see example code
[23:15:32] <jeosol> _death: thanks, I looked at the link, it should serve that distributed option
[23:15:37] <jeosol> I suppose
[23:16:54] <jeosol> _death, Bike, shka, Josh_2, others: Thanks guys, I appreciate the help. I don't want to take over the channel, but I have gotten good pointers to follow up on - should probably stay way from managing the threads creation joining etc and just use lparallel API's
[23:17:52] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:17:52] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Client Quit)
[23:19:03] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:19:18] *** Quits: Guest82 (~Guest82@190.218.237.48) (Quit: Client closed)
[23:19:19] <shka> jeosol: sometimes you have to get your hands dirty with BT directly, plus at least sometimes you need to use locks, but yeah, most frequently problems can be solved in lparallel in a few lines of code
[23:19:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Killed (NickServ (GHOST command used by Inline_)))
[23:20:05] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Client Quit)
[23:20:17] <jeosol> shka: haha, I think they are dirty enough, lol, I used to use pthreads with C++ code - not an easy experience
[23:20:57] <shka> C++ has support for threads in the standard since C++11
[23:21:09] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[23:21:13] <jeosol> skha: I handle the thread batching via loops and joining, but I should probably just offload that task and not have to worry much. Yeah, the locks have helped but I should probably redesign to avoid setting variables in thread calls
[23:21:39] <shka> well, good luck
[23:21:48] <jeosol> shka: My C/C++ days was back in graduate schools, I have not coded C/C++ since leaving,  like 2010
[23:22:30] <jeosol> shka: thanks. I have a deadline for a conference, and need to have this parallelization part to work to be able to submit the runs
[23:22:34] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[23:22:46] <shka> jeosol: right
[23:22:47] *** Quits: luna-is-here (~quassel@ip-95-223-58-220.hsi16.unitymediagroup.de) (Ping timeout: 265 seconds)
[23:23:19] <shka> my tip: try to rewrite your main part so it is run in a function passed to the mapcar
[23:23:20] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[23:23:38] <shka> and try removing synchronization points if possible
[23:23:50] <shka> and then move to lparallel
[23:24:35] <shka> the fun part with lparallel is that you can write (apply (if parallelp #'lparallel:pmap #'cl:map) nil function input-sequence)
[23:24:53] <shka> well, s/apply/funcall
[23:25:28] <shka> which allows you to use the exact same source code for both parallel and serial execution
[23:26:15] *** Joins: luna-is-here (~quassel@ip-95-223-58-220.hsi16.unitymediagroup.de)
[23:26:55] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[23:27:01] *** Joins: Inline (~Inline@aftr-37-201-241-161.unity-media.net)
[23:27:02] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:30:33] <jeosol> skha: good point: The ability to use the same code for serial and parallel is definitely import. For now, I have a use-parallel-p variable that I use to test both parts. Serial part is trival because I have a loop that calls a function withich chains all the steps I need
[23:31:33] <jeosol> shka: I definitely need to make my life easier when i comes to executing parallel jobs, so I should consider alternatives
[23:32:49] *** Joins: gaqwas (~john@dynamic-077-004-083-210.77.4.pool.telefonica.de)
[23:33:39] <jeosol> shka: by "removing synchronization points ..." you mean avoid writing to shared resource?
[23:33:47] <shka> yes
[23:34:20] <shka> use the return value instead
[23:34:33] <jeosol> shka: I agree. I think I will spend some time to redesign so as not to worry about this again
[23:34:35] <shka> much less potential for bugs
[23:35:11] <shka> yeah, try to refactor code into sort of map reduce code
[23:35:11] <jeosol> I have a part were are save some variables in an object they get jumbled some pointing to previous indices.
[23:35:37] <jeosol> shka: I agree - options less prone to bugs
[23:36:01] <shka> and if that does not work, you can use lparallel:future and chain which allows you to link execution steps
[23:36:24] <shka> but what you are doing sounds more like a map reduce type of problem
[23:38:59] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[23:39:16] <jeosol> shka: the call to F(X) is from an upstream higher level algorithm (optimizer) with F(X_i) doing F(A(X_i)), F(B(X_i)), and F(C(X_i)) - so having the main F(X_i) execute without the issues is better. The higher-level algorithm doesn't know about the CLOS object used to compute F(X_i)
[23:39:17] <shka> jeosol: real world example https://github.com/sirherrbatka/clusters/blob/a0c565a95d66ba025277fca41ec3b3e4c05b1226/source/k-means/utils.lisp#L67
[23:39:54] <shka> clusters.utils:pmap calls either cl:map or lparallel:pmap depending on the first argument
[23:40:27] <jeosol> shka: thanks for that example - it should help greatly
[23:41:47] <shka> https://github.com/sirherrbatka/clusters/blob/a0c565a95d66ba025277fca41ec3b3e4c05b1226/source/common/methods.lisp#L85 perhaps something more interesting
[23:42:22] <jeosol> noticed compiler type instructures "the" and other declare statements -- what is the speed up with and without, I know it probably depends
[23:42:36] <shka> anyway, gotta call it a day
[23:43:02] <shka> jeosol: it is ONLY useful for numeric types
[23:43:16] <jeosol> thanks shka:
[23:43:23] <shka> and even then, not really that much
[23:43:56] <jeosol> my neural network library on mnist is very slow (type hints or anything) haha
[23:43:57] <shka> well, i guess perhaps for arrays as well, since maybe compiler will be able to inline memory access
[23:44:26] <jeosol> my matrix-vector operations are not optimized and used loops, etc. it was just to check my understanding
[23:44:27] <shka> sbcl is not really that great target for neural networks
[23:44:54] <jeosol> oh really?
[23:45:17] <jeosol> I thought for number crunching it's supposed to be best of the free ones
[23:45:24] <shka> it is!
[23:45:33] <jeosol> anyway, I won't take your time, we can pick up later
[23:46:02] <shka> just let me show you one main problem
[23:46:46] <jeosol> I normally do computational tasks but for my task B (numerical modeling part) I just use a 3rd party executable. It will take lots of efforts to write a 3D numerical solver and then worry about matrix conditions, optimize computations, etc. The 3rd party exe was written in Fortran
[23:51:46] <shka> jeosol: check the following (disassemble (lambda (a b) (declare (type double-float a b) (optimize (speed 3) (safety 0))) (* a b)))
[23:53:12] <Inline> so what does it get you to write the last one as (* (the double-float a) (the double-float b)) ?
[23:53:23] <Inline> you spare the type checking ?
[23:53:25] <shka> sorry, i meant
[23:53:32] <shka> jeosol: check the following (disassemble (lambda (a b) (declare (type single-float a b) (optimize (speed 3) (safety 0))) (* a b)))
[23:54:20] <shka> Inline: in this case those type assertions are redundant
[23:54:29] <shka> well, not assertions
[23:54:31] <shka> type hints
[23:54:38] <Inline> ah yes
[23:55:40] <Inline> so useful if you didn't declare beforehand but only hinted at
[23:55:56] <jeosol> shka: yeah, i ran in, I am supposed to notice something ...
[23:56:24] <shka> uh
[23:56:38] <shka> it used to be slightly more wonky then it is right now
[23:56:56] <jeosol> Oh I see, I didn't get what I should have noticed
[23:57:43] <shka> uh, am i crazy...
[23:58:03] <jeosol> Some neural network training on my desk top didn't finish after several days, other guy said it ran cuda arrays on gpu, in 24 hours - that's a massive speed up
[23:58:17] <jeosol> If i get some spare change next, I will look to invest in one of those machines
[23:58:22] <jeosol> btw, this is running SBCL
[23:58:48] <shka> jeosol: disregard what i said, i confused single-float < with multiplication
[23:59:11] <jeosol> shka: not crazy, I am not  compiler guy ...
[23:59:34] <Bike> that multiplication is going to have to cons if in an independent function like that
[23:59:50] <Bike> since double floats are usually boxed
