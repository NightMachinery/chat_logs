[00:01:01] <cbreak> yolo_: why would you want to merge headers and source file?
[00:01:06] <cbreak> they serve different purposes
[00:01:26] *** Quits: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4) (Remote host closed the connection)
[00:03:59] *** Joins: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4)
[00:05:05] <gehn> LordKalma, flask (and derivatives) ftw
[00:05:25] <LordKalma> it was something for which django's ORM was a perfect fit
[00:05:31] <LordKalma> django's ORM is really so good
[00:05:42] <gehn> good ORM is a contradiction in terms
[00:05:49] <LordKalma> hahah whhy?
[00:05:50] <gehn> no matter than language
[00:06:05] <gehn> first rule of ORM club, learn how to bypass the ORM and write raw SQL
[00:06:05] <LordKalma> you don't like ORM?
[00:06:18] <TinoDidriksen> ORMs are silly and mostly worthless.
[00:06:39] <LordKalma> django's one is pretty good
[00:06:41] <barix> the only good ORMs are those who map query results to objects, and objects to insert/updates
[00:06:56] <barix> i've never seen a single query generator that doesn't cause problems
[00:07:56] *** Joins: pulse (~pulse@user/pulse)
[00:08:06] <gehn> LordKalma, https://blogs.tedneward.com/post/the-vietnam-of-computer-science/
[00:08:14] <LordKalma> https://i.gyazo.com/64a1c50a50ef28d59c3ff33f5de2dc0c.png
[00:08:22] <gehn> sort of the seminal tome on the topic of the problems with ORM
[00:08:25] <LordKalma> I wouldn't have written this manually
[00:08:56] <TinoDidriksen> Are they the correct indices? Probably not.
[00:08:59] <gehn> old but still relevant, the fundamental disconnect between the object model and relational model is there and will never go away, it's not specific to language either really
[00:09:05] <LordKalma> C# has linq
[00:09:10] <LordKalma> C# looooved ORM :P
[00:09:15] <LordKalma> at least orm-ish things
[00:09:26] <LordKalma> TinoDidriksen, how so?
[00:10:22] <TinoDidriksen> 8 indices on 1 table? That table should have a DBA look at it and most likely redesign it.
[00:10:41] <LordKalma> it was me who designed it that waty
[00:10:43] <LordKalma> way*
[00:11:30] <barix> linq is very bad for accessing sql. many basic SQL conecpts like outer joins or window functions don't map cleanly to c#. and linq has no quasi-quotation, which means you can't write window functions using sql, and the rest using linq.
[00:12:58] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[00:13:00] <LordKalma> TinoDidriksen, https://docs.microsoft.com/en-us/power-bi/guidance/star-schema#star-schema-overview
[00:13:10] <LordKalma> it's basically a star schema, what i wrote
[00:14:34] *** Quits: x11ff (~x11ff@151.250.201.160) (Ping timeout: 260 seconds)
[00:14:39] <kalven> how many rows in the db?
[00:14:55] <LordKalma> in the end probably a couple hundred
[00:15:25] <kalven> okay, so basically 0 indices needed
[00:15:34] *** Quits: supernova (~quassel@2405:9800:ba11:6207:3dac:6101:b44d:85fe) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:15:35] <LordKalma> haha yes
[00:15:44] <LordKalma> I'm close to giving up and making an excel mega table
[00:15:56] <LordKalma> with the flattened structure
[00:16:59] <yolo_> ORM is good unless you need advanced-sql-features IMHO
[00:17:09] <LordKalma> FINE
[00:17:12] <LordKalma> I'll learn SQL
[00:17:12] <LordKalma> ffs
[00:17:19] <LordKalma> or excel
[00:17:21] <LordKalma> haha
[00:18:05] <yolo_> i will use ORM until I need tweak it with postgresql for 10 million hits per second that scales on AWS running inside another 10000 K8S dockers
[00:18:57] <yolo_> for a django typical site, ORM is a perfect fit for me
[00:19:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5495:68b3:d03c:732e)
[00:19:55] <yolo_> USA is in serious trouble to hire software engineers it seems
[00:20:14] <yolo_> thanks to covid
[00:20:51] <Alipha> what does covid have to do with it?
[00:21:35] <yolo_> IT as a single industry benefited the most, cloud computing is skyrocketing due to covid when everyone surfs from home
[00:23:31] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:f161:c9c3:b403:49f6) (Ping timeout: 268 seconds)
[00:23:43] *** Joins: x11ff (~x11ff@151.250.201.160)
[00:24:52] *** Quits: paul424 (~tom@ip-31-0-127-157.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:25:25] *** Quits: x11ff (~x11ff@151.250.201.160) (Client Quit)
[00:28:58] *** Quits: causative (~halberd@user/causative) (Remote host closed the connection)
[00:29:56] *** Joins: causative (~halberd@user/causative)
[00:30:13] *** Joins: DSpider (~DSpider@82.79.237.49)
[00:30:13] *** Quits: DSpider (~DSpider@82.79.237.49) (Client Quit)
[00:31:52] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[00:32:10] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 268 seconds)
[00:32:14] *** Joins: engest (~engest@50.39.177.170)
[00:32:34] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[00:32:39] *** Joins: meicceli (meicceli@kapsi.fi)
[00:33:43] *** Joins: Guest4193 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:34:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:38:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:38:18] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 260 seconds)
[00:39:40] *** Joins: meicceli (meicceli@kapsi.fi)
[00:40:44] <johnny> not all ORMs are the same either anyways
[00:41:31] <johnny> like python's sqlalchemy is a bit different than the popular activerecord style
[00:42:08] <LordKalma> django's ORM > sqlalchemy imho
[00:42:13] <johnny> eh..
[00:42:18] <johnny> why do you think that
[00:42:29] <imMute> not having a DB > ORMs
[00:42:43] <LordKalma> johnny, I prefer the style of writing models
[00:42:50] <johnny> also some ORMs let you just do your normal business with the ORM, and then let you use native queries but still map to objects
[00:43:22] *** Quits: Deneb (~johnch@117.111.189.80.dyn.plus.net) (Quit: Leaving)
[00:43:27] <johnny> LordKalma, the writing models part is not the interesting part of an ORM.. it's the actual part for updating and querying objects
[00:45:08] <johnny> does django's orm require one to inherit from a model base class?
[00:45:13] <LordKalma> yes, why?
[00:45:28] <johnny> so it is more activerecord style vs say a datamapper style
[00:45:42] <johnny> of course it doesn't hurt as bad in python as it does in other languages with single inheritance
[00:45:44] <LordKalma> django's ORM does magic beyond belief
[00:45:57] <johnny> in languages with single inheritance that hurts quite badly
[00:46:06] <LordKalma> hahah I bet
[00:46:49] <johnny> but thing is, that's not the only way to do it. if you wrote it datamapper style, you decouple the persistance layer from the objects, so the objects can be plain old objects
[00:47:16] <johnny> and then you can decorate the objects with the metadata either totally seprate from the object or via in python's case decorators
[00:47:27] <johnny> and that by itself is automatically appealing
[00:47:29] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:47:54] <johnny> the object shouldn't have to know it's a persistable object necessarily
[00:50:58] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[00:52:08] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[00:55:41] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[01:10:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:101e:77bb:fa95:f750) (Quit: Quit)
[01:18:54] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[01:19:17] *** Joins: engest (~engest@50.39.177.170)
[01:28:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:748a:7e70:37c6:8b18) (Ping timeout: 268 seconds)
[01:32:51] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:748a:7e70:37c6:8b18)
[01:37:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:42] *** ChanServ sets mode: +v npaperbot
[01:38:08] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:748a:7e70:37c6:8b18) (Ping timeout: 268 seconds)
[01:39:27] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d4a4:3a4e:9c43:a43)
[01:46:58] *** Quits: causative (~halberd@user/causative) (Remote host closed the connection)
[01:47:55] *** Joins: causative (~halberd@user/causative)
[01:49:39] *** Quits: Tokamak (~Tokamak@172.58.191.92) (Ping timeout: 256 seconds)
[01:51:55] *** Joins: Tokamak (~Tokamak@172.58.191.92)
[01:54:48] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 268 seconds)
[01:54:51] *** Quits: magla (~gelignite@55d4c66c.access.ecotel.net) (Quit: Stay safe!)
[01:58:56] *** Joins: markong (~kvirc@213.146.188.203)
[01:59:56] *** Parts: paule32 (~paule32@user/paule32) (Leaving)
[02:03:47] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[02:13:42] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[02:16:22] *** Quits: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4) (Ping timeout: 268 seconds)
[02:18:39] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:26:29] *** Quits: barix (~barix@user/barix) (Quit: Lost terminal)
[02:33:41] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[02:33:42] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Client Quit)
[02:48:13] *** Quits: markong (~kvirc@213.146.188.203) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[02:57:10] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[02:58:25] *** Quits: The_Jag (~The_Jag@host-82-54-168-243.retail.telecomitalia.it) (Quit: The_Jag)
[03:00:15] *** Quits: causative (~halberd@user/causative) (Ping timeout: 268 seconds)
[03:01:39] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:04:09] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:12:18] *** Joins: causative (~halberd@user/causative)
[03:13:30] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[03:14:28] *** Joins: ferdna (~ferdna@user/ferdna)
[03:24:35] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[03:24:42] *** Parts: Burgundy (~yomon@86.127.194.72) ()
[03:24:59] *** Joins: engest (~engest@50.39.177.170)
[03:27:57] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[03:43:58] *** Joins: gggpkm (~gggpkm@114.245.104.132)
[03:45:45] *** Quits: gggpkm (~gggpkm@114.245.104.132) (Remote host closed the connection)
[03:46:34] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[03:50:07] *** Quits: Trollmann (~Trollmann@user/trollmann) (Ping timeout: 268 seconds)
[03:56:34] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[03:58:07] *** Joins: Trollmann (~Trollmann@user/trollmann)
[04:03:03] *** Quits: Trollmann (~Trollmann@user/trollmann) (Ping timeout: 268 seconds)
[04:04:27] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8c9b:1fff:170d:cdbd)
[04:04:41] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:05:55] *** Joins: Trollmann (~Trollmann@user/trollmann)
[04:10:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:15:01] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[04:17:33] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[04:18:06] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[04:32:56] *** Joins: pulse (~pulse@user/pulse)
[04:38:23] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:40:43] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:48:59] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[05:02:53] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 268 seconds)
[05:16:28] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8c9b:1fff:170d:cdbd) (Quit: Quit)
[05:22:18] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:23:09] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d4a4:3a4e:9c43:a43) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:37:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:43] *** ChanServ sets mode: +v npaperbot
[05:43:36] *** Quits: emerent (~quassel@p200300cd57485527ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[05:44:49] *** Joins: emerent (~quassel@p200300cd57485527ba27ebfffed28a59.dip0.t-ipconnect.de)
[05:47:11] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 264 seconds)
[05:50:44] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[05:52:53] *** Joins: malloy (~jimery@116.30.220.108)
[06:00:34] *** Quits: mIGu (~mig21@user/naur) (Quit: Quitting)
[06:03:54] *** Joins: mIGu (~mig21@user/naur)
[06:08:57] *** Quits: causative (~halberd@user/causative) (Ping timeout: 268 seconds)
[06:22:35] *** Quits: Guest4193 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[06:25:46] *** Joins: pulse_ (~pulse@user/pulse)
[06:26:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:28:50] *** Joins: causative (~halberd@user/causative)
[06:29:01] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[06:30:04] *** pulse_ is now known as pulse
[06:39:13] <malloy> hello, is it possible to have a static data member in a local-declared class?
[06:51:50] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[07:07:43] <RandomReader> no, local classes have a bunch of restrictions because of the scope they're in: https://en.cppreference.com/w/cpp/language/class#Local_class
[07:08:26] <Alipha> And local classes are rarely used
[07:08:55] <Alipha> Unless you count lambdas
[07:08:58] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[07:17:11] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[07:17:31] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[07:29:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:35:54] *** Quits: causative (~halberd@user/causative) (Ping timeout: 268 seconds)
[07:39:31] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Ping timeout: 268 seconds)
[07:43:12] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 268 seconds)
[07:45:40] *** Quits: pa (~pah@user/pah) (Ping timeout: 268 seconds)
[07:47:34] *** Joins: pah (~pah@user/pah)
[07:58:01] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[07:58:50] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 260 seconds)
[07:59:19] *** Joins: pah (~pah@user/pah)
[08:02:54] *** Joins: Khoyo (~khoyo@user/khoyo)
[08:11:00] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[08:17:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[08:17:39] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:19:20] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äœis.)
[08:32:57] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:33:12] *** Joins: great_taste (~great_tas@190.32.235.20)
[08:38:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[08:39:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[08:40:54] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:41:16] *** Joins: pah (~pah@user/pah)
[08:45:50] *** Quits: chozorho (~chozorho@2601:146:300:c30::3ee9) (Quit: good night)
[08:49:12] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[08:50:17] *** Joins: pah (~pah@user/pah)
[08:55:13] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[08:56:02] *** Joins: pah (~pah@user/pah)
[08:58:55] *** Quits: fusta (~fusta@178.251.43.26) (Quit: Leaving)
[09:11:27] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[09:23:30] *** Joins: onizu (uid373383@2a03:5180:f:5::5:b287)
[09:29:10] *** Joins: barix (~barix@user/barix)
[09:34:02] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 260 seconds)
[09:37:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:43] *** ChanServ sets mode: +v npaperbot
[09:41:00] *** Quits: engest (~engest@50.39.177.170) (Ping timeout: 268 seconds)
[09:49:33] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[09:50:39] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:52:42] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[10:25:18] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[10:25:39] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[10:28:29] *** Joins: pah (~pah@user/pah)
[10:38:58] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[10:41:19] *** Joins: pah (~pah@user/pah)
[10:46:58] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[10:47:00] *** Joins: pah_ (~pah@host-87-10-190-10.retail.telecomitalia.it)
[10:51:57] *** Quits: pah_ (~pah@host-87-10-190-10.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[10:54:22] *** Joins: pah (~pah@user/pah)
[10:54:55] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:01:04] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[11:26:03] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:29e4:7e50:3693:f0d7)
[11:32:12] *** Joins: szutt (~szutt@116.37.2.145)
[11:52:27] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:55:44] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:00:31] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[12:01:06] *** Joins: pah_ (~pah@host-82-63-117-251.business.telecomitalia.it)
[12:03:46] <malloy> Alipha: what do you mean 'count lambdas'
[12:08:47] *** Quits: pah_ (~pah@host-82-63-117-251.business.telecomitalia.it) (Ping timeout: 264 seconds)
[12:12:56] *** Joins: pah (~pah@user/pah)
[12:14:41] *** pah is now known as pa
[12:14:56] *** Quits: msk (~msk@185.124.240.174) (Read error: Connection reset by peer)
[12:15:08] *** Joins: msk (~msk@185.124.240.174)
[12:17:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[12:17:26] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:19:47] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[12:20:40] *** Joins: pah (~pah@user/pah)
[12:23:36] *** Joins: anjali (~anjali@42.111.17.15)
[12:27:57] <malloy> hello, why the result is tmp1 but not tmp2 ? https://paste.rs/oR6
[12:28:17] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[12:28:32] *** Joins: pah_ (~pah@host-79-37-70-63.retail.telecomitalia.it)
[12:30:34] <malloy> so non-template function has higher priority than template functions ?
[12:32:01] <TinoDidriksen> Yes
[12:33:59] <TinoDidriksen> malloy, https://en.cppreference.com/w/cpp/language/overload_resolution#Best_viable_function step 4
[12:41:40] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[12:43:15] <malloy> TinoDidriksen:  thank you
[12:44:28] *** Joins: Khoyo (~khoyo@user/khoyo)
[12:45:27] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[12:46:07] <cart_man> Can you make a class constructor a virtual or pure virtual ?
[12:48:35] *** Joins: paul424 (~tom@ip-5-172-239-30.multi.internet.cyfrowypolsat.pl)
[12:52:08] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:52:22] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 260 seconds)
[12:52:34] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[12:54:40] <malloy> cart_man no
[12:54:42] *** Quits: onizu (uid373383@2a03:5180:f:5::5:b287) (Ping timeout: 260 seconds)
[12:58:16] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[13:00:47] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[13:01:16] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Client Quit)
[13:03:08] *** Joins: Burgundy (~yomon@86.127.194.72)
[13:05:13] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[13:07:25] *** Joins: plastico (~plastico@neomutt/plastico)
[13:09:55] <sonOfRa> cart_man: no, but a typical way around that is using the factory pattern.
[13:13:50] *** Joins: manjaro-user (~manjaro-u@199-7-159-23.eng.wind.ca)
[13:14:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[13:16:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[13:16:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 268 seconds)
[13:17:27] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[13:17:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:18:36] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[13:19:48] *** pah_ is now known as pa
[13:20:09] *** Quits: pa (~pah@host-79-37-70-63.retail.telecomitalia.it) (Changing host)
[13:20:09] *** Joins: pa (~pah@user/pah)
[13:29:30] <cart_man> But a class is a virtual class purely on the basis that it has a virtual function anywhere inside it right?
[13:30:46] <LordKalma> I've had that dillema
[13:37:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:43] *** ChanServ sets mode: +v npaperbot
[13:44:12] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[13:44:13] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Client Quit)
[13:45:28] *** Joins: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com)
[13:45:28] *** Quits: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com) (Changing host)
[13:45:28] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:47:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:52:29] <cart_man> LordKalma: Which one?
[13:52:55] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:63fc)
[13:57:00] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[14:06:32] *** Quits: paul424 (~tom@ip-5-172-239-30.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[14:07:28] <LordKalma> what makes something pure virtual
[14:07:38] <LordKalma> since, you have to =default virtual destructors
[14:08:08] <LordKalma> the constructor you just don't write it. Although I've also found =default'ing the base constructor useful
[14:08:11] <LordKalma> I don't remember why now haha
[14:11:05] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[14:12:03] *** Joins: supernova (~quassel@2405:9800:ba11:6207:2e99:799d:3d6:6376)
[14:14:29] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:16:31] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:16:56] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:26:30] *** Quits: pa (~pah@user/pah) (Ping timeout: 268 seconds)
[14:33:04] *** Joins: pah (~pah@host-80-181-130-82.retail.telecomitalia.it)
[14:33:04] *** Quits: pah (~pah@host-80-181-130-82.retail.telecomitalia.it) (Changing host)
[14:33:04] *** Joins: pah (~pah@user/pah)
[14:34:30] *** pah is now known as pa
[14:39:38] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:40:17] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[14:40:18] <PJBoy> no such thing as a virtual class
[14:41:23] <PJBoy> think that's the best way of resolving that question :)
[14:43:13] *** Joins: malloy (~jimery@116.30.220.108)
[14:43:54] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 260 seconds)
[14:50:47] *** Quits: pa (~pah@user/pah) (Ping timeout: 264 seconds)
[14:51:45] *** Joins: pah (~pah@user/pah)
[14:54:10] <manjaro-user> If I have a two classes that both subclass QObject, can I have a QObject function pointer, and point to either one of those classes?
[14:54:34] <PJBoy> what do you mean by QObject function pointer?
[14:54:50] <PJBoy> pointer to QObjectDerived member function?
[14:55:03] <manjaro-user> 	void ( QObject::*fp )();
[14:55:16] <PJBoy> that's a good question
[14:55:32] <manjaro-user> thanks.
[14:55:38] <manjaro-user> Coming from you that means a lot.
[14:56:24] *** pah is now known as pa
[14:57:15] <PJBoy> { void (B::*p)() = &B::f; invoke(p, D1()); } struct B { void f() { BARK; } }; struct D1 : B {}; struct D2 : B {};
[14:57:16] <geordi> B::f()
[14:57:22] <PJBoy> testcase seems to work
[14:58:18] <manjaro-user> hrmmmmm
[14:58:19] <PJBoy> { void (B::*p)() = &B::f; invoke(p, B()); invoke(p, D1()); invoke(p, D2()); } struct B { virtual void f() { BARK; } }; struct D1 : B { void f() override { BARK; } }; struct D2 : B { void f() override { BARK; }};
[14:58:20] <geordi> B::f() D1::f() D2::f()
[14:58:23] <PJBoy> seems to work polymorphically too
[15:03:20] <PJBoy> only thing you can't do is
[15:04:35] <PJBoy> { void (B::*p)() = &D::f; } struct B { void f() { BARK; } }; struct D : B { void f() { BARK; } };
[15:04:35] <geordi> error: cannot convert 'void (D::*)()' to 'void (B::*)()' in initialization
[15:04:55] <PJBoy> but you can invoke the pointer on derived objects
[15:05:50] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 260 seconds)
[15:07:35] <manjaro-user> hrmmmm
[15:11:38] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[15:11:59] <lpapp> hi, when converting a matrix4d class from one library to another, and I see reinterpret_cast used for this, is it possible to use static cast for this sort of thing?
[15:15:48] <TinoDidriksen> static_cast would require there is a valid conversion between them. If there isn't one, but they have the same in-memory representation, then reinterpret_cast is the way.
[15:18:14] <lpapp> well, static_cast worked from void* to a specific class, too.
[15:18:19] <lpapp> in callbacks when passing "data" around.
[15:18:37] <m_ben> TinoDidriksen: what do you mean with "in-memory representation"?
[15:18:39] <TinoDidriksen> That's only valid if you know the void* originally held that T
[15:19:14] <TinoDidriksen> m_ben, struct S { int x; }; struct Y { int b; }; --- these are not static_cast'able, but fine to reinterpret_cast
[15:19:24] <manjaro-user> I still need a lot of practice with function pointer syntax, because i can't seem to recreate what you just did pjboy.
[15:19:58] <PJBoy> well one thing you can do to make syntax easier is
[15:20:32] <PJBoy> { auto p = &D::f; invoke(p, D()); } struct B { void f() { BARK; } }; struct D : B { void f() { BARK; } };
[15:20:32] <geordi> D::f()
[15:20:49] <manjaro-user> hmmm auto might be good here
[15:22:10] <PJBoy> you couldn't use it to get p as a void (B::*)() is the only limitation
[15:22:33] <PJBoy> I mean unless you initialise it with &B::f of course
[15:25:38] <PJBoy> but even then there's `decltype(&B::f) p = &D::f;`
[15:26:36] <manjaro-user> tsk. I dont think this can work for me, because QObject, which is the base class, doesn't have the function that the derived classes do.
[15:28:04] <manjaro-user> ill keep trying.
[15:28:45] <manjaro-user> btw, just so I understand the bots syntax, the first set of {} is just main's body, correct? And everything after is just definitions?
[15:29:49] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[15:31:16] <PJBoy> yeah main function body followed by the preceding global scope
[15:31:47] <manjaro-user> thanks.
[15:32:03] <PJBoy> it does sound like this can't work for you though
[15:32:21] <manjaro-user> Indeed.
[15:33:14] <cart_man> LordKalma: Wait... about the virtual constructor. So you can actually have a virtual constructor or only destructor? OR did you mean that the compiler will make it a virtual constructor/destructor when there is a virtual funciton present automatically?
[15:33:23] <manjaro-user> Unless I guess I were to make an intermediary class that has the function pointer.
[15:33:43] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[15:34:18] <LordKalma> cart_man, I mean this is something you usually se a lot in ABCs: https://github.com/ruilvo/qt-widget-plugins-example/blob/master/app/plugin_interface.hpp#L8
[15:34:35] *** Quits: mitch0 (~mitch@193-110-63-186.cable-modem.hdsnet.hu) (Ping timeout: 264 seconds)
[15:34:57] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[15:35:11] *** Quits: baltazar (~baltazar@193-110-63-186.cable-modem.hdsnet.hu) (Ping timeout: 264 seconds)
[15:35:50] <manjaro-user> its so funny. I am programming this to be the most simple and straightforward program that covers all basic programming concepts, and yet I am constantly faced with the choice of complicated work arounds.
[15:36:16] *** Joins: mitch0 (~mitch@178-164-254-231.pool.digikabel.hu)
[15:36:53] *** Joins: baltazar (~baltazar@178-164-254-231.pool.digikabel.hu)
[15:37:10] <PJBoy> if you just need a *thing* that calls `obj.f()` on some generic obj
[15:37:14] <PJBoy> there's always generic lambdas
[15:38:12] <LordKalma> [](auto obj){obj.f();};
[15:38:23] <PJBoy> { auto invoke_f = [](auto obj) { obj.f(); }; invoke_f(D1()); invoke_f(D2()); } struct B {}; struct D1 : B { void f() { BARK; } }; struct D2 : B { void f() { BARK; }};
[15:38:24] <geordi> D1::f() D2::f()
[15:38:26] <manjaro-user> I don't want a generic class, because then I'd have to throw all my definitions in the header. I don't like doing that.
[15:38:37] <LordKalma> std::visit would also work, no?
[15:38:44] <PJBoy> if you had a variant, yeah
[15:38:49] <LordKalma> manjaro-user, a generic lambda is just [](auto obj){obj.f();}; and you can use it anywhere
[15:38:59] <manjaro-user> generic lambdas... hrmmm
[15:39:03] <LordKalma> you can even do [](auto obj){obj.f();}(); for immediate invocation
[15:39:23] <manjaro-user> That is a great idea. I'll look into it.
[15:39:41] <PJBoy> { auto invoke_f = [](auto obj) { obj.f(); };  variant<D1, D2> obj = D1();  visit(invoke_f, obj); }   struct B {}; struct D1 : B { void f() { BARK; } }; struct D2 : B { void f() { BARK; }};
[15:39:42] <geordi> D1::f()
[15:39:45] <LordKalma> I'd even except the compiler to trim the lambda object and function call out
[15:39:46] <PJBoy> that's the variant + visit idea
[15:40:00] <cart_man> Class First {} ; Class Second : public First{}    .... What is the differencve between First firt = new Second()  and Second sec = new Second():  ?
[15:40:05] <LordKalma> visit can't be used without variants? shame
[15:40:13] *** Joins: Khoyo (~khoyo@user/khoyo)
[15:40:18] <PJBoy> visit is an inherently variant based concept
[15:40:44] <LordKalma> fair
[15:40:51] <PJBoy> if you don't have a variant, you don't need to "call this function on the currently active variant member"
[15:41:03] <LordKalma> spent 3 hours this morning trying to solve a docker problem whose answer was "I'm a dumb fuck"
[15:41:50] <PJBoy> cart_man, in your specific example, there's a few things to talk about
[15:41:57] <PJBoy> leading with the fact that new returns pointers
[15:42:19] <PJBoy> and class isn't capitalised >_>
[15:42:38] <LordKalma> what is this? Java :D
[15:42:46] <LordKalma> (it is capitalized on java isn't it?)
[15:43:06] <PJBoy> no
[15:43:12] <PJBoy> only python pulls that kind of dumb shit
[15:43:16] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:43:32] <LordKalma> class is lowercase in python
[15:43:44] <PJBoy> yeah, even python gets class's capitalisation right
[15:43:45] <LordKalma> all keywords are
[15:43:48] <PJBoy> but it has None and True and False
[15:44:02] <LordKalma> true
[15:44:06] <LordKalma> *True
[15:44:22] <cart_man> PJBoy: haahhaha wait the class name itself or the object?
[15:44:31] <PJBoy> the class keyword
[15:44:51] <PJBoy> {} Class First {};
[15:44:51] <geordi> error: 'Class' does not name a type; did you mean 'class'? (fix known)
[15:45:13] <cart_man> my bad
[15:45:16] <cart_man> but ok besides that
[15:45:30] <PJBoy> well
[15:45:43] <PJBoy> the `new Second` bit is the same
[15:46:00] <PJBoy> when you assign that to a Second*, there's nothing special going on
[15:46:31] <PJBoy> when you assign it to a First*, that First* pointer ends up pointing to the First base subobject of the Second object you allocated
[15:46:38] <cart_man> So First *fir = new Second();  would be the same as Second * sec = new Second() ?
[15:46:46] <PJBoy> and the Second object would end up leaking
[15:47:06] <PJBoy> because it's not polymorphic, so you have no way to delete that second object via pointer to First
[15:47:35] <PJBoy> aside from that
[15:47:39] <PJBoy> { Second* sec = new Second; sec->f(); } struct First { void f() { BARK; } }; struct Second : First { void f() { BARK; } };
[15:47:39] <geordi> Second::f()
[15:47:42] <PJBoy> { First* sec = new Second; sec->f(); } struct First { void f() { BARK; } }; struct Second : First { void f() { BARK; } };
[15:47:43] <geordi> First::f()
[15:48:42] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[15:52:20] <PJBoy> idk if this example will help or confuse but
[15:52:22] <PJBoy> { D* d = new D; B1* b1 = d; B2* b2 = d; cout << d, b1, b2, &d->x; } struct B1 { int x; }; struct B2 { int x; }; struct D : B1, B2 { int x; };
[15:52:23] <geordi> 0x2103310, 0x2103310, 0x2103314, 0x2103318
[15:53:18] <PJBoy> converting that derived pointer to one of its base classes, you can see that the derived object has base class subobjects embedded inside it
[15:53:59] <PJBoy> so when you convert a derived pointer to a base pointer, you effectively just tunnel vision onto that part of the object
[15:54:40] <cart_man> PJBoy: Ahh ok I see. So it then limits the scope of the derived for the base
[15:54:46] <LordKalma>  when you have a pointer to parent you can only call parent stuff. That simple
[15:54:49] <cart_man> But what would be the use of that?
[15:55:04] <cart_man> Why not then just make a Base
[15:55:10] *** Quits: supernova (~quassel@2405:9800:ba11:6207:2e99:799d:3d6:6376) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:55:47] <PJBoy> it depends on the scenario
[15:55:48] <cart_man> Perhaps you have a Second but you want a function to only have acess to the First/Base part of that Second
[15:55:57] <PJBoy> yeha exactly
[15:56:24] <cart_man> Ok whow some shit just clicked in my head. Its funny how stuff come together when you actually see a usecase for it
[15:56:33] *** Quits: malloy (~jimery@116.30.220.108) (Quit: WeeChat 3.0)
[15:56:36] <PJBoy> you might want a whole Second object for whatever value it has, but a function likely only cares about one of these small aspects
[15:57:30] <PJBoy> like someone might be an electrician and a juggler, but when you hire them for wiring work, you only care about that electrician aspect
[15:57:35] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[15:57:50] <cart_man> PJBoy: I would want him to be able to do both at the same time though
[15:58:00] <cart_man> So ... he has to juggle my wires ... Heh
[15:58:41] <PJBoy> well you can try and design to allow that
[16:00:39] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:01:28] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[16:04:11] *** Joins: Khoyo (~khoyo@user/khoyo)
[16:04:33] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[16:04:50] <rpav> ashafq: (re: cmake) cool .. you can likely get a lot of reduction if you use "modular" cmake forms if you're not too
[16:05:13] *** talisein_ is now known as talisein
[16:07:39] *** Quits: manjaro-user (~manjaro-u@199-7-159-23.eng.wind.ca) (Ping timeout: 268 seconds)
[16:08:36] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[16:11:33] *** Joins: gareppa (~gareppa@user/gareppa)
[16:12:15] *** Quits: gareppa (~gareppa@user/gareppa) (Client Quit)
[16:13:52] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:19:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:21:23] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[16:25:20] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[16:25:49] <onizu> int main(int argc, char** argv)  --- why do some examples pass this to main() ?
[16:28:53] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[16:29:04] <Alipha> onizu: argv contains the command line arguments that were passed to your program. argc contains the count of them
[16:30:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:31:43] *** Joins: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4)
[16:33:12] <onizu> Alipha: thanks
[16:36:41] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:49b2:5c3a:dea0:5ca1)
[16:39:58] *** Joins: whup_dup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:40:20] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5495:68b3:d03c:732e) (Ping timeout: 268 seconds)
[16:41:13] <rpav> cart_man, PJBoy: though note, if you want something with Electrician and Juggler "abilities," this is likely something to be expressed compositionally rather than via inheritance
[16:41:49] <PJBoy> I subscribe to the idea that one "is a" juggler and "is an" electrician
[16:42:05] <rpav> the issue being C++ lacks an inherent good way to handle that, because likely you want "someone with electrician qualification" but you want _both_ "someone" and "electrician ability"
[16:42:22] <rpav> yeah you should cancel that subscription heh
[16:42:24] <PJBoy> saying they "have the" ability of electricianing and juggling is fair though I guess
[16:42:39] <PJBoy> nothing wrong with modelling it over inheritence though
[16:42:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[16:42:45] <rpav> there is a lot wrong really
[16:42:46] *** whup_dup is now known as whupdup
[16:43:48] <PJBoy> like what? <_<
[16:44:05] <rpav> like, do you `class ThisPerson : Juggler, Electrician {}` for every person? you certainly don't `class Juggler : Electrician {}` or the opposing, etc
[16:44:42] <rpav> if Juggler and Electrician both have performJob() then you have to be explicit or manually override
[16:45:19] <rpav> inheritance is basically not a good way to express this (or much beyond "this behavior, but modified")
[16:45:53] <PJBoy> performJob would look something like `if (context_is_suitable_for_juggling()) { Juggler::do_job(); } else { ... }`
[16:45:59] <rpav> yeah that's terrible
[16:46:19] <PJBoy> because?
[16:46:29] <rpav> if you have to ask :P
[16:46:48] <rpav> it assumes a lot of things external to the class for determining how to behave
[16:47:11] <PJBoy> well you need to make decisions on how to live your life
[16:47:14] <rpav> like you wouldn't do that, even if you manually overrode performJob(), you're basically reimplementing virtualization manually
[16:47:48] <rpav> PJBoy: yes, you're making the mistake of modeling classes/data/dispatch based on "loosely how we think about things in real life," which is almost always incorrect
[16:48:25] <rpav> because how we think about these things is loosely-defined and generally not very good outside of broad "obvious" applications, where code has to be precise in all the places
[16:48:38] <PJBoy> I mean I can see problems with the inheritance approach here
[16:48:46] <PJBoy> but not anything you've brought up
[16:48:58] <PJBoy> inheritance is a superset of composition
[16:49:07] <rpav> like it's why "OOP" _seems_ "natural" or "easy" or "obvious" but really _this_ is where people fail at OOP
[16:49:15] <rpav> no
[16:49:18] <PJBoy> you'd have to tell me why the extra functionality you get from inheritance is bad
[16:49:21] <rpav> inheritance is a _subset_ of composition
[16:49:35] <PJBoy> :/
[16:49:52] <PJBoy> you can do everything you can do with composition via inheritance
[16:49:57] <rpav> you can not
[16:50:02] <PJBoy> because inheritance makes a base class subobject
[16:50:07] <rpav> ubt you _can_ do everything with inheritance via composition
[16:50:08] <PJBoy> which is composition
[16:50:15] <rpav> yes, that's why it's a subset
[16:50:16] <PJBoy> but you also get the is-a functionality
[16:50:19] <PJBoy> so it's a superset
[16:50:32] <rpav> you designate one very special "compositional object" as "parent", and delegate all responsibility not otherwise defined to that
[16:50:44] <rpav> but you can do a lot more things with composition that are not possible strictly with inheritance
[16:50:58] <PJBoy> give me a function acting on a member object, and I can give you an equivalent function acting on a base class subobject
[16:51:05] <rpav> struct Person : Foo { Bar a, b, c; };
[16:51:17] <rpav> struct Person { Foo parent; Bar a, b, c; };
[16:51:29] <rpav> but you can't inherit multiple `Bar` in most systems
[16:51:41] <PJBoy> yeah, multiple inheriting Bar sounds like a disaster
[16:51:58] <rpav> but it's _composed of_ multiple Bar, and a Foo parent
[16:52:00] <onizu> is there any minimal library to send a JSON file to a server in an HTTP query?
[16:52:01] <PJBoy> a Person can "be a" Bar three times
[16:52:04] <PJBoy> *can't
[16:52:12] <PJBoy> hm
[16:52:19] <rpav> and you _delegate_ operations by default to Foo .. it's a very special + sugar subet of composition
[16:52:41] <rpav> onizu: curl?
[16:52:58] <PJBoy> I'll actually give you that
[16:53:13] <PJBoy> inheritance can't model multiple subobjects of the same type
[16:53:23] <PJBoy> not without doing some tagging
[16:53:34] <rpav> my real gripe is that we don't actually have good tools for composition, where we could have a much more powerful set of tools for that, and inheritance could be merely "library functionality"
[16:53:50] <onizu> rpav - anything built on curl that allows it in a simpler way
[16:53:51] <PJBoy> nor *should* inheritance model that
[16:54:43] <PJBoy> well I'm claiming neither is a subset of the other then
[16:54:49] <rpav> PJBoy: there's also the matter that inheritance itself is confused; i.e., it conflates "inheriting data" with "inheriting functions"
[16:55:03] <rpav> like these are not actually necessarily tied
[16:55:57] <rpav> i.e. you sometimes have like blank classes with nothing but virtuals, or you sometimes "just" inherit data, because some things only care about one or the other
[16:57:11] <PJBoy> inheriting just virtual functions is the whole "interface as an ABC" thing
[16:57:22] <PJBoy> inheriting just data doesn't sound like something I've ever wanted
[16:57:34] <rpav> PJBoy: but (traditional/C++) inheritance is demonstrably a strict subset of composition, there is nothing besides the syntax sugar that you can do with inheritance that composition+delegation would not allow
[16:57:59] <PJBoy> dynamic_cast
[16:58:17] <rpav> struct RGB { float r, g, b; }; struct RGBA : RGB { float a; };
[16:58:31] <PJBoy> up/down-casting pointers
[16:58:43] <PJBoy> /references
[16:59:07] <rpav> PJBoy: right, and with a parent<P*>(C*) that returns the parent pointer, you can have the same thing
[16:59:48] <PJBoy> all the vtable stuff then
[16:59:54] <rpav> err for dynamic_cast upcast you can actually write that with simple functions
[17:00:13] <rpav> ah but vtable stuff isn't tied to inheritance, with delegation you can do niftier things
[17:00:42] <rpav> though if you implement this in C++ you take advantage of vtables and pure-function classes
[17:00:58] <rpav> but like, "for Foo, delegate (Ms...) to Foo::Bar'
[17:01:54] <rpav> though the way i advocate, one uses method groups, so e.g. "IndexedAccess::at()", and you could delegate IndexedAccess to a vector member, but MapAccess to a map member
[17:02:29] <rpav> but "regular" inheritance is again a subset of this where you delegate everything through one chain and you can't specify
[17:02:54] <PJBoy> right yeah
[17:03:01] <PJBoy> if you do enough work you can reimplement all this stuff
[17:03:38] <rpav> right _but_ the point isn't "well we just reimplemented things," it's that one model is a more general model of the other
[17:04:03] <rpav> and we could have better toys/tools, but we don't
[17:05:00] <rpav> and a lot of the time when we use inheritance, it's because it's the only tool that does dynamic dispatch for a set of functions .. you don't _have_ delegation built in, and all the syntax sugar for supporting it
[17:05:04] *** Joins: AmR (~AmREiSa@156.199.92.40)
[17:06:34] *** Joins: engest (~engest@50.39.188.0)
[17:15:21] <onizu> what does a constant (something set by #define, not const) mean before a function's return type in the declaration?
[17:15:48] <rpav> does it look something like FOO_EXPORT
[17:19:16] <onizu> rpav: JSON_CONVERSION_API GSErrCode	CreateFromObjectState (const GS::ObjectState& objectState, GS::OBinaryChannel& destination, bool prettyPrint = false);
[17:19:43] <onizu> 'JSON_CONVERSION_API' <--- referring to this part
[17:21:07] <rpav> yeah or that i guess .. _probably_ it's windows dll export stuff
[17:21:23] <rpav> M-. it and see if it's in a bunch of defines that have __dllexport and/or #ifdef WIN32 or whatever
[17:21:35] <rpav> er, or whatever key you use to go to a definition ðŸ¤”
[17:21:38] <onizu> #define JSON_CONVERSION_API		PLATFORM_DLL_IMPORT
[17:21:42] <rpav> yea
[17:22:05] <onizu> so what is that part in the func decl?
[17:22:21] <rpav> like there's some similar thing you can do now in gcc i think to only export certain symbols but i don't see it a lot
[17:22:36] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[17:22:41] <rpav> onizu: it's due to how (poorly) windows DLLs/dynamic linkage works
[17:23:17] <onizu> does it combine with the return type to form the final return type? (I don't understand the syntax there)
[17:23:22] <rpav> onizu: i.e. it explicitly designates the function as "import/export from this DLL" (depending on whether the header is seen while built as part of the .dll, or by the user)
[17:23:25] <rpav> no
[17:23:29] *** Quits: X-Scale (~ARM@83.223.227.196) (Ping timeout: 268 seconds)
[17:23:43] <onizu> i see
[17:24:22] <rpav> it just says "look for this in the dll's .lib" or "otherwise this is probably normal linkage", because windows doesn't do runtime dynamic resolution like that
[17:25:09] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[17:27:45] <onizu> rpav: okay
[17:28:37] *** Joins: X-Scale (~ARM@83.223.240.168)
[17:29:11] *** Quits: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[17:32:30] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:60b5:43:52c6:40a7)
[17:32:30] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:60b5:43:52c6:40a7) (Changing host)
[17:32:30] *** Joins: skapata (~Skapata@user/skapata)
[17:36:28] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:37:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:44] *** ChanServ sets mode: +v npaperbot
[17:38:55] *** Quits: pepperoni (~pepperoni@gateway/vpn/pia/pepperoni) (Ping timeout: 268 seconds)
[17:40:05] <LordKalma> rpav, it's not how " how (poorly) windows DLLs/dynamic linkage works"
[17:40:09] <LordKalma> it's how it works on any platform
[17:40:20] <LordKalma> it's just gcc and clang have public visibility by default
[17:40:46] *** Joins: pepperoni (~pepperoni@gateway/vpn/pia/pepperoni)
[17:41:26] <rpav> LordKalma: well, visibility designation only really needs to happen library-side and not be exposed to the user
[17:41:52] <rpav> like if you actually just care about visibility, probably you have separate headers that you don't even distribute/install
[17:42:08] <LordKalma> yeah, needing the __dllspec_import is weirder than needing the export
[17:42:20] <rpav> the reason you need dllimport is because there's no dynamic linker
[17:42:24] <LordKalma> just because you don't have a header doesn't mean you can't use the symbol
[17:42:33] <jiffe> hmm, c++ has no built in substring replace all function?
[17:42:39] <LordKalma> so I don't agree with the second statement
[17:42:45] <LordKalma> other than that, sure
[17:42:58] <rpav> _right_, but, you could have a separate header and have __noexport or whatever just in that, and/or just your C++ (i forget how .so symbol hiding works)
[17:43:21] <LordKalma> The right way to do it, anyway, is with this:
[17:43:32] <rpav> jiffe: it has a few i think
[17:43:32] <LordKalma> first, you disable default public visibility: https://github.com/ruilvo/aether_dsp/blob/master/CMakeLists.txt#L26
[17:43:48] <LordKalma> Then you have the magic macro: https://github.com/ruilvo/aether_dsp/blob/master/aether_dsp/CMakeLists.txt#L11
[17:44:39] <rpav> jiffe: err, you may have to implement a "simple" replace_all i guess (which is dumb, yes), but there's regexp .. which is problematic ðŸ¤”
[17:44:56] <LordKalma> or use Qt
[17:44:58] * LordKalma runs
[17:45:11] <rpav> qstring ;/
[17:45:25] <LordKalma> QString is an amazing string object in terms of capabilities
[17:45:36] <LordKalma> it even has constexpr QString before constexpr was a thing :p
[17:45:44] <rpav> it's kinda crap (widechar sigh) but it has more convenience functions than string
[17:45:51] <LordKalma> QStringLiteral saves the string in the .data and making QStrings from it is free
[17:46:04] <LordKalma> ah yes, it's utf-16 :/
[17:46:38] <rpav> with string_view now and fmt and some other stuff it's a lot less compelling, but i mean, that's super recent
[17:47:26] <LordKalma> In the end, we always reach the same conclusion
[17:47:50] <LordKalma> why does C++ keep worrying about std::vector and why doesn0t it give us a wide stdlib like everyone else?
[17:48:24] <rpav> blame design by committee and poor language culture
[17:48:56] <LordKalma> like, you can't even say string.replace_all is a high level tool ffs
[17:49:11] <rpav> e.g. "this must handle the most general case possible and the smaller the potential exception/problem the more important it is we handle it"
[17:49:47] <rpav> rather than "let's nail the most useful things in an immediately-useful way, and anything else we can give you tools to solve"
[17:51:11] <LordKalma> I mean, it would be cool to have a C#-level std lib
[17:51:28] <LordKalma> without the really high level "non-zero-cost-abstractions"
[17:51:39] <LordKalma> but still, there would be lots of cool stuff to have
[17:52:10] <rpav> there's so much you can do efficiently and nicely though
[17:52:16] <LordKalma> yap
[17:52:20] <rpav> like all of this is not an either/or thing
[17:55:11] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:58:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[17:59:33] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:59:48] <imMute> people need to learn what "zero overhead" really means.  and then drop it because it's a stupid rule to have
[18:00:19] <rpav> yeah, it's a poor and misunderstood term; it's a lie; it's an impediment
[18:01:00] <rpav> even "minimum cost" would be better, but even that's probably not accurate
[18:01:06] <imMute> I mean, it's an okay *goal* to have, but sometimes it just gets in the way.
[18:01:21] <imMute> like aim for it, but be okay with not hitting it all the time.
[18:01:52] <rpav> funnily, "pay for what you use" has the same problems in C++ as in real life.. at some point, you haven't paid for it, so it's _not even there_ for you to use ;)
[18:02:31] <Raziel> I paid for the whole stdlib and I'm gonna use the whole stdlib
[18:03:34] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[18:04:56] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:06:22] <Ameisen> Even <regex>?
[18:06:54] <rpav> regex was a combination of lazy and gcc's poor implementation being to blame i think
[18:06:56] <rpav> but i'm not sure
[18:07:08] <rpav> (gcc's original .. i think they fixed some of the issues)
[18:07:16] *** Quits: pepperoni (~pepperoni@gateway/vpn/pia/pepperoni) (Ping timeout: 268 seconds)
[18:07:17] <rpav> but it not working with string_view is a code crime
[18:07:27] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[18:09:07] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:09:23] <rpav> my "ideal" language would focus on minimal changes to the language and maximal library efficacy, a modularized library where "core" things only happened after they were battle-tested and refined, and there was a culture of library experimentation
[18:10:24] <imMute> "focus on minimal changes to the language and maximal library efficacy"  C++ already does that and look how bad variants are because of it
[18:10:33] <rpav> it definitely does not
[18:10:57] <rpav> i mean, the language should focus purely on being the most powerful possible language, and _everything_ else should be library
[18:11:22] <rpav> like if you can't express `if`, types, classes, etc as library constructs, the language isn't powerful enough
[18:12:21] <rpav> like "we want exceptions" doesn't mean "let's add exceptions to the core language," it should mean "let's add nonlinear/nonlocal flow control constructs sufficient for implementing exceptions in the library," so if they suck, or if you need a different form of such, then you can try a _different_ implementation
[18:13:44] <imMute> that sounds extremely difficult if not impossible to pull off :/   maybe I just lack imagination
[18:14:28] <rpav> nah, i mean, most flow control constructs as such probably boil down to "hey let's have contiunations"
[18:15:32] <rpav> like the language would likely need some way to express a condition and some local jump, but the syntax sugar for `if/else` may be separate, or `while` would become trivial, etc
[18:16:33] <rpav> the point though would be to carefully consider and add powerful general _tools_, rather than trying for general solutions to some very specific problem or language construct
[18:17:00] *** Joins: XJ8 (~XJ8@c-24-30-27-91.hsd1.ga.comcast.net)
[18:18:33] <XJ8> The big four I need to know to invest in the OOP mindset is encapsulation, abstraction, polymorphism, and inheritance. Anything I'm missing?
[18:18:59] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 264 seconds)
[18:19:32] <rpav> probably 30 years of practice following those
[18:19:36] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[18:19:47] <rpav> like, those were the thing in the 90s
[18:20:26] <XJ8> What is the OOP mindset for 2021 then? I want to phase out of C and procedural only programming and invest into C++ and other languages that use OOP programming.
[18:20:33] *** Joins: Praise (~Fat@user/praise)
[18:21:07] <imMute> XJ8: encapsulation and abstraction for sure.  polymorphism and inheritance aren't as necessary as the textbooks would lead you to believe - they're just tools for *some* jobs, don't try to use them all the time.
[18:22:12] <rpav> polymorphism has many forms; generally the "overload things" is a pretty useful/general tool
[18:22:21] <rpav> less the "treat things as an abstract base"
[18:22:56] <rpav> encapsulation is a bit more dubious depending on your interpretation
[18:23:13] <rpav> if you think of it purely as "associate these operations with this data" then 100%
[18:23:45] <imMute> that's how I think of it.  and usually data hiding comes along but not always
[18:23:46] <rpav> data hiding, classes as "containers of data+functions", etc is not really great in general
[18:24:28] <rpav> data hiding is great for maintaining invariants; beyond that .. it varies a lot, but this is C++ and there's not good syntax sugar
[18:24:33] *** Joins: Khoyo (~khoyo@user/khoyo)
[18:24:55] <rpav> i.e. there's no good reason to `class vec2 { float _x, _y; public: float& x() { return _x; } ... };`
[18:25:23] <zen_coder> can anybody help me with gmock? https://paste.ee/p/u4BVL I want to mock a method which stores a callback
[18:25:30] <zen_coder> but I also need this callback stored
[18:28:15] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[18:28:31] <InPhase> XJ8: Use inheritance only for strict is-a relationships, otherwise compose objects with members.  Use encapsulation heavily, and lock down behavior such that classes provide guarantees about data relationships.  Use abstraction in design layers so that high level code logic takes the form of the problem domain you are attempting to solve.  Use polymorphism to achieve dynamic behavior rather than
[18:28:37] <InPhase> inspecting types or downcasting.
[18:31:29] <InPhase> XJ8: Note that C++ does not require encapsulation for member values which are to be mutable and that have no associated guaranteed relationships with other values.  But if a value should not be mutable while the rest of the class members will be, use encapsulation.  Also if relationship guarantees must be preserved, encapsulate it.  The vast majority of the benefits of OOP come from good design
[18:31:33] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:31:35] <InPhase> following these encapsulation principles.
[18:33:27] <XJ8> Sometimes I see in C++ tutorials function definitions are in the classes, is that bad practice?
[18:33:58] *** Joins: pulse (~pulse@user/pulse)
[18:34:27] <InPhase> Generally avoid it if they are long.  You can throw short ones in there.  Also, if you are making a class template, it's fine to throw them all in there as they must be in the header file anyway to be broadly useful.
[18:38:16] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9d8f:c086:2e21:c52e)
[18:38:16] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9d8f:c086:2e21:c52e) (Changing host)
[18:38:16] *** Joins: skapata (~Skapata@user/skapata)
[18:42:10] *** Quits: XJ8 (~XJ8@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Client closed)
[18:48:36] *** Joins: varioust (~varioust@rrcs-76-79-31-136.west.biz.rr.com)
[19:03:23] *** Quits: Tokamak (~Tokamak@172.58.191.92) (Ping timeout: 264 seconds)
[19:04:27] *** Quits: varioust (~varioust@rrcs-76-79-31-136.west.biz.rr.com) (Quit: varioust)
[19:04:46] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:08:33] *** Joins: Tokamak (~Tokamak@172.58.191.92)
[19:09:33] *** Joins: pah (~pah@user/pah)
[19:09:54] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[19:10:18] *** Quits: Tokamak (~Tokamak@172.58.191.92) (Read error: Connection reset by peer)
[19:11:55] *** Joins: Tokamak (~Tokamak@172.58.191.92)
[19:18:09] *** Joins: magla (~gelignite@55d469ae.access.ecotel.net)
[19:23:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:46:51] *** Joins: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy)
[19:48:12] <jiffe> qstrings do look pretty awesome, I wish that would be incorporated into STL along with all the other string data classes
[19:48:21] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:48:55] <jiffe> installing qt-dev seems overkill just for a better string class
[19:49:44] <cq-work> Why are GDB conditionals so... iffy.
[19:51:20] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b1:3cd:1e41:a79b)
[19:51:38] <rpav> cq-work: while we're on that, loops
[19:53:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:56:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Client Quit)
[20:10:36] *** Quits: Tokamak (~Tokamak@172.58.191.92) (Ping timeout: 268 seconds)
[20:13:14] *** Joins: Tokamak (~Tokamak@172.58.191.92)
[20:22:05] *** Joins: nezos (~nezos@188.73.235.101)
[20:23:42] <nezos> any idea what error: '_' was not declared in this scope would mean for line: void toggle_alpha()	{	toggle(alpha, alpha_bt, _("Graphics/Alpha"));	}   could this be a function?
[20:25:33] <cq-work> Means _ wasn't declared or has a definition.
[20:25:44] <cq-work> What is it supposed to be?
[20:25:51] *** Joins: CaCode (~CaCode@user/cacode)
[20:26:00] <nezos> its from MathGL (the library)
[20:26:30] <kalven> that _ is most likely from GNU's gettext library (for localization)
[20:26:50] <nezos> if it's from gettext, does this mean I am missing an include statement?
[20:27:47] *** Joins: paul424 (~tom@ip-5-172-234-195.multi.internet.cyfrowypolsat.pl)
[20:28:19] <kalven> probably, yes
[20:28:26] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[20:29:02] <nezos> the strange thing is that I compiled the library and now I am trying to access it from my program - added it's include file
[20:30:01] *** pah is now known as pa
[20:30:28] <cq-work> Herm... if I write to an fstream and immediately read from it, is the write buffer guaranteed to be flushed?
[20:30:35] <cq-work> Or do I need to explicitly flush before trying to read?
[20:35:19] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:37:01] *** Quits: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy) (Quit: Leaving)
[20:39:16] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:40:51] <cq-work> Dang, seems like I need to flush. I guess that makes sense.
[20:44:29] <CarloWood>  { auto s = std::format("{}", M_PI); cout << s; }
[20:44:29] <geordi> error: 'format' is not a member of 'std'
[20:44:35] <CarloWood> why?
[20:44:53] <cq-work> Nobody implements it smh
[20:45:24] <cq-work> Oh, I guess msvc does.
[20:45:58] <CarloWood> Weird, it is part of the standard... ms pushed it through against the will of everyone else or something?
[20:46:46] <InPhase> std::format is decades overdue.
[20:46:55] <InPhase> I don't understand the lag on that one.
[20:47:08] <InPhase> It's not even that hard I think.
[20:47:10] <cq-work> It's even fairly easy to implement I believe, plus there's a reference implementation.
[20:47:45] <rpav> << &fmt::format
[20:47:45] <geordi> error: 'fmt' has not been declared
[20:47:47] <CarloWood> Seems that clang HEAD has std::experimental::format
[20:47:47] <rpav> ;/
[20:48:06] <CarloWood> how do I switch to clang with geordi?
[20:48:44] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:49:37] <InPhase> geordi: --clang { experimental::format("Hello {}", "World"); }
[20:49:37] <geordi> exception: execv
[20:49:40] *** Joins: great_taste (~great_tas@190.32.235.20)
[20:49:42] <InPhase> Like that I think.
[20:49:49] <InPhase> Except for the failure to work.
[20:52:04] <InPhase> TinoDidriksen: Permissions error on executing clang?
[20:52:37] <rpav> << experimental::format("{}", 42);
[20:52:37] <geordi> error: 'format' is not a member of 'experimental'
[20:52:49] <rpav> weird, so the clang version also uses libc++?
[20:53:09] <rpav> the docs dont' actually mention that but it's pretty useful if so
[20:54:19] <InPhase> rpav: Unclear.  The execv error happened before the parsing was done.
[20:55:14] <InPhase> --clang { I'm a little teapot }
[20:55:20] <InPhase> geordi: --clang { I'm a little teapot }
[20:55:20] <geordi> error: Unexpected end of request. Expected any symbol.
[20:55:33] <InPhase> Hmm.
[20:55:47] <InPhase> geordi: --clang { Im a little teapot }
[20:55:47] <geordi> exception: execv
[21:00:41] *** Joins: pah (~pah@user/pah)
[21:01:35] *** Quits: pa (~pah@user/pah) (Ping timeout: 264 seconds)
[21:05:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:18:00] <TinoDidriksen> Clang is not enabled. Code got out of sync with upstream years ago, and Eelis hasn't fixed that.
[21:19:20] *** pah is now known as pa
[21:20:15] <PJBoy> [2020-04-24 21:31:00] <Eelis> Oleg_: because i got tired of updating the patch geordi used to stop clang from demanding to create temporary files, a demand that gcc just doesn't have
[21:21:03] <kalven> ah.. Oleg_
[21:22:15] <PJBoy> ...what about them?
[21:24:45] <CarloWood> Anyone has a good name for an object that contains two strings: a prefix and a postfix that should be applied eventually?
[21:25:22] <CarloWood> I am using Wrapper now, but not happy with it.  PrefixAndPostfixPair is a bit too long for my taste though :P
[21:25:23] *** Quits: Tokamak (~Tokamak@172.58.191.92) (Read error: Connection reset by peer)
[21:27:11] <PJBoy> AffixPair?
[21:28:08] <PJBoy> Circumfix
[21:30:02] <kalven> AIPrefixAndPostfixPairFactory
[21:30:33] *** Joins: Tokamak (~Tokamak@172.58.191.92)
[21:30:42] <CarloWood> AffixPair is good
[21:32:09] <CarloWood> Or even just Affixes
[21:32:10] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[21:32:26] <LordKalma> kalven, what is this? java?
[21:35:10] <CarloWood> Circumfix is even better, seems to exactly describe what this is! But... wrong associations
[21:35:35] *** Joins: causative (~halberd@user/causative)
[21:35:55] <PJBoy> AffixColony
[21:35:58] <PJBoy> :p
[21:37:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:45] *** ChanServ sets mode: +v npaperbot
[21:42:09] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:43:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:43:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:45:19] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:50:37] *** Joins: CaCode_ (~CaCode@user/cacode)
[21:53:11] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 264 seconds)
[22:01:23] <rpav> InPhase: well, presumably as the alternative is libstdc++ and g++ uses that
[22:08:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:10:15] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[22:10:38] <Ronalds_Mazitis_> install(TARGETS ${PROJECT_NAME}
[22:10:47] <Ronalds_Mazitis_>  // /home/ronalds/video_editor/CMakeLists.txt:39: error: install TARGETS given target "video_editor" which does not exist.
[22:11:26] <cq-work> Your project is presumably named "video_editor". But you don't have a target named that.
[22:11:56] <Ronalds_Mazitis_> more?
[22:12:35] <cq-work> More what?
[22:12:35] *** Joins: CaCode- (~CaCode@user/cacode)
[22:13:29] <Ronalds_Mazitis_> where do I set it
[22:14:17] <cq-work> Targets are created via commands like add_executable.
[22:14:52] <cq-work> Might want to take a look at the cmake docs for how targets work.
[22:15:11] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[22:17:32] <Ronalds_Mazitis_>   "/home/ronalds/video_editor/./lib/other/libMagic.so":-1: error: No such file or
[22:20:59] <RandomReader> rpav - re dllimport, why would you think there's no dynamic linker?
[22:22:32] *** Joins: ravan (~ravan@user/ravan)
[22:23:47] <rpav> RandomReader: does windows do run-time dynamic link resolution? note: dlopen()/dlsym() is not what i mean
[22:24:03] <RandomReader> of course it does, dlls wouldn't work at all otherwise
[22:24:18] <rpav> of course they would, because they're resolved at compile-time by linking to the dll .lib
[22:24:52] <RandomReader> no, that's not what the lib does, because it's naturally impossible
[22:24:54] <rpav> note, also "loading the file into memory" doesn't count as "dynamic link resolution," i mean actually doing symbol table resolution
[22:25:24] <RandomReader> if this were very old dos days, then potentially, but pretty much all modern vm-based systems have the same issue with dynamic code loading and symbol location within the address space
[22:25:32] <RandomReader> which naturally means some form of dynamic linking and relocation
[22:25:37] <rpav> (also i think DLLs compiled by/for gcc/mingw actually do dynamic resolution through a mechanism but i'm not sure how their toolchain works in detail)
[22:26:05] <rpav> RandomReader: patching up the address table is also not the same thing :p
[22:26:11] <RandomReader> especially these days, with ASLR and its variations as an attack mitigation
[22:26:16] <cq-work> What do we mean by dynamic resolution?
[22:26:27] <cq-work> Like lazy symbol loading?
[22:26:43] <RandomReader> what are you considering an address table here, and why do you think it's not related?
[22:26:57] <RandomReader> or maybe I should ask instead: how *do* you think this stuff works currently, on either platform?
[22:26:57] <rpav> i mean finding the appropriate library and doing _symbol_ (not _address_) resolution _at runtime_
[22:27:33] <rpav> i.e. what ldlinux.so does, and how shared libraries work, not static "this .dll has these symbols"
[22:28:28] <RandomReader> what's your understanding of what it does?
[22:28:31] <rpav> rather "we resolve symbols by looking at libraries and see what actually exists"
[22:29:26] <cq-work> You can tell the linker to not require certain dll names so you can manually load symbols/dlls into the address space before using said symbols.
[22:29:47] <RandomReader> at the moment it sounds like you're trying to say the linker doesn't need to know that a symbol should be found in an .so, but of course that's not how it works, we see that all the time
[22:29:50] <rpav> RandomReader: just like either of https://docs.microsoft.com/en-us/windows/win32/dlls/about-dynamic-link-libraries indicate
[22:30:12] <rpav> "An import library supplies the system with the information needed to load the DLL and locate the exported DLL functions when the application is loaded"
[22:30:25] <rpav> alternatively you manually load symbols with the API
[22:30:44] <RandomReader> I was asking your understanding of what ldlinux.so does
[22:31:23] <RandomReader> I realize the overview ms documentation doesn't explain the details of how the import libraries work or what the purpose of dllimport is
[22:31:24] <rpav> every library that's linked is loaded and symbols are resolved against them; thus you can e.g. LD_PRELOAD a library and have its symbols override later linkage
[22:32:15] <rpav> (also things like "reverse-resolve symbols _in the library_ against binary" are possible)
[22:33:01] <RandomReader> are you calling that specific *tool capability* "dynamic linking"?  most definitions of the term would consider it the symbol resolving part (since that's exactly analogous to static linking)
[22:33:05] <rpav> none of this particularly needs known at link time, and you can force the linker to ignore errors and produce a working binary
[22:33:16] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:33:25] <rpav> the _tool_ _is_ the dynamic linker
[22:33:55] <RandomReader> but "dynamic linking" is a specific subset of what the tool does
[22:33:56] <rpav> afaict windows does not have such a counterpart capable of such functionality, as used by conventional tools (i.e. things built with VS/MS SDK)
[22:34:10] <Ronalds_Mazitis_> find: â€˜libMagic.soâ€™: No such file or directory
[22:34:12] <RandomReader> otherwise your comment is just "windows doesn't use ldlinux.so" which is .. obvious
[22:34:27] <rpav> i'm not particularly interested in arguing the particular hair-splitting of what this term or that definition does
[22:35:06] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[22:35:22] <RandomReader> it's not hair splitting if your usage of the term "dynamic linker" is different from common usage
[22:35:22] <rpav> the point is normal DLL linkage is not resolved at runtime, but compile-time, and thus you need dllimport and a .lib file to do so for the relevant symbols
[22:35:30] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[22:35:34] <RandomReader> and I'm trying to understand your original comment
[22:36:14] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[22:36:17] <RandomReader> would you consider dlopen/dlsym not dynamic linking?
[22:36:31] <RandomReader> as in, they don't use dynamic linking as part of what they do
[22:37:14] <rpav> they dynamically load symbols, but they're not _a dynamic linker_ as part of the binary loading process
[22:37:36] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[22:37:55] <cq-work> So you mean to say they're dynamically loading symbols statically
[22:38:18] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (Read error: Connection reset by peer)
[22:38:21] <cq-work> I'm not really sure what that means really
[22:38:21] *** Joins: tct_ (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[22:38:23] <rpav> <rpav> the point is normal DLL linkage is not resolved at runtime, but compile-time, and thus you need dllimport and a .lib file to do so for the relevant symbols
[22:38:31] <cq-work> It isn't though.
[22:38:43] <rpav> but it is; see the link to MS documentation i posted above
[22:38:52] <cq-work> How would lazy symbol loading work in that case.
[22:39:22] <rpav> what do _you_ mean by "lazy symbol loading"
[22:40:00] <rpav> if you mean LoadLibrary / GetProcAddress or whatever, that has nothing to do it
[22:40:25] <RandomReader> ok I think I get what you're saying, but I don't agree with that, and it doesn't even match the way the term is used in Drepper's DSO doc
[22:40:58] <rpav> we're talking _load-time_; of course you _can_ look up the symbol and get it, _again_ the point is that there is no similar tool in windows that _does load-time resolution_ by looking up symbols in DLLs and resolving the (currently-loading) symbol table against them
[22:41:03] <cq-work> https://docs.microsoft.com/en-us/cpp/build/reference/linker-support-for-delay-loaded-dlls?view=msvc-160
[22:41:14] <RandomReader> windows definitely has a dynamic linker, like I said it's pretty much required for any modern VM-based platform that has a DLL or SO like concept
[22:41:26] <RandomReader> what you're talking about is specifically the symbol search policy, but that's independent of linking
[22:41:53] <RandomReader> anyway, none of this actually helps explain what dllimport and the import libraries actually do, which is probably more relevant
[22:41:54] <rpav> cq-work: that's also orthogonal, you still _know_ the symbol exists in a specific DLL .. this was specified at link-time and resolved through the .lib
[22:42:25] <rpav> you just have a stub that doesn't actually fully load until called
[22:43:11] <rpav> i mean consider you could do this for your binary .. order the code such that you don't "fully load" the binary until you call a function in some particular block
[22:43:36] <rpav> it wouldn't require any dynamic resolution, you know where everything is and how to load it, you just don't do so until called
[22:43:45] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[22:44:11] <RandomReader> that's also called delay loading, which exists on both platforms, but not what we're talking about here
[22:44:20] <rpav> RandomReader: i literally pasted the text above that you seem to factually dispute; between your claims and official MS docs, i would recommend trying ot understand the latter
[22:44:33] <rpav> "An import library supplies the system with the information needed to load the DLL and locate the exported DLL functions when the application is loaded"
[22:44:39] <RandomReader> I'm still typing out what it does
[22:45:19] <rpav> (and dllimport tells the "client code" which symbols to resolve against such libraries)
[22:45:20] <RandomReader> I'm not disputing anything, other than that saying that windows does in fact have dynamic linking
[22:45:38] <rpav> no one said it didn't have _dynamic linking_
[22:46:14] <rpav> it doesn't have _a dynamic linker_, or do (by default) dynamic symbol resolution like (some, i.e. modern ELF) shared libraries do
[22:46:33] <rpav> (old stuff like a.out shared libs were very much like DLLs)
[22:46:48] <RandomReader> but it does have both, it's just not the same policy as DSOs
[22:46:55] <RandomReader> unix a.out sharing was never like DLLs
[22:46:58] <rpav> it does not and it has nothing to do with "policy"
[22:48:21] *** Quits: DrMax (~DrMax@node-1w7jra94757g2eprjyhu30i0z.ipv6.telus.net) (Remote host closed the connection)
[22:48:29] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[22:48:37] <rpav> https://docs.microsoft.com/en-us/windows/win32/dlls/load-time-dynamic-linking
[22:49:24] *** Joins: DrMax (~DrMax@node-1w7jra94757g15oqdsiso9d47.ipv6.telus.net)
[22:49:27] <rpav> there is no "but use this policy instead" which changes load-time dynamic linking to dynamically resolve symbols
[22:50:32] <RandomReader> I'm not claiming it's something readily configurable, I'm saying it's just a particular choice .. it doesn't make it any less of a dynamic linker
[22:50:44] <rpav> there is no "dynamic linker"
[22:50:47] *** Joins: xcm (~xcm@user/xcm)
[22:50:49] <RandomReader> so for both platforms, if a particular executable has a referenced symbol that is expected to be resolved at runtime in a dynamically-loaded entity (e.g. SO or DLL), then during static linking it needs some form of indirection to indicate that
[22:50:52] <cq-work> ...
[22:51:15] <rpav> i.e. compare this to https://stackoverflow.com/a/5130690
[22:51:37] <rpav> or probably better/more-detailed explanations, that was just like the first link and seemed reasonable
[22:51:57] *** Joins: flynn0 (~mcbloch@user/flynn)
[22:52:12] <cq-work> Are you just saying they are two different approaches?
[22:52:21] <cq-work> I don't understand where you getting the conclusion that there isn't a dynamic linker.
[22:53:05] <rpav> if there is "a dynamic linker," i.e. a program that runs at run-time and dynamically resolves linkage, in windows, what is it?
[22:53:24] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 268 seconds)
[22:53:25] <RandomReader> over time different platforms have experimented with a lot of models for that, but these days the most common approach is essentially a table-based lookup: the statically-linked code does a read from a table for the actual location of the target symbol, and then continues from there
[22:53:25] *** Joins: Guest4615 (~Guest46@pool-108-7-37-172.bstnma.fios.verizon.net)
[22:53:26] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 245 seconds)
[22:53:26] *** flynn0 is now known as flynn
[22:53:40] *** Quits: xcm_ (~xcm@user/xcm) (Ping timeout: 260 seconds)
[22:54:23] <RandomReader> which is pretty much analogous to object files during the static compilation process: each one references something external, the linker is responsible for finding the real location .. the primary difference here is that the dynamic linker modifies the table, rather than every reference in the code
[22:54:55] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[22:54:57] <rpav> the point isn't "symbol tables exist;" obviously they do .. it's in how and when the addresses in those symbol tables get resolved
[22:55:09] <rpav> i.e. where the symbols reside and which are going to be used
[22:55:25] <RandomReader> the high-level difference in approaches between e.g. Windows and Linux is how the table is used, as in how often / for what
[22:55:54] <cq-work> Clearly not because I've indicated you can do that at basically any time.
[22:56:11] <rpav> well i mean the high-level difference between linux and windows is how the kernel is used, as in how often / for what ;)
[22:57:50] <rpav> in any case dancing around definitions rather than addressing the mechanics is a waste of time for everyone; i've provided explicit links to official sources (except for .so, obviously, go look that shit up or dispute what the post says Â¯\_(ãƒ„)_/Â¯) exactly what i'm talking about, exactly what happens, and how, and the only argument is "well that term isn't exactly what i'd call it" or "at a high level it's
[22:57:50] <rpav> basically similar"
[22:57:55] <RandomReader> Windows for C++ defaults to encapsulation, DLLs are independent self-contained modules that can be implemented in any language, so references between them are opt-in and the symbol resolution process includes the module name for disambiguation
[22:59:13] <RandomReader> Linux C++ defaults to it's-all-the-same-program, shared objects are just part of what is ultimately a single C-like executable, so references between then are opt-out and the symbol resolution process is similar to how the C tooling behaves: global namespace, find the first matching one, with some conflict resolution if duplicates exist
[23:00:22] <cq-work> The argument isn't about terminology, it's about you saying "Windows can't do X" and people saying that it can do X.
[23:00:29] *** Joins: ravan (~ravan@user/ravan)
[23:00:33] <rpav> cq-work: those people are demonstrably wrong
[23:00:35] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[23:00:38] <cq-work> If you point out a particular difference, then fine. When you say that Windows doesn't have a dynamic linker, that's retarded.
[23:00:50] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/73beb2f5bb81cac1e5790cbd706835fe/pasted.txt
[23:00:58] <Ronalds_Mazitis_> how do I set these correctly
[23:01:28] <rpav> cq-work: what do you think i mean by "a dynamic linker," because i've said explicitly i mean somethnig like ld.so / ld-linux.so.*, that performs a similarly-capable function, at load-time
[23:01:42] <rpav> cq-work: this is entirely different from "dynamic linking," though i admit the terms are annoyingly similar
[23:01:50] <cq-work> You say "similarly-capable function" and you've been pointed out several.
[23:02:57] <rpav> you are free to point out how for example a program's symbols can be looked up and resolved against a DLL at _load-time_, rather than at compile-time as MS documentation describes
[23:03:17] <rpav> this would avert the need for dllimport (though one could still find use for dllexport)
[23:03:37] <RandomReader> no, you're still under a misunderstanding about what dllimport does
[23:03:40] <rpav> this would also allow e.g. LD_PRELOAD-style functionality, or reverse dynamic linking
[23:06:23] <RandomReader> dllimport is an indication to the compiler that this should be resolved externally, meaning indirect call through the import table (so the same thing linux does by default for all global symbols)
[23:06:50] <rpav> yeah and?
[23:07:29] <RandomReader> it's optional for functions, because the dll import library contains thunks that do the same thing .. but it is an optimization since it will have the compiler do the indirection directly (heh) instead of calling the thunk
[23:07:58] <RandomReader> it's not optional for variables, since those would not have any kind of indirection otherwise
[23:08:21] <rpav> (i'll handwave the pedantry and consider that you mean dllimport refers to _the dll interface_ as the documentation says rather than some general "external resolution")
[23:09:06] <RandomReader> resolved externally in the sense of the import table, which is used by the OS dynamic linker to resolve DLL symbols yes
[23:09:38] <RandomReader> it only directs the compiler to use the import table though, it doesn't (at this stage) know anything else
[23:09:39] <rpav> so what is this "OS dynamic linker" that resolves DLL symbols in the case of windows
[23:09:55] <rpav> (it doesn't count as a dynamic linker if it doesn't run at load-time)
[23:10:15] <RandomReader> the static linker will come along and, based on the import library, tag the import table symbol as belonging to a particular module name
[23:10:35] <RandomReader> it's the thing that looks at the import table in the executable being loaded, and tracks down those symbols in the appropriate DLLs
[23:10:49] <RandomReader> same concept as linux, just with the module name attached to the symbol for disambiguation
[23:10:51] <rpav> name? documentation?
[23:11:13] <RandomReader> hang on, let me see if I can find an archive ... MS seems to have purged stuff again
[23:11:27] <rpav> especially interesting as this is in direct contradiction to the above MS documentation on how load-time resolution works
[23:11:50] <RandomReader> this is load-time though
[23:12:18] *** Quits: nezos (~nezos@188.73.235.101) (Quit: Leaving)
[23:12:25] <RandomReader> like it literally says, at load time this is the system using the information to look stuff up
[23:12:51] <RandomReader> linux does the same thing, it just doesn't attach information saying that symbols only belong to specific module names
[23:13:40] <RandomReader> ...ok not what I was looking for, but potentially interesting about dllimport itself: https://web.archive.org/web/20140808231508/http://blogs.msdn.com/b/russellk/archive/2005/03/20/399465.aspx
[23:15:45] <Ronalds_Mazitis_> hey
[23:15:56] <Ronalds_Mazitis_> what could be wrong with my CMakeLists.txt
[23:15:58] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/6258a2f31bdbf3f7a730f0bb77bf5643/pasted.txt
[23:16:36] <rpav> i'm not sure you should install(FILES ...) like that
[23:16:55] <rpav> there doesn't seem to be a good reason; it'd have to already exist on the target machine, and at that point why make a copy
[23:17:10] <cq-work> You should generally not use any absolute path like that.
[23:17:29] <cq-work> Differs between distributions even.
[23:18:55] <RandomReader> ...and where I thought the information was is more about DLL loading in general, doesn't describe the loading
[23:19:13] <RandomReader> I wonder if I got this from one of the sysinternals books way back, which I no longer have and am not going to be able to reference
[23:19:20] <Ronalds_Mazitis_> install(FILES /usr/lib/x86_64-linux-gnu/libmagic.so.1.0.0
[23:19:25] <Ronalds_Mazitis_> how do I write this one
[23:19:27] <RandomReader> sorry, doesn't describe the symbol resolution*
[23:19:27] <Ronalds_Mazitis_> not sure
[23:19:34] <rpav> Ronalds_Mazitis_: you should probably not write that at all
[23:19:57] <rpav> Ronalds_Mazitis_: what are you trying to do by doing this?
[23:20:04] *** Quits: anjali (~anjali@42.111.17.15) (Remote host closed the connection)
[23:20:13] <rpav> like, why do you need that .so copied to your lib directory
[23:20:18] <Ronalds_Mazitis_> run qt widget
[23:20:39] *** Joins: anjali (~anjali@42.111.17.15)
[23:21:05] <rpav> if Qt needs that it should find it itself, and rpath it or otherwise provide a way to find it .. is your code failing if it's not there?
[23:21:26] <Ronalds_Mazitis_> :-1: error: [Makefile:105: install] Error 1
[23:21:31] *** Quits: anjali (~anjali@42.111.17.15) (Max SendQ exceeded)
[23:21:36] <cbreak> Ronalds_Mazitis_: you should install your own files
[23:21:51] <Ronalds_Mazitis_> what my own files
[23:21:58] <cbreak> what what?
[23:22:02] <Ronalds_Mazitis_> wdymean
[23:22:05] *** Joins: anjali (~anjali@42.111.17.15)
[23:22:07] <cbreak> install files that you created
[23:22:09] <cq-work> You shouldn't install system files.
[23:22:36] <Ronalds_Mazitis_> I installed qt creator and try to create widget project
[23:22:43] <Ronalds_Mazitis_> what do I do wrong
[23:22:44] <cbreak> so?
[23:22:57] <cbreak> remove the install(FILES /usr...) nonsense
[23:23:02] <cq-work> Is that what the widget project is putting out?
[23:23:12] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/d253452253c42770fa9ff88f0706e983/pasted.txt
[23:23:17] <Ronalds_Mazitis_> I removed it
[23:23:51] <cbreak> normally, one would not set CMAKE_INSTALL_PREFIX in a cmake lists file
[23:24:04] <cbreak> the user would set it via cmake -D, ccmake or cmake-gui
[23:24:34] <RandomReader> rpav - "nt dll loader" I think is the correct name.. and this describes a bunch: https://docs.microsoft.com/en-us/archive/msdn-magazine/2002/march/windows-2000-loader-what-goes-on-inside-windows-2000-solving-the-mysteries-of-the-loader
[23:24:39] <rpav> RandomReader: ok it appears dllimport isn't necessary, just an optimization .. i was getting suspicious when the actual documentation of "dllimport" on the reference pages was sparse, but dllexport was pretty extensive
[23:25:05] <cbreak> that would then create a cache variable, not a normal variable
[23:25:16] <RandomReader> it's starting from the perspective of a DLL being loaded, not an initial .exe, but when it gets to the part about dependencies, IAT etc -- that's all the same as for the initial .exe, it's the same file format
[23:25:33] <cbreak> not sure why you have two find_package for Qt
[23:25:55] <RandomReader> (dll and .exe aren't actually different, both are PE, one is just loaded first .. and of course some metadata differences)
[23:28:39] <rpav> sure but the point is with DLLs, you have static symbol/.dll resolution with load-time address fixup, vs basically runtime resolution of both (ignoring rpath bs) _in addition to_ address fixups
[23:28:50] <RandomReader> and yeah re: dllimport, it's always been one of those "do this but we're going to be fuzzy about why" in most of the docs, it's annoying
[23:29:18] <rpav> that should definitely be explicitly documented, i don't think anyone would object to knowing "you don't have to, but it makes your code faster" ;P
[23:29:37] <RandomReader> what about it is any more static than linux though?
[23:29:47] <rpav> though the linker appears to be able to tell these days anyway so i'm not sure why the holdover
[23:29:55] <RandomReader> other than pairing the symbol/module names (as in, look for symbol "foo" in module "bar"), I'm not seeing any real difference
[23:30:59] <rpav> afaict the DLL has a fixed table of addresses _for that dll_ / those symbols, and loading mostly consists of "map the file and offset everything in the table by the new base"
[23:31:12] <RandomReader> "bar" is searched for in a set of paths, and "foo" is looked up within it .. whereas linux starts with a list of modules and looks up "foo" in each one
[23:31:47] <rpav> elf SOs are "there are these symbols that need resolved" and resolution can be done in a wide range of ways
[23:33:07] <RandomReader> what are you seeing different about the DLL table vs an SO one, in terms of addresses / loading?
[23:33:08] <rpav> the DLL table is fixed, though, from everything i've read .. it's a series of "already-known addresses" for the functions it contains, you can't add or remove things that then later get resolved from it
[23:33:10] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[23:33:31] *** Joins: flynn (~mcbloch@user/flynn)
[23:33:34] <rpav> like you can't change the layout of the DLL and use that to resolve
[23:33:47] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/90cd16b769caf802bf8e49ec83d933df/pasted.txt
[23:33:47] <rpav> like a vtable more or less
[23:33:49] <Ronalds_Mazitis_> here
[23:34:24] <rpav> plus you can't resolve _out of the dll_ afaik
[23:34:25] <Ronalds_Mazitis_> why can't this be done
[23:35:02] <RandomReader> I'm not following what you mean or how it's different from an SO
[23:35:17] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/b3f0e6683d8017a140f57c921e216270/pasted.txt
[23:35:31] <rpav> though presumably if your binary had an export table exactly like the dll wanted, i'm not sure you couldn't, for that dll, resolve some symbols, but it would require somethng doing mutual resolution
[23:35:33] <Ronalds_Mazitis_> I don't have days to waste on not including working makelist file
[23:35:36] <Ronalds_Mazitis_> qt
[23:35:53] <RandomReader> .exes and .dlls have the same dependency/resolution process
[23:36:15] <RandomReader> I've built an .exe/.dll pair that relied on symbols from each other, if that's the scenario you have in mind
[23:36:23] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 264 seconds)
[23:37:07] <RandomReader> I don't get what you mean about the layout changing though .. like an SO is built and is also "done" in that sense, what is there to change?
[23:37:08] <rpav> sure but can you build a .exe and _set_ of .dlls that resolve together :P
[23:37:18] <RandomReader> yes?
[23:37:29] <RandomReader> or maybe, what would the potential problem be?
[23:37:35] <rpav> RandomReader: minor version bump that adds symbols
[23:37:57] <RandomReader> so creating a new SO or DLL, sure, that works fine on both platforms
[23:37:58] <rpav> and not relink the .exe
[23:38:03] <RandomReader> yes of course
[23:38:16] <rpav> i'm dubious and haven't seen anything that indicates how this would work
[23:38:17] <RandomReader> addresses aren't encoded by the importer, that's the point of the table in the first placfe
[23:38:37] <RandomReader> otherwise this would just be static linking, there'd be nothing dynamic about it
[23:38:49] <rpav> it would be dynamic in that the code is loaded at runtime
[23:39:32] <RandomReader> I can replace a DLL used by a program any time I want, as long as I keep the same module name (which doesn't include any versioning data, that's all external management) and whatever symbol names the program depends on
[23:40:10] <rpav> i'll have to play with it and see if there's anything a dll can't practically accomplish aside from like, LD_PRELOAD
[23:40:14] <RandomReader> oh, are you perhaps thinking of the very old rebase system from the win3.1 days?
[23:40:16] *** Joins: Khoyo (~khoyo@user/khoyo)
[23:40:33] <RandomReader> it was along the same likes as before most unix stuff was relocatable
[23:40:36] <rpav> i definitely do not remember win16 heh
[23:40:46] <RandomReader> that did a pass to encode addresses, things were not easily swappable
[23:41:16] <RandomReader> it's also why the PE format has a base address field, today it's mostly useless
[23:42:56] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:45:56] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/d253452253c42770fa9ff88f0706e983/pasted.txt
[23:46:01] <RandomReader> hmm, I wonder if that fixed-address thing was still relevant for some of win9x .. I didn't really dig into this stuff until I had NT, and I can't quite remember how things behaved on 9x
[23:47:51] <rpav> ok so dllexport _is_ export-by-name, the (found the proper term) ordinal binding stuff _isn't_ default
[23:48:08] <RandomReader> I wish MS would stop screwing with their URLs, but these blog entries describe DLL loading in broad strokes, which gets into some of the things like resolving cycles in the dependency graphs: https://web.archive.org/web/*/https://blogs.msdn.microsoft.com/mgrier/2005/06/*
[23:48:23] <RandomReader> ah, ordinal binding, yeah
[23:48:38] <rpav> so probably at least from a practical standpoint LD_PRELOAD or anything requiring position-independent code are the only things you'd have trouble with
[23:49:20] <RandomReader> I believe it's still possible to control ordinals, just might need extra tools to do it
[23:49:45] <RandomReader> been a long time since I looked at it though, and you're right that it was pretty fragile
[23:49:57] <rpav> probably but the issue is if you alter what the loading .exe expects you're going to have trouble
[23:50:00] <RandomReader> all PE forms should be the equivalent of PIC
[23:50:15] <RandomReader> the ones in use today, I mena
[23:50:40] <RandomReader> well on a base level the ordinal is just looking up a symbol by index instead of name
[23:50:47] <rpav> isn't lack of PIC the whole reason DLLs aren't "shared"?
[23:50:48] <RandomReader> so the issue is controlling the export table, not any of the actual code
[23:50:53] <RandomReader> DLLs are shared
[23:51:22] <rpav> relocation is different than position-independent
[23:51:50] <RandomReader> right, non-PIC has to be rewritten as it's relocated
[23:52:20] <RandomReader> but as far as I'm aware, msvc doesn't really generate non-PIC anyway
[23:52:34] <RandomReader> maybe in one of its "kernel" modes?
[23:53:05] <rpav> everything i'm seeing has said dlls are relocated, addresses rewritten, and not position-independent, e.g. disallowing multiple processes from sharing the code
[23:53:35] <rpav> probably not the hugest issue as windows doesn't seem to have a huge common base of code in the first place, but
[23:55:09] <RandomReader> I mean the DLL process *supports* that, but that goes back to what I was thinking of in the win3.1 days, and that base address field
[23:55:44] <RandomReader> it was set up so that you'd choose an address base that wasn't going to be used by anything else, so it would be located there in every single process, and zero fixups would be needed
[23:56:16] <RandomReader> then it became an optional hint, for optimization
[23:56:23] <RandomReader> then ASLR basically wrecked that as a concept
[23:57:13] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[23:57:30] <RandomReader> as far as I'm aware, all the actual code these days is generated relative, and the only rewrites are for part of the PE metadata, since I think some of that is absolute
[23:58:00] <RandomReader> it's actually pretty important on Windows because most processes use quite a few common system DLLs
[23:58:35] <RandomReader> ASLR would be useless if those stayed at common virtual addresses, so they're definitely driven to optimize that somehow
[23:59:01] <cbreak> Ronalds_Mazitis_: why can what not be done?
