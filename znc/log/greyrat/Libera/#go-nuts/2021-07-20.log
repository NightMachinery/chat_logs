[00:01:01] *** Quits: av (uid87081@id-87081.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:02:24] <Thedarkb-Desktop> My web app is area specific and unlikely to see more than 1000 customers per month.
[00:02:34] <Thedarkb-Desktop> So I reckon I should be alright with the http package.
[00:02:43] *** Quits: src (~src@user/src) (Quit: leaving)
[00:02:47] <dante443> Yeah, I've never had a pleasant time with nginx so I'll probably just serve it on my go app, thanks for the feedback!
[00:03:06] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[00:03:23] *** Joins: holgersson (~quassel@user/holgersson)
[00:15:13] *** Joins: dr0n (~nabromov@94.11.23.235)
[00:19:29] <dante443> Have you ever seen this discussion on nginx vs go? Someone tried swapping http.ServeContent with io.Copy and clocked 4x better metrics. Any thoughts on it? https://www.reddit.com/r/golang/comments/28so0e/go_networking_performance_vs_nginx/cif19e1/
[00:20:20] *** Quits: kulak1 (~kulak@user/kulak) (Read error: Connection reset by peer)
[00:21:10] <dante443> Incidentally, also 2x better metrics than nginx
[00:21:12] *** Joins: kulak1 (~kulak@user/kulak)
[00:22:14] <alyx> it looks like they're forgoing a lot of HTTP specific things, such as setting Content-* headers
[00:22:17] <foobaz> if you need to serve static files very fast, that's good info
[00:22:33] <foobaz> but it's a niche use case and ignores the vast majority of features of both nginx and go
[00:23:18] <dante443> Oh for sure. Just more of a bare metal comparison
[00:23:20] <alyx> if you already have the file types, sizes, etc. pre-computed then it could definitely be possible to handle file serving appropriately while taking advantage of the performance boost by not calculating that on the fly like serveContent does
[00:23:29] <foobaz> all the go web servers i've written are bottlenecked by the processing that my own code is doing, like disk i/o and computation
[00:24:39] <foobaz> and the strength of nginx is in caching, which is not measured there
[00:24:52] <alyx> ^ unless you're either literally FAANG scale or doing some very intense internal web applicationing, "speed to serve the content" is probably not your bottleneck, but if it can be done in a way which is both fast and appropriate, extra speed never hurts :P
[00:25:07] <alyx> the other benefit for nginx or similar, imo, is flexibility
[00:25:41] <foobaz> but it's up against go here, which is so flexible it's turing complete :)
[00:25:53] <alyx> depends on if that's good or bad ;P
[00:26:10] <dante443> The example used a caching pattern for go: https://github.com/yosssi/go-fileserver/blob/master/file_server.go
[00:26:20] <alyx> I personally like nginx because I have a lot of power in very few lines and don't need to modify the backend application to make it happen
[00:26:38] <foobaz> btw if you want to use nginx + go, be sure to write the appropriate cache headers to your http responses, so nginx has the info it needs to cache intelligently
[00:27:05] <foobaz> like an expiration date
[00:27:07] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[00:31:06] *** Quits: burningserenity_ (~burningse@2603-9001-0f01-ad99-0000-0000-0000-100a.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:31:58] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[00:33:19] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[00:34:06] *** Joins: esperegu (~quassel@85.217.139.177)
[00:38:46] <b0nn> I use apache2 for my reverse proxy - because multi domains/services
[00:39:12] *** Quits: pztrn (~pztrn@user/pztrn) (Read error: Connection reset by peer)
[00:39:23] *** Quits: strubbl8919419 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[00:39:39] <b0nn> eg. one of my domains has routes that link to services on several ports
[00:40:22] <b0nn> There's no reason that that couldn't be done with a Go multiplexer, just it's a well solved problem for things like nginx/apache
[00:40:51] *** Joins: strubbl8919419 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de)
[00:41:29] *** Joins: pztrn (~pztrn@user/pztrn)
[00:42:20] <lauraaah> Hii
[00:44:24] <quippy> I have to use Caddy for self-hosting because it's the only web server that will negotiate for certificates with Let's Encrypt over port 443 and my stupid residential ISP blocks incoming port 80
[00:45:22] <quippy> I actually like it much more than nginx, except when I'm setting up some service to sit behind it and instead of telling me what settings I need, the new service provides an example nginx conf
[00:45:43] <kodah> what is caddy?
[00:45:45] <quippy> then I have to actually read the stupid thing, figure out what it means, and then go read Caddy documentation (which is not the best) to translate it all
[00:45:50] <quippy> Caddy is a Go HTTPS server
[00:46:15] <quippy> https://caddyserver.com/
[00:46:25] <quippy> you can dynamically configure it with a REST API
[00:46:33] <quippy> _in theory_ it's much more powerful than nginx
[00:46:40] <kodah> oh, it's an ardan product
[00:46:49] <quippy> who are they?
[00:47:13] <quippy> it looks like they only have two products
[00:47:17] *** Quits: esperegu (~quassel@85.217.139.177) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[00:47:27] <quippy> I suspect the answer to "who are they?" that will make sense to me is "the people that make Caddy" llol
[00:47:36] <kodah> i forget bill's last name, but he teaches a lot of go classes and works at ardan
[00:47:45] <kodah> that's why i know who they are
[00:48:43] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a) (Read error: Connection reset by peer)
[00:49:24] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a)
[00:49:48] *** Quits: hikhvar7960 (~thelounge@dynamic-046-114-007-244.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[00:50:49] <b0nn> Isn't Matt Holt the author of Caddy?
[00:56:45] <foobaz> i use "dehydrated" to get my letsencrypt certificates
[00:57:40] <CommunistWolf> yeah, he sold it to arden in something weird
[00:57:45] <CommunistWolf> at least the telemetry went away
[00:57:59] <foobaz> it's a shell script, and at the time i set it up, it was the only letsencrypt client that didn't require big dependencies
[00:58:19] <foobaz> i think the official client is python and i don't have python installed on my web server
[01:00:37] <dante443> Autocert has been nice for letsencrypt: golang.org/x/crypto/acme/autocert
[01:01:58] <b0nn> lol, I've just realised that I have NFI what's managing my letsencrypt :)
[01:02:15] * b0nn waves hand - it's around here somewhere
[01:05:07] <b0nn> certbot (Python)
[01:05:41] * b0nn seriously had to find the tutorial, then `dpkg -l |grep -i cert` to figure that out
[01:18:14] *** Joins: ttke (501@46-97-229-216.sr2.pon.net)
[01:20:38] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[01:21:12] *** Quits: hatsu (~user@45.76.36.123) (Quit: hatsu)
[01:23:59] <siXy> dante443: if someone is claiming (ESPECIALLY in a reddit post) that their little file server is 2x faster than nginx, all they're really telling you is that they have nfc what they're doing and their benchmark is wrong.
[01:24:30] <siXy> nginx is pretty challenging to outperform in real-world tests.
[01:25:15] <siXy> in valid real-world tests, that is.
[01:25:45] <siXy> and 2x faster is... no.
[01:26:10] *** Joins: hexfive (~eric@50.35.83.177)
[01:28:15] <dante443> Here's his benchmarks: https://gist.github.com/yosssi/4d719cccdf185259ea1d
[01:29:02] <siXy> yeah like I said, he has nfc what he's doing.
[01:29:42] <dante443> Can you support that claim?
[01:29:51] *** Quits: LiftLeft (~LiftLeft@154.21.114.43) (Ping timeout: 255 seconds)
[01:29:53] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:34:49] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[01:35:14] *** Joins: darkapex (~darkapex@user/darkapex)
[01:35:21] <siXy> In 1-2 lines of irc chat? not really. I've been working on pushing the limits of what's phsically possible with http serving for well over a decade, for some of the biggest web properties on the planet, and claiming "2x nginx" performance is like saying that your handmade goart is faster than an f1 car. No it isn't.
[01:35:29] <siXy> gocart*
[01:35:59] <siXy> nginx isn't perfect but properly configured it gets reasonably close to the limits of the hardware. There's no scope for being 2x faster.
[01:36:08] <b0nn> dante443: the problem with /all/ benchmarks is that they're /always/ artificial
[01:37:38] <jemaclus> generally speaking, hundreds (if not thousands) of eyeballs have been put toward optimizing nginx to its limits, and the odds of some dude discovering That One Trick Nobody Wants You To Know and 2x-ing nginx is... astronomical.
[01:37:46] <j416> siXy: do you have a ballpark guess on the speed of Go's server vs. nginx?
[01:38:01] <b0nn> The only real way to benchmark is for your personal usecase, and lok at the costs in time/money/expertise required to configure (that is, if I benchmark apache2 against nginx for my webservices, the benchmarking will be heavily influenced by the fact that I know apache2 better than I know nginx)
[01:38:42] <dante443> jemaclus That's true, but what I found interesting about the code example I posted was less "go > nginx" but rather his finding that "io.Copy > http.ServeContent"
[01:38:43] *** Joins: sleepyowl (~sleepyowl@2600:1702:4610:5990:a0fb:fa4b:78f3:8bd9)
[01:39:21] <j416> well io.Copy is just pushing bytes, http.ServeContent does extra magic
[01:39:40] <j416> I've run into that too; http.ServeContent is nice but adds a little bit of overhead
[01:39:41] <jemaclus> that said, you're comparing, like, an F-1 racecar against a Honda Civic with a rocket strapped to the back of it, and I mean, the rocket may be faster in one or two dimensions, but overall you'd rather race with an F-1 car
[01:39:49] <siXy> dante443: Someone who thinks it's possible to outperform nginx 2x should be ignored - their data and conclusions are completely invalid. You can outperform nginx by maaaaaybe 1.05x. On a good day. Not by 2x. That's just not a thing
[01:40:01] <alyx> dante443: well yes, probably; if you look at http.ServeContent, it does a decent bit of logic to figure out what the content it's serving is
[01:40:10] <jemaclus> which is what the "benchmarks are artificial" statement is getting at
[01:42:24] <siXy> j416: sorry, not anything current enough to be useful - I haven't really run that experiment recently as right now most of $dayjob is c++, not go
[01:43:48] <j416> alright
[01:45:22] *** Quits: sleepyowl (~sleepyowl@2600:1702:4610:5990:a0fb:fa4b:78f3:8bd9) (Quit: Client closed)
[01:45:52] <siXy> (technically you can do a fair bit better than nginx if you mess about with userspace networking and other stuff, but that's way above the level we're discussing here)
[01:46:26] <dante443> j416 Yeah. Not to keep pumping this guy but if you read through his code he checks headers and so on but then dumps that into the go cache he wrote. So then on second pass he sends everything needed with io.Copy.
[01:47:42] <dante443> Whereas http.ServeContent will be checking it for every req
[01:47:55] <j416> it seems plausible to me that you can find edge cases where Go would be faster
[01:48:04] <j416> but nginx is optimized C, whereas Go is, well Go
[01:48:18] <j416> seems only logical that nginx would be faster on the whole
[01:49:06] *** Quits: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[01:49:35] <dante443> Ofc, I hope it never seemed as though I was disparaging nginx in any way. I just happen to like keeping my code in Go where possible :)
[01:49:52] <b0nn> _b
[01:50:00] <j416> in the real world, you'd use nginx where nginx is suitable, Go where Go is suitable, so it doesn't matter much does it :)
[01:51:20] *** Quits: independent56 (~independe@95.144.68.40) (Ping timeout: 265 seconds)
[01:53:19] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[01:53:26] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 252 seconds)
[02:04:11] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:284f:28:96b1:c2cf) (Quit: Leaving)
[02:10:03] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:10:20] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:14:24] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:15:23] *** Quits: lauraaah (uid156848@id-156848.charlton.irccloud.com) ()
[02:17:58] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[02:18:58] *** Joins: LiftLeft (~LiftLeft@172.98.80.138)
[02:20:31] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 255 seconds)
[02:27:35] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[02:32:16] *** Quits: yelnah (~felix@2001:44b8:30c0:f2:6f0:21ff:fe3c:d4d7) (Ping timeout: 240 seconds)
[02:33:40] *** Joins: yelnah (~felix@60-241-218-186.static.tpgi.com.au)
[02:34:49] *** Joins: holgersson (~quassel@user/holgersson)
[02:35:21] *** Joins: Skyz (~Skyz@user/skyz)
[02:35:27] <Skyz> What is go good for?
[02:35:34] <Skyz> Systems programming?
[02:36:24] <b0nn> Go is good for lots of things, so are a lot of other technologies
[02:36:37] <b0nn> What /exactly/ are you trying to discover?
[02:37:19] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-119.prtc.net)
[02:37:21] <Skyz> I have no opinion
[02:37:30] <Skyz> Well except go is great
[02:37:39] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-119.prtc.net) (Client Quit)
[02:44:56] *** Joins: ofh (~felix@2001:44b8:3080:a5:6f0:21ff:fe3c:d4d7)
[02:45:00] *** Quits: yelnah (~felix@60-241-218-186.static.tpgi.com.au) (Ping timeout: 255 seconds)
[02:51:43] *** Joins: yelnah (~felix@193-116-214-191.tpgi.com.au)
[02:53:23] *** Quits: ofh (~felix@2001:44b8:3080:a5:6f0:21ff:fe3c:d4d7) (Ping timeout: 246 seconds)
[03:02:04] *** Joins: jackneill (~jackneill@20014C4E1803FB006ECE2E153632F191.dsl.pool.telekom.hu)
[03:05:13] <quippy> honestly I think nginx's edge has to do more with its maturity than the language it's written in
[03:05:32] <quippy> it's just a damn solid piece of software all around
[03:06:35] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Ping timeout: 258 seconds)
[03:09:23] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[03:11:13] *** Quits: comrad (~quassel@holarse/comrad) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[03:14:03] *** Joins: comrad (~quassel@holarse/comrad)
[03:17:48] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:31:14] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:19] *** Quits: yelnah (~felix@193-116-214-191.tpgi.com.au) (Ping timeout: 252 seconds)
[03:31:37] *** Joins: jsrnop (~mark@user/jsrnop)
[03:32:03] *** Joins: andlabs (~andlabs@71.190.119.164)
[03:32:32] *** Joins: yelnah (~felix@2001:44b8:308c:9a:6f0:21ff:fe3c:d4d7)
[03:34:45] <Skyz> ipfs is written in Go
[03:35:21] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 252 seconds)
[03:35:44] *** Joins: marlinc (~marlinc@user/marlinc)
[03:40:00] *** Quits: dza (~dza@user/dza) (Ping timeout: 268 seconds)
[03:45:49] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:49:03] *** Joins: normen (~normen@p200300d7173dc90044e22e406efb6712.dip0.t-ipconnect.de)
[03:50:31] *** Quits: yelnah (~felix@2001:44b8:308c:9a:6f0:21ff:fe3c:d4d7) (Ping timeout: 255 seconds)
[03:50:32] *** Quits: freswa (~freswa@static.3.158.69.159.clients.your-server.de) (Quit: Bye!)
[03:50:45] *** Joins: yelnah (~felix@14-200-69-228.static.tpgi.com.au)
[03:51:25] *** Joins: freswa (~freswa@2a01:4f8:1c0c:804b::2)
[03:53:20] <Skyz> There is a lot of Ethereum apps written in Go
[03:55:54] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[03:57:12] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[03:59:24] *** Joins: hatsu (~user@45.76.36.123)
[04:00:25] *** Quits: normen (~normen@p200300d7173dc90044e22e406efb6712.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[04:07:14] <kodah> Skyz: i've written a pretty wide array of applications in go from interactive terminal applications to webapp backends and even frontends. rather than describing the specific things that do well when written in go, i'd say that go is a solid general purpose programming language with strong types, interfaces, and a backwards compatibility promise for major versions.
[04:07:51] <Skyz> My mind is not really that of a programmer, I look at the end result
[04:08:06] <Skyz> I want to build an app that does web3
[04:08:12] <CommunistWolf> the AI in Missions is built in go
[04:13:52] <ttke> Are there any other json libraries for Go other than https://pkg.go.dev/encoding/json ?
[04:14:27] <kodah> Skyz: what is web3?
[04:14:32] <j416> ttke: pkg.go.dev
[04:14:34] <Skyz> Ethereum
[04:15:41] <ttke> ah, nevermind .. pkg.go.dev has a search feature
[04:15:58] <j416> yw
[04:16:18] <ttke> thanks Skyz and j416 :-)
[04:16:19] <Skyz> https://pkg.go.dev/github.com/umbracle/go-web3#section-documentation
[04:16:34] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[04:21:04] *** Joins: Atque (~Atque@user/atque)
[04:26:25] *** Joins: marlinc (~marlinc@user/marlinc)
[04:27:54] *** Quits: hposca (~hposca@node-1w7jr9phoke2tu92kv7e533az.ipv6.telus.net) (Ping timeout: 252 seconds)
[04:28:25] *** Joins: normen (~normen@p200300d7173dc90044e22e406efb6712.dip0.t-ipconnect.de)
[04:30:12] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[04:30:39] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[04:34:48] *** Joins: keiser0091075852 (~keiser@83.25.202.39.ipv4.supernova.orange.pl)
[04:37:21] *** Quits: keiser009107585 (~keiser@83.25.211.170.ipv4.supernova.orange.pl) (Ping timeout: 268 seconds)
[04:41:18] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Skyz)
[04:45:59] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:31] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:59] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[04:50:15] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[04:52:46] *** Quits: chilversc (~chilversc@user/chilversc) (Ping timeout: 268 seconds)
[04:53:09] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 258 seconds)
[04:54:18] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 258 seconds)
[05:04:09] *** Joins: chilversc (~chilversc@user/chilversc)
[05:05:39] *** Quits: normen (~normen@p200300d7173dc90044e22e406efb6712.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[05:06:03] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:16:10] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[05:18:03] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 268 seconds)
[05:18:24] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1) (Ping timeout: 250 seconds)
[05:29:39] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[05:34:42] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[05:37:51] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[05:37:59] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[05:43:08] *** Joins: gggp (~gggp@123.113.178.175)
[05:45:59] *** Joins: gggp_ (~gggp@111.63.14.119)
[05:49:18] *** Quits: gggp (~gggp@123.113.178.175) (Ping timeout: 255 seconds)
[05:50:22] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[05:51:04] *** Quits: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net) (Quit: bye)
[05:51:33] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a) (Read error: Connection reset by peer)
[05:51:43] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a)
[05:51:55] *** Joins: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net)
[05:56:43] *** Quits: pjs (~pjs@user/pjs) (Ping timeout: 272 seconds)
[05:57:51] *** Joins: califax- (~califax@user/califx)
[06:00:11] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[06:00:11] *** califax- is now known as califax
[06:06:05] *** Joins: tofaz (~tofaz@74.215.235.28)
[06:09:23] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Ping timeout: 246 seconds)
[06:16:34] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[06:46:30] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1002) (Quit: ZNC 1.8.2 - https://znc.in)
[07:02:59] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[07:03:16] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[07:03:25] *** Joins: c10l (~c10l@89.34.167.207)
[07:06:20] *** Joins: normen (~normen@p200300d7173dc90044e22e406efb6712.dip0.t-ipconnect.de)
[07:06:31] *** Joins: gggp__ (~gggp@111.63.14.119)
[07:09:36] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[07:22:25] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[07:23:14] *** Joins: kindablue (znc@irc.tpurist.com)
[07:29:03] *** Joins: pjs (~pjs@user/pjs)
[07:36:35] *** Quits: normen (~normen@p200300d7173dc90044e22e406efb6712.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[07:44:27] *** Joins: gggp_ (~gggp@123.113.189.203)
[07:46:31] *** Quits: darkapex (~darkapex@user/darkapex) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:47:33] *** Quits: gggp__ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[07:48:50] *** Joins: darkapex (~darkapex@user/darkapex)
[07:57:58] *** Joins: gggp__ (~gggp@111.63.14.119)
[08:01:11] *** Quits: gggp_ (~gggp@123.113.189.203) (Ping timeout: 252 seconds)
[08:01:29] *** Joins: gggp (~gggp@60.10.194.43)
[08:03:39] *** Quits: gggp__ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[08:07:20] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a) (Read error: Connection reset by peer)
[08:07:32] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[08:07:33] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a)
[08:13:40] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:5d30:13c8:922e:2a50)
[08:20:16] *** Joins: ofh (~felix@2001:44b8:309e:b6:6f0:21ff:fe3c:d4d7)
[08:20:52] *** Joins: Guest79 (~Guest79@pool-71-190-142-124.nycmny.fios.verizon.net)
[08:21:24] *** Quits: yelnah (~felix@14-200-69-228.static.tpgi.com.au) (Ping timeout: 255 seconds)
[08:23:27] <gggp> Does golang have reference type
[08:24:36] *** Joins: yelnah (~felix@2001:44b8:30b0:6b:6f0:21ff:fe3c:d4d7)
[08:24:44] *** Quits: ofh (~felix@2001:44b8:309e:b6:6f0:21ff:fe3c:d4d7) (Ping timeout: 255 seconds)
[08:26:13] *** Quits: tofaz (~tofaz@74.215.235.28) (Quit: Leaving)
[08:32:44] *** Quits: Guest79 (~Guest79@pool-71-190-142-124.nycmny.fios.verizon.net) (Quit: Client closed)
[08:38:56] *** Joins: gggp_ (~gggp@123.118.15.132)
[08:41:29] *** Joins: andlabs_ (~andlabs@71.190.119.164)
[08:42:09] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 265 seconds)
[08:43:15] *** Joins: oxum (~oxum@106.203.193.112)
[08:43:43] *** Quits: andlabs (~andlabs@71.190.119.164) (Ping timeout: 252 seconds)
[08:47:58] <seebs> no
[08:48:19] *** Quits: oxum (~oxum@106.203.193.112) (Ping timeout: 268 seconds)
[08:48:29] <b0nn> You'll need to expand on that answer (a little)
[08:48:34] *** Quits: andlabs_ (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[08:49:15] *** Joins: andlabs (~andlabs@71.190.119.164)
[08:49:22] *** Parts: jsanford (~jsanford@lax.froop.com) ()
[08:49:35] *** Quits: LiftLeft (~LiftLeft@172.98.80.138) (Ping timeout: 252 seconds)
[08:56:28] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[08:56:40] <seebs> i figure, if someone has a more specific question, they can always ask it, but in general, go doesn't have "reference types" in the sense that people frequently mean when they ask about them.
[08:57:05] *** Joins: andlabs (~andlabs@71.190.119.164)
[08:59:20] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:00:59] <b0nn> So, the problem is, sometimes people don't /know/ to ask more closely
[09:01:45] <b0nn> And, worse, there can be confusion between what was meant by the asker, vs what was interpreted by the person answering (that's always a fun one..)
[09:09:51] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Read error: Connection reset by peer)
[09:10:32] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[09:11:24] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[09:11:53] *** Joins: andlabs (~andlabs@71.190.119.164)
[09:12:54] *** Joins: CoolerX (~CoolerX@user/coolerx)
[09:21:38] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:25:19] *** Joins: cskr (~cskr@49.207.218.84)
[09:28:32] <A_Dragon> and everyone loves confusing maps and slices >.>
[09:28:51] <A_Dragon> though I dont remember exactly how maps do their thing, Ive never looked super closely at the type
[09:29:09] *** Joins: independent56 (~independe@95.144.68.40)
[09:33:44] <nevivurn> I thought it was a regular old hashmap-ish thing?
[09:36:25] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 258 seconds)
[09:36:26] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[09:36:44] <b0nn> hmm, aren't pointers in Go a /lot/ like references in other languages (in that the address is what is passed about because pass by value)
[09:37:00] <A_Dragon> nevivurn: yes its a hashmap
[09:37:15] <A_Dragon> but its also "a reference type" like structs are (it isnt, but it behaves like one)
[09:37:20] <A_Dragon> s/structs/slices
[09:37:31] <nevivurn> Ah
[09:37:39] <A_Dragon> slices contain pointers to data, thus copying the struct copies the pointer which still is the same
[09:37:51] <nevivurn> it's all pointers all the way down
[09:37:54] <A_Dragon> thus when you pass a slice you pass it by reference (but also not really)
[09:38:11] <A_Dragon> b0nn: they're distinct types so yeah you could make that argument
[09:40:43] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[09:48:47] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[09:48:53] *** Joins: andlabs_ (~andlabs@71.190.119.164)
[09:52:35] <seebs> The usual distinction between "reference type" and "pointer" is that a pointer can be nil, but a reference type is always a reference to *something*.
[10:00:24] *** Quits: andlabs_ (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[10:00:29] *** Joins: andlabs (~andlabs@71.190.119.164)
[10:00:46] <A_Dragon> by that definition go has no such concept
[10:02:00] <b0nn> In all honesty I've never heard pointers and references defined that way
[10:02:21] <b0nn> I'm not doubting it's the usual way, I'm more thinking I'm not in the right loop :)
[10:02:47] <A_Dragon> ¯\_(ツ)_/¯ its one of those things
[10:02:53] <A_Dragon> which is why terminology is important
[10:03:02] <A_Dragon> or, to more clearly say
[10:03:08] <A_Dragon> consistent, understood terminology
[10:06:38] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[10:07:20] *** Joins: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr)
[10:15:19] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[10:16:08] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:17:52] *** sus is now known as zero
[10:17:57] *** zero is now known as sus
[10:28:42] *** Quits: gggp_ (~gggp@123.118.15.132) (Remote host closed the connection)
[10:29:05] *** Joins: gggp_ (~gggp@123.113.189.203)
[10:31:11] *** Joins: shka (~herr@109.231.62.239)
[10:32:48] *** Quits: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr) (Ping timeout: 255 seconds)
[10:39:02] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[10:41:58] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[10:44:26] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[10:44:54] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[10:48:05] *** Joins: src (~src@user/src)
[10:49:00] *** Joins: gggp__ (~gggp@123.113.178.175)
[10:49:25] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:50:37] *** Joins: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr)
[10:52:03] *** Quits: gggp_ (~gggp@123.113.189.203) (Ping timeout: 252 seconds)
[10:53:45] *** Joins: hikhvar7960 (~thelounge@dynamic-046-114-007-244.46.114.pool.telefonica.de)
[10:55:42] *** Quits: gggp__ (~gggp@123.113.178.175) (Remote host closed the connection)
[10:56:06] *** Joins: gggp__ (~gggp@60.10.194.43)
[11:00:24] *** Joins: andlabs (~andlabs@71.190.119.164)
[11:02:55] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[11:03:08] *** Joins: andlabs (~andlabs@71.190.119.164)
[11:04:17] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[11:04:23] *** Joins: andlabs_ (~andlabs@71.190.119.164)
[11:08:16] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[11:09:53] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[11:13:08] *** Joins: dr0n (~nabromov@94.11.23.235)
[11:13:55] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[11:14:37] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[11:25:04] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:27:10] *** Quits: andlabs_ (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[11:27:34] *** Joins: andlabs (~andlabs@71.190.119.164)
[11:29:51] *** Joins: fef (~thedawn@user/thedawn)
[11:30:24] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 255 seconds)
[11:40:34] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:42:42] *** Joins: andlabs (~andlabs@71.190.119.164)
[11:47:07] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[11:48:09] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[11:50:06] *** Joins: menace (~someone@2001:a61:35bf:bb01:ac8c:7181:35fa:cdff)
[11:50:06] *** Quits: menace (~someone@2001:a61:35bf:bb01:ac8c:7181:35fa:cdff) (Changing host)
[11:50:06] *** Joins: menace (~someone@user/menace)
[11:54:27] *** Joins: nabromov (~nabromov@94.11.23.235)
[11:57:35] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 255 seconds)
[11:57:47] *** Quits: independent56 (~independe@95.144.68.40) (Ping timeout: 252 seconds)
[11:57:48] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[11:58:23] *** Joins: andlabs (~andlabs@71.190.119.164)
[12:09:40] *** Joins: CoolerY (~CoolerX@user/coolerx)
[12:11:45] *** fef is now known as fef_
[12:11:48] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 255 seconds)
[12:12:14] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:12:52] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[12:21:23] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:21:52] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[12:32:11] *** Quits: gggp__ (~gggp@60.10.194.43) (Read error: Connection reset by peer)
[12:32:33] *** Joins: gggp__ (~gggp@123.113.189.203)
[12:32:44] *** gggp__ is now known as gggp
[12:35:19] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[12:37:25] *** Quits: nabromov (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[12:42:27] *** Joins: gggp_ (~gggp@123.113.183.8)
[12:44:16] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[12:44:32] *** Joins: califax (~califax@user/califx)
[12:45:43] *** Quits: gggp (~gggp@123.113.189.203) (Ping timeout: 252 seconds)
[12:47:40] *** Joins: kwi (~kwi@91.38.155.104.bc.googleusercontent.com)
[12:50:35] *** Quits: kwi (~kwi@91.38.155.104.bc.googleusercontent.com) (Remote host closed the connection)
[12:51:15] *** gggp_ is now known as gggp
[12:51:54] *** Quits: icebattle (~wayne@S010600fc8ddfd2b3.vc.shawcable.net) (Ping timeout: 268 seconds)
[12:52:34] *** Joins: kwi (~kwi@91.38.155.104.bc.googleusercontent.com)
[12:53:50] *** Quits: kwi (~kwi@91.38.155.104.bc.googleusercontent.com) (Client Quit)
[12:53:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 246 seconds)
[12:54:17] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[12:55:33] *** Quits: cskr (~cskr@49.207.218.84) (Quit: Leaving)
[12:57:25] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[12:58:12] *** Joins: icebattle (~wayne@S010600fc8ddfd2b3.vc.shawcable.net)
[13:05:39] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:11:45] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Ping timeout: 252 seconds)
[13:13:05] *** Quits: darkapex (~darkapex@user/darkapex) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:13:15] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[13:13:36] *** Joins: andlabs (~andlabs@71.190.119.164)
[13:15:59] *** Joins: darkapex (~darkapex@user/darkapex)
[13:17:30] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 255 seconds)
[13:25:20] *** Joins: oxum (~oxum@106.203.193.112)
[13:27:38] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[13:27:53] *** Quits: fef_ (~thedawn@user/thedawn) (Remote host closed the connection)
[13:27:57] *** Joins: andlabs (~andlabs@71.190.119.164)
[13:28:02] *** Joins: Atque (~Atque@user/atque)
[13:28:28] *** Joins: fef_ (~thedawn@user/thedawn)
[13:28:37] *** Quits: oxum (~oxum@106.203.193.112) (Remote host closed the connection)
[13:29:13] *** Joins: oxum (~oxum@106.203.193.112)
[13:37:22] *** Quits: maxie (~IceChat95@45.100.3.196) (Ping timeout: 246 seconds)
[13:38:13] *** Joins: thing (~thing@user/thing)
[13:38:26] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 252 seconds)
[13:38:46] *** Quits: oxum (~oxum@106.203.193.112) (Ping timeout: 268 seconds)
[13:42:06] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:53:57] *** Quits: thing (~thing@user/thing) (Ping timeout: 244 seconds)
[13:59:05] *** Joins: fbandov (~fbandov@93-140-166-108.adsl.net.t-com.hr)
[14:00:07] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[14:01:42] *** Quits: fef_ (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[14:05:58] *** Joins: gggp_ (~gggp@111.63.14.119)
[14:09:15] *** Quits: gggp (~gggp@123.113.183.8) (Ping timeout: 255 seconds)
[14:10:49] *** Quits: daegalus (~yulian@user/daegalus) (Ping timeout: 265 seconds)
[14:12:27] *** Quits: fbandov (~fbandov@93-140-166-108.adsl.net.t-com.hr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:15:25] *** Joins: hikhvar79607 (~thelounge@dynamic-046-114-000-044.46.114.pool.telefonica.de)
[14:17:53] *** Quits: hikhvar7960 (~thelounge@dynamic-046-114-007-244.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[14:23:46] *** Joins: daegalus (~yulian@user/daegalus)
[14:27:51] *** Joins: CoolerY (~CoolerX@user/coolerx)
[14:30:28] *** Joins: gggp__ (~gggp@60.10.194.43)
[14:34:16] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 268 seconds)
[14:38:59] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:dc2e:32a8:866c:5405) (Quit: WeeChat 3.2)
[14:41:44] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[14:45:44] *** gggp__ is now known as gggp
[14:46:48] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:a999:ec99:9fca:a94d)
[14:47:14] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a) (Ping timeout: 255 seconds)
[14:47:58] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a)
[14:49:41] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 268 seconds)
[15:02:30] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[15:04:41] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 250 seconds)
[15:05:40] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:06:24] *** Joins: DM4307842 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[15:07:58] *** Joins: gggp_ (~gggp@111.63.14.119)
[15:08:21] *** Quits: DM430784 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[15:08:21] *** DM4307842 is now known as DM430784
[15:11:11] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 250 seconds)
[15:13:23] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 268 seconds)
[15:20:47] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 268 seconds)
[15:21:15] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:23:05] *** Joins: DM4307842 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[15:24:06] *** Quits: DM430784 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[15:24:06] *** DM4307842 is now known as DM430784
[15:26:53] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[15:37:33] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 256 seconds)
[15:37:50] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:39:52] *** Joins: gggp__ (~gggp@123.113.189.203)
[15:42:35] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 255 seconds)
[15:51:03] *** Joins: vsantana (~Thunderbi@fttx-17713614973.usr.predialnet.com.br)
[16:02:13] *** Joins: Giedrius (~giedrius@5.133.65.65)
[16:05:53] *** Joins: Skyz (~Skyz@user/skyz)
[16:06:26] *** Quits: vsantana (~Thunderbi@fttx-17713614973.usr.predialnet.com.br) (Ping timeout: 255 seconds)
[16:10:52] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 258 seconds)
[16:14:04] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[16:14:30] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:14:41] *** Joins: phil294 (~phi@ip1f13cf74.dynamic.kabel-deutschland.de)
[16:22:41] *** Joins: vsantana (~Thunderbi@fttx-17713614973.usr.predialnet.com.br)
[16:25:22] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:26:38] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[16:29:07] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[16:29:25] *** Joins: jsrnop (~mark@user/jsrnop)
[16:40:57] *** Parts: phil294 (~phi@ip1f13cf74.dynamic.kabel-deutschland.de) ()
[16:46:54] *** Joins: Torr (~Torr@user/torr)
[16:53:26] *** Joins: gggp_ (~gggp@111.63.14.119)
[16:56:30] *** Quits: gggp__ (~gggp@123.113.189.203) (Ping timeout: 252 seconds)
[16:57:23] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[16:58:24] *** Quits: sagax (~sagax@213.138.71.146) (Ping timeout: 258 seconds)
[17:04:14] *** Joins: thing (~thing@user/thing)
[17:08:45] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 258 seconds)
[17:09:31] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:10:06] *** Joins: gggp__ (~gggp@123.113.186.67)
[17:12:35] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[17:17:34] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 245 seconds)
[17:20:38] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:23:31] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:23:57] *** Joins: edrocks (~Ed@user/edrocks)
[17:24:34] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[17:25:00] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Client Quit)
[17:29:27] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[17:30:01] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[17:30:04] *** Parts: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) ()
[17:31:29] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:31:31] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 268 seconds)
[17:33:32] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[17:33:53] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:34:39] *** Quits: Skyz (~Skyz@user/skyz) (Ping timeout: 246 seconds)
[17:35:42] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[17:37:27] *** Joins: emcconville (~emcconvil@c-98-222-200-8.hsd1.in.comcast.net)
[17:42:34] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[17:49:36] *** Joins: martinkennelly_ (~martinken@212.129.86.160)
[17:50:31] *** Quits: martinkennelly (~martinken@84.203.21.166) (Ping timeout: 240 seconds)
[17:52:25] *** Joins: gggp_ (~gggp@60.10.194.43)
[17:55:32] *** Quits: gggp__ (~gggp@123.113.186.67) (Ping timeout: 252 seconds)
[17:56:11] *** Joins: Skyz (~Skyz@user/skyz)
[18:03:43] *** Quits: vsantana (~Thunderbi@fttx-17713614973.usr.predialnet.com.br) (Remote host closed the connection)
[18:07:52] *** Joins: vsantana (~Thunderbi@fttx-17713614973.usr.predialnet.com.br)
[18:15:08] *** Joins: oxum (~oxum@122.171.3.57)
[18:15:45] <pinky> why would one use a pointer to a string? just to allow it to be nil maybe?
[18:16:05] <CommunistWolf> typically. sql.NullString is another approach to that problem
[18:16:39] <pinky> ah hm, in this case it is a struct thats getting unmarshalled into from json
[18:16:47] <pinky> just reading some code and was wondering why
[18:16:49] <CommunistWolf> yeah, that's almost certainly for the nulliness
[18:16:54] <pinky> thx :)
[18:17:20] <CommunistWolf> perhaps the distinction between null and "" matters elsewhere, perhaps it doesn't
[18:18:15] *** Joins: martinkennelly (~martinken@84.203.21.166)
[18:18:57] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0)
[18:19:44] *** Quits: oxum (~oxum@122.171.3.57) (Ping timeout: 252 seconds)
[18:20:00] *** gggp_ is now known as gggp
[18:20:12] *** Quits: martinkennelly_ (~martinken@212.129.86.160) (Ping timeout: 265 seconds)
[18:21:17] *** Quits: gggp (~gggp@60.10.194.43) (Read error: Connection reset by peer)
[18:21:36] *** Joins: gggp (~gggp@60.10.194.43)
[18:25:05] *** Quits: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[18:26:49] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[18:27:38] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 268 seconds)
[18:27:50] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:28:34] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:30:18] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[18:33:26] *** Joins: PichuChen (~PichuChen@114-36-91-158.dynamic-ip.hinet.net)
[18:33:43] *** Joins: gggp_ (~gggp@123.113.186.67)
[18:34:20] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[18:34:37] *** Joins: oxum (~oxum@106.203.217.191)
[18:34:56] *** Quits: gggp (~gggp@60.10.194.43) (Killed (NickServ (GHOST command used by gggp_!~gggp@123.113.186.67)))
[18:34:58] *** gggp_ is now known as gggp
[18:35:01] *** Joins: graywolf (~wolf@user/graywolf)
[18:35:21] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[18:36:54] <graywolf> Hello, so I'm trying to use http.PostForm to do a http request. However, the values I pass there are sorted by alphabet. Is the a way to do a PostForm while keeping insertion order? My current thinking is to build a string using url.QueryEscape and do require http.Post, but that seems... ugly
[18:38:05] *** Joins: CoolerY (~CoolerX@user/coolerx)
[18:38:57] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[18:39:26] *** Quits: oxum (~oxum@106.203.217.191) (Ping timeout: 255 seconds)
[18:39:38] *** Joins: arcatech (~arcatech@user/arcatech)
[18:39:59] *** Joins: darkapex (~darkapex@user/darkapex)
[18:45:00] *** Joins: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[18:48:20] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 268 seconds)
[18:50:09] *** Quits: PichuChen (~PichuChen@114-36-91-158.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:50:55] *** Joins: gggp_ (~gggp@60.10.194.43)
[18:52:15] *** Joins: gggp__ (~gggp@60.10.23.160)
[18:54:12] *** Quits: gggp (~gggp@123.113.186.67) (Ping timeout: 252 seconds)
[18:54:20] *** Quits: zopsi (~zopsi@irc.dir.ac) (Quit: Oops)
[18:55:46] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 252 seconds)
[19:02:45] *** Quits: gggp__ (~gggp@60.10.23.160) (Remote host closed the connection)
[19:02:52] <mikoto-chan> why would somebody want to use template.Must when it panics during an error? wouldn't that cause your entire web server to crash?
[19:02:52] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[19:02:57] *** Joins: gggp__ (~gggp@111.63.14.119)
[19:03:28] <ikke> mikoto-chan: when you want to initialize it globally
[19:03:49] <ikke> outside of a function / method
[19:05:10] *** Joins: c10l (~c10l@89.34.167.207)
[19:05:30] <fizzie> As it says in the documentation. "It is intended for use in variable initializations such as ...". Hmm, maybe it should explicitly say it's talking about package-level variables.
[19:11:02] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[19:14:50] <sztanpet> graywolf that seems to assume that there is an ordering to parameters, there isnt, name your parameters accordingly
[19:17:10] *** Joins: independent56 (~independe@95.144.68.40)
[19:17:43] <graywolf> sztanpet: well the server requires to have an ordering of the parameters; so I need to send them in specific order
[19:18:37] <sztanpet> ugly way it is then
[19:18:48] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:19:08] <siXy> that's some seriously broken server
[19:19:24] <graywolf> phabricator if you've ever heard about it
[19:19:52] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[19:19:57] <siXy> that's still a thing? huh
[19:19:59] <sztanpet> "thats crazy" was my first reaction but met xml parsers not actually parsing xml so meh
[19:20:10] *** Joins: independent56 (~independe@95.144.68.40)
[19:21:38] <siXy> looks like it's no longer maintained as of this year
[19:23:59] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 255 seconds)
[19:24:10] *** Joins: CoolerY (~CoolerX@user/coolerx)
[19:25:26] <edrocks> graywolf PostForm is a one line wrapper around post. You would have to make an ordered url.Values using a slice or something as the maps are unordered
[19:26:02] <graywolf> Yeah but it's not like a company can migrate away from ticketing system in a few days, will take quite long imho; And not my call anyway.
[19:26:12] <edrocks> seems odd that something requires it in a certain order though. I've only seen that with some xml endpoints caring about field order
[19:26:25] <graywolf> Great, so I'll go with my "awesome" solution based on url.QueryEscape and strings.Join(.., "&")... meh, could be worse
[19:27:29] <graywolf> edrocks: in this case it's arrays. foo[0] ... foo[9] works, but golang produces foo[0], foo[1], foo[10], ... foo[9] and at that point phabricator treats it as a object instead of a slice :/
[19:27:46] *** Quits: gggp__ (~gggp@111.63.14.119) (Read error: Connection reset by peer)
[19:28:43] <sztanpet> standard software quality i guess
[19:28:53] <edrocks> yea I think just making an ordered version of url.Values is fine
[19:29:06] <edrocks> queryescape + strings join
[19:30:07] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[19:30:52] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[19:31:02] *** Quits: andlabs (~andlabs@71.190.119.164) (Read error: Connection reset by peer)
[19:31:21] *** Joins: andlabs (~andlabs@71.190.119.164)
[19:32:29] *** Joins: marlinc (~marlinc@user/marlinc)
[19:33:06] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.2)
[19:35:04] *** Joins: gggpkm_ (~gggpkm@123.116.88.127)
[19:35:26] *** Quits: marlinc (~marlinc@user/marlinc) (Read error: Connection reset by peer)
[19:35:39] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:37:34] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 245 seconds)
[19:40:31] *** Joins: oxum (~oxum@106.203.217.191)
[19:40:39] *** Joins: marlinc (~marlinc@user/marlinc)
[19:45:24] *** Quits: oxum (~oxum@106.203.217.191) (Ping timeout: 255 seconds)
[19:47:47] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[19:48:10] *** Joins: independent56 (~independe@95.144.68.40)
[19:49:39] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 245 seconds)
[19:50:07] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:51:53] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1002) (Ping timeout: 255 seconds)
[19:51:57] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[19:54:37] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:54:38] *** Joins: burningserenity (~burningse@191.96.168.165)
[19:56:11] *** Quits: gggpkm_ (~gggpkm@123.116.88.127) (Ping timeout: 255 seconds)
[19:56:28] *** Joins: gggpkm (~gggpkm@123.113.187.192)
[20:01:21] *** Joins: tebruno99 (~quassel-c@c-67-175-180-140.hsd1.il.comcast.net)
[20:03:27] *** Quits: tebruno99 (~quassel-c@c-67-175-180-140.hsd1.il.comcast.net) (Remote host closed the connection)
[20:03:29] *** Joins: andlabs (~andlabs@71.190.119.164)
[20:05:29] *** Joins: tebruno99 (~quassel-c@c-67-175-180-140.hsd1.il.comcast.net)
[20:06:41] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a) (Read error: Connection reset by peer)
[20:06:48] *** Joins: burningserenity_ (~burningse@2603:9001:f01:ad99::100a)
[20:07:10] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a)
[20:08:08] *** Quits: burningserenity (~burningse@191.96.168.165) (Ping timeout: 258 seconds)
[20:09:26] <dostoyevsky2> How does go actually support these 30 platforms out of the box?  Other languages like clang depend on windows header files and stubs to be able to create a cross compiler, but when I compile go from git, there are no header files for 30 platforms etc...
[20:11:38] <sztanpet> its not C
[20:13:28] <sztanpet> also code is pre-generated from the header files usually
[20:15:59] *** Quits: burningserenity_ (~burningse@2603:9001:f01:ad99::100a) (Ping timeout: 255 seconds)
[20:16:22] *** Joins: burningserenity (~burningse@195.78.54.166)
[20:17:06] *** Quits: tebruno99 (~quassel-c@c-67-175-180-140.hsd1.il.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:17:41] *** Joins: Guest86 (~textual@106.51.25.175)
[20:20:11] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[20:21:07] *** Quits: Guest86 (~textual@106.51.25.175) (Client Quit)
[20:22:16] *** Joins: burningserenity_ (~burningse@2603-9001-0f01-ad99-0000-0000-0000-100a.inf6.spectrum.com)
[20:22:38] *** Joins: tebruno99 (~quassel-c@c-67-175-180-140.hsd1.il.comcast.net)
[20:23:08] *** Quits: burningserenity (~burningse@195.78.54.166) (Ping timeout: 256 seconds)
[20:23:32] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:31:00] *** Quits: tebruno99 (~quassel-c@c-67-175-180-140.hsd1.il.comcast.net) (Remote host closed the connection)
[20:32:57] *** Quits: vsantana (~Thunderbi@fttx-17713614973.usr.predialnet.com.br) (Remote host closed the connection)
[20:39:06] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:41:07] *** Joins: vsantana (~Thunderbi@fttx-17713614973.usr.predialnet.com.br)
[20:41:20] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[20:42:17] <shka> dostoyevsky2: it does not even use libc
[20:43:02] <shka> honestly, i don't even enjoy programming in go, but the deployment is just something else
[20:43:10] <shka> it is just perfect
[20:43:21] <Tv_> shka: unfortunately that's less true these days; lots of platforms have forced Go into using libc
[20:43:32] <Tv_> including glibc, for some features
[20:43:35] <shka> OSX i know of
[20:43:41] <shka> anything else?
[20:43:45] <Tv_> BSDs are through libc too
[20:43:48] <lazyreader> FreeBSD
[20:44:01] <shka> oh, ok
[20:44:03] <Tv_> on linux, group lookups, certain DNS configs
[20:44:10] <shka> got it
[20:44:29] <shka> well, still, compared to C or C++ deploying go is trivial
[20:44:37] <shka> compared to almost anything, really
[20:45:09] <Tv_> the idea of having a cross compiler by default is just beyond anything imaginable in the C world
[20:45:17] <shka> exactly
[20:46:21] <shka> first time i had to build for windows, and i asked other dude on windows machine to do it, because i was expecting sinking hours into figuring out how to do it
[20:46:27] <shka> then i realized that it is just one evn
[20:46:33] <shka> *one env variable
[20:46:45] <shka> and it builds to wasm as well
[20:47:07] <shka> and i still don't like the language but at this point i was sold
[20:48:39] *** Quits: darkmuggle (darkmuggle@here.for-the.chat) (Changing host)
[20:48:39] *** Joins: darkmuggle (darkmuggle@redhat/darkmuggle)
[20:48:46] <Tv_> shka: protip: you win no internet points by repeating such statements
[20:49:00] <shka> eh, i guess?
[20:49:20] <shka> anyway, go build is love
[20:51:07] <shka> regarding libc
[20:51:27] <shka> i know that OSX was a problem because non-stable system calls
[20:51:35] <shka> same story on FreeBSD?
[20:51:53] <Tv_> yup
[20:52:06] *** Joins: tebruno99 (~quassel-c@c-67-175-180-140.hsd1.il.comcast.net)
[20:52:14] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[20:52:42] <shka> on linux go still does syscalls directly or via glibc?
[20:53:28] <shka> or at least some?
[20:55:30] *** sayo- is now known as sayo
[20:56:26] *** Quits: tebruno99 (~quassel-c@c-67-175-180-140.hsd1.il.comcast.net) (Remote host closed the connection)
[20:56:58] *** Joins: Skyz (~Skyz@user/skyz)
[20:56:59] <Tv_> direct when it can, glibc when the gnu idiots implemented things only in glibc instead of as a well-defined service
[20:57:06] * Tv_ glares at NSS
[20:57:15] <shka> got it
[20:57:22] *** Joins: hposca (~hposca@node-1w7jr9phoke2tnetlghxkyj3n.ipv6.telus.net)
[20:58:39] <shka> number of supported systems combined with the varying use of libc must be PITA to maintain for the golang team
[20:58:54] <siXy> for most syscalls it appears to re-implement the glibc modifications internally rather than call out to glibc
[20:59:14] <siXy> e.g. faccessat
[21:02:32] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[21:04:18] <Tv_> siXy: plot twist, much of the glibc wrappers like that are actively harmful and/or legacy
[21:04:43] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[21:05:06] *** Quits: gggpkm (~gggpkm@123.113.187.192) (Ping timeout: 252 seconds)
[21:06:38] <Tv_> also, calling access(2) or friends is a pretty big code smell
[21:06:59] <Tv_> that is a mighty dusty corner of unix compat
[21:09:54] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[21:10:44] *** Joins: Skyz (~Skyz@user/skyz)
[21:11:04] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:11:24] *** Joins: andlabs (~andlabs@71.190.119.164)
[21:12:32] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Quit: Leaving)
[21:16:05] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[21:17:00] <siXy> Tv_: no disagreement here :) but at this point it's tough to really change this - folks expect it to work this way now for better or worse
[21:17:06] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[21:17:51] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[21:19:03] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[21:19:24] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[21:22:43] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[21:27:02] *** Joins: arcatech (~arcatech@user/arcatech)
[21:27:23] <Tv_> siXy: actually, systemd specced a protocol to lookup users & groups, with json over unix domain sockets
[21:27:34] <Tv_> siXy: and it's pluggable to support multiple backends etc
[21:27:41] *** Joins: sizeof_void34 (~Thunderbi@109.252.75.112)
[21:27:46] <Tv_> siXy: so there is hope that one day even PAM might die
[21:28:36] <siXy> is the api for that any good?
[21:28:56] <Tv_> well the bar for being better than NSS is pretty low
[21:28:58] *** Joins: marlinc (~marlinc@user/marlinc)
[21:29:14] <siXy> yeah but have you actually looked at the journald api? I mean... *damn*
[21:29:31] <Tv_> yes, it's still lennartware
[21:29:42] <LambdaComplex> hi #go-nuts i'm currently trying to parse some haproxy log files with github.com/chrishoffman/haproxylog and it is going HORRIBLY SLOW in my opinion
[21:29:54] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Ping timeout: 268 seconds)
[21:29:57] <siXy> I wouldn't have thought it was possible to design an api that bad for such a simple thing
[21:30:03] <LambdaComplex> after making the mistake of looking at this library's source code, i have found that it is all regular expressions
[21:30:06] <Tv_> siXy: fwiw https://systemd.io/USER_GROUP_API/ https://varlink.org/
[21:30:43] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[21:30:56] <Tv_> LambdaComplex: isn't it just the age old CLF thing?
[21:31:06] *** Joins: Skyz (~Skyz@user/skyz)
[21:31:32] <LambdaComplex> i don't think so
[21:31:39] <LambdaComplex> https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#8.2.3
[21:31:44] <Tv_> hrmm yeah similar end result different config
[21:31:59] <Tv_> https://www.haproxy.com/documentation/hapee/latest/onepage/#8.2.3 looks more official
[21:33:08] <LambdaComplex> in my effort to take haproxy logs and shove them into a sqlite database, i have probably made the world's worst reimplementation of...idk, the ELK stack, or something
[21:33:08] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[21:33:23] <Tv_> LambdaComplex: looks like you can customize a format and it has a quote flag, so you could just shove all the fields you care about in as quoted strings, to simplify parsing
[21:33:43] <Tv_> basically becomes a funky flavor of CSV, if their quoting rules are sane
[21:33:51] <LambdaComplex> eh, this is a preexisting log file from a significant time period
[21:34:37] <LambdaComplex> i had been using this but then i decided it kinda sucked https://github.com/gforcada/haproxy_log_analysis
[21:35:06] *** Quits: Rhvs (Rhys@help.lux.melted.me) (Ping timeout: 256 seconds)
[21:35:20] <LambdaComplex> or, more specifically, i got annoyed by the fact that a) it doesn't let you specify multiple log files at once and b) it DOES allow the -l flag to be specified multiple times, but each subsequent one just overrides the previous one(s)
[21:35:34] <LambdaComplex> this behavior does not seem to be documented anywhere, nor is a warning/error generated
[21:35:45] <Tv_> sounds like somebody is writing their own, that'll suck differently ;)
[21:36:05] <LambdaComplex> i assume this is probably the behavior of some built-in or common flag parsing library for Python and would've been unsurprising to me were i familiar with that ecosystem
[21:36:25] <LambdaComplex> but if i need to be familiar with the ecosystem of your programming language in order to correctly reason about how your program handles flags then you have failed as a programmer in my opinion
[21:36:31] <Tv_> generally flags override previous one, all over
[21:36:37] <Tv_> go would have done the same
[21:37:03] <Tv_> hell, try giving two --sort= flags to ls
[21:37:09] <LambdaComplex> yeah, and i find go's built-in flag library to also be very opinionated in ways which i consider to be wrong :P
[21:37:56] <LambdaComplex> actually, hold on
[21:38:05] <LambdaComplex> i just realized that i am, in fact, the dumbest person alive
[21:38:25] <LambdaComplex> problem: "i can't specify multiple log files at once"
[21:38:48] <eric_hill> realizing you're dumb puts you WAY ahead of most everyone else
[21:38:48] <LambdaComplex> solutions i came up with: "i'll just rewrite it in go. no, wait, i'll write a thing TO PUT IT IN A SQLITE DATABASE so then i can just query it in sql!"
[21:39:06] <LambdaComplex> solution i would've had 2 hours ago if i were smart: "oh, i'll just cat all the files together and then run haproxy_log_analysis on that file"
[21:39:23] <LambdaComplex> why
[21:39:25] <LambdaComplex> did i not
[21:39:27] <LambdaComplex> think of that
[21:39:29] <LambdaComplex> 2 hours ago
[21:41:00] <LambdaComplex> someone please tell me they're laughing hysterically at how dumb i am
[21:41:02] <Tv_> LambdaComplex: probably even -l <(cat /my/logs/*.log)
[21:41:04] <LambdaComplex> because i really, really deserve it
[21:41:17] <LambdaComplex> Tv_: sure, same thing :P
[21:41:23] <Tv_> less work on the computer
[21:41:56] <LambdaComplex> is it?
[21:41:59] <LambdaComplex> how so?
[21:43:44] <LambdaComplex> i'm honestly not sure if the shell creates a temp file on disk or stores all that in memory when you use process substitution
[21:47:39] <Tv_> LambdaComplex: consider a 1 TB hard drive with 8 log files each 100 GB in size
[21:47:39] *** Joins: normen (~normen@p200300d7173dc9003dcd14e8106c2751.dip0.t-ipconnect.de)
[21:47:59] <Tv_> becoming more sure is a great learning experience ;)
[21:48:17] <LambdaComplex> is it okay if i just _don't_ consider that for the sake of my sanity?
[21:48:26] <Tv_> LambdaComplex: echo <(echo hello, world)
[21:48:49] <LambdaComplex> neat
[21:49:18] <siXy> Tv_: That api looks surprisingly good
[21:49:36] *** Joins: gggpkm (~gggpkm@123.118.15.132)
[21:49:48] <LambdaComplex> okay i've once again decided that haproxy_log_analysis is garbage
[21:49:53] <Tv_> siXy: i think it's their first post-dbus design, and some lessons have been lear^Wbeaten into them
[21:49:59] <LambdaComplex> apparently if you use it on a large enough log file it just....doesn't work?
[21:50:12] <LambdaComplex> unless i fucked something up somewhere somehow
[21:50:13] <LambdaComplex> pls hold
[21:50:27] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 265 seconds)
[21:51:07] <Tv_> siXy: the IDL is hot garbage but the reality is much more reasonable
[21:51:54] <siXy> thanks for the link, that's definitely a lot nicer than trying to interact with nss
[21:54:24] <mohan43u> need help, howto cross compile for arm with hardfloat? host is x86_64 and go compiled for the host.
[21:55:35] <Tv_> mohan43u: set GOARCH. https://pkg.go.dev/cmd/go#hdr-Environment_variables
[21:55:53] *** Quits: normen (~normen@p200300d7173dc9003dcd14e8106c2751.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[21:56:01] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[21:56:31] <Tv_> mohan43u: and fine tune with GOARM if needed. they're all hardfloat these days i think?
[21:56:49] <mohan43u> Tv_: when I do GOARCH=arm GOARM=5, I only get ARMv5 binary without hardfloat (readelf -a <binary> not showing hardfloat flag)
[21:57:53] <Tv_> mohan43u: i *think* what Go does is runtime detection
[21:57:57] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[21:58:06] <Tv_> not 100%, i try not to touch the older arms
[21:58:09] *** Joins: arinov (~arinov@212.156.215.30)
[21:58:47] <Tv_> https://github.com/golang/go/wiki/GoArm#lack-of-floating-point-hardware-on-armv5 sounds like go uses the hooks for softfloat
[21:58:53] <Tv_> which afaik are noop for hardfloat
[21:59:02] <siXy> I thought arm v5 support had been dropped
[21:59:11] <Tv_> siXy: pre-5 is
[21:59:34] <Tv_> https://github.com/golang/go/wiki/GoArm at least claims 5 is fine still
[21:59:55] <siXy> I found the proposal I was thinking of and it ended up getting declined.
[22:00:02] <siXy> so yeah, v5 is still in. for now.
[22:01:16] <gggpkm> can i return a pointer which pointing to data on the stack
[22:02:00] <Tv_> gggpkm: no, but you can return a pointer to a local variable if that's what you meant
[22:02:50] <gggpkm> Tv_, okay . but local variable is on the stack
[22:02:52] <Tv_> pondering on what the stack is and what happens to it on return will tell you why you can not return a pointer to the stack (and expect it to work right) in any language
[22:02:59] <Tv_> gggpkm: lies
[22:03:47] *** Joins: arinov_ (~arinov@212.156.215.30)
[22:04:12] *** Joins: Skyz43 (~Skyz@user/skyz)
[22:04:14] <Tv_> Go's use of the stack is a pure optimization, not part of the language spec; you as the programmer have no such guarantee. when you use a variable in a way that prevents it from being on the stack, it is not on the stack.
[22:04:22] *** Skyz43 is now known as Skyz2
[22:04:51] *** Quits: Skyz (~Skyz@user/skyz) (Ping timeout: 246 seconds)
[22:05:53] *** Quits: arinov (~arinov@212.156.215.30) (Ping timeout: 250 seconds)
[22:06:06] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 240 seconds)
[22:08:56] *** Joins: freakazoid334 (~freakazoi@72.168.176.61)
[22:09:12] <mohan43u> Tv_: tried to compile with GOARCH=arm GOARM=7, the resulting binary also dont contain hardfloat, also now Im more confused, readelf still shows Version5 EABI for GOARM=7 binary. then what exactly the difference between armv5 and armv7 binaries?
[22:10:33] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:10:38] <Tv_> mohan43u: sounds like your test for hardfloat is misleading you. I doubt there's arm7 without an fpu...
[22:10:59] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[22:11:40] <siXy> mohan43u: it might be more effective to simply try running it on your rPi or w/e and see if it works?
[22:11:50] *** Joins: andlabs (~andlabs@71.190.119.164)
[22:15:18] *** Joins: arcatech (~arcatech@user/arcatech)
[22:15:18] *** CommunistWolf is now known as CommunistPup
[22:15:24] *** CommunistPup is now known as CommunistWolf
[22:16:18] *** Quits: thiccdaddy (~OwO@thiccdaddy.sexy) (Quit: The Lounge - https://thelounge.chat)
[22:17:03] *** Joins: thiccdaddy (~OwO@thiccdaddy.sexy)
[22:17:28] *** Joins: milosz (~milosz@user/milosz)
[22:18:30] *** Quits: gggpkm (~gggpkm@123.118.15.132) (Ping timeout: 246 seconds)
[22:18:33] *** Joins: hsiktas (uid224847@id-224847.tooting.irccloud.com)
[22:19:34] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[22:20:10] *** Quits: thiccdaddy (~OwO@thiccdaddy.sexy) (Client Quit)
[22:20:34] *** Joins: thiccdaddy (~OwO@thiccdaddy.sexy)
[22:22:58] *** belak51 is now known as belak
[22:23:38] *** Quits: l2dy (~l2dy@user/l2dy) ()
[22:23:54] *** Joins: l2dy (~l2dy@user/l2dy)
[22:23:55] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[22:25:20] *** Joins: normen (~normen@p200300d7173dc9003dcd14e8106c2751.dip0.t-ipconnect.de)
[22:25:39] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[22:27:31] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[22:28:44] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:28:44] *** Quits: kulak1 (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:29:42] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 246 seconds)
[22:30:05] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[22:30:35] *** Joins: kulak1 (~kulak@user/kulak)
[22:31:57] *** Joins: arinov (~arinov@31.142.54.42)
[22:32:10] *** Quits: kulak1 (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:32:55] *** Joins: kulak1 (~kulak@user/kulak)
[22:33:23] *** Joins: sagax (~sagax@213.138.71.146)
[22:33:49] *** Joins: arcatech (~arcatech@user/arcatech)
[22:34:34] *** Quits: arinov_ (~arinov@212.156.215.30) (Ping timeout: 252 seconds)
[22:35:18] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[22:37:26] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a) (Ping timeout: 256 seconds)
[22:40:11] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 268 seconds)
[22:41:47] *** Joins: Torr (~Torr@user/torr)
[22:46:59] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Remote host closed the connection)
[22:47:21] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[22:56:08] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 256 seconds)
[22:57:04] *** Joins: transacid (~transacid@transacid.de)
[22:57:51] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:58:03] *** Quits: normen (~normen@p200300d7173dc9003dcd14e8106c2751.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[23:00:55] *** Quits: kulak1 (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:01:37] *** Joins: kulak1 (~kulak@user/kulak)
[23:02:26] *** Quits: kulak1 (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:02:51] *** Joins: kulak1 (~kulak@user/kulak)
[23:05:18] <A_Dragon> yeahhhhhhhhhhh the builtin flag lib I uh, really dont like
[23:05:24] *** Quits: Skyz2 (~Skyz@user/skyz) (Ping timeout: 246 seconds)
[23:05:51] *** Quits: arinov (~arinov@31.142.54.42) (Ping timeout: 265 seconds)
[23:06:10] *** Quits: kulak1 (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:07:08] *** Joins: kulak1 (~kulak@user/kulak)
[23:24:19] *** Quits: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net) (Quit: Leaving)
[23:31:39] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[23:31:54] *** Joins: thing (~thing@user/thing)
[23:32:00] <fizzie> It's an acquired taste, perhaps. I feel like it's serviceable for defining flags to configure binaries used as servers (leaving aside the question on whether that's a good idea in the first place), maybe less so for trying to build command-line interfaces for humans to use.
[23:35:24] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[23:35:47] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[23:38:12] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Quit: clarjon1)
[23:38:30] *** clarjon_1 is now known as clarjon1
[23:44:20] *** Quits: TFKyle (~kyle@64.201.205.70) (Ping timeout: 255 seconds)
[23:45:09] <Tv_> fizzie: there's not really anything missing i would have used in several years now...
[23:45:45] <Tv_> fizzie: why do you think it's not a good idea for regular command-line programs
[23:49:18] <fizzie> I like mergeable short options, which is perhaps a personal failing.
[23:50:29] <fizzie> Also, I had this feeling that parsing something like `foo -x -y subcommand -z -w` with both global and subcommand-specific options would have been a bit inconvenient, but looking at it, if argument processing stops at the first non-flag argument (which it seems to), maybe it wouldn't be too bad, with separate flagsets.
[23:50:32] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[23:51:31] <Tv_> fizzie: https://github.com/tv42/cliutil is woefully underdocumented but makes subcommands absolutely painless
[23:51:56] <Tv_> fizzie: and yes, you can have global flags and each level of subcommand can have its own flags etc
[23:52:41] <jemaclus> I kinda wish flags were a little more built-in? I have yet to use a Go flag lib that felt easy to use. They all feel more verbose than I think feel they should be.
[23:56:33] <Tv_> jemaclus: you mean you want more features in stdlib? that only happens for things where a solid consensus exists, and then those things never get improved after that, because of compatibility guarantee
[23:56:44] <Tv_> not always a good trade-off
[23:56:57] <jemaclus> well
[23:57:04] <jemaclus> I don't know about more features
[23:57:19] <Tv_> jemaclus: `flag` is very much part of stdlib, then
[23:57:30] <Tv_> it does just about everything except subcommands
[23:57:42] <jemaclus> yeah, I know. I'm trying to figure how to describe what i'm thinking
[23:58:26] <jemaclus> I guess I think defining flags ahead of time is dumb.
[23:58:27] <jemaclus> lol
[23:58:55] <jemaclus> like, it'd be nice to just be like:  filename := flag.Short("f").String() and then have it figure out what that is
[23:59:25] <Tv_> jemaclus: must know all flags at the time of parsing flags
[23:59:40] <jemaclus> I guess that's my problem, then.
[23:59:45] <jemaclus> :)
[23:59:59] <Tv_> there's really no alternative
