[00:00:18] <ikke> Guest3690: what _do_ you expect to happen then?
[00:01:13] *** Joins: xx (~xx@user/xx)
[00:02:04] <Guest3690> I want my restored file to has the same address on the disk. Coz when I restore hardlinks in linux they stop work
[00:02:33] <ikke> oh, as far as I know, you cannot change that
[00:03:14] <Guest3690> ohh..so sad to know
[00:03:23] <Guest3690> thank you for the answer
[00:03:42] *** Joins: on^ (~on@12.203.127.82)
[00:06:47] <nedbat> Guest3690: i'm just curious, why use hard links?
[00:07:21] <Swahili> Q: Can we do cherry-pick and --no-verify?
[00:07:34] <ikke> Did you try?
[00:07:35] <Guest3690> @ned
[00:07:43] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[00:08:12] <Guest3690> @nedbat: config files versioning
[00:08:24] <nedbat> Guest3690: why not symlinks?
[00:08:45] <Swahili> Just noticed that can skip commit on cherry pick that should do, thanks
[00:09:30] <Guest3690> @nedbat: coz this shouldn't work as I think...but I didn't tried
[00:15:40] <Guest3690> @nedbat: I've just tried. And yes, git doesn't see any changes when you do this with symlinks
[00:16:05] <nedbat> Guest3690: i see, you want the repo to have links to the real files.
[00:16:29] <m-atoms> Hi folks. I have a remote tracking branch that isn't behaving. I ran a `git fetch <remote>` and it did fetch some new information but not all of it. When I check with `git branch -vv` I can see that it's 55 commits behind but I can't force it to catch up. Whats up with that?
[00:16:33] <smacko> mackerman: thank you for your help
[00:16:57] <ikke> m-atoms: what do you mean that you cannot catch up?
[00:17:04] <jast> m-atoms: did 'git fetch' say that it fetched stuff for that branch specifically?
[00:17:37] <jast> git fetch outputs information on which refs (branches, tags, ...) it updated
[00:17:43] <m-atoms> when I fetched from the remote it did actually fetch new stuff, just not all the way up to present
[00:18:25] <jast> I want to be really clear about this: new stuff *on this particular branch*?
[00:19:00] <ikke> m-atoms: git fetch does not update local branches
[00:19:00] <m-atoms> the remote only has a master branch so I think the answer is yes. Unless I'm misunderstanding you
[00:19:06] <jast> okay, that's fair
[00:19:14] <jast> then we get to what ikke said :)
[00:19:32] <jast> "git fetch" updates what is unfortunately called "remote-tracking branches" (think of them as "mirrors" of the remote branches)
[00:19:55] <jast> but it doesn't automatically mess around with the branch you're actually doing work in (the "local" branch) to avoid making a mess on autopilot
[00:20:21] <jast> "git branch" shows you the local branches, i.e. the ones you do work in, and "git branch -r" shows you the mirrors ("remote")
[00:20:53] <jast> now, if you just want your local  branch kept up-to-date, the easiest way to do this is to just use "git pull" (which is all the more straightforward if you haven't made any commits yoruself)
[00:21:12] *** Quits: speckz (~speckz@2600:1700:ce0:bf00:fd8b:da48:a404:88bc) (Quit: Textual IRC Client: www.textualapp.com)
[00:21:18] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:21:37] <jast> internally this runs git fetch and then also updates your local branch with what you fetched, using whichever strategy is configured (and if you don't have local commits of your own, it doesn't make a difference)
[00:22:09] <m-atoms> my typical workflow has been to use `git fetch myremote` and then `git push origin myremotebranch`
[00:22:41] <jast> that works, but only as long as nobody else pushes to 'myremote'... because 'git fetch' never actually updated your local branch :)
[00:23:03] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[00:23:16] <m-atoms> ah so this might be something I don't quite understand
[00:23:20] <jast> now let's get a bit more background here. I'm guessing from what you told us that other people are pushing to 'myremote', too?
[00:23:32] <m-atoms> yep you're right
[00:23:38] <jast> or perhaps that remote is one that *only* other people push to, and you're working with your fork (origin)?
[00:24:47] <jast> in any case, basically the different versions of the branch have "diverged", i.e. you have done something and someone else has done something else
[00:24:59] *** Joins: jazzy2 (jaziz@gateway/vpn/protonvpn/jaziz)
[00:25:01] *** Quits: teut (~teut@122.162.88.202) (Quit: Client closed)
[00:25:04] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:25:19] <m-atoms> this is very confusing but it goes like this: contractor works in myremote, I track that and fetch, then push into myremote branch (in origin). From there I can merge into my origin/master when I'm ready
[00:25:28] <jast> so at some point, someone needs to combine them. the specifics depend a lot on what workflow you and your co-conspirators use - there are many different ways of using git
[00:25:47] <jast> ah, myremote is a contractor, makes sense
[00:25:49] *** Joins: junktext (~junktext@109.201.152.172)
[00:25:54] *** Quits: jazzy2 (jaziz@gateway/vpn/protonvpn/jaziz) (Remote host closed the connection)
[00:26:13] <jast> so basically one of the ways to handle this is to merge the contractor's stuff into your local branch, too
[00:26:23] <jast> after you've fetched, this could be done using "git merge myremote/master"
[00:26:36] *** Joins: jazzy2 (jaziz@gateway/vpn/protonvpn/jaziz)
[00:26:46] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:26:56] <m-atoms> so I accidentally sort of fixed it but I don't understand how
[00:27:09] <jast> well, tell us what you did and we'll try and untangle it :)
[00:27:29] <jast> you can copy and paste from your terminal if you like... !paste
[00:27:29] <gitinfo> Please use a pastebin for snippets longer than one line. Persistent and can be used with a GitHub account: https://gist.github.com/ - one hour auto-delete: https://upaste.de/
[00:27:45] <m-atoms> your advice made me wonder if my local myremotebranch was behind my origin/myremotebranch
[00:28:14] *** Quits: jazzy (~jaziz@2600:380:457b:dc40:6db7:481b:9945:77d8) (Ping timeout: 246 seconds)
[00:28:27] <jast> well, if you're behind origin/myremotebranch, pushing to it usually won't work, either (because if the two sides diverge and nobody has combined them by e.g. merging, push refuses to throw away things)
[00:28:35] *** Quits: jonosterman (~Rheanna@101.91.192.124) (Remote host closed the connection)
[00:29:34] <m-atoms> origin/myremotebranch will never be ahead of myremote because I only use that branch to roll in contractor code
[00:30:06] *** Joins: jazzy3 (~jaziz@2600:380:457b:dc40:5c0f:a321:1cd7:19b9)
[00:30:09] <m-atoms> but when I `git pull` that should have pulled from origin/myremotebranch not myremote/master right?
[00:30:45] <jast> yes, I didn't initially understand your situation correctly. "pull" defaults to origin normally
[00:30:51] *** Joins: jonosterman (~Rheanna@101.91.214.30)
[00:30:51] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:31:05] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[00:31:35] <m-atoms> yeah but I'm looking at github and myremotebranch is definitely not up to date... so then I pulled from myremote?
[00:33:00] <m-atoms> maybe I'm just an idiot
[00:33:25] <jast> git branch -vv shows you which upstream branch is configured for your local branch
[00:33:33] <jast> so check that to know for certain
[00:33:39] <jast> it's in []
[00:33:45] <m-atoms> yep exactly
[00:33:50] *** Quits: jazzy2 (jaziz@gateway/vpn/protonvpn/jaziz) (Ping timeout: 246 seconds)
[00:34:01] <m-atoms> `git branch -vv` shows that myremote/master is the upstream
[00:34:33] <jast> all right, makes sense then
[00:34:42] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: Quit)
[00:34:48] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:34:48] <jast> we won't be able to figure out how it came to be set up like that, but basically you can change the association
[00:36:35] <m-atoms> it came to be like that because I have not mastered git lol
[00:36:48] <jast> ah well, it happens :)
[00:36:59] <jast> we're always happy to explain stuff here though
[00:37:16] <jast> as long as we're getting the slightest indication that you're learning, that is :P
[00:37:40] <m-atoms> your help has been tremendous but I might have a few more questions in a second. I need to make sure I understand whats going on now
[00:37:45] <jast> sure
[00:38:29] *** Quits: austin987 (~null@100.42.98.196) (Ping timeout: 264 seconds)
[00:38:55] *** Joins: sarab (~sarab@183.87.60.236)
[00:39:10] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[00:39:14] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:39:43] *** Joins: ano (~ano@user/ano)
[00:41:10] <m-atoms> hahaha
[00:41:18] <m-atoms> what a mess
[00:41:29] <jast> that's what I like to hear :)
[00:42:17] <m-atoms> so the actual name of my remote is `app` and then I also have branch named `app` at origin/app
[00:42:30] <jast> oh yeah, that can make for a lot of confusion
[00:43:07] <jast> in many places where you can pass a branch as an argument, you can also pass a remote name as a shorthand for that remote's default branch :)
[00:43:23] <m-atoms> I just did a clean `git clone` on my origin repo and when I do a `git checkout app` I get the upstream is origin/app and not app/master
[00:43:39] <jast> yeah, that would be the default behaviour
[00:43:47] <jast> it looks a bit weird mostly because of the names
[00:44:09] <m-atoms> so then how did I come to have an app branch checked out that was actually tracking app/master? That's what I'm not sure about now
[00:45:17] <jast> either app/master existed before origin/app and git's magic upstream guesser picked it up, or it didn't and git's magic upstream guesser still picked it up (which would be terrible and another very good reason to keep your remote names and branch names different)
[00:45:49] <jast> as it happens, the first time you do "git checkout app", a lot of special stuff needs to be done
[00:45:57] <jast> the first time you do this, you don't have a local "app" branch yet
[00:46:19] <jast> in very old git versions, it would just give you an error, but at some point they added some helpful magic to guess what you meant
[00:46:36] <jast> the typical case is that you have an origin/foo and "git checkout foo" *obviously* means you want to create a local branch from that
[00:47:00] <jast> but I'm assuming that the helpful magic can come up with a different target instead if they both have the same name
[00:47:26] <m-atoms> Everything you're saying makes sense. Way back when I set this up I took good notes and I just found them
[00:47:28] <jast> if you want to be extra explicit about it, there is a slightly less magical syntax: git checkout -t origin/app
[00:47:42] <m-atoms> the command I used: `git checkout -b app app/master`
[00:47:55] <jast> oh okay, that's not magical at all
[00:48:03] <jast> that's you manually saying, "I want to create 'app' based on 'app/master'"
[00:48:31] <jast> too bad if you forget that somewhere along the way, and never re-check ;)
[00:48:54] <jast> but this is actually quite a relief because I didn't think git should automatically select "app/master" as the upstream if you "git checkout app"
[00:49:19] <m-atoms> haha yeah don't worry I haven't found a way to break git... yet
[00:49:31] <jast> we can figure out a few ways if you like :P
[00:49:35] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Remote host closed the connection)
[00:50:07] <m-atoms> haha maybe next time
[00:50:19] *** Quits: junktext (~junktext@109.201.152.172) (Ping timeout: 252 seconds)
[00:50:20] <jast> we've seen terrible, terrible things here
[00:50:23] <jast> happy to share of course
[00:50:25] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[00:50:46] <m-atoms> I might hang out here to see if I can level up my git skills
[00:50:46] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[00:51:19] <jast> that's what I did, many years ago
[00:51:33] <m-atoms> 2 final questions then I'll leave you alone
[00:51:37] <m-atoms> if you don't mind
[00:51:47] <jast> if you haven't seen it yet, this is nice to solidify your knowledge of all the basic terms and structures: !gcs
[00:51:47] <gitinfo> [!concepts] "Git Concepts Simplified" presents all the important structures in Git, step by step, including selected internal details so it becomes much easier to understand what's going on whenever something's going on. http://gitolite.com/gcs.html
[00:51:50] <jast> sure, ask away
[00:52:03] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[00:52:39] *** Joins: austin987 (~null@100.42.98.196)
[00:53:15] <m-atoms> 1) do I need to have a local branch as an intermediary here? As in, can I somehow just go straight from app/master to origin/app?
[00:53:21] <jast> if I minded questions I wouldn't be here, after all
[00:53:33] <m-atoms> fair point lol
[00:53:46] <jast> in theory you can do it directly *if* both sides haven't diverged, but it's a bit of an advanced usage so the syntax is a bit less friendly
[00:53:57] <jast> you do need to fetch, but then you can the rest in one command
[00:54:14] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[00:54:28] <jast> git push origin app/master:app (which is shorthand for this which might also work better sometimes: git push origin refs/remotes/app/master:refs/heads/app)
[00:55:25] <jast> the thing at the end of these commands is called a refspec and both fetch and push use it internally\
[00:55:38] <m-atoms> oh okay that's a little scary but makes sense
[00:55:59] <jast> internally if you run "git fetch" without any branch arguments, git looks up a refspec from your .git/config
[00:56:11] <jast> you can see it like this: git config remote.origin.fetch
[00:56:22] <m-atoms> I've just started reading about refspecs, don't understand them yet but they seem useful
[00:56:25] <jast> this is the other direction, so the sides are reversed
[00:56:45] <jast> the default for a remote called 'origin' is: refs/heads/*:refs/remotes/origin/*
[00:57:15] <jast> which says: fetch everything in refs/heads/ (namespace for local branches) *on the remote side* and put it in refs/remotes/origin/ in the local repo (which is the namespace for mirror branches for origin)
[00:57:28] *** Quits: mooz (~none@23.254.112.158) (Ping timeout: 252 seconds)
[00:57:39] <jast> (there's + in front of the default refspec, too, but that's not important right now)
[00:57:49] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[00:59:01] <m-atoms> I understood up until "mirror branches for origin"
[00:59:21] <jast> well, remember how "git fetch" doesn't directly update your local branches but instead keeps mirrors of the remote branches?
[00:59:27] <jast> the ones that show up with "git branch -r"
[00:59:41] <jast> they usually show up as e.g. origin/foo, but internally they're called refs/remotes/origin/foo
[01:00:21] <m-atoms> ohh okay I gotcha
[01:00:56] <jast> this is because in git everything that names a commit (or series of commits, depending on how you look at it) is a ref, and all of them share a namespace internally
[01:01:14] <jast> of course most users don't care so much, so the full name is hardly ever shown
[01:01:40] <m-atoms> the problem with how great git works is that you almost don't need to understand all this
[01:01:53] <m-atoms> which is nice most of the time... and then something breaks and you're helpless
[01:01:55] <jast> yeah, it kind of starts getting more relevant the more advanced you want to be :)
[01:02:39] <jast> it's difficult. some people like to believe that you can just hide all of the details, but of course the moment you do that, you limit the flexibility
[01:02:49] *** Quits: Guest3690 (~Guest36@node-145-177-35-212.domolink.tula.net) (Quit: Client closed)
[01:03:06] <jast> which works nicely if the simplified version is limited to specific workflows and use cases, but that's not the real world :)
[01:03:27] <ZacSharp> the problem is when people start to use both things, the simple commands and the ones where you gotta understand what you are doing
[01:03:33] <jast> admittedly some pieces in git are really weird either way
[01:03:47] <m-atoms> ZacSharp that was me just now haha
[01:03:59] <jast> for instance, both "git reset" and "git checkout" have two different ways to invoke them that do fairly different things
[01:05:09] <jast> once you understand what each of them does you can work with them, but these operations are partitioned doesn't quite make sense except maybe from a historical perspective
[01:05:16] <jast> *but the way
[01:05:46] <m-atoms> I've gotten reasonably far without understanding the nuances but it kinda stresses me out when I have to use a thing without knowing how it works. seems like learning is worth the investment at this point
[01:05:54] <jast> I have yet to see a good attempt of fixing these
[01:06:18] <jast> there are experimental subcommands called "switch" and "restore" which are cleaner but also don't cover all of the existing operations
[01:06:31] <ZacSharp> what do they actually do?
[01:06:45] <jast> I think "git switch" is just equivalent to the normal "switch branches" operation in "git checkout"
[01:06:58] <ZacSharp> the suddenly appeared in the git help text and seem to be about the same as checkout and reset
[01:07:04] <jast> except with less options
[01:07:33] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:07:37] <ZacSharp> so separating out the the "simple interface" into it's own commands?
[01:08:05] <jast> and I think "git restore" is mostly the second form of "checkout" except with different options
[01:08:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[01:08:34] <jast> hm, actually "restore" is a bit of a mix between second form of "checkout" and second form of "reset"
[01:08:48] <jast> that kind of makes sense I suppose
[01:09:32] <jast> unfortunately, the one-line description of "restore" says "Restore working tree files" which is only a small part of what it actually does
[01:10:01] <jast> and now, good luck explaining the difference between "reset" and "restore" to someone who is completely new ;D
[01:10:02] *** Gustavo6046_ is now known as Gustavo6046
[01:10:04] *** Joins: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net)
[01:10:24] <ZacSharp> no, please not
[01:11:04] <jast> someone attempted to explain the difference in the main manpage, but that explanation is just as incomplete
[01:11:27] <m-atoms> the documentation seems pretty thorough if you already know how it works
[01:11:36] <jast> and probably not too palatable for beginners
[01:11:43] <m-atoms> I had a hard time really making good use of it
[01:11:51] <ZacSharp> that's the point: "if you already know how it works"
[01:11:58] <jast> if you want to learn, I suppose the book is better
[01:12:01] <jast> !book
[01:12:01] <gitinfo> There are several good books available about git; 'Pro Git' is probably the best: https://git-scm.com/book but also look at !bottomup !cs !gcs !designers !gitt !vcbe and !parable
[01:12:16] <jast> (don't bother checking all of those :))
[01:12:32] <m-atoms> yeah the intricacies of git fetch depth/shallow/deep/etc were lost on me
[01:12:39] <m-atoms> I'll check that book
[01:12:43] <m-atoms> so some of this might be relevant to my second (and final) question: how should I have done this? meaning, if I want to sync from a remote/master into a origin/branch I control
[01:12:45] <jast> that's fairly straightforward actually
[01:13:04] <jast> depth/shallow etc. is just a way to try and save disk space (and data transfer) when cloning
[01:13:21] <jast> basically the history being transferred cuts off at a certain point, and the rest won't be available locally
[01:13:47] <jast> this makes for some restrictions on some operations and is usually a bad idea if you want to actually look at the history, but for some situations it can be quite helpful
[01:14:39] <jast> so if you say --depth 1, that means your new clone's local history only goes back by one commit on each branch you clone
[01:14:50] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[01:14:58] <jast> and any repository that has a limitation like that is called "shallow"
[01:15:01] <jast> that's it
[01:16:44] <ZacSharp> and now easily explain how to unshallow specific branches or explicitly fetch a few commits deeper without unshallowing the thing
[01:17:02] <ZacSharp> I've seen some confusion on some problem like that here
[01:17:31] *** Quits: MaximB (~MaximB@87.68.165.87) (Quit: Client closed)
[01:17:45] *** _subopt is now known as subopt
[01:17:56] <jast> I never use this myself so I'm not sure about all of the details
[01:18:34] <jast> but generally speaking if you want to increase the depth to 50 you use "git fetch --depth=50" and if you want to increase the depth *by* 50 you use "git fetch --deepen=50"
[01:18:35] *** Quits: jonosterman (~Rheanna@101.91.214.30) (Remote host closed the connection)
[01:19:28] <jast> that applies to each branch being fetched, I'm not sure what (if anything) it does about branches you're not fetching in this particular fetch
[01:19:50] <ZacSharp> sounds way easier than the conversation I read about it
[01:20:39] <jast> if you want to do this for all branches at once, I'm fairly sure that's basically all you need to know
[01:20:47] *** Joins: jonosterman (~Rheanna@101.89.154.192)
[01:20:55] <jast> for individual branches I'd have to look up the details, or defer to someone who has actual experience :)
[01:21:00] *** Parts: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net) (WeeChat 3.2)
[01:21:14] <ZacSharp> I think if I ever need it I can just try it out
[01:21:17] <jast> sure
[01:21:20] <ZacSharp> with a dummy rep ofc
[01:21:30] <jast> especially if you're not short on disk space and bandwidth/data limits
[01:21:39] *** Joins: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net)
[01:21:59] <m-atoms> alright jast why don't you handle all the git documentation
[01:22:07] <m-atoms> I feel like your explanations are easier to understand
[01:22:07] <jast> because I have a life :(
[01:22:18] *** Parts: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net) ()
[01:22:53] <jast> oh, I understand now how it works
[01:23:26] <jast> it's a bit counter-intuitive because internally the shallow mechanism doesn't store information on each branch
[01:24:03] <jast> instead, when figuring out what to fetch for e.g. the master branch and --depth=10, it looks at 10 commits on master
[01:24:39] <jast> then the commit it finds there becomes a "shallow boundary"... meaning that whenever a fetch operation encounters this commit, it will not transfer its parent commits
[01:25:00] *** Joins: nvmd (~nvmd@user/nvmd)
[01:25:28] <jast> so, the shallow mechanism just stores a list of commit IDs to determine where to stop fetching
[01:25:56] <ZacSharp> interesting
[01:26:29] <ZacSharp> does that mean if I give it a ref to fetch behind all shallow boundaries it just goes wild and fetches the whole repo?
[01:26:47] <jast> it would *probably* fetch the full history for that ref, yes
[01:26:59] <jast> unless you include --depth with that "git fetch"
[01:27:02] <ZacSharp> gotta try that right now
[01:27:11] <jast> unfortunately I can't be bothered testing it myself :)
[01:27:58] <jast> the internal data is in .git/shallow if you want to take a peek
[01:28:16] *** Quits: srinidhi (~srinidhi@49.206.4.186) (Ping timeout: 252 seconds)
[01:29:20] *** Joins: goldfish (~goldfish@user/goldfish)
[01:29:27] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[01:29:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[01:30:14] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[01:30:35] *** Quits: cambrian_invader (~cambrian_@50-195-82-171-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[01:31:17] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 264 seconds)
[01:31:33] <ZacSharp> I just created a local repo with twenty empty commits and when I tried to clone it to another folder with --depth=5 git told me that it's ignoring the depth argument for local clones and I gotta use a file:// url
[01:31:52] <jast> yeah, clone has a magic trick for local clones to reuse the repo metadata
[01:32:01] <jast> it will hardlink the pack files
[01:32:11] <jast> or use the alternate mechanism, one of those
[01:32:32] <jast> you can also bypass it with --no-hardlinks as I recall
[01:32:50] <jast> oh wait, it's even easier, just --local or -l
[01:33:02] <jast> no, that's the default
[01:33:07] <jast> haha, I can't read
[01:33:25] <jast> --no-local is what to use to disable the magic
[01:33:34] <jast> or a file:// URL, whichever you prefer
[01:36:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:37:05] <jast> ... and now, good night :)
[01:37:24] *** Joins: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net)
[01:37:27] *** Quits: snedd (~snedd@86.14.114.137) (Quit: Leaving)
[01:37:36] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[01:37:40] <ZacSharp> good night
[01:38:31] *** Joins: snedd (~snedd@86.14.114.137)
[01:38:35] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 246 seconds)
[01:39:34] *** Lord_of_Life_ is now known as Lord_of_Life
[01:39:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[01:40:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[01:40:29] *** Quits: christall (~christall@24.235.90.74) (Remote host closed the connection)
[01:41:40] *** Joins: arcatech (~arcatech@user/arcatech)
[01:41:48] *** Parts: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net) (WeeChat 3.2)
[01:43:23] *** Joins: cambrian_invader (~cambrian_@50-195-82-171-static.hfc.comcastbusiness.net)
[01:43:26] *** Quits: on^ (~on@12.203.127.82) (Remote host closed the connection)
[01:43:50] *** Quits: adl_ (~adl@117.32.216.102) (Ping timeout: 246 seconds)
[01:43:52] *** Joins: adlternative (~adl@117.32.216.71)
[01:48:09] *** Joins: christall (~christall@24.235.90.74)
[01:49:30] *** Quits: madewokherd (~urk@comcast.codeweavers.com) (Quit: If your computer stops responding for a long time, turn it off and then back on.)
[01:49:46] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[01:49:53] *** jazzy3 is now known as jazzy
[01:50:20] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[01:51:41] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 264 seconds)
[01:53:08] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 252 seconds)
[01:54:16] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[01:56:22] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:58:28] *** Joins: fulljab (~fulljab@2620:8d:8000:1070:5531:8cd2:ad2f:cdb4)
[02:00:18] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[02:00:37] *** Joins: ZacSharp95 (~ZacSharp@user/zacsharp)
[02:00:51] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[02:01:32] *** Quits: fulljab (~fulljab@2620:8d:8000:1070:5531:8cd2:ad2f:cdb4) (Client Quit)
[02:01:43] *** Joins: fulljab (~fulljab@2620:8d:8000:1070:5531:8cd2:ad2f:cdb4)
[02:04:20] *** Quits: ZacSharp (~ZacSharp@user/zacsharp) (Ping timeout: 256 seconds)
[02:06:58] *** Quits: durham_ (~durham@2620:10d:c090:400::5:f8a5) (Read error: Connection reset by peer)
[02:07:02] *** Joins: durham (~durham@2600:1700:38d4:60:c3c:5bfc:8cac:a0ac)
[02:08:38] *** Quits: jonosterman (~Rheanna@101.89.154.192) (Remote host closed the connection)
[02:09:14] *** Joins: durham_ (~durham@2620:10d:c090:400::5:261c)
[02:10:38] *** Joins: jonosterman (~Rheanna@101.91.238.197)
[02:11:19] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[02:11:29] *** Quits: durham (~durham@2600:1700:38d4:60:c3c:5bfc:8cac:a0ac) (Ping timeout: 264 seconds)
[02:11:54] *** ZacSharp95 is now known as ZacSharp
[02:15:02] *** Joins: christall (~christall@24.235.90.74)
[02:15:52] *** Joins: nctcf^ (~nctcf@12.203.127.82)
[02:16:52] *** Quits: canton7 (~canton7@about/csharp/canton7) (Quit: ZNC - http://znc.in)
[02:17:05] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[02:17:11] *** Joins: canton7 (~canton7@about/csharp/canton7)
[02:18:05] *** Joins: madewokherd (~urk@75-168-202-251.mpls.qwest.net)
[02:19:53] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 264 seconds)
[02:20:33] *** Joins: nvmd (~nvmd@user/nvmd)
[02:20:35] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 246 seconds)
[02:20:56] *** Quits: Erisa (~Erisa@user/erisa) (Read error: Connection reset by peer)
[02:21:02] *** Quits: jrofd (~test@185.217.117.204) (Ping timeout: 268 seconds)
[02:21:22] *** Joins: Erisa (~Erisa@user/erisa)
[02:25:27] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[02:26:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[02:28:14] *** Joins: junktext (~junktext@109.201.152.169)
[02:32:40] *** Parts: ska (~ska@user/ska) (Leaving)
[02:33:35] *** Joins: jrofd (~test@185.192.69.211)
[02:34:12] *** Joins: Kornikaned (~nicolas@2a01cb088163f900b39a4a7dd4427b62.ipv6.abo.wanadoo.fr)
[02:34:27] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:34:27] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[02:34:42] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[02:35:46] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[02:36:19] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:36:20] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[02:36:38] *** Quits: dfg (~dfg@user/dfg) (Quit: I hate quit messages.)
[02:36:58] *** Joins: dfg (~dfg@li490-89.members.linode.com)
[02:36:58] *** Quits: dfg (~dfg@li490-89.members.linode.com) (Changing host)
[02:36:58] *** Joins: dfg (~dfg@user/dfg)
[02:38:36] *** Joins: ninjin- (~ninjin@user/ninjin)
[02:40:20] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[02:45:22] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:46:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[02:46:36] *** Parts: Kornikaned (~nicolas@2a01cb088163f900b39a4a7dd4427b62.ipv6.abo.wanadoo.fr) ()
[02:46:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[02:48:18] *** Joins: christall (~christall@24.235.90.74)
[02:48:27] *** Quits: j416 (~j416@user/j416) (Ping timeout: 250 seconds)
[02:48:48] <lantech19446> if I'm working on a project that only effects a few segments of the code and other people are also updating code and pushing it to the repo, when I push my changes is it going to revert theirs or is git intelligent enough to see that theres is the newer version and leave it alone?
[02:49:04] *** Joins: j416 (~j416@user/j416)
[02:51:19] <ZacSharp> it will refuse to push
[02:52:36] <ZacSharp> you can only push if your local branch is ahead of the remote branch (you have commits the remote does not have but the remote does not have commits you don't have)
[02:52:44] *** Quits: Brumaire (~quassel@81-64-14-121.rev.numericable.fr) (Ping timeout: 260 seconds)
[02:53:05] <lantech19446> ok so it's going to force me to pull first so that they're in sync same question though will it revert my changes when I pull or will it recognize that my version of that file is newer and leave it alone
[02:54:07] <ZacSharp> it will try to merge all files modified by both sides and if it can't it will tell you
[02:54:36] <ZacSharp> if you and the others worked on seperate parts of the codebase you will get a clean merge
[02:55:13] <lantech19446> ok cool, I was just worried about reverting our site and my boss having to do all that work over but i'm already done my work on the parts he'd be likely to update
[02:56:27] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[02:57:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[02:57:01] <ZacSharp> unless you explicitly tell it to do so git should never make you loose work
[02:57:27] <ZacSharp> usually you tell it to do so with a -f flag
[02:57:37] *** Joins: Guest17 (~Guest17@c-69-255-2-251.hsd1.md.comcast.net)
[02:58:46] *** Quits: jonosterman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[02:58:58] <ZacSharp> have you pushed the changes to the files your boss is likely to change?
[02:59:29] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 264 seconds)
[03:00:41] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 264 seconds)
[03:01:14] *** Joins: jonosterman (~Rheanna@101.89.154.192)
[03:02:19] *** Parts: smacko (~smacko@2001:470:69fc:105::31b0) ()
[03:03:09] *** Quits: sarab (~sarab@183.87.60.236) (Ping timeout: 265 seconds)
[03:06:46] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[03:07:17] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 264 seconds)
[03:07:20] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[03:07:47] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[03:09:05] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[03:14:13] <lantech19446> yes that's all done
[03:17:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[03:17:36] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:17:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[03:17:59] *** Joins: Samian (~Sami@user/samian)
[03:19:36] *** Quits: shalok (~shalok@2600:1f14:b99:6016:af96:3ff4:9870:377e) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[03:19:58] *** Joins: shalok (~shalok@2600:1f14:b99:6016:af96:3ff4:9870:377e)
[03:20:03] *** Quits: junktext (~junktext@109.201.152.169) (Ping timeout: 252 seconds)
[03:20:07] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 265 seconds)
[03:20:57] *** Joins: whytwulf (~whytwulf@user/clf59)
[03:22:03] *** Quits: whytwulf (~whytwulf@user/clf59) (Remote host closed the connection)
[03:22:15] *** Quits: shalok (~shalok@2600:1f14:b99:6016:af96:3ff4:9870:377e) (Remote host closed the connection)
[03:22:25] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:22:38] *** Joins: shalok (~shalok@2600:1f14:b99:6016:af96:3ff4:9870:377e)
[03:23:03] *** Joins: masber (~masber@213.55.226.77)
[03:27:25] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[03:27:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[03:28:28] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[03:29:04] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[03:31:32] *** Parts: ash_worksi (~ash_m@user/ash-m/x-3292451) ()
[03:33:48] *** Quits: pizdets_ (~pizdets@183.182.111.213) (Ping timeout: 268 seconds)
[03:33:50] *** Joins: pizdets (~pizdets@183.182.110.57)
[03:35:52] *** Quits: snedd (~snedd@86.14.114.137) (Quit: Leaving)
[03:37:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[03:38:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[03:38:38] *** Quits: ZacSharp (~ZacSharp@user/zacsharp) (Quit: ZacSharp)
[03:39:10] *** Joins: christall (~christall@24.235.90.74)
[03:39:35] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:40:23] *** Quits: shalok (~shalok@2600:1f14:b99:6016:af96:3ff4:9870:377e) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[03:40:46] *** Joins: shalok (~shalok@2600:1f14:b99:6016:af96:3ff4:9870:377e)
[03:42:41] *** Quits: Guest88 (~textual@85.249.161.186) (Ping timeout: 264 seconds)
[03:44:07] *** Quits: Guest36 (~textual@103.104.171.53) (Read error: Connection reset by peer)
[03:48:04] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[03:48:12] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:48:40] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[03:48:41] *** Quits: jonosterman (~Rheanna@101.89.154.192) (Remote host closed the connection)
[03:51:20] *** Joins: jonosterman (~Rheanna@218.78.88.163)
[03:52:15] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[03:52:16] *** Quits: fulljab (~fulljab@2620:8d:8000:1070:5531:8cd2:ad2f:cdb4) (Quit: Textual IRC Client: www.textualapp.com)
[03:53:04] *** Joins: Betal (~Betal@user/betal)
[03:53:04] <Yruama> Hello, who knows git subrepo, i need help with
[03:53:42] <Yruama> i'd like to know how to commit into a subrepo and push the result ?
[03:55:50] <Yruama> i changed a file in a subrepo from a main project, but i absolutly don't understand how to save this change in the subrepo
[03:55:53] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 264 seconds)
[03:56:10] <b0nn> Is there a way in git to 'walk' the git log looking at each patch from the CLI? (eg. git show -p for each commit from a given commit frward or backward in time along the tree)
[03:58:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[03:58:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[04:02:58] *** Quits: Wuzzy (~Wuzzy@p5790e1f6.dip0.t-ipconnect.de) (Quit: Wuzzy)
[04:03:35] <nedbat> b0nn: i use tig for that
[04:04:24] <Yruama> nobody use subrepo here ?
[04:04:57] *** Joins: ferdna (~ferdna@user/ferdna)
[04:06:59] <b0nn> nedbat: oh, does it have vim integration?
[04:07:15] <nedbat> b0nn: no, but fugitive for vim likely can do the same
[04:07:39] *** Joins: ARoxdale (~ARoxdale@84.203.25.150)
[04:08:44] <b0nn> yeah - my vim-fugitive-fu isn't that flash and I couldn't work it out (was hoping for a git log with a list of commits that I could `=` to expand/collapse
[04:08:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[04:08:46] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[04:09:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[04:10:28] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[04:10:45] <nedbat> b0nn: when I do :Glog i get a list of commits in the quickfix window, and typing Enter on one displays the patch above.
[04:19:05] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[04:19:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[04:21:43] <b0nn> nedbat: that works, thanks :)
[04:29:25] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[04:29:48] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 252 seconds)
[04:30:02] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[04:33:36] <Yruama> ok, i think i'have found my issue, i did a sqash in my history making the subrepo out of sync. the fix is to correct the "parent" in .gitrepo
[04:34:39] *** Quits: natrys (~natrys@user/natrys) (Quit: natrys)
[04:35:22] *** Quits: peirik (~peirik@84.215.176.70) (Ping timeout: 260 seconds)
[04:36:23] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[04:37:01] *** Joins: peirik (~peirik@84.215.176.70)
[04:37:06] *** Quits: masber (~masber@213.55.226.77) (Quit: Client closed)
[04:39:05] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[04:39:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[04:40:17] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 264 seconds)
[04:40:19] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[04:42:41] *** Quits: peirik (~peirik@84.215.176.70) (Ping timeout: 264 seconds)
[04:43:38] *** Quits: ARoxdale (~ARoxdale@84.203.25.150) (Quit: Leaving)
[04:44:04] *** ninjin- is now known as ninjin
[04:44:20] *** Joins: peirik (~peirik@84.215.176.70)
[04:50:05] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[04:50:40] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[04:51:46] *** Quits: infernix (nix@spirit.infernix.net) (Ping timeout: 252 seconds)
[04:52:34] *** Joins: Xenguy_ (~Xenguy@devuan/developer/Xenguy)
[04:53:49] *** Xenguy_ is now known as Xenguy
[04:57:02] *** Quits: m-atoms (~m-atoms@32.140.186.102) (Ping timeout: 246 seconds)
[04:59:28] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[04:59:35] *** Joins: infernix (nix@2a02:22a0:bbb1:d500::2)
[05:00:35] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[05:01:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[05:01:08] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[05:02:32] *** Joins: dviola (~diego@user/dviola)
[05:02:59] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Ping timeout: 246 seconds)
[05:05:29] *** Quits: infernix (nix@2a02:22a0:bbb1:d500::2) (Ping timeout: 264 seconds)
[05:07:18] *** Joins: maroloccio (~marolocci@89-172-7-22.adsl.net.t-com.hr)
[05:10:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[05:11:28] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[05:12:03] *** Quits: dcpc007 (~dcpc007@lfbn-idf2-1-596-59.w86-246.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[05:12:36] *** Joins: dcpc007 (~dcpc007@lfbn-idf2-1-706-245.w86-247.abo.wanadoo.fr)
[05:21:14] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[05:21:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[05:25:03] *** Joins: infernix (nix@2a02:22a0:bbb1:d500::2)
[05:25:16] *** Joins: m-atoms (~m-atoms@172.sub-174-251-168.myvzw.com)
[05:26:40] *** Quits: cek (uid23454@id-23454.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[05:27:22] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[05:31:35] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[05:32:08] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[05:35:00] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[05:36:37] *** Joins: xiongxin8802 (~xiongxin@113.116.33.208)
[05:41:54] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[05:42:28] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[05:44:17] *** Quits: m-atoms (~m-atoms@172.sub-174-251-168.myvzw.com) (Ping timeout: 246 seconds)
[05:45:39] *** Joins: m-atoms (~m-atoms@90.sub-174-251-170.myvzw.com)
[05:47:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:49:04] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[05:52:14] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[05:52:47] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[05:53:00] *** Quits: m-atoms (~m-atoms@90.sub-174-251-170.myvzw.com) (Read error: Connection reset by peer)
[05:53:13] *** Joins: m-atoms (~m-atoms@90.sub-174-251-170.myvzw.com)
[05:53:49] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[05:57:15] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[05:58:22] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 252 seconds)
[05:58:55] *** Joins: keypushe- (keypusher@user/keypusher)
[05:59:23] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 260 seconds)
[05:59:24] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[05:59:36] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[05:59:53] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[06:00:23] *** Quits: xx (~xx@user/xx) (Ping timeout: 246 seconds)
[06:00:32] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:02:06] *** keypushe- is now known as keypusher
[06:02:33] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[06:03:07] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[06:07:43] *** Joins: christall (~christall@24.235.90.74)
[06:09:27] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Quit: Leaving)
[06:12:37] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[06:12:53] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[06:13:28] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[06:23:16] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[06:23:50] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[06:26:29] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 264 seconds)
[06:31:54] *** Quits: m-atoms (~m-atoms@90.sub-174-251-170.myvzw.com) (Ping timeout: 264 seconds)
[06:36:48] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[06:36:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[06:38:14] *** Quits: hornhack (~hackingho@user/hackinghorn) (Ping timeout: 265 seconds)
[06:39:31] *** Quits: Jonno_FTW (~come@api.carswap.me) (Changing host)
[06:39:31] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[06:42:59] *** Quits: xiongxin8802 (~xiongxin@113.116.33.208) (Ping timeout: 252 seconds)
[06:46:44] *** Joins: xiongxin8802 (~xiongxin@113.116.32.188)
[06:48:36] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[06:50:08] *** Quits: jrofd (~test@185.192.69.211) (Ping timeout: 252 seconds)
[06:54:10] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[06:56:26] *** Quits: xiongxin8802 (~xiongxin@113.116.32.188) (Quit: Konversation terminated!)
[06:56:54] *** Joins: xiongxin8802 (~xiongxin@113.116.32.188)
[06:59:40] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[07:01:55] *** Joins: fdan (~fdan@103.215.168.1)
[07:02:24] *** Joins: ano (~ano@user/ano)
[07:03:39] *** Joins: jrofd (~test@185.192.69.126)
[07:10:39] *** Joins: hornhack (~hackingho@user/hackinghorn)
[07:13:11] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 246 seconds)
[07:14:14] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 246 seconds)
[07:14:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[07:16:29] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:16:58] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:24:27] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[07:28:06] *** Quits: Xenguy (~Xenguy@devuan/developer/Xenguy) (Ping timeout: 252 seconds)
[07:28:22] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[07:28:43] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[07:33:38] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 252 seconds)
[07:44:24] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[07:45:59] *** Joins: Samian (~Sami@user/samian)
[07:47:03] *** Joins: gast0n (~g4570n@user/gast0n)
[07:47:07] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[07:47:13] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:49:05] *** Quits: llh (~llh@user/llh) (Ping timeout: 268 seconds)
[07:50:00] *** Joins: llh (~llh@198.48.244.21)
[07:50:17] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 246 seconds)
[07:50:29] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 264 seconds)
[07:52:04] <hornhack> how do I know if a commit is included in the tree leading to my current commit?
[07:54:08] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[07:54:43] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[07:57:14] *** Joins: anton (anton@tloks.com)
[07:57:54] *** Joins: holmes (~holmes@user/holmes)
[07:58:59] *** Quits: jonosterman (~Rheanna@218.78.88.163) (Remote host closed the connection)
[07:59:44] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 246 seconds)
[08:03:21] *** Joins: jonosterman (~Rheanna@101.91.180.110)
[08:04:29] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[08:05:04] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[08:06:57] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:15:00] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[08:17:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[08:17:50] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[08:22:19] *** Quits: holmes (~holmes@user/holmes) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:24:09] *** Quits: jonosterman (~Rheanna@101.91.180.110) (Remote host closed the connection)
[08:24:47] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[08:25:02] <Anu> https://stackoverflow.com/questions/43535132/given-a-commit-id-how-to-determine-if-current-branch-contains-the-commit/43535152
[08:25:11] *** Joins: jonosterman (~Rheanna@101.91.180.110)
[08:25:20] <Anu> rather than copy, I'd just link this.
[08:25:36] *** Joins: igemnace (~ian@user/igemnace)
[08:26:23] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[08:26:39] *** Joins: holmes (~holmes@user/holmes)
[08:27:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:27:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[08:27:49] <Anu> some of these won't work if you have a danglind head so might wanna use git merge-base --is-ancestor
[08:28:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[08:29:37] *** Parts: holmes (~holmes@user/holmes) ()
[08:30:00] *** Quits: xiongxin8802 (~xiongxin@113.116.32.188) (Read error: Connection reset by peer)
[08:30:15] *** Joins: xiongxin8802 (~xiongxin@113.116.33.208)
[08:32:14] *** Quits: xiongxin8802 (~xiongxin@113.116.33.208) (Client Quit)
[08:32:35] *** Joins: xiongxin8802 (~xiongxin@119.123.103.94)
[08:33:00] *** Joins: gnoo (~gnoo@user/gnoo)
[08:35:02] *** Joins: christall (~christall@24.235.90.74)
[08:36:03] *** AbleBacon_ is now known as AbleBacon
[08:37:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[08:38:09] *** Quits: Guest17 (~Guest17@c-69-255-2-251.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[08:38:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:38:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[08:47:41] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 246 seconds)
[08:49:01] *** Quits: jonosterman (~Rheanna@101.91.180.110) (Remote host closed the connection)
[08:49:50] *** Joins: jonosterman (~Rheanna@101.91.238.197)
[08:49:53] *** Quits: maroloccio (~marolocci@89-172-7-22.adsl.net.t-com.hr) (Ping timeout: 264 seconds)
[08:51:50] *** Joins: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr)
[08:52:14] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[08:55:15] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[08:55:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[08:56:38] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 252 seconds)
[08:57:01] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[08:58:11] *** Joins: sandipan (~Sandipan@43.252.250.120)
[08:59:28] *** Joins: vishal (~vishal@fedora/vishal)
[09:00:33] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[09:01:44] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:03:17] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[09:03:48] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[09:04:49] *** Quits: subopt (~subopt@2603-8081-2302-459a-cc87-1a27-c0e0-a1e7.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:04:55] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 264 seconds)
[09:05:35] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[09:06:05] *** Quits: xiongxin8802 (~xiongxin@119.123.103.94) (Ping timeout: 264 seconds)
[09:06:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[09:15:42] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 264 seconds)
[09:15:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[09:16:30] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[09:18:10] *** Joins: xiongxin8802 (~xiongxin@119.123.103.94)
[09:22:30] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[09:26:16] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[09:26:50] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[09:31:49] *** Quits: hbautista (~hbautista@189.129.75.30) (Remote host closed the connection)
[09:32:12] *** Joins: hbautista (~hbautista@189.129.75.30)
[09:33:13] *** Quits: Crispy (~ScatMan@101.181.163.172) (Ping timeout: 265 seconds)
[09:36:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[09:37:02] *** Quits: hbautista (~hbautista@189.129.75.30) (Ping timeout: 246 seconds)
[09:37:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[09:38:45] *** Quits: jonosterman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[09:39:16] *** Joins: Crispy (~ScatMan@101.181.56.49)
[09:40:28] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[09:40:34] *** Joins: jonosterman (~Rheanna@218.78.27.29)
[09:43:28] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[09:43:51] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[09:45:21] *** Joins: ThomasD13 (~thomasd13@DSL01.212.114.255.148.ip-pool.NEFkom.net)
[09:48:05] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 264 seconds)
[09:51:19] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[09:51:31] *** Quits: xiongxin8802 (~xiongxin@119.123.103.94) (Quit: Konversation terminated!)
[09:51:50] *** Joins: xiongxin8802 (~xiongxin@113.116.32.188)
[09:56:22] <jaggz> okay, so I have a git repo set up using a git service, and I want to change it to a local /path/dir/ as the repository
[09:56:25] *** Joins: Mo (~Mo@dynamic-077-008-161-253.77.8.pool.telefonica.de)
[09:56:28] <jaggz> (for now)
[09:56:35] <jaggz> as the remote
[09:56:53] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[09:56:55] <jaggz> so I made /path/dir and made it owned by the user that has access to the checked-out repository
[09:57:14] <jaggz> not sure where to go from here.. do I init --bare . in that dir?
[09:57:27] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[09:57:29] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:57:56] <ikke> jaggz: that should work
[10:01:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[10:01:10] <jaggz> ikke, then set it as the remote?  git remote set-url file:///path/dir/
[10:01:22] <jaggz> then.. what.. push?
[10:02:37] <ikke> sure
[10:07:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[10:07:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[10:12:44] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[10:12:56] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[10:21:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) (Remote host closed the connection)
[10:21:47] *** Joins: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557)
[10:23:19] *** Quits: michigan (~woooaaa@149.28.104.5) (Quit: leaving)
[10:24:49] *** Joins: MeddlingHuman (~meddlingh@203-114-140-73.sta.inspire.net.nz)
[10:28:05] *** Joins: unlaudable (~unlaudabl@155.93.175.230)
[10:29:18] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[10:29:20] *** Quits: jonosterman (~Rheanna@218.78.27.29) (Remote host closed the connection)
[10:29:55] *** Joins: jonosterman (~Rheanna@101.91.192.124)
[10:30:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:6daa:6a79:97ab:557) ()
[10:31:02] *** Quits: xiongxin8802 (~xiongxin@113.116.32.188) (Quit: Konversation terminated!)
[10:31:32] *** Joins: xiongxin8802 (~xiongxin@119.123.103.94)
[10:33:32] *** Joins: srinidhi (~srinidhi@49.206.4.186)
[10:34:27] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[10:35:33] *** Quits: xiongxin8802 (~xiongxin@119.123.103.94) (Remote host closed the connection)
[10:35:54] *** Joins: xiongxin8802 (~xiongxin@119.123.103.94)
[10:39:10] *** Joins: kenanmarasli (~kenan@185.67.124.177)
[10:39:30] *** Quits: kenanmarasli (~kenan@185.67.124.177) (Changing host)
[10:39:30] *** Joins: kenanmarasli (~kenan@user/kenanmarasli)
[10:41:49] <jaggz> warning: remote HEAD refers to nonexistent ref, unable to checkout.
[10:42:18] <jaggz> hrm. that's what I got when I tried to git clone git+ssh://user@host/path/dir/
[10:43:22] <ikke> I don't think git recognizes git+ssh
[10:43:31] <ikke> I'm fairly certain it doesn't
[10:44:00] <ikke> user@host:/path/dir should suffice
[10:44:07] <jaggz> it did get a bunch of objects
[10:44:12] <ikke> hmm
[10:44:20] <jaggz> 247
[10:45:09] <jaggz> it shows one branch (the one I pushed), although it doesn't show any files
[10:45:27] <jaggz> git branch -a shows "remotes/origin/joes_dev_work"
[10:45:41] <jaggz> I guess I didn't get the other branches all in there
[10:45:45] <jaggz> (in my git push)
[10:46:56] <ikke> jaggz: You need  to update HEAD in the remote repository to point to a branch that exists
[10:47:16] <ikke> when you init the repo, it by default points to master or main, depending on your settings
[10:51:21] <jaggz> looks like git set-head origin -a would work for that
[10:51:32] <jaggz> mine's 'master' right now, btw
[10:51:57] <jaggz> so set-head master -a .. I think
[10:52:40] <jaggz> nope.. and not origin either.  {shooting in the dark}.  with origin there it says "cannot determine the remote HEAD"
[10:53:38] <ikke> You need to do it on the remote repo
[10:53:47] <ikke> and use git symbolic-ref HEAD refs/heads/<branchname>
[10:53:54] <jaggz> weird.. do I set that in the /path/dir/ or can it be done from the clone?
[10:54:17] <ikke> /path/dir
[10:54:23] *** Joins: christall (~christall@24.235.90.74)
[10:54:40] <ikke> well, for future clones that is
[10:54:52] <jaggz> I did the "git remote set-head origin master" in one clone now, on a dev system.. should probably undo that
[10:55:17] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[10:55:17] <jaggz> how do you get a / as the first letter of your irc line? :)
[10:55:28] <ikke> either start with //
[10:55:34] <jaggz> /ohh
[10:55:37] <ikke> but if I do /foo/bar, then it's allowed as well
[10:55:41] <jaggz> heh. cool.
[10:56:34] <jaggz> they made this repo.. I presume master is the original head
[10:57:21] *** Joins: palasso (~palasso@user/palasso)
[10:57:28] <jaggz> okay I ran git symbolic-ref HEAD refs/heads/master
[10:58:02] <jaggz> in /path/dir -- a fresh clone still says remote HEAD refers to nonexistent ref, unable to checkout
[10:58:17] *** Quits: xiongxin8802 (~xiongxin@119.123.103.94) (Ping timeout: 264 seconds)
[10:58:58] <ikke> I assume you pushed some branch to that repo?
[10:59:06] <ikke> what does git for-each-ref return?
[10:59:25] <jaggz> yeah, I pushed joes_dev_work
[10:59:46] <ikke> Then you need to do: git symbolic-ref HEAD refs/heads/joes_dev_work
[11:00:09] <jaggz> shows {hashhere}@ commit refs/heads/joes_dev_work
[11:00:22] <jaggz> ideally I'd have gotten all branches pushed
[11:00:38] <ikke> You can still push master or another branch to it
[11:00:53] <jaggz> how do I get all branches of a clone into my /path/dir bare repo?
[11:01:27] <jaggz> I can look that one up (maybe)
[11:01:50] <jaggz> https://stackoverflow.com/questions/6865302/push-local-git-repo-to-new-remote-including-all-branches-and-tags
[11:01:52] <ikke> git push --all <remote>
[11:01:57] <jaggz> thanks :)
[11:02:14] *** Joins: tejr (~tejr@user/tejr)
[11:03:36] <jaggz> awesome
[11:03:44] <jaggz> cloning works (empty master branch, but ok)
[11:03:51] <jaggz> checking out joes stuff works
[11:03:55] <jaggz> beautifur!
[11:04:31] *** Joins: rsrx (~rsrx@103.225.150.81)
[11:04:36] <jaggz> and, yeah, git accepts git+ssh: urls.. has for decades I think
[11:04:48] <ikke> maybe I've mistaken git+http then
[11:05:02] <jaggz> (I've been using it since when I switched from svn to git in like.. hmm.. 2002 maybe?)
[11:05:07] <jaggz> I forget
[11:05:36] <jaggz> at some point I got a corrupt svn repo and .. never went back
[11:05:44] <jaggz> huge project got its history lost
[11:05:49] <jaggz> anyway
[11:05:56] <jaggz> backups were too old
[11:07:24] <ikke> https://lore.kernel.org/git/YE+ftT2WaKDzc+45@google.com/
[11:07:33] <ikke> It's deprecated
[11:16:09] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 265 seconds)
[11:19:48] *** Joins: xiongxin8802 (~xiongxin@119.123.103.94)
[11:20:57] *** Joins: vaucouleur (~vaucouleu@78.194.70.105)
[11:24:39] *** Quits: fandre1986 (~fandre198@178-36-241-155.adsl.inetia.pl) (Quit: Connection closed)
[11:29:24] *** Joins: wernerf (~wernerf@p200300d89f362b00f83e4aec83d828a6.dip0.t-ipconnect.de)
[11:30:48] *** Quits: vaucouleur (~vaucouleu@78.194.70.105) (Remote host closed the connection)
[11:32:56] *** Quits: nctcf^ (~nctcf@12.203.127.82) (Remote host closed the connection)
[11:34:04] *** wernerf is now known as wernerfred
[11:34:55] *** Joins: alkino (~quassel@user/alkino)
[11:35:51] *** Quits: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:37:01] *** Joins: gozir (~gozir@195.82.150.26)
[11:37:27] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[11:43:28] <roxlu> When I'm on branch `B` which is based on `A`, then `C` got merged into `A` and I want those changes in `B` as well, what can I do? I also have some changed files (not commited yet).
[11:43:53] *** Quits: thiago (~thiago@2601:1c0:4501:635c:cb5f:74:ab75:32ec) (Ping timeout: 264 seconds)
[11:45:01] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[11:47:09] <osse> roxlu: two main options: rebase B onto A, merge A into B
[11:52:49] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[11:53:26] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[11:54:29] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[11:58:56] <roxlu> Thanks osse! Would it be good to stash the changes first?
[11:59:44] <roxlu> As I'm in the middle of some changes I don't want to create a commit yet. Or should I still create a commit and then amend it mabye
[12:01:17] *** Quits: af (~af@awalgarg.me) (Ping timeout: 246 seconds)
[12:02:01] <osse> roxlu: both of those do the trick
[12:02:14] <osse> I'd stash. With rebase you can --autostash
[12:02:49] <jaggz> ikke, ahh
[12:05:13] *** Joins: christall (~christall@24.235.90.74)
[12:06:30] <roxlu> ah, I just amended a commit, created a tmp branch then did the rebase
[12:07:50] <jaggz> ikke, what's the alternative?  It's nice if you have ssh access but not a git repo
[12:08:33] *** Quits: jonosterman (~Rheanna@101.91.192.124) (Remote host closed the connection)
[12:08:49] <jaggz> not a git server.. never set one up.. it just uses ssh anyway? hm.
[12:09:16] <jaggz> no reason to use git+ssh:// at all then
[12:09:44] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 252 seconds)
[12:11:11] *** Joins: jonosterman (~Rheanna@101.91.238.197)
[12:11:39] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 276 seconds)
[12:13:17] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[12:14:43] *** Joins: GilP (~GilP@user/gilp)
[12:18:28] <roxlu> When I look at "readme.md" in my `development` branch I see e.g. "HI", in my local branch I have "HI THERE". When I do a rebase on `development`, e.g. `git rebase development` I should get a updated readme with just "HI", right? Currently I'm not seeing the same contents as I see on github.
[12:19:59] <osse> roxlu: depends on whether it was changed from HI to HI THERE in your branch, or if it was HI THERE originally and changed to HI sometime after you created your branch
[12:21:08] <roxlu> ok thanks, tbh I'm not sure where it was changed, but do I use `git checkout --theirs file` to get the version from `development`?
[12:22:53] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 252 seconds)
[12:25:04] <osse> --their/--ours is only valid in a merge conflict situation
[12:25:30] <osse> if that's the case, you want --ours, for some stupid reason
[12:25:46] <roxlu> ah :) git keeps confusing me
[12:26:52] <roxlu> what I find strange though ... the `readme` in the development branch is nicely cleaned up; I would expect that when I do a `git rebase development` I would see all those changed. Maybe I get a conflict, but I would see them right?
[12:27:26] <osse> I don't know
[12:27:38] <osse> probably
[12:27:38] <roxlu> oh .. damn, I think I should use `git rebase origin/development` not `git rebase development`
[12:31:42] <osse> you can always rebase again
[12:32:04] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[12:32:11] <osse> if you don't actively work on the development branch, consider removing it.
[12:36:52] <ikke> jaggz: yeah, it's just about the git+ssh:// specifier. Just ssh:// or rsync/scp syntax is more common
[12:37:01] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[12:37:57] <roxlu> ok thanks osse!
[12:38:19] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Ping timeout: 252 seconds)
[12:38:53] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[12:39:34] *** Joins: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net)
[12:39:52] *** Parts: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net) ()
[12:40:15] *** Quits: gozir (~gozir@195.82.150.26) (Quit: Leaving)
[12:40:31] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[12:40:46] <roxlu> ok another challenge :) I've got 2 commits, not pushed yet, which I want to combine, is that possible? It would be great if I could move the chagnes of the oldest comimt into the newest w/o creating a new commit
[12:41:43] <ikke> osse: one thing that always tricks me is when creating feature branches on top of remote tracking branches for long lived branches (git checkout -b foo origin/develop), it will track origin/develop and try to push there by default
[12:41:51] *** Joins: fdan (~fdan@192.146.154.3)
[12:42:21] *** Quits: alkino (~quassel@user/alkino) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:42:32] <osse> roxlu: are they consecutive? if so, are they the two most recent?
[12:43:30] *** Joins: alkino (~quassel@user/alkino)
[12:43:35] *** Quits: austin987 (~null@100.42.98.196) (Ping timeout: 246 seconds)
[12:44:16] <roxlu> osse: yes
[12:45:06] <osse> I am guessing you want to use the latest commit's message as the commit message
[12:45:25] <osse> if so:  git reset --soft HEAD~ && git commit -C HEAD@{1}
[12:45:36] <osse> shit
[12:45:44] <osse> git reset --soft HEAD~ && git commit -C HEAD@{1} --amend
[12:46:00] <ikke> The first one would be a noop :D
[12:46:09] <rond_> I manually changed a structure of git modules (both .gitmodules and the directories that it refers to). How to make sure that everything is correct and up to date?
[12:47:56] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2.1)
[12:48:04] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[12:48:13] <roxlu> thanks, would this also be possible if I had already pushed the commits?
[12:48:14] *** Joins: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net)
[12:48:30] <ikke> roxlu: it's always possible
[12:48:46] <ikke> If you should do it depends on the situation
[12:50:00] <roxlu> i'm in a feature branch which hasn't been used by anyone yet
[12:50:16] <osse> go for it, imo. and push --force-with-lease
[12:51:01] <roxlu> maybe it's a good idea to create a tmp/test branch
[12:51:27] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:51:29] *** Parts: lemonade7oe (~lemonade7@node-145-177-35-212.domolink.tula.net) (WeeChat 3.2)
[12:51:33] <ikke> for feature branches that you work on alone, it's should never be an issue
[12:52:04] <roxlu> ok thanks, I'm going to try some things
[12:52:38] *** Joins: Guest41 (~Guest41@39.182.193.144)
[12:53:02] *** Joins: sarab (~sarab@183.87.60.236)
[12:55:50] *** Quits: rahl (~rahl@102.114.51.192) (Ping timeout: 246 seconds)
[12:55:53] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 264 seconds)
[12:56:19] *** Joins: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com)
[12:56:46] *** Quits: Guest41 (~Guest41@39.182.193.144) (Client Quit)
[12:56:48] *** Joins: Guest82 (~Guest82@39.182.193.144)
[12:57:09] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:57:11] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[12:57:15] *** Quits: Guest82 (~Guest82@39.182.193.144) (Client Quit)
[12:57:53] *** Joins: rahl (~rahl@102.114.5.96)
[12:58:53] *** sandipan is now known as bytehackr
[12:58:53] *** Quits: jonosterman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[12:59:29] <roxlu> osse: when I want to change the 2nd commit, shouldn't I use: git reset --soft HEAD~2 ?
[12:59:41] <osse> you could
[12:59:49] <osse> but leave out --amend in that case
[13:01:48] *** Joins: jonosterman (~Rheanna@101.89.154.192)
[13:01:54] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 264 seconds)
[13:03:22] <roxlu> When I use `git reset --soft HEAD~2` and then `git commit -m "correct message"` would that mean that I lose the 2 commits I had before?
[13:03:31] <roxlu> or loose .. the commit object itself + it's message I mean
[13:03:37] <osse> yes
[13:04:00] <roxlu> ok awesome... I'm (too) slowly undestanding this
[13:04:18] <roxlu> I'm always wondering why I find implemnting a navier stokes fluid simulation simpler than git :P
[13:06:05] <osse> That's because when you ask for help you get cryptic weird oneliners that solve your problem in one big swoop
[13:06:31] <roxlu> yeah I should buy a good book, sit down and read it
[13:06:34] <roxlu> any recommendations?
[13:06:39] <ikke> !book
[13:06:40] <gitinfo> There are several good books available about git; 'Pro Git' is probably the best: https://git-scm.com/book but also look at !bottomup !cs !gcs !designers !gitt !vcbe and !parable
[13:06:43] <osse> I could have replied with something like, make a copy of the message, do git reset --soft HEAD~2, then make a new commit and paste in the message
[13:06:54] <ikke> roxlu: do you understand graphs?
[13:07:02] <roxlu> it's also about how often you use it; once you get to use them  more often they start making sense
[13:07:24] *** Joins: xx (~xx@user/xx)
[13:07:32] <roxlu> ikke: I read something about DAG I think, but just skimmed it
[13:07:44] <ikke> roxlu: how about linked lists?
[13:07:57] <roxlu> ikke: yeah
[13:08:19] <ikke> Each commit is an element in the linked list, with a pointer back to its parent(s)
[13:08:36] <ikke> a branch as a pointer to the end of the linked list
[13:08:40] <roxlu> yeah that makes sense indeed
[13:09:17] <roxlu> .. about the Pro Git book, isnt' that a bit outdated? found a version from 2014
[13:09:42] <ikke> The digital v2 version should be up-to-date
[13:10:17] <roxlu> ah!
[13:13:07] *** Quits: dkp-01 (uid518771@5.254.36.57) (Ping timeout: 265 seconds)
[13:13:55] *** Joins: dkp-01 (uid518771@id-518771.tinside.irccloud.com)
[13:14:04] *** Quits: sarab (~sarab@183.87.60.236) (Quit: Leaving)
[13:14:23] *** Joins: sarab (~sarab@183.87.60.236)
[13:20:29] *** Quits: xiongxin8802 (~xiongxin@119.123.103.94) (Ping timeout: 264 seconds)
[13:24:43] *** Quits: momomo (~momomo@user/momomo) (Ping timeout: 265 seconds)
[13:46:46] *** Joins: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net)
[13:47:24] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[13:48:46] *** Quits: jonosterman (~Rheanna@101.89.154.192) (Remote host closed the connection)
[13:50:07] *** Joins: rsx (~dummy@ppp-188-174-150-47.dynamic.mnet-online.de)
[13:50:38] *** Joins: jonosterman (~Rheanna@101.89.154.192)
[13:55:17] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Quit: Konversation terminated!)
[14:03:20] *** Joins: gnoo_ (~gnoo@user/gnoo)
[14:03:41] *** Quits: jazzy (~jaziz@2600:380:457b:dc40:5c0f:a321:1cd7:19b9) (Ping timeout: 264 seconds)
[14:07:21] *** Quits: gnoo (~gnoo@user/gnoo) (Ping timeout: 276 seconds)
[14:07:29] *** Joins: christall (~christall@24.235.90.74)
[14:09:29] *** Joins: Brumaire (~quassel@37.165.26.197)
[14:11:16] *** Joins: fdan94 (~fdan@192.146.154.3)
[14:14:11] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[14:16:25] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[14:16:52] *** Joins: natrys (~natrys@user/natrys)
[14:19:39] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 268 seconds)
[14:20:55] <deepy> I'm trying to truncate history in a git repo with various success, right now I'm trying to create an orphan branch `empty` from $commit, committing that, and then `rebase --onto empty $commit develop` with this I seem to be getting a merge conflict on about 10% of the commits and I have 15k commits to rebase :E
[14:22:08] <deepy> So I tried with -Xours and now I'm still getting a lot of conflicts but mostly in cases where ours have deleted a file and theirs also have deleted the same file
[14:22:46] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[14:24:42] <deepy> I previously tried with git filter-branch trying to remove all but a certain parent with no success, I also tried grafting $commit to an empty commit but then all history got reintroduced with the next merge
[14:25:14] <ikke> deepy: maybe look into git replace --graft
[14:25:16] <ikke> man git replace
[14:25:16] <gitinfo> the git-replace manpage is available at https://gitirc.eu/git-replace.html
[14:25:21] <ikke> Should be a lot easier
[14:25:47] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 246 seconds)
[14:25:47] <ikke> combined with git filter-branch / git filter-repo to make it permanent
[14:26:17] <deepy> I guess I'm missing something when it comes to filter-branch / filter-repo on how to actually make it permanent
[14:26:53] <ikke> they should do it automatic just by rewriting everything
[14:27:27] <deepy> hmm, I'll give it a shot
[14:28:17] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 264 seconds)
[14:28:36] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:29:25] <Swahili> Q: after a rebase noticed that some work was lost, tried to reflog but can't find how to get back to the state before the rebase, it should be there on reflog right?
[14:29:53] <ikke> Yes, it should be there
[14:30:05] <ikke> After you found the correct commit, you can reset --hard the current branch to it
[14:30:18] *** Joins: on^ (~on@12.203.127.82)
[14:30:56] *** Quits: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr) (Quit: WeeChat 3.0)
[14:32:10] *** Joins: eduardas (~eduardas@93.93.57.5)
[14:33:50] *** Quits: Brumaire (~quassel@37.165.26.197) (Ping timeout: 265 seconds)
[14:34:32] <Swahili> ikke: thanks! I usually see it straight away, but for some reason today I can't seem to find it. So I started by git reset --hard origin/develop, checked out the branchA, then git rebase -i develop
[14:34:41] <deepy> git replace --graft worked fine in that my commit now has the empty commit as parent after running git filter-repo, but the next merge still brings in all the history again, do I need to do this for every single merge?
[14:34:55] <ikke> Swahili: the reflog for that specific branch is usually easier to follow when rebasing
[14:35:04] <ikke> git reflog <branchname> or git log -g <branchname>
[14:35:12] <Swahili> I'll try that :) thanks!
[14:35:25] <ikke> deepy: You do not need an empty commit to 'rebase' on
[14:35:34] <ikke> deepy: just set the parents for the new root commit to nothing
[14:36:17] <deepy> I set the parent for $commit to an empty commit with no parents, shouldn't that be good enough?
[14:37:02] <ikke> deepy: yes, just a tiny bit more complicated
[14:37:06] <ikke> what do you mean with the next merge
[14:37:23] <ikke> Once you have rewritten the repository, it's not really compattible with other repositories anymore
[14:37:42] <deepy> I'm trying to remove all history from before $commit on develop, but the next merge into develop that happened after $commit just re-introduced all the history again
[14:37:56] <ikke> yes, that's no longer 'simply' possible
[14:38:03] <ikke> You'd need to rebase those branches on the new history
[14:38:29] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 264 seconds)
[14:38:34] <ikke> And because there is no common commit, 3-way merging is not really possible
[14:38:36] *** Joins: alkino_ (~quassel@user/alkino)
[14:38:36] *** Quits: jonosterman (~Rheanna@101.89.154.192) (Remote host closed the connection)
[14:38:45] <deepy> This is where I was hoping there'd be tooling to help, these branches are more than two years old
[14:39:11] <ikke> deepy: can't you rewrite those branches in the same go?
[14:39:26] <ikke> don't limit filter-repo / branch to a single branch, but rewrite all refs in your repo
[14:40:40] <deepy> I might be using the wrong filter-repo command then, but some of these branches are from before $commit
[14:41:05] *** Joins: jonosterman (~Rheanna@101.91.197.175)
[14:41:16] <ikke> That complicates things
[14:41:55] *** Joins: daoudr (~daoudr@178.197.212.191)
[14:42:11] <ikke> You could graft all branches ontop of the same empty commit
[14:42:57] <ikke> It does mean the first commit of each branch would introduce all code though
[14:44:08] <deepy> I wonder if it'd be easier to go through the log and finding a commit everyone shares an ancestor with, even if it means we'd lose a month of history we care about
[14:44:17] *** Joins: Guest17 (~Guest17@c-69-255-2-251.hsd1.md.comcast.net)
[14:44:38] <ikke> That would certainly make everything easier
[14:44:53] <ikke> not only the rewriting, but also later merges
[14:46:04] <deepy> great, that doesn't actually seem to exist in the repo
[14:46:40] <ikke> huh, there must be a common ancestor for all branches, not? Unless they have been disjoint from the beginning
[14:47:41] <deepy> oh yeah, but it's far back into the history we want to truncate
[14:48:16] <deepy> most of the time it's 5 parallel ones going, best I can find is two
[14:49:41] <deepy> our team does not like merging with or rebasing on develop apparently
[14:50:10] *** Joins: xiongxin8802 (~xiongxin@113.116.33.208)
[14:51:41] *** Quits: jrofd (~test@185.192.69.126) (Ping timeout: 264 seconds)
[14:52:29] <ikke> Then truncating history is not going to be trivial
[14:52:31] *** Quits: GilP (~GilP@user/gilp) (Remote host closed the connection)
[14:53:21] <deepy> yeah, but if I have two branches to fix that's not as terrible as it could have been :-)
[14:54:41] *** Quits: xiongxin8802 (~xiongxin@113.116.33.208) (Ping timeout: 252 seconds)
[14:55:40] <ikke> One thing you want to make sure is that the new common ancestor makes sense
[14:56:19] <ikke> Any code that is not part of the new common ancestor looks as being introduced in the branches, being potential causes for conflicts
[14:56:36] <deepy> We did a major change where we shuffled around 200,000 files and we kinda want to not have the history from before that
[15:00:42] <deepy> ooh, I just need to change the path in this one commit and I should be good
[15:03:42] *** Joins: jrofd (~test@185.192.69.126)
[15:05:53] *** Joins: lgc (~lgc@user/lgc)
[15:09:31] <kenanmarasli> Is there a way to add files expect a specific pathspec? Currently I add all and restore --staged exceptions. Can I do it in add? I didn't see an option in the manual at first glance
[15:09:53] <kenanmarasli> except*
[15:10:26] <ikke> man gitglossary
[15:10:26] <gitinfo> the gitglossary manpage is available at https://gitirc.eu/gitglossary.html
[15:10:29] <ikke> look for pathspec
[15:10:48] <arash> Hello, when i want to add a remote address should i change git@github.com in "git remote add origin git@github.com" to myusername@github.com ?!
[15:10:49] *** Quits: fdan94 (~fdan@192.146.154.3) (Quit: Client closed)
[15:10:54] *** Joins: jim87 (~quassel@93.55.249.30)
[15:11:04] <ikke> no
[15:11:09] <ikke> it's always git@
[15:11:11] <ikke> for ssh
[15:11:54] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[15:12:13] <arash> it says "git@github.com: Permission denied (publickey)." how can i fix that?
[15:12:38] <ikke> did you add a public ssh key to your github account?
[15:13:03] <jim87> Hello! I've got a git repository and a submodule in the /common folder. Both repositories are under CodeCommit and I use a credentials helper (aws cli) to log-in. I've thus setup the credential.helper and credential.UseHttpPath settings, and it works flawlessly with the main repository. The problem is with the submodules, which ignores the credential configuration and asks for username/password... is this by design? How can I setup my submodule? Both
[15:13:03] <jim87> repositories are from the same endpoint, with a different path... thank you!
[15:13:56] *** Quits: hornhack (~hackingho@user/hackinghorn) (Ping timeout: 252 seconds)
[15:14:01] <ikke> submodule repos do not share config with the 'parent' repo
[15:14:36] <jim87> and how can I configure the submodule credential settings?
[15:14:42] *** Joins: af (~af@awalgarg.me)
[15:14:55] <ikke> go to the submodule directory and set the configuraiton
[15:15:16] <ikke> Or set it globally, not per repo
[15:16:18] *** Quits: wernerfred (~wernerf@p200300d89f362b00f83e4aec83d828a6.dip0.t-ipconnect.de) (Quit: Client closed)
[15:16:19] <jim87> I've tried to do that, but it seems it's not saving the info separately from the root's .git/config
[15:16:52] <jim87> as per global, I could specify only for a URL right?
[15:17:21] <arash> ikke, no i want to use my editor to push to git, i installed github plugin and added tokens, but the problem is when i try to push using https it asks for login details and then it failed and says "Support for password authentication was removed on August 13, 2021. Please use a personal access token instead."
[15:17:44] <arash> I already connected my github account with tokens in the IDE plugin.
[15:20:18] <jaggz> the token works outside the ide?
[15:20:23] <kenanmarasli> ikke: Alright, so there is an exclude option in pathspec. Thanks.
[15:22:16] <jast> jim87: alternatively you can edit (from the root of the main repo) .git/modules/.../config (substitute the correct path for your submodule, should be easy enough to figure out based on what's there :))
[15:23:13] <jim87> Thanks jast, I'll try that. Is there any way to save it remotely, too, this change, or should I make a script to setup the file accordingly?
[15:23:24] <jast> arash: with https you never use a plain "git@github.com" in the remote name
[15:23:51] <jast> jim87: config changes are never transmitted/applied by git so you'll probably want a script
[15:24:20] <arash> jast, yes. https failed so i try ssh, which one is better?
[15:24:41] *** Quits: af (~af@awalgarg.me) (Ping timeout: 264 seconds)
[15:24:46] <jast> arash: SSH tends to be easier, provided that you have an SSH keypair and a good way of keeping it safe
[15:25:16] <jast> also, unlike github's personal access tokens, they never expire automatically
[15:25:24] *** Joins: computeiro (~Wender@177.25.239.247)
[15:26:00] <arash> jast, do you have any idea why i can't do it via https? everything is setup in ide and plugin but it keep asking for username/password for github account when i use git push
[15:26:04] *** Joins: af (~af@awalgarg.me)
[15:26:13] <jast> well I don't know what your IDE is doing :)
[15:26:47] <jast> if it's a public repo, some less intelligent things may require your github username as part of the https URL (https://yourname@github.com/...)
[15:27:15] <arash> jast, no its a private one, maybe that is a problem?
[15:27:50] <jast> normally that should make it easier. does your IDE/plugin let you configure both the github username and the password (which will be your personal access token created in github)?
[15:28:44] *** Quits: jonosterman (~Rheanna@101.91.197.175) (Remote host closed the connection)
[15:30:00] *** Joins: jonosterman (~Rheanna@101.91.214.30)
[15:30:44] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Remote host closed the connection)
[15:31:57] <arash> jast, yes, i tried that too, but same problem, its says its connected and recognize my github account, but i don't know whats wrong when i want to work with terminal in ide and using git push commands
[15:32:17] <arash> i tried that again, it says "You have been successfully authorized in GitHub. You can close the page.
[15:32:17] <arash> "
[15:33:56] <jast> I'm guessing that "connecting" using OAuth works within the IDE but not its terminal (because that's the git command line which I don't think can benefit from OAuth based authentication)
[15:34:23] <arash> jast, exactly. thank you. that is the problem.
[15:34:40] <jast> so if you want to use the git command line, you have to additionally set it up for that
[15:34:57] <arash> so how can i solve the problem when i want to use terminal? it don't accept my password
[15:35:16] <arash> it open github login popup
[15:35:17] <jast> you need to use your personal access token instead of your github password. is that what you've been doing?
[15:36:03] <arash> how can i do that? there is no option for that. i try "git push -u origin main" and i can only enter my username and password, there is no option for tokens
[15:36:13] <jast> enter the token *instead of* the password
[15:36:19] <jast> into the password field
[15:36:43] <jast> I know it's weird, but that's the way it works with github's HTTPS transport
[15:37:06] *** Joins: wernerf (~wernerf@p200300d89f362b00f83e4aec83d828a6.dip0.t-ipconnect.de)
[15:37:29] <jast> (just to be sure we're talking about the same thing - personal access tokens start with "ghp_" as far as I know)
[15:37:31] *** Joins: goddard (~goddard@user/goddard)
[15:38:16] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[15:39:36] <goddard> i made the mistake of copying files from an ntfs filesystem to an ext4 and git thinks every single file changed
[15:39:46] <goddard> any easy solutions?
[15:39:47] *** Quits: af (~af@awalgarg.me) (Ping timeout: 252 seconds)
[15:40:00] <ikke> depends on what kind of changes
[15:40:13] <ikke> 1) permissions. 2) line endings
[15:40:29] <jast> if it's a file-level copy, probably permissions
[15:40:42] <another|> probably executable bit
[15:40:43] <another|> av
[15:40:45] <ikke> yes
[15:40:46] <goddard> probably both i just diffed one file and old mode 100644 and new mode is 100755
[15:41:08] <jast> yeah, fix the permissions and all of that should be gone :)
[15:41:23] <goddard> can i use git some how to just revert permissions?
[15:41:42] <goddard> its all the files and its like a thousand at least
[15:41:46] <arash> jast, wow, very wired. but it worked. thank you. is there any easier option for doing this?
[15:43:08] <ikke> arash: committing and pushing changes
[15:43:26] <jast> arash: you can configure git to look up your credentials from a plain text file
[15:43:37] <ikke> oh, wrong 'thread'
[15:43:40] <jast> man git-credential-store - check the "examples" section
[15:43:40] <gitinfo> the git-credential-store manpage is available at https://gitirc.eu/git-credential-store.html
[15:44:24] <jast> of course you don't need to type out the URL, that's just for the sake of example
[15:45:09] <arash> jast, thank you.
[15:45:49] *** Joins: keypusher (keypusher@user/keypusher)
[15:46:13] <jast> goddard: much easier to do it on the filesystem level. if you have few or no files that are actually *supposed* to be executable, try this from root of repo (assuming linux or msys or cygwin): find -type f -executable -exec chmod a-x '{}' +
[15:47:41] <jast> if you have too many files that should keep being executable for that to be viable, there is always a way, of course
[15:48:31] <ikke> You could probably use ls-tree to extract the expected mode
[15:48:57] *** Joins: Brumaire (~quassel@37.165.2.61)
[15:49:40] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[15:53:37] <goddard> found the solution
[15:53:42] <goddard> git diff -p -R --no-color \
[15:53:45] <goddard> | grep -E "^(diff|(old|new) mode)" --color=never  \
[15:53:47] <goddard> | git apply
[15:53:48] <goddard> its like magic
[15:54:04] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 265 seconds)
[15:54:28] *** Joins: keypusher (keypusher@user/keypusher)
[15:56:00] *** Quits: Brumaire (~quassel@37.165.2.61) (Ping timeout: 265 seconds)
[15:58:10] <ikke> heh
[15:58:14] <ikke> creative
[15:58:48] *** Joins: Hax0r (~Hax0r@87.101.192.39)
[16:00:17] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 246 seconds)
[16:01:24] *** Quits: Hax0r (~Hax0r@87.101.192.39) (Remote host closed the connection)
[16:02:28] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[16:02:33] *** Joins: Hax0r (~Hax0r@87.101.192.39)
[16:02:38] *** Joins: pncl1 (~Hax0r@87.101.192.39)
[16:08:39] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[16:10:48] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (platinum.libera.chat (Nickname regained by services)))
[16:10:48] *** vinleod is now known as vdamewood
[16:12:09] *** Joins: af (~af@awalgarg.me)
[16:15:23] *** Joins: mindraj (~mindraj@user/mindraj)
[16:18:14] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:18:44] *** Quits: jonosterman (~Rheanna@101.91.214.30) (Remote host closed the connection)
[16:20:11] *** Joins: jimklimov1 (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz)
[16:20:52] *** Joins: jonosterman (~Rheanna@101.91.197.175)
[16:21:05] *** Quits: jimklimov (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz) (Ping timeout: 264 seconds)
[16:23:25] *** Joins: christall (~christall@24.235.90.74)
[16:24:01] *** Joins: jimklimov (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz)
[16:27:05] *** Quits: jimklimov1 (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[16:27:45] <deepy> Having managed to successfully truncate the history in git by just rewriting all commits with bad parents into new commits with good parents I now have two final hurdles left, convince the team to support this and tooling. Not surprisingly gitlab isn't happy about showing a merge request with about 150,000 commits
[16:28:28] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[16:28:57] <ikke> :D
[16:31:24] <ikke> You need to have some kind of switch-over moment where everyone will start using the new history
[16:33:03] <deepy> That's the plan, I've scripted every step to create the new history so that it can be prepared for tomorrow
[16:33:52] <deepy> I'd normally hold published history sacred, but if your 1.1G repo has a >900MB database in it's history it's already profane
[16:35:38] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[16:36:03] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:36:14] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[16:36:54] <deepy> git rebase is not having a good time either
[16:44:08] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 252 seconds)
[16:46:46] *** Joins: snedd (~snedd@86.14.114.137)
[16:46:49] *** Quits: Samian (~Sami@user/samian) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:49:31] *** Joins: dustfinger (~user@d75-159-231-192.abhsia.telus.net)
[16:50:26] *** Quits: xx (~xx@user/xx) (Quit: xx)
[16:51:12] *** Joins: christall (~christall@24.235.90.74)
[16:51:30] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[16:53:17] <dustfinger> I just finished resolving merge conflicts and git status says You are currently editing a commit while rebasing branch 'US791' on 'b186364'. What I would like to happen is for b186364 to be in branch US791. I want to keep US791 without modifying b186364. If I continue the rebase, will I have what I want, or will the changes from US791 be in the branch it is rebasing on to?
[16:54:44] *** Joins: cousteau (~cousteau@37.228.251.99)
[16:55:19] <cousteau> How smart is Git at detecting when a file has changed from CRLF to LF line endings?
[16:55:20] *** Quits: christall (~christall@24.235.90.74) (Remote host closed the connection)
[16:55:47] <ikke> cousteau: detecting in what sense
[16:56:09] <cousteau> Apparently Mr. "core.autocrlf is a useless feature" here messed up what he was committing
[16:56:11] *** Joins: pulse (~pulse@user/pulse)
[16:56:59] *** Joins: christall (~christall@24.235.90.74)
[16:57:07] <cousteau> ikke: understanding that "file went from using CRLF to using LF" should be understood as a single change rather than as "all the lines in the file have changed"
[16:57:25] <ikke> cousteau: git is line orriented
[16:58:01] <cousteau> I know, but I was thinking that maybe it could consider that as an exception somehow
[16:58:50] <cousteau> That way, if branch 1 introduces a change in some lines, and branch 2 introduces the change of CRLF to LF in the whole file, you can merge without conflicts
[17:00:06] <cousteau> It sounds like a feature that CAN be implemented with some effort.  Not sure there are enough use cases that make the effort worth it though
[17:00:09] <mjorgensen> How on earth would that "single change across many lines" even look in a diff?
[17:01:32] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 246 seconds)
[17:01:34] <cousteau> Does git rely on the literal output of diff, or does it use its own thing?
[17:01:41] *** Quits: mindraj (~mindraj@user/mindraj) (Quit: Goodbye, have a great day/evening!)
[17:01:43] <dustfinger> I think rebaseing is not what I want. The system that I am working on defaults to rebase, but I did not realize that. I thught I was doing a git pull. I essentially wanted to pull the changes from b186364 and continue to work on US791. I don't want my change from US791 to advance (for lack of better terminology) b186364. I am guessing I should just abort, but I was hoping ot not have to go through the process of resolving these merge
[17:01:44] <dustfinger> conflicts again.
[17:01:44] *** Quits: af (~af@awalgarg.me) (Ping timeout: 252 seconds)
[17:01:56] <cousteau> (some "smarter diff", let's say)
[17:03:23] *** Quits: alkino_ (~quassel@user/alkino) (Ping timeout: 252 seconds)
[17:03:30] <cousteau> dustfinger: you could save the files you already fixed so that you can just copy-paste them
[17:03:32] <Yruama> cousteau, in my experience, git diff use it's own implementation of diff
[17:03:33] *** Joins: af (~af@awalgarg.me)
[17:03:54] *** Joins: alkino (~quassel@user/alkino)
[17:04:45] *** Joins: yates (~user@fv-nc-f7af8b91e1-234237-1.tingfiber.com)
[17:04:57] <cousteau> Yruama: then it sounds like it could use some sort of "\File uses CRLF line endings" marker or something like that
[17:04:58] <Yruama> for the story, i used git diff once outside a git repo to have a better diff display between two file
[17:05:16] <mjorgensen> Point is, changing line endings can't ever be "just one change" unless your file only has one line.
[17:05:24] <cousteau> Hm, I think I've wanted that sort of thing before
[17:06:30] <cousteau> mjorgensen: unless git diff somehow magically considered it as such, which I guess it could
[17:06:47] <mjorgensen> It shouldn't
[17:07:31] <cousteau> Git already does some magic with CRLF at the config level
[17:08:11] <deepy> I think git dsf handles whitespace differently, but what are you trying to do?
[17:08:12] <cousteau> But it's beginners magic, like first year at Hogwarts type of magic
[17:08:25] <dustfinger> cousteau: Good idea. I also continued the rebase to see what would happen. I find it confusing. It now says that I have x number of commits that have not been pushed to origin/US791 as well as one commit that has not been pulled from US791. Why would I have changes that I have not pulled. US791 was up to date with origin/US791 when I started the rebase.
[17:08:36] *** Quits: jonosterman (~Rheanna@101.91.197.175) (Remote host closed the connection)
[17:09:01] *** Quits: snedd (~snedd@86.14.114.137) (Quit: Leaving)
[17:09:19] <cousteau> deepy: trying to figure out if git will be smart enough to merge a file with line changes with a file that changed the line endings.  I think I've already figured out that the answer is "no".
[17:09:46] <deepy> cousteau: there's plenty of git merge tools that do support it though
[17:10:37] <cousteau> dustfinger: probably because you rewrote history.  Keep in mind it says you didn't pull COMMITS, not changes
[17:10:47] <yates> in this diff, http://paste.debian.net/1212666/, are the "7ec97584554..563d0d8d099" sha256sums (before/after)?
[17:11:13] *** Quits: wernerf (~wernerf@p200300d89f362b00f83e4aec83d828a6.dip0.t-ipconnect.de) (Quit: Client closed)
[17:11:17] <yates> i've read the manpage here but it just says "blobs": https://git-scm.com/docs/git-diff
[17:11:26] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Quit: Leaving)
[17:11:33] *** Joins: jonosterman (~Rheanna@101.91.232.94)
[17:11:47] <yates> section 2 here: https://git-scm.com/docs/git-diff#_generating_patch_text_with_p
[17:11:55] <cousteau> A commit is not a set of changes, even if it makes sense to think of them as that.  A commit is a snapshot of the work tree with some metainfo such as parent commits and the commit message.
[17:12:11] *** Quits: af (~af@awalgarg.me) (Ping timeout: 252 seconds)
[17:12:50] *** Joins: Optimus (~risto@87.227.237.59)
[17:12:56] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:13:23] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[17:15:54] *** Joins: dpflick_ (~dflick@ip70-171-111-165.no.no.cox.net)
[17:15:56] *** Quits: computeiro (~Wender@177.25.239.247) (Remote host closed the connection)
[17:16:55] <cousteau> dustfinger: so basically your history went through one timeline (with a number of commits) and the history in the server went through a different one (with different commits), so maybe now git believes that the timeline in the server is a bunch of commits you haven't pulled
[17:18:00] <yates> anyone?
[17:18:54] <mjorgensen> yates: they're the git hash of the file
[17:19:08] <mjorgensen> which is kind of like a sha1sum but not exactly
[17:19:22] <dustfinger> oh, I thnk I get it. You are right. My local us791 is nolonger part of the history of origin/us791, I am not sure I understand the workflow though. I guess the idea would be that I would now push my local US791 to origin/b186364 and then delete origin/us791? That is not what I wanted though. I want to continue working on US791 and pushing changes to origin/US791. I guess I will reset my branch and be careful not to rebase since that
[17:19:22] <dustfinger> workflow does not seem to be compatible with how I am working.
[17:19:34] <yates> mjorgensen: thanks. how can i compute the git hash of a file?
[17:19:46] <cousteau> yates: those are identifiers for the "objects" you are comparing, which if I'm not mistaken are the "blobs" storing the data of the files (i.e. the internal representation of the file content stored somewhere inside .git/)
[17:19:47] <mjorgensen> git hash-object <file>
[17:20:13] <mjorgensen> this SO answer explains how a git hash is different: https://stackoverflow.com/questions/460297/git-finding-the-sha1-of-an-individual-file-in-the-index/24283352#24283352
[17:21:38] <cousteau> mjorgensen: that's cool
[17:21:39] <yates> mjorgensen: got it, thanks much
[17:21:56] *** Joins: jimklimov1 (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz)
[17:23:29] *** Quits: jimklimov (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz) (Ping timeout: 264 seconds)
[17:23:48] *** Joins: christall (~christall@24.235.90.74)
[17:24:48] <cousteau> So it's just the sha1sum of the file with a very simple "header" consisting of the word "blob", a space, the file size in bytes (decimal representation), a null byte, and the whole content of the file.  Interesting...
[17:26:10] *** Joins: Xenguy (~Xenguy@devuan/developer/Xenguy)
[17:26:20] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:28:05] <yates> cousteau: thanks - i read that in the stackoverflow link mjorgensen provided.
[17:28:37] <cousteau> Yep, I just did too and found it interesting
[17:29:13] <yates> this actually seems kind of stupid. the sha sum would capture the salient information as well
[17:29:32] <yates> at least inconvenient..
[17:31:12] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[17:31:19] <cousteau> I was thinking that, but this is probably because that's the Sha of  the internally stored object
[17:32:17] <cousteau> Which is pretty much a compressed version of a file containing "blob" + size + file content, if I'm not mistaken
[17:34:14] *** Joins: af (~af@awalgarg.me)
[17:34:48] <mjorgensen> And git objects are necessarily blobs. There's also commits, trees, tags, etc.
[17:36:20] <cousteau> So you're not really building that "extended file" only to take the hash, you're building it to store it inside the object database (once compressed), and while you're at it, get the sha1 of the object you'll be storing
[17:37:00] <mjorgensen> Even I'm learning something today!
[17:37:47] *** Quits: Xenguy (~Xenguy@devuan/developer/Xenguy) (Quit: Leaving)
[17:38:05] <cousteau> (also, you probably don't need the size in order to make the sha1 unique, but you probably DO need the "blob" part to tell it apart from commits, trees (directories), etc; since git probably needs to be able to tell those apart)
[17:40:52] *** Quits: Hax0r (~Hax0r@87.101.192.39) (Quit: Leaving)
[17:41:56] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[17:44:24] *** Joins: jsmooth (~quassel@user/rapid16)
[17:44:37] <jsmooth> What does it mean when git says it failed to push some refs?
[17:44:55] <osse> some of the stuff you wanted to push was not pushed
[17:45:08] <jsmooth> How do I fix that
[17:45:16] <osse> branches and tags are different kinds of "refs"
[17:45:29] <jsmooth> I'm just trying to push all
[17:45:47] <jsmooth> I deleted the repo and created it again
[17:46:43] <osse> what else does it say
[17:50:39] <jsmooth> error: src refspec master does not match any
[17:51:54] *** Quits: af (~af@awalgarg.me) (Quit: WeeChat 3.2)
[17:52:30] <osse> that's a weird error. At first I thought you didn't show the whole thing
[17:52:41] <osse> anyway, seems like you don't have a local branch named master
[17:53:06] *** Joins: speckz (~speckz@2600:1700:ce0:bf00:7d1f:dc06:868e:31c2)
[17:53:36] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[17:54:54] *** Joins: xx (~xx@user/xx)
[17:55:39] <jsmooth> Oh okay.
[17:55:45] <jsmooth> I'l try to create a branch locally
[17:55:59] <jsmooth> Or cant I just set this one to be master?
[17:56:40] <osse> sure, git push origin whatever:master
[17:57:04] <osse> maybe you need git push origin whatever:refs/heads/master
[17:59:13] *** Quits: jonosterman (~Rheanna@101.91.232.94) (Remote host closed the connection)
[17:59:58] *** Joins: jonosterman (~Rheanna@101.91.180.110)
[18:00:38] <jsmooth> Hmm. Now Im really confused. I created branch 'master', added all files, and tried pushing to GitHUb https://gist.github.com/longcurve/4ffa9b072b94e677a41381d224a48d9b
[18:00:48] *** Quits: jonosterman (~Rheanna@101.91.180.110) (Remote host closed the connection)
[18:01:41] *** Joins: jonosterman (~Rheanna@101.91.180.110)
[18:01:58] <osse> there is something called master at the remote repo already
[18:02:05] <osse> you're trying to overwrite it
[18:02:12] <osse> if you mean it, use --force
[18:02:54] <mjorgensen> or, fetch what you don't have like it's telling you to, unless you don't need it!
[18:07:42] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[18:09:48] *** Joins: mra90 (~Martin@134.191.221.84)
[18:10:07] <mra90> where the hell is documented submodule SHA commit update?
[18:10:16] <mra90> The one i see under git ls-tree
[18:10:38] <ikke> checkout a different commit in the submodule and stage + commit it
[18:12:07] *** Quits: realies (~realies@user/realies) (Remote host closed the connection)
[18:12:52] *** Joins: realies (~realies@user/realies)
[18:15:30] <mra90> ikke, stage what?
[18:15:39] <mra90> after the checkout no file has changed
[18:16:16] <mra90> aa ok
[18:16:32] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 252 seconds)
[18:16:36] <mra90> I see git noticed submodule change
[18:16:53] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 264 seconds)
[18:17:20] <mra90> Subproject commit has changed, thanks
[18:17:40] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:18:06] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 260 seconds)
[18:18:12] *** Joins: nvmd (~nvmd@user/nvmd)
[18:18:36] *** Quits: pncl1 (~Hax0r@87.101.192.39) (Remote host closed the connection)
[18:19:37] *** Quits: realies (~realies@user/realies) (Quit: ~)
[18:20:16] *** Joins: realies (~realies@user/realies)
[18:22:17] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 264 seconds)
[18:24:33] *** Joins: Orphis (~orphis@adam.orphis.net)
[18:25:32] *** Quits: realies (~realies@user/realies) (Ping timeout: 246 seconds)
[18:27:03] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[18:27:55] *** Quits: jonosterman (~Rheanna@101.91.180.110) (Remote host closed the connection)
[18:27:59] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:28:13] <Orphis> Hi, I'm trying to use the new %(describe) in the log pretty formats, but it seems that it is EXTREMELY slow. Much slower than calling "git describe" manually for each hash in the log on the side. Has anyone experienced this?
[18:28:25] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[18:28:39] *** Joins: jonosterman (~Rheanna@101.91.180.110)
[18:29:04] *** Joins: realies (~realies@user/realies)
[18:34:17] *** Quits: unlaudable (~unlaudabl@155.93.175.230) (Ping timeout: 256 seconds)
[18:34:53] *** Quits: ThomasD13 (~thomasd13@DSL01.212.114.255.148.ip-pool.NEFkom.net) (Ping timeout: 264 seconds)
[18:36:57] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[18:37:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:38:50] *** Joins: thiago (~thiago@2601:1c0:4501:635c:cb5f:74:ab75:32ec)
[18:39:58] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[18:40:20] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Quit: Ping timeout (120 seconds))
[18:40:41] *** Joins: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de)
[18:40:44] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[18:41:10] *** Quits: pupskuchen (~pupskuche@user/pupskuchen) (Ping timeout: 252 seconds)
[18:41:10] *** Quits: cronos (~cronos@user/cronos) (Ping timeout: 252 seconds)
[18:41:43] *** Quits: dskull (~dskull@user/dskull) (Ping timeout: 252 seconds)
[18:41:43] *** Quits: tsdh (~tsdh@j289989.servers.jiffybox.net) (Ping timeout: 252 seconds)
[18:41:43] *** Quits: cmn (~cmn@bast.cmartin.tk) (Ping timeout: 252 seconds)
[18:42:07] *** Joins: dskull (~dskull@user/dskull)
[18:42:08] *** Joins: pupskuchen (~pupskuche@user/pupskuchen)
[18:42:11] *** Joins: cronos (~cronos@user/cronos)
[18:42:40] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[18:43:10] *** Joins: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de)
[18:43:22] *** Quits: xx (~xx@user/xx) (Ping timeout: 252 seconds)
[18:43:22] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 252 seconds)
[18:43:22] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Ping timeout: 252 seconds)
[18:43:50] *** Joins: cmn (~cmn@bast.cmartin.tk)
[18:45:08] <jsmooth> Everytime I use --force it renders the repo where I cannot do anything
[18:45:33] <jsmooth> Ohhh. I let github generate readme and .gitignore, I need to pull those
[18:45:38] <jsmooth> Do I use pull command?
[18:46:26] <jsmooth> It's refusing to merge unrelated histories, whatever that really means
[18:47:06] <ikke> It means that the branch you are trying to merge has nothing in common with the branch you try to merge it into
[18:47:11] <ikke> in most cases, that's not what you want
[18:48:03] *** Joins: subopt (~subopt@2603-8081-2302-459a-fd30-bd83-f3a0-e601.res6.spectrum.com)
[18:48:48] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[18:48:48] *** Quits: jonosterman (~Rheanna@101.91.180.110) (Remote host closed the connection)
[18:49:04] *** Joins: tsdh (~tsdh@j289989.servers.jiffybox.net)
[18:49:05] <mjorgensen> jsmooth: if you let hit auto create stuff you're probably better off deleting what you have locally then cloning the repo.
[18:49:21] <mjorgensen> s/hit/GitHub
[18:51:27] <osse> i'd say they're better off force pushing
[18:51:41] <osse> assuming the histroy tyhey already have locally has history worth keeping
[18:51:42] *** Joins: jonosterman (~Rheanna@101.89.154.192)
[18:52:59] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[18:53:24] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[18:55:24] *** Joins: pulse (~pulse@user/pulse)
[18:57:21] *** Joins: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr)
[18:59:11] *** Quits: jim87 (~quassel@93.55.249.30) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:00:10] *** Quits: ueberall (ueberall_l@user/ueberall) (Remote host closed the connection)
[19:00:33] *** Joins: ueberall (ueberall_l@user/ueberall)
[19:00:38] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 268 seconds)
[19:00:40] *** Joins: dob1_ (~dob1@user/dob1)
[19:01:15] *** Joins: TomyWork (~TomyLobo@p200300e80f06af00c9ca9721dd734f34.dip0.t-ipconnect.de)
[19:01:41] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[19:06:37] *** dob1_ is now known as dob1
[19:07:44] *** Quits: eduardas (~eduardas@93.93.57.5) (Quit: Konversation terminated!)
[19:12:41] *** Quits: durham_ (~durham@2620:10d:c090:400::5:261c) (Read error: Connection reset by peer)
[19:12:42] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:13:38] *** Joins: durham (~durham@2620:10d:c090:400::5:261c)
[19:14:20] *** Joins: malteger (~malteger@user/malteger)
[19:15:41] *** Quits: adlternative (~adl@117.32.216.71) (Ping timeout: 264 seconds)
[19:18:14] *** Quits: llh (~llh@198.48.244.21) (Changing host)
[19:18:14] *** Joins: llh (~llh@user/llh)
[19:18:36] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Quit: jwillikers)
[19:18:56] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[19:19:32] *** Joins: ChmEarl (~chmearl@user/chmearl)
[19:20:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[19:20:20] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[19:20:49] <anddam> I find myself having to do "git checkout -b foo --track origin/foo" in order to create a local branch tracking same-name remote one, did something change in git or is it my config?
[19:20:55] *** Quits: samuelbernardo (~samuelber@nata02.lip.pt) (Read error: Connection reset by peer)
[19:21:46] <mort> Is there a reasonable way to convert an embedded git repo into a submodule?
[19:22:02] <ikke> what's an embedded git repo?
[19:22:17] <mort> when you git add a folder which is itself a git repo
[19:22:36] <mort> it's git's name for it, it says "warning: adding embedded git repository: <directory>"
[19:22:59] <ikke> The only thing that would be missing is a .gitmodules file
[19:23:04] <mort> yeah
[19:23:16] <ikke> not sure if you can then still do git submodule add ..
[19:26:31] *** Quits: kenanmarasli (~kenan@user/kenanmarasli) (Quit: Going home)
[19:26:42] *** Joins: gnoo (~gnoo@user/gnoo)
[19:26:45] *** Quits: gnoo_ (~gnoo@user/gnoo) (Quit: gnoo_)
[19:28:03] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[19:29:29] *** Quits: durham (~durham@2620:10d:c090:400::5:261c) (Ping timeout: 264 seconds)
[19:29:51] <mort> git submodule add says that it's already in the index if it has been added as an embedded repository
[19:30:13] <mort> it's a bit awkward to have to manually remove them from the index and add them as a submodule
[19:35:16] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[19:36:47] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e01c:b460:bea1:244a)
[19:36:47] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e01c:b460:bea1:244a) (Changing host)
[19:36:47] *** Joins: skapata (~Skapata@user/skapata)
[19:38:09] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:38:38] *** Quits: jonosterman (~Rheanna@101.89.154.192) (Remote host closed the connection)
[19:41:34] *** Joins: jonosterman (~Rheanna@101.89.197.243)
[19:42:29] *** Quits: cousteau (~cousteau@37.228.251.99) (Remote host closed the connection)
[19:43:07] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:43:39] *** Quits: tchan (~tchan@c-98-206-141-238.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[19:44:08] *** Joins: tchan (~tchan@c-98-206-141-238.hsd1.il.comcast.net)
[19:45:17] *** Quits: maroloccio (~marolocci@93-142-92-177.adsl.net.t-com.hr) (Quit: WeeChat 3.0)
[19:45:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[19:46:31] *** Joins: daoudr_ (~daoudr@37.19.197.180)
[19:48:50] *** Quits: daoudr (~daoudr@178.197.212.191) (Ping timeout: 246 seconds)
[19:51:36] *** Joins: leroivi (~leroivi@195.200.164.154)
[19:53:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:54:57] <leroivi> Hello there
[19:55:29] *** Joins: gast0n (~g4570n@user/gast0n)
[19:55:52] <mort> hi
[19:58:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[19:58:53] *** Quits: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com) (Ping timeout: 264 seconds)
[19:58:53] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[19:59:13] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[19:59:26] <leroivi> I am under Windows 10 and I wanted to change an option that I checked on the installer, about CR LF terminaison, I wanted to change it to 'as-is' policy. Anyway that's context. I went into the installed software menu of Windows to get the "Modify" button, and it was not enabled. So I search and found what I wanted through "git config" command
[20:00:03] <leroivi> So I was wondering, is it possible to add a modify wizard that update the options like git config command ?
[20:00:37] <leroivi> I didn't get where is the source of the installer
[20:00:38] <tang^> you can modify it with man git-config after the fact
[20:00:38] <gitinfo> the git-config manpage is available at https://gitirc.eu/git-config.html
[20:00:51] <tang^> !crlf
[20:00:51] <gitinfo> To fix problems with line ending on different platforms, check out http://line-endings.gitrecipes.de/. Line ending normalization can be the cause of changed files that appear to not go away.
[20:03:02] <leroivi> Those are useful links thank you
[20:03:52] <leroivi> But I would like nevertheless make the suggestion of a such wizard and see if it's in my range of skills
[20:04:45] <tang^> on the scope of Windows applications, Git is a trivial installation. You could re-install
[20:04:58] <tang^> but let me look
[20:07:37] *** Joins: samuelbernardo (~samuelber@nata02.lip.pt)
[20:07:52] <tang^> probably in here somewhere: https://github.com/git-for-windows
[20:08:38] <tang^> https://github.com/git-for-windows/build-extra mentions Inno Setup so this probably contains the installer
[20:08:42] <tang^> leroivi: ^
[20:08:56] <imMute> tang^: why not link to the installer on the git-scm.org website?
[20:09:10] <tang^> because they asked about modifying the installer
[20:09:55] <imMute> tang^: hmm.. the original question sounded like they wanted to change a setting configured by the installer, not the installer itself.
[20:10:36] <tang^> [09:33:52]  <leroivi> But I would like nevertheless make the suggestion of a such wizard and see if it's in my range of skills <-- this reads like "I would like to make such a change"
[20:11:05] <imMute> yeah, I see that now.
[20:11:05] <leroivi> Great thank you
[20:11:18] * imMute needs caffeine
[20:11:31] <tang^> I get the desire though. You install git-for-windows and realize you wanted to change your answers to the installer wizard, how do you do that?
[20:11:39] *** Joins: iamzero (~iamzero@2a02:2f0f:9109:8d00:719e:a0a5:6129:cf10)
[20:11:46] <leroivi> Yes I actually want to take a peek to the installer itself to see if I can add a wizard that would be a gui to git config
[20:12:38] *** Joins: austin987 (~null@100.42.98.196)
[20:12:40] *** Quits: bytehackr (~Sandipan@43.252.250.120) (Quit: Leaving)
[20:15:27] *** Joins: chronon (~chronon@user/chronon)
[20:17:50] *** Joins: durham (~durham@2620:10d:c090:400::5:3428)
[20:28:47] *** Quits: jonosterman (~Rheanna@101.89.197.243) (Remote host closed the connection)
[20:29:45] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:30:38] *** Joins: jonosterman (~Rheanna@101.91.214.30)
[20:33:50] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:34:27] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:35:59] *** Quits: Dotz0cat (~Dotz0cat@h115.70.29.71.dynamic.ip.windstream.net) (Read error: Connection reset by peer)
[20:38:27] *** Joins: meator (~meator@user/meator)
[20:44:30] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[20:47:20] *** Joins: zebrag (~chris@user/zebrag)
[20:48:53] *** Quits: leroivi (~leroivi@195.200.164.154) (Remote host closed the connection)
[20:49:07] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:49:44] *** Joins: jazzy (~jaziz@2600:380:457b:dc40:5c0f:a321:1cd7:19b9)
[20:52:00] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[20:53:21] *** Joins: jimklimov (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz)
[20:54:00] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[20:55:06] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[20:55:17] *** Quits: jimklimov1 (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz) (Ping timeout: 264 seconds)
[20:58:50] *** Joins: m-atoms (~m-atoms@205.154.255.167)
[21:00:37] *** Joins: daoudr__ (~daoudr@178.197.212.191)
[21:00:44] *** Quits: daoudr_ (~daoudr@37.19.197.180) (Read error: Connection reset by peer)
[21:01:39] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[21:07:30] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[21:07:53] *** Quits: jazzy (~jaziz@2600:380:457b:dc40:5c0f:a321:1cd7:19b9) (Ping timeout: 264 seconds)
[21:08:41] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[21:11:39] *** Joins: jazzy (~jaziz@2600:380:476c:a7ad:7dff:c969:60da:33bf)
[21:13:17] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[21:15:06] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[21:15:26] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[21:15:56] <ash_worksi> is there a way to `git diff` 2 commits EXCEPT some files?
[21:18:35] *** Quits: jonosterman (~Rheanna@101.91.214.30) (Remote host closed the connection)
[21:18:36] *** Quits: durham (~durham@2620:10d:c090:400::5:3428) (Read error: Connection reset by peer)
[21:18:52] *** Joins: durham (~durham@2620:10d:c090:400::5:3428)
[21:19:59] *** Joins: jonosterman (~Rheanna@101.89.207.55)
[21:20:02] *** Quits: rsx (~dummy@ppp-188-174-150-47.dynamic.mnet-online.de) (Quit: rsx)
[21:20:19] <ikke> ash_worksi: see negative pathspecs in man gitglossary
[21:20:20] <gitinfo> ash_worksi: the gitglossary manpage is available at https://gitirc.eu/gitglossary.html
[21:21:00] *** Quits: on^ (~on@12.203.127.82) (Remote host closed the connection)
[21:21:21] *** Joins: durham_ (~durham@2600:1700:38d4:60:c3c:5bfc:8cac:a0ac)
[21:21:23] <ash_worksi> ikke: I was just looking at the manpage just now; should `git diff commit1..commit2 -- ':(exclude)path/to/file'` work?
[21:23:23] *** Joins: durham__ (~durham@2620:10d:c090:400::5:d454)
[21:24:02] *** Quits: durham (~durham@2620:10d:c090:400::5:3428) (Ping timeout: 246 seconds)
[21:24:17] <ash_worksi> I am getting "nothing to exclude from"
[21:24:50] <ash_worksi> or actually, when I change it to `:(exclude)./path/to/file` there is no diff
[21:26:29] *** Quits: durham_ (~durham@2600:1700:38d4:60:c3c:5bfc:8cac:a0ac) (Ping timeout: 246 seconds)
[21:26:31] *** Joins: jimklimov1 (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz)
[21:27:12] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[21:28:22] *** Quits: jimklimov (~jimklimov@ip-86-49-255-178.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[21:28:24] <ash_worksi> gr, weird that it works when I don't use the magic signature
[21:28:31] <ash_worksi> I mean, it shows just that one file
[21:28:56] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Quit: jwillikers)
[21:29:16] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[21:33:39] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[21:36:21] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[21:36:47] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[21:40:08] *** Joins: hornhack (~hackingho@user/hackinghorn)
[21:42:35] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 246 seconds)
[21:45:39] *** Quits: daoudr__ (~daoudr@178.197.212.191) (Remote host closed the connection)
[21:45:46] *** Quits: sarab (~sarab@183.87.60.236) (Ping timeout: 260 seconds)
[21:47:28] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[21:50:32] *** Quits: speckz (~speckz@2600:1700:ce0:bf00:7d1f:dc06:868e:31c2) (Quit: Textual IRC Client: www.textualapp.com)
[21:53:13] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[21:55:32] *** Quits: jazzy (~jaziz@2600:380:476c:a7ad:7dff:c969:60da:33bf) (Ping timeout: 246 seconds)
[22:01:59] *** Quits: Guest17 (~Guest17@c-69-255-2-251.hsd1.md.comcast.net) (Quit: Client closed)
[22:02:08] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[22:03:08] *** Quits: TomyWork (~TomyLobo@p200300e80f06af00c9ca9721dd734f34.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:04:40] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 252 seconds)
[22:04:44] *** kenanmarasli_ is now known as kenanmarasli
[22:06:02] *** Quits: Mo (~Mo@dynamic-077-008-161-253.77.8.pool.telefonica.de) (Ping timeout: 246 seconds)
[22:06:24] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:11:59] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:12:12] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:13:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:13:23] *** Joins: lpapp_ (~lpapp@90.242.131.156)
[22:13:37] <lpapp_> hi, is there a flag for git worktree remove to also remove the branch locally?
[22:14:25] *** Joins: jazzy (~jaziz@2600:380:8660:f034:4864:d7e1:2938:69b7)
[22:15:18] <ikke> lpapp_: if man git worktree does not mention it, then no ;-)
[22:15:18] <gitinfo> lpapp_: the git-worktree manpage is available at https://gitirc.eu/git-worktree.html
[22:15:26] <ikke> And I suspect there is not
[22:16:41] <lpapp_> shame, this could be helpful.
[22:16:44] <lpapp_> little convenience.
[22:16:48] <lpapp_> thanks!
[22:19:54] *** Quits: christall (~christall@24.235.90.74) (Remote host closed the connection)
[22:21:55] <lpapp_> why is a git stash pop conflict not resolvable via the usual --abort means rather than git reset --merge? Like git stash pop --abort or something.
[22:22:18] *** Joins: dsrt^ (~dsrt@12.203.127.82)
[22:22:19] <lpapp_> not resolvable = not abortable, sorry.
[22:22:38] <lpapp_> Normally, you can do git rebase --abort, git cherry-pick --abort, git am --abort, etc.
[22:22:40] <ikke> Probably because no one bother to implement it
[22:22:49] <ikke> These conflicts are not recorded as actual conflicts
[22:23:23] <lpapp_> why not?
[22:23:32] <ikke> No idea exactly why
[22:23:34] <ikke> Just know that it is
[22:23:50] <lpapp_> so, git reset --merge works with non-recorded?
[22:24:08] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Sleeping...)
[22:24:16] *** Quits: gnoo (~gnoo@user/gnoo) (Quit: gnoo)
[22:24:59] <ikke> It's a general command
[22:25:47] *** Joins: eck (~root@user/eck)
[22:26:24] <eck> how do i figure out which version of the git wire protocol i'm using? when i push from my laptop to my server i always get a harmless (but annoying) warning message "warning: --negotiate-only requires protocol v2" and i'm trying to figure out why
[22:26:26] <lpapp_> it would abort any conflict, like git cherry-pick, git am, git rebase, etc, with the same command?
[22:27:12] <ikke> lpapp_: to be honest, I have not that much experience with git reset --merge
[22:28:25] <ikke> eck: combination of protocol.version local config and what the server supports
[22:29:42] <eck> "git config protocol.version" reports nothing and the server is running git 2.30.2 so i don't see why it wouldn't be using protocol version 2
[22:30:53] <ikke> and your local version?
[22:31:09] <ikke> version was enabled, then disabled for a bit due to a bug, and later enabled again
[22:31:13] <ikke> version 2*
[22:31:35] *** Joins: Brumaire (~quassel@81-64-14-121.rev.numericable.fr)
[22:31:51] <eck> local version is 2.33.0
[22:31:59] <ikke> ok, that should support v2
[22:33:29] <ikke> ok, v2 became default again in 2.29.0
[22:34:24] <ikke> first set to default in 2.26.0, then demoted again in 2.27.0
[22:34:32] <ikke> So not sure why v2 would not be used
[22:34:43] *** Quits: randm (~randm@user/randm) (Quit: Leaving.)
[22:35:07] <lpapp_> ok, thanks.
[22:35:17] *** Joins: computeiro (~Wender@177.25.226.151)
[22:36:17] *** Joins: randm (~randm@user/randm)
[22:39:05] *** Quits: durham__ (~durham@2620:10d:c090:400::5:d454) (Ping timeout: 264 seconds)
[22:39:35] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[22:41:13] *** Joins: durham (~durham@163.114.132.4)
[22:45:06] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:46:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:48:44] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[22:48:44] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[22:49:05] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:49:11] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[22:49:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:49:35] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[22:50:12] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[22:50:21] *** Joins: christall (~christall@24.235.90.74)
[22:58:43] *** Quits: jonosterman (~Rheanna@101.89.207.55) (Remote host closed the connection)
[23:02:00] *** Joins: jonosterman (~Rheanna@218.78.77.129)
[23:02:22] *** Joins: Guest17 (~Guest17@c-69-255-2-251.hsd1.md.comcast.net)
[23:03:47] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 246 seconds)
[23:07:44] <lantech19446> I don't understand correctly what this command is telling me to do it pertains to setting up tracking information for my repo I ran git branch --set-upstream-to=myrepo/origin master but it tells me that the repo doesn't exist as typed
[23:08:26] <ikke> do you have a remote called myrepo?
[23:08:38] <ikke> myrepo/origin sounds confused
[23:09:17] <lantech19446> my remote is https://github.com/jherman19446/jonssite I typed that with /origin on the end of it
[23:09:35] <ikke> lantech19446: what does git remote return?
[23:09:56] <lantech19446> nothing
[23:10:35] <ikke> ok, so you are starting with a new repo?
[23:11:14] *** Joins: teut (~teut@122.162.88.202)
[23:11:36] <lantech19446> no I've just been typing git pull https://github.com/jherman19446/jonssite every time but I found out that if i get this right i can just type git pull and it'll do it
[23:11:38] *** Joins: ZacSharp (~ZacSharp@user/zacsharp)
[23:12:18] <ikke> lantech19446: ok, then start with: git remote add origin https://github.com/jherman19446/jonssite
[23:12:48] <lantech19446> ok done
[23:13:06] <ikke> ok, next step: git fetch origin
[23:13:13] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[23:13:29] <lantech19446> ok that worked
[23:13:41] <ikke> then: git branch --set-upstream-to=origin/master master
[23:14:18] <lantech19446> origin/master does not exist
[23:14:31] <lantech19446> it looks like it should be origin/main
[23:14:48] <ikke> ah
[23:14:51] <ikke> then that
[23:15:07] <lantech19446> yay that worked
[23:15:41] <lantech19446> and now git pull worked :)
[23:16:37] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[23:16:39] *** Joins: Samian (~Sami@user/samian)
[23:16:49] <lantech19446> thanks ikke big help
[23:16:55] <ikke> lantech19446: no problem
[23:17:16] <ikke> it's quite interesting, because most people don't even know you can refer to repositories directly by url
[23:18:17] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[23:18:48] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[23:20:14] *** Joins: Trieste_ (T@user/pilgrim)
[23:20:30] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 260 seconds)
[23:24:05] *** Quits: jazzy (~jaziz@2600:380:8660:f034:4864:d7e1:2938:69b7) (Ping timeout: 246 seconds)
[23:26:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:26:32] <lantech19446> really? Github has you do it when you setup the repo lol
[23:27:14] <lantech19446> my boss has been coding webpages for 20yrs I just taught him how to use git lol
[23:30:13] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[23:30:13] *** Trieste_ is now known as Trieste
[23:32:05] *** Joins: christall (~christall@24.235.90.74)
[23:32:12] *** Joins: goldfish (~goldfish@user/goldfish)
[23:33:00] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:39:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:46:25] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 252 seconds)
[23:46:53] *** Quits: lpapp_ (~lpapp@90.242.131.156) (Ping timeout: 264 seconds)
[23:47:00] *** Joins: snedd (~snedd@86.14.114.137)
[23:47:16] *** Joins: sarab (~sarab@183.87.60.236)
[23:50:38] *** Quits: rtjure__ (~rtjure@bras-79-132-23-90.comnet.bg) (Ping timeout: 265 seconds)
[23:56:35] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:00:37] *** Parts: teut (~teut@122.162.88.202) ()
[23:02:06] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:02:43] *** Quits: sarab (~sarab@183.87.60.236) (Ping timeout: 265 seconds)
[23:05:29] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 264 seconds)
[23:07:16] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[23:07:34] *** Joins: sarab (~sarab@183.87.60.236)
[23:07:35] *** Quits: tsdh (~tsdh@j289989.servers.jiffybox.net) (Quit: Goodbye)
[23:07:38] *** Joins: junktext (~junktext@109.201.152.164)
[23:09:19] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[23:12:47] *** Quits: batrick (batrick@2600:3c00::f03c:91ff:fe96:477b) (Quit: WeeChat 3.2)
[23:16:55] *** Quits: iamzero (~iamzero@2a02:2f0f:9109:8d00:719e:a0a5:6129:cf10) (Read error: Connection reset by peer)
[23:17:01] *** Joins: christall (~christall@24.235.90.74)
[23:18:23] *** Joins: skapata (~Skapata@user/skapata)
[23:19:42] *** Joins: lpapp_ (~lpapp@90.242.131.156)
[23:20:35] *** Joins: batrick (batrick@2600:3c00::f03c:91ff:fe96:477b)
[23:22:33] *** Joins: tsdh (~tsdh@j289989.servers.jiffybox.net)
[23:24:16] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Quit: jwillikers)
[23:24:36] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[23:26:29] *** Quits: lpapp_ (~lpapp@90.242.131.156) (Ping timeout: 264 seconds)
[23:29:14] *** Quits: guardian (~guardian@planet-d.net) (Quit: Coyote finally caught me)
[23:29:37] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Quit: jwillikers)
[23:29:53] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:29:57] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[23:30:41] *** Quits: christall (~christall@24.235.90.74) (Ping timeout: 264 seconds)
[23:33:27] *** Joins: xx (~xx@user/xx)
[23:33:41] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 264 seconds)
[23:34:10] *** Quits: Oblomov (~tex_vim@user/oblomov) (Quit: I'm never quite so stupid as when I'm being smart (Linus van Pel))
[23:34:33] *** Joins: christall (~christall@24.235.90.74)
[23:34:43] *** Joins: Betal (~Betal@user/betal)
[23:35:20] *** Joins: Oblomov (~tex_vim@user/oblomov)
[23:37:15] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:37:30] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[23:38:30] *** Joins: llh (~llh@user/llh)
[23:38:37] *** Quits: jonosterman (~Rheanna@218.78.77.129) (Remote host closed the connection)
[23:40:16] *** Joins: jonosterman (~Rheanna@101.91.214.30)
[23:45:18] *** Quits: Albright (~Albright@149.28.13.173) (Quit: ZNC 1.8.2 - https://znc.in)
[23:46:21] *** Joins: squirrel (~sq@141.51-107-213.static.virginmediabusiness.co.uk)
[23:49:41] *** Joins: lpapp_ (~lpapp@90.242.131.156)
[23:50:23] <anddam> can I revert only part of a file from CLI?
[23:51:29] <ikke> you can pass --no-commit and then undo the parts you do not want to revert
[23:54:30] <anddam> "undo the parts"?
[23:54:37] <anddam> maybe I'll stash first, then apply
[23:54:40] <anddam> and then try this
[23:56:06] *** Joins: alzgh (~alzgh@user/alzgh)
[23:57:16] *** Quits: Oblomov (~tex_vim@user/oblomov) (Quit: I'm never quite so stupid as when I'm being smart (Linus van Pel))
[23:57:45] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:f02b:e56b:4df5:94e2)
[23:57:50] *** Joins: Oblomov (~tex_vim@user/oblomov)
[23:58:47] *** Quits: dpflick_ (~dflick@ip70-171-111-165.no.no.cox.net) (Ping timeout: 265 seconds)
[23:58:58] <anddam> ikke: I cannot find what command accepts --no-commit
[23:59:00] <j416> checkout -p HEAD^ -- file
[23:59:10] <j416> anddam: git revert accepts --no-commit
[23:59:12] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:59:30] <anddam> j416: oh I was trying restore, as git status suggests
