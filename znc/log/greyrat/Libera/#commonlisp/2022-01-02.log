[00:05:38] *** Joins: cosimone (~user@93-34-132-88.ip49.fastwebnet.it)
[00:19:56] <etimmons> I now have cl-tar able to create archives while preserving a lot of metadata and links (both hard and sym). On both Windows and non-Windows platforms! ðŸŽ‰
[00:20:22] <etimmons> Now to clean it up a bit and open a PR for osicat...
[00:23:48] *** Quits: amb007 (~a_bakic@94.104.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:24:01] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:27:37] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[00:30:16] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:32:55] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:33:12] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[00:36:29] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:55:36] *** Joins: kevingal_ (~quassel@80.233.61.208)
[00:55:42] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:85ca:129c:de7a:29e4) (Ping timeout: 268 seconds)
[01:00:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:04:08] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[01:04:23] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[01:19:35] <jmercouris> can anyone think of why I shouldn't shadow cl:defpackage with uiop:defpackage?
[01:20:29] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[01:21:21] <White_Flame> you mean uiop:define-package?
[01:21:34] <pjb> jmercouris: you may want your code to use a 100% conforming defpackage macro.
[01:22:05] <pjb> So, relying on a specific implementation even if it comes from a library such as uiop, may restrict your portability.
[01:22:18] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[01:23:16] <pjb> jmercouris: otherwise, no problem.  The question is rather, should you write defpackage or cl:defpackage in your source files?
[01:24:28] <pjb> jmercouris: or perhaps: (in-package :cl-user) (defpackage â€¦)   or   (cl:in-package :cl-user) (defpackage â€¦)   ?
[01:25:17] <pjb> jmercouris: there are semantic differences.  Sometimes, you'd want to qualify in-package and defpackage, because if you reload the file in a package that doesn't use CL, it wouldn't work.
[01:25:57] <pjb> jmercouris: but in the end, I think that it's better to deal with such problems manually, and use non-qualified symbols.  Since this allows you to import uiop:defpackage instead of cl:defpackage.
[01:25:57] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[01:26:07] <pjb> jmercouris: cf. Image Based Development http://www.informatimago.com/develop/lisp/com/informatimago/small-cl-pgms/ibcl/index.html
[01:26:43] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[01:39:29] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 268 seconds)
[01:45:09] *** Joins: Oladon (~olad@98.43.81.226)
[01:57:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[02:02:57] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[02:05:35] *** Joins: miique (~miique@181.46.139.166)
[02:08:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[02:12:10] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 268 seconds)
[02:25:24] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[02:32:37] *** Quits: kevingal_ (~quassel@80.233.61.208) (Ping timeout: 240 seconds)
[02:33:16] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:85ca:129c:de7a:29e4)
[02:40:07] *** Quits: pve (~pve@188-67-196-180.bb.dnainternet.fi) (Quit: leaving)
[02:45:20] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:85ca:129c:de7a:29e4) (Remote host closed the connection)
[02:52:19] <jmercouris> An interesting thought about CL package
[02:52:25] <jmercouris> I am used to just :use
[02:52:32] <jmercouris> For it, but perhaps this is not the way
[02:54:51] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[02:57:31] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[03:09:46] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 260 seconds)
[03:19:47] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[03:30:50] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[03:33:57] *** Quits: cosimone (~user@93-34-132-88.ip49.fastwebnet.it) (Ping timeout: 256 seconds)
[03:36:51] <pjb> jmercouris: it's just that some packages don't use CL. They may use nothing, or use something else.
[03:59:32] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8554:afc8:ad1a:43cc) (Ping timeout: 240 seconds)
[04:02:59] *** Joins: igemnace (~ian@user/igemnace)
[04:04:48] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:37:24] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:39:04] *** Joins: Everything (~Everythin@37.115.210.35)
[04:42:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:46:08] *** Joins: biog (~user1@159.224.42.85)
[04:55:08] *** Joins: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[04:55:39] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 250 seconds)
[05:14:56] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:16:27] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[05:18:20] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[05:23:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:26:01] *** Joins: Alfr (~Alfr@user/alfr)
[05:38:25] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[05:47:28] *** Joins: eddof13 (~textual@2600:4040:4029:5000:3ca8:538a:9008:8d39)
[05:50:12] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzzâ€¦)
[05:53:31] *** Quits: eddof13 (~textual@2600:4040:4029:5000:3ca8:538a:9008:8d39) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:00:17] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Read error: Connection reset by peer)
[06:02:41] *** Quits: jpl01 (~user@2001:16b8:4978:a700:4c0b:6685:e13e:e505) (Remote host closed the connection)
[06:11:18] *** Quits: jstoddard (~user@2600:8801:a400:5a00::d33e) (Quit: ERC (IRC client for Emacs 27.1))
[06:29:25] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Ping timeout: 240 seconds)
[06:29:25] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 240 seconds)
[06:29:25] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: linjian (~linj@user/linj) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Ping timeout: 240 seconds)
[06:33:42] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[06:36:31] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[06:38:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[06:42:28] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[06:43:57] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[06:44:56] *** Joins: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073)
[06:44:58] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[06:45:44] *** Joins: linjian (~linj@user/linj)
[06:47:19] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[06:49:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[06:51:28] *** Joins: aeth (~aeth@user/aeth)
[07:05:47] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[07:06:45] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 250 seconds)
[07:06:50] *** Joins: hobo_ (~hobo@69.218.33.204)
[07:08:25] *** Joins: jstoddard (~user@2600:8801:a400:5a00::d33e)
[07:21:03] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[07:30:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:30:53] <beach> Good morning everyone!
[07:40:44] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:44:37] *** Quits: semz (~none@user/semz) (Ping timeout: 240 seconds)
[07:49:09] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[07:50:15] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[07:50:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:50:39] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[07:56:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:57:36] *** Joins: semz (~none@user/semz)
[07:59:57] *** Joins: igemnace (~ian@user/igemnace)
[08:23:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:27:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:38:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:40:23] *** Joins: Oladon (~olad@98.43.81.226)
[08:59:16] <lisp123> Are there any libraries for working with "versioned" hash tables? I.e. being able to retrieve a version of a given hash table at a particular point in time / point in the program cycle. I have an idea on how to do this, but just checking in case it already exists (preliminary online search suggests no)
[08:59:55] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (#commonlisp)
[09:01:30] <White_Flame> the term would be "persistent" hash table, usually a pure functional data structure
[09:02:18] <White_Flame> I implemented my own from okasaki's book, not sure about libs, but those are the terms to look for
[09:02:48] <White_Flame> either that, or logging adds/removes/replaces
[09:04:30] <lisp123> White_Flame: Thanks! I will have a look at that book. I was thinking of logging adds/removes/replaces within the hash values itself (e.g. keep a list of values, each value being a cons cell with the car reflecting the version number)
[09:07:45] <lisp123> https://common-lisp.net/project/fset/ seems to be the most popular library, but will need to review how it works
[09:16:24] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[09:22:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:35:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:40:06] <Alfr> lisp123, cl-hamt may also be interesting.
[09:42:38] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:43:44] *** Joins: shka (~herr@109.231.0.226)
[09:45:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:48:39] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[09:58:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:04:27] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[10:04:38] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Quit: ERC (IRC client for Emacs 27.1))
[10:09:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[10:12:05] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:25:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:25:31] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[10:26:15] <lisp123> Alfr: Thanks for that, it is very interesting as background reading.
[10:47:21] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[10:56:18] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[10:58:12] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[10:58:59] *** Joins: igemnace (~ian@user/igemnace)
[11:05:05] *** Joins: hexology (~hexology@user/hexology)
[11:09:45] <jmercouris> lisp123: what you are describing is frequently a strategy for hash collisions
[11:10:24] <beach> minion: memo for nij-: I was asleep when you tried to contact me by private message.  I thought it better to answer you in #climacs so as to involve others that might be interested.  You can check the logs on tymoon.eu for the #climacs channel to catch up.
[11:10:29] <minion> Remembered. I'll tell nij- when he/she/it next speaks.
[11:19:31] <lisp123> jmercouris: Not really in this case, its like a normal hash table but instead of storing one copy of the datum, store it as a list with versioning appended
[11:19:57] <lisp123> Seems simple enough and quite useful, I can send you a copy later if you want to use it
[11:29:16] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[11:33:10] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[11:37:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:43:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:55:04] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[11:55:42] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:95fe:89a9:e964:2e47)
[12:19:18] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[12:20:18] <nij-> Has anyone tried to write an elisp->CL compiler in CL before? It seems to be a taunting project, but is it really that hard? What are some known obstacles?
[12:20:19] *** Joins: parjanya (~esb@2804:14c:1ad:8b70::1000)
[12:20:19] <minion> nij-, memo from beach: I was asleep when you tried to contact me by private message.  I thought it better to answer you in #climacs so as to involve others that might be interested.  You can check the logs on tymoon.eu for the #climacs channel to catch up.
[12:20:46] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0)
[12:20:58] <nij-> Oh this message is exactly what I'd like to see. /join #climacs
[12:31:40] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:39:57] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:51:42] *** Joins: pve (~pve@37-136-220-98.rev.dnainternet.fi)
[13:06:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:06:52] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:4c5f:8481:8a08:53c3)
[13:07:42] <phoe> nij-: I think the language itself is simple enough, it's reimplementing the emacs APIs and intrinsics is the troublesome aspect
[13:10:02] *** Quits: ns12 (~ns12@user/ns12) (Ping timeout: 240 seconds)
[13:11:05] <nij-> What are its APIs and intrinsics?
[13:11:24] <phoe> everything that you cannot implement in elisp itself
[13:13:47] <nij-> Except for the elisp evaluator written in C, and some data type written in C for performance's sake, are there other APIs and intrinsics?
[13:15:19] <phoe> also the buffer logic and lots of character handling and text editing stuff
[13:15:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:17:30] *** Joins: treflip (~user@user/treflip)
[13:17:39] <nij-> Naive guess (is it true)? - With CLOS, it will be much easier to implement those than C.
[13:21:52] <phoe> depends on your definition of "easier"
[13:22:14] <phoe> easier, yes, because it's possible and feasible to write high-performance CL nowadays
[13:22:40] <phoe> easier, no, because it would have already been done if it was easy
[13:23:00] <phoe> it's a hard question to answer definitively
[13:27:29] <moon-child> phoe: I would say, rather, everything that _is_ not implemented in elisp itself
[13:28:12] <phoe> moon-child: uh, isn't that what I said?
[13:28:29] <moon-child> 'everything that you cannot implement in elisp itself'
[13:28:42] <phoe> oh, I see what you mean
[13:28:45] <phoe> yes, correct
[13:29:05] <phoe> closer to reality :D
[13:29:24] <moon-child> :)
[13:30:13] <madnificent> With gccemacs, the gain would also be lower than what it used to be a few years ago.
[13:31:23] <moon-child> I think the idea is to be able to have an editor programmable in cl, not to improve performance
[13:31:42] <phoe> then just keep on hacking at climacs
[13:32:11] <moon-child> then you lose compat with the existing base of elisp code
[13:32:58] <madnificent> For Emacs, there's a common lisp library that gives you some of the abstractions.  I would very much appload Emacs on a Common Lisp backend but I do think it's quite the endeavor.
[13:33:27] <madnificent> You could estimate the amount of work by looking at what is defined in the C code.  That's roughly the space that would need a new implementation.
[13:33:54] <moon-child> that lets you write some cl-ish code in emacs, but it is not sufficient to run any of the existing base of code written in cl
[13:34:07] <moon-child> see https://github.com/larsbrinkhoff/emacs-cl though
[13:34:08] <madnificent> moon-child: yeah, I fully agree
[13:34:59] <phoe> moon-child: then the idea is not to have an editor programmable in CL, it is to have emacs programmable in CL
[13:35:01] <madnificent> moon-child: Perhaps also see if you can pick up where others have left off.  I have certainly seen this topic pop up multiple times over the years.
[13:35:39] <moon-child> madnificent: this is nij-'s project, not mine
[13:36:23] * madnificent didn't even know those people were still around o7
[13:37:35] <madnificent> moon-child: Perhaps it could be an option to build an FFI bridge to Common Lisp?  Maybe also not what you're looking for but it may be less work and could have more buy-in with the Emacs crowd.
[13:38:06] <nij-> moon-child: Too early to say that it's my project. I'm still speculating.
[13:39:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[13:39:52] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:39:53] <moon-child> nij-: well, it is more yours than mine at any rate :)
[13:40:08] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[13:40:21] <moon-child> I will live too few years to spend them writing implementations of emacs, elisp, or common lisp
[13:45:29] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[13:45:44] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[13:46:20] <nij-> madnificent: there are around 450k lines of *.c/*.h codes. Dang.
[13:46:57] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[13:47:17] <mfiano> So only about 4500 converted to lisp :P
[13:47:55] <madnificent> You still have to read them, mfiano :P
[13:48:00] <madnificent> Emacs is huge
[13:48:27] <White_Flame> eight megabytes and constantly swapping
[13:49:24] <White_Flame> but yeah, porting from C to CL generally ends up with rearchitecting it anyway
[13:49:36] <madnificent> White_Flame: I'm running 8000 emacs instances to increase my personal productivity now and it is indeed swapping.  How terrible is this XD
[13:49:58] <madnificent> White_Flame: which would bring us at climacs again ^_^
[13:50:14] <nij-> mfiano: "converted to lisp"..? What do you mean?
[13:50:23] <madnificent> However, what if climacs could evaluate Elisp code minus the large base library.  Could it be that we can gradually extend it?
[13:50:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[13:51:33] <nij-> Yeah, I think that's nice. Perhaps many lines of C codes are not necessary for the goal - for climacs to be able to evaluate elisp.
[13:51:52] <madnificent> It could become infuriating to open your org-agenda and get something like "function swap-bytes is not converted to elisp-climacs yet.  docstring is "thingemetac" please implement.  But it could at least give us steps forward.
[13:52:17] *** Quits: kotshie_ (~kotshie@68.72.208.140) (Ping timeout: 240 seconds)
[13:53:00] <phoe> White_Flame: and rearchitecting it means that you are no longer compatible with emacs abstractions
[13:53:11] <phoe> which also means that you end up being incompatible with emacs APIs that elisp code uses
[13:53:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:53:34] <madnificent> phoe: I went from there to implementing things in Climacs.  Perhaps I should added steps in between.
[13:55:00] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[13:56:07] *** Joins: ns12 (~ns12@user/ns12)
[13:59:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:59:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:05:29] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:11:54] <madnificent> Fun annecdote: I converted some Elixir code to Common Lisp code to wrap my head around a different parsing strategy.  The new code is 100000 faster.  Still afraid of GC further down the road, but this clearly shows that a better algorithm greatly overshadows the speed of the language itself (I hope, at least CL made this more feasible for my tiny brain)
[14:15:10] <phoe> elixir is a managed language too though
[14:15:25] <phoe> all of BEAM languages are garbage-collected, even if their GC techniques are different
[14:16:59] <madnificent> Yes, but the GC is not that awesome.  Much of how GC is handled is by short-lived processes (in their nomenclature) and throwing away memory of the short-lived processes when it's disbanded.  Some of it is by scoping the GC to that process.  I don't think we have such a thing in Common Lisp.
[14:17:33] <moon-child> abcl has good gc ... but crap overall performance :)
[14:17:34] <phoe> that technique is impossible to do in Lisp in the general case because of omnipresent mutability
[14:17:57] <moon-child> (actually, I hear allegro has a pretty decent gc, maybe)
[14:17:59] <moon-child> phoe: barriers go brr
[14:18:05] <madnificent> It is also far worse because it is a 'pure' language and because sending data between threads requires serialization/deserialization.  For some of the query expansions we process, that's a bit of an issue.
[14:18:59] <madnificent> We can declare variables dynamic extent in lisp and that might maybe give us something similar.  But I'm not sure this will be a problem here.  I just don't know.  And I don't know of good ways to find out either.
[14:19:56] <madnificent> The profiles will be wildly different as the pure Elixir runtime creates a ton of objects to GC when mutating parts of them.  That will not be the case in CL.  But on the other hand, it has it easier on the GC because it can scope.  So Â¯\_(ãƒ„)_/Â¯
[14:20:45] <moon-child> dynamic extent is different.  That lets you do stack allocation, but does nothing for objects with non-lifo lifetimes
[14:21:22] <madnificent> I know.  I might be able to alleviate pressure that way.  But it's not something formed in my head yet.
[14:25:04] *** Joins: igemnace (~ian@user/igemnace)
[14:27:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:30:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:37:08] *** Joins: biog (~user1@159.224.42.85)
[14:38:06] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:38:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:47:34] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[14:51:45] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:06:01] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[15:15:02] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:4c5f:8481:8a08:53c3) (Ping timeout: 240 seconds)
[15:16:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:21:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[15:33:12] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzzâ€¦)
[15:40:07] *** Joins: McParen (~McParen@user/mcparen)
[15:46:04] <theothornhill> What is a classoid in the context of sbcl?  I see it referenced many places, but internet only spits out cryptocurrency nonsense as the answer :)
[15:47:07] *** Joins: biog (~user1@159.224.42.85)
[15:50:38] *** Joins: nature (~nature@45.32.235.173)
[15:54:22] <moon-child> theothornhill: may have better luck in #sbcl
[15:55:08] <theothornhill> Thanks :)
[16:05:45] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[16:08:22] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[16:11:11] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[16:13:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:16:06] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:22:09] <theothornhill> In the AMOP they create a couple of functions on the form: (defun foo (x) (pprint x) (values)).  Why do they supply the last (values), when 'pprint itself clearly returns no values already? It seems (defun foo (x) (pprint x)) would yield exactly the same behavior?
[16:24:04] <Shinmera> pprint returns the value passed. They want to be explicit that their function returns nothing at all and is only used for side-effect.
[16:24:13] <Shinmera> It is a style that I personally am not fond of, but clearly some people are.
[16:24:40] <theothornhill> The spec is clear in that pprint should return no values, as far as I can tell, isn't it?
[16:24:48] <pjb> pprint => <no value> says clhs
[16:24:50] <theothornhill> "pprint object &optional output-stream => <no values>"
[16:24:53] <Shinmera> Oh, whoops I misread. Indeed you are right.
[16:24:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:25:00] <Shinmera> No idea then! :)
[16:25:00] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[16:25:13] <pjb> theothornhill: it's easier to write (values) than to check the hyperspec.
[16:25:20] <theothornhill> Hah!
[16:25:22] <pjb> Notably when you don't have it on-line.
[16:25:56] <Shinmera> AMOP was released 1991, before Ansi CL was completed in 1994.
[16:26:01] <theothornhill> Well, it's a strange oversight, considering that the code in general is very well made, _and_ they talk about that idiom in particular
[16:26:04] <Shinmera> it's possible that part was not yet seen as ratified.
[16:26:20] <theothornhill> Yeah, that's my guess as well
[16:26:52] <jackdaniel> it could be some sort of an easter egg or a joke that ordinary minds do not comprehend ,)
[16:27:05] <MichaelRaskin> Strictly speaking, it is not only _that_ part that needs to be ratified for the answer to be definite
[16:27:06] <jackdaniel> (of course it was not, but hey, it could be!)
[16:27:47] <MichaelRaskin> There is also a question whether _adding_ extra return values after all the standard ones is allowed as an implementation-defined extension
[16:27:48] <theothornhill> I'm going for the easter egg explanation
[16:28:16] <theothornhill> MichaelRaskin: what do you mean?
[16:29:03] <MichaelRaskin> 1.6 Language extensions
[16:30:14] <phoe> MichaelRaskin: likely not because MULTIPLE-VALUE-CALL is going to break
[16:32:40] <theothornhill> MichaelRaskin: Not sure I understand what you mean? They don't redefine pprint, as far as I can tell
[16:33:08] *** Joins: dra (~dra@2a04:4540:6401:7200:9c78:2e94:dd21:7ee5)
[16:33:27] <MichaelRaskin> The question is how early it was 100% clear that implementing pprint with an output value would be non-conforming.
[16:33:45] <theothornhill> Right
[16:33:48] <phoe> ooh, like that
[16:34:10] <phoe> ;; probably 1994, because earlier there was no ANSI CL standard to conform to :D
[16:34:43] <MichaelRaskin> Well, conditional on the standard being eventually published by the existing working group
[16:35:00] <MichaelRaskin> (and without process resets, I guess)
[16:36:53] <pjb> Where is it written that extensions can add values?
[16:37:01] <pjb> I can't find it again.
[16:37:03] <MichaelRaskin> It is written they cannot
[16:37:06] <MichaelRaskin> 1.6
[16:37:10] <phoe> clhs 1.6
[16:37:11] <specbot> Language Extensions: http://www.lispworks.com/reference/HyperSpec/Body/01_f.htm
[16:37:16] <pjb> thanks.
[16:37:36] <pjb> "An implementation must return exactly the number of return values specified by this standard unless the standard specifically indicates otherwise."
[16:38:18] <pjb> So I'd say that pprint cannot be extended with additionnal values.
[16:38:28] *** Joins: igemnace (~ian@user/igemnace)
[16:39:00] <MichaelRaskin> Yes, the question is, whether it was settled at the time AMOP was written
[16:39:27] <pjb> The relevant issue iis dated August 1989.
[16:39:32] <pjb> http://www.lispworks.com/documentation/HyperSpec/Issues/iss156_w.htm
[16:39:49] <pjb> But we don't know if PPRINT was specified by that date.
[16:40:01] <theothornhill> It is mentioned in cltl1
[16:40:25] <theothornhill> should be page 383, but I don't have a copy yet hehe
[16:42:04] <edgar-rft> I think it's a test to find out how many people really have read the code in AMOP.
[16:42:14] <theothornhill> Feels like i'm losing
[16:45:24] <moon-child> moreover, books are generally written before they are published
[16:50:59] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:58:55] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[17:14:38] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[17:31:46] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzzâ€¦)
[17:32:29] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[17:33:15] *** Joins: amb007 (~a_bakic@94.104.204.77.rev.sfr.net)
[17:35:24] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[17:40:34] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 260 seconds)
[17:43:26] *** Joins: NetNoodler (~TwoNotes@99-184-79-0.lightspeed.jcvlfl.sbcglobal.net)
[17:45:48] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:d55d:ca9a:bf56:1919)
[17:46:57] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e8:21d:a12e:2b2b:53ad:f19d)
[17:49:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:50:47] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:d55d:ca9a:bf56:1919) (Ping timeout: 252 seconds)
[17:54:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:55:31] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[18:00:10] *** Quits: NetNoodler (~TwoNotes@99-184-79-0.lightspeed.jcvlfl.sbcglobal.net) (Quit: Leaving)
[18:00:46] *** Quits: dra (~dra@2a04:4540:6401:7200:9c78:2e94:dd21:7ee5) (Quit: Leaving)
[18:04:12] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e8:21d:a12e:2b2b:53ad:f19d) (Ping timeout: 240 seconds)
[18:06:30] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:13:35] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[18:14:19] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e8:21d:a12e:2b2b:53ad:f19d)
[18:14:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:23:37] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 256 seconds)
[18:23:50] *** Joins: psf (~pi@206.55.172.18)
[18:29:20] <phoe> Xach: will you mind if I add a keyword argument to WITH-CANVAS to return the ZPNG image that is created?
[18:29:55] <phoe> (or, worse, make it the default? I don't think anyone realistically depends on the return value of WITH-CANVAS unless I miss something big)
[18:31:14] *** Joins: biog (~user1@159.224.42.85)
[18:34:04] <phoe> the use case is to be able to use the generated canvas data without saving the PNG to disk and loading it back up
[18:37:42] <phoe> and another optimization that immediately follows up is using a custom function for creating the backing ub8 vector - e.g. a for using a static vector
[18:39:45] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[18:41:21] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e8:21d:a12e:2b2b:53ad:f19d) (Read error: Connection reset by peer)
[18:41:54] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:1dab:e821:3fb5:223e)
[18:49:54] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[18:51:05] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[18:51:48] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:1dab:e821:3fb5:223e) (Ping timeout: 240 seconds)
[18:54:37] *** Quits: amb007 (~a_bakic@94.104.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[18:56:48] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:56:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:58:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:13:55] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:155:5b5f:e3c2:b079)
[19:16:18] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:1dab:e821:3fb5:223e)
[19:16:55] *** Quits: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Quit: Leaving)
[19:16:56] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e8:21d:151a:7965:bbc6:a09b)
[19:17:31] *** Joins: notzmv (~zmv@user/notzmv)
[19:18:58] <lisp123> When using HANDLER-CASE, on a largish form, should I (i) put that form into a local function, (2) put the handler case in a new wrapper function or (3) leave the form within HANDLER-CASE?
[19:19:05] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[19:20:36] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:1dab:e821:3fb5:223e) (Ping timeout: 240 seconds)
[19:21:09] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[19:21:59] <_death> there are more alternatives, like putting the form into a global function, or writing a macro expanding into the handler-case..
[19:22:55] <lisp123> _death: Yes, by (2) I meant putting the form into a global function and the handler-case around it. Do you have a particular preference for one of these?
[19:23:59] <semz> I don't think a large form inside a handler-case specifically would bother me. Of course putting it into a local function might be worth it for readability in general.
[19:24:00] <lisp123> I feel like (2) is cleanest, but I would have to come with a new name for the 'handled' version
[19:24:08] <_death> it depends on the case, but often I'd go with that.. https://adeht.org/usenet-gems/one-function.txt
[19:24:24] <_73> is there a function that will give me the place of a hash value that I can later change with SETF. I want to be able to say something like `(let ((place (place-of (gethash "foo" my-hash)))) (setf place 12))`
[19:25:23] <_death> (by that, I mean trying to keep function bodies small.. if the form is large, maybe it should also be split)
[19:26:00] <lisp123> _death: Thanks, makes sense
[19:26:18] <phoe> _73: (lambda (value) (setf (gethash hash-table key) value))
[19:26:26] <phoe> close over HASH-TABLE and KEY
[19:26:38] <lisp123> Nice website, I wonder if there is an index page for all usenet-gems
[19:27:26] <_death> lisp123: the main page currently lists the usenet gems.. every year I say that I need to update it, so here's one for 2020+2
[19:27:27] <_73> phoe: I see. thanks
[19:27:56] <lisp123> semz: Yeah, its just that I'm erring on more conditions than less (more descriptive error messages as a result), so that already makes the form large
[19:28:22] <lisp123> _death: AH thanks, I was looking at the wrong place
[19:29:39] <semz> lisp123, maybe it would help to introduce a supertype for your conditions and play with the :report option.
[19:29:51] <semz> But this is hard to say without seeing the code.
[19:30:14] <lisp123> semz: Not a bad idea, thanks for that
[19:37:43] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[19:42:45] <Xach> phoe: i don't think it should be a return value.
[19:42:56] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:43:04] <Xach> phoe: i think there should be a function to access the value in the context
[19:43:47] <phoe> Xach: OK, that works too - something like this? (with-canvas (...) ... (return-png)) ;=> <#ZPNG:PNG ...>
[19:44:34] <Xach> phoe: more like ZPNG-OBJECT
[19:45:16] <phoe> sure, so, (with-canvas (...) (zpng-object)) ;=> #<ZPNG:PNG ...>
[19:45:20] <Xach> aye
[19:45:20] *** Joins: citizenajb (~citizenaj@modemcable064.134-177-173.mc.videotron.ca)
[19:46:17] <phoe> OK, I'll do it that way - how about a custom allocator? I have a patch ready that does (with-canvas (... :allocator allocator) ...) where allocator is e.g. (lambda (x) (make-static-vector x :element-type '(unsigned-byte 8) :initial-element 0))
[19:46:43] <Xach> hmm
[19:47:09] <phoe> where X is computed on the vecto side, since it has the number of channels and image dimensions
[19:47:26] <phoe> and the standard allocator is just a wrapped make-array, like in current code
[19:47:37] <Xach> i'd prefer :image-data-allocator I think
[19:47:41] <Xach> but that sounds fine otherwise
[19:47:50] <phoe> okie, I'll modify the keyword name
[20:03:59] *** Joins: Oladon (~olad@98.43.81.226)
[20:06:42] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzzâ€¦)
[20:06:59] *** Joins: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[20:09:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[20:11:31] *** Quits: citizenajb (~citizenaj@modemcable064.134-177-173.mc.videotron.ca) (Remote host closed the connection)
[20:18:10] <madnificent> Are there examples of pretty printing nested objects?  I basically want to keep how a struct is printed, but I want nested lists to be printed with less indentation.
[20:19:20] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 268 seconds)
[20:20:37] *** Joins: miique (~miique@181.46.139.166)
[20:24:40] <lisp123> I always struggled with that
[20:25:50] <engblom_> Imagine me having a function called foo that does some stuff and then returns some value. As a side effect it would output some logging with format. Many concurrent sessions are calling that function. Is it possibible to redefine standard out, so each session knows what the output was for that session?
[20:27:01] *** Parts: McParen (~McParen@user/mcparen) ()
[20:27:43] <phoe> just rebind *STANDARD-OUTPUT* in each thread
[20:28:44] <engblom_> phoe: This was something I was thinking about, but is *STANDARD-OUTPUT* just a normal variable? Or how do I do it practically?
[20:28:55] <phoe> it's a standard dynamic variable
[20:29:16] <phoe> (let ((*standard-output* ...)) ...) is enough
[20:29:45] <engblom_> Ok, thanks! This will simplify my program a lot!
[20:29:57] <phoe> do you know how to deal with dynamic variables in general?
[20:30:07] <phoe> such things can simplify programs a lot in the general case
[20:30:32] <_death> madnificent: there's no standard interface to customize printing of structures in general, other than global pprint-related variables.. there's also no standard interface to introspect structure instances.. if you want to pprint a particular structure type it's possible to do that in standard CL though
[20:31:00] <madnificent> lisp123: It's such a trivial thing but it could make debugging so much easier.
[20:31:35] <madnificent> _death: I'm looking for examples of print-object, possibly on how it's implemented for defstruct
[20:32:24] <_death> madnificent: for an example of pprinting nested objects, maybe check out Waters's article at https://3e8.org/pub/scheme/doc/lisp-pointers/v5i2/p27-waters.pdf
[20:32:59] <lisp123> madnificent: I don't think its that easy because you don't know the length of your objects + the width of your screen :( I feel your pain though, I looked at this before
[20:33:09] <madnificent> _death: thank you!
[20:33:45] <madnificent> lisp123: I can agree, though the current pretty printer also makes some fairly random assumptions.  I'm okay with optimizing for my silly cases here.  Thatos why it was made extensible, I think.
[20:34:05] <phoe> madnificent: I know a person who knows the depths of the pretty printer, I've let them know on Discord you need help
[20:34:25] <madnificent> phoe: <3
[20:34:32] <lisp123> madnificent: True, if you make some assumptions, then within those assumptions, it could work out okay.
[20:35:54] <lisp123> madnificent: You can also consider a McCLIM solution - this is a place where interactivity & layering through a GUI can help out a lot
[20:36:17] <_death> madnificent: I also remember http://norvig.com/ltd/doc/ltd.html used the pprinter
[20:37:47] <madnificent> Perhaps I should up my format-fu to make this land they way I want to.
[20:40:01] <madnificent> Was hoping to find something in a tiny helper I made for tracing lambda functions (https://github.com/madnificent/cl-traceable) but no dice.
[20:42:52] <madnificent> _death: Do you have a copy of reference [5] in that paper, by accident?  It is Waters R.C., "Pretty Printing',' in Common Lisp: the Language, Second Edition, 748-769, Steele G.L.Jr., Digital Press, Burlington MA, 1990.
[20:43:17] <lisp123> Hmmm I wonder if compiler do some sort of automatic memoization (see what objects are reference by a function, and if they don't change, use the old value of the function) - crazy idea, but I swear one of the forms I just ran was faster the second time
[20:43:27] <_death> madnificent: https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node253.html#SECTION003100000000000000000
[20:45:10] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e6:2aaa:151a:7965:bbc6:a09b)
[20:45:38] <madnificent> Thanks again :D
[20:46:28] <madnificent> lisp123: caches can also be warmed up and cpu clockspeed can still be high.  These things can make a difference.
[20:47:13] <lisp123> madnificent: Must be that :) I did some tests and the second time was 0.002 faster with 0 page faults...I hope page faults isn't a bad thing :(
[20:47:27] <semz> 0.002 is random jitter territory
[20:48:24] <engblom_> phoe: Nope, I have not looked at dynamic variables yet
[20:48:26] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e8:21d:151a:7965:bbc6:a09b) (Ping timeout: 252 seconds)
[20:48:41] <madnificent> lisp123: Not saying there might not be more at play, but these things I've noticed make a difference in benchmarks.  Especially on modern hardware.  Latest Epyc has 800Mb L3 cache so all your data may still be in cache second time you run many benchmarks.
[20:48:51] <phoe> engblom_: you should, they are a very useful concept
[20:49:14] <lisp123> madnificent: Thanks for the info, useful to know
[20:50:01] <engblom_> After quickly looking it up, it seems to be just old (let ...). Or am I missing something?
[20:50:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[20:50:09] <phoe> it isn't just the LET
[20:50:12] <lisp123> semz: Indeed :)
[20:50:14] <phoe> it's the variable itself that's special
[20:50:38] <phoe> (defvar *var* 42) (defun foo () *var*) ;; what will (foo) return?
[20:50:54] <phoe> ;; and what will (let ((*var* 24)) (foo)) return?
[20:52:22] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[20:52:26] <engblom_> phoe: The first one would give 42, the second one would give 24?
[20:52:29] <waleee> Anyone using a musl-based linux distro? How's uiop-funtioning there? Someone on #nyxt got this error https://uploads.kiwiirc.com/files/6818932137863528d7ed745aa373c4cd/pasted.txt
[20:53:03] <engblom_> waleee: On Alpine Linux it works well for running commands.
[20:53:14] <phoe> engblom_: yes, that's how dynavars work
[20:53:53] *** Quits: jstoddard (~user@2600:8801:a400:5a00::d33e) (Remote host closed the connection)
[20:54:08] *** Joins: jstoddard (~user@2600:8801:a400:5a00::1dea)
[20:54:42] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[21:06:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:16:13] <Xach> waleee: that suggests libfixposix is missing
[21:16:18] <Xach> waleee: which is used by iolib
[21:17:06] <waleee> I'm aware, but said person is adamant that they have libfixposix installed via the voidlinux package manager
[21:17:29] <Xach> ok
[21:17:51] <semz> With no offense intended, I feel like the person in question doesn't really know what he's doing...
[21:18:32] <Xach> semz: that does not seem reasonable from the available information
[21:18:54] <semz> He's in other channels.
[21:19:03] <Xach> waleee: perhaps it did not get reloaded when the image restarted
[21:19:37] <waleee> Xach: I directed him to channels where there's more sbcl & musl-specific knowledge
[21:20:19] <waleee> seems like they're getting help by someone both in #void & #musl atm
[21:20:40] <Xach> phoe: the last two elements are the x and y translation values
[21:20:53] <Xach> see transform-matrix.lisp and the pdf/postscript manuals
[21:20:57] <phoe> Xach: OK, that's something I can use
[21:22:12] *** Joins: kotshie_ (~kotshie@68.72.208.140)
[21:22:47] *** Quits: kotshie_ (~kotshie@68.72.208.140) (Client Quit)
[21:23:59] <phoe> is there a nice way of getting that value from outside other than via triple :: ?
[21:24:00] *** Joins: biog (~user1@159.224.42.85)
[21:24:04] <phoe> I mean, (v::transform-matrix-x-offset (v::transform-matrix v::*graphics-state*))
[21:24:41] <Xach> Don't think so
[21:24:48] <phoe> I'll be ugly in vecto-imago then
[21:24:52] <Xach> IMPORT is one way
[21:25:05] <Xach> Import them if you like
[21:25:43] <Xach> Or write an external function that returns the matrix vector
[21:25:46] <Xach> Or something!
[21:26:11] <phoe> writing an external reader function and exporting accessors for that matrix is one idea
[21:29:38] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 268 seconds)
[21:33:10] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:a0dc:1dc2:6caa:2330)
[21:34:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:40:37] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[21:41:38] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:95fe:89a9:e964:2e47) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:50:05] <madnificent> _death: That paper gave me some insights on how I could tackle this better.  It needn't be as native as I first wanted it to be.  Further, http://www.lispworks.com/documentation/HyperSpec/Body/22_bb.htm is also interesting material.  More pointers obviously welcome
[21:53:08] *** Quits: myrrh (~markus@user/poet) (Quit: leaving)
[21:58:16] <_death> the source code of lisp implementations also tends to have a lot of of pretty-printing examples.. although often it's cryptic format strings and may need to be translated back to lisp in order to be understandable
[22:01:29] <_death> one way to get a starting point is to use macroexpand, e.g. (macroexpand-1 '(formatter "~:<~W~^ ~3I~:_~W~^~1I~@{~:@_~:<~^~W~^ ~:I~@_~@{~W~^ ~_~}~:>~}~:>"))
[22:03:16] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:07:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:40:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:42:54] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[23:07:14] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e6:2aaa:151a:7965:bbc6:a09b) (Ping timeout: 260 seconds)
[23:08:21] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e6:2aaa:151a:7965:bbc6:a09b)
[23:13:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:17:53] *** Joins: alvaro121_ (~aa@201.230.126.66)
[23:18:17] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[23:21:28] *** Joins: karlosz (~karlosz@136.56.98.53)
[23:25:44] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e6:2aaa:151a:7965:bbc6:a09b) (Ping timeout: 252 seconds)
[23:26:15] <Xach> phoe: your latest comment truly befuddles me
[23:26:26] <phoe> Xach: oh?
[23:26:45] <Xach> phoe: if there is translation to 25,25, composing at 25,25 should result in an image with the origin at 50,50
[23:26:48] <phoe> I re-added coordinates to COMPOSE, so now translating by (25,25) and composing an image at (25,25) ends up in the final image being---
[23:26:51] <phoe> yes
[23:26:57] <phoe> that's the result
[23:27:02] <phoe> just like the code in the very first comment
[23:27:07] <phoe> the final translation is 50,50
[23:27:17] <phoe> sorry if I wasn't clear
[23:27:37] <Xach> Ok, I missed that the original was 50,50
[23:27:46] <Xach> I am unfuddled, thanks
[23:38:02] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:38:22] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[23:38:41] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[23:39:10] *** Joins: Devon77 (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[23:39:21] *** Joins: kevingal__ (~quassel@2a02:8084:4140:f300:a0dc:1dc2:6caa:2330)
[23:39:37] *** Joins: opc0de (~nathan@user/opcode)
[23:39:40] *** Joins: pieguy128_ (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[23:39:55] *** Joins: ns127 (~ns12@user/ns12)
[23:40:15] *** Server sets mode: +Ccntz 
[23:40:47] *** Joins: hobo (~hobo@69.218.33.204)
[23:41:17] *** Joins: minion (~minion@common-lisp.net)
[23:41:26] *** Joins: tyson2`` (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:41:53] *** Joins: theBlack1ragon (~dragon@fvwm/admin)
[23:41:54] *** Joins: utis_ (~utis@vpn-client281.uio.no)
[23:42:10] *** Joins: Oladon2 (~olad@98.43.81.226)
[23:42:12] *** Quits: Alfr (~Alfr@user/alfr) (Killed (tantalum.libera.chat (Nickname regained by services)))
[23:42:16] *** Joins: Alfr (~Alfr@user/alfr)
[23:42:17] *** Joins: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[23:42:41] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[23:42:57] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0)
[23:43:28] *** Joins: frodef_ (~frode@46.212.93.4)
[23:43:33] *** Joins: specbot (~specbot@common-lisp.net)
[23:43:43] *** Joins: hexology- (~hexology@user/hexology)
[23:43:45] *** Joins: stack (~stack@ctrl-c.club)
[23:43:53] *** Quits: karlosz (~karlosz@136.56.98.53) (*.net *.split)
[23:43:53] *** Quits: alvaro121_ (~aa@201.230.126.66) (*.net *.split)
[23:43:53] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:a0dc:1dc2:6caa:2330) (*.net *.split)
[23:43:53] *** Quits: jstoddard (~user@2600:8801:a400:5a00::1dea) (*.net *.split)
[23:43:53] *** Quits: Oladon (~olad@98.43.81.226) (*.net *.split)
[23:43:53] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[23:43:53] *** Quits: parjanya (~esb@2804:14c:1ad:8b70::1000) (*.net *.split)
[23:43:54] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[23:43:54] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (*.net *.split)
[23:43:54] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (*.net *.split)
[23:43:54] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:71d0:995f:9252:5bc7) (*.net *.split)
[23:43:54] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[23:43:54] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[23:43:54] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[23:43:54] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[23:43:54] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[23:43:54] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[23:43:55] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[23:43:55] *** Quits: spec (~spec@user/spec) (*.net *.split)
[23:43:55] *** Quits: opcode (~nathan@user/opcode) (*.net *.split)
[23:44:32] *** Joins: tyson2``` (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:44:42] *** Joins: jealousm` (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[23:44:42] *** Joins: hineios2 (~hineios@a95-93-142-124.cpe.netcabo.pt)
[23:44:43] *** Joins: remexre (~remexre@user/remexre)
[23:44:53] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[23:44:56] *** Joins: amk (~amk@109.255.169.126)
[23:44:57] *** Joins: qhong- (~qhong@rescomp-21-400677.stanford.edu)
[23:44:57] *** ns127 is now known as ns12
[23:45:01] *** Joins: jm (~jm@pool-74-104-177-164.bstnma.fios.verizon.net)
[23:45:01] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:155:5b5f:e3c2:b079)
[23:45:12] *** Joins: lagash_ (lagash@lagash.shelltalk.net)
[23:45:24] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[23:45:26] *** Joins: robin_ (~robin@user/terpri)
[23:45:32] *** Joins: massimo_zaniboni (~quassel@mail.asterisell.com)
[23:45:32] *** Joins: dcx (~dcx@user/dac)
[23:45:35] *** Quits: loke (~loke@junk.nocrew.org) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Oladon1 (~olad@98.43.81.226) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: biog (~user1@159.224.42.85) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Spec` (~spec@user/spec) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: snits_ (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: luna-is-here_ (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: jgkamat (~jay@user/jay) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: mzan (~quassel@mail.asterisell.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:155:5b5f:e3c2:b079) (Quit: No Ping reply in 180 seconds.)
[23:45:37] *** Quits: jmorrison_ (~jm@pool-74-104-177-164.bstnma.fios.verizon.net) (Remote host closed the connection)
[23:45:37] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Read error: Connection reset by peer)
[23:45:37] *** Quits: jstoddar` (~user@2600:8801:a400:5a00::1dea) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Read error: Connection reset by peer)
[23:45:38] *** hineios2 is now known as hineios
[23:45:38] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[23:45:42] *** Joins: psf (~pi@206.55.172.18)
[23:45:48] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:b0a0:2acf:d5f8:7b92) (Remote host closed the connection)
[23:45:51] *** Joins: spec (~spec@user/spec)
[23:45:52] *** Joins: dstein64- (~dstein64@dannyadam.com)
[23:45:58] *** Joins: Oladon (~olad@98.43.81.226)
[23:45:59] *** Joins: random-nickname (~random-ni@87.116.167.125)
[23:46:07] *** Joins: okflo_ (~okflo@lisa.diesenbacher.net)
[23:46:12] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[23:46:14] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[23:46:17] *** Quits: jaimelm_ (~jaimelm@deneb.emergentcommunitysystems.com) (Ping timeout: 240 seconds)
[23:46:29] *** Quits: Oladon2 (~olad@98.43.81.226) (Ping timeout: 256 seconds)
[23:46:36] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:b0a0:2acf:d5f8:7b92)
[23:46:40] *** dstein64- is now known as dstein64
[23:46:46] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[23:46:50] *** Joins: nature (~nature@45.32.235.173)
[23:47:08] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[23:47:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (*.net *.split)
[23:47:14] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (*.net *.split)
[23:47:14] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (*.net *.split)
[23:47:14] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[23:47:14] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[23:47:14] *** Quits: hobo_ (~hobo@69.218.33.204) (*.net *.split)
[23:47:15] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (*.net *.split)
[23:47:15] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[23:47:15] *** Quits: utis (~utis@vpn-client281.uio.no) (*.net *.split)
[23:47:15] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[23:47:15] *** Quits: Krystof (~user@81.174.155.115) (*.net *.split)
[23:47:15] *** Quits: frodef (~frode@46.212.93.4) (*.net *.split)
[23:47:15] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (*.net *.split)
[23:47:16] *** Quits: Catie (~user@user/catie) (*.net *.split)
[23:47:16] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[23:47:16] *** Quits: stacksmith (~stack@ctrl-c.club) (*.net *.split)
[23:47:16] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[23:47:16] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[23:47:16] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[23:50:17] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:52:42] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:53:14] *** weechat is now known as Spawns
[23:53:20] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (Ping timeout: 268 seconds)
[23:53:21] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Ping timeout: 268 seconds)
[23:53:23] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 250 seconds)
[23:53:32] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 240 seconds)
[23:53:38] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[23:53:47] *** Quits: linjian (~linj@user/linj) (Ping timeout: 252 seconds)
[23:53:57] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Ping timeout: 268 seconds)
[23:54:04] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:54:05] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[23:54:31] *** Server sets mode: +Ccntz 
[23:56:11] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:58:23] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (Ping timeout: 256 seconds)
[23:58:23] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
