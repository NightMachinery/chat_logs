[01:52:32] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[01:52:45] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[01:53:25] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[09:09:39] *** Joins: yauhsien (~Yau-Hsien@61-231-37-106.dynamic-ip.hinet.net)
[10:28:42] *** Joins: coot (~coot@213.134.190.95)
[10:58:56] *** Joins: arrowd (~arr@2.93.163.158)
[12:36:50] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[13:18:50] <fendor[m]> maerwald, right, but the ghc-pkg we discover from the libdir requires `--global-package-db`. We pass the path to the `ghc-pkg` in libdir to cabal. We still need somehow to pass in the global package db
[13:22:57] *** Joins: fendor (~fendor@77.119.223.31.wireless.dyn.drei.com)
[13:23:20] *** Joins: coot (~coot@213.134.190.95)
[13:37:42] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 272 seconds)
[14:23:43] *** Joins: coot (~coot@213.134.190.95)
[14:47:39] *** Joins: fendor_ (~fendor@178.165.200.21.wireless.dyn.drei.com)
[14:49:48] *** Quits: fendor (~fendor@77.119.223.31.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[15:33:54] <maerwald> fendor[m]: global package db is $LIBDIR/package.conf.d
[15:35:04] <fendor[m]> Yeah, but I can't pass it to ghc pkg via an env var, right? 
[15:35:31] <maerwald> yeah, I guess that needs a temporary (possibly) wrapper script
[16:14:24] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[16:51:14] *** Joins: coot (~coot@213.134.190.95)
[16:58:29] *** Quits: arrowd (~arr@2.93.163.158) ()
[18:28:25] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[19:22:56] *** Joins: coot (~coot@213.134.190.95)
[20:05:03] <michaelpj> Guillaum: can you actually build HLS inside the new nix dev shell? I get stuck at ghcide
[20:05:17] <michaelpj> Exception when trying to run compile-time code:
[20:05:17] <michaelpj>         I could not find a GHC installation at /nix/store/2dgrlf17sdjg3vjgs637xbj8kfmd3yxw-ghc-8.10.7/lib/ghc-8.10.7. Please do a clean rebuild and/or reinstall GHC.
[20:31:43] <Guillaum[m]> michaelpj: Well, that was the point ;) What exactly did you do? (I just did `nix-shell` or `nix-shell --pure` then `cabal build exe:haskell-language-server` with success)
[20:32:17] <Guillaum[m]> So maybe there is something not reproducible between your env and mine, that's super surprising.
[20:33:48] <Guillaum[m]> michaelpj: I'm surprised by the path you describe (`/nix/store/2dgr....`). Because I do not have that path on my system. By default, `nix-shell` populate `PATH` with a `ghc` from `/nix/store/lrwichshmxvlqnbbym9yg4bxqsrvc88j-ghc-8.10.7/bin/ghc`
[20:34:20] <Guillaum[m]> So definitily there is something surprising. Do you by chance have some override of `PATH`? What happen if you open the `nix-shell` with `--pure`?
[20:40:15] <Guillaum[m]> michaelpj: could you `env | grep 2dgr`  ard `grep -R 2dgr *` so we may find where does that path comes from?
[20:47:56] <michaelpj> This was just with `nix develop`, I should try with just `nix-shell`
[20:48:15] <michaelpj> Guillaum: I commented on the PR with what I tried, will report back more in a bit
[20:55:12] <fendor[m]> maerwald, do you still think this isn't hacky?
[20:55:55] <maerwald> fendor[m]: why?
[21:00:23] <michaelpj> Guillaum: it works in `nix-shell` but not `nix develop`! WTF!
[21:00:48] <Guillaum[m]> and what about `nix-shell --pure`?
[21:04:04] <fendor[m]> maerwald, because we write an additional wrapper script for ghc-pkg, essentially guessing what was written in the original ghc-pkg wrapper script?
[21:04:16] <maerwald> why guessing?
[21:04:24] <fendor[m]> Also, how does this even work for windows? Windows doesn't have this shim, right?
[21:04:51] <maerwald> yeah, on windows those are binaries
[21:05:48] <fendor[m]> because we don't know, some dev could've changed the directory. I know, we don't need to care about everyone with arcane setups, but we essentially guess or try to reproduce the original wraooer
[21:05:50] <fendor[m]> *Wrapper
[21:06:15] <maerwald> the original wrapper is the one that GHC installs
[21:06:35] <maerwald> exec "$executablename" --global-package-db "$PKGCONF" ${1+"$@"}
[21:06:37] <maerwald> that's all it does
[21:08:03] <fendor[m]> doesnt the wrapper of ghcup contain more?
[21:08:08] <fendor[m]> or is that just irrelevant?
[21:08:22] <maerwald> ghcup doesn't have its own wrappers
[21:09:19] <maerwald> the only use case we could break is if someone wraps `ghc` in their own custom wrapper script to add some cli arguments or whatnot... but then again, I'm not sure that works with the current code
[21:09:51] <fendor[m]> it probably does not, true
[21:09:52] <maerwald> and not something interesting to support
[21:09:53] <fendor[m]> the wrapper script for me looks like this: https://paste.tomsmeding.com/491CJIGt
[21:10:27] <maerwald> those corner cases can be supported once cabal can tell us about the real locations
[21:10:35] <fendor[m]> there are more env vars then just PKGCONF
[21:10:56] <fendor[m]> we don't need ghc-pkg once cabal status works
[21:10:56] <maerwald> they don't matter
[21:11:20] <fendor[m]> why are they there then?
[21:11:25] <maerwald> looks like a bug
[21:11:29] <maerwald> there are two shebangs
[21:12:01] <fendor[m]> yeah, I figured that's some special syntax
[21:12:16] <fendor[m]> if it's not, then it is probably a bug
[21:14:47] <fendor[m]> so just to make sure, for windows, it suffices to pass in the ghc-pkg located at `$libdir/bin/ghc-pkg`?
[21:18:06] <maerwald> wait... why are we guessing binary dir now?
[21:18:41] <fendor[m]> where else do we get the ghc-pkg binary from?
[21:20:07] <maerwald> exePathLoadResult <- readProcessWithCwd workDir  "cabal" ["exec", "-v0", "--", "ghc-pkg", "-e", "do e <- System.Environment.getExecutablePath ; System.IO.putStr e"] ""
[21:20:15] <maerwald> oops
[21:20:20] <maerwald> just with ghc
[21:20:31] <maerwald> and then we infer the ghc-pkg from ghc as per the wrapper script
[21:20:58] <maerwald> https://github.com/haskell/haskell-language-server/blob/38acb866ae26986af2d8e4ffa85c1fc409c525c8/bindist/wrapper.in#L91-L107
[21:21:11] <maerwald> ghc and ghc-pkg have to live in the same dir
[21:21:55] <maerwald> so: ghc-8.10.7 -> ghc-pkg-8.10.7
[21:21:58] <maerwald> ghc -> ghc-pkg
[21:22:54] <fendor[m]> true, but isn't that practically speaking `$libdir/bin`? 0.o
[21:23:51] <maerwald> not for windows 
[21:24:56] <maerwald> there's no ghc in $libdir/bin on windows xD
[21:25:04] <fendor[m]> sigh. But right next to it each other is somewhat standard?
[21:25:15] <maerwald> yeah
[21:25:17] <fendor[m]> where is ghc-pkg then? 0.o
[21:25:26] <maerwald> in bin/
[21:25:47] <maerwald> windows doesn't need wrappers
[21:25:53] <maerwald> or: can't have them
[21:26:28] <fendor[m]> huh? is ghc-pkg copied to multiple locations? Or how else is ghc-pkg and ghc right next to each other then? Or are you not talking about `$libdir/bin/` 
[21:26:42] <maerwald> I'm talking about bin/
[21:26:48] <maerwald> as it's installed into $BINDIR
[21:26:58] <maerwald> well
[21:27:01] <maerwald> eh... 
[21:27:08] <maerwald> there's no makefile for windows bindists
[21:27:17] <maerwald> you just copy the whole thing
[21:27:32] <maerwald> so it's bin/
[21:28:45] <fendor[m]> I have no idea how windows packaging works... What's $BINDIR? ghc's $BINDIR?
[21:29:03] <fendor[m]> ah, ok, yes it is 
[21:29:34] <maerwald> https://gist.github.com/hasufell/bf1767ec316208d5d7cff02046e68b06
[21:31:00] <fendor[m]> Ah, I remember now, I wanted to discover the bindir from the libdir as the wrapper scripts are already defined for $bindir, but that only works on windows reliably
[21:31:43] <maerwald> yeah, on unix, bindir and libdir can be wherever
[21:32:11] <maerwald> but ghc and ghc-pkg are a couple
[21:32:20] <maerwald> no one shall divide them
[21:32:26] <fendor[m]> cute
[21:32:53] <fendor[m]> great point, I am finally convinced
[21:36:50] <maerwald> basically, both stack and ghcup would break if this isn't guaranteed
[21:36:57] <maerwald> so we'll know before HLS
[21:39:20] <maerwald> and the bindist Makefile doesn't allow to split them either... so if a distro decides to be cocky... it's on them
[21:42:03] <fendor[m]> additionally, we are working on making this elaborate hack go away
[22:24:29] <fendor[m]> I remember faintly, wasn't there a filepath function that added the `.exe` extension depending on whether you have been compiled on windows?
[22:25:01] <fendor[m]> e.g. `"file" <.> "exe"` -> "file.exe" on windows and "file" otherwise?
[22:33:10] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[22:38:43] <maerwald> I've only seen that in the stack codebase
[22:39:06] <maerwald> exeExt = if isWindows then ".exe" else ""
[22:59:18] <fendor[m]> Shake has a similar trick: https://hackage.haskell.org/package/shake-0.19.6/docs/Development-Shake-FilePath.html#v:exe
[22:59:30] <fendor[m]> with that you can do `"file" <.> exe`
[23:02:59] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:25:28] <fendor[m]> is github down or my pc down?
[23:25:30] <fendor[m]> s/pc/internet/
[23:25:56] *** Quits: fendor_ (~fendor@178.165.200.21.wireless.dyn.drei.com) (Remote host closed the connection)
[23:30:43] *** Quits: juhp (~juhp@128.106.188.82) (Remote host closed the connection)
[23:30:48] <fendor[m]> Aynway, maerwald, jneira would you mind giving https://github.com/haskell/hie-bios/pull/282 a try now? I blow tested it and it honoured my cabal.project.local correctly
[23:37:11] *** Joins: juhp (~juhp@128.106.188.82)
[23:43:57] <maerwald> fendor[m]: I don't see where are the new commits
[23:46:33] <maerwald> it also seems you deleted the fixes from Kleidukos
