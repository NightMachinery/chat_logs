[00:04:35] *** Quits: pro (~pro@user/pro) (Quit: pro)
[00:06:43] <FromDiscord> <Forest> Hm okay then, thanks!
[00:11:03] <FromDiscord> <exelotl> In reply to @Schelz "Does someone knows how": it's trying to add something to the end of something but the parent is null... that's all I've got 😅
[00:17:12] <FromDiscord> <Schelz> ik its frustrating cause i did same as in the examples doc but for me it shows this error
[00:18:18] <FromDiscord> <Schelz> sent a code paste, see https://play.nim-lang.org/#ix=3TJi
[00:19:20] <FromDiscord> <spoon> lol flatty and supersnappy are really cool for storing objects, but i guess it makes sense that it would break if you tried to store an object with a proc
[00:19:56] <FromDiscord> <Schelz> ?
[00:20:18] <FromDiscord> <spoon> i'm testing object serialization
[00:20:31] <FromDiscord> <Schelz> oh tehe
[00:26:48] *** Joins: kenran (~kenran@200116b82baeab0017258e66ff76ea55.dip.versatel-1u1.de)
[00:36:09] <FromDiscord> <spoon> hard to tell if it's just not anticipated use or if it's just impossible with the way the compiler works, but i'd imagine the latter
[00:36:31] <FromDiscord> <spoon> maybe i can get it working if i got it to use nimscript instead of a proc
[00:40:07] <FromDiscord> <auxym> yeah I don't think that's going to be possible: serialization aims to be portable between architectures, so you can eg send some data from a windows x86 machine to a mac M1 over the network. procs are executable code so won't be portable.
[00:41:34] <FromDiscord> <auxym> not sure why you need the serialization (persistence on disk, or multiplayer gaming?) but maybe reconsider the architecture
[00:43:10] <FromDiscord> <spoon> right now it's just a fun experiment, but i'm eventually planning on using the same sort of stuff for save games
[00:45:53] <FromDiscord> <spoon> (and since i want to have objects with unique abilities and scripting/modability, objects with procedures are part of that)
[00:47:14] <FromDiscord> <auxym> yeah I have no experience in game dev, but you can ask in #gamedev
[00:50:10] <FromDiscord> <Elegantbeef> The biggest issue with supersnappy/flatty is they lack versioning imo
[00:50:44] <FromDiscord> <Recruit_main707> In reply to @spoon "(and since i want": i dont have much information but it sounds you would be better off using methods rather than objects with procedures as part of them
[00:50:45] <FromDiscord> <Elegantbeef> As such i've got a small toy i've written that makes it a bit more sensible though there are some potholes
[00:51:39] <FromDiscord> <Elegantbeef> Object variants with named procedures or methods would probably be the best
[00:51:59] *** Quits: fowl (~fowlmouth@user/fowl) (Quit: cya pals)
[00:52:09] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Tfi skip to line 80 here to see what my silly versioned data is like
[00:53:50] *** Joins: fowl (~fowlmouth@user/fowl)
[01:11:28] <nrds> <06Prestige99> Beef do you use Nim at work?
[01:15:57] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[01:31:27] <NimEventer> New thread by Arrrrrx2: Did nimc become faster?, see https://forum.nim-lang.org/t/9056
[01:39:15] <FromDiscord> <Phil> In reply to @spoon "(and since i want": Out of curiosity, why store procs in an object like that?↵It sounds like you're recreating java objects, thus my question.
[01:41:05] <FromDiscord> <Forest> Would it be practical to make bindings for Nimscripter to other languages?
[01:41:40] <FromDiscord> <spoon> In reply to @Isofruit "Out of curiosity, why": mostly for supporting nimscript, i want certain scriptable objects, like a sword that has a unique scripted function like teleport to random spot on hit for example
[01:42:13] <FromDiscord> <Forest> Also how fast is Nimscript now? From what i remember before apparently it was horribly slow
[01:42:43] <FromDiscord> <spoon> not entirely sure, cant say i've done a lot with it
[01:42:56] <FromDiscord> <spoon> if its horrible i might have to go the lua route
[01:43:20] <FromDiscord> <Phil> In reply to @spoon "not entirely sure, cant": Is there a limitation with normal module procs that you run into (e.g. can't import the module to where it'd be needed)? Or is this more for the syntax of `object.someproc()`?
[01:43:55] <FromDiscord> <spoon> my attack function runs object.onHit(enemy) for special weapons
[01:44:46] <FromDiscord> <Phil> Ah, so you'd have different instances of weapon that deal different damage despite being of the same type
[01:45:07] <FromDiscord> <Phil> So you'd want to attach individual damage procs to each weapon instance?
[01:46:31] <FromDiscord> <Phil> Hmmm, never encountered this type of problem to solve before, it seems like an interesting solution for hyper invididual behaviour of objects that share types
[01:46:41] <FromDiscord> <Phil> (edit) "types" => "type"
[01:46:51] <FromDiscord> <exelotl> In reply to @Forest "Also how fast is": runtime performance is decent (similar performance to Python iirc), it's just the startup time which sucks... at least if you're using the Nim compiler to run the scripts (e.g. `nim e`), I'm not sure if it's the same for embedded Nimscript
[01:47:37] <FromDiscord> <Forest> Ah okay, thanks!
[01:47:49] <FromDiscord> <Forest> In reply to @spoon "not entirely sure, cant": Fair
[01:49:13] *** Joins: xet7 (~xet7@user/xet7)
[01:50:20] <FromDiscord> <spoon> In reply to @Isofruit "Hmmm, never encountered this": yea, my goal down the line is to make an ss13-like where a gm is able to quickly prototype stuff, but that depends on how secure i think i can get nimscript
[01:50:30] <FromDiscord> <Forest> In reply to @Forest "Would it be practical": Anyone? :P
[01:50:45] <FromDiscord> <spoon> right now i'm testing a lot of what i think i'll be doing with a roguelike
[01:51:02] <FromDiscord> <Forest> In reply to @spoon "yea, my goal down": Isn't Nimscript really flexible? Also if Nimscript doesn't fit, Lua is also a good choice
[01:51:11] *** Quits: kenran (~kenran@200116b82baeab0017258e66ff76ea55.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[01:51:12] <FromDiscord> <spoon> yea, luas my backup option
[01:51:13] <FromDiscord> <Forest> Or Wren, which is another small embeddable language
[01:51:21] <FromDiscord> <Forest> Though that's more like Java
[01:51:24] <FromDiscord> <Forest> In reply to @spoon "yea, luas my backup": Fair
[01:51:40] <FromDiscord> <spoon> ive been able to do a lot of that in gmod with luapad
[01:52:14] <FromDiscord> <Phil> If you want webstuff about prologue, I'm your man.↵Connection pooling, architecture, making generic CRUD, no problem.↵Nimscript, not so much.
[01:52:14] <FromDiscord> <spoon> but its not built to have weapons/stuff inserted mid-game
[01:52:29] <FromDiscord> <Phil> (edit) "CRUD," => "CRUD API endpoints,"
[01:52:41] *** Quits: Jjp137 (~Jjp137@098-148-210-192.res.spectrum.com) (Quit: Leaving)
[01:53:15] <FromDiscord> <Phil> (edit) "If you want webstuff about prologue, I'm your man.↵Connection pooling, architecture, making generic CRUD API endpoints, no problem.↵Nimscript, not so much. ... " 03added "(Directed at Forest)"
[01:54:31] <FromDiscord> <Phil> Hmm for that kind of thing, particularly also with randomizing items, I think the approach of storing the desired behaviour for a given instance in the object might be a good one
[01:54:53] <FromDiscord> <spoon> ye
[01:54:56] <FromDiscord> <Phil> Have you contemplated random constructors?
[01:55:12] <FromDiscord> <spoon> cant say i've heard of them
[01:55:46] <FromDiscord> <Phil> Not a specific construct, just a proc that returns a constructor with random attribute chosen from attribute lists
[01:56:03] <FromDiscord> <Phil> Like, make a seq of available damage procs, other seqs for other behaviour procs and then write a constructor proc that builds an instance with a random entry from each.
[01:56:25] <FromDiscord> <Phil> That's assuming you do random items that can have whatever behaviour
[01:56:38] <FromDiscord> <Phil> (edit) "behaviour" => "behaviour/ be a mixture of any set of X attributes"
[01:57:20] <FromDiscord> <Phil> Eh, I think I should shut up, you'll know what you want, I was just thinking out loud
[02:01:54] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[02:02:05] <FromDiscord> <spoon> nah was just driving home
[02:02:13] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:02:54] <FromDiscord> <spoon> do you mean having a sequence of preset effects having a sequence of them?
[02:06:25] <FromDiscord> <Phil> Yeah, you can have `var damageProcs: seq[proc(weaponInstance: WeaponType)]`
[02:06:32] <FromDiscord> <Phil> And then randomly select from that
[02:06:40] <FromDiscord> <Phil> Repeat for various procs and attributes of an item
[02:06:48] <FromDiscord> <Phil> (edit) "item" => "item, optionally associated with probabilities"
[02:10:14] <FromDiscord> <spoon> yea, will probably have that since it'd probably be more efficient than getting nimscript involved just to add a status effect in thats gonna be repeated 50 times
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:14:06] <FromDiscord> <Recruit_main707> reallocating will usually be faster than deallocating and allocating again right?
[02:15:01] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:25:34] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[02:26:14] <FromDiscord> <Elegantbeef> Prestige how many times to we go over this, i'm not a professional developer
[02:26:53] <nrds> <06Prestige99> I don't believe you
[02:27:00] <FromDiscord> <Elegantbeef> Why?
[02:27:08] <nrds> <06Prestige99> You'll slip up one day and tell me the truth :P
[02:27:23] <FromDiscord> <Elegantbeef> I'm an unemployed self taught schmuck
[02:28:28] <FromDiscord> <Elegantbeef> Why dont you believe me?
[02:28:34] <nrds> <06Prestige99> Well I'm sure you could get a programming job somewhere if you wanted tbh
[02:28:43] <nrds> <06Prestige99> Because you're a good programmer
[02:29:27] <FromDiscord> <Elegantbeef> I'm also fantastically bad at working on a single thing
[02:36:19] <nrds> <06Prestige99> eh, same
[02:36:58] <FromDiscord> <Phil> In reply to @Elegantbeef "I'm also fantastically bad": You say that, but I'm still in love with constructor
[02:37:36] <FromDiscord> <Elegantbeef> Constructor is kinda my point 😛
[02:37:44] <FromDiscord> <Elegantbeef> I have like 30000 different small project repos
[02:38:24] *** Quits: oprypin (~irc@pryp.in) (Quit: Bye)
[02:38:28] <nrds> <06Prestige99> My biggest long-term project was nimdow but I sort of did that out of necessity
[02:39:29] <FromDiscord> <Elegantbeef> Oh prestige did i ever show traitor to you?
[02:39:37] <nrds> <06Prestige99> I don't think so
[02:39:52] <nrds> <06Prestige99> but also I'm an old man and forget things
[02:39:56] <FromDiscord> <Elegantbeef> https://github.com/beef331/traitor#what-does-it-do
[02:40:10] <FromDiscord> <Phil> If I ever finish my backend I'm feeling sorely tempted to make a package that is pretty much norm, prologue and tinypool glued together with some additions only possible if you have an orm bundled into a web-framework, like generic CRUD endpoints, generic repositories, signal systems etc.
[02:40:38] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[02:41:46] <nrds> <06Prestige99> That's cool beef
[02:41:47] <FromDiscord> <Elegantbeef> Runtime interfaces backed by new concepts(though could be replaced with just a macro)
[02:41:51] *** Joins: Jjp137 (~Jjp137@2603-8000-1700-5881-02e9-3aff-fe42-7355.res6.spectrum.com)
[02:42:17] <nrds> <06Prestige99> 2 questions, 1. "# Objects smaller than 24 bytes need `{.byref.}`" is that different than just making it a ref object?
[02:42:27] <nrds> <06Prestige99> and 2. what does emitconverters do?
[02:49:14] <FromDiscord> <Elegantbeef> Anywho how goes your 2D engine prestige
[02:49:30] <FromDiscord> <Elegantbeef> Yes
[02:49:55] <FromDiscord> <Elegantbeef> I need to get around to fixing that requirement, just need to emit an aliased procedure
[02:50:02] <FromDiscord> <Elegantbeef> 2. it emits converters to that collection of types
[02:50:22] <FromDiscord> <Elegantbeef> I dont feel like doing all combinations of types on completion of their implementations
[02:50:26] <FromDiscord> <Elegantbeef> It's just a fucking hassle if you ask me
[02:51:23] <FromDiscord> <Elegantbeef> Imagine you have `Clickable, Draggable, Fireable....` that's a lot of compile time code generated that you might not need
[02:51:29] <FromDiscord> <Elegantbeef> So slows down compilation and is just complicated logically
[02:52:02] <FromDiscord> <Elegantbeef> https://github.com/beef331/traitor/blob/master/tests/test.nim#L19-L48 showcases the logic kinda
[02:52:18] <FromDiscord> <Elegantbeef> That makes it so you can convert to  `DuckObject` `BoundObject` and the union of the two
[02:52:50] <nrds> <06Prestige99> ah, okay
[02:52:51] <FromDiscord> <exelotl> Prestige: the byref pragma just forces "passing by reference" which means that procedures receive a pointer to the object, instead of a copy of the object.
[02:53:07] <FromDiscord> <exelotl> meanwhile `ref` types in Nim are reference-counted
[02:53:11] <nrds> <06Prestige99> my engine is going well, last thing I really need is the collision broad phase.. but all else is working well
[02:53:13] <FromDiscord> <Elegantbeef> I just need to generate a hidden alias procedure for that, i just havent got around to it
[02:53:22] <nrds> <06Prestige99> https://github.com/avahe-kellenberger/shade#clone-and-setup if you want to try out the examples Elegantbeef
[02:53:47] <nrds> <06Prestige99> exelotl hmm interesting
[02:54:26] <FromDiscord> <Elegantbeef> like it should do a `proc hiddenImplOnClick(radio: ptr Radio)` that copies the body of the `onClick`
[02:54:52] <FromDiscord> <Elegantbeef> Which is only used for the dynamic dispatch, otherwise it uses your version
[02:58:11] *** Joins: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[02:59:08] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[03:00:04] <nrds> <06Prestige99> hm I have my engine setting up sdl and other deps via git submodules, building them inside the engine repo, and adding them to the user's PATH. This works well for development inside the repo, but not if someone uses `nimble develop` and tries to use it in their own project
[03:00:33] <nrds> <06Prestige99> Need a way to keep that exported path, or to also use the library's config.nims for projects that use it as a dep
[03:00:35] <FromDiscord> <Elegantbeef> Also generally useless on \nix
[03:00:49] <nrds> <06Prestige99> wdym?
[03:01:35] <FromDiscord> <Elegantbeef> I'd personally rather use my package manager to fetch the dev libraries than have to build them from source
[03:02:01] <FromDiscord> <Elegantbeef> II guess with gpu it makes sense as it's not shipped commonly on package repos
[03:02:20] <nrds> <06Prestige99> yeah 
[03:02:31] <nrds> <06Prestige99> and some are not up to date enough, like ubuntu's SDL2
[03:02:35] <FromDiscord> <Elegantbeef> But with ttf and sdl2 they're in my package repo
[03:04:09] <FromDiscord> <Elegantbeef> Pmunch i do not get why you said my solution wouldnt work
[03:06:18] <FromDiscord> <Elegantbeef> This does remind me it's time to move distro
[03:06:21] <FromDiscord> <Elegantbeef> Just gotta figure out which
[03:06:43] <nrds> <06Prestige99> What are you looking for?
[03:07:00] <FromDiscord> <Elegantbeef> Something that doesnt piss me off with outdate packages 😛
[03:07:10] <nrds> <06Prestige99> Arch :P
[03:07:13] <FromDiscord> <Elegantbeef> Perhaps thinking about doing debian
[03:07:29] <FromDiscord> <Elegantbeef> Eh i'm lazy
[03:07:43] <nrds> <06Prestige99> me too, arch is easy after you get it set up
[03:07:55] <FromDiscord> <Elegantbeef> "get it setup" is the issue
[03:07:56] <FromDiscord> <spoon> manjaro then
[03:08:05] <nrds> <06Prestige99> manjaro is a dumpster fire
[03:08:07] <FromDiscord> <spoon> manjaro is plug and play like ubuntu
[03:08:09] <FromDiscord> <Elegantbeef> Endeavour before manjaro
[03:08:26] <FromDiscord> <spoon> hate apt though
[03:08:33] <FromDiscord> <Elegantbeef> Prestige i'm so lazy i'm using regolith cause i couldnt be arsed to setup i3wm and just keep my .files
[03:10:28] <FromDiscord> <Ayy Lmao> Are `type` and `typeof` essentially the same thing?
[03:10:34] <nrds> <06Prestige99> I mean it's pretty easy to set up, hell arch even has an installer now
[03:10:36] <FromDiscord> <Elegantbeef> yes
[03:11:03] <FromDiscord> <Elegantbeef> Eh i'm probably just going to go with deb to stick to something i'm somewhat familiar with
[03:11:11] <FromDiscord> <Ayy Lmao> Sweet, thanks!
[03:11:21] <FromDiscord> <Elegantbeef> Generally it's suggested now to use `typeof`
[03:11:28] <FromDiscord> <Elegantbeef> It's more clear than `type`
[03:12:39] <FromDiscord> <Elegantbeef> Might also try btrfs finally
[03:13:12] <FromDiscord> <spoon> is there a way to check if an object is either of the type or inherits from the type?
[03:13:21] <FromDiscord> <Elegantbeef> `if x of Y`
[03:13:31] <nrds> <06Prestige99> I hear about issues with btrfs occasionally, I'm sticking with ext4 for a long while
[03:14:01] <nrds> <06Prestige99> But yeah, try out arch or endeavour or garuda maybe
[03:14:17] <FromDiscord> <Elegantbeef> Prestige disregarding me, name a more common event
[03:14:45] <FromDiscord> <Elegantbeef> "Think i'm going to go with debian".... prestige\: "I'll pretend I didnt see that"
[03:14:50] <nrds> <06Prestige99> oh I missed that message :P
[03:14:53] <nrds> <06Prestige99> haha
[03:14:55] <FromDiscord> <huantian> In reply to @Elegantbeef "Might also try btrfs": I’ve heard good stuff about that
[03:14:58] <FromDiscord> <huantian> And it’s fun to say
[03:15:01] <FromDiscord> <huantian> Cus butter
[03:15:07] <nrds> <06Prestige99> I thought deb's packages were like very out of date
[03:15:27] <nrds> <06Prestige99> well stable at least, I guess they have a rolling release distro
[03:15:28] <FromDiscord> <huantian> Not if you use whatever debians rolling release version they have is called
[03:15:34] <FromDiscord> <Elegantbeef> rolling debian
[03:15:40] <nrds> <06Prestige99> tumbleweed? icr
[03:16:03] <FromDiscord> <huantian> Ah yeah that’s what it’s called
[03:16:15] *** Joins: oprypin (~irc@pryp.in)
[03:16:32] <FromDiscord> <huantian> Haha I get it
[03:16:44] <FromDiscord> <Elegantbeef> Debian's is sid not tumbleweed!
[03:16:57] <nrds> <06Prestige99> who is tumbleweed, suse?
[03:17:08] <FromDiscord> <Elegantbeef> Yea
[03:17:39] <FromDiscord> <Elegantbeef> Now to quickly see if i have any toy projects that need uploaded 😛
[03:19:38] <FromDiscord> <huantian> Names are hard why don’t they just call it Debian but rolling
[03:20:56] *** Quits: oprypin (~irc@pryp.in) (Client Quit)
[03:21:16] *** Joins: oprypin (~irc@pryp.in)
[03:21:32] <FromDiscord> <Elegantbeef> Rollbian
[03:21:56] <FromDiscord> <Elegantbeef> Though it's mostly just different package sources so it's just debian but unstable 😛
[03:22:51] <nrds> <06Prestige99> Hm, how am I going to add this dir to the user's PATH...
[03:22:56] <FromDiscord> <Elegantbeef> Well later i need to go ruin my day
[03:23:00] <FromDiscord> <auxym> yeah sid is basically debian's "devel" branch
[03:23:05] <FromDiscord> <huantian> You mean Debian but usable
[03:23:11] <FromDiscord> <huantian> Bye beef 🌊
[03:23:12] <nrds> <06Prestige99> Updating with `putEnv` only persists during execution of the program/script it seems
[03:23:28] <nrds> <06Prestige99> Well said huantain
[03:23:46] <FromDiscord> <huantian> In reply to @nrds "<Prestige> Updating with `putEnv`": That is how shell envs work
[03:23:57] <FromDiscord> <auxym> why do you want to fuck with people's path?
[03:24:17] <nrds> <06Prestige99> dependencies for my library
[03:24:22] <FromDiscord> <huantian> Just manually add it to their bash rc I’m sure they won’t notice
[03:24:30] <nrds> <06Prestige99> Lol
[03:24:57] <nrds> <06Prestige99> I just need the deps added while someone is using my game engine, essentially
[03:25:44] <nrds> <06Prestige99> If you look at https://github.com/avahe-kellenberger/shade/blob/master/config.nims it's using a local `.usr` dir, which is where the submodules build and place their .so files
[03:27:58] <FromDiscord> <auxym> so it's for .so files, not for calling executables?
[03:28:06] <nrds> <06Prestige99> Yeah
[03:28:53] <FromDiscord> <auxym> i don't remember the exact flag but you can pass in extra library lookup paths on the command line
[03:30:07] <FromDiscord> <huantian> `LD_LIBRARY_PATH`?
[03:31:27] <nrds> <06Prestige99> yeah that's one of the things I'm setting
[03:31:48] <nrds> <06Prestige99> but can only seem to be able to set it inside my local repo, not one that's using my lib as a dependency
[03:32:13] <FromDiscord> <auxym> I was thinking `--clibdir` actually
[03:32:36] <FromDiscord> <auxym> but it probably has the same effect
[03:32:55] <nrds> <06Prestige99> but then how do I set it up so that a project using my game engine will have that configured?
[03:32:58] <nrds> <06Prestige99> That's what I'm stuck on
[03:34:10] <FromDiscord> <auxym> maybe `.link.` or `.passL` pragma?
[03:34:41] <FromDiscord> <auxym> or just provide a project template / tell people to add the `clibdir` switch to their config.nims
[03:36:10] <FromDiscord> <auxym> I believe `{.passL: "-L/path/to/your/libs"}` would have the same effect as clibdir
[03:37:17] <nrds> <06Prestige99> hm I'd need to like find the path that nimble puts the project in, maybe
[03:38:33] <FromDiscord> <auxym> yeah not sure if you can make it a relative path
[03:52:07] *** Quits: Jjp137 (~Jjp137@2603-8000-1700-5881-02e9-3aff-fe42-7355.res6.spectrum.com) (Ping timeout: 250 seconds)
[03:52:26] *** Joins: Jjp137 (~Jjp137@098-148-210-192.res.spectrum.com)
[03:57:07] <nrds> <06Prestige99> wonder if anyone has tried this before
[04:03:00] <FromDiscord> <salt> sent a code paste, see https://play.nim-lang.org/#ix=3TK5
[04:03:57] <FromDiscord> <exelotl> I guess cause `ord` is generic or has several overloads, so it doesn't know what version of `ord` to use
[04:05:31] <FromDiscord> <salt> i'll try to remember this, thanks
[04:06:13] <FromDiscord> <huantian> look at the error: `Error: 'ord' cannot be passed to a procvar`
[04:07:17] <FromDiscord> <exelotl> ah I guess I'm wrong and it's because `ord` is compiler magic?
[04:10:29] <FromDiscord> <exelotl> wow https://play.nim-lang.org/#ix=3TK9
[04:11:06] <FromDiscord> <exelotl> I'm impressed that the compiler is smart enough to do this
[04:12:16] <FromDiscord> <exelotl> In reply to @salt "i'll try to remember": now you have to un-remember it because it was wrong xD
[04:13:15] <FromDiscord> <thadeudepaula> sent a long message, see http://ix.io/3TK8
[04:14:16] <FromDiscord> <salt> In reply to @exelotl "now you have to": lol
[04:15:08] <FromDiscord> <salt> In reply to @huantian "look at the error:": yeah, the error doesn't let me know why i can't pass it, i thought maybe it was an obvious reason to those familiar with the language
[04:16:24] <FromDiscord> <spoon> i wish i could use compiler magic 😢 when do i get to define my own "xor" operator and get to put them between two variables like and
[04:16:49] <Zectbumo> like in lisp?
[04:17:23] <FromDiscord> <salt> i'm rewriting a python project in nim and there are parts of it that feel like even less boilerplate even with a compiled language, it's really nice
[04:18:32] <FromDiscord> <spoon> lisp better metaprogramming than nin wtf?
[04:19:08] <FromDiscord> <salt> maybe, but harder (to (look at))
[04:19:40] <Zectbumo> :))))))))))
[04:26:54] <nrds> <06Prestige99> Maybe someone like @dom96 would know
[04:26:59] <nrds> <06Prestige99> regarding my above question
[04:27:28] <nrds> <06Prestige99> maybe I should just bootstrap it in my module's main file.. hmm
[04:28:15] <FromDiscord> <auxym> Prestige: where are these so files you want to link coming from? Are you distributing prebuilt so files with your nimble package?
[04:28:54] <FromDiscord> <auxym> If not, and the user is building them, then why are they in the nimble dir and not in your build output dir?
[04:28:56] <nrds> <06Prestige99> sort of, there's a nimble task named "setup" that builds them into a local directory
[04:29:55] <FromDiscord> <auxym> ok, then I suggest that this local directory be a subdir of the user's project dir, like "build" or "PrestigeLibraryBuild" or whatever
[04:30:16] <FromDiscord> <auxym> probably way easier to link that in via relative paths, compared to trying to figure the nimble package dir
[04:30:48] <nrds> <06Prestige99> but link how, is the question
[04:31:39] <FromDiscord> <auxym> passL?
[04:32:03] <FromDiscord> <auxym> I used in .compile. in a project to compile-in a C file based on a compile-time define
[04:32:29] <FromDiscord> <huantian> In reply to @salt "yeah, the error doesn't": hm actually that's weird, why is ord not a procvar
[04:32:44] <nrds> <06Prestige99> You're saying like in a pragma? I haven't done that before
[04:33:38] <FromDiscord> <auxym> yeah. for compile I had to use a macro to generate a pragma but you might not have to.
[04:33:40] <FromDiscord> <auxym> https://github.com/auxym/nim-on-samd21/blob/master/src/startup.nim
[04:34:35] <FromDiscord> <huantian> In reply to @huantian "hm actually that's weird,": I think it is that ord is a magic builtin that can't be passed around like that, and the error message is outdated
[04:34:38] <FromDiscord> <auxym> the startup.c file path it's passing in is relative to the project build dir, too.
[04:36:15] <FromDiscord> <auxym> try adding {.passL: "-L./relative/path/to/your/so".} at the top of the file that needs those
[04:38:02] <nrds> <06Prestige99> in the library, or in the project using the library?
[04:38:13] <FromDiscord> <exelotl> sent a long message, see http://ix.io/3TKe
[04:39:32] <LuxuryMode> Is `os.commandLineParams` the best way to fetch command line params or is there some other preferred proc or approach for this?
[04:40:12] <FromDiscord> <spoon> now how do i make a macro to make the xor keyword real 😢
[04:40:32] <nrds> <06Prestige99> LuxuryMode I use https://nim-lang.org/docs/parseopt.html 
[04:40:39] <FromDiscord> <auxym> In reply to @nrds "<Prestige> in the library,": Prestige: since linking is a single call (I think?), I think anywhere you put it would result in nim adding it to its linker call
[04:40:46] <FromDiscord> <exelotl> In reply to @spoon "now how do i": I'm pretty sure the language has an xor keyword 😅
[04:41:06] <FromDiscord> <auxym> you can compile with `-v` to see nim's gcc command lines
[04:41:08] <LuxuryMode> nrds: ah beautiful, was looking for something like this. Thank you!
[04:41:21] <nrds> <06Prestige99> Hm I'll try it in the "main" module of the libary then
[04:41:22] <FromDiscord> <spoon> i meant nxor
[04:41:36] <FromDiscord> <spoon> :)
[04:41:38] <FromDiscord> <auxym> LuxuryMode: I think the cligen library is also pretty popular
[04:42:12] <FromDiscord> <exelotl> ah
[04:42:15] <FromDiscord> <huantian> it might just be easier to bitwise not then xor lol
[04:42:49] <LuxuryMode> thanks auxym
[04:42:51] <FromDiscord> <spoon> lol, just being able to define things that take arguments on either side have been on my wishlist for some reason
[04:42:52] <FromDiscord> <auxym> In reply to @spoon "i meant nxor": `template nxor(a, b: untyped): untyped = not (a xor b)`?
[04:43:24] <FromDiscord> <spoon> hm
[04:43:34] <FromDiscord> <huantian> you could just deal with having to type an extra period
[04:43:52] <FromDiscord> <auxym> In reply to @spoon "hm": nim actually implements a lot of its own stuff that way: https://github.com/nim-lang/Nim/blob/version-1-6/lib/system/comparisons.nim#L128
[04:44:11] <FromDiscord> <spoon> ye, i've seen the magic pragma before
[04:44:19] <FromDiscord> <spoon> havent read for a while though
[04:44:42] <FromDiscord> <auxym> no magic there, it's just a template
[04:44:51] <FromDiscord> <huantian> sent a code paste, see https://paste.rs/Ftn
[04:45:24] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (Ping timeout: 240 seconds)
[04:45:59] <FromDiscord> <spoon> In reply to @auxym "no magic there, it's": yea, nim has a special set of characters that work that way though
[04:46:23] <FromDiscord> <auxym> oh yeah you're right about that
[04:47:15] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[04:47:34] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[04:51:00] <FromDiscord> <huantian> Who needs bitwise xnor when you can just use a loop and !=
[04:51:11] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[04:51:38] *** Joins: 077AAIBZ5 (~NimBot@ns501209.ip-142-4-210.net)
[04:51:38] *** Quits: 077AAIBZ5 (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[04:52:05] <FromDiscord> <auxym> haha
[04:52:23] <FromDiscord> <auxym> would gcc optimize that to an xnor? 😄
[04:53:31] <FromDiscord> <demotomohiro> x86_64 or arm have xnor instruction?
[04:54:00] <FromDiscord> <demotomohiro> As far as I know, they have and, or, xor
[04:57:04] <LuxuryMode> Is there a unit type in Nim, e.g. `proc doSomething(): Unit = echo "whatever"` or is this https://nim-lang.org/docs/manual.html#types-procedural-type basically what I'm dealing with?
[04:58:11] <FromDiscord> <huantian> I think you just do `proc()` yeah
[04:58:35] <LuxuryMode> thanks
[04:58:41] <LuxuryMode> Also, is there a REPL for Nim?
[05:03:41] <FromDiscord> <auxym> inim works OK
[05:04:36] <FromDiscord> <auxym> not sure why they don't merge this so it compiles on 1.6 though 😦 https://github.com/inim-repl/INim/pull/131
[05:05:53] <FromDiscord> <auxym> meanwhile you can `nimble install https://github.com/auxym/INim@#update-cligen`
[05:10:34] <LuxuryMode> thanks auxym
[05:12:33] <LuxuryMode> hmm, where exactly does nimble install that? Seems I need to add some dir to my path
[05:13:36] <FromDiscord> <auxym> on linux it's `~/.nimble/bin`
[05:14:32] <FromDiscord> <huantian> I think you can also do `nim secret`
[05:19:57] <LuxuryMode> thanks
[05:20:03] <LuxuryMode> How do I get out of nim secret? :P
[05:20:31] <LuxuryMode> ah `quit()`
[05:25:10] <FromDiscord> <exelotl> `nim secret` uses Nimscript (the subset of Nim that works at compile time), so it'll probably fall over as soon as you import something that wasn't made with Nimscript in mind
[05:25:41] <FromDiscord> <exelotl> That's why it's secret
[05:30:08] <FromDiscord> <auxym> ah, yeah. inim compiles everything on the fly with tcc
[05:51:30] *** Joins: neurocyte1 (~neurocyte@user/neurocyte)
[05:53:07] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:53:50] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:53:50] *** neurocyte1 is now known as neurocyte
[05:59:16] <FromDiscord> <Elegantbeef> So debian sid is fun 😛
[05:59:42] <FromDiscord> <Elegantbeef> Let's just say gnome isnt very compatible with it due to python being shit
[06:04:08] <FromDiscord> <Girvo> In reply to @Elegantbeef "<@823468778704076810>\: still debugging macro?": Yeah. I can't seem to get my head around how to make a macro pragma replace itself with the codegenDecl pragma in a variable definition
[06:04:24] <FromDiscord> <Elegantbeef> What do you have presently?
[06:04:39] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TKl
[06:04:44] <FromDiscord> <Elegantbeef> `[4]` is wrong
[06:05:05] <FromDiscord> <Girvo> Yeah I thought so. I think it needs to be `[2]` or `[1]` based on the dumptree I got?
[06:05:18] <FromDiscord> <Elegantbeef> Not only that but in 1.6 and below variable macros are written `macro rtcNoInit(lh, rh, ex: untyped)`
[06:06:21] <FromDiscord> <Girvo> Ahhhhh
[06:06:22] <FromDiscord> <Girvo> Sweet
[06:06:32] <FromDiscord> <Girvo> Alright I'll start again I think
[06:06:47] <FromDiscord> <Elegantbeef> Also i did  make your macro in micros for fun 😛
[06:06:59] <FromDiscord> <Girvo> Hah how does it look in micros?
[06:07:14] <FromDiscord> <Elegantbeef> https://github.com/beef331/micros/blob/master/tests/test2.nim#L5-L14
[06:07:16] <FromDiscord> <Girvo> Once I get it working in straight std/macros, it'll be fun to compare
[06:07:36] <FromDiscord> <Girvo> ugh thats so much cleaner to understand haha
[06:07:49] <FromDiscord> <Elegantbeef> That's the point
[06:08:04] <FromDiscord> <Elegantbeef> Oh god trying to use a floating window manager after using i3wm for so long is interesting
[06:08:39] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TKm
[06:08:51] <FromDiscord> <Elegantbeef> Yea you can
[06:08:53] <FromDiscord> <Girvo> Haha man I force my floating WM to act like a tiling one. I refuse to give it up
[06:09:00] <FromDiscord> <Elegantbeef> you can make it so `ex` has to be `nnkNilLit`
[06:09:06] <FromDiscord> <Girvo> Ah neat
[06:09:19] <FromDiscord> <Elegantbeef> Eh i'm just trying debian sid a try cause i was pissed off with some ubuntu packages
[06:09:46] <FromDiscord> <Girvo> Because RTC_NOINIT_ATTR's whole deal is that you don't initialise it, it "carries over" memory from its previous execution/boot
[06:09:51] <FromDiscord> <Elegantbeef> Easier to use a normal DE than i3wm for testing
[06:09:59] <FromDiscord> <Girvo> (Well, you don't initialise it always, I guess)
[06:10:07] <FromDiscord> <Girvo> And yeah thats fair enough
[06:10:55] <FromDiscord> <Elegantbeef> if you want to enforce no intializing just do `if ex.kind != nnkNilLit: error("You should know better no intializing RTC vars", ex)`
[06:12:56] <FromDiscord> <Girvo> Haha thats basically exactly what I just wrote
[06:20:14] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TKs
[06:20:30] <FromDiscord> <Elegantbeef> In the above yes
[06:20:41] <FromDiscord> <Elegantbeef> `rh` can be any valid type so `nnkBracket` is allowed
[06:20:45] <FromDiscord> <Elegantbeef> Even `nnkCall`
[06:22:34] <FromDiscord> <Girvo> Alright. I need to go read some macro docs/examples I think. Been far too long since I tackled them
[06:22:54] <FromDiscord> <Elegantbeef> shamelessly links my writeup again
[06:23:10] <FromDiscord> <Girvo> Haha thats what I'm going through 😉
[06:23:18] <FromDiscord> <Girvo> (That and dom's book)
[06:31:56] *** Quits: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 272 seconds)
[06:32:57] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TKv
[06:33:29] <FromDiscord> <Elegantbeef> Well i'd suggest using `genasts` instead of quote now but the above should work
[06:33:30] <FromDiscord> <Girvo> Only if I remove the `ex.kind != nnkNilLit` though, as if I don't remove it, it picks up the _next_ statement if I don't have `= nil`
[06:33:54] <FromDiscord> <Girvo> Oh for sure, this is just a first pass to make sure I understand what it's doing
[06:34:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/5X5
[06:34:35] <FromDiscord> <Girvo> Oh nice
[06:34:45] <FromDiscord> <Elegantbeef> `import std/genasts` for that
[06:34:49] <FromDiscord> <Elegantbeef> anyway what's the issue?
[06:35:25] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TKw
[06:35:30] <FromDiscord> <Girvo>  https://media.discordapp.net/attachments/371759389889003532/958185100758102036/unknown.png
[06:35:40] <FromDiscord> <Girvo>  https://media.discordapp.net/attachments/371759389889003532/958185143565176923/unknown.png
[06:36:48] <FromDiscord> <Girvo> And lastly
[06:36:49] <FromDiscord> <Elegantbeef> Full code?
[06:36:49] <FromDiscord> <Girvo>  https://media.discordapp.net/attachments/371759389889003532/958185430744985640/unknown.png
[06:37:25] <FromDiscord> <Girvo> https://pastebin.com/hn4gvsUn
[06:37:32] <FromDiscord> <Girvo> ^ full code for that module
[06:38:05] <FromDiscord> <Elegantbeef> `nnkEmpty` is the kind
[06:38:09] <FromDiscord> <Girvo> Ah!
[06:38:16] <FromDiscord> <Girvo> Man I'm a moron sometimes
[06:38:26] <FromDiscord> <Elegantbeef> Hey i lied to you
[06:38:41] <FromDiscord> <Girvo> yeah but I should've picked up on it
[06:38:46] <FromDiscord> <Girvo> I have the dumptree in front of me lol
[06:38:57] <FromDiscord> <Girvo> _telling_ me it needs to be Empty not Nil lol
[06:39:36] <FromDiscord> <Girvo> Now the only interesting thing is that `Error Type` business. It seems the `int` type itself is "lost" somewhere through this macro? At least for autocomplete anyway. Maybe it doesn't matter much
[06:40:01] <FromDiscord> <Elegantbeef> It's an untyped macro
[06:40:01] <FromDiscord> <Girvo> If I try to assign a string to it, Nim of course complains correctly
[06:40:29] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:108d:b8d3:fe1c:9a86) (Read error: Connection reset by peer)
[06:40:40] <FromDiscord> <Girvo> Right so there is not much that can be done there
[06:41:16] <FromDiscord> <Girvo> Well, good enough for a first pass anyway. The C output is correct, and actual usage of the variable is correct and type checked 🙂
[06:41:43] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:6cc3:403d:8974:9620)
[06:42:40] <FromDiscord> <Girvo> I can't remember ever writing a full typed macro myself lol
[06:42:57] <FromDiscord> <Elegantbeef> You use them alot for introspective heavy code
[06:43:57] <FromDiscord> <Girvo> Yeah, would be super handy for certain DSLs I could imagine
[06:44:53] <FromDiscord> <Elegantbeef> I use them for the nimscripter bridge, cant beat that introspection 😛
[06:48:06] <FromDiscord> <huantian> Too bad I can’t make a typed macro for myself
[06:48:15] <FromDiscord> <Elegantbeef> Lol
[06:48:19] <FromDiscord> <Girvo> Whats the impact of this on my variable pragma macro? https://github.com/nim-lang/Nim/commit/2bd1aa186e09565b2103394bd281478fa1b10ef1
[06:48:42] <FromDiscord> <Girvo> Is it supposed to use the unary node rather than triplet now?
[06:49:00] <FromDiscord> <Girvo> (I was reading through this: https://github.com/nim-lang/RFCs/issues/220)
[06:49:24] <FromDiscord> <Elegantbeef> you later wrap it with a when block and support both
[06:50:37] <FromDiscord> <Elegantbeef> Atleast you ideally want to support stable and open yourself up to devel imo
[06:51:33] <FromDiscord> <Girvo> > Given how simple these changes are I'm worried if I'm missing something.↵Haha, I feel that, Araq. All the damned time.
[06:51:47] <FromDiscord> <Girvo> Ahhhh right, I'm with you
[06:52:29] <FromDiscord> <Girvo> Yeah once I can wrap up a lot of what I've added and bring it into an updated Nesper, I will need to. Though some of Nesper needs to be brought up to date with devel as well I believe
[06:53:21] <FromDiscord> <Girvo> Is that change not in 1.6.2 yet?
[06:53:34] <nrds> <06Prestige99> Setting LD_LIBRARY_PATH to my path with .so files works, but using --passL"-L{thePath}" does not. Am I missing something here?
[06:53:43] <FromDiscord> <Girvo> (edit) "1.6.2" => "1.6.4"
[06:53:48] <FromDiscord> <Elegantbeef> Nope it's devel will be a change in next version afaik
[06:53:53] <FromDiscord> <Girvo> Ahhhh cool
[06:53:56] <FromDiscord> <Elegantbeef> so `1.8` or `2.0` whatever comes first
[06:54:18] <FromDiscord> <Elegantbeef> also stable is at 1.6.4
[06:54:18] <FromDiscord> <Girvo> I'm tempted to switch to devel and see what works/breaks. I'll put it on my todo list and take a crack at some point
[06:54:33] <FromDiscord> <Girvo> Yeah I edited my comment haha, I misremembed the sub version
[06:54:34] <FromDiscord> <Elegantbeef> A majority of stuff will wrok
[06:54:38] <FromDiscord> <Elegantbeef> work perhaps
[06:55:04] <FromDiscord> <Girvo> Yeah I expect it will. I'm curious about Nesper, it was written against v1.4 originally
[06:55:25] <FromDiscord> <Elegantbeef> Mostly going to just get warnings, less so errors
[07:00:17] <FromDiscord> <Patitotective> @ElegantBeef while you were calling my design wacky, i was working on it https://github.com/Patitotective/ImTemplate https://media.discordapp.net/attachments/371759389889003532/958191335641346108/prefsmodal1.png https://media.discordapp.net/attachments/371759389889003532/958191335825879121/main.png https://media.discordapp.net/attachments/371759389889003532/958191336043970570/aboutmodal.png
[07:00:41] <FromDiscord> <Patitotective> (edit) "@ElegantBeef while you were calling my design wacky, i was working on it ... https://github.com/Patitotective/ImTemplate" 03added "lmao"
[07:00:55] <nrds> <06Prestige99> Does --passL not work with 1.6.4 or something?
[07:01:04] <FromDiscord> <Elegantbeef> It does
[07:02:09] <FromDiscord> <Elegantbeef> Patito you dont use the wacky design though do you?
[07:02:32] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Patito you dont use": not the callback stuff
[07:02:53] <FromDiscord> <Elegantbeef> You use the proper return value and a buffer
[07:02:55] <FromDiscord> <Elegantbeef> Good
[07:03:51] <FromDiscord> <Alexis> sent a code paste, see https://play.nim-lang.org/#ix=3TKz
[07:03:57] <FromDiscord> <Elegantbeef> That's the way to do it
[07:04:14] <nrds> <06Prestige99> Elegantbeef: okay help me understand this then - I'm building with `--passL="-L.usr/lib/"` where `libSDL2_gpu.so` lives at`.usr/lib/libSDL2_gpu.so`, but when at runtime I get `libSDL2_gpu.so: cannot open shared object file: No such file or directory`
[07:04:42] <nrds> <06Prestige99> I've tried absolute paths, no trailing `/` etc
[07:04:48] <FromDiscord> <Elegantbeef> that's for compile linking
[07:05:18] <FromDiscord> <Patitotective> In reply to @Elegantbeef "That's the way to": 🙃  still im not convinced about how im managing the "cache", im almost i can make it work without it but huh
[07:05:25] <FromDiscord> <Elegantbeef> add the file to your `LD_LIBRARY_PATH=".usr/lib" myBinaryName`
[07:05:26] <FromDiscord> <Patitotective> (edit) "almost" => "sure"
[07:05:55] <nrds> <06Prestige99> ah that's what I had originally but I can't make my library enforce that for the users of said library.. back to square one
[07:05:55] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 246 seconds)
[07:06:14] <FromDiscord> <Elegantbeef> What do you mean?
[07:06:36] <nrds> <06Prestige99> If someone uses my library they will need that env variable set to use it
[07:06:55] <nrds> <06Prestige99> or maybe there's another way but I haven't found one, yet
[07:07:37] <FromDiscord> <Elegantbeef> I dont follow the issue
[07:08:09] <nrds> <06Prestige99> If someone uses my library they won't be able to run/compile their program if the LD_LIBRARY_PATH isn't set
[07:08:26] <nrds> <06Prestige99> trying to solve this on my library's end instead of telling everyone to set up this path
[07:11:02] <FromDiscord> <Elegantbeef> I mean you're dynamic linking you either have the library in the system path or in a path provided with ldlibpath
[07:11:19] <FromDiscord> <Elegantbeef> So either the library is beside the binary, in `lib` or in the libpath
[07:11:49] <FromDiscord> <Elegantbeef> You can always make a shell script or use a nimble task to get it in there
[07:11:54] <FromDiscord> <Elegantbeef> Or make your own build tool
[07:12:15] <nrds> <06Prestige99> was hoping there was a way to do this with nimble but haven't seen a way yet
[07:12:40] <FromDiscord> <Elegantbeef> Follow the impbox way and make your own build tool
[07:12:47] <nrds> <06Prestige99> hm perhaps
[07:13:02] <nrds> <06Prestige99> Was hoping nimble could link more than just the binary
[07:13:32] <FromDiscord> <Elegantbeef> I dont know what you mean by that
[07:14:22] <nrds> <06Prestige99> Like it links a binary, but if I could have it also add the .so files to the path that would solve my issue
[07:14:57] <nrds> <06Prestige99> hmm might have found an option
[07:26:21] <nrds> <06Prestige99> nvm idk what this nimble documentation means
[07:30:33] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[07:33:01] <FromDiscord> <Girvo> Could you not use `putEnv` to adjust the env var, if thats what you mean by PATH?
[07:33:48] <FromDiscord> <Girvo> Though finding shared libraries is an OS packaging problem more so than anything else
[07:36:53] <nrds> <06Prestige99> The libs are shipped with the library, I'm just having a hard time setting them up for some reason
[07:37:02] <FromDiscord> <Girvo> If it's dynamically linked and you want to make sure its there (and you redistribute the library), you solve that by packaging the library in a known place, and baking that relative path into your compile. Or, on macOS, you just put it in the right spot in the application bundle haha 🙂
[07:37:38] <nrds> <06Prestige99> I just need LD_LIBRARY_PATH which I can configure in config.nims for the library's development, but when something else uses that library, the path doesn't get set
[07:39:14] <FromDiscord> <Girvo> Tbh I wouldn't want a library messing with my LD_LIBRARY_PATH automatically anyway myself haha. It'll break some of my C projects if it's not careful 😉 But thats my and my weird use-cases, I get what you are after. I swear theres a better way than LD_LIBRARY_PATH though, I looked into a lot of this when I was doing macOS application dev in Nim, but I can't find the project sadly
[07:40:46] <FromDiscord> <Girvo> `-Wl,-rpath,'$ORIGIN/../lib'` is the better way of doing it if this was C. @ElegantBeef theres a way to do those exact linker options in Nim no? I remember there was
[07:41:10] <FromDiscord> <Elegantbeef> `passL` pragma
[07:42:33] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TKE
[07:43:44] <FromDiscord> <Girvo> This should let users still override which library its linked against via LD_LIBRARY_PATH or LD_PRELOAD as well, but have it work in the default case as long as you package the `.so` files next to the binary
[07:43:54] <FromDiscord> <Girvo> Unless I'm misunderstanding what you're trying to achieve!
[07:45:55] <nrds> <06Prestige99> It would only be the LD_LIBRARY_PATH for the running program so it should be fine eh
[07:46:04] <FromDiscord> <Girvo> Actually you might not even need `-Wl` I think that you just do `-rpath,'$ORIGIN/../path/to/wherever;`
[07:46:17] <FromDiscord> <Girvo> (edit) "`-rpath,'$ORIGIN/../path/to/wherever;`" => "`-rpath,'$ORIGIN/../path/to/wherever'`"
[07:47:11] <FromDiscord> <Girvo> Like, yeah, I guess haha. But `rpath` is the "proper" way to do it
[07:47:45] <nrds> <06Prestige99> hm will have to look up what that is
[07:48:37] <FromDiscord> <Girvo> rpath tells the linker where it should be looking for your shared libraries 🙂 It's basically LD_LIBRARY_PATH but baked into the binary, rather than messing with env vars
[07:50:05] <FromDiscord> <demotomohiro> You can ask Nim to pass that linker option to gcc with `--passL`.
[07:50:23] <FromDiscord> <Elegantbeef> demo is a few messages behind
[07:50:27] <FromDiscord> <Elegantbeef> They'll catch up eventually
[07:50:46] <FromDiscord> <Girvo> hah. `--passL` doesn't need `-Wl` right, thats implied?
[07:51:02] <FromDiscord> <Elegantbeef> no clue i dont play with the C compiler
[07:51:05] <FromDiscord> <Girvo> As passL _is_ linker options
[07:51:14] <FromDiscord> <Girvo> And `-Wl` is telling GCC "here are the linker options" lol
[07:52:07] <FromDiscord> <demotomohiro> Nim uses gcc as linker so you still need to pass `-wl` to `--passL`.
[07:52:16] <FromDiscord> <Girvo> Okay good to know!
[07:52:40] <FromDiscord> <Girvo> @nrds what relative path are your shared libraries being placed in?
[07:52:53] <FromDiscord> <Girvo> Asked a better way: what are you trying to set LD_LIBRARY_PATH to right now?
[07:53:06] <FromDiscord> <Elegantbeef> No his name is prestige
[07:53:10] <FromDiscord> <Elegantbeef> Nrds is the bridge
[07:53:15] <FromDiscord> <Elegantbeef> Cmon girvo i believe in you
[07:53:17] <FromDiscord> <Girvo> lol
[07:53:32] <FromDiscord> <Girvo> I need another coffee
[07:53:41] <FromDiscord> <Elegantbeef> But it's 2133
[07:53:58] <FromDiscord> <Girvo> 1333 for me 😉
[07:54:16] <FromDiscord> <Elegantbeef> Sucks to suck
[07:55:20] <FromDiscord> <Girvo> hahaha. Anyway @prestige -- whats the path you're setting LD_LIBRARY_PATH to? I can give you the `--passL` you're after, and you can either do it as a nim.cfg build arg, nimble build arg, or do it as a pragma in your library code 🙂
[07:56:32] <nrds> <06Prestige99> So --passL works for the build step but not when I'm using the library in another project, apparently
[07:56:43] <nrds> <06Prestige99> relative to the project it's `.usr/lib`
[07:56:44] <FromDiscord> <Girvo> I found my old project! And yep, `rpath` as a passL linker option is exactly how I did it lol
[07:57:37] <nrds> <06Prestige99> well i was just using -L
[07:57:54] <FromDiscord> <Girvo> @Prestige okay cool, where is the binary going to be output to? the top level? `./binary`, then `./.usr/lib/`?
[07:58:12] <nrds> <06Prestige99> wherever nimble puts it I suppose
[07:59:01] <FromDiscord> <Girvo> -L is still needed, thats what tells it what SO it should be looking for. -rpath is what tells it _where_ it should be looking for that SO
[08:00:53] <FromDiscord> <Girvo> What I've done in these situations, is basically make my nimble build task have an `before` block that copies the files needed to wherever nimble is going to put the binary
[08:01:54] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:02:28] <FromDiscord> <Girvo> An example, is that I need `nimbase.h` in a particular place for my current project to be able to build. So I literally copy it from Nim before building
[08:02:38] <FromDiscord> <Girvo> sent a code paste, see https://paste.rs/9AW
[08:03:53] <FromDiscord> <Girvo> `binDir` being where the binary is going to go, IIRC. You can check for the existence of your `binDir / ".usr" / "lib"` directory, create it if it doesn't exist, and copy your SO files all in that `before build` block
[08:04:55] <NimEventer> New thread by Mardiyah: How to do runtime constant in forward ?, see https://forum.nim-lang.org/t/9057
[08:08:53] <FromDiscord> <Girvo> Will nimble bring down some binary files if its a dependency of another project when `nimble install`-ed? And if so, where should they be put?
[08:09:18] <nrds> <06Prestige99> Yeah I was hoping it could, but the nimble docs aren't super clear to me
[08:09:36] <nrds> <06Prestige99> so maybe I should just write a custom solution like Elegantbeef was saying
[08:10:54] <FromDiscord> <Elegantbeef> It's what impbox did for nico and i did for the rpi pico stdlivb
[08:10:54] <FromDiscord> <Girvo> That's basically what I'd recommend 🙂 Even if it's as simple as a `Makefile` with some variables at the top, in a "template" project you ask your users to clone down. That will include the `.so` files in a known-good place, and allow you to ensure it's packaged correctly (with `rpath` set to where you now _know_ it will be)
[08:11:12] <FromDiscord> <Girvo> Its what I did for my SDL-on-macOS projects too back in the day
[08:11:29] <FromDiscord> <Elegantbeef> Actually girvo i could probably steal some help from you on the picostdlib 😛
[08:11:45] <nrds> <06Prestige99> any docs on rpath?
[08:11:46] <FromDiscord> <Girvo> Hah I'd be glad to help 🙂
[08:12:15] <FromDiscord> <Girvo> Yep, one tick!
[08:12:20] <FromDiscord> <Girvo> https://en.wikipedia.org/wiki/Rpath
[08:12:46] <FromDiscord> <Girvo> https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_mono/ld.html -- search for `-rpath dir`
[08:13:20] <FromDiscord> <Elegantbeef> The big thing I need to do is make is so no one has to manually add the libraries they're using to cmake, so I parse the C files then emit a list of the libraries that they're using, mostly just need to know the best way handling it @auxym and I have had a back and forth about it for a bit
[08:13:29] <FromDiscord> <Girvo> ^ that's not quite the current version, but rpath simply hasn't really changed in decades lol
[08:13:59] <FromDiscord> <demotomohiro> Latest binutils doc: https://sourceware.org/binutils/docs-2.38/ld/Options.html#Options
[08:14:09] <FromDiscord> <Girvo> Ah perfect! Read that one ^^^
[08:14:12] <FromDiscord> <demotomohiro> then grep `-rpath`
[08:14:54] <FromDiscord> <Girvo> @ElegantBeef Ooooh yeah thats an interesting problem! I have a couple of solutions to it. But a question for you: how cross platform does this need to be haha
[08:15:27] <FromDiscord> <Elegantbeef> I mean it needs to work for all OS that someone wants to develop for the rpi pico on
[08:15:36] <FromDiscord> <Girvo> Yeah fair enough 🙂
[08:15:55] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:16:06] <FromDiscord> <Girvo> There are Linux-specific solutions, but they fall apart when cross-compiling from Windows (and macOS to a lesser extent)
[08:16:27] <FromDiscord> <Elegantbeef> I mean we have a build tool to do all the generating
[08:16:41] <FromDiscord> <Elegantbeef> I just havent really got to the best way of using the list i generate into cmake
[08:17:19] <FromDiscord> <Girvo> Is it up on github somewhere? I can take a look. You're basically trying to build the list to pass to `find_library` I assume?
[08:17:47] <FromDiscord> <Elegantbeef> Of course it is
[08:18:18] <FromDiscord> <Elegantbeef> https://github.com/beef331/picostdlib/blob/master/src/template/csource/CMakeLists.txt#L27
[08:18:32] <FromDiscord> <Elegantbeef> `pico_stdlib hardware_adc` are what the issue is presently
[08:18:47] <FromDiscord> <Elegantbeef> Right now you have to manually add the libraries you're using there
[08:18:59] <FromDiscord> <Girvo> Yeah, we have to do the same in ESP32 land
[08:19:15] <FromDiscord> <Elegantbeef> I have this PR right now which generates a list of the librariies https://github.com/beef331/picostdlib/blob/master/src/template/csource/CMakeLists.txt#L27
[08:19:18] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TKO
[08:19:49] <FromDiscord> <Girvo> Zephyr, I'm certain, has a nice solution for this. I'll have a look today and get back to you
[08:20:08] <FromDiscord> <demotomohiro> This document explains how linux search shared libraries at runtime: https://www.man7.org/linux/man-pages/man8/ld.so.8.html
[08:21:06] <LuxuryMode> If I declare a variable of type `OptParser` using `let` and then try iterating over it, I get a strange error. Is this because the iterating requires mutating the `OptParser` itself or..? https://play.nim-lang.org/#ix=3TKP
[08:21:40] <FromDiscord> <Elegantbeef> `getOpt` takes a `var OptParser`
[08:21:51] <FromDiscord> <Girvo> His back-and-forward is right: if its autogenerating, instead of modifying the developers CMakeLists.txt, you create your own picostdlib-libraries.txt file that gets included into it... oh ignore me, you guys already went through all that lol
[08:22:44] <FromDiscord> <Elegantbeef> Just wanted to get your insight here, as you seemingly have more knowledge here
[08:22:55] <LuxuryMode> Oh I see `iterator getopt(p: var OptParser): tuple[kind: CmdLineKind, key, val: string] {...}` I did not know a param could specify the type of binding required (not sure that's the right way to say that)
[08:22:57] <FromDiscord> <Girvo> Yeah I'm going through the PR 🙂
[08:23:10] <LuxuryMode> Where can I find this explained in the docs?
[08:23:14] <FromDiscord> <Elegantbeef> My CMake knowledge is uhhh i walk past someone writting `cmake build`
[08:23:21] <FromDiscord> <Girvo> Hahaha
[08:23:29] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#procedures-var-parameters
[08:23:37] <LuxuryMode> Thanks very much
[08:24:13] <FromDiscord> <Elegantbeef> No problem
[08:24:26] <FromDiscord> <Girvo> HIs point about having piconim run `cmake ..` is the way to go IMO, if you've got a build tool wrapping/calling CMake anyway, it should run it. Now to check if there is a nicer way of handling this library list generation, one tick
[08:24:41] <LuxuryMode> In Python, one can make a list from an iterator with `list(my_iterator)` Is there a way to accomplish the same thing in Nim?
[08:24:55] <LuxuryMode> Or just check if `item in iterator` kind of thing...
[08:25:08] <FromDiscord> <Elegantbeef> `import std/sequtils; let mtColl = toSSeq(myIter)`
[08:25:14] <FromDiscord> <Elegantbeef> `toSeq` even
[08:25:19] <FromDiscord> <Elegantbeef> My keyboard likes multi pressing
[08:25:24] <LuxuryMode> ah very nice. Thank you!
[08:25:45] <FromDiscord> <Elegantbeef> Since you're doing parseopt i'm going to say you dont want that
[08:26:31] <LuxuryMode> You mean I really just want to be iterating?
[08:26:46] <FromDiscord> <Elegantbeef> I'm assuming you're checking for specific flags?
[08:27:08] <LuxuryMode> right
[08:27:26] <LuxuryMode> My goal is to be able to ignore all other flags if `--help` is supplied
[08:27:27] <FromDiscord> <Elegantbeef> Iterating over and using case statements is a much nicer idea imo
[08:27:32] <LuxuryMode> and in that case print the usage
[08:27:59] <LuxuryMode> or perhaps I want to just fail if any other flags are supplied together with `--help`. Not sure what the right approach is
[08:29:59] <LuxuryMode> That makes sense. `case key of "help", "h": writeHelp()` 
[08:30:25] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3TKQ
[08:30:43] <FromDiscord> <Elegantbeef> You could even abuse the exception handler if you wanted, but that's odd
[08:31:01] <LuxuryMode> Thanks, that's helpful
[08:32:23] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3TKS for that try except method
[08:32:29] <FromDiscord> <Girvo> sent a long message, see http://ix.io/3TKT
[08:32:56] <FromDiscord> <Elegantbeef> I went through something similar to that girvo
[08:33:08] <FromDiscord> <Girvo> Yeah fair enough 🙂 I figured you must've haha
[08:33:25] <FromDiscord> <Elegantbeef> Actually i didnt use system vars
[08:33:38] <FromDiscord> <Elegantbeef> I manually wrote to a file using a ugly work around
[08:33:53] <FromDiscord> <Girvo> Ah I just though an env var isn't a bad fit, coz you can just use `ENV` in CMake then
[08:34:24] <FromDiscord> <Elegantbeef> The annoying part is that it means you have to manually annotate modules and forgetting is a silent issue since we have -10 test suites
[08:34:30] <FromDiscord> <Elegantbeef> Doesnt even know how you begin to test this API
[08:34:51] <FromDiscord> <Girvo> Hah, yeah testing in this space is... well, look, theres a reason most of this stuff in other languages also doesn't have tests 😉
[08:35:56] <FromDiscord> <Girvo> Anyway, I'll have a think and do some experimentation. Is there a particular CMake version you can require? Later versions have added a lot more stuff to help with this sort of thing
[08:36:23] <FromDiscord> <Elegantbeef> I'm using whatever the pico-sdk uses
[08:36:56] <FromDiscord> <Elegantbeef> Afterall my code is just wrapping their sdk dumbly and slowly, especially since I have practically nothing to toy with the pico with
[08:37:32] <FromDiscord> <Girvo> I have a pico around here somewhere. I can have a play with it, see what things are like
[08:38:02] <FromDiscord> <Girvo> But the long and the short is, most embedded cmake stuff requires you to add the libraries you want to your CMakeLists.txt somewhere lol
[08:38:19] <FromDiscord> <Elegantbeef> Yea but doing it manually sucks
[08:39:11] <FromDiscord> <Girvo> I don't disagree. Welcome to embedded 😄
[08:39:13] <FromDiscord> <Elegantbeef> The checking includes is imo the best solution given that it makes it so i can abstract the C code anyway i want
[08:39:32] <FromDiscord> <Girvo> Oh yeah, it's not a bad solution IMO, and if it works right now that's better than most.
[08:39:53] <FromDiscord> <Girvo> I'm looking at how Zephyr does it, and they do sort of the same thing, just in CMake scripting instead, from what I can see
[08:39:55] <FromDiscord> <Elegantbeef> Well it doesnt work presently since no one piped it together yet, i was waiting for casey's PR
[08:39:58] <FromDiscord> <Girvo> https://github.com/zephyrproject-rtos/zephyr/blob/main/cmake/linker/ld/target.cmake
[08:40:35] <FromDiscord> <Girvo> `LIBRARIES_PRE_SCRIPT` and `POST_SCRIPT` as well as `zephyr_link_libraries`
[08:40:56] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TKW
[08:41:28] <FromDiscord> <Elegantbeef> Mines more readable 😛
[08:41:48] <FromDiscord> <Girvo> CMake scripting is a god-damned dark art lol
[08:42:10] <FromDiscord> <Girvo> I feel like I'm summoning cthulu every time I do it
[08:42:31] <FromDiscord> <Elegantbeef> Yea i want to avoid it since it's just unmaintainable imo
[08:43:07] <FromDiscord> <Girvo> https://github.com/zephyrproject-rtos/zephyr/blob/main/cmake/linker/ld/ld_script.cmake
[08:43:26] <FromDiscord> <Elegantbeef> Did i stutter?
[08:43:31] <FromDiscord> <Girvo> This is basically the script they use to map symbol names to strings, then eventually to the target_link_library
[08:43:38] <FromDiscord> <Girvo> Haha nah I'm just curious how they do it 😉
[08:44:40] <FromDiscord> <Girvo> They're quite literally using regexes. Its near identical in terms of approach, though the way they do it is they compile it _without_ the libraries linked, search the binary for unlinked/not found symbols, then map them to the libraries they _do_ need to link
[08:45:08] <FromDiscord> <Elegantbeef> Ah ok so i'll be happy with mine
[08:45:10] <FromDiscord> <Girvo> So, yeah, stick with parsing `#include` 🙂
[08:47:11] <FromDiscord> <Girvo> I wonder if one could just link all the libraries, and then strip the unused symbols out lol
[08:48:02] <FromDiscord> <Girvo> Haha yeah, `-dead-strip` would technically do it
[08:49:08] <FromDiscord> <Girvo> Or `-fdata-sections -ffunction-sections` and link with `-Wl,--gc-sections` all in one command, with `-Os`. but that feels nearly as rube-goldberg machine like as your current solution 😂
[08:50:21] <FromDiscord> <Girvo> `-flto` also, though thats Clang, iirc.
[08:50:26] <FromDiscord> <Elegantbeef> How dare you say it's rube goldbergy
[08:50:48] <FromDiscord> <Girvo> Man any time I'm parsing C code, I want to curl up in a ball and cry 😉
[08:51:00] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:6cc3:403d:8974:9620) (Quit: Zectbumo)
[08:51:03] <FromDiscord> <Elegantbeef> Hey scanf is easy
[08:53:58] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:55:24] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:6cc3:403d:8974:9620)
[08:56:42] <LuxuryMode> Anything else I should have .gitignore aside from these? https://github.com/github/gitignore/blob/main/Nim.gitignore
[09:05:05] <FromDiscord> <Elegantbeef> binaries is another thing
[09:06:52] <LuxuryMode> *.out?
[09:07:06] <FromDiscord> <Elegantbeef> default on linux is no extension
[09:07:20] <LuxuryMode> ah I see a .out after running nimble build on my Mac
[09:07:33] <FromDiscord> <congusbongus> I just add to the .gitignore as I go because I can't predict ahead of time what crazy files various IDEs/tools add↵also I check what I'm committing which is a concept that seems to escape a lot of my juniors /rant
[09:07:41] <LuxuryMode> nim build doesn't do that though
[09:07:50] <LuxuryMode> sorry, `nim c`
[09:08:28] <FromDiscord> <Elegantbeef> How dare you insult me congus, i often assume my ignore covers me and notice always 1 second too late so have to do a rebase to fix my fuckup!
[09:08:40] <LuxuryMode> lel
[09:09:17] <FromDiscord> <congusbongus> I bet your commit messages are like "fixed thing"
[09:09:30] <FromDiscord> <Elegantbeef> Depends on what i'm working on
[09:09:35] <LuxuryMode> git commit -m "another commit"
[09:09:38] <FromDiscord> <Elegantbeef> If i'm working on a toy project yea
[09:13:30] <FromDiscord> <Girvo> Pfft. `git commit --amend` 😉
[09:13:37] <FromDiscord> <Girvo> Just do it all as one commit! mwahahaha
[09:13:51] <FromDiscord> <Elegantbeef> When you accidently already pushed
[09:14:18] <FromDiscord> <Girvo> Easy! `git push --force`
[09:14:23] <FromDiscord> <Girvo> Problem "solved" 😄
[09:14:42] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 272 seconds)
[09:16:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:26:18] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[09:26:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:42:23] <FromDiscord> <huantian> It’s fine if nobody else is looking to
[09:52:10] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:44:49] <FromDiscord> <Phil> In reply to @congusbongus "I just add to": Imagine having colleagues that make small commits of a small group of 3-4 with changes that relate to one another, instead of one massive commit of 30 files saying "added thing"
[10:45:07] <FromDiscord> <Phil> (edit) "In reply to @congusbongus "I just add to": Imagine having colleagues that make small commits of a small group of 3-4 ... with" 03added "files at most"
[11:07:42] <FromDiscord> <congusbongus> did you mean to reply to a different message?
[11:29:31] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 260 seconds)
[11:55:00] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[12:02:07] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[12:04:03] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[12:04:04] *** neurocyte8 is now known as neurocyte
[12:14:03] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 260 seconds)
[12:40:15] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[12:44:38] *** Joins: xet7 (~xet7@user/xet7)
[12:55:42] *** Joins: PMunch (~PMunch@user/pmunch)
[12:59:51] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:68ab:e13e:5ffa:d36a:e229)
[13:09:09] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:6cc3:403d:8974:9620) (Remote host closed the connection)
[13:18:04] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:68ab:e13e:5ffa:d36a:e229)
[13:19:53] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:68ab:e13e:5ffa:d36a:e229) (Ping timeout: 252 seconds)
[13:39:45] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:68ab:e13e:5ffa:d36a:e229) (Quit: Leaving)
[13:40:00] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:68ab:e13e:5ffa:d36a:e229)
[13:46:26] <PMunch> I love how this simple topic just turned into a list of good ways to learn programming: https://forum.nim-lang.org/t/9053
[14:06:47] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3TLP
[14:06:56] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3TLQ
[14:06:56] <FromDiscord> <tandy> this is the code it generates
[14:07:23] <FromDiscord> <tandy> sent a code paste, see https://paste.rs/18i
[14:07:32] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:68ab:e13e:5ffa:d36a:e229) (Read error: Connection reset by peer)
[14:07:48] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3TLR
[14:10:07] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[14:10:46] *** Joins: gsalazar_ (~gsalazar@194.38.148.130)
[14:11:37] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3TLU
[14:13:16] *** Quits: gsalazar (~gsalazar@132.120.90.149.rev.vodafone.pt) (Ping timeout: 246 seconds)
[14:17:27] <FromDiscord> <untoreh> can you make a generic accessor over an object variant?
[14:19:36] *** Quits: gsalazar_ (~gsalazar@194.38.148.130) (Quit: Leaving)
[14:19:45] *** Joins: gsalazar (~gsalazar@194.38.148.130)
[14:20:14] <FromDiscord> <untoreh> sent a code paste, see https://play.nim-lang.org/#ix=3TLW
[14:24:54] <FromDiscord> <Solitude> no, you cant
[14:28:56] <FromDiscord> <TryAngle> In reply to @Girvo "I feel like I'm": I've no clue tbh. but I've heard Zig toolchain can replace all that stuff 🤔 ↵is that true?
[15:06:57] <FromDiscord> <Rika> In reply to @untoreh "something like this doesnt": Generics have to resolve to one type at compile time. An accessor like this is dependent on run time values to determine the return type
[15:40:16] <FromDiscord> <Phil> In reply to @congusbongus "did you mean to": No, it was just early in the morning before proper waking time and I fucked up sentence structure in english.↵Was more meaning to say that while you struggle with folks unable to use gitignore, I struggle with folks unable to make small commits which makes understanding their code based on the steps they took a massive pain in my butt.
[15:43:41] <FromDiscord> <Zoom> This is what forums are. The recurring plot is\: 5 posts to understand what the issue is, 10 posts to ask "Why do you need to solve this? Solve this instead!", 5 posts with solutions, mostly wrong, 50 posts discussing how the working solution was wrong, 5000 posts discussing how we all live in a simulation↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[15:45:57] <PMunch> Haha :P
[15:46:10] <PMunch> Sounds about right
[15:47:06] <FromDiscord> <Zoom> Anyone packaged Nim stuff for Debian? I'm looking at their [guide](https://www.debian.org/doc/manuals/debmake-doc/index.en.html)'s ToC and my head starts spinning
[15:47:50] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (Ping timeout: 252 seconds)
[15:48:59] <PMunch> @Zoom, once you've mastered all these packaging guidelines it would be extremely helpful if you could write a small guide on how to package Nim applications for Linux :)
[15:49:49] <FromDiscord> <fbpyr> [Zoom](https://matrix.to/#/@Zoom:matrix.org)\: on my debian machines I just pulled the pre-built linux binaries\: https://nim-lang.org/install_unix.html
[15:49:53] <PMunch> Just had a look at that guide, 8 chapters :S
[15:50:04] <FromDiscord> <Zoom> Please, God, no \:O↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[15:50:18] <PMunch> Where the basics chapter is split into 27 subchapters
[15:52:57] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[16:12:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[16:14:38] <FromDiscord> <auxym> In reply to @Elegantbeef "Hey scanf is easy": Been reading you and @Girvo's conversation (I was asleep, you guys must be on the west coast). interesting stuff. Another random idea, sorta similar to parsing `#include`s: maybe we could `exportc` a special, dummy token from each picostdlib library? like a dummy proc PICOSTDLIB_INCLUDE_TIME or whatever and then scan for that in the generated C? if it's a a no-op proc then impact on code size 
[16:18:19] <PMunch> Hmm, I wonder if Futhark would handle Pico headers
[16:37:37] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:50:23] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:24:05] <FromDiscord> <hmmm> friendsies, what is the best way to make a field object to store some flags and objects? I'm currently using a seq and reading if the flag is there but sounds dumb. I think I've seen people using bitfiddling bitmasks bitvoodoo and wondering if it makes sense for me 🤔
[17:24:27] <FromDiscord> <Rika> Flags are usually represented as sets in Nim
[17:24:36] <FromDiscord> <hmmm> really?
[17:24:40] <FromDiscord> <hmmm> had no idea
[17:24:53] <FromDiscord> <Rika> Yes because most people don’t use it and do it the C way
[17:25:00] <FromDiscord> <hmmm> do you have some examples of people using them for flags in the wild?
[17:25:06] <FromDiscord> <Rika> Uh
[17:25:15] <FromDiscord> <Rika> Nothing really comes to mind
[17:26:22] <FromDiscord> <hmmm> hmm I'll just fiddle a bit with sets and see if they make sense for my case, thanks rika 💯
[17:29:54] <FromDiscord> <auxym> In reply to @PMunch "Hmm, I wonder if": if you want a challenge try tinyusb 🙂
[17:30:25] <FromDiscord> <auxym> our issue with pico atm isn't so much the headers as wrapping / automating the pico sdk's cmake based build
[17:35:26] <FromDiscord> <auxym> @hmmm  https://nim-lang.org/docs/manual.html#set-type-bit-fields
[17:36:00] <FromDiscord> <auxym> we use them a lot in picostdlib, I can point you to some examples if you want
[17:36:22] <PMunch> @auxym, the problem with these libraries is (at least the AVR stuff) that they require a special compiler
[17:36:30] <PMunch> So the clang-based parsing doesn't work
[17:36:44] <PMunch> As long as you can build them with a "normal" compiler then it should work just fine
[17:36:47] <FromDiscord> <auxym> you mean tinyusb? or cmake?
[17:37:56] <FromDiscord> <auxym> the challenge with tinyusb is macros. for example, the generation of usb descriptors is implemented 100% through a whole lot of macros
[17:39:06] <FromDiscord> <Rika> Hand conversion time
[17:44:45] <FromDiscord> <auxym> beef and I gave up, haha. someday maybe. Right now I'm just calling them from a C file that I also include in the build.
[17:50:03] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 260 seconds)
[17:51:21] *** Joins: rockcavera (~rc@192.12.112.192)
[17:51:21] *** Quits: rockcavera (~rc@192.12.112.192) (Changing host)
[17:51:21] *** Joins: rockcavera (~rc@user/rockcavera)
[17:54:30] <FromDiscord> <hmmm> In reply to @auxym "<@!887269570765791243>  https://nim-lang.org/docs/m": thanks auxy, I wanted an example just to make sure I was reading them correctly even if I guess there is not much science to it lol
[17:55:02] <FromDiscord> <hmmm> also why do you use bitfields instead of sets?
[17:55:30] <FromDiscord> <hmmm> oh they ARE sets lol
[17:55:36] <FromDiscord> <Rika> was gonna say
[17:55:56] <FromDiscord> <Rika> a (non-hash) set is a bitfield (only in implementation, though its doubtful it will change)
[17:58:13] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:58:54] <FromDiscord> <auxym> In reply to @hmmm "thanks auxy, I wanted": here's an example, there are others in the same file. it's fully compatible with the c struct that is imported, too. https://github.com/beef331/picostdlib/blob/master/src/picostdlib/tusb.nim#L317
[17:59:45] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Max SendQ exceeded)
[18:00:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:06:42] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:68ab:de8:eb9a:790d:7076)
[18:14:42] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:68ab:de8:eb9a:790d:7076) (Read error: Connection reset by peer)
[18:14:58] <PMunch> Ah C macros are a PITA
[18:20:04] <FromDiscord> <Phil> Under which circumstances does -d:Danger actually become a bad choice to use?↵Or other way around if it's easier, under which circumstances does it become a good choice to use (assuming it breaks something must of the time unless specific circumstances X)?↵Mostly asking because I have no idea of the implications that come with "turn off runtime checks and turn on optimizer"
[18:21:36] <FromDiscord> <auxym> IMO: only use Danger for high-performance numerical code, or maybe embedded. Otherwise the cost of runtime checks is pretty cheap compared to the advantages of not having silent overflow bugs
[18:22:34] <FromDiscord> <auxym> -d:release does optimization and keeps the runtime checks, fyi
[18:23:57] <FromDiscord> <auxym> there's more info on runtime checks here: https://nim-lang.org/docs/manual.html#pragmas-compilation-option-pragmas danger turns all of that off
[18:29:02] <FromDiscord> <Solitude> In reply to @Isofruit "Under which circumstances does": always -d:danger, fuck it. if you need checks, you deserve to crash.
[18:31:21] *** Joins: arkurious (~arkurious@user/arkurious)
[18:33:21] <FromDiscord> <auxym> well, the whole point of checks is causing crashes instead of silently doing bad stuff (integer overflow, accessing memory outside an array...)
[18:34:27] <FromDiscord> <Solitude> yeah, whatever, also put --panics:on in your global nim.cfg
[18:37:12] <FromDiscord> <tandy> when you want good jsgen \:)↵(@Phil)
[18:37:27] <FromDiscord> <tandy> \dont
[18:38:33] *** Joins: lumo_e (~enrico@151.29.53.201)
[18:50:14] <FromDiscord> <Phil> ... Looking through the compiler docs, I don't know why nim supports Nintendo switch cross complain, but I am amused that it does
[18:50:32] <FromDiscord> <Phil> (edit) "complain," => "compilation,"
[18:51:51] <FromDiscord> <ajusa> what's the correct alternative for using a Table[string, string] on the JS backend?
[18:52:39] <FromDiscord> <ajusa> In reply to @Isofruit "... Looking through the": I've gotten it working on the 3DS as well, and exelotl runs Nim on the GBA
[19:04:14] *** Quits: lumo_e (~enrico@151.29.53.201) (Remote host closed the connection)
[19:11:56] <FromDiscord> <ajusa> In reply to @ajusa "what's the correct alternative": JsAssoc appears to be the correct thing to use
[19:18:02] *** Joins: lumo_e (~enrico@151.29.53.201)
[19:18:54] <FromDiscord> <demotomohiro> In reply to @Isofruit "... Looking through the": It seems this is first PR adds Nintendo switch support to Nim: https://github.com/nim-lang/Nim/pull/8069
[19:22:14] *** Parts: anddam (~anddam@user/anddam) (WeeChat 3.4.1)
[19:23:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[19:46:24] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[19:58:20] <FromDiscord> <leorize> federico3 is our resident Debian maintainer
[19:59:36] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:00:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[20:01:06] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:15:42] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:29:53] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 260 seconds)
[20:56:22] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[20:59:10] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[20:59:38] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[21:02:44] <FromDiscord> <kevin> Is there a way to convert/parse a byte string into a nim array?
[21:02:56] <FromDiscord> <kevin> `let key: array[32, byte] = "FFFFFFFF00000000FFFFFFFF00000000".parseHexStr()`
[21:03:05] <FromDiscord> <kevin> (edit) "key:" => "test:"
[21:03:13] <FromDiscord> <kevin> something like this?
[21:04:32] <FromDiscord> <kevin> `got 'string' for 'parseHexStr but expected array[0..31 byte]`
[21:05:07] <FromDiscord> <kevin> Is this kind of conversion even possible? I know arrays have some runtime limitations
[21:07:56] <FromDiscord> <qb> Is cross compiling with clang doable?
[21:10:14] *** Quits: Lord_Nightmare (znc@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[21:12:03] *** Joins: Lord_Nightmare (znc@user/lord-nightmare/x-3657113)
[21:12:24] <FromDiscord> <Generic> theoretically yes
[21:12:30] <FromDiscord> <Generic> though I personally never got it working
[21:13:13] <FromDiscord> <Generic> a single clang build can target multiple systems
[21:14:22] <FromDiscord> <Generic> but that's already where it can get hard, because lots of distributions of clang are only compiled with support for compiling whatever is native
[21:15:26] <FromDiscord> <Generic> if you get over this hurdle, you need to figure out how to get the standard library into this mix
[21:16:15] <FromDiscord> <qb> Okay so I better boot up the windows vm and compile with clang directly ;D
[21:16:34] <FromDiscord> <Generic> ah you're not talking about embedded
[21:17:37] <FromDiscord> <Generic> idk about that, I've heard that cross compiling for windows with gcc and mingw works relatively well
[21:18:25] <FromDiscord> <Generic> but I never tried it myself
[21:30:39] <rockcavera> kevin, yes, it's possible
[21:32:38] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3TNw
[21:32:47] <FromDiscord> <kevin> so close lol but I'm missing something
[21:36:21] <FromDiscord> <kevin> maybe I don't actually need an `array[32, byte]` ? Maybe just use the openarray where functions require a `array[32, byte]`?
[21:37:05] <Amun-Ra> kevin: does it have to be an array?
[21:37:32] <FromDiscord> <kevin> My functions all take parameters of `array[32, byte]`
[21:37:35] <FromDiscord> <huantian> I think you might want a cast? Or just uh manually convert the string into chars and bytes?
[21:37:52] <FromDiscord> <huantian> I don’t know if you can just cast a string to a byte array
[21:42:19] <Amun-Ra> kevin: https://play.nim-lang.org/#ix=3TNy
[21:43:37] <FromDiscord> <kevin> actual magic
[21:43:47] <FromDiscord> <kevin> thanks! ❤️
[21:52:47] *** Joins: vicfred (~vicfred@user/vicfred)
[22:17:29] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[22:32:38] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:6cc3:403d:8974:9620)
[22:45:35] <FromDiscord> <Phil> sent a long message, see http://ix.io/3TNT
[22:47:50] <FromDiscord> <Solitude> In reply to @Isofruit "Reading through it, though": ~~if you can write manual parser in under 5 minutes for that regex - you are misusing regex.~~ fuck regex
[22:47:53] <PMunch> @Phil well you could go through the string character by character manually
[22:48:33] <FromDiscord> <Phil> ... that sounds so painful I'd rather deal with regexes
[22:49:00] <PMunch> And if you haven't programmed a lot then the complexity of Regex on top of the complexity of learning to program could be tricky
[22:50:10] <FromDiscord> <Phil> I mean, maybe I'm predisposed since in Bioinformatics 50% what you write is regexes since the vast majority of time you're looking for patterns of amino-acid/nucleotide-chains (which programmatically speaking are just a single string a chain), so I'm very used to them, but man
[22:50:20] <FromDiscord> <Phil> In reply to @PMunch "And if you haven't": Okay, fair, mixes with Araqs language in a language thing
[22:50:49] <FromDiscord> <Phil> (edit) "a" => "per"
[22:50:51] <PMunch> Exactly
[22:51:18] <PMunch> I mean if you're learning Nim coming from a different language and already know Regexes then use them as you would elsewhere (which should already be sparingly)
[22:53:23] <FromDiscord> <auxym> I think araq was trying to make the point: don't use strings to store data (in-memory) that could be stored in a properly typed object/struct
[22:53:45] <FromDiscord> <auxym> via an adhoc serialization protocol using regexes...
[22:55:06] <FromDiscord> <auxym> I'm not sure that a college-level Algorithms textbook is exactly the right place to start for someone who's never, ever programmed, but heh, everyone learns differently I guess.
[22:56:28] <FromDiscord> <Phil> Hmmm I might actually want to play around with that distinct string thing
[22:57:02] <FromDiscord> <Phil> I do have stuff like "campaignName", "articleName" which could be used as distinct strings I guess
[22:57:15] <FromDiscord> <Phil> So far I only went around eliminating strings through enums when possible
[23:15:49] *** Joins: tiorock (~rc@192.12.112.192)
[23:15:50] *** Quits: tiorock (~rc@192.12.112.192) (Changing host)
[23:15:50] *** Joins: tiorock (~rc@user/rockcavera)
[23:15:50] *** rockcavera is now known as Guest4465
[23:15:50] *** Quits: Guest4465 (~rc@user/rockcavera) (Killed (calcium.libera.chat (Nickname regained by services)))
[23:15:50] *** tiorock is now known as rockcavera
[23:16:55] *** Joins: tiorock (~rc@192.12.112.192)
[23:16:56] *** Quits: tiorock (~rc@192.12.112.192) (Changing host)
[23:16:56] *** Joins: tiorock (~rc@user/rockcavera)
[23:16:56] *** rockcavera is now known as Guest1762
[23:16:56] *** tiorock is now known as rockcavera
[23:20:43] *** Quits: Guest1762 (~rc@user/rockcavera) (Ping timeout: 260 seconds)
[23:22:57] *** Joins: tiorock (~rc@192.12.112.192)
[23:22:58] *** Quits: tiorock (~rc@192.12.112.192) (Changing host)
[23:22:58] *** Joins: tiorock (~rc@user/rockcavera)
[23:22:58] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (copper.libera.chat (Nickname regained by services)))
[23:22:58] *** tiorock is now known as rockcavera
[23:33:18] <FromDiscord> <hmmm> broskis are emojis universal like ascii in the sense that I can count on them to be displayed regardless of whatever contraption the user is bogged with?
[23:41:36] <FromDiscord> <hmmm> oh they are unicode
[23:42:04] <FromDiscord> <hmmm> but a common kind of unicode right? 🤔
[23:46:30] <PMunch> Certainly more common than hieroglyphs or cuneiform
[23:46:44] <PMunch> But certainly not as ubiquitous as ASCII
[23:47:05] <FromDiscord> <hmmm> hmm that's what I thought, but I guess good enough is good enough
[23:47:10] <PMunch> And of course with the normal caveat that glyphs can we drawn differently between platforms
[23:47:15] <FromDiscord> <hmmm> they get displayed like garbage on ascii only systems?
[23:47:17] <PMunch> What are you doing with them?
[23:47:24] <PMunch> Pretty much
[23:47:44] <PMunch> Ever seen those Ãẗ things in the middle of a word?
[23:47:59] <FromDiscord> <hmmm> I need to make some elements in my app visible and don't want to make them with something like () lol
[23:48:00] <PMunch> Those are probably characters that don't render properly because of encoding issues
[23:48:12] <PMunch> Terminal app?
[23:48:19] <FromDiscord> <hmmm> yea I've seen them
[23:48:21] <FromDiscord> <hmmm> no gui app
[23:48:39] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:48:44] <PMunch> Ah, then it's probably just up to the renderer
[23:49:23] <FromDiscord> <hmmm> pmunchie since you are here listen to this other question, today we looked into sets and bitfield, but
[23:49:45] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[23:49:47] <FromDiscord> <hmmm> what happens if I define an enum for my field with ABC and then I want to add function D?
[23:49:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[23:50:11] <FromDiscord> <hmmm> aren't strings more flexible for people that don't know how much more functionality they want to add?
[23:50:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:50:34] <FromDiscord> <auxym> emojis are utf8, which is slowling becoming the standard, but they're a bit special and not even all systems that support utf8 support emojis
[23:50:43] <PMunch> @hmmm, then you need to add another field to your enum
[23:50:49] <PMunch> I'm not sure what the question is
[23:51:12] <FromDiscord> <hmmm> hmm the things are getting committed to disk I don't know if I can change the enum on the fly
[23:51:55] <PMunch> Uhm, not quite sure what you're doing here
[23:51:56] <FromDiscord> <hmmm> the context is using sets / enum for flags lol I didn't tell
[23:52:04] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:52:19] <FromDiscord> <hmmm> hmm I'll thing about it some more
[23:52:30] <FromDiscord> <auxym> yeah but what's the story about dynamically changing your enum defs, that sounds a bit weird
[23:53:02] <PMunch> When serialising an enum to a file it will just get turned into an int
[23:53:05] <PMunch> Same for bit sets
[23:53:50] <PMunch> So if you extend the enum (as long as it doesn't require more bytes than the previous definition, this can be controlled in Nim) a new reader will be able to read an older file just fine
[23:53:57] <FromDiscord> <hmmm> no wait what I really want to say is that if I have an enum that is north south east ovest I can't add up later right?
[23:54:02] <PMunch> As long as you keep all the enum values the same of course
[23:54:16] <PMunch> @hmmm, sure you can
[23:54:21] <FromDiscord> <hmmm> oh rly?
[23:54:27] <FromDiscord> <hmmm> I'm totally amazed lol
[23:54:30] <FromDiscord> <Solitude> whos gonna stop you
[23:54:41] <PMunch> I mean you can't do it dynamically while your program is running
[23:54:55] <FromDiscord> <auxym> add what? a new enum entry, or a new flag in the set? And when? At run time or in a subsequent build or something?
[23:54:56] <PMunch> But if you recompile your program you can do whatever you want :P
[23:55:55] <FromDiscord> <hmmm> hmm excuse me I'll go dabbling some tests on enums I was half convinced you couln't change them lol
[23:58:12] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[23:58:59] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
