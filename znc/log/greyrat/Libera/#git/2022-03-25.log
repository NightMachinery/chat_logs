[00:02:03] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[00:03:44] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[00:04:52] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[00:06:07] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[00:06:21] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:e4ee:8819:6d77:cf26)
[00:06:49] *** Quits: duxsco (~Thunderbi@user/duxsco) (Remote host closed the connection)
[00:07:08] *** Joins: duxsco (~Thunderbi@user/duxsco)
[00:07:20] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[00:07:35] *** Quits: funhouse (~funhouse@user/funhouse) (Quit: Client closed)
[00:08:17] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[00:08:56] *** Joins: Misotauros (~Misotauro@gateway/vpn/pia/misotauros)
[00:11:08] *** Quits: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca) (Quit: Leaving.)
[00:11:44] *** Joins: hbautista (~hbautista@187.171.53.196)
[00:12:19] *** Quits: Jacques (~Jacques@cpe-173-172-37-214.tx.res.rr.com) (Ping timeout: 256 seconds)
[00:13:34] *** Joins: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca)
[00:14:18] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[00:14:39] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[00:14:54] *** Quits: hongkongliberato (~trisqueli@223.149.75.248) (Ping timeout: 252 seconds)
[00:15:25] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[00:15:36] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Client Quit)
[00:17:28] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[00:18:00] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[00:19:09] *** Quits: duxsco (~Thunderbi@user/duxsco) (Remote host closed the connection)
[00:19:27] *** Joins: duxsco (~Thunderbi@user/duxsco)
[00:21:16] *** Quits: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge) (Ping timeout: 272 seconds)
[00:27:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[00:28:07] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[00:28:26] *** Quits: jelmer (~jelmer@user/jelmer) (Remote host closed the connection)
[00:28:49] *** Quits: madewokherd (~urk@65-128-244-235.mpls.qwest.net) (Quit: If your computer stops responding for a long time, turn it off and then back on.)
[00:29:07] *** Joins: madewokherd (~urk@65-128-244-235.mpls.qwest.net)
[00:29:41] *** Joins: hongkongliberato (~trisqueli@223.149.101.155)
[00:30:45] *** Joins: jelmer (~jelmer@user/jelmer)
[00:32:25] *** Quits: iffraff (~quassel@2605:a601:aae0:4a00:2a66:7863:a0d2:38ad) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:33:07] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Quit: junktext_)
[00:35:08] *** Quits: jumpcutking (uid459573@id-459573.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:35:32] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[00:38:55] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:38:55] *** Joins: nasamuffin (~nasamuffi@173.84.105.34.bc.googleusercontent.com)
[00:39:13] *** Joins: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge)
[00:39:18] *** Quits: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca) (Read error: Connection reset by peer)
[00:39:30] *** Joins: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca)
[00:39:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:40:06] *** Joins: realies1 (~realies@user/realies)
[00:40:14] *** Lord_of_Life_ is now known as Lord_of_Life
[00:40:43] *** Quits: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca) (Client Quit)
[00:40:43] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[00:41:08] *** Joins: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca)
[00:41:46] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:41:47] *** Quits: realies (~realies@user/realies) (Quit: Ping timeout (120 seconds))
[00:41:47] *** realies1 is now known as realies
[00:41:50] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 260 seconds)
[00:43:15] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[00:43:20] *** Joins: leah2_ (~leah@vuxu.org)
[00:43:22] *** Joins: theoceaniscool_ (~theoceani@93.177.120.22)
[00:44:10] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:e4ee:8819:6d77:cf26) (Quit: Client closed)
[00:44:37] *** Quits: bambanxx (~bambanx@2800:150:106:1061:ddab:8549:6a:7a63) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:45:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:45:24] *** Joins: bambanxx (~bambanx@2800:150:106:1061:ddab:8549:6a:7a63)
[00:45:34] *** Joins: howdoi_ (uid224@id-224.lymington.irccloud.com)
[00:46:28] *** Quits: theoceaniscool (~theoceani@93.177.120.22) (Ping timeout: 260 seconds)
[00:46:28] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 260 seconds)
[00:46:28] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Read error: Connection reset by peer)
[00:46:28] *** howdoi_ is now known as howdoi
[00:47:33] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:48:55] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 240 seconds)
[00:49:08] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:49:49] *** Quits: bambanxx (~bambanx@2800:150:106:1061:ddab:8549:6a:7a63) (Ping timeout: 240 seconds)
[00:50:48] *** Quits: Jong (~Jong@2620:10d:c090:400::5:7a46) (Ping timeout: 260 seconds)
[00:50:48] *** Quits: Murr (~Murr@212-51-143-101.fiber7.init7.net) (Remote host closed the connection)
[00:51:26] *** Joins: Murr (~Murr@212-51-143-101.fiber7.init7.net)
[00:52:09] *** Joins: hololeap (~hololeap@user/hololeap)
[00:54:04] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:55:02] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 252 seconds)
[00:58:08] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Max SendQ exceeded)
[00:58:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:59:18] *** Quits: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca) (Quit: Leaving.)
[01:00:39] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[01:04:38] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[01:04:49] *** Quits: bket (~bket@84-85-227-212.fixed.kpn.net) (Remote host closed the connection)
[01:06:01] *** Quits: tyson2 (~user@bras-base-toroon0949w-grc-02-142-114-235-113.dsl.bell.ca) (Remote host closed the connection)
[01:07:02] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Read error: Connection reset by peer)
[01:07:14] *** Joins: bket (~bket@84-85-227-212.fixed.kpn.net)
[01:09:20] *** Joins: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net)
[01:10:10] *** Joins: Jacques (~Jacques@wireless-mustang7.nat.smu.edu)
[01:12:27] *** Quits: duxsco (~Thunderbi@user/duxsco) (Remote host closed the connection)
[01:12:49] *** Joins: duxsco (~Thunderbi@user/duxsco)
[01:14:19] *** leah2_ is now known as leah2
[01:16:59] *** Quits: duxsco (~Thunderbi@user/duxsco) (Remote host closed the connection)
[01:17:10] *** Joins: duxsco (~Thunderbi@user/duxsco)
[01:20:24] *** Joins: Jong (~Jong@2620:10d:c090:400::5:7a46)
[01:23:06] *** Quits: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4) (Ping timeout: 252 seconds)
[01:24:18] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Ping timeout: 260 seconds)
[01:24:47] *** Joins: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4)
[01:24:54] <imMute> Git forges that look at commit name/email instead of authenticating the push itself are more harm than good.
[01:29:39] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:30:27] *** Joins: jazzy (~jaziz@user/jaziz)
[01:32:16] *** Quits: hbautista (~hbautista@187.171.53.196) (Quit: Leaving)
[01:34:00] *** Joins: malmalmal (~malmalmal@38.pool92-178-53.dynamic.orange.es)
[01:34:30] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[01:35:17] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[01:35:29] <nedbat> I can get GitHub pull requests locally with `git fetch origin pull/299/head:pr/299 && git checkout pr/299`, but then I can't pull to get more changes.  I can do this: `git pull origin pull/299/head; git reset --hard FETCH_HEAD`, which works, but that last command seems really odd... What should I do instead?
[01:36:45] *** Quits: Jacques (~Jacques@wireless-mustang7.nat.smu.edu) (Ping timeout: 256 seconds)
[01:38:37] *** Quits: jusski (~user@88.118.123.217) (Ping timeout: 240 seconds)
[01:39:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[01:42:57] <vaio> imMute: i'll transmit the message to $boss ;)
[01:43:00] <vaio> (thanks)
[01:43:01] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:44:12] <imMute> vaio: which forge is it if you don't mind me asking?
[01:44:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[01:44:24] <vaio> bitbucket
[01:45:13] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[01:45:59] <imMute> ugh.  good to know.  I'll be avoiding bitbucket not.
[01:46:36] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 245 seconds)
[01:47:31] <vaio> :)
[01:49:46] *** Joins: hbautista (~hbautista@187.171.53.196)
[01:54:11] *** Joins: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca)
[01:55:34] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[01:56:19] *** Quits: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca) (Remote host closed the connection)
[01:56:51] *** Quits: thiago (~thiago@2804:431:cfcb:fbdf:5fb8:99b3:936d:8195) (Ping timeout: 260 seconds)
[01:58:37] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Ping timeout: 256 seconds)
[02:05:49] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[02:15:13] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:18:56] *** Joins: tatuio (~tatuio@2804:14c:6583:6001:b19:38fe:b614:5cfc)
[02:23:18] *** Quits: malmalmal (~malmalmal@38.pool92-178-53.dynamic.orange.es) (Quit: Leaving)
[02:24:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[02:29:00] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[02:29:25] *** Quits: t0mm13b (~t0mm13b@user/t0mm13b) (Ping timeout: 240 seconds)
[02:34:30] *** Quits: spaceone (~spaceone@wc1.wechall.net) (Ping timeout: 268 seconds)
[02:34:32] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:36:06] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:36:10] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[02:38:32] *** Joins: t0mm13b (~t0mm13b@user/t0mm13b)
[02:39:50] *** Quits: AbleBacon_ (~AbleBacon@user/AbleBacon) (Client Quit)
[02:41:23] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[02:46:22] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[02:46:58] *** Joins: spaceone (~spaceone@wc1.wechall.net)
[02:48:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[02:50:11] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 256 seconds)
[02:53:33] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[02:54:51] *** Quits: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge) (Ping timeout: 268 seconds)
[02:55:11] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[03:01:04] *** Joins: wakeup (~wakeup@user/wakeup)
[03:01:19] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[03:02:17] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 240 seconds)
[03:04:10] *** Joins: dansan (~daniel@75.81.148.51)
[03:05:47] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[03:07:48] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[03:10:30] <wakeup> what does -- mean here "git checkout -- file"
[03:11:14] <BtbN> end of arguments
[03:11:34] <OMGOMG> well, end of options
[03:11:57] *** Quits: cdown (~cdown@cpe-98-15-154-102.hvc.res.rr.com) (Ping timeout: 256 seconds)
[03:12:01] <BtbN> think of a file called --force
[03:12:27] *** Joins: k8yun (~k8yun@user/k8yun)
[03:13:24] <DoofusCanadensis> everything after -- is a file name
[03:13:54] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:14:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[03:14:46] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[03:16:02] <wakeup> and why can we do that?
[03:16:08] <wakeup> I know what that command does
[03:16:15] <wakeup> it resets the file
[03:16:29] <wakeup> so it discards the local not-committed or staged file
[03:16:44] <wakeup> but I don't understand why we can use checkout here
[03:17:30] <OMGOMG> checkout is a bit of a swiss army knife
[03:18:03] *** Quits: JanC (~janc@user/janc) (Ping timeout: 252 seconds)
[03:18:20] *** Joins: cdown (~cdown@cpe-98-15-154-102.hvc.res.rr.com)
[03:21:45] <wakeup> so how should I read that command
[03:21:48] <wakeup> specifically
[03:22:20] *** Joins: JanC (~janc@user/janc)
[03:25:03] *** Quits: cdown (~cdown@cpe-98-15-154-102.hvc.res.rr.com) (Ping timeout: 260 seconds)
[03:26:54] <DoofusCanadensis> you are checking out one specific file as a means to reset it to what is in the repository
[03:33:53] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:34:11] *** Joins: pizdets_ (~pizdets@183.182.111.160)
[03:34:20] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[03:34:51] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 260 seconds)
[03:34:57] *** Quits: pizdets (~pizdets@183.182.111.79) (Ping timeout: 256 seconds)
[03:36:55] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:37:45] *** Joins: Xenguy (~Xenguy@user/xenguy)
[03:39:00] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[03:40:18] *** Quits: DoofusCanadensis (~DoofusCan@207.229.38.10) (Quit: So as you can see from this flowchSQUIRREL!!)
[03:40:32] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Client Quit)
[03:43:31] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[03:47:25] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[03:47:52] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[03:48:09] <parsnip> I guess it's this format in `man git-checkout`
[03:48:09] <gitinfo> the git-checkout manpage is available at https://gitirc.eu/git-checkout.html
[03:48:10] <parsnip> > git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>...
[03:48:26] <parsnip> > Overwrite the contents of the files that match the pathspec.
[03:49:23] <parsnip> > Overwrite the contents of the files that match the pathspec. When the <tree-ish> (most often a commit) is not given, overwrite working tree with the contents in the index.
[03:49:55] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:50:22] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[03:50:54] <NeilRG> is git:// dead then?
[03:50:56] <parsnip> hmm, that's interesting, so it resets to anything in `git add`, iiuc
[03:51:04] <NeilRG> because I can't seem to use it on GitHub anymore
[03:51:04] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[03:51:14] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[03:51:16] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[03:51:34] <parsnip> wait, i forgot what index is. that's HEAD, or cache / staging area?
[03:51:59] <parsnip> hmm yeah that's staging area
[03:53:08] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[03:53:48] <parsnip> what error message are you getting?
[03:54:04] *** Quits: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net) (Ping timeout: 272 seconds)
[03:54:11] <parsnip> also, this is for git, not GitHub >.<
[03:54:41] <parsnip> but i choose not to get involved with the drama of #github vs ##github
[03:55:31] <parsnip> and which documentation are you using
[03:56:47] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 260 seconds)
[03:57:14] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:02:49] <NeilRG> parsnip: it sends me here: https://github.blog/2021-09-01-improving-git-protocol-security-github/
[04:02:53] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4.1)
[04:03:28] <NeilRG> you're right this is for github, but my follow-up question was which protocol is best then
[04:03:33] <NeilRG> which is a git question
[04:04:05] *** Quits: hbautista (~hbautista@187.171.53.196) (Ping timeout: 256 seconds)
[04:04:32] <NeilRG> it seems that there are four protocols?  git:// https:// ssh://, and git@github.com (whatever that means)
[04:05:11] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:07:00] <parsnip> i tend to use what GitHub puts forth in UI
[04:07:19] <parsnip> so they often have a button for cloning, or instructions when creating a repo
[04:07:36] <parsnip> and i think it's either `git@...` or `https://`
[04:07:53] <parsnip> it seems reasonable to consider those, without even having reviewed all documentation
[04:08:20] <parsnip> the buttons seem to include: `ssh ==> git@...`
[04:08:36] *** Quits: Celeo (~znc-admin@user/celeo) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[04:08:40] <parsnip> so i think the `git@...` requires you have public key access
[04:08:45] <parsnip> if it's my repo, i use that
[04:09:15] <parsnip> if i'm just cloning someone else's project to investigate, i'm probably cloning `https://...`
[04:09:46] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[04:11:21] *** Joins: Celeo (~znc-admin@user/celeo)
[04:11:55] *** Quits: ano (~ano@user/ano) (Ping timeout: 240 seconds)
[04:12:22] *** Joins: ano (~ano@user/ano)
[04:12:28] <parsnip> https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols
[04:13:00] *** Quits: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4) (Ping timeout: 240 seconds)
[04:17:45] *** Joins: ferdna (~ferdna@user/ferdna)
[04:18:11] <NeilRG> reading
[04:19:32] *** Quits: reset (~reset@user/reset) (Quit: reset)
[04:20:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0874-3206-ce5b-fa50.res6.spectrum.com) (Quit: Leaving)
[04:21:11] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[04:21:59] <NeilRG> ok thanks
[04:22:57] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[04:24:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:25:55] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-25e7-2817-2baa-33e2.res6.spectrum.com)
[04:28:48] *** Joins: jazzy2 (~jaziz@user/jaziz)
[04:32:28] <bn_work> hi, git 2.32.0, attempting to push a commit and was getting an error saying there were changes pushed that I needed to pull first, so I pulled and it did a merge commit message with ` 1 file changed, 2 insertions(+), 1 deletion(-)` , but how I do I see the merge commit lines?  When I do `git show ` <commit#>, it just shows the commit # and message, that's it, vs the actual lines that changed?
[04:32:43] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[04:34:51] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[04:34:55] <BtbN> you need to look at the actual commits it merged
[04:35:08] <BtbN> the merge commit will only contain changes if there were conflicts to resolve
[04:35:21] <BtbN> and you generally do not want to create merge commits when pulling. They pollute the history
[04:35:26] <BtbN> git pull --rebase is much nicer
[04:36:34] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[04:36:50] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[04:39:59] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26) (Remote host closed the connection)
[04:40:25] <bn_work> BtbN: how do I know what it merged?  it doesn't show anything when I look at it?
[04:40:44] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26)
[04:40:48] <BtbN> it merged your local branch with the one you pulled.
[04:41:11] <bn_work> so how do I see what it did?
[04:41:21] <BtbN> What do you mean?
[04:41:39] <bn_work> it says ` 1 file changed, 2 insertions(+), 1 deletion(-)`
[04:41:43] <BtbN> If there were no conflicts, it just merged the two histories with a merge commit, and put it on top of the two diverged trees
[04:42:14] <BtbN> That's the changes the commits you pulled did. Not the merge commit.
[04:44:07] <bn_work> ok, so how do I see them?
[04:44:42] <rewt> easiest is to use gitk (or a similar gui)
[04:45:51] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26) (Ping timeout: 268 seconds)
[04:46:31] <parsnip> wait what?
[04:46:34] <parsnip> doesn't a merge commit have a diff?
[04:46:44] <parsnip> if the two tips were different
[04:47:03] <parsnip> i just tested this
[04:47:34] <bn_work> rewt:  why can't `git show` show this?  I don't want to see a graph of trees?
[04:48:30] <parsnip> maybe magit is doing some magic
[04:48:52] <bn_work> or IIRC, when one does a merge, it pulls the commit and it just shows up in the history?
[04:49:09] <parsnip> git show seems to work here
[04:49:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[04:49:48] <parsnip> "it"?
[04:50:04] <parsnip> shows up where?
[04:50:10] <parsnip> are you referring to your git tool?
[04:50:24] <parsnip> merge pulls a commit?
[04:50:32] <rewt> bn_work, it can, if you can interpret what it's saying, but it's much clearer in a gui
[04:50:33] <parsnip> i'm confused by your terminology
[04:50:58] <parsnip> i might recommend staying away from pull, and using fetch, until you know the difference
[04:51:07] <bn_work> parsnip: it = git
[04:51:10] *** Quits: Strom (strom@fedora/strom) ()
[04:51:21] <bn_work> parsnip: no, git itself, I'm using git directly
[04:51:33] <parsnip> `man git-show ==> For commits it shows the log message and textual diff. It also presents the merge commit in a special format as produced by git diff-tree --cc.`
[04:51:33] <gitinfo> the git-show manpage is available at https://gitirc.eu/git-show.html
[04:52:14] <bn_work> fetch just downloads
[04:52:47] <bn_work> right, so why isn't `git show ` <merge_commit#> not showing anything?
[04:52:47] *** Joins: Strom (strom@fedora/strom)
[04:53:16] <bn_work> it's just 1 file, 2 insertions and 1 deletion
[04:53:31] <rewt> compared to what?  a merge commit has multiple parents
[04:53:46] <parsnip> how strange, that merge commits don't have a diff
[04:53:53] <parsnip> strictly speaking
[04:54:05] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[04:54:09] <rewt> technically a commit in git is a snapshot of the dirs/files; diffs are comparisons between 2 commits
[04:54:22] <bn_work> so wait, when I do a merge commit, is it leaving behind those `>>>YOURS` and `<<< THEIRS` junk and I have to manually clean it up?
[04:54:31] <bn_work> (with default merge algo)
[04:54:32] <parsnip> it sort of makes sense. if they had a diff, it could be considered redundant to the ancestor diffs
[04:54:39] <rewt> yes, those are conflict markers that you have to resolve
[04:54:55] <parsnip> bn_work: works fine here
[04:55:06] <rewt> anything that git itself cannot resolve, you have to resolve yourself
[04:56:33] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 256 seconds)
[04:56:48] <bn_work> rewt:  will it tell me if there were parts it couldn't resolve?
[04:57:06] <rewt> yes, those markers are around sections it cannot resolve
[04:57:48] <bn_work> I didn't get any notification that there were conflicts that I needed to resolve?
[04:58:21] <rewt> are you sure?  git's feedback is quite verbose, and most people just gloss over most of it
[04:58:21] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[04:58:56] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[04:59:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:00:26] <bn_work> It literally brought up my editor (vim) to type in a merge commit message, then exited
[05:01:13] <rewt> then there were no conflicts and you shouldn't see those markers
[05:01:24] <rewt> unless they were there before
[05:01:34] <rewt> on either branch
[05:01:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:04:09] <bn_work> sorry, looks like it used `recursive` strategy
[05:04:49] *** Joins: llh (~UPP@user/llh)
[05:05:03] *** Quits: Arokh (~MoveAlong@ip-088-153-209-030.um27.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[05:06:36] <bn_work> here's the log, ie:  I basically tried to push, it mentioned the error, so I tried to pull first, and it immediately brought up the editor, I accepted it's proposed message, quit https://www.irccloud.com/pastebin/4kAjb9cJ/git_push_git_pull.log
[05:06:59] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[05:07:54] <bn_work> rewt: so how do I see what it did?
[05:09:23] *** Joins: zmt00 (~zmt00@user/zmt00)
[05:13:14] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 272 seconds)
[05:13:39] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:13:58] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[05:14:55] <parsnip> bn_work: i'm confused. was there a conflict? how are you getting lines with `>>>YOURS` but no merge conflict?
[05:17:56] <rewt> bn_work, do you have those markers in that file?
[05:19:09] *** Joins: DoofusCanadensis (~DoofusCan@2604:3d09:47c:f970::fb)
[05:20:11] *** Quits: Rashad (~textual@2a01:9700:1290:7400:c458:ff70:8841:c701) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:24:33] *** Joins: Arokh (~MoveAlong@ip-088-153-209-030.um27.pools.vodafone-ip.de)
[05:25:05] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 252 seconds)
[05:25:38] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[05:27:06] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[05:27:51] *** Joins: Techcable (~Techcable@user/Techcable)
[05:27:52] *** Quits: clime (~clime@89-24-40-184.nat.epc.tmcz.cz) (Quit: WeeChat 3.4)
[05:30:32] *** Quits: jamiejackson (~jamiejack@131.106.140.145) (Quit: Connection closed)
[05:32:17] <bn_work> parsnip: I don't know, that's my point, lol.  It didn't claim there was any, the output I got above was all I got.  But was I supposed to?  or does a merge commit just merge and leave you to resolve them?  (normally I thought with merges, git tells you to commit the resolved version when done)
[05:32:21] *** Joins: BUSY (~BUSY@user/busy)
[05:33:23] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[05:34:05] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[05:34:06] <bn_work> rewt: I'm not seeing any markers like that in `Baz/whiz-3.5_blah.bash` for ex
[05:34:30] <parsnip> do you have the markers
[05:34:51] <bn_work> parsnip: ?  ^^^
[05:34:59] <rewt> do you have them in any file?
[05:36:23] <parsnip> i guess you were asking above, "today am i learning, that merges will be smooth unless there's a conflict, at which point there will be markers for what i need to resolve"
[05:36:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[05:36:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:36:45] <parsnip> so you didn't mean that you saw markers in this particular merge instance
[05:36:46] <bn_work> rawtaz: I'm not seeing it any of the files in that dir.  shouldn't it be constrained to what it mentioned it?  ie:  `Baz/whiz-3.5_blah.bash`?
[05:36:54] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[05:37:28] <bn_work> parsnip: that's not a question, but ok :)
[05:37:28] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[05:37:35] <parsnip> bn_work: can you share the result of `git show` for the merge conflict?
[05:37:44] <bn_work> parsnip: correct, I was just giving an example of what I normally associate with merge conflicts
[05:37:52] <bn_work> again though, how do I see what it merged???
[05:37:58] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:38:02] <parsnip> > so wait, when I do a merge commit, is it leaving behind those `>>>YOURS` and `<<< THEIRS` junk and I have to manually clean it up?
[05:38:15] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[05:38:19] *** Joins: mud (~mud@user/kadoban)
[05:38:25] <parsnip> "today am i learning, x, y, z", is a question
[05:38:31] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 260 seconds)
[05:38:35] <rewt> bn_work, what do you mean by that?  it merged the 2 parent commits; what you had as master and what master was on origin
[05:38:51] <parsnip> worrying about particular grammars doesn't seem useful at the moment
[05:38:54] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[05:38:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:39:20] <parsnip> you don't want to share the output of `git show` for the merge commit?
[05:39:34] <parsnip> (i meant git show for merge commit not merge conflict)
[05:39:36] <bn_work> `$git show 48379aa` `48379aa N 2022-03-24T19:56:04-04:00 JDoe.. Merge branch 'master' of https://github.com/Foo/Bar HEAD -> master`
[05:39:44] *** Quits: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net) (Quit: Quit)
[05:40:11] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[05:40:46] <rewt> are you asking to see the diff between the merge commit and one of its parents?
[05:40:50] <bn_work> parsnip: ^^^
[05:40:56] <bn_work> that's literally all it shows
[05:41:09] <bn_work> rewt: sure
[05:41:45] <rewt> `git diff <parent>..<merge>` # replace <merge> with your merge commit, and <parent> with the parent you want to diff against
[05:42:01] <parsnip> that's not what git shows me for a merge commit
[05:42:17] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[05:43:27] <bn_work> rewt: ok, I think that worked
[05:44:16] <bn_work> parsnip: 🤷 maybe different git config settings?
[05:44:58] <parsnip> try `git show 197ff17` for https://github.com/bradyt/git-merge-example
[05:45:05] <parsnip> it shows me parent commits for example
[05:45:06] <parsnip> parent commit hashes
[05:45:14] <parsnip> so i'm not sure why your `git show` omits that
[05:45:36] <rewt> `git show` for a non-merge commit shows the diff relative to its single parent;  `git show` for a merge commit doesn't show the diff because it won't pick a parent at random... but if there were conflicts that were resolved, I think it shows the resolution diffed against both parents
[05:46:02] <bn_work> rewt: so by merging like this vs rebasing, did I lose the original commit# & message from origin:master?
[05:46:50] <rewt> no, you created a merge commit with 2 parents; your master and origin/master... with --rebase, you would've ended up with a linear history with no merge commits
[05:46:54] <parsnip> i don't think i have much configured
[05:46:59] <bn_work> parsnip:  can you show me what you see?  do you just get a normal diff?
[05:47:43] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[05:48:17] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 240 seconds)
[05:49:28] <parsnip> bn_work: https://dpaste.org/MoH4
[05:49:58] <bn_work> rewt:  but the other parent is remote, no?  or is the other parent copied locally (albeit hidden) as remote?
[05:50:04] <parsnip> oh, diff highlighting failed, raw would be better: https://dpaste.org/MoH4/raw
[05:50:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:50:23] <rewt> bn_work, when you fetch, you copy everything that's remote to your local repo
[05:50:29] <bn_work> rewt: right
[05:51:16] <parsnip> rewt: git show doesn't display a diff? that seems to contradict my example above, and what i quoted from man
[05:52:31] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 260 seconds)
[05:52:34] <parsnip> fetch would have divergence, between origin/master, and master, i guess
[05:53:17] <bn_work> parsnip: interesting, yeah, I don't get that diff with `git show ...`
[05:53:27] <parsnip> i would imagine my workflow, would be to fetch, consider the graphical log, the changes in divergence, then decide what to do
[05:53:55] <bn_work> rewt: so is the reason I don't see the original remote commit + message is because it got squashed as 1 merge?
[05:54:12] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[05:54:25] <bn_work> rewt: if so, would rebase allow me to pickup the original commit + message?
[05:54:30] <rewt> parsnip, what you quoted is what i said (read the whole thing you quoted, and relevant sections of the other man page too)
[05:54:41] *** Quits: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca) (Read error: Connection reset by peer)
[05:54:52] <bn_work> rewt: I hesitated to use rebase as it normally changes commit #s rewriting history, no?
[05:55:07] <parsnip> if it seemed more complicated than a clean rebase, i might rename my local master, reset local master to origin/master, then consider the best way to adopt changes from my renamed branch
[05:55:09] <rewt> bn_work, not `git pull --rebase`
[05:55:20] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 252 seconds)
[05:55:23] <bn_work> The other question is, can I do anything about it now :/  (FWIW, this is just a repo used only by me on 2 machines)
[05:55:59] <parsnip> er, add new branch at current local master, and reset local master to match remote
[05:56:02] <rewt> parsnip, did you resolve conflicts in that merge?
[05:56:49] <bn_work> rewt:  uh, not following... so rebase wouldn't help?
[05:57:14] <parsnip> put a new branch ref on your local divergent "tip"
[05:58:01] <parsnip> rewt: i'm going to sound rude, but i'm trying to understand your question. does it look like there's a conflict there?
[05:58:26] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[05:58:30] <parsnip> rewt: i provided an entire repo, if you missed it
[05:58:45] *** Joins: humanBird (~humanBird@2603-8001-7000-3642-89da-56d2-0bad-5a2d.res6.spectrum.com)
[05:58:54] <rewt> parsnip, no, which is why i'm confused... I don't get diffs with git show either for a merge commit, and the man page also says it doesn't show it
[05:59:12] *** Quits: duxsco (~Thunderbi@user/duxsco) (Ping timeout: 252 seconds)
[05:59:16] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[05:59:21] <bn_work> parsnip: now I'm afraid to push commits from my other machine if pulling them down here with lose the original commit messages :/
[05:59:23] *** Joins: duxco (~Thunderbi@user/duxsco)
[06:00:23] <bn_work> s/with/will/
[06:00:44] <parsnip> rewt: i think we should ask bn_work for a log of current situation, advise to back things up, then consider resetting things towards what occurred before the pull
[06:01:06] <parsnip> i don't want to compete to give advice >.< i'd rather just come to a consensus
[06:01:26] <parsnip> i'm giving the benefit of the doubt that you know git more than me
[06:01:40] <parsnip> i forget the bot command to ask for a log
[06:01:42] *** duxco is now known as duxsco
[06:02:02] <rewt> !log
[06:02:02] <gitinfo> [!irclog] Public logs of #git are kept at: https://gitirc.eu/log
[06:02:04] <rewt> nope
[06:02:25] <rewt> !terminal
[06:02:30] <parsnip> for example, it seems relevant to ask if they pushed the merge to origin yet
[06:02:36] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 240 seconds)
[06:04:00] <parsnip> in fact, i would guess they can leave master where it is currently, put a temporary branch on the old local commit, and test how the rebase would work from there, to the old origin/master
[06:04:17] <rewt> yea
[06:04:21] <bn_work> FWIW, (luckily) I can rewrite history if I really need to (I know it's usually not good practice, but 99% I'm the only one using this repo)
[06:04:28] <parsnip> assuming they thing rebase is better
[06:05:21] <rewt> i recommended gitk because it's so much clearer seeing the history visually than to figure it out on the command line (and possibly misinterpreting the output)
[06:05:26] <bn_work> parsnip / rewt:  what I've been doing is basically development on two machines and doing a git pull accepting the merge commit then pushing the local commit to remote
[06:06:08] <parsnip> *think
[06:06:24] <rewt> bn_work, if it's the same branch, `git pull --rebase` is generally better ... the only history it's rewriting is your local history only of the commits since the divergence, replaying them back on top of what you fetched from the remote
[06:06:29] <bn_work> there's also only 1 branch (and one dead branch from long ago)
[06:06:41] <bn_work> it's really simple dev workflow now (ie: just me)
[06:06:53] <bn_work> (although may change soon in the future)
[06:07:33] <rewt> even for multiple people, if you want to "catch up the current branch to its latest version, keeping any changes", `git pull --rebase` is the best option
[06:08:30] <rewt> i'm not sure what you meant here: <bn_work> rewt: so is the reason I don't see the original remote commit + message is because it got squashed as 1 merge?
[06:08:52] <rewt> there was no squashing that you mentioned, so everything should still be there
[06:09:06] <bn_work> rewt: ok, so reset hard or so? (I forget the specific variant I need) and re-pull with `git pull --rebase`? (I've rebased interactively before but only locally and not in the context of a merge... or maybe I have long long ago, it's been a while since I've had to deal with merges- I try to avoid them, lol)
[06:09:17] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[06:09:17] <bn_work> reset to pre-1st merge
[06:09:29] <rewt> no, just `git pull -rebase`
[06:09:45] <rewt> why reset?
[06:11:00] <rewt> if you want to try that now, you have to unwind the merge commit first
[06:13:40] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26)
[06:13:50] *** Quits: seds (sid492514@user/seds) ()
[06:14:02] *** Joins: seds (sid492514@user/seds)
[06:14:55] <parsnip> y'all not reading what i'm saying, i'm out
[06:15:33] <parsnip> gitk didn't come with my install
[06:16:05] <rewt> it's packaged separately on linux
[06:16:20] <bn_work> rewt: because it's already been merged?
[06:16:48] <bn_work> don't I need to rewind back to before the 1st merge?
[06:17:01] <rewt> what 1st merge?
[06:17:13] <parsnip> reset would be one way to unwind
[06:17:23] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:17:50] <bn_work> parsnip: you mean the suggestion to backup and create new temporary branches?  sounds very complicated :/
[06:17:50] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 272 seconds)
[06:18:07] <bn_work> rewt: I've already done at least two merge commits during the pull
[06:18:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[06:18:34] <bn_work> and subsequently `git push`-ed so my other machine could see it and pull it down
[06:18:37] <rewt> pull is only a single merge.... git pull is the same as git fetch followed by a single git merge
[06:19:29] <bn_work> sorry, what I said was unclear, I've done at least 2 merge commits in separate pulls
[06:19:43] <rewt> you have multiple remotes?
[06:19:46] <parsnip> !backup
[06:19:46] <gitinfo> Worried about your data while trying stuff out in your repo? The repository in its entirety lives inside the .git directory in the root of your work tree so to backup everything `cp -a path/to/workdir path/to/backup` or equivalent will suffice as long as the repo is not modified during backup. See also http://sethrobertson.github.io/GitBestPractices/#backups
[06:19:50] <bn_work> rewt: no
[06:20:07] <bn_work> for this repo?
[06:20:08] <parsnip> bn_work: i can't imagine using git without being comfortable with creating temporary branches
[06:20:13] <parsnip> i do it all the time
[06:20:41] <bn_work> parsnip: I guess branching isn't that hard, I just hope it doesn't make subsequent merges complicated
[06:20:49] <parsnip> i suggested we get a log
[06:20:54] <parsnip> noone listens to me
[06:21:03] <bn_work> parsnip: I've been trying to keep my workflow as simple as possible
[06:21:43] <rewt> `git branch tempbranch` creates a branch at the current commit, so you can reset to wherever you want, and you can get back to this same one if something goes wrong
[06:21:44] *** Joins: pyeverything (~pyeveryth@64-18-153-56.starry-inc.net)
[06:21:55] <rewt> a branch in git is just a pointer to a specific commit
[06:21:59] <bn_work> rewt: yeah, I think that's what parsnip was suggesting
[06:22:06] <rewt> yes
[06:22:46] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[06:22:53] <bn_work> I was just worried it would interfere with subsequent pulls since the entire repo is compared during a pull for conflicts?
[06:23:02] <parsnip> bn_work: we're not at the same computer as you, trying to give commands. it's too easy of a possibility to mess something up. suggesting to back up your repo is a safe request from my point of view
[06:23:03] <bn_work> rewt: so why wouldn't I need to do a reset?
[06:23:46] <rewt> depends on what you want to accomplish
[06:23:47] <bn_work> parsnip: is it just copying out the entire tree?
[06:24:35] <bn_work> rewt: like I said, I just want to get the original commits & their message from my other machine that was pushed, and vice versa
[06:24:50] <bn_work> right now I think they are just showing up as merge commits
[06:24:53] <rewt> bn_work, no, creating a branch is essentially creating a new "thing" that says "this is the commit i'm pointing at", doesn't copy anything, doesn't duplicate anything, and lets you easily get back to the same point
[06:25:38] <rewt> bn_work, the ony merge commits you have are the merge commits you created with `git merge` (remembering that `git pull` is just short-hand for `git fetch && git merge`)
[06:25:41] <parsnip> iiuc, typically a merge looks at two commits, often implicit
[06:26:01] <parsnip> er
[06:26:07] *** Quits: pyeverything (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 260 seconds)
[06:26:19] <parsnip> one branch ref, and usually one other implied commit, maybe
[06:26:45] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Client Quit)
[06:26:56] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[06:27:11] <bn_work> rewt: yes, I was asking parsnip about what he defined as "backing up"
[06:27:40] <parsnip> i think we really need a log, to more easily advise
[06:27:54] <bn_work> rewt: so again, why don't I want to git reset back to before I first did my first merge commit?
[06:27:55] <parsnip> the --oneline --graph --decorate or w/e variety
[06:28:23] <parsnip> they're describing two merges, i think a log will clear it up
[06:29:01] <parsnip> bn_work: just copy the directory, like `cp foo foo.bak`
[06:29:17] <bn_work> parsnip: ah, ok, one sec
[06:29:23] <parsnip> bn_work: if something goes wrong, you have a backup. if nothing goes wrong, you delete it
[06:29:46] <parsnip> because you're asking for advice across text based chat
[06:30:00] <rewt> bn_work, best if you pastebin the output of `git log --oneline --graph` as parsnip says
[06:30:18] <parsnip> it probably won't be needed, but it's easy to make
[06:30:44] <rewt> much easier than trying to describe the repo without knowing what it looks like
[06:32:38] <parsnip> oh, maybe --decorate is default now
[06:34:16] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[06:34:52] <bn_work> parsnip https://www.irccloud.com/pastebin/FTJvhfoX/git%20log%20--oneline%20--graph%20--decorate.log
[06:36:44] <rewt> that's the full output?
[06:37:05] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 256 seconds)
[06:37:19] <parsnip> the merge at 7edfe48 is the only one not from today?
[06:38:15] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26) (Ping timeout: 252 seconds)
[06:38:57] <parsnip> i'm trying to think what sequence of events gets to 066c03c
[06:39:08] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[06:39:19] <bn_work> and from machine 2 it looks like this:   https://www.irccloud.com/pastebin/JQX9Uck0/git%20log%20--oneline%20--graph%20--decorate_from_machine2.log
[06:39:34] <parsnip> oh, just that diff, is all
[06:39:41] <parsnip> so that machine didn't have the changes yet, maybe
[06:40:10] <parsnip> so in a sense, a16b6eb was merged twice
[06:40:32] <parsnip> not in a literal sense, just in a, "second machine" sense
[06:41:01] <rewt> it was only merged on one, then pushed, then fetched on the other
[06:41:12] <rewt> went into 7edfe48 in both logs
[06:41:35] <parsnip> i guess machine 1 had master at 8df9c3a, recently
[06:42:17] <rewt> yes
[06:42:34] <parsnip> okay, you could "rebase" 8df9c3a onto 65efe9e, i'm not sure that's the optimal fix
[06:42:43] <bn_work> rewt/parsnip: it looks like the first one is a superset so I think I see what you mean about not needing to reset, so I just rebase off from ab75188?
[06:43:04] <parsnip> if it were me, i would probably make this entirely linear, but that could easily be difficult to convey over chat
[06:43:27] <bn_work> are all those other branches in other branches?  I don't see them when I do `git branch -a`?  or at least I don't think I do?
[06:43:43] <rewt> bn_work, question is if you want to re-do the whole history, or just this last one?
[06:43:49] <parsnip> oh, that's an interesting question
[06:44:10] <parsnip> work from the initial commit, start reshaping the commits, then force push
[06:45:05] <parsnip> you could even draft the redo, with temporary branch
[06:45:10] <rewt> if you want to change it all to a linear history, you can do `git rebase -i ab75188`, and put the commits in order (top is first chronologically)
[06:45:51] <parsnip> are the commit messages stable? because soon the commit hashes won't be
[06:45:58] <rewt> yep, you can `git checkout -b newbranch`, and do the interactive rebase with that
[06:46:01] <parsnip> decide what order you want the commit messages
[06:46:12] <parsnip> oh, interesting idea
[06:46:17] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 240 seconds)
[06:46:39] <parsnip> i would have used a pair of temporary branches
[06:46:57] <parsnip> i'm not sure i've used interactive rebase over merges
[06:47:00] *** Quits: Sulky (~Sulky@37.166.108.161) (Ping timeout: 240 seconds)
[06:47:44] <parsnip> anyways, i've got to go for groceries, best of luck, regardsj
[06:47:47] <parsnip> *regards
[06:47:53] <rewt> interactive rebase is pretty powerful; you can reorder commits, change metadata (message, author, etc), edit commits, etc
[06:48:09] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[06:48:22] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[06:48:55] <bn_work> rewt:  yes, that's basically what I want to do, rebase it so it's linear and the original commit messages are shown vs these merge commits.  I'm still confused why I don't see these other branches in git branch -a output
[06:49:09] <rewt> which other branches?
[06:49:27] <rewt> you said you only have master
[06:50:00] <bn_work> parsnip: thanks parsnip
[06:50:48] <bn_work> rewt: yes, that's what I thought but that tree view (with multiple ANSI colors that didn't copy) now has me confused :/
[06:50:48] *** Quits: Murr (~Murr@212-51-143-101.fiber7.init7.net) (Remote host closed the connection)
[06:50:58] *** Joins: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net)
[06:51:11] *** Joins: Murr (~Murr@212-51-143-101.fiber7.init7.net)
[06:51:43] <rewt> the colours are there only to make it easier to trace the lines, they serve no other purpose
[06:51:50] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[06:51:52] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[06:51:55] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[06:52:12] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:52:26] <rewt> with more complicated histories, it helps quite a bit
[06:52:47] *** Quits: duxsco (~Thunderbi@user/duxsco) (Quit: duxsco)
[06:53:32] <bn_work> rewt: so did this create 3 branches?
[06:53:50] <rewt> no, there's only 1 branch: master
[06:54:07] <rewt> in git a branch is just a pointer to a commit
[06:54:35] <bn_work> right, but I see 3 vertical lines now so obvious there's 3?
[06:55:14] <rewt> they're just separate "ancestry paths" (no git term for it really)
[06:55:51] <rewt> anyways, to get the history linear, start with:  `git branch oldmaster`  # to create a new branch called "oldmaster" (don't worry about the name, it's only temporary)
[06:55:56] <bn_work> rewt: but not "branches" as created by `git branch ...` ?
[06:56:11] <rewt> yes, and in git, a branch is simply a pointer to a specific commit
[06:56:24] <rewt> when you delete a branch, all traces of it disappear
[06:56:40] <bn_work> I assume I want to do this on machine(1) which is a superset of machine2 (which doesn't have everything, yet?)
[06:56:57] <rewt> when you commit, git doesn't record what branch was checked out at the time, it simply makes a new commit, sets the current one as its parent, and moves the branch pointer to the new commit
[06:57:18] <rewt> yeah, do it on the one that has the latest
[06:58:03] <bn_work> I wonder if i'm not seeing the branches in my normal `git log` because I'm doing:  `format.pretty=format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%>(25)%ad %C(auto,green)%<(7,trunc)%aN %C(auto,reset)%s%C(auto,red)% gD% D`
[06:58:08] <rewt> do you have any changes at all on the other machine?  even not committed changes?
[06:58:10] <bn_work> "branches"
[06:58:44] <rewt> no, you only have 1 branch; "master", there are no other branches;  in git, branches are not "chains of commits"
[06:59:48] <rewt> or rather, "chains of commits" are not branches
[07:00:23] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[07:00:49] *** Quits: Murr (~Murr@212-51-143-101.fiber7.init7.net) (Read error: Connection reset by peer)
[07:01:06] <bn_work> on machine2 I have ~15 modified uncommitted files, ~40-50 untracked files
[07:01:08] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[07:01:25] <bn_work> machine1 is basically a new machine I've started using to dev on concurrently (possibly a bad idea)
[07:02:11] *** Quits: pizdets_ (~pizdets@183.182.111.160) (Ping timeout: 265 seconds)
[07:02:37] <rewt> best if you commit everything you want to keep, and get it all on 1 machine, and do these steps on that 1 machine
[07:03:26] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[07:05:02] *** Joins: hbautista (~hbautista@187.171.53.196)
[07:06:39] <bn_work> right, I'm aware git tracks the entire state of the repo during a commit, re. "branches":  regardless of what the underlying representation is (a pointer to just a head commit or chains of commits), isn't the diff in re. to my question moot?  I was asking if there are effectively 3 "branches" now since there are 3 vertical lines?  or were?  (the last one seemed to merge them all together?)
[07:08:46] <bn_work> I don't know how I would "get it all on 1 machine"?  besides copying it out...?
[07:09:16] <rewt> commit + push, then fetch on the other
[07:09:22] <bn_work> I'm assuming I should do this because it would overwrite those files when I pull back on machine2 after fixing it on machine1?
[07:09:30] <rewt> yes
[07:09:55] <rewt> you'll do a reset on the other one at the end, which could lose those files/changes
[07:11:08] <bn_work> so were the 3 vertical lines master, remotes/origin/master, remotes/origin/HEAD -> origin/master ?
[07:11:32] <bn_work> could I not just stash & pop it back on machine1?
[07:11:35] <bn_work> er.. 2
[07:12:09] <rewt> you could, if you're comfortable with that
[07:13:37] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 240 seconds)
[07:14:39] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[07:16:29] <bn_work> ok, so on machine1, I did `git branch oldmaster`.  PS:  `I'm still very confused with what "branches"/lines-of-ancestry/whatever-is-the-correct-term of what those 3 lines were?
[07:17:28] <rewt> there is no git term afaik for those lines... they simply indicate that the commit where 2 lines meet is a merge commit with 2 parents
[07:17:28] <bn_work> rewt: so now git checkout oldmaster and rebase -i there?  or rebase on master now that oldmaster has "backed up" current HEAD?
[07:18:18] <rewt> so right where you are, `git rebase -i ab75188` will show an editor with a list of commits
[07:18:23] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 260 seconds)
[07:18:50] <rewt> oldmaster should be at the same commit as master; we can ignore it for now
[07:19:41] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[07:21:34] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[07:21:48] <bn_work> yeah, I've rebased interactively before.  One weird thing I just noticed though from the diff I did earlier of:  "`git diff <parent>..<merge>` # replace <merge> with your merge commit, and <parent> with the parent you want to diff against", one of the lines shows as a deletion vs addition?
[07:23:44] <rewt> should that line not be deleted?
[07:23:45] *** Quits: austin987 (~austin@cpe-173-174-99-192.austin.res.rr.com) (Read error: Connection reset by peer)
[07:24:07] *** Joins: austin987 (~austin@cpe-173-174-99-192.austin.res.rr.com)
[07:24:33] <bn_work> rewt: no, on machine2 (where that change originated from as 066c03c) it is an addition
[07:25:13] <rewt> what was the diff command you used?
[07:25:46] *** Joins: Murr (~Murr@212-51-143-101.fiber7.init7.net)
[07:27:24] <bn_work> wait, maybe I did it backwards, yes, sorry
[07:27:37] <bn_work> that's weird that only 1 of the 2 lines showed reversed
[07:28:00] <rewt> `git diff A..B` shows what changes are needed to get from A to B
[07:28:11] <bn_work> when I pop later on machine2, can I rebase it onto whatever it gets reset to?
[07:28:18] <rewt> yes
[07:29:11] <bn_work> how?
[07:29:24] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 252 seconds)
[07:29:34] <rewt> let's finish this part first
[07:29:37] <bn_work> and I guess I need to git stash -u too on machine2
[07:29:42] <bn_work> ok
[07:30:07] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:30:28] <rewt> so you're doing the rebase -i?
[07:30:35] <bn_work> yes
[07:30:40] <bn_work> on machine1
[07:31:18] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 272 seconds)
[07:31:24] <bn_work> ok, done
[07:32:04] <bn_work> it's linear now
[07:32:26] <rewt> ok, do that same git log command again, and pastebin the output ... if you want to hide the commit messages, you can add `--formmat=%h%d` on the end
[07:32:37] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 256 seconds)
[07:33:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[07:33:33] *** Joins: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de)
[07:34:12] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[07:35:47] <bn_work> rewt:   https://www.irccloud.com/pastebin/0yynrBul/git%20log%20--oneline%20--graph%20--decorate_after_rebase_-i_ab75188_on_machine1.log
[07:35:58] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:36:23] <rewt> hmm... that's not what i was expecting
[07:36:42] <bn_work> ... :|
[07:36:47] *** Quits: tatuio (~tatuio@2804:14c:6583:6001:b19:38fe:b614:5cfc) (Remote host closed the connection)
[07:36:47] *** Quits: guest (~guest@2804:14c:6583:6001:b19:38fe:b614:5cfc) (Remote host closed the connection)
[07:36:48] <rewt> not showing oldmaster
[07:37:13] <rewt> anyways...  do you get any output for `git diff 48379aa..d370bc0`
[07:37:16] *** Quits: bloody (~bloody@user/bloody) (Quit: okluvyabubye)
[07:37:45] <bn_work> no
[07:38:08] <rewt> ok, that's good
[07:38:21] *** Joins: stenno (~stenno@user/stenno)
[07:38:39] <rewt> and all the commit messages are in the order you want?  (newest on top in git log)
[07:38:50] <bn_work> I assume 48379aa is now oldmaster?
[07:38:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[07:39:07] <rewt> yes, it should be
[07:39:29] <bn_work> I think so, it didn't show timestamp but as long as the original commit + messages are there (vs "merge commit foo"), I'm happy
[07:39:49] <rewt> yes, the original author info is the same as the corresponding commits
[07:40:02] <rewt> so now you can force push it
[07:40:14] *** Joins: makoto2600 (~makoto260@94.86-180-91.adsl-dyn.isp.belgacom.be)
[07:40:54] <bn_work> `git push -f`?
[07:40:54] <rewt> and then on machine2, you `git fetch`, then `git stash -u` as you said, then `git reset --hard origin/master` to reset that master to match, and the finally pop as you said
[07:40:59] <rewt> yes
[07:41:16] <bn_work> so how I rebase when I pop?
[07:41:34] *** Quits: makoto2600 (~makoto260@94.86-180-91.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[07:41:45] <rewt> it will apply the stash to what you have checked out
[07:42:17] <bn_work> ok, force pushed
[07:42:17] <rewt> like a rebase, but no commit, so technically not a rebase in git terms
[07:43:09] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[07:43:43] *** Joins: jclsn1 (~jclsn@149.233.201.67.dynamic-pppoe.dt.ipv4.wtnet.de)
[07:44:33] <bn_work> uh, so what about the untracked files?  PS:  earlier today on machine1 I tried to stash pop (the same?) set of `git stash -u` files but it said `/foo/bar/baz already exists, no checkout` and then finally `error: could not restore untracked files from stash` (RC=1)
[07:45:42] <bn_work> FYI, machine1 was machine2 restored onto it a few months ago but it had diverged since.
[07:45:58] <bn_work> (new machine to replace slowly failing machine "2")
[07:45:59] *** Quits: jclsn (~jclsn@149.224.247.61.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 256 seconds)
[07:47:08] <rewt> if the pop fails, everything is still there in the stash;  everything that could be applied should be applied (iirc), and you'd only have to manually check the files it complains about
[07:47:44] <mannequin> https://paste.debian.net/1235524/
[07:47:58] <bn_work> yes, the stash is still on machine1, I'm just wondering if the same will happen with machine2, and if so, how do I get it to apply those files?
[07:48:17] <bn_work> it basically complained about everything?
[07:48:55] <rewt> it's a fresh stash from 65efe9e, so it should apply cleanly, unless you did something in 8df9c3a that would cause a conflict
[07:50:31] *** Quits: jclsn1 (~jclsn@149.233.201.67.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 256 seconds)
[07:52:11] <bn_work> 8df9c3a was just 1 file with 3+, 2-
[07:54:17] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 240 seconds)
[07:54:34] <bn_work> ok, git stash -u completed
[07:55:21] <bn_work> `git status` on machine2 shows this:   https://www.irccloud.com/pastebin/vEmd2Gbt/git_status.log
[07:55:44] *** Joins: jclsn1 (~jclsn@149.233.201.67.dynamic-pppoe.dt.ipv4.wtnet.de)
[07:56:54] <rewt> ok, the reset should align them
[07:57:08] *** Joins: saroy (~Sandipan@45.249.73.212)
[07:57:12] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[08:00:45] <bn_work> hmm, why doesn't git log --online --graph --decorate not show origin/master, origin/HEAD?
[08:01:06] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[08:01:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[08:01:07] *** finn_elija is now known as FinnElija
[08:01:13] <bn_work> I think I understand why you were also confused about oldmaster not showing up as a pointer either now
[08:01:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[08:01:38] <parsnip> maybe try --all
[08:01:42] *** Quits: jclsn1 (~jclsn@149.233.201.67.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 272 seconds)
[08:01:45] <bn_work> (I assume that's what you were referring to earlier by the "not what I expected" comment)
[08:01:47] *** Quits: saroy (~Sandipan@45.249.73.212) (Remote host closed the connection)
[08:01:49] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[08:01:56] <rewt> what if you add --all to the git log command
[08:02:01] <parsnip> (and iiuc, --decorate is redundant on newer git)
[08:02:08] <bn_work> parsnip: aha, yes!
[08:02:36] <parsnip> i just got back
[08:02:48] <rewt> wb
[08:03:01] <parsnip> nice, you got rebase -i to work
[08:03:22] <parsnip> is that mostly a matter of "skipping" the merge commits?
[08:03:34] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[08:03:48] <parsnip> i'll try
[08:04:22] <parsnip> wait, rebase -i selects a linear path anyways, so no merge conflicts to skip?
[08:04:31] <rewt> yeah, it excludes the merge commits by default
[08:04:45] <parsnip> i wonder what order it puts them in. author date?
[08:04:55] <rewt> that's what i'm guessing
[08:05:08] <parsnip> as empty, i guess
[08:05:25] <parsnip> a merge conflict can result in non-empty merge commit?
[08:05:50] *** Joins: jclsn1 (~jclsn@149.233.201.67.dynamic-pppoe.dt.ipv4.wtnet.de)
[08:05:59] <parsnip> anyways, i went to wrong grocery store, going out again for more
[08:06:00] <rewt> it stops on a conflict, lets you fix, git add, and then continue
[08:06:27] <rewt> `git status` gives instructions, as usual
[08:06:32] *** Joins: funhouse (~funhouse@user/funhouse)
[08:06:41] <parsnip> oh, that's interesting, i'll try it now
[08:07:08] <parsnip> this is even after a conflict was resolved? a rebase -i pauses?
[08:07:19] <bn_work> wow, that apparently worked!
[08:07:26] <bn_work> `git stash pop` that is
[08:07:30] <parsnip> like, i merge, conflict, resolve, finish merge, rebase -i, and it pauses for the conflict again?
[08:07:33] <bn_work> rewt: thanks a ton!
[08:07:40] <parsnip> w00t!
[08:07:41] <bn_work> (& parsnip too)
[08:08:19] <rewt> yeah, parsnip, it pauses on each commit that has a conflict
[08:08:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:08:25] <bn_work> ok, *phew*, glad I'm back to normal.
[08:08:41] <bn_work> So moral of the story, change default merge strategy to... rebase?
[08:08:56] <parsnip> or fast forward only
[08:08:58] <parsnip> iiuc
[08:09:08] <parsnip> i always fetch first, but i'm silly
[08:09:13] <rewt> `git pull --rebase`  (it's not quite the same as a `git rebase`)
[08:09:19] <parsnip> i fetch, review, and decide
[08:09:24] <rewt> same here, git fetch, git status, then may git pull --rebase
[08:09:28] <parsnip> looking at --graph
[08:09:29] <rewt> maybe*
[08:09:30] <parsnip> --all
[08:09:37] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:09:54] <parsnip> i mostly use git from magit, so all my muscle memory
[08:09:57] *** Quits: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[08:10:09] <parsnip> everything looks like a nail. i have very few workflows that work for lots of cases
[08:10:49] <parsnip> i constantly am looking at the graph log, use interactive rebase a lot, and create temporary branches quite a bit
[08:11:12] *** Quits: jclsn1 (~jclsn@149.233.201.67.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 272 seconds)
[08:11:25] <rewt> same (except for gitk instead of graph log, but same thing in the end)
[08:11:28] *** Joins: leib (~leib@2405:201:900a:f053:9c18:dba2:ae37:7df8)
[08:11:58] <bn_work> oh EMACs, ugh, heh
[08:12:10] <rewt> hah, i wasn't gonna say it :D
[08:12:51] <bn_work> rewt / parsnip:  so should I do `git config pull.rebase true` and how do you review once fetched but before pulled?
[08:13:02] <parsnip> lol
[08:13:15] <bn_work> do you just do a git diff against the HEAD of master?
[08:13:27] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[08:13:36] <parsnip> replace git pull with git fetch
[08:14:06] <parsnip> i use my GUI graph all to show me the diff for each node on the graph
[08:14:21] <parsnip> i can move point on commit, and the other window shows the diff
[08:14:35] <parsnip> you could do a diff
[08:15:04] <parsnip> but usually i can see the difference, like noting that my branch has changes at a completely different file or file location, and decide to rebase
[08:15:15] *** Quits: leib (~leib@2405:201:900a:f053:9c18:dba2:ae37:7df8) (Client Quit)
[08:15:30] <bn_work> I guess the whole point of splitting it like that into two operations (fetch + pull) is to not be shoved into having to resolve merge conflicts?
[08:15:31] <parsnip> i can use my GUI to select two commits on the graph, and see the diff
[08:15:42] <parsnip> my CLI git-fu isn't not super hot
[08:15:46] *** Joins: jab416171 (~jab416171@c-67-172-226-173.hsd1.ut.comcast.net)
[08:15:49] <parsnip> *is not
[08:16:06] <parsnip> yeah you can decide what to do after fetching
[08:16:19] *** Joins: jclsn1 (~jclsn@149.233.201.67.dynamic-pppoe.dt.ipv4.wtnet.de)
[08:16:24] <parsnip> if you just did git pull and got conflict, it shouldn't be hard to reset locally
[08:16:24] <rewt> pull is just fetch+merge, so doing fetch first lets you look at things before doing the merge
[08:16:37] <parsnip> assuming you wanted to reconsider as if it was a fetch
[08:16:59] <parsnip> yeah, you have like no prior information to plan, if you do git pull
[08:17:11] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 260 seconds)
[08:17:12] <parsnip> fast foward only might be interesting
[08:17:28] <bn_work> so should I set `git config pull.rebase true` so I don't wind up in this again?  I'll try to remember to just do `git fetch` from now on, but I assume I would still then need to figure out how to merge/rebase?
[08:17:32] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[08:17:32] <parsnip> then it only automates the merge in the nicest case
[08:18:10] <parsnip> pull.rebase true is okay, at least it would take you in direction of linear attempt
[08:18:22] <parsnip> but it's not fast forward only
[08:18:23] <parsnip> iiuc
[08:18:42] <parsnip> and yes, trying to prefer git fetch is fine too
[08:18:53] <bn_work> parsnip: yeah, right now it's just me but 2 machines (I'm trying to not touch the same areas to avoid conflicts), another advanced dev recently pushed a branch in a completely different area (I'm assuming I'll need to tell him to re-pull after my force push)
[08:19:19] <parsnip> oh dear
[08:19:23] <bn_work> parsnip: yeah, that's not a bad idea, I assume all mine were FFs since there were no conflicts?
[08:19:36] <parsnip> we didn't know we were advising on a repo that was already being shared
[08:19:43] <parsnip> make sure the force push is okay with team
[08:19:49] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[08:20:09] <parsnip> no, a "divergent merge", i think that's separate from "fast forward only"
[08:20:15] <parsnip> you had several overlapping divergent merges
[08:20:25] <bn_work> he made his own branch
[08:20:35] <parsnip> fast forward only, is like when your commits are an ancestor of the fetched HEAD
[08:20:45] <parsnip> so merge just fast forwards
[08:21:02] <bn_work> parsnip: well, I mean, my changes could have been FF-ed?
[08:21:11] <bn_work> I did?
[08:21:12] <parsnip> okay, if you merge his branch, it will have the old divergent merges as an ancestor?
[08:21:13] <rewt> bn_work, where did you base his branch on?
[08:21:32] <rewt> or where did he* rather
[08:21:43] <parsnip> good question ^
[08:22:32] <bn_work> parsnip: no, he branched way before
[08:22:50] <parsnip> platta2: if there is a divergence between your local branch and the remote branch, that means your local branch is not an ancestor of remote branch
[08:23:08] <parsnip> platta2: sorry, i meant bn_work
[08:23:17] <rewt> if he branched from ab75188 or a16b6eb, it's ok, otherwise he'll re-introduce divergence(s)
[08:24:00] <parsnip> if your local branch is not an ancestor of remote branch, then "git pull and merge only if fast forward" will fail
[08:24:02] <rewt> so if his history includes 8397889 or 7edfe48, that's bad
[08:24:14] <bn_work> parsnip: right, I think I see what you're saying now, basically it's only for workflow where you don't commit and only pull?
[08:24:22] <bn_work> workflows
[08:25:50] <bn_work> rewt: wait, why would him branching way before the commits all this happened, reintroduce this?
[08:25:59] <parsnip> it's for many workflows, but it will more often force you to review after "git pull", rather than trying to enter into a divergent merge or rebase or  a conflict
[08:26:17] <parsnip> him not branching way before
[08:26:42] <rewt> if he branched from one of the first commits that the rebase -i didn't change, it's good; if he branched from one that got rebased, he'll re-introduce the original commit
[08:27:02] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Ping timeout: 272 seconds)
[08:27:03] <parsnip> if his branch is a descendant of your divergent merges, then work will have to be done to remove those
[08:27:29] <parsnip> in other words, you changed shared history, and that is to be avoided, and would not have to be carefully discussed with them and handled
[08:27:44] *** Joins: Batman__ (~OhTheCode@59-102-101-124.tpgi.com.au)
[08:28:40] <bn_work> he branched from a commit way before this diverged in ab75188 happened, so isn't he ok?
[08:28:50] <bn_work> s/in/after/
[08:28:56] <parsnip> they'll have to fetch your changes, then consider the graph, is one way to look at it
[08:29:01] <parsnip> sounds good
[08:29:09] *** Joins: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4)
[08:29:09] <rewt> the easiest way to solve it is for him to `git fetch`, and then `git rebase origin/master` ... that should leave his branch with only the commits he made in his branch
[08:29:36] <parsnip> hopefully the "common ancestor" is a commit before where the rebase occurred.
[08:29:37] <rewt> but yeah, if he made the branch before ab75188, he's ok
[08:30:38] <parsnip> that sounds good. here's another idea, not sure if it sounds super complicated
[08:30:43] <parsnip> :
[08:31:20] <rewt> the CA will have to be on the current linear history, so a rebase will eliminate any of the commits that were rebased here, leaving his branch with only his commits
[08:31:32] <parsnip> have them fetch your origin/master, create a temporary branch at current local master, rebase that temp branch onto origin/master, push that temp branch, now you can fetch it and make sure everything looks good
[08:31:44] <rewt> (if all the changes in a commit are already present, that commit is removed during the rebase)
[08:32:29] <parsnip> oh, you mean the rebase might work even if it had the divergent merges?
[08:32:34] <rewt> yea
[08:32:55] <parsnip> that makes sense, i hadn't thought of that
[08:33:45] *** Quits: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4) (Ping timeout: 252 seconds)
[08:33:52] <rewt> it is possible to force an empty commit at that point, but that's not default
[08:34:23] <bn_work> CA?
[08:34:35] <bn_work> commit ancestor?
[08:34:47] <rewt> yes
[08:34:50] <rewt> no
[08:34:53] <rewt> common ancestor
[08:35:08] <rewt> the last commit that's in both branches' histories
[08:36:33] <parsnip> i've used divergent merges almost never
[08:37:18] <bn_work> empty commit?
[08:38:18] <rewt> a commit with no changes
[08:38:37] <bn_work> didn't know that was possible...what is the purpose of that?
[08:38:48] <bn_work> you mean like a tag?
[08:39:01] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26)
[08:39:03] <rewt> no, an actual commit, same as any other, but no diffs from the previous one
[08:39:31] <rewt> a tag, like a branch, is just a pointer to a specific commit
[08:40:03] <bn_work> right, I was just trying to think of when a commit would be empty, but I guess it's not really a commit to begin with?
[08:40:05] <parsnip> i like my "First commit" to be empty
[08:40:13] <parsnip> i'm silly
[08:40:17] <parsnip> sometimes you can use it as a reminder
[08:40:27] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[08:40:29] <parsnip> it is a commit
[08:40:41] <parsnip> just, sort of a trivial one
[08:40:45] <parsnip> fsvo "trivial"
[08:40:55] *** Quits: structoha (~structoha@gateway/tor-sasl/structoha) (Ping timeout: 240 seconds)
[08:40:57] *** Joins: Sulky (~Sulky@37.166.199.57)
[08:41:00] <parsnip> it might be the initial commit in the category of commits /s
[08:41:14] <parsnip> it's "useless"
[08:41:16] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[08:41:23] <parsnip> hence why git prevents it by default
[08:41:35] <parsnip> you have to say, "no i'm serious, i really want an empty commit"
[08:41:36] <rewt> maybe you have a CI/CD system that triggers on commit, and you want to re-trigger it, but don't want to make any changes
[08:45:19] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[08:47:13] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[08:47:44] <parsnip> A commit is not just a worktree (diff). So it not only contains the state of the worktree, which can be "trivially" the same as its parent, but it also records who the parent is, the author and committer information, the commit message and the hash of all of that.
[08:47:47] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[08:48:17] <parsnip> well, and parent can be empty too, for initial commits
[08:48:43] <parsnip> (you can have more than one initial commits, something not well indicated by some graphs)
[08:49:21] <parsnip> i can't remember if you can create a commit that has no author or committer. maybe not with git porcelain.
[08:56:21] <rewt> interesting... if you want to change the author of a commit, it won't let you use a blank, and if you use something that partially matches a previous author, their name+email is used
[08:57:19] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Ping timeout: 260 seconds)
[08:58:12] *** Quits: DoofusCanadensis (~DoofusCan@2604:3d09:47c:f970::fb) (Quit: So as you can see from this flowchSQUIRREL!!)
[09:02:21] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 252 seconds)
[09:04:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:09:01] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26) (Ping timeout: 240 seconds)
[09:13:34] *** Joins: _xor (~xor@74.215.232.169)
[09:22:21] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[09:23:57] *** Joins: madewokherd` (~urk@65-128-244-235.mpls.qwest.net)
[09:27:40] *** Quits: madewokherd (~urk@65-128-244-235.mpls.qwest.net) (Ping timeout: 268 seconds)
[09:30:52] *** Joins: pyeverything (~pyeveryth@64-18-153-56.starry-inc.net)
[09:31:14] *** Quits: pyeverything (~pyeveryth@64-18-153-56.starry-inc.net) (Read error: Connection reset by peer)
[09:34:00] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[09:36:06] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[09:37:24] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[09:38:13] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[09:38:25] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[09:38:36] *** Quits: madewokherd` (~urk@65-128-244-235.mpls.qwest.net) (Ping timeout: 272 seconds)
[09:39:56] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[09:40:37] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[09:42:55] *** Joins: madewokherd (~urk@65-128-154-118.mpls.qwest.net)
[09:47:15] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[09:47:28] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[09:49:45] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 256 seconds)
[09:50:48] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[09:51:57] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[09:52:01] *** Quits: madewokherd (~urk@65-128-154-118.mpls.qwest.net) (Ping timeout: 256 seconds)
[09:52:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[09:53:12] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[09:55:04] *** Quits: humanBird (~humanBird@2603-8001-7000-3642-89da-56d2-0bad-5a2d.res6.spectrum.com) (Quit: Client closed)
[09:57:16] *** Joins: ferdna (~ferdna@user/ferdna)
[09:59:12] *** Joins: saroy (~Sandipan@45.249.73.212)
[10:05:32] <Hash> Hi
[10:05:55] <Hash> I worked on something all day, then I had a bug, so I did `git stash` and it stashed it and reverted to head, and bug went away
[10:06:05] *** Joins: structoha (~structoha@gateway/tor-sasl/structoha)
[10:06:16] <Hash> Now I need to do a diff of stuff in stash and stuff in head, so see what I did.
[10:06:27] <Hash> What should I do, I read all the docs for git-stash
[10:06:35] <Hash> https://git-scm.com/docs/git-stash
[10:07:32] <Hash> I am in my testing branch. Should I `git stash apply` and commit this broken code, and so history is saveD?
[10:07:40] <Hash> What is the best method in your opinions?
[10:08:12] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[10:09:05] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:12:22] <parsnip> i'm not #git pro, but `git stash apply` sounds good to me. although i rarely use stash, i usually use magit to apply
[10:12:41] <Hash> Yeh I know you from #emacs
[10:12:46] <Hash> I am using cli
[10:12:55] <parsnip> you could also convert it to a branch
[10:13:15] <parsnip> :-)
[10:13:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[10:13:26] <Hash> thanks for reply, I'll check out stash apply and then commit them to a commit. You can always revert or do something else. I don't want to lose the changes. I could put them into a testing-2 branch or 'bugged' branch
[10:13:56] <Hash> so git stash apply, get my stash back. Then git branch newbranch and the changes should go into a new branch right?
[10:14:12] <Hash> Or if I git stash apply, then just commit to 'broken commit'
[10:14:16] <Hash> So at least it's in history
[10:14:17] <parsnip> i guess stash just has extra features, like effectively saving index and working tree both
[10:14:39] <Hash> Use git stash when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit.
[10:14:59] <Hash> ... and restored (potentially on top of a different commit) with git stash apply
[10:15:02] <parsnip> i imagine theoretically, you could commit the working tree and index as separate commits
[10:15:15] *** Quits: structoha (~structoha@gateway/tor-sasl/structoha) (Ping timeout: 240 seconds)
[10:15:21] <Hash> Calling git stash without any arguments is equivalent to git stash push <- that's what I did. push
[10:15:31] <parsnip> er, reverse, index, then working tree, sounds intuitive to me
[10:15:48] <parsnip> yeah they sort of act as generalized patches i guess
[10:15:58] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[10:16:06] <parsnip> and, so like a stack of stashes i guess
[10:16:19] <Hash> pop: Remove a single stashed state from the stash list and apply it on top of the current working tree state, i.e., do the inverse operation of git stash push. The working directory must match the index.
[10:16:47] <Hash> apply doesn't remove it
[10:16:50] <parsnip> i guess it's a stack because it's not a graph
[10:16:51] <Hash> pop removes it
[10:17:18] <parsnip> yeah, i usually use apply until i'm sure i'm done with it
[10:17:54] <parsnip> i guess stash is good if you really have to switch tasks quickly
[10:18:04] <Hash> git stash branch bugged_branch stash@{0} ?
[10:18:21] <Hash> trying to get the syntax right
[10:18:56] <Hash> https://opensource.com/article/21/4/git-stash
[10:18:59] <Hash> A practical guide to using the git stash command
[10:20:25] <parsnip> that looks right. i wonder if there's a happy medium on documentation, somewhere between git's dry man pages, and something like a usage article
[10:20:49] <Hash> if you do git stash apply
[10:20:50] <parsnip> https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning
[10:20:54] <Hash> How do you reverse it?
[10:21:11] <Hash> I did git stash, then git stash apply to get it back, then now I want to stash it again
[10:21:20] <Hash> I didn't pop, so it's sitll in git stash list
[10:21:31] <Hash> But it's been applied. How do I unapply it?
[10:21:37] <parsnip> oh, you want to add a stash@{1}?
[10:21:45] <parsnip> i mean, push to the stack?
[10:21:47] <Hash> No
[10:21:56] <Hash> 1) git stash
[10:22:05] <Hash> 2) git stash apply <- to get stash0 back
[10:22:17] <parsnip> oh, intuitively, i'm guessing you can just reset the branch ref
[10:22:17] <Hash> 3) Now I want to undo #2
[10:22:20] <parsnip> reading...
[10:22:32] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[10:22:37] <ikke> git stash apply applies a stash without dropping it
[10:22:43] <Hash> correct
[10:22:46] <parsnip> yeah, it sounds like you wouldn't lose anything if you "removed" the apply
[10:22:53] <parsnip> but so i want to read what apply does exactly
[10:22:55] <Hash> Now that the stash been reapplied again, if I wanted to get rid of those chagnes, what would I do?
[10:22:56] <ikke> afaik, there is no way to just unapply what you just stashed
[10:23:08] <parsnip> apply moves the branch ref?
[10:23:13] <ikke> no
[10:23:17] <Hash> Nothing happens to branch or head
[10:23:18] <ikke> it's a worktree operation
[10:23:21] <parsnip> no they applied it
[10:23:29] <Hash> just locally it creates a working tree copy adn puts changes there
[10:23:30] <ikke> git stash show -p stash@{0}
[10:23:31] <parsnip> they stashed, then applied, they want to undo the apply
[10:23:38] <Hash> ^ correct
[10:23:43] <Hash> Just for learning purposes
[10:24:03] <Hash> I want to get my HEAD back, but keep the stash
[10:24:03] <parsnip> hmm, if you had unsaved changes in worktree, and tried to apply a stash, would it reveal conflict?
[10:24:08] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:24:21] <Hash> So like you stash, then apply, then what do you do if you want to get rid of the changes again?
[10:24:44] <ikke> Hash: if you did not have any other changes, the easiest would be to just reset your worktree
[10:24:45] <parsnip> reset worktree to index?
[10:24:59] <ikke> otherwise, you could try to apply the inverse of the stash
[10:24:59] <parsnip> but what if you had modified the worktree inbetween stash and apply?
[10:25:02] <Hash> Well stash is currently applied
[10:25:07] <Hash> So how about we just create a new branch
[10:25:16] <Hash> put the broken changes in there
[10:25:26] <Hash> so at leat my testing branch which is bug free is clean.
[10:25:47] <parsnip> make sure working tree and index don't have unsaved items before applying
[10:25:53] <parsnip> what i would probably do ^
[10:26:04] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[10:26:22] <parsnip> how do you apply the inverse of a stash?
[10:26:57] <parsnip> hmm, `git apply -R <patch>`?
[10:27:13] <parsnip> so you need the patch from the stash
[10:27:15] <parsnip> but still
[10:27:46] <parsnip> yeah usually what i do, is i clean working tree and index, then apply the stash, then commit the index as one commit, and the working tree as as a second commit
[10:28:08] <parsnip> imo, that's a faithful representation of the stash
[10:28:52] <parsnip> and give it a clever branch name, like `faithful/stash/0`
[10:29:18] <Hash> well, right now the stash is applied. So should I just create a new branch from these changes
[10:29:24] <Hash> or use git stash branch command?
[10:30:29] <Hash> If I don't commit, and do git branch testing2, it should put all my uncommited changes in that branch right?
[10:30:38] <parsnip> i already know how to make a branch and make commits from an index and working tree, so that would be my first reaction
[10:30:49] <Hash> Ok so I should do that too
[10:31:03] <Hash> Right now the stash is applied, and git status shows lot of modified files
[10:31:08] <parsnip> roughly, i'd have to review if `git branch foo` checks that branch out
[10:31:09] <Hash> So now I can do git branch testing-2
[10:31:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[10:31:39] <parsnip> is there only changes in index, or only changes in working tree, or both?
[10:31:59] <Hash> you switch branches with git checkout branchname
[10:32:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:32:13] <Hash> you crate branch with git branch newbranch
[10:32:28] <Hash> Taht's why I use cli mostly cuz if you use gui and or magitt etc. you don't get to learn git
[10:32:32] <Hash> once I larn it, then guis are okay to use
[10:33:45] <parsnip> right, i agree, i've gotten myself into this mess, using the GUI
[10:34:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[10:34:15] <parsnip> but i still know more about git than the average non computer user ;-)
[10:34:35] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:35:11] <Hash> That's true
[10:35:15] <Hash> you're awesome :)
[10:36:52] <Hash> So what if you have uncommited changes, and you want to put those changes into a new branch
[10:37:03] <Hash> The data is saved on disk already but not commited
[10:37:18] <Hash> I don't want to put these bugged code into the original branch
[10:37:44] <Hash> I'm trying to find out if when you create a new branch, does it copy your uncommited changes to that branch? Or how does it do?
[10:38:19] <parsnip> iiuc, commits go towards movement of the checked out branch ref
[10:38:38] <parsnip> iirc, almost all git commands only move the checked out branch ref
[10:38:51] <parsnip> i had some weird mnemonic like this
[10:38:55] <ikke> uncommitted changes do not belong to any branch
[10:39:00] <ikke> they just remain in your worktree
[10:39:09] *** Quits: Misotauros (~Misotauro@gateway/vpn/pia/misotauros) (Ping timeout: 252 seconds)
[10:39:19] <Hash> git checkout -b newBranch
[10:39:21] <parsnip> like, even merge
[10:39:22] <Hash> then commit
[10:39:24] <Hash> I got it
[10:39:31] <parsnip> when you merge two branches, the checked out one is the one that moves
[10:39:31] <Hash> https://stackoverflow.com/questions/13687334/moving-uncommitted-changes-to-a-new-branch
[10:40:22] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[10:41:12] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[10:41:52] <ikke> !float
[10:41:53] <gitinfo> If you have made a change in your working directory and have NOT YET COMMITTED, you may "float" that change over to another (`git checkout existing_branch`) or new (`git checkout -b newbranch`) branch and commit it there. If the files you changed differ between branches, the checkout will fail. In that case, `git stash` then checkout, and `git stash apply` and go through normal conflict resolution.
[10:43:05] <parsnip> it is kind of cool that you can create a new branch and check it out, with uncommitted changes, as long as it is at current commit
[10:46:55] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:46:59] <igemnace> well if you think about it, you're really only changing HEAD in such a case. no need to touch the work tree
[10:46:59] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Read error: Connection reset by peer)
[10:47:56] <Hash> Ok
[10:48:03] <Hash> Broken code is now in testing-2 branch
[10:48:24] <Hash> Now I can see the diff visually and see what changed from previous commit that caused the problem.
[10:48:52] <Hash> To only today's work is bugged. Yesterday's commit works on `testing`. testing-2 is broken code.
[10:48:57] <Hash> So I will have to debug that tomorrow.
[10:49:17] <Hash> If I can't figure it out, start over in testign branch from new on these new features
[10:49:23] <Hash> I lvoe git.
[10:49:27] <Hash> I wouldn't know what I would do without it
[10:49:47] <Hash> How did we ever use CVS and SVN
[10:50:12] *** Joins: R2robot (~R2robot@user/r2robot)
[10:50:24] *** Quits: Murr (~Murr@212-51-143-101.fiber7.init7.net) (Remote host closed the connection)
[10:50:52] *** Joins: Murr (~Murr@212-51-143-101.fiber7.init7.net)
[10:53:58] <parsnip> i never did
[10:55:21] *** Joins: stenno (~stenno@user/stenno)
[10:56:43] <dodo> meh, has somebody noticed that bash completion from upstream git-completion.bash completes remote names and ignores local paths? that's not something i want..
[10:59:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[11:00:16] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[11:02:14] *** Joins: feriman (~feriman@188.163.113.151)
[11:11:30] *** Joins: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4)
[11:16:12] *** Quits: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4) (Ping timeout: 268 seconds)
[11:18:12] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[11:22:45] *** Joins: carl-- (~carl-@185.103.188.130)
[11:27:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[11:27:26] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[11:33:37] *** Quits: robink (~quassel@user/robink) (Quit: No Ping reply in 180 seconds.)
[11:35:03] *** Joins: robink (~quassel@user/robink)
[11:35:24] *** Joins: pizdets (~pizdets@183.182.111.82)
[11:36:26] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[11:37:14] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[11:37:43] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:38:28] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[11:42:19] *** Joins: vysn (~vysn@user/vysn)
[11:44:30] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[11:45:16] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Ping timeout: 272 seconds)
[11:46:15] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[11:48:55] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[11:49:32] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[11:50:06] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:52:27] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[11:58:29] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[11:58:52] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[12:00:55] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:02:32] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Client Quit)
[12:03:19] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:03:33] *** Joins: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[12:04:35] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[12:05:02] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Client Quit)
[12:05:28] *** Joins: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4)
[12:06:32] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:10:53] <geirha> I write my own completions, but it may be it will complete paths if it
[12:11:00] <geirha> if it's after a -- argument
[12:11:51] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:12:23] *** Quits: hbautista (~hbautista@187.171.53.196) (Ping timeout: 260 seconds)
[12:14:01] *** Joins: yosef[m]1 (~yosefmtxt@2001:470:69fc:105::1:e4f9)
[12:15:08] *** Quits: Deknos (~someone@user/menace) (Remote host closed the connection)
[12:15:25] *** Joins: Deknos (~someone@ppp-93-104-177-126.dynamic.mnet-online.de)
[12:16:31] <geirha> ugh, 3.5k lines. I'm not going to bother to go through that. Seems like over-engineering
[12:17:07] *** Joins: stenno (~stenno@user/stenno)
[12:18:07] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[12:18:20] *** Joins: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge)
[12:18:27] <geirha> anyway, you could also try starting the path with ./; it will likely switch to filename completion then
[12:19:07] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:19:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[12:19:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[12:20:12] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:25:19] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[12:26:01] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:27:33] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:27:42] *** Quits: PaterTemporalis (~woooopsie@dsl-76-143.bl27.telepac.pt) (Ping timeout: 272 seconds)
[12:30:33] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Remote host closed the connection)
[12:30:43] *** Quits: germ (~germ@germ.lanvaux.fr) (Quit: ZNC 1.8.0 - https://znc.in)
[12:30:57] *** Joins: germ (~germ@germ.lanvaux.fr)
[12:32:03] *** Joins: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr)
[12:33:09] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:34:21] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Remote host closed the connection)
[12:36:12] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[12:36:53] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:37:14] *** Joins: NeilRG (~Neil_@96-127-194-85.qc.cable.ebox.net)
[12:37:24] <NeilRG> do I need to use a personal access token with github everywhere now?
[12:37:48] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:38:06] <geirha> using ssh keys is easier imo
[12:39:28] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[12:39:52] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[12:40:35] *** Quits: Deknos (~someone@ppp-93-104-177-126.dynamic.mnet-online.de) (Quit: Deknos)
[12:41:39] *** Joins: palasso (~palasso@user/palasso)
[12:42:10] <NeilRG> geirha, good idea, so I just clone using the ssh link?
[12:42:46] <parsnip> yes
[12:43:32] <parsnip> assuming you followed steps that GitHub provides to configure public key
[12:43:50] <NeilRG> parsnip, okay thanks
[12:43:53] <parsnip> GitHub has pretty good docs for various aspects of setup
[12:43:56] <NeilRG> I was using git://, but now it won't let me
[12:43:59] <NeilRG> so I'm switch to ssh
[12:44:22] *** Quits: Batman__ (~OhTheCode@59-102-101-124.tpgi.com.au) (Read error: Connection reset by peer)
[12:44:47] *** Joins: Batman__ (~OhTheCode@59-102-101-124.tpgi.com.au)
[12:45:13] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[12:46:51] <geirha> git remote set-url origin git@github.com:<username>/<reponame>.git
[12:48:20] *** Quits: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Quit: leaving)
[12:49:47] *** Joins: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[12:50:39] <NeilRG> geirha, thanks!
[12:51:01] <NeilRG> geirha, that's useful.  I ended up deleting and re-cloning
[12:51:50] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[12:52:31] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:53:14] *** Quits: km (znc@user/km) (Quit: ZNC - https://znc.in)
[12:54:30] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[12:55:14] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[12:59:08] *** Joins: km (znc@user/km)
[12:59:40] *** Quits: km (znc@user/km) (Remote host closed the connection)
[13:02:12] *** Quits: caverton (~caverton@ercro.tech) (Quit: Ping timeout (120 seconds))
[13:02:24] *** Joins: caverton (~caverton@ercro.tech)
[13:03:12] *** Quits: alip (~alip@exherbo/developer/alip) (Remote host closed the connection)
[13:03:28] *** Joins: alip (~alip@exherbo/developer/alip)
[13:03:36] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Remote host closed the connection)
[13:03:56] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[13:05:25] *** Quits: iokill_ (~dave@static.16.105.130.94.clients.your-server.de) (Ping timeout: 240 seconds)
[13:06:03] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:06:24] *** Joins: iokill (~dave@static.16.105.130.94.clients.your-server.de)
[13:06:32] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26)
[13:06:56] *** Joins: km (znc@user/km)
[13:07:00] *** Quits: jimklimov (~jimklimov@ip-86-49-241-232.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[13:13:52] *** Quits: carl-- (~carl-@185.103.188.130) (Quit: Leaving)
[13:15:21] *** Joins: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca)
[13:16:03] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[13:16:20] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[13:16:54] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:21:45] *** Quits: NeilRG (~Neil_@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[13:22:11] *** Joins: xylz (~xylz@user/xylz)
[13:23:32] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Remote host closed the connection)
[13:23:44] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[13:30:02] *** Quits: km (znc@user/km) (Remote host closed the connection)
[13:31:48] *** Joins: km (znc@user/km)
[13:32:42] *** Joins: reset (~reset@user/reset)
[13:39:09] *** Joins: keypusher (~keypusher@user/keypusher)
[13:39:47] *** Joins: duxsco (~Thunderbi@user/duxsco)
[13:40:06] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26) (Ping timeout: 252 seconds)
[13:42:50] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[13:42:52] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[13:43:26] *** Quits: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca) (Quit: Leaving)
[13:44:19] *** Quits: keypusher (~keypusher@user/keypusher) (Ping timeout: 260 seconds)
[13:48:46] *** Quits: austin987 (~austin@cpe-173-174-99-192.austin.res.rr.com) (Ping timeout: 272 seconds)
[13:49:23] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[13:49:45] *** Joins: austin987 (~austin@cpe-173-174-99-192.austin.res.rr.com)
[13:49:58] *** Joins: menace (~someone@ppp-93-104-177-126.dynamic.mnet-online.de)
[13:49:58] *** Quits: menace (~someone@ppp-93-104-177-126.dynamic.mnet-online.de) (Changing host)
[13:49:58] *** Joins: menace (~someone@user/menace)
[13:50:12] *** menace is now known as Deknos
[13:51:40] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[13:52:45] *** Quits: duxsco (~Thunderbi@user/duxsco) (Ping timeout: 252 seconds)
[13:54:13] *** Joins: Anticom (~Anticom@ip-088-153-048-020.um27.pools.vodafone-ip.de)
[13:56:33] <Anticom> Hi folks. Let's say I've tagged releases 1.0.0, 1.1.0 and 2.0.0 on my main branch. Now I'd like to release a patch for 1.1.0 as 1.1.1. What are the best pratices on managing this (via branches presumably)? Are there multiple options to do this or is there just "one" good way? How would I name such a branch?
[13:57:57] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[13:58:15] *** Joins: cart_ (~cart@2a01:4c8:1075:1c6d:d007:602:bccd:c8ff)
[13:58:45] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[14:00:42] <ikke> Anticom: a project I work on typically uses stable-x.y branches
[14:01:17] <Anticom> ikke: So I would branch off of 1.0.0 with a `stable-1.0` branch and also tag my 1.1.1 release in there?
[14:01:22] <ikke> yes
[14:01:28] <Anticom> Nice, thanks!
[14:01:44] <geirha> I'd branch off 1.1.0 with stable-1.1 and then tag 1.1.1 in there
[14:02:09] <ikke> oh, right
[14:02:20] <ikke> 1.1.1 would be in the stable-1.1 branch
[14:02:38] <ikke> If 1.0 would also need to fix, you'd cherry-pick the change to there
[14:05:30] *** Quits: feriman (~feriman@188.163.113.151) (Quit: leaving)
[14:06:55] *** Joins: feriman (~feriman@188.163.113.151)
[14:07:09] *** Joins: jimklimov (~jimklimov@193-111-134-201.rferl.net)
[14:12:56] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[14:13:51] *** Quits: mannequin (uid453465@id-453465.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:14:56] <Anticom> Err yea of course, small hickup on my side. Of course it's gonna be stable-1.1 :) Thanks for the heads-up guys
[14:16:24] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Remote host closed the connection)
[14:16:36] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[14:20:03] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[14:20:13] *** Quits: feriman (~feriman@188.163.113.151) (Ping timeout: 240 seconds)
[14:25:43] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 256 seconds)
[14:25:59] *** Joins: madewokherd (~urk@65-128-190-55.mpls.qwest.net)
[14:26:48] <CalimeroTeknik> can several signatures be added to a commit?
[14:27:03] <CalimeroTeknik> as signoffs I mean
[14:28:29] *** Joins: xkuru (~xkuru@user/xkuru)
[14:29:12] *** Joins: azed (~azed@197.19.177.23)
[14:32:32] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[14:32:48] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[14:35:58] *** Joins: tulpa_ (~tulpa@2a00:23c4:c50a:b800:2bb:60ff:fe60:7269)
[14:39:49] <ikke> yes
[14:43:28] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Quit: Leaving)
[14:43:45] *** Quits: cart_ (~cart@2a01:4c8:1075:1c6d:d007:602:bccd:c8ff) (Ping timeout: 250 seconds)
[14:45:59] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[14:46:31] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:46:51] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[14:48:19] *** Joins: vishal (~vishal@fedora/vishal)
[14:48:44] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[14:50:16] *** Joins: dslegends (~dslegends@user/dslegends)
[14:50:16] *** Quits: Murr (~Murr@212-51-143-101.fiber7.init7.net) (Remote host closed the connection)
[14:50:32] *** Joins: Murr (~Murr@212-51-143-101.fiber7.init7.net)
[14:52:42] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[14:54:38] *** Quits: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Quit: l4s8g)
[14:55:54] *** Quits: xylz (~xylz@user/xylz) (Ping timeout: 272 seconds)
[15:00:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[15:00:28] <CalimeroTeknik> even after the commit is made, someone can say "I validate this" (possibly with PGP)?
[15:00:53] *** Quits: haskl (~haskl@user/haskl) (Read error: Connection reset by peer)
[15:01:07] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:01:12] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[15:01:53] <CalimeroTeknik> because I'm not finding any tutorial to even tell whether it exists
[15:03:00] *** Joins: haskl (~haskl@user/haskl)
[15:05:18] <CalimeroTeknik> it seems to me as though unless you are creating a commit, you can't add a signature to it
[15:07:11] <canton7> Yeah, commit signatures are added to the commit itself, and commits are immutable. You can of course create a tag which has a signature and which points to a commit
[15:07:50] <CalimeroTeknik> got it, indeed that will work then, to signal someone says "this is okay"
[15:08:02] <CalimeroTeknik> man git review mentions that
[15:08:02] <gitinfo> the git manpage is available at https://gitirc.eu/git.html
[15:08:10] <canton7> Ah, you're talking about Signed-Off-By, rather than a PGP signature. Same deal: that's just a line in the commit message
[15:08:50] <CalimeroTeknik> no, I also discovered that git had this notion called signed-off-by, indeed, but I don't mean that (after all it's just a facility to add text to the message as you say)
[15:09:08] <canton7> Ah, right
[15:09:30] <CalimeroTeknik> so, the way is to create a signed tag then
[15:09:38] <ikke> Because you mentioned 'as signoffs', I assumed you beed signed-off-by
[15:09:41] <canton7> Yeah signing individual commits has questionable benefit: the normal way is by signing the release tag. That ensures that neither the commit being tagged nor any of its parents can be tampered with
[15:09:44] <ikke> meant*
[15:11:07] <CalimeroTeknik> has anyone ever raised the issue of needing several signatures on the release tag? if say, it needs the approval of 2+ maintainers
[15:11:36] *** Joins: keypusher (keypusher@user/keypusher)
[15:12:31] *** Joins: otis^ (~otis@96-91-136-49-static.hfc.comcastbusiness.net)
[15:13:04] *** Quits: azed (~azed@197.19.177.23) (Quit: WeeChat 3.4)
[15:14:51] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 260 seconds)
[15:16:36] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 240 seconds)
[15:16:45] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[15:18:33] *** Joins: xylz (~xylz@user/xylz)
[15:28:12] *** Quits: hongkongliberato (~trisqueli@223.149.101.155) (Ping timeout: 272 seconds)
[15:30:04] *** Joins: toulene3 (~toulene@user/toulene)
[15:30:22] *** Joins: hongkongliberato (~trisqueli@223.149.101.155)
[15:30:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[15:30:51] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[15:31:17] *** Joins: DibbTubberOne (~DibbDibbe@2a02:908:956:3ce0::3747)
[15:31:17] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[15:31:22] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[15:31:22] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[15:31:23] *** toulene3 is now known as toulene
[15:31:31] <canton7> CalimeroTeknik, signatures are about internal approvals - they're a way for people who clone the repo to ensure that noone's tampered with it
[15:32:43] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:32:51] <canton7> CalimeroTeknik, if you're worried about internal approvals, that's normally done with other tooling. E.g. you might be using github/gitlab, which enforces that branches can only be merged to main after they pass code review, and that a code review needs 2 approvals from <group> before it can be merged. Equally, you may only be allowed to merge to
[15:32:51] <canton7> the production branch with the appropriate number of approvals. That sort of thing is nicely handled outside of git itself
[15:34:57] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 240 seconds)
[15:35:48] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 272 seconds)
[15:37:15] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[15:37:43] <CalimeroTeknik> external metadata indeed. but the signable tags are quite good already
[15:37:59] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26)
[15:38:07] *** Joins: Andy_Kw (~Andy_Kw@78.194.179.77)
[15:40:52] *** Quits: xylz (~xylz@user/xylz) (Ping timeout: 272 seconds)
[15:41:51] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[15:44:10] *** Joins: stenno (~stenno@user/stenno)
[15:45:05] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:46:29] <dob1> is stash indipendend from the branch ?
[15:48:11] <parsnip> i believe so
[15:48:29] <parsnip> it's sort of like a pair of related diffs
[15:48:54] <parsnip> hmm
[15:49:06] <parsnip> git represents diffs as working trees?
[15:49:23] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[15:50:12] <parsnip> but consider that the stashes are a stack, not a graph like you see in git log --all --graph
[15:50:42] <parsnip> so you accrue them, like a stack, but each stash is sort of independent of the commit graph
[15:51:01] <parsnip> and branches are just pointers to commits in the commit graph
[15:52:23] *** Joins: thiago (~thiago@2804:431:cfca:8386:d0aa:86c2:195a:cfae)
[15:54:38] *** Joins: Rashad (~textual@2a01:9700:1290:7400:5c48:d281:c915:ff70)
[15:54:44] <parsnip> i think it's implemented in terms of the commit that your branch ref pointed to
[15:54:47] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[15:55:12] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[15:56:02] <dob1> parsnip, I was thinking for example if you delete the branch where you create the stash, what happen if it is a diff ? it has to be "recalculated"
[15:56:14] <ikke> dob1: commits are not diffs, they are snapshots
[15:56:18] <parsnip> but it behaves somewhat like other commits. you can try to apply it elsewhere, which might be comparable to rebasing. it may work fine, or there may be conflicts
[15:56:20] <ikke> so git _always_ calculates the diffs
[15:56:37] <ikke> and if you delete the branch, it's just a pointed that you delete
[15:56:44] <ikke> the history is still there, and kept alive by the stash
[15:56:55] <ikke> a pointer*
[15:56:57] *** Quits: hongkongliberato (~trisqueli@223.149.101.155) (Ping timeout: 256 seconds)
[15:58:00] *** Joins: cart_ (~cart@2a01:4c8:1075:1c6d:b32f:f45:8c1b:13c1)
[15:58:00] <dob1> "the history is still there"  because the stahs exists, when the stash is clear/pop/drop the history of the deleted branch will be gone?
[15:58:12] <ikke> dob1: not immediately, but eventually
[15:58:15] <parsnip> ikke: but you have to be _at_ some commit to apply the stash, and if you're no longer at the commit that branch was at, then stash apply will be like rebase
[15:58:51] *** Joins: lgc (~lgc@user/lgc)
[15:59:27] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[15:59:45] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[16:01:03] <dob1> ikke, eventaylly ? this means that if I delete a branch (that is not merged in another) I cannot be sure the data are gone?
[16:01:22] <dob1> I didn't understand this
[16:01:41] <ikke> correct, git uses garbage collection
[16:01:54] <ikke> because git needs to make sure the history is not referenced by other refs
[16:02:08] <ikke> and the reflog will keep things alive for at least 90 days
[16:02:26] <ikke> So, there is no dirrect command to directly delete commits
[16:02:39] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:03:19] *** Joins: rsx (~dummy@ppp-188-174-137-201.dynamic.mnet-online.de)
[16:03:35] <dob1> this is not a problem if someone for example commit as error some secret data?
[16:04:08] *** Joins: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da)
[16:04:22] *** Quits: Rashad (~textual@2a01:9700:1290:7400:5c48:d281:c915:ff70) (Read error: Connection reset by peer)
[16:04:39] <ikke> That is a potential issue. git does give tools to deal with that, but you need to make sure there is not a single reference left
[16:05:11] <ikke> But if you pushed it to github for example, you have no control over when objects are cleaned up
[16:05:28] *** Quits: DibbTubberOne (~DibbDibbe@2a02:908:956:3ce0::3747) (Quit: Leaving)
[16:06:29] <dob1> it's not simple...
[16:06:37] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.5-rc1)
[16:06:56] <ikke> No
[16:07:01] *** Quits: tulpa_ (~tulpa@2a00:23c4:c50a:b800:2bb:60ff:fe60:7269) (Ping timeout: 240 seconds)
[16:07:25] *** Joins: xylz (~xylz@user/xylz)
[16:07:33] *** Quits: funhouse (~funhouse@user/funhouse) (Quit: Client closed)
[16:07:43] *** Quits: shan (shan@cyblog/maintainer/shan) (Ping timeout: 256 seconds)
[16:07:53] <dob1> "git uses garbage collection" why there is not a command to force it?
[16:08:14] <ikke> git gc
[16:08:24] <ikke> (or git maintenance run, nowadays)
[16:08:39] <ikke> but, like I said, you need to make sure there are no references left
[16:09:18] <ikke> you can use git reflog --expire-unreachable to get rid of reflog entries that point to unreachable history
[16:09:43] <ikke> git reflog --expire-unreachable=now
[16:09:56] <ikke> or git reflog --expire=now to expire all entries
[16:10:07] <dob1> I take a not of them, thanks
[16:10:11] <dob1> *note
[16:10:58] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26) (Ping timeout: 268 seconds)
[16:11:40] <mackerman> All of this is just in your repo. If you collaborate with others and have pushed, you have to make them do similar cleanup on all copies of the repo.
[16:12:09] <ikke> Yes, good addition
[16:12:17] *** Joins: hongkongliberato (~trisqueli@223.149.101.155)
[16:13:46] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[16:14:16] <dob1> It's something that I was not aware
[16:14:31] <dob1> I was thinking branch deleted -> gone, but it's not
[16:15:23] *** Joins: jaggz (~jaggz@user/jaggz)
[16:15:40] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[16:15:45] <jaggz> How do I merge these last two commits, so they have just the "Added instructions..." title?
[16:15:47] <jaggz> https://github.com/jaggzh/mumble/commits/doc-details-debian/docs/dev/build-instructions/build_linux.md
[16:16:05] <jaggz> Mumble project desires my pull request be a single commit
[16:16:20] <jaggz> (but I edited build_linux.md after the fact, through the web)
[16:25:50] *** Joins: Rashad (~textual@2a01:9700:1290:7400:5c48:d281:c915:ff70)
[16:26:13] <Anticom> jaggz: well commits pushed to a remote _should_ be considered immutable anyways, but if you really wanted to probably squash them interactively and force push
[16:26:50] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[16:27:00] *** Quits: hongkongliberato (~trisqueli@223.149.101.155) (Ping timeout: 268 seconds)
[16:27:21] *** Quits: xylz (~xylz@user/xylz) (Quit: leaving)
[16:28:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[16:28:20] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[16:31:00] *** Joins: shan (shan@cyblog/maintainer/shan)
[16:31:55] <Anticom> s/squash/rebase
[16:32:39] <jaggz> Anticom, hmm.. I used someone's instructions with reset --soft
[16:32:43] <jaggz> git reset --soft HEAD~3
[16:32:51] *** Joins: PaterTemporalis (~woooopsie@dsl-76-143.bl27.telepac.pt)
[16:33:02] <jaggz> then my push said I needed to pull changes
[16:33:04] <Anticom> Well that would work as well I suppose
[16:33:49] <Anticom> Yes, because git doesn't know you undid some commits in your working copy and hence assumes you'd want to pull in the changes that live on the remote
[16:33:56] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[16:34:14] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[16:34:23] <jaggz> hmm
[16:34:35] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 240 seconds)
[16:35:16] <jaggz> Anticom, how do you make it go through without the pull?
[16:35:58] <jaggz> somehow I'm down to like 10 commits in my local git log, and 2 showing in my branch on github :/
[16:36:00] <Anticom> make what go though? You have your repo on the remote (github) and in your working copy locally on your machine. If you really want to rewrite the commits on the remote you'd have to force push
[16:36:21] <Anticom> Well then you messed something up big time it seems
[16:36:36] *** Quits: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge) (Ping timeout: 272 seconds)
[16:36:48] <jaggz> got it!
[16:37:02] <jaggz> one commit showing in github
[16:37:15] <jaggz> oh, and in local too.
[16:37:38] <jaggz> I had all the commits showing locally, I think, because I kept pulling in the remote changes after resetting and .. doing stuff.
[16:38:14] <jaggz> ugh.. no.. I've included tons of their changes in my one simple document change.. ugh
[16:38:22] <jaggz> Showing with 865 additions and 762 deletions.
[16:38:41] <jaggz> reset too far back maybe
[16:41:13] *** Joins: hongkongliberato (~trisqueli@223.149.101.155)
[16:45:16] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[16:46:14] <Anticom> Probably
[16:51:12] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[16:51:21] *** Joins: mannequin (uid453465@id-453465.helmsley.irccloud.com)
[16:58:39] *** Quits: cart_ (~cart@2a01:4c8:1075:1c6d:b32f:f45:8c1b:13c1) (Ping timeout: 252 seconds)
[17:01:52] *** Joins: bloody (~bloody@user/bloody)
[17:08:55] *** Joins: cart_ (~cart@2a01:4c8:1075:1c6d:6d77:1f8d:2312:d08b)
[17:10:44] *** Quits: cambrian_invader (~cambrian_@50-195-82-171-static.hfc.comcastbusiness.net) (Ping timeout: 252 seconds)
[17:11:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:19:04] *** Quits: Rashad (~textual@2a01:9700:1290:7400:5c48:d281:c915:ff70) (Read error: Connection reset by peer)
[17:19:27] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 260 seconds)
[17:20:03] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Quit: WeeChat 3.4)
[17:20:49] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[17:23:49] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[17:26:09] *** Joins: xkuru (~xkuru@user/xkuru)
[17:26:29] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[17:27:00] *** Quits: cart_ (~cart@2a01:4c8:1075:1c6d:6d77:1f8d:2312:d08b) (Ping timeout: 240 seconds)
[17:31:03] *** Quits: Xenguy (~Xenguy@user/xenguy) (Quit: Leaving)
[17:31:11] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:32:41] *** Quits: XV8 (~XV8@2601:5cb:c001:50::4a2c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:33:30] *** Joins: XV8 (~XV8@2601:5cb:c001:50::4a2c)
[17:34:16] *** Joins: Rashad (~textual@2a01:9700:1290:7400:5c48:d281:c915:ff70)
[17:34:50] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 268 seconds)
[17:36:26] *** Joins: gdd (~gdd@129.199.146.230)
[17:37:05] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[17:40:02] *** Joins: cart_ (~cart@2a01:4c8:1075:1c6d:d95a:390:e134:71e3)
[17:48:13] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 240 seconds)
[17:50:53] *** Quits: cart_ (~cart@2a01:4c8:1075:1c6d:d95a:390:e134:71e3) (Ping timeout: 252 seconds)
[17:51:18] *** Joins: cart_ (~cart@cpc99926-brnt1-2-0-cust961.4-2.cable.virginm.net)
[17:51:18] *** Joins: l4s8g_ (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[17:51:28] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[17:51:50] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[17:53:59] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[17:54:31] *** Joins: cdown (~cdown@163.114.130.7)
[17:55:36] *** Joins: stenno (~stenno@user/stenno)
[17:56:13] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Quit: Leaving)
[17:59:27] *** Joins: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge)
[18:00:08] *** Quits: l4s8g_ (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:00:29] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[18:00:41] *** Joins: dionysus70 (~Thunderbi@94-43-121-219.dsl.utg.ge)
[18:03:22] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[18:03:27] *** lukedashjr is now known as luke-jr
[18:04:00] *** Quits: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge) (Ping timeout: 272 seconds)
[18:04:01] *** dionysus70 is now known as dionysus69
[18:08:45] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26)
[18:09:19] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[18:23:11] *** Joins: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca)
[18:23:27] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[18:24:15] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[18:29:31] *** Joins: tatuio (~tatuio@2804:14c:6583:6001:b19:38fe:b614:5cfc)
[18:30:22] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[18:33:07] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[18:36:27] *** Quits: cdown (~cdown@163.114.130.7) (Ping timeout: 250 seconds)
[18:38:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:39:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:40:21] *** Quits: otis^ (~otis@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[18:40:57] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:313d:2ab8:4ced:8c26) (Ping timeout: 252 seconds)
[18:46:51] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:49:07] <anddam> howdy, I have a list of commits A--B--C--D--E--F--G and I want to create A--G' where G' has all the squashed B .. G commits
[18:49:21] <anddam> I figured I could do this by checking out A and then merge --squash G
[18:50:03] *** Joins: regedit (uid150526@id-150526.uxbridge.irccloud.com)
[18:50:10] <regedit> hello
[18:51:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[18:52:12] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[18:52:13] <regedit> is there some way to split current changes into different patches or commits or branches?
[18:52:17] <regedit> for ex. i did a bunch of changes now in working tree but i realize 50% of them are 1 topic and 50% are another topic, i wanna go through them hunk by hunk and divide them into different commits/patches/branches or whatever makes sense
[18:52:28] <anddam> my issue is I had conflicts, whereas I expected --theirs to just "win the race" in conflics
[18:52:36] <anddam> x/conflics/ c/conflicts/
[18:52:37] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[18:53:26] <osse> if you get conflicts then the history isn't so linear you claim it is
[18:53:39] <anddam> osse: it is not
[18:53:43] <anddam> osse: and this is a different repo
[18:54:00] <osse> anyway, you can git reset --soft A && git commit -m "Mega G'"
[18:54:26] <osse> regedit: use git add selectively before committing
[18:54:31] <anddam> this is a branch intended to be "public" opposed to the internal one, so I need to create a single "Mega Blob Message" commit on top of it
[18:55:01] <anddam> osse: the reset after the conflicting merge or from a clean status in A?
[18:55:13] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (Ping timeout: 256 seconds)
[18:55:25] <regedit> osse: git add is on a file level tho? how do i git add on a line-by-line (hunk by hunk? cherry pick?) level
[18:55:32] <anddam> no, wait, reset --soft A  means I should be in G
[18:55:32] <osse> regedit: git add -p
[18:55:55] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:55:58] <regedit> ah very cool lemme look into that
[18:55:59] <regedit> thx
[18:56:05] *** Quits: tatuio (~tatuio@2804:14c:6583:6001:b19:38fe:b614:5cfc) (Quit: Leaving)
[18:56:31] <regedit> how do i "safely" revert any git adds back to unstaged (but not lose any edits!...)
[18:56:41] <osse> git reset (-p)
[18:56:53] <osse> anddam: yes, clean state at G
[18:56:59] <regedit> ah wow it also has -p coooool
[18:57:16] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[18:58:08] <anddam> osse: that moves G ref to A
[18:58:17] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[18:58:54] <regedit> is there a way to git stash only what is staged or what is unstaged?
[18:59:31] <osse> anddam: It move HEAD from G to A, yes
[19:00:55] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[19:01:00] *** Joins: m5zs7k_ (~m5zs7k@web10.mydevil.net)
[19:01:06] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[19:01:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[19:01:34] *** m5zs7k_ is now known as m5zs7k
[19:01:45] *** Joins: on^ (~on@96-91-136-49-static.hfc.comcastbusiness.net)
[19:05:32] <anddam> no, it moved the "label" G (forgive my lack of proper lingo) to point at the same ref of A
[19:06:14] <osse> ehh, sure
[19:06:25] <osse> I thought all those letters represented commit hashes
[19:07:45] <anddam> no, labels
[19:07:52] <osse> define label
[19:08:01] <anddam> "devel" and "master"
[19:08:05] <anddam> refs ?
[19:08:28] <osse> sounds like branches to me
[19:08:45] <osse> so what is this, then: A--B--C--D--E--F--G
[19:08:52] <osse> are those seven branches?
[19:09:00] <osse> you even wrote "list of commits"
[19:09:10] *** Joins: stenno (~stenno@user/stenno)
[19:11:30] <anddam> no, that's me being bad at explaining, and understanding
[19:11:49] <osse> Let me draw up what I mean
[19:11:56] <anddam> I did mean those as commits, but used their currently attached branch names
[19:12:28] <anddam> I just re-did the steps using G's tag and A remote (so no local branch) and it works as you said
[19:12:48] *** Joins: gast0n (~g4570n@user/gast0n)
[19:12:49] <anddam> I thought I could use either a commit or branch name, if they were the same _at that moment_
[19:12:51] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[19:14:13] *** Joins: pulse (~pulse@user/pulse)
[19:15:02] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[19:15:37] <osse> Could use either a commit or branch name where? If you mean this command:  git reset --soft A   then yes, you can specify the commit to reset to any way you want
[19:16:00] <osse> what is reset is the same in any case: the currently checked out branch
[19:16:29] *** Joins: hololeap (~hololeap@user/hololeap)
[19:19:26] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[19:20:54] *** Joins: dvanloon4 (~dvanloon@user/dvanloon)
[19:21:15] *** Quits: dvanloon (~dvanloon@user/dvanloon) (Ping timeout: 260 seconds)
[19:21:16] *** dvanloon4 is now known as dvanloon
[19:23:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[19:28:17] *** Joins: DoofusCanadensis (~DoofusCan@207.229.38.10)
[19:28:47] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 252 seconds)
[19:30:20] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[19:34:14] *** Joins: cambrian_invader (~cambrian_@50-195-82-171-static.hfc.comcastbusiness.net)
[19:36:55] <_rgn> hi osse, still using git-blamediff every day. o>
[19:37:01] *** Joins: zebrag (~chris@user/zebrag)
[19:42:30] *** Joins: roadie (~user@2a02:8108:5a40:1d87:e096:53b7:b2bf:7a01)
[19:46:51] <osse> _rgn: nice!
[19:47:03] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[19:47:53] *** Joins: Misotauros (~Misotauro@gateway/vpn/pia/misotauros)
[19:48:03] *** Quits: roadie (~user@2a02:8108:5a40:1d87:e096:53b7:b2bf:7a01) (Ping timeout: 252 seconds)
[19:48:46] *** Joins: szymon (~ugh@185.242.6.204)
[19:49:29] *** Quits: saroy (~Sandipan@45.249.73.212) (Quit: Leaving)
[19:49:31] *** Quits: szymon (~ugh@185.242.6.204) (Max SendQ exceeded)
[19:49:53] *** Joins: szymon (~ugh@185.242.6.204)
[19:50:03] *** Joins: sa0 (~sa0sin@88.120.82.205)
[19:50:03] *** Quits: szymon (~ugh@185.242.6.204) (Remote host closed the connection)
[19:50:33] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[19:50:49] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[19:51:27] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[19:54:22] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[19:54:39] *** Joins: ChmEarl (~chmearl@user/chmearl)
[19:54:49] *** Joins: tulpa_ (~tulpa@2a00:23c4:c50a:b800:2bb:60ff:fe60:7269)
[19:55:04] <davve> any way to show a file in a given commit? (preferably just the contents)
[19:55:06] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[19:56:13] *** Joins: vysn (~vysn@user/vysn)
[19:56:37] *** Joins: subopt (~subopt@2603-8081-2302-459a-89c4-6fcc-68ff-1fd2.res6.spectrum.com)
[19:57:51] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[19:59:24] <osse> davve: git show commit:file
[19:59:30] *** Joins: madewokherd` (~urk@65-128-190-55.mpls.qwest.net)
[20:00:15] <anddam> I would have gone with git cat-file -p since I did now know   show commit:files   would work
[20:00:24] *** Joins: roadie (~user@2a02:8108:5a40:1d87:e096:53b7:b2bf:7a01)
[20:00:53] <anddam> but osse's hint is way more handy
[20:01:15] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 252 seconds)
[20:02:12] <anddam> osse: "Could use either a commit or branch name where? " <<< I mean that in my previous example I did "checkout devel" when devel was pointing at G, the "reset --soft A" moved devel from G to A. If I had done "checkout G" instead that would have been fine
[20:02:29] <anddam> my confusion was that I could use either "devel" or "G" and that would not change anything
[20:02:37] *** Quits: madewokherd (~urk@65-128-190-55.mpls.qwest.net) (Ping timeout: 240 seconds)
[20:04:35] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[20:04:59] <osse> ah
[20:05:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:05:43] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 256 seconds)
[20:06:08] *** Joins: feriman (~feriman@188.163.113.151)
[20:08:53] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:11:01] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[20:11:11] *** Quits: roadie (~user@2a02:8108:5a40:1d87:e096:53b7:b2bf:7a01) (Ping timeout: 260 seconds)
[20:13:50] *** Quits: Oblomov (~tex_vim@user/oblomov) (Ping timeout: 272 seconds)
[20:15:01] *** Joins: Oblomov (~tex_vim@user/oblomov)
[20:15:35] *** Joins: blaklistd0 (~blaklistd@user/blaklistd)
[20:16:02] *** Joins: awmv (~awmv@2a02:1210:18ef:bb00:1c38:43fe:cee6:1dd1)
[20:16:11] *** Quits: blaklistd (~blaklistd@user/blaklistd) (Ping timeout: 245 seconds)
[20:16:11] *** blaklistd0 is now known as blaklistd
[20:18:34] *** Joins: wakeup (~wakeup@user/wakeup)
[20:19:29] <wakeup> I created a file in branch B. I didn't commit it. I switched to branch A. I still see the file in A. I don't want to accidently commit this file in A. So, how is there a way to make it "visible" only in B?
[20:19:48] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:19:59] <osse> no. either commit it (and amend that commit later) or use git stash
[20:20:30] <wakeup> git stash where?
[20:20:33] <wakeup> what does it do
[20:20:59] <wakeup> https://www.google.com/search?q=git+stash+meaning&oq=git+stash+meanin&aqs=chrome.0.0i512j69i57j0i22i30l7j0i390.2666j0j7&sourceid=chrome&ie=UTF-8
[20:21:17] <osse> exactly
[20:21:29] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:21:35] <wakeup> after google rejected, I think I should stop using google search engine
[20:21:50] <wakeup> as if that would change anything for them
[20:22:00] <osse> is the file currently untracked?
[20:22:08] <osse> as in, the file is new
[20:22:25] <wakeup> yes it's untracked
[20:23:14] <osse> in that case I would use commit instead of stash, because stash with untracked files is a bit tedious
[20:23:16] <osse> imho
[20:23:37] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:26:04] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[20:27:13] <wakeup> but I don't want to commit it for now
[20:27:29] <osse> I get that
[20:28:06] <osse> You can amend that unwanted commit when you are ready to actually commit, or undo the commit when you switch back to B
[20:28:14] <wakeup> maybe I can just put it into the gitignore
[20:28:33] <osse> that won't remove it from disk though
[20:29:51] *** Quits: madewokherd` (~urk@65-128-190-55.mpls.qwest.net) (Ping timeout: 260 seconds)
[20:35:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[20:36:06] *** Joins: stenno (~stenno@user/stenno)
[20:36:07] <wakeup> how would you stage only new files
[20:36:31] <wakeup> git add -A stages all files, new, modified, deleted
[20:36:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 260 seconds)
[20:36:55] <wakeup> git add . stages modified and new files, no deletions
[20:37:10] <wakeup> I use this command usually to stage
[20:37:15] *** Joins: roadie (~user@2a02:8108:5a40:1d87:e096:53b7:b2bf:7a01)
[20:37:23] <wakeup> but I should be more specific from now on
[20:37:27] <wakeup> and use the one that I really need
[20:39:23] <osse> I don't know of a direct way of staging only new files
[20:39:25] <osse> happens so rarely
[20:39:42] <osse> git add $(git ls-files --others --exclude-standard) I guess
[20:39:49] <osse> if your filenames are shell-friendly
[20:40:09] *** Joins: Sulky_ (~Sulky@37.170.12.133)
[20:41:31] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[20:41:48] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[20:41:51] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[20:42:17] *** Quits: Sulky (~Sulky@37.166.199.57) (Ping timeout: 240 seconds)
[20:43:51] *** Quits: awmv (~awmv@2a02:1210:18ef:bb00:1c38:43fe:cee6:1dd1) (Quit: Client closed)
[20:45:48] *** Quits: srinidhi (~srinidhi@49.205.134.23) (Ping timeout: 252 seconds)
[20:46:32] *** Quits: roadie (~user@2a02:8108:5a40:1d87:e096:53b7:b2bf:7a01) (Remote host closed the connection)
[20:46:47] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[20:46:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[20:47:26] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 252 seconds)
[20:47:26] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[20:48:17] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:48:26] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[20:49:21] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[20:49:56] *** Quits: Murr (~Murr@212-51-143-101.fiber7.init7.net) (Remote host closed the connection)
[20:50:17] *** Joins: Murr (~Murr@212-51-143-101.fiber7.init7.net)
[20:51:24] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[20:54:19] *** Joins: madewokherd (~urk@comcast.codeweavers.com)
[20:54:40] <anddam> I had a local annotated tag foo that I force updated onto remote from another repo, so when fetching my local tag stays at the old ref
[20:55:04] <anddam> is there a way to "refresh" all tags according to a certain remote ?
[20:57:02] <wakeup> how would you merge 2 or more commits in git? these commits have already been pushed
[20:57:19] <wakeup> I think I did this once
[20:57:27] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[20:57:34] <anddam> wakeup: you put yourself at a certain ref and merge the other
[20:57:54] <anddam> "checkout" to check out a ref, "merge" to perform the merge
[20:58:43] *** Joins: pulse (~pulse@user/pulse)
[20:58:46] *** Quits: fxrs (~fxrs@192.227.212.130) (Quit: ZNC 1.7.x-git-653-187f617 - http://znc.in)
[20:59:45] <wakeup> https://stackoverflow.com/a/61171280/3924118
[21:00:13] *** Joins: fxrs (~fxrs@192.227.212.130)
[21:00:22] <wakeup> git reset soft means?
[21:00:35] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 240 seconds)
[21:00:52] <anddam> I don't envy you
[21:00:55] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[21:01:31] <wakeup> hah?
[21:02:20] <canton7> wakeup, !resets, https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified
[21:02:20] <gitinfo> wakeup: tl;dr of man git-reset: --soft moves HEAD, --mixed moves HEAD+index, --hard moves HEAD+index+work-tree, -- foo.txt will !unstage
[21:03:19] <wakeup> hah
[21:03:20] <wakeup> ok
[21:03:34] <wakeup> so basically we make the head detached
[21:06:31] *** Joins: tyson2 (~user@64.137.152.177)
[21:07:14] *** Quits: mthall (~quassel@mail.thalliman.com) (Ping timeout: 252 seconds)
[21:07:28] *** Joins: mthall (~quassel@mail.thalliman.com)
[21:12:45] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:13:00] *** Joins: Jacques (~Jacques@cpe-173-172-37-214.tx.res.rr.com)
[21:14:07] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[21:14:24] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[21:14:39] *** Quits: Andy_Kw (~Andy_Kw@78.194.179.77) (Ping timeout: 260 seconds)
[21:14:56] *** Joins: R2robot (~R2robot@user/r2robot)
[21:15:25] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:16:48] *** Joins: masber (~masber@213.55.224.91)
[21:18:19] <regedit> how do i cancel all changes/edits that have not been added/staged - anything staged should remain staged
[21:18:31] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:18:40] <regedit> cancel i.e. revert back to when everything was last added/staged
[21:19:10] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[21:19:22] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[21:20:38] *** Quits: stenno (~stenno@user/stenno) (Quit: WeeChat 3.3)
[21:21:27] *** Quits: Rashad (~textual@2a01:9700:1290:7400:5c48:d281:c915:ff70) (Read error: Connection reset by peer)
[21:23:40] *** Joins: Sulky__ (~Sulky@37.168.193.63)
[21:24:17] *** Quits: cart_ (~cart@cpc99926-brnt1-2-0-cust961.4-2.cable.virginm.net) (Ping timeout: 252 seconds)
[21:25:07] *** Joins: Rashad (~textual@2a01:9700:1290:7400:5c48:d281:c915:ff70)
[21:26:00] <Anticom> regedit: afaik only staged changes are stashed. So what I would do is stash the staged changes, then revert everything that remains and re-apply the stash
[21:26:05] *** Joins: funhouse (~funhouse@user/funhouse)
[21:26:36] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 245 seconds)
[21:26:40] *** Quits: Sulky_ (~Sulky@37.170.12.133) (Ping timeout: 272 seconds)
[21:27:54] <regedit> i think my earlier question from about 1.5hr ago was about stashing. just now i was asking just about reverting changes that werent staged (which apparently is by git checkout -- .)
[21:28:03] <regedit> er 2.5hr ago
[21:28:30] <Anticom> Well most of us aren't paid for hanging out in here but have work to do ;)
[21:29:25] <regedit> it's ok i think you thought i was commenting about you answering late. i was actually trying to clarify potential confusion between the previous question and most recent
[21:29:41] *** Quits: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr) (Remote host closed the connection)
[21:29:42] <Anticom> Ah i see :) Let me try to reproduce your scenario
[21:30:03] <regedit> oh thanks 🙏
[21:30:22] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[21:30:40] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[21:32:02] <Anticom> Hm
[21:33:10] <Anticom> Hm looks like there's a way simpler solution: https://stackoverflow.com/a/52713/966530
[21:33:21] <Anticom> `git checkout -- . ` seems to do the trick for me
[21:33:27] <Anticom> however i don't quite know why
[21:34:02] *** Quits: masber (~masber@213.55.224.91) (Quit: Client closed)
[21:34:23] <nedbat> I can get GitHub pull requests locally with `git fetch origin pull/299/head:pr/299 && git checkout pr/299`, but then I can't pull to get more changes.  I can do this: `git pull origin pull/299/head; git reset --hard FETCH_HEAD`, which works, but that last command seems really odd... What should I do instead?
[21:35:14] <Anticom> Probably does something similar to `git checkout HEAD <path_spec>`, however if I do `git checkout HEAD .`, everything is getting reverted
[21:35:49] <Anticom> And I didn't knew about `git restore` yet, so two things learned :)
[21:36:09] *** Joins: srinidhi (~srinidhi@49.205.134.23)
[21:37:21] *** Joins: sobkas (~sobkas@95.175.17.217)
[21:37:59] *** Joins: masber (~masber@213.55.224.91)
[21:38:05] *** Quits: Jacques (~Jacques@cpe-173-172-37-214.tx.res.rr.com) (Ping timeout: 256 seconds)
[21:38:36] <Anticom> nedbat: have you consulted https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally ?
[21:38:46] <Anticom> Anyways gotta run, good luck guys!
[21:39:02] *** Quits: Anticom (~Anticom@ip-088-153-048-020.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[21:39:33] *** Quits: PaterTemporalis (~woooopsie@dsl-76-143.bl27.telepac.pt) (Ping timeout: 256 seconds)
[21:39:36] *** Quits: Erisa (~Erisa@user/erisa) (Quit: The Lounge - https://thelounge.chat)
[21:40:02] *** Erisa2 is now known as Erisa
[21:41:17] *** Quits: ChmEarl (~chmearl@user/chmearl) (Ping timeout: 240 seconds)
[21:41:36] *** Quits: tyson2 (~user@64.137.152.177) (Remote host closed the connection)
[21:42:03] <osse> anddam: git fetch origin '+refs/tags/*:refs/tags/*'
[21:43:49] *** Joins: ChmEarl (~chmearl@user/chmearl)
[21:44:58] <osse> actually no
[21:45:16] <osse> confused
[21:45:22] <osse> but deleting the tags works
[21:49:09] *** Joins: Jacques (~Jacques@cpe-173-172-37-214.tx.res.rr.com)
[21:50:52] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:58:28] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[21:59:18] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[22:02:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:4dd0:35a3:af1d:f7b)
[22:02:33] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:4dd0:35a3:af1d:f7b) (Changing host)
[22:02:33] *** Joins: skapata (~Skapata@user/skapata)
[22:06:41] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[22:11:48] *** Quits: feriman (~feriman@188.163.113.151) (Read error: Connection reset by peer)
[22:11:48] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[22:12:03] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[22:12:28] *** Quits: XV8 (~XV8@2601:5cb:c001:50::4a2c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:15:41] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:15:57] *** Joins: bindu (~bindu@user/bindu)
[22:16:50] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[22:17:06] *** Joins: humanBird (~humanBird@2603-8001-7000-3642-0961-7b0a-4f50-8e44.res6.spectrum.com)
[22:17:20] *** Joins: feriman (~feriman@188.163.113.151)
[22:18:22] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[22:21:18] *** Quits: tulpa_ (~tulpa@2a00:23c4:c50a:b800:2bb:60ff:fe60:7269) (Quit: tulpa_)
[22:26:15] *** Quits: Jacques (~Jacques@cpe-173-172-37-214.tx.res.rr.com) (Ping timeout: 256 seconds)
[22:28:54] *** Joins: XV8 (~XV8@2601:5cb:c001:50::4a2c)
[22:29:01] *** Quits: Misotauros (~Misotauro@gateway/vpn/pia/misotauros) (Ping timeout: 240 seconds)
[22:29:08] *** Quits: jnnnnnnnnn_ (~jnnnnnnnn@65.99.151.178) (Remote host closed the connection)
[22:29:56] *** Joins: jnnnnnnnnn (~jnnnnnnnn@65.99.151.178)
[22:34:35] *** Joins: Akiva (~Akiva@user/Akiva)
[22:42:25] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[22:43:15] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[22:45:30] *** Quits: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:151e:f504:8d54:d3a4) (Quit: WeeChat 3.4)
[22:47:28] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[22:50:00] *** Quits: Murr (~Murr@212-51-143-101.fiber7.init7.net) (Remote host closed the connection)
[22:50:25] *** Joins: Murr (~Murr@212-51-143-101.fiber7.init7.net)
[22:51:21] *** Joins: tyson2 (~user@198.98.109.220)
[22:53:28] *** Joins: ecraven (ecraven@user/nex)
[22:53:44] *** Quits: masber (~masber@213.55.224.91) (Quit: Client closed)
[22:54:14] <ecraven> hello ;) how do I show the *Nth* commit in a branch? I found I can use `git rev-list --all --count` to see how many commits there were until now, but say I want to see the 19420th (or rather just get its commit hash)
[22:54:45] *** Joins: Misotauros (~Misotauro@gateway/vpn/pia/misotauros)
[22:55:32] <ikke> ecraven: this is only well defined if you number backwards (from the most recent commit in a branch backwards to older commits)
[22:55:34] *** Quits: rsx (~dummy@ppp-188-174-137-201.dynamic.mnet-online.de) (Quit: rsx)
[22:56:03] <ikke> If that's what you want, then HEAD~N,
[22:56:14] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:57:35] <ecraven> well, I want the 19420th commit on the current branch, so go back to the start, then count 19420 along.. is there a simpler way to do this than implement this (count backwards, then subtract to get N for HEAD~N)?
[22:58:38] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[22:58:46] <ikke> No, there is not
[22:59:03] <ikke> In theory there can be more than one Nth commit
[22:59:17] <ikke> History is not necessarily flat
[22:59:22] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[22:59:43] *** Quits: jnnnnnnnnn (~jnnnnnnnn@65.99.151.178) (Remote host closed the connection)
[23:00:11] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[23:00:13] <ikke> there can also be more then one root commit, so a single commit can have multiple positions
[23:01:27] *** Joins: jnnnnnnnnn (~jnnnnnnnn@c-2172524e.016-77-73746f43.bbcust.telenor.se)
[23:01:37] <ecraven> yea, it seems in this repo there are no multiple-parent-commits
[23:01:45] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[23:02:00] <ikke> right, but git cannot assume that, so git does not have general tools to give that information or to refer to commits in that manner
[23:02:04] *** Quits: jnnnnnnnnn (~jnnnnnnnn@c-2172524e.016-77-73746f43.bbcust.telenor.se) (Remote host closed the connection)
[23:02:36] <ecraven> yea, I understand that. thanks for the tip, I'll just implement this as HEAD~(current-count - 19420)
[23:02:59] *** Joins: jnnnnnnnnn (~jnnnnnnnn@c-2172524e.016-77-73746f43.bbcust.telenor.se)
[23:04:33] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Ping timeout: 256 seconds)
[23:05:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[23:05:26] <ikke> https://tpaste.us/X0g1
[23:06:06] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[23:07:03] <ikke> https://tpaste.us/LeYm
[23:07:50] <ecraven> yea, I understand. thank you!
[23:08:30] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Remote host closed the connection)
[23:08:43] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[23:13:00] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 240 seconds)
[23:13:13] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[23:15:39] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:17:36] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[23:19:31] *** Quits: tyson2 (~user@198.98.109.220) (Ping timeout: 245 seconds)
[23:21:36] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:22:43] *** Joins: justOkay (~justache@user/justache)
[23:23:13] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Ping timeout: 272 seconds)
[23:24:33] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[23:24:37] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[23:26:34] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[23:28:33] *** Joins: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net)
[23:29:16] <dob1> I was reading this https://stackoverflow.com/a/28193740/399637  part 1. "This means the changes from f1 are not present on master (and cherry-picking possibly fails if f2 depends on them."  if commits are snaptshot f2 has to include f1 too, it is just a diff then cherry pick ?
[23:30:23] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[23:30:44] *** Joins: duxsco (~Thunderbi@user/duxsco)
[23:30:53] <ikke> dob1: cherry-pick roughly diffs a commit against its parent, and then tries to apply that on the target
[23:31:15] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[23:32:25] <dob1> ikke, and when you specify more than one commit ?
[23:33:10] <ikke> It just iterates over each commit
[23:33:19] *** Joins: Jacques (~Jacques@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[23:33:31] *** Joins: vicfred (~vicfred@user/vicfred)
[23:33:35] <dob1> it creates a diff for each one ?
[23:34:10] <ikke> yes
[23:34:38] *** Quits: jimklimov (~jimklimov@193-111-134-201.rferl.net) (Ping timeout: 252 seconds)
[23:36:14] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[23:38:29] *** Joins: jazzy (~jaziz@user/jaziz)
[23:39:15] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 240 seconds)
[23:39:17] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[23:39:46] *** Joins: structoha (~structoha@gateway/tor-sasl/structoha)
[23:43:28] *** Quits: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net) (Ping timeout: 272 seconds)
[23:44:27] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Ping timeout: 260 seconds)
[23:45:02] *** Joins: vitali64 (~vitali64@user/vitali64)
[23:45:10] *** Joins: wakeup (~wakeup@user/wakeup)
[23:47:12] *** Joins: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54)
[23:50:23] *** Joins: vitali64_ (~vitali64@user/vitali64)
[23:52:20] *** Quits: vitali64 (~vitali64@user/vitali64) (Ping timeout: 272 seconds)
[23:54:28] *** Quits: structoha (~structoha@gateway/tor-sasl/structoha) (Remote host closed the connection)
[23:54:45] *** vitali64_ is now known as vitali64
[23:55:23] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[23:57:45] *** Quits: roadie (~user@2a02:8108:5a40:1d87:a0a4:a51e:2ef2:8a54) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[23:58:45] *** Joins: junebug (~junebug@2600:1700:3db0:2540:4302:423d:8a3e:7573)
[23:58:51] *** Joins: marstaik[m] (~marstaikm@2001:470:69fc:105::1:de5b)
[23:59:24] *** Quits: duxsco (~Thunderbi@user/duxsco) (Quit: duxsco)
[23:59:45] <marstaik[m]> Hi, I've got a question regarding how to do a clean merge from an upstream while maintaining locally deleted files in a sane way
