[00:00:04] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[00:08:20] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:09:25] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:10:40] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:10:58] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:11:42] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:14:39] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:14:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[00:15:23] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:15:35] *** Quits: shiranaihito (~textual@2001-b011-4000-1fe6-99a6-1567-e0aa-b1d8.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:17:02] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:17:27] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:18:41] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:20:56] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:21:06] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[00:21:35] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:22:07] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:24:36] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[00:37:26] *** Quits: ajoberstar (~user@97-116-72-197.mpls.qwest.net) (Ping timeout: 260 seconds)
[00:42:09] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:42:44] *** Quits: rito_ (~rito_gh@45.112.243.219) (Quit: Leaving)
[00:48:00] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[00:49:40] *** Quits: struchu (~struchu@staticline-31-183-170-166.toya.net.pl) (Quit: WeeChat 3.3)
[00:50:57] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[00:53:10] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:59:26] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:01:11] *** Joins: ajoberstar (~user@97-116-72-197.mpls.qwest.net)
[01:04:17] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 256 seconds)
[01:04:34] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[01:26:23] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[01:26:59] *** Joins: joe_colben (~joe____co@185.190.112.211)
[01:36:30] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[01:50:59] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[01:52:04] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:54:58] <mwnaylor> Blew up my heap on AoC, day 22, part 2.
[02:07:24] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[02:08:39] <jeaye> Use loop/recur instead of actual recursion. :P
[02:22:32] *** Joins: awb99 (~quassel@85-125-195-170.static.upcbusiness.at)
[02:23:31] <mwnaylor> I did. I think the size of my set got too big. ðŸ˜ 
[02:24:04] *** Joins: atw (~user@2601:5c2:c500:76b0::1e8b)
[02:27:49] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[02:28:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[02:29:56] <technomancy> why loop/recur instead of just recur?
[02:30:36] *** Quits: ajoberstar (~user@97-116-72-197.mpls.qwest.net) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[02:32:11] *** Joins: libertyprime (~libertypr@219-89-121-197.adsl.xtra.co.nz)
[02:33:37] <mwnaylor> For me, loop/recur looks cleaner. Saves me from having a letfn form within my the outer defn form. 
[02:36:00] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 268 seconds)
[02:36:47] <mwnaylor> bindings in the loop make for easy initializiation of accumulators. Plus any stacks/queus needed for graph/tree traversals, when needed.
[02:43:38] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:44:28] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:44:51] *** Joins: schmudde (~schmudde@216.169.6.249)
[02:46:30] *** Quits: awb99 (~quassel@85-125-195-170.static.upcbusiness.at) (Remote host closed the connection)
[02:52:47] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[03:07:07] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[03:16:57] *** Quits: atw (~user@2601:5c2:c500:76b0::1e8b) (Ping timeout: 240 seconds)
[03:21:57] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[03:22:42] *** Joins: joe_colben (~joe____co@185.190.112.211)
[03:36:12] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[03:53:32] *** Joins: schmudde (~schmudde@216.169.6.249)
[03:53:54] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 260 seconds)
[03:54:55] *** Joins: matty_matt (~matt@129.222.239.110)
[03:55:01] *** Quits: libertyprime (~libertypr@219-89-121-197.adsl.xtra.co.nz) (Quit: leaving)
[03:59:47] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[04:19:47] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 256 seconds)
[04:25:04] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[04:34:17] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:35:01] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 268 seconds)
[04:38:09] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[04:39:20] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[04:43:39] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[04:49:02] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[04:51:30] *** Joins: schmudde (~schmudde@216.169.6.249)
[04:52:14] *** Joins: jespada (~jespada@87.74.33.157)
[05:03:17] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[05:03:22] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[05:27:28] <karthik> I have a json file that has a bunch of records in sequence: {"ip":"xxx.xx.xxx.xx"}{"ip":"yyy.yy.yyy.yy"}
[05:28:09] <karthik> How do I parse this in Clojure? I tried (data.json/read f) where f is a java.io reader, but that only reads the first record.
[05:29:02] <karthik> i.e. (with-open [f (clojure.java.io/reader "myfile.json")] (data.json/read f))
[05:30:24] <TimMc> And what happens if you call data.json/read multiple times within the same with-open?
[05:35:17] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[05:35:49] <karthik> It reads the next records in sequence, but I don't know how to loop over the contents of the file. If it was lines I could use line-seq
[05:36:56] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[05:39:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[05:42:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[05:46:22] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[05:50:18] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[06:07:55] *** Quits: Tolstoy (~textual@97-120-40-166.ptld.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:09:02] *** Joins: matty_ma1 (~matt@129.222.239.110)
[06:09:18] *** Joins: allensanford (~allensanf@c-76-108-242-88.hsd1.fl.comcast.net)
[06:24:48] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[06:31:59] <TimMc> karthik: Then you need to do all your reading inside that with-open. Something like (with-open [...] (repeatedly #(data.json/read f)), except do whatever you need to do to detect the end of the stream and stop calling it.
[06:32:23] <TimMc> Or instead of repeatedly, you have a loop in there that does the check-and-read, or read-and-maybe-catch-and-stop.
[06:32:40] <TimMc> Whatever you do, you can't have the with-open return a lazy seq.
[06:36:15] <karthik> TimMc: That makes sense. Let me try that.
[06:40:46] <karthik> How do I detect the end of the stream from Clojure?
[06:40:54] <karthik> (Not familiar with Java)
[06:42:56] *** Quits: allensanford (~allensanf@c-76-108-242-88.hsd1.fl.comcast.net) (Quit: allensanford)
[06:50:05] *** Joins: Tolstoy (~textual@97-120-40-166.ptld.qwest.net)
[07:00:28] <TimMc> I was hoping you wouldn't ask. :-P
[07:01:06] <TimMc> I'm not sure. I haven't looked at the docs for either java.io or data.json.
[07:01:27] <TimMc> Maybe try/catch and if you get an EOF exception, stop iteration?
[07:01:41] <TimMc> (but pass through any other exceptions)
[07:03:27] <TimMc> If you *know* that there aren't any spaces between JSON records, you could use a PushBackReader and peek ahead one byte to see if it's EOF yet before attempting a read.
[07:04:22] <karthik> I'll google PushBackReader. repeatedly was the function I needed
[07:05:16] <TimMc> Well, you'll need a halt condition with repeatedly, so building up a vector in loop/recur might be better, honestly.
[07:05:40] <TimMc> (repeatedly goes forever, so you'd need to return a sentinel and then wrap with take-while or something...)
[07:06:53] <karthik> Yeah. I'm actually stuck a few steps behind, data.json/read is erroring out on the first record now, so it'll be a while before I worry about EOF
[07:08:20] <karthik> Makes me wonder why reading files is such a pain in every language. I ended up using jq -r '.ip' at the shell to extract data from this file and it was seamless.
[07:13:11] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[07:17:22] *** Joins: matty_matt (~matt@129.222.239.110)
[07:50:59] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:53:18] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 260 seconds)
[07:55:10] <TimMc> karthik: https://cljdoc.org/d/cheshire/cheshire/5.10.1/api/cheshire.core#parsed-seq seems to be the fastest path to success, come to think of it
[07:56:21] <TimMc> That implementation happens to use lazy-seq: https://github.com/dakrone/cheshire/blob/5.10.1/src/cheshire/core.clj#L317
[08:01:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[08:05:15] *** Joins: amk (~amk@109.255.169.126)
[08:18:48] *** Joins: matty_ma1 (~matt@129.222.239.110)
[08:22:32] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[08:25:09] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[08:32:53] *** Joins: shiranaihito (~textual@2001-b011-4000-1fe6-99a6-1567-e0aa-b1d8.dynamic-ip6.hinet.net)
[08:36:11] *** Joins: matty_matt (~matt@129.222.239.110)
[08:48:28] *** Joins: puchka (~marius@165.73.240.181)
[08:50:04] *** Joins: atw (~user@2601:5c2:c500:76b0::182f)
[09:22:22] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[09:22:35] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Remote host closed the connection)
[09:25:29] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[09:26:44] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Remote host closed the connection)
[09:27:44] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[09:39:57] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[09:40:57] *** Quits: atw (~user@2601:5c2:c500:76b0::182f) (Ping timeout: 240 seconds)
[09:53:26] *** Joins: matty_matt (~matt@129.222.239.110)
[10:04:11] <v3ga> ...
[10:05:37] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[10:20:53] <v3ga> Can someone tell me how delete a record properly using a UUID?  Initially on the backend I figured the 'id' taken from in from the path-param was a string so I used java.util.UUID/fromString to convert the type. However when I did that I would be throw a casting error.  This code here no longer throw the error works of course because the 'uuid' is a string. How can I set the value to UUID without
[10:20:55] <v3ga> it complaining that UUID can't be cast to IFn? https://gist.github.com/v3gal0g/6ec1063ccb6c0200657665b878637992
[10:22:28] <v3ga> I asked on slack but apparently the issue is too easy and I should know what to do from the stacktrace. clearly not...
[10:25:02] <ridcully> the error there means, that you are using the converted uuid as a function
[10:25:23] <ridcully> the (full) stacktrace _should_ help to locate the place
[10:25:58] <ridcully> what that means is, that you are doing something like `(uuid ...)` somewhere (that most likely is by accident or not in your hand)
[10:26:23] <ridcully> so the full stacktrace should lead back to your code at some point and hopefully helps to find the culprit
[10:30:11] <v3ga> hmm ok let me revert back to the previous attempt.  I don't think that was far off.
[10:30:38] <ridcully> could you please share the full stacktrace and maybe relate lines to the code snippets there?
[10:32:07] <ridcully> it's usually better to find the facts about the problem than to waste time with fuzzing the code to solve things like this.
[10:33:28] <v3ga> ridcully: yup, it's coming... one sec
[10:38:00] <v3ga> ridcully: ok here we go, I wanted to include everything.  https://gist.github.com/v3gal0g/5aae043a94f74cf259d8620b29843ac7
[10:38:37] <v3ga> I had to back track to go back to my original attempt that threw the error
[10:39:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[10:40:41] <ridcully> it looks to me like the `(#p uuid)` is the culprit?  this is some debug macro, right?
[10:42:36] <ridcully> yeah i think this is the proble here - this is just a reader macro to print the value
[10:42:51] <v3ga> ridcully: yeah hashp. even when commenting that out it seems to throw the same. let me double check that though.
[10:42:53] <ridcully> i think you have to leave off the parens here (if that will work at all)
[10:45:00] <ridcully> if that does not work (no parens), you should be able to put it between the uuid and the call to parse the uuid in the let
[10:45:19] *** Joins: struchu (~struchu@staticline-31-183-170-166.toya.net.pl)
[10:45:30] <v3ga> ahh i see! that makes sense.  Ok that does kill the error. Now to figure out why it's still not deleting a record.  My JS knowledge is subpar as well but I figured just calling my handler would be enough to do the trick there.  The irony is in EVERY clojure book..and every clojure tutorial they go through creating posts, updating then tell you to figure out DELETE on your own =P 
[10:45:32] <ridcully> `uuid #p (java.util.UUID/fromString my-id)` like so
[10:45:54] *** Quits: struchu (~struchu@staticline-31-183-170-166.toya.net.pl) (Client Quit)
[10:47:27] <v3ga> ridcully: yup! that definitely was it... thanks for that 
[10:51:42] <v3ga> ridcully: and yes just '#p uuid' without the parens works. thats how I should have used it. I get caught up in encapsulating everything in parens whent hats now how it goes... 
[11:01:46] <v3ga> ridcully: sweet! Now everythings working, thank you...that road block took way longer than it should have =P 
[11:02:22] <ridcully> i did no register it at first either.  it looked odd, but i did not pay any attention to it.  glad it works now
[11:03:00] *** Joins: struchu (~struchu@staticline-31-183-170-166.toya.net.pl)
[11:04:49] *** Quits: struchu (~struchu@staticline-31-183-170-166.toya.net.pl) (Remote host closed the connection)
[11:04:55] <v3ga> yup. then I forgot to wrap everything in my 'db-query' code to actually excute my SQL.  After I clean up some craziness I'll make a separate project with a FULL crud example using postgres, next.jdbc and reagent.  I searched for a long time and couldn't run across one that wasn't advanced.
[11:05:02] <v3ga> cool cool =P 
[11:05:07] *** Joins: struchu (~struchu@staticline-31-183-170-166.toya.net.pl)
[11:07:12] *** Quits: struchu (~struchu@staticline-31-183-170-166.toya.net.pl) (Client Quit)
[11:07:49] *** Joins: struchu (~struchu@staticline-31-183-170-166.toya.net.pl)
[11:08:13] *** Quits: struchu (~struchu@staticline-31-183-170-166.toya.net.pl) (Client Quit)
[11:18:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:20:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[11:21:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:37:15] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[12:22:35] *** Quits: runejuhl (~runejuhl@user/runejuhl) (Quit: WeeChat 3.0)
[12:31:28] *** Joins: joe_colben (~joe____co@185.190.112.211)
[12:34:00] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[12:34:45] *** Joins: zmt01 (~zmt00@user/zmt00)
[12:56:58] *** Quits: joe_colben (~joe____co@185.190.112.211) (Read error: Connection reset by peer)
[12:57:23] *** Joins: joe_colben (~joe____co@185.190.112.211)
[13:06:37] *** Quits: joe_colben (~joe____co@185.190.112.211) (Read error: Connection reset by peer)
[13:12:37] *** Joins: joe_colben (~joe____co@185.190.112.211)
[13:18:00] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:19:15] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 256 seconds)
[13:36:20] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:46:34] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[13:47:56] <v3ga> how the hell did Clojure The Essential Reference get pushed to fall '22.  If its going to be a living book then it should be e-format only.  I think more people should take a page from 'The Rust Book' and perhaps do a subscription or one time purchase.
[15:05:38] *** Joins: rito_ (~rito_gh@45.112.243.151)
[15:46:34] *** Joins: matty_ma1 (~matt@129.222.239.110)
[16:13:07] <Para> IIRC the writer(s) keep rewriting major sections of the book based on feedback.
[16:13:25] <Para> Not just improving/typofixing but like scrapping 100 pages and starting over.
[16:14:16] <Para> Also I guess I've been dealing a bit too much hipstery frontend code this week already as glancing at backlog at first I thought your uyp! and sweet! were functions.
[16:14:20] <Para> *yup!
[16:16:32] <ridcully> since there is confessiontime: the talk of cljs and seeing #p made my brain think: that must be a shortcut for [:div {:id "p"} ...]
[16:17:38] <Para> [:div#p ...]
[16:17:45] <Para> https://github.com/reagent-project/reagent/blob/master/doc/UsingHiccupToDescribeHTML.md#special-notation-for-id-and-class
[16:18:51] <v3ga> =P 
[16:18:56] <Para> [:<>[:div#p>span.first][:div#p>span.second]] is also valid these days, I think
[16:19:29] <Para> That's a fragment which won't be rendered with a few divs with spans inside them. And id twice just to make the parser cry.
[16:20:08] <v3ga> ridcully: eeek... hashp technically works for cljs as well.  if I remember correctly I ran into a dependency issue...some 'science' library warning and I removed it.
[16:21:25] <Para> It's been interesting doing my first frontend project for literally years, btw. Quite surprisingly browsers don't suck anymore, and grid+flew seems to do what I think they should do on first or at most third go.
[16:22:15] <v3ga> grid is interesting... I don't mind it but after a 10 year gap dealing with CSS and css grid frameworks I did have to adjust.
[16:22:50] <Para> The fr unit is kind of weird one.
[16:23:36] <v3ga> yup... I think i'll play with flex today.  I can use that xD 
[16:23:39] <Para> It's basically "all leftover space after chipping off sections using area element dimensions" and doesn't have to sum up to any even number; this UI thingy I've been working on is currently proudly 1.7fr wide and ~it just works~
[16:24:03] <Para> https://grid.layoutit.com/ is an amazing help btw
[16:26:49] <ridcully> Para: totally unrelated to the death of IE of course...
[16:29:31] *** Quits: victor_ (sid208353@id-208353.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[16:48:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[16:51:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:57:34] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 265 seconds)
[16:58:03] <Para> Dug a bit, flexbox is based on XUL from Mozilla, and CSS Grid is from Microsoft.
[16:58:35] <Para> Which is funny in the same way as the whole box model being Microsoft's handiwork as well; they came up with best solutions which worked the worst on their own crap.
[17:19:05] *** Joins: matty_ma1 (~matt@129.222.239.110)
[17:26:22] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[17:31:05] *** Joins: awb99 (~quassel@85-125-195-170.static.upcbusiness.at)
[17:36:48] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:37:48] *** Quits: awb99 (~quassel@85-125-195-170.static.upcbusiness.at) (Quit: https://quassel-irc.org - Komfortabler Chat. Ãœberall.)
[17:43:42] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:47:18] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Remote host closed the connection)
[17:47:31] <Para> Okay, I guess the future isn't that bleak.
[17:48:17] <Para> Turns out Finnish public sector provides a no-auth/no-nonsense REST API which can be curled to provide some really obscure data I need. Piped it through jq to do a simple subselect and I have exactly what I need in a format I can directly ingest.
[17:48:27] <Para> I guess that's my tax euros at work.
[17:50:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:51:23] *** Joins: awb99 (~quassel@85-125-195-170.static.upcbusiness.at)
[17:58:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[18:01:58] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:20:43] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[18:21:54] *** Joins: kaisyu (uid37155@id-37155.ilkley.irccloud.com)
[18:36:22] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[18:46:51] *** Quits: awb99 (~quassel@85-125-195-170.static.upcbusiness.at) (Quit: https://quassel-irc.org - Komfortabler Chat. Ãœberall.)
[18:54:38] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[18:56:32] *** Quits: shiranaihito (~textual@2001-b011-4000-1fe6-99a6-1567-e0aa-b1d8.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[19:00:20] *** Joins: joe_colben (~joe____co@185.190.112.211)
[19:08:32] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[19:10:20] *** Joins: joe_colben (~joe____co@185.190.112.211)
[19:14:22] *** Joins: matty_ma1 (~matt@129.222.239.110)
[19:25:16] *** Joins: awb99 (~quassel@85-125-195-170.static.upcbusiness.at)
[19:31:45] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:10:07] *** Joins: henry404089 (~henry4040@123-204-10-70.dynamic.seed.net.tw)
[20:11:53] *** Quits: henry40408 (~henry4040@175.181.175.129) (Ping timeout: 250 seconds)
[20:11:54] *** henry404089 is now known as henry40408
[20:14:55] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 250 seconds)
[20:24:14] <mwnaylor> AoC, day 22, part 2. Based upon the solution for the test data would far exceed my total disk space to track the on states needed for the final count.
[20:31:40] *** Quits: kaisyu (uid37155@id-37155.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:34:22] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[20:34:44] *** Joins: joe_colben (~joe____co@185.190.112.211)
[20:37:51] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[20:38:42] *** Joins: matty_matt (~matt@129.222.239.110)
[20:40:13] *** Joins: matty_ma1 (~matt@129.222.239.110)
[20:40:35] <xerox> mwnaylor: yep you can't just store the points
[20:41:28] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[20:41:52] *** Joins: joe_colben (~joe____co@185.190.112.211)
[20:46:17] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[20:49:59] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[20:51:48] <mwnaylor> Have to admit, that leaves me at a loss for how to solve it.
[20:56:09] <mwnaylor> (hash [10 10 10])
[20:57:46] <mwnaylor> Even storing  hashes of points overloads storage.
[20:58:37] *** Joins: xsperry (~xs@user/xsperry)
[21:00:31] <aphyr> Could you spill to disk?
[21:00:44] <aphyr> https://github.com/lacuna/bifurcan might help
[21:06:34] <mwnaylor> I would take something on the order of 2569067 gigabytes.
[21:07:13] <mwnaylor> s/I/It/
[21:08:50] *** Joins: schmudde (~schmudde@216.169.6.249)
[21:18:41] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[21:24:08] <technomancy> "browsers don't suck any more" god I wish that were true
[21:24:36] <mwnaylor> 2.6 petabytes
[21:27:24] *** Joins: joe_colben (~joe____co@185.190.112.211)
[21:27:40] <mwnaylor> Storing hashes wouldn't work. hash returns an integer. There are guaranteed collisions when hashing point values.
[21:28:35] <aphyr> Huh. Is part 2 bigger? Part 1 looks like it only needs 50^3 points.
[21:28:41] <aphyr> Er, 100^3
[21:28:51] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:29:43] <mwnaylor> --- Part Two ---
[21:29:43] <mwnaylor> Now that the initialization procedure is complete, you can reboot the reactor.
[21:29:43] <mwnaylor>  
[21:29:43] <mwnaylor> Starting with all cubes off, run all of the reboot steps for all cubes in the reactor.
[21:30:08] <mwnaylor> Forgive multiple lines, I did a copy/paste.
[21:30:19] <aphyr> And there's a very large number of points in part 2?
[21:31:20] <mwnaylor> In the test sample, 2758514936282235 after the run is complete.
[21:31:22] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[21:31:55] <mwnaylor> In scientific notation: 2.758514936282235E15
[21:32:06] *** Joins: joe_colben (~joe____co@185.190.112.211)
[21:32:29] <aphyr> Yikes. So even if you represent it as a byte array of on/offs, it's far too big to store in memory.
[21:32:59] <aphyr> What about a sparse representation, like a binary space partition? This is essentially a boolean intersection of cubes, right?
[21:33:07] <mwnaylor> 2758.514936282235 trillion
[21:34:57] <aphyr> I've actually never done anything like this but my suuuper naive idea might be either a.) an algebraic representation of an arbitrary boolean volume which can be simplified to disjoint cubes, then each cube summed...
[21:35:23] <aphyr> or b.) using an octree to compress the low-entropy regions of the volume
[21:35:56] *** Quits: awb99 (~quassel@85-125-195-170.static.upcbusiness.at) (Remote host closed the connection)
[21:54:21] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 256 seconds)
[21:58:57] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[22:01:06] *** Joins: joe_colben (~joe____co@185.190.112.211)
[22:17:57] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[22:25:17] <Para> Isn't the point of those things btw usually the idea that you can express sets as pure functions?
[22:33:24] *** Joins: joe_colben (~joe____co@185.190.112.211)
[22:54:37] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[22:56:02] <aphyr> a, yes, b, not really
[22:56:35] *** Joins: joe_colben (~joe____co@185.190.112.211)
[23:01:23] *** Quits: puchka (~marius@165.73.240.181) (Quit: leaving)
[23:01:37] *** Joins: schmudde (~schmudde@216.169.6.249)
[23:04:14] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 252 seconds)
[23:07:00] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[23:09:03] *** Quits: jeaye (~jeaye@user/jeaye) (Quit: WeeChat 3.1)
[23:10:48] *** Joins: joe_colben (~joe____co@185.190.112.211)
[23:16:29] <xerox> mwnaylor: one idea is to keep the x y z sides alone, devising a procedure to break up "cubes" when needed
[23:22:20] *** Joins: matty_ma1 (~matt@129.222.239.110)
[23:26:16] *** Joins: awb99 (~quassel@85-125-195-170.static.upcbusiness.at)
[23:26:19] *** Joins: jeaye (~jeaye@user/jeaye)
[23:26:31] *** Quits: jeaye (~jeaye@user/jeaye) (Client Quit)
[23:33:57] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[23:36:08] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 252 seconds)
[23:36:59] *** Joins: struchu (~struchu@staticline-31-183-170-166.toya.net.pl)
