[00:00:08] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[00:00:42] *** Joins: hololeap (~hololeap@user/hololeap)
[00:00:55] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[00:01:02] *** Joins: kayprish (~kayprish@46.240.130.158)
[00:03:47] *** Joins: alx741 (~alx741@186.178.109.114)
[00:04:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[00:05:04] *** Joins: themc47 (~mc47@xmonad/TheMC47)
[00:05:11] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:06:42] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:07:34] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[00:08:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:10:30] *** Quits: kayprish (~kayprish@46.240.130.158) (Quit: leaving)
[00:10:41] *** Joins: kayprish (~kayprish@46.240.130.158)
[00:17:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[00:20:00] *** Joins: beka (~beka@104.193.170.240)
[00:21:20] *** Joins: jespada (~jespada@190.7.36.46)
[00:21:55] *** Quits: player205 (~player205@net-93-71-138-138.cust.vodafonedsl.it) (Quit: WeeChat 3.0.1)
[00:25:09] <fendor[m]> Can I not pass -package-env to ghci using `:seti` or `:set`? ☹️
[00:25:15] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[00:26:28] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:26:44] <monochrom> Probably too late after ghci has started.
[00:26:49] <geekosaur> I think it's too late for that by that point? although 9.2.1 at least seems to think it's a dynamic option
[00:28:18] <fendor[m]> well clearing the package db, and setting a couple of new ones should be easily possible at run-time
[00:28:27] <fendor[m]> or am I missing a feature of package-envs?
[00:29:17] <monochrom> No. Long in the past, I already discovered that ghci doesn't want to even know any change in the package db after startup.
[00:30:02] <monochrom> And generally I wouldn't think in terms of "it should be easy for someone else to add a feature I want".
[00:31:20] <fendor[m]> I am not, I rather mean "it should be possible, is there a reason why it isn't right now?" And if the answer is no, I am inclined to add that feature
[00:32:06] <fendor[m]> and I bet the answer is "no particular reason, but it is complicated"
[00:32:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:32:28] <geekosaur> one thoing thatoccurs to me is you'd potenntially have to throw out everything ghci currently knows and start over (like :load)
[00:33:01] <geekosaur> perhaps not complicated, but possibly invasive and annoying to the user
[00:33:21] <geekosaur> this said, many things ghci doesn't do just because nobody asked for it before
[00:34:01] <fendor[m]> that is indeed true, if that is the only option that causes such reloads then it is rather annoying and unexpected
[00:34:05] <geekosaur> ghci wasn't designed, it just kinda grew
[00:34:58] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[00:35:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:37:19] <fendor[m]> it is still amazingly good, imo
[00:41:03] *** Quits: themc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:41:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:44:11] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:47:42] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[00:49:13] <dsal> Heh, I just saw this via rss:  http://logicaltypes.blogspot.com/2021/11/november-2021-1haskelladay-1liners.html
[00:51:23] *** Quits: mei3 (~mei@user/mei) (Ping timeout: 268 seconds)
[00:52:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 264 seconds)
[00:53:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:53:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:54:34] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:54:51] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:55:05] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:55:09] *** Quits: mikoto-c1 (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 250 seconds)
[00:55:33] <yin> fun!
[00:55:45] *** Joins: mikoto-c1 (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[00:56:02] <yin> @pl \f -> (\x -> f (x x)) (\x -> f (x x))
[00:56:02] <lambdabot> ap (. join id) (. join id)
[00:56:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[00:56:15] <yin> @pl \f -> (\x -> x x) (\x -> f (x x))
[00:56:15] <lambdabot> join id . (. join id)
[00:56:19] <yin> :)
[00:57:53] <kronicmage> @t \f -> (\x -> x x) (\x -> f (x x))
[00:57:53] <lambdabot> Maybe you meant: tell thank you thanks thesaurus thx tic-tac-toe ticker time todo todo-add todo-delete type v @ ? .
[00:57:59] *** Joins: vysn (~vysn@user/vysn)
[00:59:02] <kronicmage> huh pl works on maltyped things
[00:59:04] <kronicmage> til
[00:59:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:59:24] <geekosaur> yeh, @pl just does substitutions, it doesn't really know haskell
[01:00:00] <yin> fun!
[01:01:00] <yin> what can we learn from this? i feel that `ap (. join id) (. join id)` should be a big insight
[01:04:17] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[01:04:35] <dsal> I can learn that if I see that in code somewhere, someone didn't come up with it and probably doesn't understand it, but sent it through @pl and copied it because they thought it looked cool.
[01:04:46] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c721b7398586a2e711bd371d.dip0.t-ipconnect.de)
[01:05:50] <Taneb> I did once write a horrifying program to calculate factorials that was mostly "pure", "(<*>)", and "unsafeCoerce"
[01:06:04] <Taneb> It ran out of memory for numbers bigger than 11
[01:06:20] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[01:08:29] *** Quits: acidjnk_new (~acidjnk@p200300d0c724a7710420fe3aa4fdb454.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[01:09:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[01:09:48] <Taneb> If anyone has IRC logs for June 2012, it's probably linked to from there
[01:12:48] <tomsmeding> for bonus points, replace (.) with fmap
[01:13:06] <tomsmeding> fmap (join id) `ap` fmap (join id)
[01:13:13] *** Joins: pavonia (~user@user/siracusa)
[01:16:11] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[01:16:18] <dsal> :t fmap (join id) `ap` fmap (join id)
[01:16:19] <lambdabot> error:
[01:16:20] <lambdabot>     • Occurs check: cannot construct the infinite type: a ~ a -> b1
[01:16:20] <lambdabot>       Expected type: a -> a -> b1
[01:16:40] <dsal> So annoyed by haskell's finite types.
[01:17:33] <yin> what would be the undesirable consequences of allowing infinite types?
[01:17:47] <yin> besides non termination
[01:18:28] <dsal> It's kind of hard to think about.
[01:19:53] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[01:20:34] *** Joins: sander (~sander@user/sander)
[01:20:43] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:21:45] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[01:22:23] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[01:22:43] *** Joins: alzgh (~alzgh@user/alzgh)
[01:23:13] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[01:23:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 250 seconds)
[01:25:55] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 250 seconds)
[01:27:02] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[01:27:27] <maerwald> tomsmeding: I love fmap so much, I think I actually did that once in production code
[01:27:54] *** Joins: royo (~royo@user/royo)
[01:28:14] <k`> :q
[01:28:22] *** Quits: k` (~user@152.1.137.158) (Remote host closed the connection)
[01:29:39] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[01:29:57] <yin> dsal: too hard even for this channel?
[01:29:59] <dolio> yin: Almost every time you under/over apply a function by accident, you could give it an infinite type.
[01:30:48] <dolio> So, the only thing that gives you an error message instead of something much more confusing to figure out is rejecting infinite types.
[01:31:19] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[01:31:39] <dolio> At least, deciding not to infer infinite types.
[01:32:37] *** Joins: Noobish (~Noobish@64.150.15.15)
[01:33:43] <monochrom> "f (x:xs) = ... f x ..." is also a common beginner mistake that, if accepted, would cause an infinite type.
[01:33:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[01:34:04] <dolio> Yeah, lots of typos.
[01:34:20] <dolio> (xs:x) instead of (x:xs).
[01:34:30] <monochrom> Practical experience says that 99.99% of infinite types are typos, not intentional.
[01:34:35] <dsal> infinite typos
[01:34:53] <yin> :)
[01:35:13] <dsal> I've not run into a situation where I wish I had an infinite type.
[01:35:29] <monochrom> And among the intentional legit ones, 99% lead to hard-to-follow code.
[01:35:34] <dsal> Why can't an element of a list be the same type as the list of the elements of that list?
[01:36:05] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 264 seconds)
[01:36:45] <yin> let a = [a] in [a]
[01:36:46] <dolio> That's set theory.
[01:37:33] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[01:37:48] <monochrom> It turns out that when you intend to have an infinite type, going isorecursive is nicer for your readers, e.g., with "newtype D = MkD{unD :: D->D}", your explicit "MkD foo" and "unD bar" help your reader recognize "ah you're now converting D to D->D" "ah you're now convering D->D to D".
[01:38:26] <monochrom> In fact the same can be said of all recursive ADTs.
[01:38:56] <monochrom> Infinite type is just a special case of the stance of equirecursive types.
[01:39:24] *** Quits: Noobish (~Noobish@64.150.15.15) (Remote host closed the connection)
[01:41:14] <monochrom> And equi-vs-iso is in turn just a special case of structural-vs-nomial.
[01:41:18] <monochrom> err, nominal
[01:42:16] <monochrom> "type IntStream = (Int, IntStream)" vs "newtype IntStream = Ctor (Int, IntStream)"
[01:43:21] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[01:48:34] <monochrom> Set theory has an "axiom of foundation" that disallows x = {x}, among related infinite-descent things.
[01:49:03] <dolio> Yeah, but the cool set theories have the axiom of anti-foundation.
[01:49:11] <monochrom> However! There are CS areas that find it useful to omit that axiom and allow infinite-descent sets.
[01:50:12] <dolio> Actually, there are multiple variants of anti-foundation axioms, I think.
[01:50:21] *** Joins: lbseale_ (~lbseale@user/ep1ctetus)
[01:50:48] <dolio> Depending to the different kinds of cyclic graphs you allow sets to correspond to.
[01:51:22] <yin> @def data Fix f = Fix (f (Fix f))
[01:51:23] <lambdabot>  Defined.
[01:51:30] <monochrom> My favourite anti-foundation axiom is "it's lasagna all the way down" :P
[01:51:32] <yin> @kind Fix
[01:51:33] <lambdabot> (* -> *) -> *
[01:51:54] <dolio> Also, like, if `x = {x}` and `y = {y}` does x = y?
[01:53:15] <dolio> x is a set that contains itself, and y is a set that contains itself, but do they contain all the same sets?
[01:53:33] <dsal> yin: do you have a good understanding of fix/Fix?
[01:53:35] <dolio> Extensionality can't answer the question. :)
[01:53:56] <yin> dsal: fix yes, Fix i think i'm struggling with
[01:54:09] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Ping timeout: 256 seconds)
[01:54:44] <dsal> Fix is just fix at the type level.   This is a good read:  https://chrispenner.ca/posts/asts-with-fix-and-free
[01:55:15] <yin> thanks!
[01:55:17] *** Quits: max22- (~maxime@2a01cb0883359800a8cb049c70e9b71a.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:58:14] <monochrom> We almost had the same issue with streams for example (generally coinductive types).  If x=():x and y=():y, does x=y?
[01:58:43] <monochrom> The narrow version of extensionality (two records are equal iff respect fields are equal) can't answer it either.
[01:59:17] <monochrom> Eventually someone figured out "x and y are bisimilar, let's define 'equal' to just mean that".
[01:59:26] <dolio> Exactly.
[02:03:13] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[02:03:37] <yin> what if y = ():x ?
[02:04:10] <monochrom> Then x and this y are bisimilar, too.
[02:04:37] *** Joins: Sgeo (~Sgeo@user/sgeo)
[02:04:52] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[02:04:55] <yin> so infinity+1 == infinity
[02:05:26] <monochrom> I wouldn't jump to that conclusion. : is not +, x is not infinity.
[02:05:32] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 246 seconds)
[02:05:53] *** Joins: zebrag (~chris@user/zebrag)
[02:06:07] <yin> can't you make the argument that at the type level that wuld be peano infinity?
[02:06:36] <yin> (i don't know what i'm saying)
[02:06:37] <monochrom> I don't know peano infinity and I don't know that argument.
[02:06:44] *** Quits: cosimone (~user@93-44-184-123.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:07:43] <awpr> sounds to me like: if you define a peano naturals type in Haskell, you get an extra inhabitant `infinity = S infinity`, and that is in the same sense bisimilar to `S infinity`
[02:07:59] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[02:08:11] <dolio> Depends how you define it.
[02:08:13] <awpr> IIUC it's not supposed to be a member of the Peano naturals, but it sneaks in due to laziness
[02:08:15] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Quit: Leaving)
[02:08:32] <awpr> "how you define it" = by not using a strict field?
[02:08:39] <dolio> Right.
[02:09:53] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[02:11:33] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (Ping timeout: 268 seconds)
[02:11:48] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[02:11:52] <monochrom> Yes, I was waiting for you to set up an explicit homomorphism from [()] to "data N = Z | S N", and then the conclusion is OK.
[02:12:40] <yin> ^
[02:12:58] *** Joins: finsternis (~X@23.226.237.192)
[02:13:54] <Axman6> type FatPeano = [()]
[02:14:50] <yin> @type [(  )]
[02:14:50] <lambdabot> [()]
[02:17:40] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:21:20] <yin> can a compiler optimize something like `data L a = L a (Maybe (L a))` to `data L a = E a | N a (L a)` ?
[02:21:39] <sclv> kritzefitz: btw is this ticket germane to the discussion we were having this morning? https://github.com/haskell/cabal/issues/3586
[02:23:32] <Axman6> yin: no
[02:23:46] <yin> Axman6: could it, theretically?
[02:23:51] <Axman6> unboxed sum types might helkp though
[02:24:25] <Axman6> you''d end up with data L a = L a (#a|Void#) or something
[02:24:38] <Axman6> uh, 
[02:24:55] <Axman6> data L a = L a (#L a|Void#)
[02:25:06] <Axman6> which... doesn't make sense I think
[02:25:21] <Axman6> that would lead to an infinitely sized L so no
[02:25:33] <hpc> rust does something like this, but it helps that rust is strict
[02:25:43] <Axman6> anyway, no - maybe it could but it doesn't. what would be the reason for doing that? Saving an indirection?
[02:26:09] <yin> yes, that's what i has in mind
[02:26:24] <yin> s/has/had
[02:26:42] <monochrom> Saves a little memory, "E 3" stores less than "L 3 Nothing".
[02:27:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:27:26] <yin> and all the Justs, i'm thinking
[02:27:29] <yin> n?
[02:27:45] <janus> another cabal-docspec success story: https://github.com/sol/doctest/issues/301#issuecomment-965818593 oh happy day
[02:27:57] *** Joins: sagax (~sagax_nb@user/sagax)
[02:30:05] <Axman6> it's an interesting idea, but possibly only works in a small number of cases. what do you want the compiler to do with data L a = L a (Maybe (L a)) (Maybe (L a))? should we get four constructors?
[02:31:35] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[02:31:43] <geekosaur> a sufficiently clever compiler might convert that into a tree. question becomes, what kind of tree?
[02:33:36] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:36:09] <yin> that would be `data K a = E | K a; data L a = L a (K a) (K a)`
[02:37:15] <yin> i mean: `data K a = E | K (L a); data L a = L a (K a) (K a)` ?
[02:37:36] <yin> K is Maybe
[02:37:43] <yin> ok i get your point
[02:38:12] *** Joins: brandonh (brandonh@gateway/vpn/protonvpn/brandonh)
[02:38:20] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:39:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:40:35] *** Quits: jkaye (~jkaye@2601:281:8300:7530:65b4:1325:4217:bff5) (Ping timeout: 264 seconds)
[02:43:26] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 245 seconds)
[02:46:31] *** Quits: xff0x (~xff0x@2001:1a81:53aa:5400:2665:d30f:dc60:ace5) (Ping timeout: 250 seconds)
[02:47:13] *** Joins: xff0x (~xff0x@2001:1a81:53aa:5400:8327:d2de:b0b3:bf1)
[02:49:40] *** Joins: lbseale__ (~lbseale@user/ep1ctetus)
[02:49:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[02:53:02] *** Quits: lbseale_ (~lbseale@user/ep1ctetus) (Ping timeout: 240 seconds)
[02:58:32] *** Quits: beka (~beka@104.193.170.240) (Ping timeout: 240 seconds)
[03:05:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:11:59] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[03:12:13] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[03:15:13] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:21:38] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[03:27:32] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (Remote host closed the connection)
[03:27:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:27:41] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[03:28:16] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[03:28:54] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:33:01] *** Joins: jurjen (~jurjen@31-161-147-158.mobile.kpn.net)
[03:34:02] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:34:09] *** Joins: Vajb (~Vajb@85-76-99-174-nat.elisa-mobile.fi)
[03:38:20] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[03:38:20] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[03:38:23] *** allbery_b is now known as geekosaur
[03:38:59] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[03:40:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:40:19] *** Quits: jurjen (~jurjen@31-161-147-158.mobile.kpn.net) (Quit: WeeChat 3.0)
[03:40:58] <Axman6> yin: also worth keeping in mind that these types might have different laziness properties
[03:41:15] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 256 seconds)
[03:42:39] <yin> implicitly?
[03:43:15] *** Joins: jurjen (~jurjen@31-161-147-158.mobile.kpn.net)
[03:43:39] *** Quits: Guest4249 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[03:44:58] <Axman6> actually the one above would be the same, but the first example has one more level of indirection so there are more places for bottoms - you can have L a undefined, L a (Just undefined) vs N a undefined
[03:47:09] <yin> ah right
[03:48:03] <yin> i make myself forget that undefined exists
[03:50:08] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c721b7398586a2e711bd371d.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:50:31] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c721b73914e45eebfbace128.dip0.t-ipconnect.de)
[03:51:19] <yin> i see, you're right
[03:52:37] *** Quits: jurjen (~jurjen@31-161-147-158.mobile.kpn.net) (Read error: Connection reset by peer)
[03:53:48] *** Quits: SethTisue__ (sid14912@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[03:53:48] *** Quits: angerman (sid209936@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[03:54:06] *** Quits: dmj` (sid72307@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[03:54:19] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 244 seconds)
[03:54:40] *** Quits: Adeon (sid418992@lymington.irccloud.com) (Ping timeout: 260 seconds)
[03:54:40] *** Quits: Boarders (sid425905@lymington.irccloud.com) (Ping timeout: 260 seconds)
[03:55:09] *** Quits: aria (sid380617@lymington.irccloud.com) (Ping timeout: 268 seconds)
[03:55:09] *** Quits: gregberns__ (sid315709@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[03:55:15] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 260 seconds)
[03:55:15] *** Quits: bradparker (sid262931@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[03:55:15] *** Quits: teehemkay (sid14792@lymington.irccloud.com) (Ping timeout: 260 seconds)
[03:55:15] *** Quits: gaze___ (sid387101@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[03:55:15] *** Quits: amir (sid22336@user/amir) (Ping timeout: 260 seconds)
[03:55:21] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 244 seconds)
[03:55:28] *** Quits: _0x47 (sid508683@tinside.irccloud.com) (Ping timeout: 268 seconds)
[03:55:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Remote host closed the connection)
[03:55:38] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[03:55:38] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[03:55:38] *** Quits: AndreasK_ (sid320732@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[03:56:23] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[03:56:27] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:57:05] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[03:57:05] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[03:57:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[03:57:11] *** Quits: the_finn (uid526334@id-526334.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[03:57:23] *** Quits: tnks (sid412124@id-412124.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[03:57:23] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (Ping timeout: 264 seconds)
[03:57:23] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[03:57:23] *** Quits: enemeth79 (sid309041@id-309041.lymington.irccloud.com) (Ping timeout: 264 seconds)
[03:57:32] *** Quits: econo (uid147250@user/econo) (Ping timeout: 240 seconds)
[03:57:37] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Ping timeout: 268 seconds)
[03:57:37] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[03:57:37] *** Quits: joel135 (sid136450@2a03:5180:f:4::2:1502) (Ping timeout: 268 seconds)
[03:57:37] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (Ping timeout: 268 seconds)
[03:57:37] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[03:57:38] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (Ping timeout: 268 seconds)
[03:57:38] *** Quits: saolsen (sid26430@id-26430.lymington.irccloud.com) (Ping timeout: 268 seconds)
[03:57:38] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 268 seconds)
[03:57:38] *** Quits: etrepum (sid763@id-763.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[03:57:38] *** Quits: stevenxl (sid133530@id-133530.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[03:57:38] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[03:57:40] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (Read error: No route to host)
[03:57:40] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:40] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: dpratt_ (sid193493@id-193493.helmsley.irccloud.com) (Read error: No route to host)
[03:57:41] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: kaizen (sid501599@id-501599.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: lightandlight (sid135476@2a03:5180:f:1::2:1134) (Read error: Connection reset by peer)
[03:57:41] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: parseval (sid239098@2a03:5180:f:1::3:a5fa) (Read error: Connection reset by peer)
[03:57:41] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: mcfilib (sid302703@user/mcfilib) (Read error: Connection reset by peer)
[03:57:41] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: kaychaks__ (sid236345@id-236345.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: alinab (sid468903@id-468903.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[03:57:41] *** Quits: elvishjerricco (sid237756@2a03:5180:f:1::3:a0bc) (Write error: Connection reset by peer)
[03:57:41] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Write error: Connection reset by peer)
[03:57:41] *** Quits: typetetris (sid275937@2a03:5180:f::4:35e1) (Read error: Connection reset by peer)
[03:57:41] *** Quits: jackdk (sid373013@cssa/jackdk) (Read error: Connection reset by peer)
[03:57:41] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: jmct_ (sid160793@2a03:5180:f::2:7419) (Read error: Connection reset by peer)
[03:57:41] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: hubvu (sid495858@user/hubvu) (Read error: Connection reset by peer)
[03:57:41] *** Quits: edmundnoble (sid229620@2a03:5180:f:1::3:80f4) (Write error: Connection reset by peer)
[03:57:42] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: vito (sid1962@user/vito) (Read error: Connection reset by peer)
[03:57:42] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: iphy (sid67735@id-67735.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: idnar (sid12240@debian/mithrandi) (Write error: Connection reset by peer)
[03:57:42] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: integral (sid296274@user/integral) (Read error: Connection reset by peer)
[03:57:42] *** Quits: NemesisD (sid24071@2a03:5180:f:2::5e07) (Read error: Connection reset by peer)
[03:57:42] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: nrr_ (sid20938@id-20938.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: whez (sid470288@id-470288.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: b20n (sid115913@2a03:5180:f:5::1:c4c9) (Read error: Connection reset by peer)
[03:57:42] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: philpax_ (sid516926@id-516926.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: sclv (sid39734@haskell/developer/sclv) (Write error: Connection reset by peer)
[03:57:42] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: bw (sid2730@user/betawaffle) (Read error: Connection reset by peer)
[03:57:42] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Read error: Connection reset by peer)
[03:57:42] *** Quits: tapas (sid467876@2a03:5180:f:3::7:23a4) (Read error: Connection reset by peer)
[03:57:42] *** Quits: S11001001 (sid42510@2a03:5180:f:3::a60e) (Read error: Connection reset by peer)
[03:57:42] *** Quits: mrianbloom (sid350277@2a03:5180:f:3::5:5845) (Write error: Connection reset by peer)
[03:57:42] *** Quits: hook54321 (sid149355@user/hook54321) (Read error: Connection reset by peer)
[03:57:42] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: astra` (sid289983@user/amish) (Read error: Connection reset by peer)
[03:57:42] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Write error: Connection reset by peer)
[03:57:42] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:57:42] *** Quits: rubin55 (sid175221@2a03:5180:f:4::2:ac75) (Read error: Connection reset by peer)
[03:57:42] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Write error: Connection reset by peer)
[03:57:42] *** Quits: hamishmack (sid389057@2a03:5180:f:4::5:efc1) (Write error: Connection reset by peer)
[03:57:44] *** Lord_of_Life_ is now known as Lord_of_Life
[03:58:02] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[03:58:14] *** Quits: gonz____ (sid304396@id-304396.lymington.irccloud.com) (Ping timeout: 246 seconds)
[03:58:27] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[03:58:35] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (Ping timeout: 246 seconds)
[04:00:35] *** Quits: brandonh (brandonh@gateway/vpn/protonvpn/brandonh) (Quit: brandonh)
[04:03:06] *** Quits: jeslie0 (~user@135-23-172-182.cpe.pppoe.ca) (Quit: ERC (IRC client for Emacs 28.0.50))
[04:04:36] <Axman6> Is it possible in GHC to define a data type which contains a variable sized array directly inside the same object? like the classic C struct { int type; int len; uint8_t data[] }?
[04:05:33] <Axman6> or are all primitive array types always accessed through indirection to another object? (I feel like edwardk has done something in this area before and I should go check his github)
[04:08:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:08:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:08:00] *** Joins: wroathe (~wroathe@user/wroathe)
[04:08:47] <monochrom> I have a feeling that each primitive array type is already a {int len; foo data[]} struct itself.
[04:09:04] <Axman6> right, I guess I'm asking if that can be unpacked into your own types
[04:10:14] <Axman6> (https://github.com/ekmett/structs is what i was thinking about above)
[04:10:47] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Remote host closed the connection)
[04:12:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[04:13:58] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[04:14:09] *** Joins: sa1_ (sid7690@ilkley.irccloud.com)
[04:14:13] *** Joins: hongminhee (sid295@tinside.irccloud.com)
[04:14:14] *** Joins: hubvu (sid495858@user/hubvu)
[04:14:16] *** Joins: jackdk (sid373013@cssa/jackdk)
[04:14:16] *** Joins: christiaanb (sid84827@lymington.irccloud.com)
[04:14:16] *** Joins: philpax_ (sid516926@lymington.irccloud.com)
[04:14:18] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[04:14:20] *** Joins: acertain (sid470584@hampstead.irccloud.com)
[04:14:20] *** Joins: aristid (sid1599@uxbridge.irccloud.com)
[04:14:20] *** Joins: bbhoss (sid18216@tinside.irccloud.com)
[04:14:21] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[04:14:21] *** Joins: supersven (sid501114@ilkley.irccloud.com)
[04:14:22] *** Joins: iphy (sid67735@lymington.irccloud.com)
[04:14:24] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[04:14:26] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[04:14:26] *** Joins: ysh (sid6017@ilkley.irccloud.com)
[04:14:28] *** Joins: the_finn (uid526334@hampstead.irccloud.com)
[04:14:28] *** Joins: ehamberg (sid18208@hampstead.irccloud.com)
[04:14:30] *** Joins: SrPx (sid108780@uxbridge.irccloud.com)
[04:14:31] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[04:14:32] *** Joins: joel135 (sid136450@hampstead.irccloud.com)
[04:15:48] <monochrom> "The Template Haskell generates tupleLeft, tupleRight :: Field (TupleInts a) a, which can be used to get and set fields with getField, setField"  So it is lens but for C structs? Heh.
[04:15:54] *** Joins: cln (sid336875@ilkley.irccloud.com)
[04:19:12] *** Quits: hongminhee (sid295@tinside.irccloud.com) (Ping timeout: 268 seconds)
[04:19:12] *** Quits: sa1_ (sid7690@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[04:19:13] *** Quits: aristid (sid1599@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[04:19:35] *** Quits: iphy (sid67735@lymington.irccloud.com) (Ping timeout: 264 seconds)
[04:19:35] *** Quits: supersven (sid501114@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[04:19:47] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[04:19:47] *** Quits: christiaanb (sid84827@lymington.irccloud.com) (Ping timeout: 256 seconds)
[04:19:49] *** Quits: the_finn (uid526334@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[04:19:49] *** Quits: ysh (sid6017@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[04:19:49] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[04:19:49] *** Quits: bbhoss (sid18216@tinside.irccloud.com) (Ping timeout: 268 seconds)
[04:19:49] *** Quits: philpax_ (sid516926@lymington.irccloud.com) (Ping timeout: 268 seconds)
[04:20:11] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 264 seconds)
[04:20:21] *** Quits: acertain (sid470584@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[04:20:21] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 256 seconds)
[04:20:26] *** Quits: ehamberg (sid18208@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[04:20:26] *** Quits: SrPx (sid108780@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[04:20:47] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[04:20:47] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 264 seconds)
[04:20:47] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[04:20:47] *** Quits: agander_m (sid407952@tinside.irccloud.com) (Ping timeout: 264 seconds)
[04:21:03] *** Quits: cln (sid336875@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[04:21:03] *** Quits: joel135 (sid136450@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[04:21:25] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 250 seconds)
[04:21:39] *** Joins: AndreasK_ (sid320732@uxbridge.irccloud.com)
[04:21:42] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[04:21:44] *** Joins: dmj` (sid72307@hampstead.irccloud.com)
[04:21:45] *** Joins: obviyus (sid415299@user/obviyus)
[04:21:50] *** Joins: bradparker (sid262931@uxbridge.irccloud.com)
[04:21:57] *** Joins: gaze___ (sid387101@helmsley.irccloud.com)
[04:22:15] *** Joins: aristid (sid1599@uxbridge.irccloud.com)
[04:22:16] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[04:22:18] *** Joins: supersven (sid501114@ilkley.irccloud.com)
[04:22:25] *** Joins: sa1_ (sid7690@ilkley.irccloud.com)
[04:22:38] *** Joins: jackdk (sid373013@cssa/jackdk)
[04:22:38] *** Joins: iphy (sid67735@lymington.irccloud.com)
[04:22:43] *** Joins: bbhoss (sid18216@tinside.irccloud.com)
[04:23:09] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[04:23:14] *** Joins: joel135 (sid136450@hampstead.irccloud.com)
[04:23:18] *** Joins: hubvu (sid495858@user/hubvu)
[04:23:20] *** Joins: ysh (sid6017@ilkley.irccloud.com)
[04:23:20] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[04:23:23] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[04:23:25] *** Joins: cln (sid336875@ilkley.irccloud.com)
[04:23:26] *** Joins: SrPx (sid108780@uxbridge.irccloud.com)
[04:23:28] *** Joins: philpax_ (sid516926@lymington.irccloud.com)
[04:23:31] *** Joins: ehamberg (sid18208@hampstead.irccloud.com)
[04:24:10] *** Joins: acertain (sid470584@hampstead.irccloud.com)
[04:24:14] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[04:24:22] *** Joins: enemeth79 (sid309041@lymington.irccloud.com)
[04:24:25] *** Joins: davetapley (sid666@uxbridge.irccloud.com)
[04:24:26] *** Joins: gonz____ (sid304396@lymington.irccloud.com)
[04:24:32] *** Joins: bjs (sid190364@user/bjs)
[04:24:36] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[04:24:36] *** Joins: taktoa[c] (sid282096@tinside.irccloud.com)
[04:24:37] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[04:24:37] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[04:24:37] *** Joins: meinside (uid24933@helmsley.irccloud.com)
[04:24:38] *** Joins: cbarrett (sid192934@helmsley.irccloud.com)
[04:24:39] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[04:24:40] *** Joins: hendi (sid489601@lymington.irccloud.com)
[04:24:40] *** Joins: SanchayanMaity (sid478177@hampstead.irccloud.com)
[04:24:40] *** Joins: hamishmack (sid389057@hampstead.irccloud.com)
[04:24:42] *** Joins: stevenxl (sid133530@uxbridge.irccloud.com)
[04:24:45] *** Joins: pjlsergeant (sid143467@hampstead.irccloud.com)
[04:24:54] *** Joins: awpr (uid446117@lymington.irccloud.com)
[04:24:57] <Axman6> well, C struct like things anyway, not sure there's any mapping between C data types and Haskell ones
[04:25:08] *** Joins: hook54321 (sid149355@user/hook54321)
[04:26:06] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[04:26:12] *** Joins: astra` (sid289983@user/amish)
[04:27:06] <geekosaur> not a reliable one, and only for some types
[04:27:14] <geekosaur> String is hopeless, for example
[04:31:07] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[04:31:11] *** Joins: gregberns__ (sid315709@helmsley.irccloud.com)
[04:31:23] *** Joins: Boarders (sid425905@lymington.irccloud.com)
[04:31:27] *** Joins: SethTisue__ (sid14912@ilkley.irccloud.com)
[04:31:29] *** Joins: aria (sid380617@lymington.irccloud.com)
[04:31:32] *** Joins: Adeon (sid418992@lymington.irccloud.com)
[04:31:54] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[04:32:05] *** Joins: tritlo (sid58727@user/tritlo)
[04:32:10] *** Joins: jonrh (sid5185@ilkley.irccloud.com)
[04:34:15] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[04:34:18] *** Joins: jmct_ (sid160793@tinside.irccloud.com)
[04:34:22] *** Joins: truckasaurus (sid457088@helmsley.irccloud.com)
[04:34:23] *** Joins: the_finn (uid526334@hampstead.irccloud.com)
[04:34:23] *** Joins: rune (sid21167@ilkley.irccloud.com)
[04:34:23] *** Joins: econo (uid147250@user/econo)
[04:34:32] *** Joins: b20n (sid115913@uxbridge.irccloud.com)
[04:34:36] *** Joins: idnar (sid12240@debian/mithrandi)
[04:34:37] *** Joins: vito (sid1962@user/vito)
[04:34:37] *** Joins: glowcoil (sid3405@tinside.irccloud.com)
[04:34:38] *** Joins: T_S_ (sid501726@uxbridge.irccloud.com)
[04:34:40] *** Joins: typetetris (sid275937@tinside.irccloud.com)
[04:34:40] *** Joins: kaizen (sid501599@helmsley.irccloud.com)
[04:34:41] *** Joins: lightandlight (sid135476@helmsley.irccloud.com)
[04:34:44] *** Joins: grfn (sid449115@helmsley.irccloud.com)
[04:34:44] *** Joins: parseval (sid239098@helmsley.irccloud.com)
[04:34:44] *** Joins: mrianbloom (sid350277@ilkley.irccloud.com)
[04:34:45] *** Joins: dsal (sid13060@lymington.irccloud.com)
[04:34:48] *** Joins: Firedancer (sid336191@hampstead.irccloud.com)
[04:34:51] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[04:34:54] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[04:34:54] *** Joins: sa (sid1055@tinside.irccloud.com)
[04:36:13] *** Joins: ephemient (uid407513@lymington.irccloud.com)
[04:37:54] *** Quits: DNH (~DNH@8.43.122.53) (Quit: Textual IRC Client: www.textualapp.com)
[04:40:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 245 seconds)
[04:41:16] *** Joins: angerman (sid209936@ilkley.irccloud.com)
[04:41:32] *** Joins: _0x47 (sid508683@tinside.irccloud.com)
[04:41:34] *** Joins: teehemkay (sid14792@lymington.irccloud.com)
[04:41:38] *** Joins: amir (sid22336@user/amir)
[04:42:00] *** Joins: carter (sid14827@helmsley.irccloud.com)
[04:42:10] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[04:42:52] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:44:22] *** Joins: edmundnoble (sid229620@helmsley.irccloud.com)
[04:44:25] *** Joins: tnks (sid412124@helmsley.irccloud.com)
[04:44:25] *** Joins: hongminhee (sid295@tinside.irccloud.com)
[04:44:26] *** Joins: scav (sid309693@helmsley.irccloud.com)
[04:44:28] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[04:44:29] *** Joins: whez (sid470288@lymington.irccloud.com)
[04:44:32] *** Joins: etrepum (sid763@uxbridge.irccloud.com)
[04:44:33] *** Joins: saolsen (sid26430@lymington.irccloud.com)
[04:44:35] *** Joins: christiaanb (sid84827@lymington.irccloud.com)
[04:44:36] *** Joins: integral (sid296274@user/integral)
[04:44:38] *** Joins: Pent (sid313808@lymington.irccloud.com)
[04:44:42] *** Joins: bw (sid2730@user/betawaffle)
[04:44:44] *** Joins: nrr_ (sid20938@lymington.irccloud.com)
[04:44:49] *** Joins: kaychaks__ (sid236345@helmsley.irccloud.com)
[04:44:50] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[04:44:51] *** Joins: NemesisD (sid24071@lymington.irccloud.com)
[04:44:53] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[04:45:00] *** Joins: PotatoGim (sid99505@lymington.irccloud.com)
[04:54:14] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 246 seconds)
[04:54:31] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[04:54:31] *** Joins: mcfilib (sid302703@user/mcfilib)
[04:54:34] *** Joins: degraafk (sid71464@lymington.irccloud.com)
[04:54:34] *** Joins: sclv (sid39734@haskell/developer/sclv)
[04:54:34] *** Joins: bitmapper (uid464869@lymington.irccloud.com)
[04:54:35] *** Joins: gmc (sid58314@ilkley.irccloud.com)
[04:54:36] *** Joins: tapas (sid467876@ilkley.irccloud.com)
[04:54:36] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[04:54:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:54:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:54:39] *** Joins: wroathe (~wroathe@user/wroathe)
[04:56:16] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[04:57:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[04:59:27] *** Quits: lechner (~lechner@debian/lechner) (Quit: WeeChat 3.0)
[05:00:35] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 256 seconds)
[05:00:35] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[05:00:35] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 256 seconds)
[05:02:21] *** Joins: carter (sid14827@helmsley.irccloud.com)
[05:02:25] *** Joins: PotatoGim (sid99505@lymington.irccloud.com)
[05:04:17] *** Joins: jackdk (sid373013@cssa/jackdk)
[05:06:04] *** Quits: nineonine (~nineonine@2604:3d08:7780:cd00:187c:a4eb:abb4:3c17) (Remote host closed the connection)
[05:08:05] *** Quits: lbseale__ (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[05:12:29] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[05:12:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[05:14:41] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[05:17:47] *** Quits: Vajb (~Vajb@85-76-99-174-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[05:20:14] *** Quits: alx741 (~alx741@186.178.109.114) (Quit: alx741)
[05:20:23] *** Quits: jushur (~human@user/jushur) (Quit:  ¯\_(ツ)_/¯)
[05:21:13] *** Quits: kayprish (~kayprish@46.240.130.158) (Ping timeout: 250 seconds)
[05:21:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:25:49] *** Joins: beka (~beka@104.193.170.240)
[05:27:51] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Remote host closed the connection)
[05:28:15] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[05:30:03] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[05:30:32] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[05:30:56] *** Joins: justache (~justache@user/justache)
[05:32:30] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:32:30] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:32:30] *** Joins: wroathe (~wroathe@user/wroathe)
[05:33:22] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:36:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:36:48] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[05:37:34] *** Joins: jkaye (~jkaye@2601:281:8300:7530:2229:11af:500f:b39d)
[05:41:46] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 245 seconds)
[05:45:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[05:46:29] *** Joins: SevenAster (~quassel@user/sevenaster)
[05:48:28] <jkaye> Is MonadError/ExceptT a good general way to think about error/exception handling within an application? What are alternatives/are there better ways to handle errors in general? Sorry I realize this is a very vague question, I'm asking in the abstract because I'm trying to decide what error handling strategy I should use for a new application that I'm writing
[05:49:18] <jkaye> To expound a bit, I imagine that I will want two "levels" of errors, one that represents logic/usage issues and another that represents "external" concerns e.g. database unavailable
[05:53:30] *** Quits: gdd (~gdd@129.199.146.230) (Quit: WeeChat 3.3)
[05:53:51] <SevenAster> I'm no expert on Monads by any means. Exceptions in C are *typically* done by returning an enum while the actual results are given by modifying the value of some reference
[05:54:24] *** Joins: lechner (~lechner@debian/lechner)
[05:54:39] <SevenAster> C++/C#/python use throws and try catches
[05:54:45] *** Joins: dpratt_ (sid193493@helmsley.irccloud.com)
[05:55:48] <SevenAster> Golang returns a tuple with the result and an error object or nill
[05:55:58] <Axman6> jkaye: I tend to start out with ExceptT unless I have a good reason not to. How doou want to handle those two classes of errors differently?
[05:56:17] *** Joins: gdd (~gdd@129.199.146.230)
[05:56:22] *** Parts: SevenAster (~quassel@user/sevenaster) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:56:43] <Axman6> golang error handling is about as bad as I could imagine, looking at go code and seeing more than 50% of all code is error handling makes me want to cry
[05:57:05] <Axman6> "Abstraction? What's that?"
[05:57:47] <jkaye> Axman6, good question. It's nuanced. My main goal is to prevent the "real world" from leaking into my (pure, abstract) domain model. So really, I'd like to somehow be able to allow the domain to operate in terms of the "pure" types of possible failures (e.g. requesting a key that's not present in a cache) but not the others
[05:57:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[05:58:26] <jkaye> I can show a silly example
[05:59:53] <jkaye> https://paste.tomsmeding.com/kMMLFFtm
[06:00:48] <jkaye> So using that, I'm imagining that there will be multiple different instances of MonadProperty - one for e.g. testing, one for local operations within the same binary, and one for remote operations across network boundaries
[06:01:47] <jkaye> Ideally the local operations would be able to "know" it's local and not have to worry about the "remote" failure possibilities. I don't really need it to be that advanced, but I figured I'd ask now while I'm still in the early stages of this things
[06:02:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[06:02:36] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:04:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[06:05:22] <Axman6> One way to experiment with this is to use something like this: data Actions m = Actions { getProperty :: PropertyName -> m Property; updateProperty :: PropertyName -> Property -> m () }; data App m a = ReaderT (Actions m) m a. This is a bit more flexible than only allowing one instance per monad you use. Then you can decide how you want to do errors in your own choice of m. 
[06:06:49] <Axman6> then you can defice getProp pname = do {f <- gets getProperty: f pname }; updateProp pname p = do { f <- gets updateProperty; f pname p }
[06:06:54] <Axman6> define*
[06:09:11] <jkaye> That is interesting
[06:09:33] <jkaye> Basically say that the "context" in which the operation is running provides the monadic context
[06:09:44] <Axman6> IMO, I would start by just explicitly using ExceptT, and having an error type which is a sumtype of the types of errors you want to have
[06:09:52] <jkaye> I like the idea, will think about that more. Thank you
[06:09:59] <jkaye> And yeah, I probably will do that
[06:10:07] <jkaye> Don't want to overcomplicate it if I don't have to
[06:10:10] <Axman6> there's some fun stuff you can do with classy prisms if you want to restrict the types of errors that are visible to different parts of the code
[06:10:16] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:10:17] <jkaye> Just want to be aware of the alternatives available to me
[06:10:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[06:10:46] <jkaye> Yeah, I have played with polysemy capabilities and such, which are interesting to me, but that's another place where I'm going to leave it until I need it
[06:11:08] <Axman6> reaching for type classes the way you are is a pretty common thing for people who have come from an OO background to do, and it's not necessarily the best approach
[06:11:44] <Axman6> polysemy is probably a very good way to deal with this, you can actually have two different error capabilities
[06:11:44] <jkaye> Right, the type class is not the important part for me, but rather the ability to swap behavior/instances
[06:12:08] <jkaye> I have had success with this approach in the past, but that doesn't make it the best way :)
[06:12:17] *** Quits: mmhat (~mmh@55d4b224.access.ecotel.net) (Ping timeout: 246 seconds)
[06:12:46] <Axman6> defining different interpreters for the different error types would be a pretty nice way to do what you want I think
[06:13:28] <Axman6> I would love other people's input inon this, I've never really found an approach I enjoyed very much
[06:13:35] *** Quits: mark__ (~a@p200300ef973db1dc4086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[06:14:46] <jkaye> One other question actually, given the idea that you posted above, how would you then represent that in renderFile? Would you just pass the Actions into the function there? That gets interesting because there are going to be many of these types of contexts, though I guess it would be easy enough to have Actions be a sum that aggregates the individual contexts so that they can then be passed independently
[06:15:01] <jkaye> Which does begin to sound suspiciously close to what polysemy provides I suppose..
[06:15:54] <Axman6> I'm not sure I understand the question
[06:16:05] <Axman6> but yes, polysemy, try that :P
[06:16:35] <jkaye> Like, Actions wouldn't be a flat record. There are many different "types" of Actions that different parts of the system would require, so I wouldn't want to send all of the actions all over the place
[06:16:47] <jkaye> data Actions = PropertyActions | FileActions | ...
[06:17:06] <jkaye> Sorry it should be a product, not sum
[06:17:32] <jkaye> It would contain an instance of each "type" of action so that it could provide them independently where they are required
[06:17:41] <jkaye> I'm just rambling now. Thanks for the input, it was very helpful
[06:17:43] *** Quits: bitmapper (uid464869@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[06:20:13] *** Joins: rkrishnan (~user@122.167.19.65)
[06:20:29] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[06:21:40] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[06:25:02] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:25:21] *** Quits: xff0x (~xff0x@2001:1a81:53aa:5400:8327:d2de:b0b3:bf1) (Ping timeout: 250 seconds)
[06:27:27] *** Joins: xff0x (~xff0x@2001:1a81:53e8:a400:4be3:10c9:a6eb:9cd9)
[06:27:37] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[06:30:04] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[06:30:32] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[06:34:30] <jkaye> Axman6, if you're still around, I know there's something dumb that I
[06:34:43] <jkaye> I'm not thinking about properly here.
[06:35:05] <jkaye> Say that I wanted to then create a PropertyActions using a State (M.Map ...) under the hood for testing purposes
[06:35:47] <jkaye> That's easy enough by creating the record of functions, but how would I then also "seed" the actions with the underlying data without repeatedly calling update on it?
[06:38:58] *** Quits: drdo (~drdo@roach0.drdo.eu) (Ping timeout: 260 seconds)
[06:43:13] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:45:02] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:45:20] <Axman6> with your call to runState
[06:45:58] <Axman6> you'd at some point have funFoo . flip runStateT myInitialState . flip runReaderT actionsUsingState
[06:46:41] <jkaye> Like I said, something dumb I'm not thinking about properly :) thanks!
[06:49:46] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[06:52:35] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[06:53:31] *** Joins: justache (~justache@user/justache)
[06:54:02] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[06:54:09] <jkaye> Just like that, we're passing:       evalState resolution M.empty `shouldBe` ResolvedFile TextContent "This file should render exactly as expected"
[06:54:24] <jkaye> Gonna think more about whether polysemy makes sense, but this is a great start
[06:54:26] <jkaye> Thanks again
[06:55:05] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[07:04:57] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:04:57] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:04:57] *** finn_elija is now known as FinnElija
[07:05:26] *** Joins: wei2912 (~wei2912@138.75.71.147)
[07:05:31] *** Quits: jkaye (~jkaye@2601:281:8300:7530:2229:11af:500f:b39d) (Ping timeout: 245 seconds)
[07:14:47] *** Quits: theproffesor (~theproffe@user/theproffesor) (Ping timeout: 264 seconds)
[07:15:24] *** Joins: theproffesor (~theproffe@2601:282:847f:8010:818b:10e4:707d:e026)
[07:15:24] *** Quits: theproffesor (~theproffe@2601:282:847f:8010:818b:10e4:707d:e026) (Changing host)
[07:15:24] *** Joins: theproffesor (~theproffe@user/theproffesor)
[07:16:44] *** Quits: theproffesor (~theproffe@user/theproffesor) (Read error: Connection reset by peer)
[07:16:46] *** Joins: the_proffesor (~theproffe@c-24-9-30-127.hsd1.co.comcast.net)
[07:16:46] *** Quits: the_proffesor (~theproffe@c-24-9-30-127.hsd1.co.comcast.net) (Changing host)
[07:16:46] *** Joins: the_proffesor (~theproffe@user/theproffesor)
[07:18:14] *** Quits: wei2912 (~wei2912@138.75.71.147) (Read error: Connection reset by peer)
[07:18:50] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[07:19:48] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[07:20:06] *** Quits: emf (~emf@2620:10d:c090:400::5:69be) (Ping timeout: 245 seconds)
[07:21:55] *** Joins: emf (~emf@2620:10d:c091:480::1:21b3)
[07:26:15] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[07:28:08] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[07:30:02] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[07:31:28] *** Joins: haasn (~nand@haasn.dev)
[07:32:10] *** Quits: td_ (~td@94.134.91.32) (Ping timeout: 260 seconds)
[07:33:02] *** Joins: emf_ (~emf@2620:10d:c090:400::5:538d)
[07:33:45] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:ad45:eba8:62a8:4c36)
[07:34:03] *** Joins: td_ (~td@94.134.91.245)
[07:34:35] *** Quits: emf (~emf@2620:10d:c091:480::1:21b3) (Ping timeout: 264 seconds)
[07:52:20] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:52:27] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 250 seconds)
[07:54:11] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 250 seconds)
[07:54:32] *** Quits: hiruji (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[07:59:30] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[08:01:25] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:06:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:08:17] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[08:09:27] *** Joins: mbuf (~Shakthi@223.184.52.200)
[08:13:15] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:14:55] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:ad45:eba8:62a8:4c36) (Quit: WeeChat 3.3)
[08:16:27] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:21:02] *** Joins: hiruji (~hiruji@user/hiruji)
[08:27:19] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[08:37:35] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 268 seconds)
[08:41:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[08:50:20] *** jackhill is now known as KM4MBG
[08:53:49] *** KM4MBG is now known as jackhill
[08:56:31] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:57:07] *** Joins: solirc (~solirc@ppp-110-168-219-132.revip5.asianet.co.th)
[09:00:58] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (Ping timeout: 265 seconds)
[09:01:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[09:01:23] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[09:02:11] *** Quits: emf_ (~emf@2620:10d:c090:400::5:538d) (Ping timeout: 264 seconds)
[09:08:41] *** Quits: rtsn (~nstr@user/rtsn) (Ping timeout: 246 seconds)
[09:09:33] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[09:17:04] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[09:17:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:17:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:17:41] *** Joins: wroathe (~wroathe@user/wroathe)
[09:21:08] *** Joins: emf (~emf@163.114.132.5)
[09:22:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:23:14] *** Quits: arahael (~arahael@202-159-171-156.tpgi.com.au) (Ping timeout: 260 seconds)
[09:23:55] <kritzefitz> sclv: it is. I hope I'll get around to leave a comment there today.
[09:25:05] *** Quits: emf (~emf@163.114.132.5) (Read error: Connection reset by peer)
[09:26:50] *** Joins: emf (~emf@2620:10d:c090:400::5:97af)
[09:29:15] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[09:30:31] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:33:17] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[09:33:32] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[09:33:41] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[09:35:39] *** Joins: arahael (~arahael@14-203-84-159.static.tpgi.com.au)
[09:39:37] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[09:40:14] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[09:42:57] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[09:50:19] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 250 seconds)
[09:56:36] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[10:07:00] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 268 seconds)
[10:09:29] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[10:13:43] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[10:13:53] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 264 seconds)
[10:15:34] *** Joins: mei3 (~mei@user/mei)
[10:18:15] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[10:21:15] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:24:22] *** Joins: crystal-lang564 (~mhusmann@2a02:560:41ce:8c00:19ee:b969:e30a:91e)
[10:25:46] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 260 seconds)
[10:26:38] *** Joins: vysn (~vysn@user/vysn)
[10:31:49] *** Quits: crystal-lang564 (~mhusmann@2a02:560:41ce:8c00:19ee:b969:e30a:91e) (Quit: Konversation terminated!)
[10:36:35] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[10:37:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:42:13] *** Joins: benin (~benin@183.82.26.68)
[10:43:13] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[10:48:02] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[10:48:22] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[10:48:23] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 250 seconds)
[10:53:21] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Quit: leaving)
[10:57:22] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:f0a8:ffae:2a2b:16fd)
[10:58:26] *** Quits: beka (~beka@104.193.170.240) (Ping timeout: 245 seconds)
[11:01:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[11:01:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[11:02:54] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[11:04:15] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:07:13] *** Quits: NemesisD (sid24071@lymington.irccloud.com) (Ping timeout: 256 seconds)
[11:07:13] *** Quits: typetetris (sid275937@tinside.irccloud.com) (Ping timeout: 256 seconds)
[11:07:13] *** Quits: truckasaurus (sid457088@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[11:07:47] *** Quits: acertain (sid470584@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[11:08:28] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[11:10:25] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[11:10:25] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[11:11:02] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[11:11:45] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:12:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:16:22] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[11:20:21] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:21:05] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 264 seconds)
[11:22:38] *** Quits: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com) (Ping timeout: 260 seconds)
[11:25:40] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[11:26:36] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[11:28:46] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[11:29:05] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[11:30:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:30:47] *** Quits: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[11:31:02] *** Joins: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511)
[11:32:05] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (Read error: Connection reset by peer)
[11:32:30] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[11:32:51] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:34:34] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:36:45] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:39:07] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[11:39:19] *** Joins: chele (~chele@user/chele)
[11:39:25] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:43:46] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[11:44:16] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[11:46:17] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[11:49:33] *** Joins: kuribas (~user@ptr-25vy0i9k3m4zzpdty0l.18120a2.ip6.access.telenet.be)
[11:49:58] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[11:50:08] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[11:50:29] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 264 seconds)
[11:51:01] *** Joins: rembo10 (~rembo10@remulis.com)
[11:51:57] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[11:54:32] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[11:56:11] *** Quits: emf (~emf@2620:10d:c090:400::5:97af) (Ping timeout: 264 seconds)
[11:57:07] *** Joins: kritzefitz_ (~kritzefit@p200300ecdf067e00d40157f023ebb7b3.dip0.t-ipconnect.de)
[11:57:31] *** kritzefitz_ is now known as Guest4433
[11:57:35] *** Quits: Guest4433 (~kritzefit@p200300ecdf067e00d40157f023ebb7b3.dip0.t-ipconnect.de) (Changing host)
[11:57:35] *** Joins: Guest4433 (~kritzefit@debian/kritzefitz)
[11:57:43] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:58:47] *** Guest4433 is now known as kritzefitz_
[12:00:22] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[12:02:39] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:04:05] *** Quits: kritzefitz_ (~kritzefit@debian/kritzefitz) (Quit: Leaving)
[12:04:13] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:04:22] *** Joins: emf (~emf@2620:10d:c090:400::5:538d)
[12:07:44] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[12:08:01] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[12:08:04] *** Joins: holden_mcgroin (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[12:08:42] *** Quits: holden_mcgroin (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Client Quit)
[12:09:02] *** Joins: holden_mcgroin (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[12:10:20] *** Quits: benin (~benin@183.82.26.68) (Ping timeout: 268 seconds)
[12:11:57] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:12:26] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[12:14:39] *** Joins: neurocyte0132889 (~neurocyte@45.131.36.189)
[12:14:39] *** Quits: neurocyte0132889 (~neurocyte@45.131.36.189) (Changing host)
[12:14:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:15:14] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Quit: ZNC 1.8.2 - https://znc.in)
[12:15:41] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[12:17:12] *** Joins: cfricke (~cfricke@user/cfricke)
[12:22:19] *** Joins: benin (~benin@106.198.86.143)
[12:23:02] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[12:26:26] *** Joins: Pickchea (~private@user/pickchea)
[12:27:37] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[12:35:37] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[12:36:37] *** Joins: max22- (~maxime@2a01cb0883359800d82aa6f5cc45a870.ipv6.abo.wanadoo.fr)
[12:36:45] *** Quits: hendi (sid489601@lymington.irccloud.com) (Ping timeout: 256 seconds)
[12:36:59] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 264 seconds)
[12:37:47] *** Joins: obviyus (sid415299@user/obviyus)
[12:38:54] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[12:39:01] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 256 seconds)
[12:40:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9068:f291:b219:72f5)
[12:40:56] *** Joins: bjs (sid190364@user/bjs)
[12:41:06] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[12:41:17] *** Joins: shidima (~shidima@46.44.183.25)
[12:42:41] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[12:44:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9068:f291:b219:72f5) (Ping timeout: 246 seconds)
[12:45:40] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:46:23] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 246 seconds)
[12:46:36] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[12:47:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:33] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** allbery_b is now known as geekosaur
[12:47:58] *** Quits: bollu (~bollu@139.59.46.74) (Quit: Ping timeout (120 seconds))
[12:48:13] *** Joins: bollu (~bollu@139.59.46.74)
[12:49:03] *** Quits: np (~nerdypepp@user/nerdypepper) (Quit: bye)
[12:50:10] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[12:51:18] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[12:53:37] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[12:53:43] *** Joins: acertain_ (sid470584@id-470584.hampstead.irccloud.com)
[12:54:08] *** Quits: obviyus (sid415299@user/obviyus) (Read error: Connection reset by peer)
[12:54:08] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Read error: Connection reset by peer)
[12:54:53] *** Joins: obviyus (sid415299@user/obviyus)
[12:54:54] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[12:56:29] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:56:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:57:55] *** Joins: merijn (~merijn@195.114.232.94)
[12:59:14] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[13:00:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[13:01:25] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:01:45] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[13:02:02] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[13:04:53] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[13:08:07] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[13:09:07] <jollygood2> hi. does anyone have experience with inline-c? it seems very tempting to use it over regular haskell ffi, when just having to call a couple of C functions from a C library, rather than attempting to make complete haskell bindings
[13:09:37] *** Joins: kayprish (~kayprish@46.240.130.158)
[13:11:30] <kritzefitz> What do you mean by “complete haskell bindings”? If you just want to call a few C function you can just import those and call them. I'm not sure how much easier inline-c could make it.
[13:12:13] <kritzefitz> (but then again, I never used inline-c. Maybe it's easier on type conversions?)
[13:12:21] <jollygood2> kritzefitz, you can write C code directly in haskell source. no need to bind functions, or types, you just write C. https://hackage.haskell.org/package/inline-c
[13:14:14] <kritzefitz> From first glance it does look like you need type conversions, because inline-c still returns foreign types.
[13:14:33] <kritzefitz> or you just work with the foreign types directly, but you can also do that using regular FFI.
[13:15:07] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:15:21] <jollygood2> I tried it just now, and unless I'm wrong there is a major drawback, you can't run this code in ghci
[13:18:08] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[13:18:14] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[13:19:06] *** Quits: skn2 (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (Quit: ZNC 1.8.2 - https://znc.in)
[13:21:39] <jollygood2> no it seems that you can. https://hackage.haskell.org/package/inline-c-0.9.1.5#ghci
[13:21:55] <dminuoso> I wouldn't want to write C code directly in haskell.
[13:22:04] <dminuoso> You can simply call C functions, and write low level Haskell code.
[13:22:32] <jollygood2> kritzefitz, you can do that using regular FFI as well, but if I have to call 8 C functions, but 7 of them are just used to feed the result to other C functions, and I am only interested in the result of the 8th function call, I only have to declare one type, and just do everything else in C
[13:23:45] <kritzefitz> I guess in that case I would just write a small C file with your wrapper function and only import that into haskell.
[13:23:47] <jollygood2> a lot less work than having to declare all 8 functions, and C structs used by those functions
[13:24:27] <kritzefitz> I'm not sure how well that works with GHCi. But I guess as long as you start ghci via cabal or stack it should work fine.
[13:24:45] <jollygood2> kritzefitz, yeah that works too. but with the disadvantage that you have one additional step, recompiling C code
[13:25:19] <kritzefitz> Cabal can do that for you.
[13:25:44] <jollygood2> do you have to restart ghci when you recompile?
[13:26:33] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 250 seconds)
[13:26:48] <kritzefitz> Not sure, but I think so.
[13:26:57] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[13:30:49] <jollygood2> I believeyou don't with inlin-c, but I can't get their math example to work at all, even after adding suggested ghci options. During interactive linking, GHCi couldn't find the following symbol:   inline_c_Main_0_2f88ee80765ab54834856cc58acd770f9760d5e4
[13:31:25] <jollygood2> googling that error isn't helping
[13:33:18] <kritzefitz> Personally I wouldn't care about restarting GHCi enough to use something as complicaterd as inline-c to avoid it, but of course YMMV.
[13:34:05] *** Joins: mark__ (~a@p200300ef973db1dc4086f0a6a24fc4dd.dip0.t-ipconnect.de)
[13:35:03] <jollygood2> it isn't working when compiling either, same error
[13:35:10] *** Joins: __monty__ (~toonn@user/toonn)
[13:36:14] <jollygood2> perhaps issue on windows only? https://github.com/fpco/inline-c/issues/50
[13:37:08] *** Quits: holden_mcgroin (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 246 seconds)
[13:38:47] *** Joins: benin5 (~benin@106.198.94.217)
[13:39:45] *** Quits: benin (~benin@106.198.86.143) (Ping timeout: 268 seconds)
[13:39:46] *** benin5 is now known as benin
[13:40:13] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[13:41:02] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:41:21] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[13:45:30] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[13:50:56] *** Joins: Topsi (~Tobias@dyndsl-091-249-082-100.ewe-ip-backbone.de)
[13:58:29] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[13:59:08] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Read error: Connection reset by peer)
[14:00:00] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[14:02:31] *** Andrew_ is now known as AndrewYu
[14:04:25] *** Quits: benin (~benin@106.198.94.217) (Ping timeout: 268 seconds)
[14:06:27] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:09:51] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[14:11:57] *** Quits: kuribas (~user@ptr-25vy0i9k3m4zzpdty0l.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[14:14:09] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Read error: Connection reset by peer)
[14:14:18] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[14:20:25] *** Joins: off^ (~off@h50.174.139.63.static.ip.windstream.net)
[14:21:14] *** Quits: kayprish (~kayprish@46.240.130.158) (Ping timeout: 246 seconds)
[14:22:26] *** Joins: mmhat (~mmh@55d4bd26.access.ecotel.net)
[14:23:02] *** Joins: drdo (~drdo@roach0.drdo.eu)
[14:29:01] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (Read error: Connection reset by peer)
[14:29:22] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[14:30:00] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[14:30:19] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[14:30:51] *** Joins: alx741 (~alx741@186.178.109.114)
[14:33:55] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:42:42] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[14:43:59] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Quit: leaving)
[14:46:31] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[14:46:42] *** Joins: benin (~benin@106.198.89.104)
[14:46:56] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[14:47:02] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[14:56:56] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 246 seconds)
[14:59:02] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[15:01:53] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[15:02:01] *** Joins: DNH (~DNH@8.44.0.72)
[15:04:29] *** Joins: Pickchea (~private@user/pickchea)
[15:09:22] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c721b73914e45eebfbace128.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:09:45] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c721b739c4928bd7ecc09c55.dip0.t-ipconnect.de)
[15:10:27] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:12:33] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[15:16:39] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[15:18:23] *** Quits: merijn (~merijn@195.114.232.94) (Ping timeout: 264 seconds)
[15:20:07] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:9c57:4715:1ac5:a700)
[15:20:41] *** Joins: robosexual (~spaceoyst@88.85.216.62)
[15:20:54] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:21:31] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[15:26:11] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:27:42] *** Joins: notzmv (~zmv@user/notzmv)
[15:32:21] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:36:09] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[15:36:09] *** bontaq` is now known as bontaq
[15:37:33] *** Joins: merijn (~merijn@195.114.232.94)
[15:40:08] *** Quits: benin (~benin@106.198.89.104) (Quit: Ping timeout (120 seconds))
[15:40:27] *** Joins: benin (~benin@106.198.89.104)
[15:42:03] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 256 seconds)
[15:42:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[15:46:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Ping timeout: 250 seconds)
[15:47:20] *** Quits: max22- (~maxime@2a01cb0883359800d82aa6f5cc45a870.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[15:47:24] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[15:47:54] *** Joins: yaroot8 (~yaroot@47.70.30.125.dy.iij4u.or.jp)
[15:48:52] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:49:55] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:50:29] *** Quits: yaroot (~yaroot@6.3.30.125.dy.iij4u.or.jp) (Ping timeout: 268 seconds)
[15:50:30] *** yaroot8 is now known as yaroot
[15:51:05] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 264 seconds)
[15:53:59] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 246 seconds)
[15:56:28] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[16:00:08] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:04:32] *** Quits: benin (~benin@106.198.89.104) (Read error: Connection reset by peer)
[16:06:35] *** Joins: benin (~benin@183.82.178.244)
[16:10:16] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:12:06] *** Joins: Pickchea (~private@user/pickchea)
[16:13:32] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[16:14:52] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[16:18:41] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[16:19:40] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:22:14] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 260 seconds)
[16:26:49] *** Quits: merijn (~merijn@195.114.232.94) (Ping timeout: 256 seconds)
[16:27:38] <Profpatsch> Looks to me like aeson ToJSON instances define their encoding at deriving-time
[16:27:56] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c721b739c4928bd7ecc09c55.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[16:27:59] <dminuoso> Profpatsch: Nope.
[16:28:00] <Profpatsch> so if I want a different sum-representation e.g. for Either, I’d have to call gToEncoding myself as a fucniton
[16:28:04] <dminuoso> There is no such thing as "deriving time"
[16:28:08] <Profpatsch> dminuoso: huh, then I read it incorrectly
[16:28:23] <dminuoso> Profpatsch: Well its *sort* of correct.
[16:28:31] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 256 seconds)
[16:28:42] <dminuoso> Also note, aeson provides TH helpers which you should probably use if you care about performance
[16:28:47] <Profpatsch> dminuoso: But the options are passed by the generic instance in the ToJSON function no?
[16:28:58] <dminuoso> Relying on GHC simplifier to get rid of the generics code is not a good idea
[16:29:00] <Profpatsch> dminuoso: That’s up to benchmarking
[16:29:14] <dminuoso> Profpatsch: Honestly if you know this to be a potential hotspot, I wouldnt bother
[16:29:35] <Profpatsch> dminuoso: but basically what I’m asking is has e.g. `ToJSON (Either e a)` the SumEncoding baked in?
[16:29:39] <dminuoso> The simplifier is a massively complex beast where slight changes (say a GHC update, or even your own code changes) could alter how much GHC can get rid of it.
[16:29:43] <Profpatsch> From what I has it does
[16:30:17] <Profpatsch> dminuoso: there is really no performance requirement here
[16:30:31] <Profpatsch> (also: compile time or run time performance?
[16:30:36] <dminuoso> https://hackage.haskell.org/package/aeson-2.0.1.0/docs/src/Data.Aeson.Types.ToJSON.html#line-734
[16:30:39] <dminuoso> Both.
[16:31:06] <dminuoso> Generics will cost a lot of extra memory and CPU in the simplifier, and if it cant get rid of the generics representation you will suffer from very poor runtime performance
[16:31:30] <dminuoso> Thing is, aeson comes with TH helpers which are roughly as easy to use, but give predictable and controllable performance
[16:31:47] <Profpatsch> I don’t like aeson very much
[16:32:00] *** Quits: off^ (~off@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[16:32:15] <Profpatsch> The library documentation is badly structured and anytime I want to do something non-trivial I have to spend 30 minutes swapping it into my head again
[16:32:38] <dminuoso> It's one of those libraries that in reality is hard to avoid
[16:32:52] <dminuoso> There's also waargonaut but oh well
[16:33:01] <dminuoso> At least aeson does a lot of things right
[16:33:20] <dminuoso> Like, it lets you actually work with JSON that has duplicate keys, and it gives you access to Numericals in the only proper form
[16:33:44] <dminuoso> That is, Aeson simply gives you a Scientific and lets you interpret it, since JSON has no semantics on numbers
[16:34:10] <dminuoso> The interface is quirky at times, and its very typeclassy, but with some basic skill you can even avoid that
[16:34:37] <Profpatsch> This tells me that SumEncoding is baked in: https://hackage.haskell.org/package/aeson-2.0.1.0/docs/src/Data.Aeson.Types.ToJSON.html#toJSON
[16:34:39] <dminuoso> Not too many other JSON libraries will actually let you work with {"f":1, "f":2}
[16:35:00] <Profpatsch> dminuoso: I don’t think that’s useful in many cases, but that’s because json is underspecified
[16:35:20] <dminuoso> Its not useful until you need it.
[16:35:29] <dminuoso> I like libraries that are morally wrong and take shortcuts
[16:35:32] *** Quits: ddb (~ddb@ipv6two.tilde.club) (Remote host closed the connection)
[16:35:36] <dminuoso> * dont like
[16:35:48] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[16:36:17] <Profpatsch> I like libraries that provide towers of abstraction and simplification with opt-out mechanisms, but aeson just has it all smushed together in one unstructured mess
[16:36:41] *** Joins: mouseghost (~draco@user/mouseghost)
[16:36:49] <Profpatsch> e.g. I think ToJSON and FromJSON should be separated out into a different package, building on a package that just provides primitive composable parsers and encoders
[16:37:04] <Profpatsch> I get that it’s a case of grown 
[16:37:09] <Profpatsch> *organic growth
[16:37:24] <dminuoso> Why should they be separated?
[16:37:38] <dminuoso> And aeson does give you composable parsers and utilities
[16:38:04] <dminuoso> withObject, (.:) and plenty other things lets you simply write code without generics.
[16:38:12] <dminuoso> Nothing ever forces or nudges you to using generics
[16:38:33] <dminuoso> Heck, you can even avoid typeclasses themselves, that bit is just not well documented
[16:38:51] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[16:39:20] *** Joins: stefan-_ (~cri@42dots.de)
[16:39:41] <Profpatsch> It’s not a very good user experience
[16:39:54] <Profpatsch> But I’m not here to argue about aeson tbh
[16:40:12] <Profpatsch> I just wanted to know whether the instances embod the SumEncoding
[16:40:20] <dminuoso> Which sumencoding?
[16:40:30] <Profpatsch> The one from aeson
[16:40:31] <dminuoso> There's 4 different ones.
[16:40:35] <dminuoso> https://hackage.haskell.org/package/aeson-2.0.1.0/docs/Data-Aeson.html#t:SumEncoding
[16:40:52] <dminuoso> Profpatsch: Also, you can simply control it yourself
[16:41:04] <Profpatsch> how?
[16:41:17] <dminuoso> Either by writing out the generic instance manually
[16:41:21] <dminuoso> Or my personal favourite by using https://hackage.haskell.org/package/deriving-aeson
[16:41:28] <Profpatsch> Can I take a (Either Char Int) and make it use e.g. UntaggedValue instead of ObjectWithSingleField?
[16:41:38] <dminuoso> It's a minimalistic library that adds a touch of type helpers to do this inside the deriving clause
[16:41:48] <dminuoso> Profpatsch: Yes.
[16:42:04] <maerwald> Profpatsch: maybe you like https://hackage.haskell.org/package/waargonaut
[16:42:33] <dminuoso> maerwald: Every time I wanted to use waargonaut I had a stopper, since I was relying heavily on aeson instances already. :(
[16:42:40] <dminuoso> Third party libraries etc
[16:42:43] *** Joins: jurjen (~jurjen@83.232.63.97)
[16:42:52] <maerwald> I tried it only once and found the API so confusing that I stopped
[16:43:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[16:43:18] <Profpatsch> dminuoso: Ah, it uses a type-level list wrapper
[16:43:29] <dminuoso> Profpatsch: Yeah, but you can also do it in the value level by writing out the instance
[16:43:29] *** Joins: cfricke (~cfricke@user/cfricke)
[16:43:32] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:43:32] <Profpatsch> dminuoso: I assume you can use coerce as well?
[16:43:39] <dminuoso> Only downside is that you dont have guaranteed coherence between toJSON and toEncoding
[16:43:42] <Profpatsch> For deriving-aeson that is
[16:43:47] <dminuoso> What do you mean by coerce?
[16:44:01] <dminuoso> Profpatsch: Only problem is that you cant dictate the behavior transitively in generics.
[16:44:11] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c721b739c4928bd7ecc09c55.dip0.t-ipconnect.de)
[16:44:14] <dminuoso> That is, you cant say "use this for all transitive sums"
[16:44:55] <dminuoso> Unless you turn it into a SOP representation
[16:44:58] <dminuoso> Then you can
[16:45:08] <dminuoso> If that's an option for you
[16:45:20] <dminuoso> (because with SOP you dont have transitively sums anymore, they're at the outside)
[16:45:23] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[16:45:32] <Profpatsch> So e.g. (coerce (Left Map.singleton ("foo", 'c'))) :: Either () (CustomJson '[CamelToSnake] (Map Text Char))
[16:46:05] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[16:46:11] <dminuoso> Mmm, did you mix up Left and Right?
[16:46:12] <Profpatsch> s/Left Map/Left $ Map/
[16:46:15] <Profpatsch> Probably
[16:46:18] <Profpatsch> yeah righ
[16:46:20] <Profpatsch> Right
[16:46:26] <Profpatsch> But I guess that would work?
[16:46:29] <dminuoso> Sure
[16:46:39] <Profpatsch> That’s pretty cool hm
[16:46:50] <Profpatsch> We seem to be using it already
[16:46:52] <dminuoso> Id probably rather write some little helper
[16:47:10] <Profpatsch> Problem is that it doesn’t work recursively, yes
[16:47:31] <dminuoso> something like `encodeVia :: (ToJSON b, Coercible a b) => Proxy b -> a -> Value`
[16:47:36] <Profpatsch> Ah, that’s why genericSOP
[16:47:40] <dminuoso> Yup
[16:47:45] <Profpatsch> but that’s a really high conceptual overhead
[16:48:00] <dminuoso> Me personally, Id just stop worrying about encoding things into aeson
[16:48:03] <dminuoso> and just write out the instances
[16:48:13] <dminuoso> It's not much effort if you do it two or three times
[16:48:13] <Profpatsch> tbh I tend towards having a small library that provides composable aeson parser functions
[16:48:33] <Profpatsch> And the thing calling the encoder will inject the options
[16:48:46] <dminuoso> Profpatsch: Alternatively, you can simply write generics code yourself.
[16:48:49] <dminuoso> It's not hard
[16:49:04] <dminuoso> And then parametrize your generic encoder with some sum encoder
[16:49:05] <DemiMarieObenour> Anyone else had fun breaking GHC?
[16:49:12] <Profpatsch> newtype Enc a = Enc (Options -> a -> Encoding)
[16:49:24] <Profpatsch> And then implement Contravariant, Divisible etc
[16:49:35] <geekosaur> breaking ghc isn't so hard given unsafeCoerce :þ
[16:50:16] <dminuoso> Profpatsch: Every time I just tried to be tricky, I realized I was just catering to a mechanism that wasnt meant for specialization
[16:50:18] <dminuoso> THat is
[16:50:18] <Profpatsch> dminuoso: I will frame “you can simply write generics code myself” and hang it over my house altar :P
[16:50:35] <dminuoso> This generics stuff isnt meant to be customized, its designed to just take the weight off 90% your instances
[16:50:50] <dminuoso> Writing out manual instances for the rest 10% is worth it
[16:51:12] <dminuoso> Profpatsch: Writing generics is not hard, it's just confusing at the beginning if you dont understand all the letters and names.
[16:51:18] <dminuoso> But really, it's just a simple tree that you work on
[16:51:59] <Profpatsch> It’s not a particularly fun or debuggable experience 
[16:52:07] <Profpatsch> maybe with generics-sop
[16:52:17] <dminuoso> honestly, with generics-sop things get worse
[16:52:39] <dminuoso> because now you cant even use your original data structure as an indication of the shape you're producing
[16:53:08] <dminuoso> The thing with json encoding is, they should ideally be disconnected/separate from your implementation
[16:53:18] <dminuoso> What you're doing is trying *very* hard to keep them coupled
[16:53:28] <dminuoso> And with generics-sop you're breaking that
[16:53:34] <dminuoso> In weird ways
[16:54:12] <Profpatsch> I’d rather write an Encoder at every place I have to encode data tbh
[16:54:17] <dminuoso> Because to some degree you're doing tight coupling (since the JSON representation is still a direct reflection of your haskell data type), except it's not even in the same shape anymore
[16:54:17] <Profpatsch> instead of relying on ToJSON
[16:54:38] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[16:54:39] <dminuoso> Profpatsch: I do this 90% generics, 10% bespoke instances - and this works very well
[16:55:01] <dminuoso> Saves me from writing useless boilerplate, and yet I get full control over when I want something different than what generics would do
[16:55:02] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[16:55:09] *** Quits: shidima (~shidima@46.44.183.25) (Ping timeout: 256 seconds)
[16:55:09] <dminuoso> (or if I start changing the data without changing the json representation)
[16:55:46] <dminuoso> If you also have FromJSON instances, the benefit is that you dont even need to test the 90% for whether toJSON/fromJSON rountrips
[16:55:54] <dminuoso> Only need it for the remaining 105
[16:55:56] <dminuoso> Only need it for the remaining 10%
[16:58:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:00:22] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[17:01:23] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[17:01:32] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[17:01:57] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[17:02:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[17:10:02] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 240 seconds)
[17:10:02] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[17:10:02] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (Ping timeout: 240 seconds)
[17:10:32] *** Quits: whez (sid470288@lymington.irccloud.com) (Ping timeout: 240 seconds)
[17:10:50] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[17:10:57] *** Quits: obviyus (sid415299@user/obviyus) (Read error: Connection reset by peer)
[17:10:57] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Read error: Connection reset by peer)
[17:10:57] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Read error: Connection reset by peer)
[17:10:59] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Read error: Connection reset by peer)
[17:10:59] *** Quits: acertain_ (sid470584@id-470584.hampstead.irccloud.com) (Read error: Connection reset by peer)
[17:11:01] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: gmc (sid58314@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: integral (sid296274@user/integral) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: vito (sid1962@user/vito) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: the_finn (uid526334@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: awpr (uid446117@lymington.irccloud.com) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: pjlsergeant (sid143467@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: taktoa[c] (sid282096@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 256 seconds)
[17:11:02] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 250 seconds)
[17:11:02] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[17:11:02] *** Quits: saolsen (sid26430@lymington.irccloud.com) (Ping timeout: 240 seconds)
[17:11:02] *** Quits: _0x47 (sid508683@tinside.irccloud.com) (Ping timeout: 240 seconds)
[17:11:11] *** Quits: grfn (sid449115@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:11] *** Quits: parseval (sid239098@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:11] *** Quits: mrianbloom (sid350277@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:11] *** Quits: T_S_ (sid501726@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:11:11] *** Quits: b20n (sid115913@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:11:11] *** Quits: astra` (sid289983@user/amish) (Ping timeout: 264 seconds)
[17:11:11] *** Quits: ehamberg (sid18208@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[17:11:11] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:11:11] *** Quits: iphy (sid67735@lymington.irccloud.com) (Ping timeout: 264 seconds)
[17:11:16] *** Quits: ephemient (uid407513@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:11:16] *** Quits: stevenxl (sid133530@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[17:11:16] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[17:11:16] *** Quits: philpax_ (sid516926@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:11:16] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[17:11:17] *** Quits: aristid (sid1599@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[17:11:18] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 260 seconds)
[17:11:18] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[17:11:18] *** Quits: amir (sid22336@user/amir) (Ping timeout: 260 seconds)
[17:11:32] *** Quits: etrepum (sid763@uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[17:11:32] *** Quits: edmundnoble (sid229620@helmsley.irccloud.com) (Ping timeout: 240 seconds)
[17:11:35] *** Quits: caasih (sid13241@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:11:35] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 256 seconds)
[17:11:35] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 256 seconds)
[17:11:35] *** Quits: tnks (sid412124@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[17:11:35] *** Quits: teehemkay (sid14792@lymington.irccloud.com) (Ping timeout: 256 seconds)
[17:11:35] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 256 seconds)
[17:11:35] *** Quits: jmct_ (sid160793@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:11:35] *** Quits: sa1_ (sid7690@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:11:35] *** Quits: gaze___ (sid387101@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[17:11:46] *** Quits: kaychaks__ (sid236345@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[17:11:47] *** Quits: lightandlight (sid135476@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:47] *** Quits: kaizen (sid501599@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:47] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:47] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:47] *** Quits: ysh (sid6017@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:47] *** Quits: dmj` (sid72307@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[17:11:47] *** Quits: agander_m (sid407952@tinside.irccloud.com) (Ping timeout: 264 seconds)
[17:11:53] *** Quits: alinab (sid468903@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[17:11:53] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[17:11:53] *** Quits: Adeon (sid418992@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:11:53] *** Quits: SanchayanMaity (sid478177@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[17:11:53] *** Quits: enemeth79 (sid309041@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:11:53] *** Quits: gonz____ (sid304396@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:11:53] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:12:09] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:12:09] *** Quits: angerman (sid209936@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:12:09] *** Quits: rune (sid21167@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:12:09] *** Quits: aria (sid380617@lymington.irccloud.com) (Ping timeout: 256 seconds)
[17:12:09] *** Quits: supersven (sid501114@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:12:14] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[17:12:14] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 260 seconds)
[17:12:14] *** Quits: christiaanb (sid84827@lymington.irccloud.com) (Ping timeout: 260 seconds)
[17:12:20] *** Quits: tapas (sid467876@ilkley.irccloud.com) (Ping timeout: 250 seconds)
[17:12:23] *** Quits: dsal (sid13060@lymington.irccloud.com) (Ping timeout: 264 seconds)
[17:12:23] *** Quits: SethTisue__ (sid14912@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[17:12:23] *** Quits: gregberns__ (sid315709@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:12:23] *** Quits: cbarrett (sid192934@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:12:23] *** Quits: SrPx (sid108780@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:12:23] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 264 seconds)
[17:12:23] *** Quits: joel135 (sid136450@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[17:12:28] *** Joins: obviyus (sid415299@user/obviyus)
[17:12:29] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[17:12:30] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 268 seconds)
[17:12:30] *** Quits: hamishmack (sid389057@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[17:12:30] *** Quits: bbhoss (sid18216@tinside.irccloud.com) (Ping timeout: 268 seconds)
[17:12:32] *** Joins: cln_ (sid336875@ilkley.irccloud.com)
[17:12:32] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 240 seconds)
[17:12:33] *** Joins: edwardk_ (sid47016@haskell/developer/edwardk)
[17:12:35] *** Joins: vito (sid1962@user/vito)
[17:12:35] *** Joins: rune (sid21167@ilkley.irccloud.com)
[17:12:36] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[17:12:37] *** Joins: bw (sid2730@user/betawaffle)
[17:12:41] *** Joins: jmct_ (sid160793@tinside.irccloud.com)
[17:12:42] *** Joins: PotatoGim (sid99505@lymington.irccloud.com)
[17:12:42] *** Quits: degraafk (sid71464@lymington.irccloud.com) (Ping timeout: 260 seconds)
[17:12:42] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 260 seconds)
[17:12:42] *** Quits: scav (sid309693@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[17:12:43] *** Quits: dpratt_ (sid193493@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: nrr_ (sid20938@lymington.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: hongminhee (sid295@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: Firedancer (sid336191@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[17:12:44] *** edwardk_ is now known as edwardk
[17:12:44] *** Joins: acertain_ (sid470584@id-470584.hampstead.irccloud.com)
[17:12:47] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[17:12:47] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[17:12:50] *** Joins: gonz____ (sid304396@lymington.irccloud.com)
[17:12:51] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[17:12:53] *** Joins: integral (sid296274@user/integral)
[17:12:53] *** Joins: dmj` (sid72307@hampstead.irccloud.com)
[17:12:53] *** Joins: whez (sid470288@lymington.irccloud.com)
[17:12:59] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[17:12:59] *** Quits: davetapley (sid666@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:12:59] *** Quits: cln (sid336875@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[17:12:59] *** Quits: bradparker (sid262931@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:12:59] *** cln_ is now known as cln
[17:13:03] *** Joins: jackdk (sid373013@cssa/jackdk)
[17:13:04] *** Joins: hubvu (sid495858@user/hubvu)
[17:13:05] *** Joins: elvishjerricco (sid237756@2a03:5180:f:1::3:a0bc)
[17:13:07] *** Joins: kristjansson_ (sid126207@2a03:5180:f::1:ecff)
[17:13:07] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Ping timeout: 268 seconds)
[17:13:07] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 268 seconds)
[17:13:07] *** Quits: Boarders (sid425905@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:13:07] *** Quits: AndreasK_ (sid320732@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[17:13:08] *** Joins: ephemient (uid407513@lymington.irccloud.com)
[17:13:09] *** Joins: nrr__ (sid20938@2a03:5180:f:2::51ca)
[17:13:09] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[17:13:11] *** Joins: mcfilib (sid302703@user/mcfilib)
[17:13:11] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[17:13:12] *** Joins: AndreasK__ (sid320732@uxbridge.irccloud.com)
[17:13:12] *** Joins: epolanski (uid312403@2a03:5180:f:1::4:c453)
[17:13:12] *** Joins: SethTisue__ (sid14912@2a03:5180:f:3::3a40)
[17:13:14] *** Joins: bjs (sid190364@2a03:5180:f:1::2:e79c)
[17:13:14] *** Joins: dsal (sid13060@lymington.irccloud.com)
[17:13:14] *** Joins: teehemkay (sid14792@2a03:5180:f:2::39c8)
[17:13:15] *** Joins: Pent (sid313808@2a03:5180:f:2::4:c9d0)
[17:13:16] *** Joins: alinab (sid468903@id-468903.helmsley.irccloud.com)
[17:13:17] *** Joins: T_S_ (sid501726@uxbridge.irccloud.com)
[17:13:17] *** Joins: gaze___ (sid387101@2a03:5180:f:1::5:e81d)
[17:13:19] *** Joins: agander_m (sid407952@2a03:5180:f::6:3990)
[17:13:19] *** Joins: aristid (sid1599@2a03:5180:f:5::63f)
[17:13:19] *** Joins: christiaanb (sid84827@lymington.irccloud.com)
[17:13:20] *** Joins: meinside (uid24933@2a03:5180:f:1::6165)
[17:13:20] *** Joins: supersven (sid501114@2a03:5180:f:3::7:a57a)
[17:13:21] *** Joins: gregberns__ (sid315709@2a03:5180:f:1::4:d13d)
[17:13:22] *** Joins: gmc (sid58314@ilkley.irccloud.com)
[17:13:23] *** Joins: rtpg (sid443069@2a03:5180:f:3::6:c2bd)
[17:13:23] *** Joins: hongminhee (sid295@tinside.irccloud.com)
[17:13:24] *** Joins: hamishmack (sid389057@2a03:5180:f:4::5:efc1)
[17:13:24] *** Joins: jonrh (sid5185@2a03:5180:f:3::1441)
[17:13:24] *** Quits: bjs (sid190364@2a03:5180:f:1::2:e79c) (Changing host)
[17:13:24] *** Joins: bjs (sid190364@user/bjs)
[17:13:24] *** Joins: typetetris (sid275937@2a03:5180:f::4:35e1)
[17:13:25] *** Joins: truckasaurus (sid457088@2a03:5180:f:1::6:f980)
[17:13:26] *** Joins: davetapley (sid666@uxbridge.irccloud.com)
[17:13:26] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[17:13:27] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[17:13:28] *** Joins: tnks (sid412124@2a03:5180:f:1::6:49dc)
[17:13:28] *** Joins: Adeon (sid418992@2a03:5180:f:2::6:64b0)
[17:13:28] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[17:13:28] *** Joins: ysh (sid6017@2a03:5180:f:3::1781)
[17:13:29] *** Joins: Boarders_ (sid425905@2a03:5180:f:2::6:7fb1)
[17:13:29] *** Joins: sa1_ (sid7690@2a03:5180:f:3::1e0a)
[17:13:29] *** Joins: etrepum (sid763@2a03:5180:f:5::2fb)
[17:13:30] *** Joins: edmundnoble (sid229620@id-229620.helmsley.irccloud.com)
[17:13:30] *** Joins: tapas (sid467876@ilkley.irccloud.com)
[17:13:30] *** Joins: _0x47 (sid508683@2a03:5180:f::7:c30b)
[17:13:31] *** Joins: mustafa (sid502723@2a03:5180:f:4::7:abc3)
[17:13:32] *** Joins: kaychaks__ (sid236345@2a03:5180:f:1::3:9b39)
[17:13:33] *** Joins: angerman (sid209936@2a03:5180:f:3::3:3410)
[17:13:33] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[17:13:33] *** Joins: b20n (sid115913@2a03:5180:f:5::1:c4c9)
[17:13:33] *** Joins: enemeth79 (sid309041@2a03:5180:f:2::4:b731)
[17:13:35] *** Joins: ehamberg (sid18208@2a03:5180:f:4::4720)
[17:13:38] *** Joins: bbhoss (sid18216@2a03:5180:f::4728)
[17:13:38] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[17:13:40] *** Joins: aria (sid380617@2a03:5180:f:2::5:cec9)
[17:13:40] *** Joins: awpr (uid446117@2a03:5180:f:2::6:cea5)
[17:13:41] *** Joins: philpax_ (sid516926@2a03:5180:f:2::7:e33e)
[17:13:42] *** Joins: scav (sid309693@helmsley.irccloud.com)
[17:13:42] *** Joins: stevenxl (sid133530@2a03:5180:f:5::2:99a)
[17:13:44] *** Joins: the_finn (uid526334@id-526334.hampstead.irccloud.com)
[17:13:48] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[17:13:54] *** Joins: astra` (sid289983@hampstead.irccloud.com)
[17:13:55] *** Joins: Firedancer (sid336191@hampstead.irccloud.com)
[17:13:56] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[17:13:56] *** Joins: SanchayanMaity (sid478177@hampstead.irccloud.com)
[17:13:57] *** Joins: aarchi (sid486183@2a03:5180:f:5::7:6b27)
[17:13:58] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[17:13:59] *** Quits: mustafa (sid502723@2a03:5180:f:4::7:abc3) (Changing host)
[17:13:59] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[17:13:59] *** Joins: joel135 (sid136450@hampstead.irccloud.com)
[17:14:01] *** Joins: cbarrett (sid192934@2a03:5180:f:1::2:f1a6)
[17:14:03] <ddb>  I'm having some trouble installing djinn, does anyone have experience with haskell on fedora?
[17:14:05] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[17:14:05] *** Joins: tritlo (sid58727@id-58727.hampstead.irccloud.com)
[17:14:06] *** Joins: saolsen (sid26430@id-26430.lymington.irccloud.com)
[17:14:07] *** Joins: kaizen (sid501599@helmsley.irccloud.com)
[17:14:08] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[17:14:10] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[17:14:10] *** Joins: iphy (sid67735@lymington.irccloud.com)
[17:14:13] <ddb> here's the error I'm getting: https://ttm.sh/eKu.txt
[17:14:17] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[17:14:18] *** Joins: hook54321 (sid149355@user/hook54321)
[17:14:19] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[17:14:20] *** Joins: grfn (sid449115@helmsley.irccloud.com)
[17:14:20] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[17:14:20] *** Joins: lightandlight (sid135476@id-135476.helmsley.irccloud.com)
[17:14:22] *** Joins: sa (sid1055@tinside.irccloud.com)
[17:14:25] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[17:14:26] *** Joins: idnar (sid12240@id-12240.lymington.irccloud.com)
[17:14:26] *** Quits: astra` (sid289983@hampstead.irccloud.com) (Changing host)
[17:14:26] *** Joins: astra` (sid289983@user/amish)
[17:14:27] *** Joins: amir (sid22336@id-22336.hampstead.irccloud.com)
[17:14:27] *** Joins: sclv (sid39734@id-39734.lymington.irccloud.com)
[17:14:28] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[17:14:37] <geekosaur> right, nobody has updated it in particular for the addition of <> as infix mappend
[17:14:50] <geekosaur> you'd have to qualify those two uses of <>
[17:14:54] *** Quits: tritlo (sid58727@id-58727.hampstead.irccloud.com) (Changing host)
[17:14:54] *** Joins: tritlo (sid58727@user/tritlo)
[17:15:06] *** Quits: sclv (sid39734@id-39734.lymington.irccloud.com) (Changing host)
[17:15:06] *** Joins: sclv (sid39734@haskell/developer/sclv)
[17:15:08] <ddb> ok, so my real goal is to install lambdabot
[17:15:10] *** Quits: idnar (sid12240@id-12240.lymington.irccloud.com) (Changing host)
[17:15:10] *** Joins: idnar (sid12240@debian/mithrandi)
[17:15:10] *** Quits: amir (sid22336@id-22336.hampstead.irccloud.com) (Changing host)
[17:15:10] *** Joins: amir (sid22336@user/amir)
[17:15:14] <geekosaur> (I just tried to install it here)
[17:15:47] <ddb> > product [1..5]
[17:15:49] <lambdabot>  120
[17:16:25] <ddb> I'm trying to follow the instructions here: https://github.com/lambdabot/lambdabot/tree/master/lambdabot
[17:16:42] <geekosaur> int-e, do you have any wisdom about installing lambdabot on modern ghc?
[17:17:06] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[17:17:15] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Ping timeout: 256 seconds)
[17:17:48] <int-e> is 8.10.7 still modern
[17:18:19] <geekosaur> still a lot of people using it since 9.0.1 and 9.2.1 are still not supported by most of the ecosystem
[17:18:43] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[17:18:56] <geekosaur> and in any case the error they're getting is from the addition of infix mappend conflicting with prettyprinting
[17:19:10] <ddb> my local version is 8.10.5, so that seems like a good place to start
[17:19:11] <int-e> oh those instructions, that `install` predates new-install, so I'd mentally substitute v1-install.
[17:19:29] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[17:19:33] *** Joins: cosimone (~user@93-44-184-239.ip98.fastwebnet.it)
[17:19:45] <ddb> hah I tried v2-install and new-install, didn't know about v1-install
[17:19:57] <ddb> same error, however
[17:20:25] <ddb> cabal-install version 3.6.2.0
[17:21:26] <int-e> let me see how far it gets for me
[17:21:28] <ddb> I am also attempting the install as an unpriviledged user, although that does not seem to be the problem.
[17:22:33] <maerwald> 9.0.1 and 9.2.1 both have serious bugs, but I think we'll get 9.0.2
[17:23:26] <int-e> Oh it's really `djinn` that fails? Let's see. It seems I patched it: `cabal unpack djinn`, then insert an `import Prelude hiding ((<>))` in src/HTypes.hs, and then cabal v1-install from its source directory.
[17:23:52] <int-e> @djinn a -> b -> a
[17:23:52] <lambdabot> f a _ = a
[17:24:16] <int-e> that's what `djinn` (an executable) is needed for; the rest of lambdabot doesn't use it.
[17:24:41] <ddb> well if it's working here, I'd like to keep it if possible
[17:25:17] <ddb> if I run lambdabot and try commands I also get errors like
[17:25:21] <ddb> lambdabot> > product [1..5]
[17:25:22] <ddb> Plugin `eval' failed with: mueval: readCreateProcessWithExitCode: runInteractiveProcess: exec: does not exist (No such file or directory)
[17:26:02] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:3471:ef4b:ebc8:3b49) (Ping timeout: 246 seconds)
[17:26:06] <int-e> right, that probably means that *mumble* ~/.cabal/bin is not in your PATH
[17:26:11] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[17:26:35] <geekosaur> or you v2-installed mueval which might break things in other ways
[17:26:43] <ddb> it does appear to be in my path, although I do have cabal symlinked elswhere
[17:26:47] <int-e> or does mueval have to be installed separately?
[17:26:52] <geekosaur> (with your version of cabal, v2-install is the default)
[17:27:30] <int-e> I should probably figure out the various quirks of v2-install wrt both libraries and executables :-/
[17:27:37] <geekosaur> oh also if it literally shows "~/.cabal/bin" in your PATH then it won't be working; only shells understand ~
[17:27:47] <geekosaur> you may have to readd it as $HOME/.cabal/bin
[17:28:00] <geekosaur> s/readd/re-add/
[17:28:09] <int-e> good point
[17:28:21] <ddb> it's the right path, /home/ddb/.cabal/bin
[17:28:33] <int-e> is there a mueval executable in there?
[17:29:13] <ddb> yes, as you suggested I cabal install mueval and now get this error in lambdabot
[17:29:15] <ddb> mueval-core: GhcException "cannot satisfy -trust lambdabot-trusted\n    (use -v for more information)"
[17:29:22] <ddb> when I try do do
[17:29:25] <ddb> > product [1..5]
[17:29:27] <lambdabot>  120
[17:30:00] *** Quits: solirc (~solirc@ppp-110-168-219-132.revip5.asianet.co.th) (Quit: Client closed)
[17:30:50] <ddb> I'm going afk for now but I will be back one of these days to continue debugging this issue
[17:30:54] <ddb> thanks for all your help so far!
[17:30:59] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[17:31:11] *** Quits: epolanski (uid312403@2a03:5180:f:1::4:c453) (Quit: Connection closed for inactivity)
[17:31:28] <int-e> hmm. does passing  --trust=lambdabot-trusted  to lambdabot help?
[17:34:32] <ddb> nope, same error
[17:34:47] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[17:35:52] <int-e> eh let me try this myself...
[17:39:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325)
[17:39:51] <int-e> ... https://xkcd.com/303/ ...
[17:42:22] <int-e> Huh, it works for me?
[17:43:35] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:44:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[17:46:22] *** Quits: bjs (sid190364@user/bjs) (Killed (gold.libera.chat (Nickname regained by services)))
[17:46:33] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[17:46:35] *** Quits: whez (sid470288@lymington.irccloud.com) (Ping timeout: 264 seconds)
[17:46:43] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[17:46:43] *** Quits: dmj` (sid72307@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[17:46:43] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 256 seconds)
[17:47:00] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 250 seconds)
[17:47:02] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[17:47:11] *** Quits: davetapley (sid666@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:47:11] *** Quits: ephemient (uid407513@lymington.irccloud.com) (Ping timeout: 264 seconds)
[17:47:14] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[17:47:14] *** Quits: joel135 (sid136450@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[17:47:14] *** Quits: scav (sid309693@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[17:47:14] *** Quits: cln (sid336875@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[17:47:17] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:47:17] *** Quits: jmct_ (sid160793@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:47:17] *** Quits: rune (sid21167@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:47:25] *** Quits: kaizen (sid501599@helmsley.irccloud.com) (Ping timeout: 250 seconds)
[17:47:26] *** Quits: caasih (sid13241@ilkley.irccloud.com) (Ping timeout: 250 seconds)
[17:47:26] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 250 seconds)
[17:47:39] *** Quits: gonz____ (sid304396@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:47:47] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[17:47:47] *** Quits: tnks (sid412124@2a03:5180:f:1::6:49dc) (Ping timeout: 264 seconds)
[17:47:47] *** Quits: hamishmack (sid389057@2a03:5180:f:4::5:efc1) (Ping timeout: 264 seconds)
[17:47:47] *** Quits: Boarders_ (sid425905@2a03:5180:f:2::6:7fb1) (Ping timeout: 264 seconds)
[17:47:47] *** Quits: rtpg (sid443069@2a03:5180:f:3::6:c2bd) (Ping timeout: 264 seconds)
[17:47:47] *** Quits: teehemkay (sid14792@2a03:5180:f:2::39c8) (Ping timeout: 264 seconds)
[17:47:47] *** Quits: vito (sid1962@user/vito) (Ping timeout: 264 seconds)
[17:47:48] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[17:47:51] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (Ping timeout: 250 seconds)
[17:47:51] *** Quits: dsal (sid13060@lymington.irccloud.com) (Ping timeout: 250 seconds)
[17:47:51] *** Quits: dpratt__ (sid193493@id-193493.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[17:48:02] *** Quits: awpr (uid446117@2a03:5180:f:2::6:cea5) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: aria (sid380617@2a03:5180:f:2::5:cec9) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: bbhoss (sid18216@2a03:5180:f::4728) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: b20n (sid115913@2a03:5180:f:5::1:c4c9) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: ysh (sid6017@2a03:5180:f:3::1781) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: _0x47 (sid508683@2a03:5180:f::7:c30b) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: aristid (sid1599@2a03:5180:f:5::63f) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: kristjansson_ (sid126207@2a03:5180:f::1:ecff) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 240 seconds)
[17:48:10] *** Quits: SanchayanMaity (sid478177@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[17:48:10] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[17:48:16] *** Quits: T_S_ (sid501726@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[17:48:17] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 250 seconds)
[17:48:17] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[17:48:17] *** Quits: gmc (sid58314@ilkley.irccloud.com) (Ping timeout: 250 seconds)
[17:48:17] *** Quits: alinab (sid468903@id-468903.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[17:48:17] *** Quits: AndreasK__ (sid320732@uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[17:48:17] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 250 seconds)
[17:48:18] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[17:48:18] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 250 seconds)
[17:48:18] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[17:48:18] *** Quits: integral (sid296274@user/integral) (Ping timeout: 250 seconds)
[17:48:18] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 250 seconds)
[17:48:18] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 250 seconds)
[17:48:23] *** Quits: aarchi (sid486183@2a03:5180:f:5::7:6b27) (Ping timeout: 264 seconds)
[17:48:23] *** Quits: Adeon (sid418992@2a03:5180:f:2::6:64b0) (Ping timeout: 264 seconds)
[17:48:25] *** Quits: grfn (sid449115@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[17:48:25] *** Quits: iphy (sid67735@lymington.irccloud.com) (Ping timeout: 256 seconds)
[17:48:25] *** Quits: Firedancer (sid336191@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[17:48:25] *** Quits: tapas (sid467876@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[17:48:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Ping timeout: 245 seconds)
[17:48:28] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[17:48:32] *** Quits: stevenxl (sid133530@2a03:5180:f:5::2:99a) (Ping timeout: 240 seconds)
[17:48:32] *** Quits: angerman (sid209936@2a03:5180:f:3::3:3410) (Ping timeout: 240 seconds)
[17:48:32] *** Quits: gaze___ (sid387101@2a03:5180:f:1::5:e81d) (Ping timeout: 240 seconds)
[17:48:32] *** Quits: elvishjerricco (sid237756@2a03:5180:f:1::3:a0bc) (Ping timeout: 240 seconds)
[17:48:32] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 240 seconds)
[17:48:32] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[17:48:32] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[17:48:32] *** Quits: acertain_ (sid470584@id-470584.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[17:48:38] *** Quits: astra` (sid289983@user/amish) (Ping timeout: 260 seconds)
[17:48:38] *** Quits: hongminhee (sid295@tinside.irccloud.com) (Ping timeout: 260 seconds)
[17:48:38] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 260 seconds)
[17:48:43] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Ping timeout: 250 seconds)
[17:48:44] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[17:48:53] *** Quits: christiaanb (sid84827@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:48:59] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 264 seconds)
[17:48:59] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:48:59] *** Quits: cbarrett (sid192934@2a03:5180:f:1::2:f1a6) (Ping timeout: 264 seconds)
[17:48:59] *** Quits: meinside (uid24933@2a03:5180:f:1::6165) (Ping timeout: 264 seconds)
[17:48:59] *** Quits: agander_m (sid407952@2a03:5180:f::6:3990) (Ping timeout: 264 seconds)
[17:49:02] *** Quits: saolsen (sid26430@id-26430.lymington.irccloud.com) (Ping timeout: 240 seconds)
[17:49:02] *** Quits: the_finn (uid526334@id-526334.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[17:49:02] *** Quits: philpax_ (sid516926@2a03:5180:f:2::7:e33e) (Ping timeout: 240 seconds)
[17:49:02] *** Quits: nrr__ (sid20938@2a03:5180:f:2::51ca) (Ping timeout: 240 seconds)
[17:49:09] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 250 seconds)
[17:49:09] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[17:49:10] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 250 seconds)
[17:49:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325) (Ping timeout: 264 seconds)
[17:49:30] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[17:49:32] *** Quits: amir (sid22336@user/amir) (Ping timeout: 240 seconds)
[17:49:32] *** Quits: ehamberg (sid18208@2a03:5180:f:4::4720) (Ping timeout: 240 seconds)
[17:49:32] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 240 seconds)
[17:49:35] *** Quits: enemeth79 (sid309041@2a03:5180:f:2::4:b731) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: kaychaks__ (sid236345@2a03:5180:f:1::3:9b39) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: etrepum (sid763@2a03:5180:f:5::2fb) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: sa1_ (sid7690@2a03:5180:f:3::1e0a) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: jonrh (sid5185@2a03:5180:f:3::1441) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: gregberns__ (sid315709@2a03:5180:f:1::4:d13d) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: truckasaurus (sid457088@2a03:5180:f:1::6:f980) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: supersven (sid501114@2a03:5180:f:3::7:a57a) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: typetetris (sid275937@2a03:5180:f::4:35e1) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: SethTisue__ (sid14912@2a03:5180:f:3::3a40) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: Pent (sid313808@2a03:5180:f:2::4:c9d0) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[17:49:35] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (Ping timeout: 250 seconds)
[17:49:36] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:50:37] <hippoid> is there a way to search the archives of this channel by username?
[17:51:13] <[exa]> hippoid: actually tomsmeding was wondering about adding some such functionality a few days ago :D
[17:51:23] *** Quits: gg (~gg@2a01:e0a:819:1510:e434:efd5:edf7:7caa) (Ping timeout: 264 seconds)
[17:51:38] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[17:52:06] *** Joins: bradparker (sid262931@uxbridge.irccloud.com)
[17:52:07] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[17:52:07] *** Joins: supersven (sid501114@ilkley.irccloud.com)
[17:52:09] *** Joins: grfn (sid449115@helmsley.irccloud.com)
[17:52:09] *** Joins: davetapley (sid666@uxbridge.irccloud.com)
[17:52:09] *** Joins: Firedancer (sid336191@hampstead.irccloud.com)
[17:52:12] <hippoid> [exa]: i'd use that! I can see there's an archive, but no easy way to search it
[17:52:13] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[17:52:15] *** Joins: teehemkay (sid14792@lymington.irccloud.com)
[17:52:16] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[17:52:18] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[17:52:20] *** Joins: integral (sid296274@user/integral)
[17:52:20] *** Joins: edmundnoble (sid229620@helmsley.irccloud.com)
[17:52:20] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[17:52:21] *** Joins: dpratt__ (sid193493@helmsley.irccloud.com)
[17:52:24] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[17:52:25] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[17:52:26] *** Joins: jackdk (sid373013@cssa/jackdk)
[17:52:29] *** Joins: AndreasK__ (sid320732@uxbridge.irccloud.com)
[17:52:30] *** Joins: typetetris (sid275937@tinside.irccloud.com)
[17:52:31] *** Joins: PotatoGim (sid99505@lymington.irccloud.com)
[17:52:31] *** Joins: bbhoss (sid18216@tinside.irccloud.com)
[17:52:37] *** Joins: truckasaurus (sid457088@helmsley.irccloud.com)
[17:52:45] *** Joins: kaychaks__ (sid236345@helmsley.irccloud.com)
[17:52:48] *** Joins: nrr__ (sid20938@lymington.irccloud.com)
[17:52:53] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 264 seconds)
[17:52:58] *** Joins: Adeon (sid418992@lymington.irccloud.com)
[17:53:01] *** Joins: SanchayanMaity (sid478177@hampstead.irccloud.com)
[17:53:02] *** Joins: astra` (sid289983@user/amish)
[17:53:02] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[17:53:03] *** Joins: amir (sid22336@user/amir)
[17:53:06] *** Joins: degraafk (sid71464@lymington.irccloud.com)
[17:53:14] *** Joins: cbarrett (sid192934@helmsley.irccloud.com)
[17:53:14] *** Joins: vito (sid1962@user/vito)
[17:53:14] *** Joins: glowcoil (sid3405@tinside.irccloud.com)
[17:53:15] *** Joins: christiaanb (sid84827@lymington.irccloud.com)
[17:53:16] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[17:53:18] *** Joins: b20n (sid115913@uxbridge.irccloud.com)
[17:53:19] *** Joins: aristid (sid1599@uxbridge.irccloud.com)
[17:53:19] *** Joins: hamishmack (sid389057@hampstead.irccloud.com)
[17:53:20] *** Joins: stevenxl (sid133530@uxbridge.irccloud.com)
[17:53:21] *** Joins: max22- (~maxime@2a01cb08833598008a48d8a24ae7f102.ipv6.abo.wanadoo.fr)
[17:53:21] *** Joins: idnar (sid12240@debian/mithrandi)
[17:53:24] *** Joins: scav (sid309693@helmsley.irccloud.com)
[17:53:25] *** Joins: xkuru (~xkuru@user/xkuru)
[17:53:30] *** Joins: gaze___ (sid387101@helmsley.irccloud.com)
[17:53:34] *** Joins: ysh (sid6017@ilkley.irccloud.com)
[17:53:34] *** Joins: mrianbloom (sid350277@ilkley.irccloud.com)
[17:53:36] *** Joins: tnks (sid412124@helmsley.irccloud.com)
[17:53:37] *** Joins: rune (sid21167@ilkley.irccloud.com)
[17:53:40] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[17:53:45] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[17:53:46] *** Joins: jonrh (sid5185@ilkley.irccloud.com)
[17:53:49] *** Joins: acertain_ (sid470584@hampstead.irccloud.com)
[17:53:52] *** Joins: sa1_ (sid7690@ilkley.irccloud.com)
[17:53:52] *** Joins: Boarders_ (sid425905@lymington.irccloud.com)
[17:53:54] *** Joins: kaizen (sid501599@helmsley.irccloud.com)
[17:53:56] *** Joins: mcfilib (sid302703@user/mcfilib)
[17:53:59] *** Joins: lightandlight (sid135476@helmsley.irccloud.com)
[17:54:04] *** Joins: sclv (sid39734@haskell/developer/sclv)
[17:54:07] *** Joins: SethTisue__ (sid14912@ilkley.irccloud.com)
[17:54:10] *** Joins: ehamberg (sid18208@hampstead.irccloud.com)
[17:54:10] *** Joins: jmct_ (sid160793@tinside.irccloud.com)
[17:54:11] *** Joins: dmj` (sid72307@hampstead.irccloud.com)
[17:54:14] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[17:54:23] *** Joins: NemesisD (sid24071@lymington.irccloud.com)
[17:54:24] *** Joins: hubvu (sid495858@user/hubvu)
[17:54:30] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[17:54:32] *** Joins: _0x47 (sid508683@tinside.irccloud.com)
[17:54:32] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[17:54:43] *** Joins: awpr (uid446117@lymington.irccloud.com)
[17:54:45] *** Joins: gonz____ (sid304396@lymington.irccloud.com)
[17:54:48] *** Joins: T_S_ (sid501726@uxbridge.irccloud.com)
[17:54:54] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[17:54:58] *** Joins: dsal (sid13060@lymington.irccloud.com)
[17:55:01] *** Joins: aria (sid380617@lymington.irccloud.com)
[17:56:29] *** Joins: teehemkay_ (sid14792@lymington.irccloud.com)
[17:58:12] <geekosaur> the code has most of the UI side of it already, but is missing the backend functionality (sphinx iirc) to do the actual search
[17:58:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[17:59:37] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Ping timeout))
[17:59:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:00:54] *** Quits: m1dnight (~christoph@xvm-104-119.dc0.ghst.net) (Quit: WeeChat 3.1)
[18:01:13] *** Joins: whez (sid470288@lymington.irccloud.com)
[18:01:36] *** Joins: gg (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2)
[18:02:18] *** Joins: m1dnight (~christoph@christophe.dev)
[18:02:22] *** Joins: peight (~peight@198.35.131.77.rev.sfr.net)
[18:02:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325)
[18:03:31] *** Joins: philpax_ (sid516926@lymington.irccloud.com)
[18:03:51] *** Joins: tritlo (sid58727@user/tritlo)
[18:04:17] *** Joins: the_finn (uid526334@hampstead.irccloud.com)
[18:04:18] *** Joins: joel135 (sid136450@hampstead.irccloud.com)
[18:04:22] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[18:04:33] *** Joins: gmc (sid58314@ilkley.irccloud.com)
[18:04:33] *** Joins: sa (sid1055@tinside.irccloud.com)
[18:04:36] *** Joins: pjlsergeant (sid143467@hampstead.irccloud.com)
[18:04:45] *** Joins: meinside (uid24933@helmsley.irccloud.com)
[18:04:52] *** Joins: iphy (sid67735@lymington.irccloud.com)
[18:05:27] <int-e> ddb: yeah after "cabal update; cabal v1-install lambdabot" in a clean user directory, `lambdabot` works for me. this is a Debian system but I don't see why it would matter?
[18:06:19] *** Joins: cln (sid336875@ilkley.irccloud.com)
[18:06:37] <int-e> ddb: and "works for me" includes simple evaluations like "> product [1..5]" or "> S.fromList [3,1,4,1,5,9,2]"
[18:06:45] <tomsmeding> hippoid: eternally busy, but I have to proctor at a 3 hour exam this evening, so we'll see what happens :p
[18:06:46] <geekosaur> something about what gets installed with v2-install being symlinks, is what I ran into
[18:06:55] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325) (Ping timeout: 250 seconds)
[18:07:15] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[18:07:25] *** Joins: hook54321 (sid149355@user/hook54321)
[18:07:26] <geekosaur> I had to mess with my dotfile stuff to make it all work with v2-install
[18:07:53] <geekosaur> not that I run lambdabot any more, but it also affected things like pandoc, hledger, and xmonad
[18:10:19] <hippoid> tomsmeding: it'll be used right away. I ask questions here and then have to go back and find the answers when I have more time to think about them.
[18:11:00] <geekosaur> fwiw I track stuff in utc and mark when I ask stuff, so it's easier to search logs
[18:11:08] <int-e> ddb: One thing I can think of is that if you specify *any* package with --trust that disables the default list, so you need to specify all packages that need to be trusted. A minimal list for the default Pristine.hs is: lambdabot --trust=base --trust=random --trust=lambdabot-trusted
[18:11:37] <geekosaur> (logs are in utc and I use a wrapper script to run my IRC client in utc. this of course won't work so well if you're using webchat, and may not work well if you're on matrix)
[18:11:58] <hippoid> geekosaur: do you use irssi?
[18:12:03] <geekosaur> hexchat
[18:12:25] <geekosaur> but more or less the same wrapper script would work, I just shove TZ=TUC0 into the environment before running it
[18:12:32] <geekosaur> er, TZ=UTC0
[18:13:28] *** Joins: angerman (sid209936@ilkley.irccloud.com)
[18:13:38] *** Joins: enemeth79 (sid309041@lymington.irccloud.com)
[18:13:43] <geekosaur> int-e, might that be part of what's wrong with using v2-install? I would guess they mark lambdabot-trusted as trusted in the package database, but package databases are kinda weird in "nix-like" mode
[18:13:55] *** Quits: jurjen (~jurjen@83.232.63.97) (Ping timeout: 256 seconds)
[18:14:07] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325)
[18:14:08] *** Joins: gregberns__ (sid315709@helmsley.irccloud.com)
[18:14:22] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[18:14:26] *** Joins: hongminhee (sid295@tinside.irccloud.com)
[18:14:27] *** Joins: bjs (sid190364@user/bjs)
[18:14:33] <sprout> technically,  you can break a lot more than only the type system with unsafePerformIO
[18:14:36] *** Joins: etrepum (sid763@uxbridge.irccloud.com)
[18:14:37] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[18:14:39] *** Joins: obviyus (sid415299@user/obviyus)
[18:14:41] *** Joins: SrPx (sid108780@uxbridge.irccloud.com)
[18:14:45] *** Joins: tapas (sid467876@ilkley.irccloud.com)
[18:14:45] *** Joins: carter (sid14827@helmsley.irccloud.com)
[18:14:51] *** Joins: bw (sid2730@user/betawaffle)
[18:14:51] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Quit: leaving)
[18:14:54] <int-e> geekosaur: Do package environments (which I believe substitute the v1- model of installed libraries) even carry trust information?
[18:14:57] *** Joins: ephemient (uid407513@lymington.irccloud.com)
[18:14:58] *** Joins: Pent (sid313808@lymington.irccloud.com)
[18:15:01] *** Joins: hendi (sid489601@lymington.irccloud.com)
[18:15:10] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[18:15:34] <geekosaur> there is ghc-pkg trust <pkgid>
[18:15:42] <int-e> geekosaur: though, trust shouldn't be relevant because lambdabot overrides it anyway. but package visibility may be an issue
[18:15:57] <int-e> seeing ddb's precise error might yield some clues
[18:17:11] *** Joins: hippoid (~idris@c-98-220-13-8.hsd1.il.comcast.net)
[18:18:56] <geekosaur> and no, I don't think pkgenv carries trust information, which is part of why v1-install would avoid it, it's not just faking package databases with package environments
[18:19:15] <geekosaur> v1-install still modifies package databases
[18:20:38] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 246 seconds)
[18:21:21] *** Joins: mimmy (~mimmy@72.142.88.18)
[18:22:52] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:23:05] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[18:23:52] *** Joins: taktoa[c] (sid282096@tinside.irccloud.com)
[18:24:03] *** Joins: saolsen (sid26430@lymington.irccloud.com)
[18:24:41] *** Joins: parseval (sid239098@helmsley.irccloud.com)
[18:25:17] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[18:26:11] *** Joins: merijn (~merijn@sp10.openwifi.nl)
[18:32:31] *** Quits: robosexual (~spaceoyst@88.85.216.62) (Quit: Konversation terminated!)
[18:33:02] *** Quits: mark__ (~a@p200300ef973db1dc4086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:33:24] *** Joins: mark__ (~a@p200300ef973db1b24086f0a6a24fc4dd.dip0.t-ipconnect.de)
[18:33:45] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:34:49] <int-e> ah it appears that `hint` (and hence `mueval` and `lambdabot`) does pick up the default GHC environment, so with v2-install, cabal v2-install lambdabot hoogle misfortune mueval unlambda dice; cabal v2-install --lib lambdabot-trusted random mtl show  seems to be sufficient to get things working...
[18:35:47] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 264 seconds)
[18:35:57] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 250 seconds)
[18:39:29] <int-e> oh does the default environment override the package database? if so then that would explain quite a lot
[18:40:08] <int-e> And I guess it does. "clear-package-db"
[18:40:54] <int-e> So once you use v2-install at all, v1-install-ed libraries will no longer be picked up unless you set GHC_ENVIRONMENT=-
[18:40:57] <int-e> ...eww...
[18:44:10] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 260 seconds)
[18:44:50] <int-e> ddb: ^ I may have figured out what happened to your lambdabot installation attempt.
[18:46:07] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[18:47:44] *** Joins: mimmy (~mimmy@72.142.88.18)
[18:49:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:50:55] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[18:51:36] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[18:54:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:55:09] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[18:56:32] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:57:36] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[19:03:32] <geekosaur> mm, I wonder if that's actually true. it'd also lose base if it were
[19:04:01] <geekosaur> so I think it only clears the virtual(?) package db used by the package environment
[19:05:29] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[19:05:29] *** Quits: hippoid (~idris@c-98-220-13-8.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[19:26:31] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:f0a8:ffae:2a2b:16fd) (Quit: WeeChat 2.8)
[19:31:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[19:32:11] *** Quits: merijn (~merijn@sp10.openwifi.nl) (Ping timeout: 264 seconds)
[19:32:13] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[19:32:25] *** Joins: APic (apic@apic.name)
[19:33:08] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:34:24] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[19:39:20] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[19:41:11] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 256 seconds)
[19:42:26] *** Joins: frosch03 (~user@2a02:c98:1003:8000:b7c6:b991:b9e3:a54c)
[19:44:14] <jlamothe> I'm in the process of writing a Gemini server framework (I'm aware of the gemini-server package). I'm using tcp-streams to handle the TLS stuff, but I needed a way to find out which client certificate (if any) is being used when a connection is opened. Is this approach reasonable, or the ugly hack I suspect it mogjt be? https://codeberg.org/jlamothe/gemserv/src/branch/master/src/Network/GemServ.hs#L181
[19:44:59] <jlamothe> The relevent functions are listenLoop and adjustServwrParams
[19:45:45] <jlamothe> might be* adjustServerParams*
[19:45:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[19:46:04] <jlamothe> IRC over SSH on mobile is fun.
[19:46:17] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[19:47:26] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c721b739c4928bd7ecc09c55.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[19:49:13] *** Joins: subdelusional (~user@188.249.169.186)
[19:49:37] <subdelusional> hello, I have a list [1..10], how can I filter out all the even numbers from it? is there a function for that?
[19:50:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Ping timeout: 268 seconds)
[19:50:25] <jlamothe> subdelusional: Have you looked at the filter function from Data.List?
[19:52:33] *** edro is now known as edr
[19:57:05] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:58:09] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:00:18] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:07:10] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[20:08:46] <subdelusional> jlamothe: thanks man I was looking for this
[20:08:56] *** Quits: mbuf (~Shakthi@223.184.52.200) (Quit: Leaving)
[20:09:58] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c721b739c4928bd7ecc09c55.dip0.t-ipconnect.de)
[20:09:59] <c_wraith> jlamothe: that will obliterate any existing client certificate hook in params
[20:10:12] <c_wraith> jlamothe: that might cause you problems down the line
[20:10:21] <c_wraith> (probably not, but it could happen)
[20:11:30] *** Joins: CiaoSen (~Jura@p5dcc1a24.dip0.t-ipconnect.de)
[20:13:43] <c_wraith> Oh, nevermind.  You did handle that, just in a different spot than I expected.
[20:15:14] <c_wraith> though the `certhook chain` call should probably be moved out one level.  It should really always happen if the hook is called.
[20:16:02] <c_wraith> fwiw...
[20:16:08] <c_wraith> :t print <> print
[20:16:09] <lambdabot> Show a => a -> IO ()
[20:16:48] <c_wraith> you don't need to call down the chain explicitly, you could just <> the handlers together
[20:17:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[20:18:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:23:13] *** Joins: shidima_ (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[20:25:14] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:25:35] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 246 seconds)
[20:26:51] *** Joins: alzgh (~alzgh@user/alzgh)
[20:28:01] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[20:28:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:29:38] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 260 seconds)
[20:29:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[20:31:45] *** Quits: subdelusional (~user@188.249.169.186) (Remote host closed the connection)
[20:33:22] *** Quits: rkrishnan (~user@122.167.19.65) (Ping timeout: 260 seconds)
[20:33:25] <jlamothe> c_wraith: It does call tje original hook at the end.
[20:34:43] <c_wraith> jlamothe: only if the chain is non-empty
[20:39:58] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[20:41:57] *** Quits: frosch03 (~user@2a02:c98:1003:8000:b7c6:b991:b9e3:a54c) (Quit: ERC (IRC client for Emacs 27.2))
[20:42:00] *** Parts: peight (~peight@198.35.131.77.rev.sfr.net) (Leaving)
[20:42:23] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 256 seconds)
[20:43:54] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[20:44:39] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[20:45:05] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[20:46:31] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (Quit: Reconnecting)
[20:46:45] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[20:48:36] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[20:48:38] *** Joins: econo (uid147250@user/econo)
[20:48:54] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:49:14] *** Joins: alzgh (~alzgh@user/alzgh)
[20:54:17] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[20:58:30] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[20:58:42] *** bontaq` is now known as bontaq
[21:00:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:02:10] *** Joins: neurocyte0132889 (~neurocyte@45.131.36.189)
[21:02:10] *** Quits: neurocyte0132889 (~neurocyte@45.131.36.189) (Changing host)
[21:02:10] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:04:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[21:06:16] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[21:07:53] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 256 seconds)
[21:11:05] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 250 seconds)
[21:13:23] *** Joins: jespada (~jespada@148.252.129.184)
[21:14:38] *** Quits: jespada (~jespada@148.252.129.184) (Read error: Connection reset by peer)
[21:15:17] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:15:29] *** Joins: jespada (~jespada@181.80.79.251)
[21:15:38] *** Joins: alzgh (~alzgh@user/alzgh)
[21:18:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[21:18:23] *** Quits: Teacup (~teacup@user/teacup) (Ping timeout: 264 seconds)
[21:19:35] *** Joins: mimmy (~mimmy@72.142.88.18)
[21:20:02] *** Quits: jespada (~jespada@181.80.79.251) (Ping timeout: 260 seconds)
[21:24:52] *** Joins: Teacup (~teacup@user/teacup)
[21:27:45] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[21:29:59] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[21:32:17] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:32:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:32:44] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[21:35:12] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[21:39:42] *** Joins: johnjay (~pi@192.142.100.50)
[21:44:54] *** Quits: shidima_ (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[21:45:12] *** Joins: shidima_ (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[21:46:02] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[21:50:37] *** Joins: beka (~beka@104.193.170.240)
[21:52:06] *** Joins: notzmv (~zmv@user/notzmv)
[21:58:30] *** Quits: beka (~beka@104.193.170.240) (Quit: Leaving)
[22:01:21] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 245 seconds)
[22:01:46] *** Joins: gaff (~gaff@49.207.205.240)
[22:01:53] *** Quits: gaff (~gaff@49.207.205.240) (Client Quit)
[22:01:56] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:02:02] *** Quits: dagi53949 (~dagit@2001:558:6025:38:6476:a063:d05a:44da) (Ping timeout: 268 seconds)
[22:02:20] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Ping timeout: 268 seconds)
[22:03:14] *** Joins: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da)
[22:03:23] *** Quits: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da) (Remote host closed the connection)
[22:05:27] *** Joins: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da)
[22:07:23] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 256 seconds)
[22:08:11] *** Joins: desantra (~skykanin@user/skykanin)
[22:08:20] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[22:12:01] *** Joins: bitmapper (uid464869@lymington.irccloud.com)
[22:17:06] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[22:17:26] *** Joins: alzgh (~alzgh@user/alzgh)
[22:18:09] *** Joins: johnjay (~pi@192.142.100.50)
[22:19:37] *** Quits: drownbes (~drownbes@200-149-20-81.sta.estpak.ee) (Ping timeout: 268 seconds)
[22:21:08] *** Joins: drownbes (~drownbes@200-149-20-81.sta.estpak.ee)
[22:21:34] *** Joins: tfeb (~tfb@88.98.95.237)
[22:23:49] *** Quits: CiaoSen (~Jura@p5dcc1a24.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[22:29:16] *** Quits: johnjay (~pi@192.142.100.50) (Remote host closed the connection)
[22:33:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:36:12] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[22:36:42] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[22:37:59] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[22:46:47] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:50:32] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[22:53:14] *** Quits: shidima_ (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[22:53:19] *** Joins: shidima__ (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[22:59:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:01:21] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[23:02:11] *** yin is now known as zzz
[23:02:45] *** Joins: img (~img@user/img)
[23:06:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Remote host closed the connection)
[23:06:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[23:11:25] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Quit: WeeChat 3.3)
[23:15:23] *** Joins: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[23:15:50] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[23:15:50] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Read error: Connection reset by peer)
[23:16:05] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[23:21:03] <koz> I'm trying to write a newtype wrapper for lists, whose goal is to define an Arbitrary instance generating lists whose size is no more than some constant n.
[23:21:08] <koz> How would I write this in a sensible way?
[23:21:10] *** Joins: fendor (~fendor@77.119.192.182.wireless.dyn.drei.com)
[23:25:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[23:25:38] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Read error: Connection reset by peer)
[23:27:02] <tomsmeding> koz: is that constant actually compile-time constant?
[23:27:51] <tomsmeding> newtype ConstSizeList a = ConstSizeList [a] ; instance Arbitrary a => Arbitrary (ConstSizeList a) where arbitrary = ConstSizeList <$> replicateM n arbitrary
[23:27:56] <tomsmeding> from Control.Monad
[23:28:29] <koz> tomsmeding: That's _already_ wrong, because it ignores the size parameter.
[23:28:44] <koz> Also, this will _always_ give lists of length n, whereas I need _up to_ n.
[23:28:47] <tomsmeding> ah
[23:28:54] <koz> There's a reason why I'm asking: QuickCheck is a delicate beast.
[23:29:03] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:29:05] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[23:29:13] <koz> I'll try cribbing off the list instance maybe.
[23:29:15] *** Joins: alzgh (~alzgh@user/alzgh)
[23:29:27] <tomsmeding> does it ignore the size parameter though?
[23:29:34] <tomsmeding> I concede it always generates size n
[23:30:08] <tomsmeding> but the elements will inherit the size parameter
[23:30:10] <koz> Yes, it _must_ ignore it.
[23:30:18] <koz> Because the size _must_ affect the length too, and here it won't.
[23:30:30] <koz> Simply-put, if it were that simple, I wouldn't be asking.
[23:30:32] <hpc> you can probably use an arbitrary Int (constrained appropriately) for the list length
[23:30:40] <koz> I guess that _might_ work.
[23:30:48] <koz> Again, I'll crib off the [] instance.
[23:30:54] <koz> Since it has to determine length _somehow_.
[23:31:15] <koz> Yep, it does exactly what hpc says.
[23:31:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:31:28] <koz> It uses the size directly to determine length, then fills it.
[23:31:29] *** Joins: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com)
[23:31:29] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Remote host closed the connection)
[23:31:37] <koz> So for a capped size, I guess scaling?
[23:31:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:31:52] <koz> I could do like, max size n I guess.
[23:32:00] <koz> So large sizes just always produce bigger lists.
[23:32:04] <koz> That's simpler.
[23:32:15] <koz> (this is how listOf1 works)
[23:32:30] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[23:33:50] *** Joins: kenran (~kenran@200116b82b539f00f3f309ebb0e24d35.dip.versatel-1u1.de)
[23:34:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[23:35:13] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 256 seconds)
[23:35:26] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[23:37:21] <dsal> You just feed `choose (1,n)` into `listOf`
[23:38:13] <koz> dsal: Yeah, I figured that out now. Thanks.
[23:38:30] *** Joins: juhp (~juhp@128.106.188.220)
[23:39:47] *** Quits: DNH (~DNH@8.44.0.72) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:39:57] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[23:40:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:41:32] *** Joins: DNH (~DNH@8.44.0.72)
[23:41:45] *** Quits: gg (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2) (Remote host closed the connection)
[23:43:28] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: Connection reset by peer)
[23:44:22] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[23:45:19] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[23:45:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[23:46:07] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[23:46:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[23:49:36] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: Connection reset by peer)
[23:50:28] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (Ping timeout: 260 seconds)
[23:50:36] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[23:52:02] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[23:52:14] *** Joins: Topsi1 (~Tobias@2001:638:708:1a::3f)
[23:52:45] *** Joins: Topsi2 (~Tobias@dyndsl-091-249-082-100.ewe-ip-backbone.de)
[23:52:45] *** Quits: Topsi1 (~Tobias@2001:638:708:1a::3f) (Read error: Connection reset by peer)
[23:52:51] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[23:53:34] *** Quits: Topsi (~Tobias@dyndsl-091-249-082-100.ewe-ip-backbone.de) (Ping timeout: 260 seconds)
[23:54:19] <mark__> The core dump of "x :: Num a => Maybe a; x = Just 42" looks like this: "x = \ @ a_aaUF $dNum_aaUH -> Just (fromInteger $dNum_aaUH 42)". Why is there an additional argument befor ethe dictionary. It's not even used in the body?
[23:54:31] *** Joins: desantra (~skykanin@user/skykanin)
[23:54:53] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Remote host closed the connection)
[23:54:57] <tomjaguarpaw> That's a type argument
[23:55:22] <mark__> So the $dNum has to match the type arg?
[23:55:34] <tomjaguarpaw> Yes, I'm not sure why it doesn't appear there
[23:55:50] <tomjaguarpaw> But apparently it doesn't
[23:56:06] <tomjaguarpaw> If you can see where $dNum_aaUH is created then maybe a_aaUF features there
[23:56:14] <tomjaguarpaw> Oh, no because it's bound right there
[23:56:24] <tomsmeding> % :set -fprint-explicit-foralls
[23:56:24] <yahb> tomsmeding: 
[23:56:25] <mark__> Yes this is the binding site.
[23:56:26] <tomjaguarpaw> Yeah I'm not sure exactly how that all fits together.
[23:56:27] <tomsmeding> % f :: Num a => Maybe a ; f = Just 42
[23:56:27] <yahb> tomsmeding: 
[23:56:29] <tomsmeding> % :t f
[23:56:29] <yahb> tomsmeding: forall {a}. Num a => Maybe a
[23:57:08] <tomsmeding> note that that first argument, a_aaUF, is tagged with a @
[23:57:11] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[23:57:30] <tomsmeding> I don't know for sure, but I would be surprised if that doesn't mean "this is a type argument" a la TypeApplications
[23:58:19] <geekosaur> I believe it does, and that's in fact where TypeApplications syntax came from
[23:58:21] <mark__> Like a capital lambda?
[23:58:29] <monochrom> I bet you suppressed type annotations in the dump.
[23:58:34] <tomsmeding> $dNum_aaUH isn't a polymorphic thing, right? it's a dictionary for this one particular type
[23:58:47] <tomsmeding> so there's no forall in its type, so no reason to apply anything to a_aaUF
[23:58:52] <mark__> monochrom: Yes I did suppress all.
[23:58:55] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[23:58:56] <monochrom> Because the full version is x = \ (@ a_aAT) ($dNum_aAV :: Num a_aAT) -> GHC.Maybe.Just @ a_aAT (fromInteger @ a_aAT $dNum_aAV N.x1)
[23:59:08] <monochrom> See how a_aAT is all over the place.
[23:59:09] <tomjaguarpaw> Ah that makes more sense
[23:59:12] <tomsmeding> heh
[23:59:38] <mark__> I thought it would be more readable but then it doesn't tell the whole story.
[23:59:41] <tomsmeding> my remark about $dNum not needing the type argument is still valid though *phew*
