[00:02:26] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:04:53] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:05:08] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:11:25] *** Joins: gaqwas (~john@dynamic-077-007-102-154.77.7.pool.telefonica.de)
[00:14:32] *** Joins: xsperry (~xs@user/xsperry)
[00:20:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:22:32] *** Quits: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a) (Remote host closed the connection)
[00:22:46] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 260 seconds)
[00:29:45] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:30:26] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:31:34] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:39:16] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:40:14] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:47:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:47:37] *** Joins: ahc (~ahc@121.98.229.241)
[00:54:29] <rotateq> jackdaniel: SBCL doesn't like it so i just had to preparse the numerals and wipe out the leading Ms with correct subtracting ^^
[01:00:54] <jcowan> 11.1.2.1.2 point 19 says: "Except where explicitly allowed, the consequences are undefined if any of the following actions are performed on an external symbol of the COMMON-LISP package: [...] Defining a method for a standardized generic function which is applicable when all of the arguments are direct instances of standardized classes."  What does that have to do with memoization?
[01:03:29] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Ping timeout (120 seconds))
[01:10:30] *** Quits: roelj (~user@2001:1c02:b16:3700:3718:3a46:b1ae:ba54) (Remote host closed the connection)
[01:12:26] <phoe> jcowan: nothing in particular, I was curious about a possible edge case
[01:12:39] <phoe> and that edge case does not conform to the standard, so I don't need to worry about it
[01:13:07] * jcowan nods
[01:13:16] <jcowan> The motivation seems peculiar.
[01:13:16] <phoe> in particular, (defmethod compute-applicable-methods ((gf (eql #'foo)) ...) ...) where FOO is a STANDARD-GENERIC-FUNCTION breaks this point
[01:14:55] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:5896:fe78:172c:f63a)
[01:17:18] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e4:b4b6:b0bc:5047:1050:cb73)
[01:19:07] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:20:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610) (Ping timeout: 260 seconds)
[01:21:05] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:5896:fe78:172c:f63a) (Ping timeout: 250 seconds)
[01:23:15] * jcowan notes that there are only 4 standard generic functions that are not part of the CLOS machinery: describe-object, print-object, make-load-form, and documentation.
[01:28:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[01:28:35] <pjb> it's not that they are not part of the CLOS machinery. It's that for those standard classes, CL is allowed to implement direct function calls instead of using those generic functions.
[01:29:05] <pjb> jcowan: ie. print can call a print-cons and a print-integer, instead of using print-object on conses and integers.
[01:29:33] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:30:29] <jcowan> By machinery I mean functions that construct, query, and mutate the CLOS heterarchy
[01:32:37] <jcowan> add-method, allocate-instance, change-class, initialize-instance, etc.  Oh, function-keywords is another non-machinery GF.
[01:34:21] <jcowan> roughly speaking the parts of the MOP that were standardized
[01:38:21] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[01:43:37] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[01:50:13] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[01:53:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 260 seconds)
[02:03:24] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[02:06:50] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 260 seconds)
[02:07:08] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[02:08:11] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[02:09:39] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:6175:921c:ea3:862)
[02:10:35] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:11:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[02:13:19] *** Joins: zacts (~zacts@user/zacts)
[02:13:31] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[02:15:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e)
[02:24:39] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 265 seconds)
[02:26:20] *** Joins: ahc (~ahc@121.98.229.241)
[02:35:28] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[02:46:19] *** Quits: gaqwas (~john@dynamic-077-007-102-154.77.7.pool.telefonica.de) (Ping timeout: 256 seconds)
[02:47:46] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[02:48:26] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e4:b4b6:b0bc:5047:1050:cb73) (Read error: Connection reset by peer)
[02:48:40] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:9994:56a5:8bf3:96a8)
[02:49:23] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[02:52:05] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 250 seconds)
[02:59:39] *** Joins: winningluser (~wl@2601:8c1:80:70d0::756)
[03:00:06] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[03:04:14] *** Quits: cosimone (~user@93-47-228-203.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[03:05:57] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:9994:56a5:8bf3:96a8) (Ping timeout: 250 seconds)
[03:10:33] *** Quits: hobo (~hobo@69.218.33.204) (Quit: ZNC 1.8.2 - https://znc.in)
[03:13:56] *** Joins: notzmv (~zmv@user/notzmv)
[03:17:01] *** Quits: Jing_ (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[03:17:41] *** Joins: Jing (~hedgehog@2604:a840:3::103e)
[03:24:15] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[03:30:03] *** Quits: winningluser (~wl@2601:8c1:80:70d0::756) (*.net *.split)
[03:30:03] *** Quits: djuber (~user@65.79.128.64) (*.net *.split)
[03:30:03] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[03:30:03] *** Quits: random-nick (~random-ni@87.116.167.143) (*.net *.split)
[03:30:03] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[03:30:03] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[03:30:03] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (*.net *.split)
[03:30:03] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[03:30:03] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[03:30:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[03:30:04] *** Quits: sander (~sander@user/sander) (*.net *.split)
[03:30:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[03:30:04] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[03:30:04] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[03:30:04] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[03:30:04] *** Quits: phantomics (~phantomic@97-118-135-6.hlrn.qwest.net) (*.net *.split)
[03:30:04] *** Quits: raeda (~raeda@72.49.249.241) (*.net *.split)
[03:30:04] *** Quits: dale (dale@user/dale) (*.net *.split)
[03:30:04] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:04] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[03:30:04] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[03:30:04] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (*.net *.split)
[03:30:04] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (*.net *.split)
[03:30:04] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[03:30:04] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: pok (~pok@user/pok) (*.net *.split)
[03:30:04] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (*.net *.split)
[03:30:04] *** Quits: _death (~death@adeht.org) (*.net *.split)
[03:30:05] *** Quits: phadthai (~mmondor@user/phadthai) (*.net *.split)
[03:30:05] *** Quits: alvaro121_ (~aa@201.230.126.66) (*.net *.split)
[03:30:05] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[03:30:05] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:6175:921c:ea3:862) (*.net *.split)
[03:30:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[03:30:05] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[03:30:05] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[03:30:05] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (*.net *.split)
[03:30:06] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (*.net *.split)
[03:30:06] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[03:30:06] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (*.net *.split)
[03:30:06] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[03:30:06] *** Quits: skempf (~Kabriel@user/kabriel) (*.net *.split)
[03:30:06] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: victor_ (sid208353@id-208353.tinside.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[03:30:06] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[03:30:06] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[03:30:06] *** Quits: z3t0 (~z3t0@146.71.14.98) (*.net *.split)
[03:30:06] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[03:30:14] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[03:30:16] *** Joins: pok (~pok@castor.klingenberg.no)
[03:30:16] *** Joins: djuber (~user@65.79.128.64)
[03:30:16] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[03:30:18] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[03:30:18] *** Joins: alvaro121 (~aa@201.230.126.66)
[03:30:20] *** Joins: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de)
[03:30:25] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[03:30:32] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[03:30:38] *** Joins: unyu (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1)
[03:30:39] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[03:30:41] *** Joins: phadthai (mmondor@206.248.143.74)
[03:30:42] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[03:30:42] *** Joins: pok (~pok@user/pok)
[03:30:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:30:47] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[03:30:50] *** Joins: victor_ (sid208353@id-208353.tinside.irccloud.com)
[03:30:53] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[03:30:55] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[03:31:00] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[03:31:17] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:6175:921c:ea3:862)
[03:31:19] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[03:31:26] *** Quits: phadthai (mmondor@206.248.143.74) (Changing host)
[03:31:26] *** Joins: phadthai (mmondor@user/phadthai)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:35] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:6175:921c:ea3:862) (Remote host closed the connection)
[03:31:36] *** Joins: phantomics (~phantomic@97-118-135-6.hlrn.qwest.net)
[03:31:39] *** Joins: s-liao (~s-liao@101.86.96.154)
[03:31:49] *** unyu is now known as Guest6030
[03:32:11] *** Joins: greaser|q (greaser@antihype.space)
[03:32:42] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[03:32:48] *** Joins: raeda (~raeda@72.49.249.241)
[03:32:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:32:50] *** Joins: even4void (even4void@came.here.for-some.fun)
[03:32:51] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[03:33:02] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:33:11] *** Quits: raeda (~raeda@72.49.249.241) (Read error: Connection reset by peer)
[03:33:20] *** Joins: adeht (~death@adeht.org)
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:33:36] *** Joins: sander (~sander@user/sander)
[03:33:44] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:33:54] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[03:33:55] *** Joins: raeda (~raeda@72.49.249.241)
[03:33:56] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[03:33:56] *** Joins: greaser|q (greaser@user/greasemonkey)
[03:33:59] *** greaser|q is now known as GreaseMonkey
[03:34:06] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:34:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:34:22] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[03:34:29] *** Joins: dale (dale@user/dale)
[03:34:39] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[03:34:47] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[03:34:49] *** Joins: Kabriel (~Kabriel@user/kabriel)
[03:36:50] *** Joins: antoszka-r (~antoni@rozalia.antoszka.pl)
[03:39:28] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[03:40:12] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[03:41:01] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[03:43:03] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[03:45:01] *** Joins: Oladon (~olad@98.43.81.226)
[03:45:41] *** Joins: winningluser (~wl@2601:8c1:80:70d0::756)
[03:51:45] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[03:55:03] <rotateq> Oh noez beach, in the bit-reversal paper Fortran code attacks. ^^
[04:18:32] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[04:19:16] *** Quits: VincentVega (~user@212.97.0.152) (Remote host closed the connection)
[04:35:44] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: WeeChat 3.3)
[04:35:54] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[04:40:32] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[04:43:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:53:18] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:08:51] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[05:21:06] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[05:21:34] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Remote host closed the connection)
[05:21:52] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:9994:56a5:8bf3:96a8)
[05:27:51] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:29:39] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[05:30:10] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:8d95:c576:5699:5e05)
[05:32:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[05:33:00] *** karlosz_ is now known as karlosz
[05:33:10] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[05:34:02] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:36:43] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:9994:56a5:8bf3:96a8) (Read error: Connection reset by peer)
[05:55:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:56:50] *** Joins: Alfr (~Alfr@user/alfr)
[06:07:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:08:36] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[06:11:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:14:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:14:28] <dbotton> If any one would like to try a working sample of my GUI builder - http://clog.botton.com/builder
[06:15:38] <dbotton> has issues but works :) Click builder then new panel and tools properties to play around a bit
[06:15:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[06:16:02] <dbotton> the ability to eval code is off to run the rendered gui
[06:24:37] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Remote host closed the connection)
[06:33:21] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[06:35:51] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9994:56a5:8bf3:96a8)
[06:35:59] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[06:40:13] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9994:56a5:8bf3:96a8) (Ping timeout: 240 seconds)
[06:51:03] *** Joins: paule32_ (~paule32@user/paule32)
[06:51:07] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[06:51:21] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[06:53:03] <White_Flame> dbotton: are there layout tools, or all absolute placement/size?
[06:53:07] *** Joins: paule32__ (~paule32@user/paule32)
[06:53:39] *** Joins: s-liao (~s-liao@101.86.96.154)
[06:54:44] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[06:54:46] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 260 seconds)
[06:55:46] <mfiano> tools -> properties opens an empty window for me
[06:56:00] *** Joins: robin (~robin@user/terpri)
[06:56:37] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 268 seconds)
[06:57:51] *** Joins: paule32 (~paule32@user/paule32)
[06:59:37] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 240 seconds)
[07:01:15] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[07:02:21] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[07:10:13] *** Joins: s-liao (~s-liao@101.86.96.154)
[07:17:23] <dbotton> They are empty till you place a control
[07:17:46] <dbotton> For now pixel placed
[07:17:59] <dbotton> Ie absolute
[07:18:24] <dbotton> Eventually will build in various layouts
[07:18:47] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[07:19:18] <mfiano> I see, pretty cool, but the input lag is absolutely killing me.
[07:20:57] <dbotton> What is amazing is how quick I was able to put this together and the way I can build it out while it is running. I love lisp
[07:21:35] <dbotton> I took some shortcuts like using borders for handles etc
[07:23:24] *** Joins: s-liao (~s-liao@101.86.96.154)
[07:23:43] <dbotton> I now have to figure out round trip code back to gui building as want a Delphi like experience
[07:24:51] <dbotton> Then will get rid of the glitches and kludges
[07:26:37] <dbotton> Also mfiano tool meant to run local is really designed for internet
[07:27:15] <dbotton> Sorry not designed for internet
[07:28:00] <dbotton> Thanks for feedback!!!
[07:30:45] <beach> Good morning everyone!
[07:31:57] <beach> jcowan: We use that clause to determine that conforming code can not observe whether the generic function has been called, so we can avoid calling it in some situations.
[07:40:08] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[07:46:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:59:49] <lisp123> dbotton: Nice work, you are very productive!
[08:00:57] <lisp123> dbotton: Have you considered implementing some of the CLIM GUI paradigms into CLOG? In particular, presentation types where there is a link between the object on screen and an underlying lisp object, both for output to display (which most declarative GUI frameworks do these days) but also for input from user (which I'm not aware of any other GUI platform doing)
[08:01:58] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[08:14:54] *** Joins: semz (~none@user/semz)
[08:26:17] *** Joins: Oladon (~olad@98.43.81.226)
[08:26:53] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[08:32:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:32:33] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[08:33:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:38:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:39:14] *** Joins: s-liao (~s-liao@101.86.96.154)
[08:44:17] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:8d95:c576:5699:5e05) (Ping timeout: 240 seconds)
[08:46:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:47:52] *** Joins: igemnace (~ian@user/igemnace)
[08:59:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[09:00:39] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[09:01:55] *** Joins: aeth (~aeth@user/aeth)
[09:11:39] <blihp> I'm having a problem with package exports not being available in cl-user... is there a way to show what was exported as a sanity check?
[09:12:08] <beach> blihp: What does "not being available" mean?
[09:12:33] <blihp> There is no class named COMMON-LISP-USER::FOO
[09:12:52] <beach> Well, exporting symbols is not enough.
[09:13:28] <beach> You need to type P:FOO if FOO is exported form that other package P.
[09:13:45] <beach> s/form/from/
[09:15:23] <blihp> doh... so what do I need to do to import the exported symbols to cl-user?  I tried use-package but it complains about name conflicts for my distinct class/method names.
[09:15:45] <beach> clhs import
[09:15:45] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_import.htm
[09:15:54] <beach> But you typically don't want to do that.
[09:16:18] <beach> ... because you would typically get a lot of conflicts.
[09:16:39] <blihp> any pointers on the correct way to do things are appreciated.  I'm trying to use existing quicklisp packages as a guide and it's rough going.
[09:17:01] <beach> Just type the package prefix.
[09:17:33] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:18:08] <beach> So what is it that you are doing?  You have a package that you defined yourself, and you are exporting some names from it, and now you want to test some functions with names in that package?
[09:18:40] <blihp> so no widely used way to easily import a subset of symbols into another package (i.e. since you're saying import isn't recommended)
[09:19:07] <beach> Yes, there are ways, but those ways are error prone.
[09:19:40] <blihp> I have what is quickly growing into a collection of packages and I mainly would like to be able to import a common set of symbols (i.e. class and method names only, typically) into another package to avoid needing to prefix the names
[09:19:58] <beach> You can always define your own "test" package, and import both the CL package and your own package.  Then (IN-PACKAGE #:TEST) will let you type the names without a package prefix.
[09:20:31] <beach> If you want to do that, then :USE in your DEFPACKAGE should work.
[09:20:39] <beach> But I am telling you, it is error prone.
[09:20:39] <blihp> ok, so just don't try to do it in cl-user due to name conflicts
[09:21:05] <beach> It is a much better idea to use package-local nicknames, so that you can type a short package prefix.
[09:21:22] <beach> Then the person reading your code can immediately see from which package the symbol originates.
[09:22:06] <beach> And there is no risk of conflict if more than one of the packages you want to use export symbols with the same name.
[09:22:38] <blihp> fair enough, I'll give your suggestion a shot.
[09:44:16] <blihp> same advice when superclass and subclass reside in different packages?
[09:45:42] <blihp> i.e. getting undefined function SUPERCLASS-PKG::FOO from the subclass
[09:47:34] <blihp> (err, that should have been SUBCLASS-PKG::FOO)
[09:47:38] <hayley> Undefined function?
[09:47:59] <blihp> yes, for a slot reader
[09:49:15] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[09:49:48] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:52:02] <beach> blihp: Classes and functions don't reside in packages.  Only symbols do.
[09:52:13] <beach> blihp: You need to refer to the correct symbol.
[09:52:34] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:55:40] <blihp> OK, now I'm confused.  If from cl-user I try to instantiate foo-class I get an error (no class named COMMON-LISP-USER::foo-class) but if I prefix it pkg:foo-class it works.  But now you're telling me it's not in the package?
[09:56:41] <beach> Symbols are in packages, and classes have symbols as names, but classes are not themselves related to packages.
[09:57:42] <beach> When you type (MAKE-INSTANCE 'FOO-CLASS) and you are in the CL-USER package,  you referring to a symbol FOO-CLASS in the CL-USER package.
[09:58:02] <beach> It could have CL-USER as its home package, or it could be imported from some other package.
[09:58:25] <beach> If it is not imported, then the symbol you are referring to is CL-USER:FOO-CLASS.
[09:58:56] <blihp> ok.. I think I'm following so far
[09:59:23] <beach> But if you were in a different package, say P when you did (DEFCLASS FOO-CLASS...) then the name of the symbol naming the class is P:FOO-CLASS, so you must refer to it if you want to find the class.
[10:00:18] <beach> Similarly, if you are in a package Q when you define a subclass of FOO-CLASS, then you need to type (DEFCLASS SUB (P:FOOL-CLASS) ...)
[10:00:53] <blihp> ah, I hadn't prefixed the superclass name
[10:00:55] <beach> If you type (DEFCLASS SUB (FOO-CLASS) ...), then FOO-CLASS will refer to a symbol in Q.
[10:01:07] <beach> It's all about symbols.
[10:01:17] <beach> You always need to refer to the correct symbol.
[10:02:20] <blihp> ok... my previous work with my own packages was over a decade ago and pretty much everything was in a common package which obviously made life simpler
[10:02:59] <beach> Simpler to create, but a nightmare to maintain if overdone.
[10:03:06] <blihp> in this instance, I know this is quickly going to blow out to a fair number of classes so I'm trying to separate things from the beginning to minimize rework
[10:04:19] <blihp> (i.e. I'm using a fair number of external packages, I'm attempting to create some nicer class wrappers of some of the functionality in my superclass package that I can than use in my subclass package(s))
[10:04:59] <blihp> one of the main ones I'm working with is gtk... *not* a fun framework
[10:07:47] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f) (Ping timeout: 268 seconds)
[10:26:24] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[10:27:16] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Client Quit)
[10:31:28] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:33:17] *** Joins: shka (~herr@109.231.0.226)
[10:41:51] <blihp> so in the superclass I needed to define my accessors along the lines of: :reader superclass-pkg::get-foo ... then things seem to work from an accessor standpoint.  This seems rather strange... is there no way (i.e. a global flag perhaps?) to have the accessors default to the package they are defined in or am I doing something backwards?
[10:42:24] <beach> What you are doing is the right way.
[10:42:25] <mfiano> You seem confused about the Lisp Reader
[10:43:20] <blihp> I'm apparently confused by the default behavior as it relates to classes in packages
[10:43:35] <beach> blihp: Classes don't reside in packages.
[10:43:36] <mfiano> A symbol, when it is read for the first time is interned into the current package. Packages, are essentially lookup tables for symbols.
[10:43:41] <beach> blihp: Only symbols do.
[10:45:06] <blihp> beach: sorry for the bad terminology on my part.  What I'm referring to is the general grouping of symbols related to the class, including accessor names.  I'd expect them all to default to the current package.
[10:45:24] <beach> blihp: You need to change your expectations.
[10:45:36] <blihp> lol... apparently.
[10:47:03] <blihp> however, I would argue that this is kind of missing the point on Lisp's part re: OO  (yes, I know it's not really OO in terms of the implementation but I am surprised it isn't faking it better)
[10:47:40] <beach> Common Lisp does not implement "classic" object-orientation.
[10:48:17] <mfiano> class[-centr]ic :)
[10:49:28] <beach> blihp: Traditional object-oriented languages confuse encapsulation and other aspects of object-oriented programming such as inheritance.  Common Lisp have separate mechanisms for those.  The package system takes care of encapsulation.
[10:49:58] <beach> blihp: That way, you can, for instance, have two slots in a class with names (i.e. symbols) from two different packages.
[10:50:23] <mfiano> and SBCL will finally no longer issue a pointless warning about such
[10:50:28] <beach> blihp: If you currently expect traditional object-orientation from Common Lisp, you truly need to change your expectations.
[10:50:42] <beach> mfiano: Happily, yes.
[10:51:39] <mfiano> I think COmmon Lisp as a whole is very easy to grasp once you understand the phases of compilation, and most particularly the Reader.
[10:52:14] <beach> Yes, the basic mechanisms in Common Lisp are quite simple.
[10:52:24] <blihp> beach: I'm really not... I do understand that, for example, methods aren't actually part of the class as it's just a slot-holder
[10:52:24] <mfiano> Packages and symbols make a whole lot more sense, and this confusion vanishes.
[10:52:35] <mfiano> I think this is where blihp needs to spend more time.
[10:53:31] <beach> blihp: Well, with utterances such as "this is kind of missing the point on Lisp's part", it seems you still expect something that isn't there.
[10:54:26] <beach> blihp: In reality, traditional object-orientation is missing the point, because of this confusion.  And that might be why traditional object-orientation is falling out of fashion.
[10:54:41] <blihp> beach: OK, guilty as charged on that front.
[10:54:42] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[10:54:59] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[10:55:13] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[10:55:15] <beach> blihp: The problems people seem to have with traditional object-oriented programming are not present in CLOS, and they seem to be largely due to this confusion.
[10:56:04] <blihp> depends on what you mean by 'traditional' OO.  I've spent a lot of time in both Smalltalk as well as other interpretations of OO. (i.e. C++/Java/Python/Javascript etc.)
[10:56:32] <beach> Yes, all those confuse encapsulation with other mechanisms.
[10:57:00] * mfiano thinks even languages with methods disassociated from classes, but still have arity overloading miss one of the main points of OOP, completely: protocols.
[10:57:15] <beach> Plus, most of them are restricting generic dispatch so a single argument.
[10:57:47] *** Joins: s-liao (~s-liao@101.86.96.154)
[10:57:57] <beach> ... which is so prevalent that they even have special syntax for it.  Go figure!
[11:01:23] <jackdaniel> there was a very good post written by naggum about oop
[11:01:26] <blihp> Smalltalk has protocols, they've just been neglected and abused to the point of becoming meaningless.
[11:01:28] <jackdaniel> let me see if I can find it
[11:02:01] <beach> blihp: As I recall, Alan Kay largely copied the Simula way but saw object-orientation as being the communication between objects located on different computers.  In such a setting, message passing and encapsulation seem reasonable.  But it was never reasonable to copy that idea for objects residing not only on the same computer, but in the same address space.
[11:02:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:03:45] <beach> blihp: So the "traditional object-oriented" programming languages impose unnecessary restrictions.  And that is probably a large part of the reason for the widespread disappointment with that style of object orientation.  Again, Common Lisp has none of those issues.
[11:04:10] <hayley> It is reasonable to encapsulate and use message passing in the same address space, in order to allow for fault tolerance (c.f. Erlang).
[11:04:27] <jackdaniel> here: https://www.xach.com/naggum/articles/3243735416407529@naggum.no.html
[11:04:37] <jackdaniel> it has some very good points that partially overlap with things said here
[11:04:43] <jackdaniel> blihp: ^
[11:04:59] <hayley> If one object/process/thread/&c crashes, it cannot cause much collateral damage, and you can just replace the crashed thing.
[11:05:12] <jackdaniel> it also emphasizes a difference between clos and smalltalk oop (and why what c++ does is not what smalltalk does)
[11:05:13] <beach> blihp: Respecting traditional encapsulation at the same time as creating a maintainable class hierarchy often results in very complex code.  Again, equivalent Common Lisp code can be much simpler.
[11:05:18] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[11:05:53] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[11:06:20] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Remote host closed the connection)
[11:06:40] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[11:10:40] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[11:11:52] <blihp> One thing I'm not understanding is how these arguments relate to my original issue: having to force symbol names into the package they are defined in.  What benefit is there to doing so that I'm missing?
[11:12:13] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[11:12:45] <beach> You are missing the idea that encapsulation is orthogonal to the rest of object orientation.
[11:13:31] <jackdaniel> if you just want to import symbols to cl-user, then type i.e (import 'clim:sheet "CL-USER")
[11:13:43] <jackdaniel> you export from package and import to package
[11:14:14] <beach> jackdaniel: *sigh* Early on, blihp told us that this idea generated conflicts, which triggered the entire discussion.
[11:14:22] *** Joins: frodef_ (~frode@46.212.93.4)
[11:14:31] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[11:14:42] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 260 seconds)
[11:14:46] <jackdaniel> I see, then I won't interfere
[11:15:02] *** Joins: gaqwas (~john@dynamic-077-007-085-126.77.7.pool.telefonica.de)
[11:15:19] <blihp> please interfere, I'm trying to understand.
[11:15:46] <jackdaniel> blihp: you may have multiple symbols with the same name, but they can't reside in the same package, that's why you have conflict
[11:16:32] <jackdaniel> to avoid such conflicts you should use package accessors (or carefuly import symbols to your package if that's your thing) - conflict means that in cl-user is another symbol with the same name - that's why you can't import
[11:17:26] <jackdaniel> but I'm sure that others explained that above (I haven't read full backlog yet)
[11:18:23] <blihp> I get that part of it, which pushed me into explicitly prefixing the package name.  The part that's still throwing me for a loop is why I have to explicitly prefix the package for symbols that I would expect to be defined in the same package.
[11:19:06] <beach> blihp: The Common Lisp implementation can't possible know what you want and change its semantics accordintly.
[11:19:07] <jackdaniel> if they are defined in the same package you are in then you don't have to prefix them and you shouldn't
[11:19:09] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[11:19:23] <beach> *accordingly
[11:19:24] <jackdaniel> do you have some code that shows what you are trying to do?
[11:20:00] <blihp> jackdaniel: please read above... that's exactly what I had to do.
[11:20:14] <blihp> I can whip up an example... where should I post it?
[11:20:22] <beach> blihp: The package of a particular symbol is determine way before any Common Lisp operator such as DEFCLASS is executed.  It is determined when the code is read, ans mfiano pointed out.
[11:20:39] <jackdaniel> blihp: plaster.tymoon.eu
[11:20:40] <beach> s/ans/as/
[11:21:28] <beach> blihp: To conform to your expectation, the entire computation model of Common Lisp would have to be altered.  Therefore, it is easier for you to change your expectations and understand how the Common Lisp computation model works.
[11:22:43] *** Quits: winningluser (~wl@2601:8c1:80:70d0::756) (Quit: nyaa~)
[11:23:03] <blihp> give me a couple minutes...
[11:23:25] *** Joins: treflip (~user@95.79.32.99)
[11:23:36] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:24:15] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[11:24:42] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:26:29] *** Joins: cosimone (~user@93-47-229-223.ip115.fastwebnet.it)
[11:26:35] *** Quits: treflip (~user@95.79.32.99) (Changing host)
[11:26:35] *** Joins: treflip (~user@user/treflip)
[11:35:07] *** Joins: pjb (~pjb@user/pjb)
[11:39:40] <blihp> lol... my example works as expected: https://plaster.tymoon.eu/view/2777
[11:39:48] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:40:13] <jackdaniel> you probably forgot to put in-package somewhere at some point
[11:40:25] <jackdaniel> that's good that you've cleared this up for yourself :)
[11:41:11] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:41:32] <mfiano> jackdaniel: You're the C/CFFI expert I need to speak with
[11:41:49] <jackdaniel> oh, I didn't know that this is my area of expertise, but I'll do my best!
[11:41:54] <blihp> still not cleared up, now I've got to dig around as see what/how else I might have messed up (it looks like I've got the correct in-package at the top of each file)
[11:42:40] <jackdaniel> mfiano: mind that I'm on and off until 11, I may have lags with responses
[11:43:04] <mfiano> For CFFI:FOREIGN-ARRAY-TO-LISP, if I know the pointer contains elements of the foreign "long" type, and I want a specialized array, what should I pass as :element-type? I don't know if there is a correct answer, as my reading suggests "long" in C99 means "at least 32 bits"
[11:45:07] <jackdaniel> isn't that just :long ?
[11:45:52] <jackdaniel> cffi defines mappings from c types to lisp types
[11:45:59] <jackdaniel> some are backend specific, some are shared
[11:46:17] <mfiano> :element-type of :long results in specialization of T
[11:46:24] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e4:b4b6:d0c1:e71c:ed02:25f)
[11:46:49] <jackdaniel> ah, element type in make-array-args (as rest args)
[11:46:57] <mfiano> THat is why I was under the assumption I needed a Lisp type there, as I am creating a Lisp array, and '(signed-byte 64) for example works
[11:47:23] <jackdaniel> yes, that's basically what you should do (if the representation is the same)
[11:47:47] <mfiano> Which?
[11:48:07] <mfiano> I'm confused, because the C standard doesn't give an upper bound on the width of "long"
[11:48:10] <jackdaniel> between "C long" and (signed-byte 64)
[11:48:18] <jackdaniel> yes, it is platform (and compiler!) specific
[11:48:32] <jackdaniel> lisp wouldn't know unless you tell it
[11:48:36] <mfiano> So then any Lisp type I supply would be wrong
[11:48:50] <mfiano> (possibly)
[11:49:29] <jackdaniel> there is foreign-type-size at least in principle
[11:49:58] <jackdaniel> hm, perhaps there is a way in cffi to convert c type to lisp type and vice versa, I just don't know
[11:50:50] <mfiano> There is, with the transform generic functions...but in this case I just needed to know that it was 64 as foreign-type-size returns 8 (bytes)
[11:51:00] <mfiano> Thanks a lot man
[11:51:28] <jackdaniel> I don't feel that I was very helpful but sure ;)
[11:52:03] <mfiano> Well anything is helpful to me. I am a total C/CFFI newbie and I dove into the syscall deep end
[11:52:22] *** Quits: cosimone (~user@93-47-229-223.ip115.fastwebnet.it) (Remote host closed the connection)
[11:52:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[11:52:52] <jackdaniel> when I'm unsure about cffi I'm usually read things in tests/
[11:54:07] <mfiano> Ah good idea. I just implanted the whole manual into my head yesterday.
[11:54:22] <jackdaniel> (and backend-specific implementations, i.e src/cffi-ecl.lisp
[11:54:23] <jackdaniel> )
[11:54:48] <mfiano> One thing that saddens me is that the groveller doesn't seem to work correctly on FreeBSD
[11:55:40] <mfiano> It calls out to /bin/cc and that returns exit code 127. Perhaps it is assuming gcc flags or something. BSD isn't too wild about GNU tools :)
[11:58:45] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[11:59:02] <pjb> mfiano: you could provide a small C function that would return the size of the type: int size_charbits(void){ return CHARBITS;} int size_long(void){return sizeof(long);}  and use that to declare `(signed-type ,(* (size_charbits) (size_long)))
[11:59:16] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[11:59:38] <mfiano> No thanks. I'll stick between my parens.
[11:59:44] <pjb> mfiano: of course, this only report the problem to your choice of C compiler and options to compile this little size library, vs. the target library…
[12:00:02] <pjb> mfiano: indeed, my advice: just say no to ffi.
[12:00:11] <mfiano> I'm writing very OS and libc implementation-specific code, anyhow.
[12:00:26] <jackdaniel> either way portable code should always use types like uint64_t (all available since c99)
[12:01:26] <mfiano> I'm wrapping code that was probably written in the 70's and hasn't changed much. It is nightmarish.
[12:01:29] <jackdaniel> there is an interesting situation, where unsigned long has different representation between unix32bit and unix64bit, and windows64bit represents tit the same as unix32bit (for compatibility :)
[12:01:57] *** Joins: Krystof (~user@81.174.155.115)
[12:02:36] <mfiano> Anyway, I should get to bed. Thanks all
[12:03:32] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:04:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:05:40] <mfiano> Turns out I don't really want a specialized array anyway as it's only an intermediate value. I need a list of lists, as my API expects to be able to destructure the inner lists: these are statistic counters for each of my CPU's: https://i.lisp.cl/zdkHlq.png
[12:05:41] *** jackdaniel is now known as candlejack
[12:06:42] <mfiano> the ugly part works anyway. get the same results from userland tools. off to bed :)
[12:08:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[12:15:20] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:16:00] *** Joins: nature (~nature@45.32.235.173)
[12:16:47] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[12:17:15] *** Joins: Alfr (~Alfr@user/alfr)
[12:17:32] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:20:27] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[12:22:35] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:33:41] *** Joins: s-liao (~s-liao@101.86.96.154)
[12:36:11] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:36:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:40:26] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[12:40:45] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:44:43] <Nilby> mfiano: One could (make-array 10 :element-type `(signed-byte ,(* 8 (cffi:foreign-type-size :long)))) but to avoid copying you might cffi:with-pointer-to-vector-data on implementations that support it.
[12:46:20] <Nilby> The only way I know not to use FFI is to run on Mezzano or Genera.
[12:47:17] *** Quits: gaqwas (~john@dynamic-077-007-085-126.77.7.pool.telefonica.de) (Ping timeout: 240 seconds)
[12:47:30] * hayley continues to idly wonder if a CL "unikernel" would be a good way to grab attention for CLOSOS development.
[12:48:23] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:50:23] <Nilby> hayley: I tried doing a unikernel with bsd rumpkernel and sbcl, and sadly it's still FFI as well as being lots of problems. Now I'm just focused on eliminating everything above the kernel. But I do hope someone would work it out better than me.
[12:50:49] <hayley> I mean that the "kernel" would be written in CL too, but it would be just enough to run Hunchentoot or something.
[12:52:12] <hayley> So, a single-user system without any new user-facing design. The system might still use a traditional filesystem, or it might persistent memory, I don't know.
[12:53:57] <Nilby> The heroic froggey already did it, but also: the minimum of graphics cards and usb is a nightmare.
[12:54:24] <hayley> No graphics cards, and no USB then.
[12:54:46] <hayley> You'll get a 80x25 terminal and you will enjoy it(tm).
[12:55:40] <Nilby> I love command line and tui, but can you even buy a machine with a non-usb serial port anymore?
[12:56:41] <hayley> Yep. I just had to buy a little "breakout" board, which connects to a header on the motherboard and provides the right connectors on the case.
[12:56:59] <Nilby> I'm getting closer to a Lisp busybox every day I don't get distracted.
[12:57:07] <hayley> Not unlike <https://www.scorptec.com.au/product/cables-&-adapters/parallel-&-serial/81873-plate9m16> for example.
[13:00:35] *** Joins: igemnace (~ian@user/igemnace)
[13:03:04] <Nilby> hayley: sounds fun. I would run a repl off of JTAG if necessary
[13:07:24] <Duuqnd> My motherboard seems to have some kind of serial interface on it (I'm guessing it's JTAG)
[13:10:56] <Duuqnd> Or perhaps it's the same connector that was just mentioned, I really should read before I type.
[13:11:44] <hayley> I would suspect this sort of connector, given that it is not embedded hardware.
[13:12:46] <hayley> FWIW you can also buy PCI cards with more serial ports (but it turned out I really just needed the internal connector exposed for my application). Scared the hell out of the guy working at the computer parts store.
[13:15:25] <Duuqnd> What do you think he was more scared about, the fact that they still sold it or that you needed it?
[13:15:34] <hayley> The latter.
[13:16:44] <hayley> I had soldered up an OPT2LPT board (which is a breakout board for the YM3812 sound chip over parallel printer port, like the Ad Lib card is a breakout board over ISA port), and got it playing some music.
[13:17:22] <Duuqnd> Wouldn't that be OPL2LPT?
[13:18:17] <hayley> Yes, usually the OPL2LPT is the OPL2LPT.
[13:19:57] <Duuqnd> Well, you wrote OPT above
[13:20:08] <Duuqnd> That's why I asked
[13:20:16] <hayley> Oh, whoops.
[13:20:28] <hayley> I managed to miss the typo twice then.
[13:20:56] <Duuqnd> But yeah, I've heard of those printer port AdLibs and have considered getting one at least a few times
[13:21:04] <candlejack> it is not a type then but rather subcioncious urge to create opt2lpt board
[13:22:28] <hayley> I suspect it'd be the easiest "modern" sound card to interface, sadly.
[13:24:15] <Nilby> that evokes the rather harsh sound memory of my friend's musical dot matrix printer, which I think could handle general midi through some kind of soundblater parallel port rig
[13:24:23] *** Quits: nature (~nature@45.32.235.173) (Remote host closed the connection)
[13:24:26] <Duuqnd> In terms of easiest to get sound out of, maybe a resistor ladder DAC on the printer port would be even easier
[13:25:39] <hayley> I think those have been made commercially, actually. Off to #lispcafe still...
[13:25:51] <Duuqnd> right
[13:30:26] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[13:43:33] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[13:45:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:47:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:47:03] *** Lord_of_Life_ is now known as Lord_of_Life
[13:49:11] *** Joins: s-liao (~s-liao@101.86.96.154)
[13:53:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:58:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:10:11] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[14:22:01] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[14:37:09] *** Joins: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073)
[14:37:24] <cgenie[m]> hello, is there any advantage of using cmd (https://github.com/ruricolist/cmd) over inferior-shell (https://github.com/fare/inferior-shell) ?
[14:42:13] <flip214> cgenie[m]: UIOP may provide the same functionality, and is much more common.
[14:43:10] <flip214> https://gitlab.common-lisp.net/asdf/asdf/blob/master/uiop/README.md - LAUNCH-PROGRAM, RUN-PROGRAM
[14:44:14] <cgenie[m]> ah ok thank you
[14:44:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[14:45:34] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[14:56:07] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[14:57:56] *** Quits: Guest6030 (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1) (Quit: WeeChat 3.3)
[14:58:21] *** Joins: unyu (~pyon@user/pyon)
[15:00:11] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Remote host closed the connection)
[15:00:12] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[15:21:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:24:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:25:23] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[15:26:48] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[15:27:37] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:27:55] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[15:28:07] *** Joins: amb007 (~a_bakic@160.133.22.93.rev.sfr.net)
[15:28:12] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[15:34:43] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[15:35:20] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[15:35:48] *** Joins: cosimone (~user@93-47-229-223.ip115.fastwebnet.it)
[15:36:03] *** Quits: amb007 (~a_bakic@160.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:36:15] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:46:37] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[15:49:54] *** Joins: s-liao (~s-liao@101.86.96.154)
[15:50:04] *** Quits: jgkamat (~jay@user/jay) (Quit: ZNC - https://znc.in)
[15:50:18] *** Joins: jgkamat (~jay@user/jay)
[16:01:28] *** Joins: tyson2 (~user@70.31.33.162)
[16:25:57] *** Joins: igemnace (~ian@user/igemnace)
[16:27:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[16:40:10] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[16:52:37] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[16:55:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:58:05] *** Quits: lisp123w (~user@80.227.170.170) (Remote host closed the connection)
[17:00:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[17:03:19] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[17:03:36] *** Joins: taiju (~taiju@240b:253:ec40:2400:19c3:7b50:512d:d28)
[17:18:04] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[17:20:25] *** Joins: Bike (~Glossina@71.69.170.70)
[17:20:25] *** ChanServ sets mode: +o Bike
[17:22:14] *** Joins: pve (~pve@37-136-70-224.rev.dnainternet.fi)
[17:27:46] *** Joins: s-liao (~s-liao@101.86.96.154)
[17:33:03] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[17:35:14] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:42:01] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[17:52:35] *** Joins: xsperry (~xs@user/xsperry)
[17:58:32] <dbotton> lisp123: I do have that on my list and and
[17:59:01] <dbotton> At some point will explore adding it to CLOG
[18:02:21] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[18:04:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:06:32] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[18:19:32] <Xach> dbotton: clog/tools error - see http://report.quicklisp.org/2021-12-16/failure-report.html
[18:25:13] <dbotton> thanks, looking now
[18:25:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:26:50] *** Quits: tyson2 (~user@70.31.33.162) (Remote host closed the connection)
[18:28:41] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[18:28:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[18:29:53] <dbotton> Xach how much time is there to fix?
[18:30:30] <Xach> one second! oh crap! too late!
[18:30:33] <Xach> dbotton: any time
[18:31:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[18:33:19] <dbotton> ok :) The way it is being currently used/built it works (in case the too late real :) )
[18:33:30] *** Joins: aeth (~aeth@user/aeth)
[18:33:56] <dbotton> I'll make a simple fix and then really should have restructured things awhile ago
[18:34:06] <Xach> dbotton: there's no rush, thanks for looking at it
[18:40:20] <dbotton> Xach fix in, thank you, I can't tell you how much I appreciate an alternate build going on to catch stuff, besides quicklisp itself Thanks!!
[18:40:53] <dbotton> I'll restructure stuff in coming weeks.
[18:42:43] *** Joins: notzmv (~zmv@user/notzmv)
[18:53:27] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:55:33] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[18:56:59] *** Joins: aartaka (~aartaka@5.1.53.225)
[19:01:33] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 256 seconds)
[19:06:57] *** Joins: Rabenhaar (~Rabenhaar@85-22-13-184.ip.dokom21.de)
[19:09:43] *** Joins: mingus (~jan-magnu@auth-147-125.anyconnect.uib.no)
[19:09:59] *** Joins: igemnace (~ian@user/igemnace)
[19:11:46] *** Parts: Rabenhaar (~Rabenhaar@85-22-13-184.ip.dokom21.de) ()
[19:23:25] *** Quits: mingus (~jan-magnu@auth-147-125.anyconnect.uib.no) (Ping timeout: 240 seconds)
[19:23:27] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[19:24:17] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[19:25:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:29:46] *** Quits: random-nick (~random-ni@87.116.167.125) (Quit: quit)
[19:31:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[19:33:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:34:40] *** Joins: random-nick (~random-ni@87.116.181.93)
[19:40:05] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:47:17] *** Joins: makomo (~makomo@user/makomo)
[19:48:39] *** Joins: Oladon (~olad@98.43.81.226)
[19:52:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:52:52] <ori> Hi, lisp beginner here. Can CASE have a default clause?
[19:53:06] <Bike> yes, marked t or otherwise
[19:53:07] <Bike> clhs case
[19:53:07] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm
[19:54:00] <ori> cool, thank
[19:54:02] <ori> *thanks
[19:56:43] *** Quits: specbot (~specbot@common-lisp.net) (Read error: Connection reset by peer)
[19:56:43] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[19:57:04] *** Joins: minion (~minion@common-lisp.net)
[19:57:06] *** Joins: specbot (~specbot@common-lisp.net)
[19:57:46] <lisp123> dbotton: Great, that sounds good
[20:00:20] *** Joins: igemnace (~ian@user/igemnace)
[20:05:19] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[20:09:24] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[20:11:42] *** Joins: lisp123_ (~lisp123@45.86.202.12)
[20:14:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[20:24:02] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:26:03] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[20:32:12] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ff:b2cc:d0c1:e71c:ed02:25f)
[20:33:37] *** adeht is now known as _death
[20:35:34] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e4:b4b6:d0c1:e71c:ed02:25f) (Ping timeout: 268 seconds)
[20:39:09] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:40:44] <pjb> ori: also, it has a default default clause that just returns nil: (case 42) #| --> nil |#
[20:41:42] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:42:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:49:26] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:52:39] <rotateq> ori: hi, glad to have you on board for this wonderful journey :)
[20:54:13] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[20:57:04] <ori> thank you!
[20:58:40] <rotateq> you can also use AND and OR for using in case if a thing matches
[21:00:10] *** Quits: lisp123_ (~lisp123@45.86.202.12) (Remote host closed the connection)
[21:00:33] *** Joins: Oladon (~olad@98.43.81.226)
[21:00:43] *** Joins: lisp123 (~lisp123@45.86.202.12)
[21:04:56] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 245 seconds)
[21:12:14] <pjb> rotateq: how so?
[21:21:02] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[21:24:34] <Guest74> well and is just a list of things.
[21:37:31] <Guest74> oops, or.
[21:39:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:43:18] *** Joins: lisp123 (~lisp123@45.86.202.12)
[21:45:51] *** Joins: Catie (~user@user/catie)
[21:53:42] <rotateq> pjb: not?
[21:54:15] <rotateq> (case x ((and foo bar) (do-this)) ((or foo bar) (do-that)))
[21:55:00] *** Quits: lisp123 (~lisp123@45.86.202.12) (Remote host closed the connection)
[21:58:36] *** Joins: mingus (~jan-magnu@auth-147-125.anyconnect.uib.no)
[21:59:22] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[22:00:33] <Guest74> ? what is x?
[22:00:46] <Guest74> what is foo? bar?
[22:02:45] <White_Flame> case has an implicit OR when given a list of keys, since it's doing EQL tests
[22:03:00] <White_Flame> *a list of keys in a single clause
[22:05:10] <White_Flame> oh, "selected by matching the test-key on the basis of its identity", so more EQ
[22:05:39] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:07:07] <Guest74> i think rotateq: might be thinking of cond
[22:07:23] <Guest74> though that still doesn't make sense.
[22:07:25] *** Quits: mingus (~jan-magnu@auth-147-125.anyconnect.uib.no) (Ping timeout: 256 seconds)
[22:10:14] <candlejack> rotateq: I think that you have confused case with typecase
[22:10:52] <candlejack> for example (and integer (eql 42))  is a type specifier
[22:27:03] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:30:11] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[22:44:27] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:45:48] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ff:b2cc:d0c1:e71c:ed02:25f) (Read error: Connection reset by peer)
[22:48:18] <Alfr> White_Flame, it's eql not eq.
[22:50:59] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Remote host closed the connection)
[22:51:14] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[22:55:04] <rotateq> ack! i hate it when my head throws around things ^^ thanks people
[22:55:49] <rotateq> guest74: it does, just you have to use imagination :)
[22:56:14] *** Joins: lisp123 (~lisp123@45.86.202.12)
[23:01:15] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 256 seconds)
[23:01:25] <pjb> rotateq: as White_Flame said, (mapcar (lambda (x) (case x ((and foo bar) '(do-this)) ((or foo bar) '(do-that)))) '( and foo bar baz)) #| --> ((do-this) (do-this) (do-this) nil) |#
[23:01:43] <rotateq> i apologize
[23:02:11] <pjb> No problem. Now just go code review all your code for ANDs and ORs in your CASEs.
[23:02:49] <rotateq> right, of course
[23:04:34] <pjb> And indeed, as candlejack said, TYPECASE takes type specifiers. But you better order them correctly.  (subtypep '(and t1 t2) '(or t1 t2)) so ANDs before ORs.
[23:05:14] <pjb> While CASE can jump to the right branch immediately, TYPECASE has to test each type.  (but since they're known at compilation time, some optimization is still possible).
[23:05:40] <rotateq> yes sorry i also had that in mind
[23:07:32] <rotateq> sometimes by accident violating my own rules to be reminded by you smart people :3
[23:23:45] <semz> Amusingly enough, an OR in a CASE would almost work since CASE can take a list of objects. (or foo bar) matches 'foo and 'bar (but also 'or...)
[23:24:40] <pjb> Some years ago, I displayed this picture on Textronics 4014 xterm: http://www.informatimago.com/~pjb/files/images/tek4014.png
[23:25:12] <rotateq> semz: thanks for the backup ^^
[23:25:29] <rotateq> oho looks cool
[23:25:34] <rotateq> really retro
[23:27:07] <pjb> In lisp of course.  But I don't have the code around.
[23:27:23] <Alfr> semz, and what about (and ..)? x is in some superposition state? xD
[23:27:45] <rotateq> of course! what else?
[23:27:55] <pjb> Alfr: it would do the same as with or, but accept AND instead of OR.
[23:28:16] <semz> Alfr clearly this is important for (and nil ()), what with being a symbol and a list at the same time and all
[23:28:17] <rotateq> maybe i would ask you the next days again for the COMEFROM code of you
[23:29:32] <semz> Jokes aside, I *have* been bitten by (case foo (nil ...)) before.
[23:29:57] <Alfr> pjb, please don't take that question of mine above seriously.
[23:31:01] <Alfr> semz, yeah, and all will work out nicely unless you look at it.
[23:37:39] *** Joins: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a)
[23:57:45] *** Joins: lisp123 (~lisp123@45.86.202.12)
