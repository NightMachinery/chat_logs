[00:46:40] *** Joins: subbu (~subbu@user/subbu)
[00:47:58] *** Quits: subbu (~subbu@user/subbu) (Client Quit)
[00:48:29] *** Joins: subbu (~subbu@user/subbu)
[01:09:59] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[01:30:18] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[02:48:20] <byteit101[m]> enebo: you have windows, right? can you reproduce this? I can't on linux: https://github.com/jruby/jrubyfx/issues/128
[02:48:49] <enebo[m]> byteit101: I don't have 17 but I will have to set something up in the morning I guess
[02:48:57] <enebo[m]> I also need to get a packaged javafx
[02:49:00] <byteit101[m]> I recommend zulu
[02:49:01] <enebo[m]> I think?
[02:49:34] <byteit101[m]> zulu 17 has a "JDK FX" with it pre-packaged
[02:49:47] <byteit101[m]> I've migrated to only using zulu for fx stuff, much easier
[02:49:47] <enebo[m]> cool
[02:49:48] <enebo[m]> oh I see and he is using zulu too
[02:49:53] <enebo[m]> I will try to repro in the morning
[02:49:57] <headius> enebo: 
[02:49:57] <headius> https://github.com/ruby/win32ole/issues/12
[02:50:23] <headius> byteit101: that is a nice all in one option, maybe we should recommend it in jrubyfx
[02:50:26] <enebo[m]> blerg
[02:50:38] <headius> enebo: get to work
[02:50:48] <byteit101[m]> Yes, I was going to do that when 2.0 is released
[02:50:53] <enebo[m]> haha I think we can eventually get that in but I don't find it very pressing
[02:51:05] <headius> actually the way I'm approaching some of these JRuby ext gems will be to have a jruby-whatever version of the gem and release a -java of the stdlib gem that depends on it
[02:51:30] <headius> in some of these cases we already have our own gem for it, like openssl
[02:51:32] <enebo[m]> ah yeah
[02:51:34] <headius> then we are not completely beholden to the ruby/* repo
[02:52:25] <enebo[m]> My main issue is it is not trivial to build it since I built it so long ago and now that I think I can use a community edition of VS to build it we can make it simpler to build
[02:52:30] <enebo[m]> but that may take days and I just don't think it is too important
[02:52:54] <enebo[m]> we can just bundle what we have with no ability to build it from source
[02:53:17] <enebo[m]> Windows may still be but was so lame because they had no portable scripted way to build shit
[02:53:41] <enebo[m]> I think that has changed now though (or I think it has).
[02:54:38] <enebo[m]> There was a reason beyond needing header files (which used to not be freely distributed) where I had to use icc to build the jni piece
[02:54:49] <enebo[m]> anyways.  thanks for making the issue anyways.  It will happen but not until 9.4 is out
[02:56:59] <headius> yeah there are a half dozen or more gems that we need answers for
[02:57:01] <headius> this is a low priority
[02:57:17] <enebo[m]> I marked some issue for 9.3 this morning.  That elon one not getting all the data may be our big break on the openssl problem (since it appears we are not getting all data from the network connection)
[02:57:17] <headius> nobody installs and builds the gem on Windows... they use the one that's shipped
[02:57:23] <headius> and our users can install the prebuilt jruby version if they need it
[02:57:46] <headius> aha yeah that could be a good pointer
[02:58:11] <headius> I will push first commit for stdlib update to a PR shortly
[02:58:33] <headius> updated gems and I went through the list and added commented entries for anything we can't use the gem yet, with links if there's an issue or PR
[02:59:20] <headius> a few more libs moved out to gems, some defaults moved to bundled, and some were just deleted
[02:59:36] <enebo[m]> I am curious if anything changes in test results after that
[02:59:51] <enebo[m]> we are at 237 or so for spec:ruby:fast which has some stdlib in it
[03:00:42] <headius> yeah could help
[03:00:59] <enebo[m]> test:mri:stdlib has an asanine amount of failures :)
[03:02:19] <byteit101[m]> btw got rather busy this week, should have more time friday or the weekend to fix a few bugs and clean up the @ivar pr
[03:02:30] <byteit101[m]> the comments on the config seem reasonable
[03:02:47] <byteit101[m]> though I would like to know the best exception class to use for the binder failures
[03:02:47] <enebo[m]> see ya all tomorrow
[03:03:00] <enebo[m]> byteit101: I will try zulu out in the morning
[03:03:05] <byteit101[m]> thanks! Just commented on the issue
[03:08:33] <headius> new time gem depends on date (native ext) and new open-uri gem depends on stringio (native ext)
[03:08:34] <headius> so those need to get bumped up in priority
[03:20:25] <headius> git st
[03:20:32] <headius> oops
[03:27:20] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[06:40:59] <byteit101[m]> how do I require jar-dependencies jars? lib/foo_jars.rb isn't being generated with lock_jars
[07:09:18] <byteit101[m]> egads, using jar-dependencies with 9.3.3 gives 9.1.2 errors!
[07:38:57] <headius> byteit101: yeah it is still using an old JRuby... need to get that updated
[07:39:53] <byteit101[m]> Interesting, seems to be afffected by which java I'm using. System java: modern one, non-system (using path+java_home env vars) uses old jruby
[07:40:36] <byteit101[m]> Both 11
[07:41:28] <headius> well that's unexpected
[07:44:46] <byteit101[m]> yea, I encountered issues with jbundler after upgrading  a project from 9.2.? to 9.3.3, so moved to jar-dependencies, but I've had so many issues
[07:44:56] <byteit101[m]> right now none of my gems are being required
[07:45:15] <headius> hmm
[07:45:24] <headius> I am not familiar with the guts of those libraries since they were mostly maintained by mkristian
[07:45:45] <headius> he has not been available as much so they have started to rot a bit
[07:47:17] <byteit101[m]> oh if you are around, what's a good exception (or exception wrapper) for binder errors (re my ivar pr)?
[07:48:15] <headius> binder errors?
[07:48:27] <byteit101[m]> MethodHandles/Binder
[07:49:16] <headius> ah I see
[07:49:17] <headius> https://github.com/jruby/jruby/pull/7012/files#diff-657d0aaf7fba4fbea21ac0d258973d43777f7ce24450fac5e04c97cb33637752R99
[07:49:18] <headius> and below
[07:49:50] <headius> we should not see these in normal use so I would throw a Ruby RuntimeError wrapping them
[07:50:17] <headius> with some appropriate "this is a bug" text
[07:50:17] <byteit101[m]> yes, those
[07:50:18] <byteit101[m]> Ok, thanks!
[07:50:23] <headius> we control this class and the field so these should not happen
[07:52:41] <byteit101[m]> Did bundler 2 stop requiring files automatically? using jbundler+bundler1 I didn't need to do anything to get my gems
[07:57:16] <byteit101[m]> Are there module reasons we can't generate a class in arbitrary packages?
[07:57:44] <byteit101[m]> ex to generate a subclass that calls a package-private constructor?
[07:58:26] <headius> module reasons, yes
[07:58:46] <headius> Not sure about bundler, show me an example of what you mean?
[08:04:24] <byteit101[m]> Previously, using jbundler+bundler1:
[08:04:25] <byteit101[m]> require "bundler/setup"
[08:04:25] <byteit101[m]> require "jbundler"
[08:04:25] <byteit101[m]> # now all jars & gems have been required
[08:05:35] <byteit101[m]> Now, uisng jar-dependencies+bundler2:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/9e6e1a14a1bebd4703c33ed09f473fba665a9d40)
[08:06:02] <headius> ah isn't the autorequire optional now?
[08:06:17] <headius> gem "blah", require: true
[08:06:47] <byteit101[m]> Ah! I use bundler so infrequently I don't know, I'll try that
[08:06:56] <byteit101[m]> Wait, how would that work in the gemspec?
[08:06:59] <headius> hmm though I mostly see require: false so maybe that was just added to turn it off
[08:07:23] <headius> oh if getting them from gemspec, hmm
[08:08:25] <byteit101[m]> I saw 'Bundler.require(:default, :development)' is a thing, but that didn't do anything for me
[08:08:39] <headius> https://stackoverflow.com/questions/19295815/bundler-require-doesnt-require-dependencies-which-are-in-the-gemspec
[08:09:15] <headius> first answer makes it sound like you are expected to require the things you set as dependencies
[08:09:16] <headius> this may have changed in bundler 2
[08:10:12] <byteit101[m]> Ah drat, ok
[08:10:17] <byteit101[m]> explains why
[08:13:47] <byteit101[m]> It's wierd I never use bundler, always directly requiring, then I saw this old project didn't do that, and worked until I upgraded. Oh well
[08:14:37] <headius> yeah I guess it makes sense, if you have it as a dependency you should probably require it where you use it
[08:22:29] <byteit101[m]> Oh, are you aware the jruby wiki isn't generally googleable?
[08:22:49] <headius> the one on github?
[08:22:57] <headius> what makes it not googleable?
[08:23:26] <byteit101[m]> I'd been seeing what I thought was seo spam recently
[08:23:29] <byteit101[m]> but it's not
[08:23:39] <headius> I admit I do not see any hits in the first pages
[08:24:16] <byteit101[m]> I kept getting resutls from https://github-wiki-see.page/ thought it was spam, but it's actually, well read it
[08:24:51] <headius> https://github.com/github/feedback/discussions/4992
[08:25:01] <headius> yeah I just found that too
[08:25:48] <byteit101[m]> It would explain why I always have difficulty googling jruby problems
[08:26:44] <headius> there's some text in the issue linked there that restricting it to contributor edits only would make it indexable
[08:27:18] <headius> they allow pages sites to be indexed but of course those are not publicly editable
[08:27:33] <headius> this is probably the restriction we would have to live with and getting this to index would be very nice
[08:28:21] <byteit101[m]> I have no idea the feasability of this, but you could also do what gh-wiki-see does and proxy it from jruby.org
[08:28:38] <headius> yeah possibly, or clone the wiki repo and republish
[08:28:44] <headius> periodically pull
[08:28:56] <headius> or just make a wiki collaborator group and restrict it
[08:29:16] <headius> I'm going to restrict it for now since we don't get many external contribs
[08:29:16] <headius> I'll add whoever wants to the list
[08:32:41] <headius> oh wat
[08:32:42] <headius> "Restrict editing to users in teams with push access only"
[08:32:54] <headius> so you have to be able to push to the repo to edit the wiki with this setting
[08:32:54] <headius> that's absurd
[08:43:53] <headius> I switched it and I'm in google search console to request it be indexed
[08:45:01] <headius> according to the tool it can be indexed now so fingers crossed
[08:45:27] <headius> it had the other pages indexed but blocked by robots.txt, and does not say that now for the top level page I requested to be indexed
[08:46:59] <byteit101[m]> Cool
[09:55:31] <headius> ok I updated all gems in the 3.1 issue with checks or links to the issue blocking us from using them
[09:55:39] <headius> https://github.com/jruby/jruby/issues/7015
[09:56:18] <headius> we now copy only a handful of files out of our cruby stdlib fork so I'm thinking this is the time to stop using the fork and consider the ones in JRuby repo canonical, until we can incorporate them in the appropriate gems
[10:01:38] <headius> Monitor needs a native port: https://github.com/jruby/jruby/issues/7041
[10:08:19] <headius> enebo: you went through the 3.0 and 3.1 issues marking completed items, could you do that for 2.7 as well?
[10:08:23] <headius> https://github.com/jruby/jruby/issues/6464
[10:08:34] <headius> There's some overlap because patterns were there but experimental, argument changes were starting to happen, etc
[10:32:41] <byteit101[m]> headius: https://github.com/jruby/jruby/pull/6534 Is that not what 7041 is about?
[10:33:03] <headius> Wow
[10:33:24] <headius> Yup I did it a year ago
[10:33:45] <headius> Guess I got overzealous looking at unchecked features in those lists
[10:34:14] <byteit101[m]> :-D
[10:34:16] <headius> In 9.3 even 😁
[10:35:30] <headius>  Maybe that means it's time to sleep
[10:35:35] <headius> Ttfn
[10:42:49] *** Quits: nilsding (~nilsding@user/nilsding) (Quit: Client limit exceeded: 20000)
[14:06:11] *** Joins: adam120 (~adam12@about/ruby/adam12)
[14:08:15] *** Quits: adam12 (~adam12@about/ruby/adam12) (Ping timeout: 256 seconds)
[14:08:15] *** adam120 is now known as adam12
[17:48:30] <enebo[m]>   headius That day I did do 2.7 but I have fixed stuff since then.  Let me see if I can mark it off
[17:49:49] <enebo[m]> yeah in fact I had already marked pattern matching as done on that issue
[17:50:19] <enebo[m]> I didn't do the kwarg checkboxes because at the time I didn't spend the time to figure out what is transitional and done but I will review those now
[17:52:00] <headius> Yeah those were ones that stood out for me
[17:54:51] <enebo[m]> Almost done.  Main issue is most of them fail for us but they also fail for 3.0/3.1 so I have to make sure we fail succeed same way
[17:54:52] <enebo[m]> almost done though
[17:56:14] <enebo[m]> ok we are cool as far as complaining on 2.7 args the same way as 3+
[18:03:12] <enebo[m]> heh it basically says we are 1/2 done on 2.7 but nearly everything unmarked is from stdlib updates and internal VM features
[18:04:05] <enebo[m]> we probably should remove checkboxes on RubyVM and internals updates since we obviously will never be doing that stuff
[18:24:57] <headius> yeah I will review today and remove things that are clearly not going to happen
[18:25:01] <headius> or just remove checkboxes anyway
[18:25:19] <headius> most of master stdlib is updated... just the few things we copy from our fork left
[18:25:48] <headius> there's few enough now I'm not sure maintaining the fork is useful... I will consider that but most of the remaining items are going to come from gems once we get jruby support merged over
[18:37:13] <headius> enebo: https://github.com/jruby/jruby/pull/7044
[18:37:30] <headius> quick stab at foo(&)
[18:39:38] <headius> I did not see any specs for this
[18:42:06] <enebo[m]> Yeah I am not sure how I would have added that
[18:42:24] <headius> it was failing because it was a blockpass with an argument node, something we have never had before
[18:42:32] <headius> so I just check for that case and reload the incoming block
[18:42:37] <enebo[m]> That I think is fine but it is a little unsatisfying because the intent is weird...ArgumentNode just happens to only be '&'
[18:43:16] <enebo[m]> I already knew why it was not working but was not too into doing it this way but I think this is literally the only way this would show up (& is the only ArgumentNdoe we can get)
[18:43:27] <headius> yeah that's what I was hoping
[18:43:40] <headius> it's clearly not something the builder has had to deal with before so this is a new case
[18:44:15] <enebo[m]> yeah.  So perhaps just put a comment on that if saying this is for '&' and it is the only case where it happens
[18:44:31] <enebo[m]> I did not do this fix because I figured I would fix this in the AST but that can be done later
[18:45:03] <enebo[m]> when I say figured I mean I am not sure how much work that is and it tired me out thinking about it :)
[18:46:51] <headius> I will narrow it to just the '&' case so we get proper errors if something else sneaks in there later
[18:47:01] <enebo[m]> ah great idea
[18:50:16] * headius sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/14dfd11c98cd500c00a0bc45b003f7ab380deb03
[18:50:52] <headius> guess we don't have enough smarts to skip the %v_0 but it's fine
[18:53:12] <headius> enebo: you given any thought to the masgn order of operations change?
[18:54:49] <enebo[m]> headius: I have looked at it but I have not started on it
[18:55:17] <enebo[m]> Our masgn code is isolated so this is largely just walking our builds in the same order
[18:56:16] <enebo[m]> This is an issue I plan on visiting once we get most errors down because I do not see a lot of people noticing this and there are not many tests for it
[18:56:27] <enebo[m]> It is also largely going to be a one or two method change in builder
[19:02:58] <headius> this Kernel.load module thing will be a larger change for us
[19:03:17] <headius> we propagate the wrap boolean all the way into the Library interface
[19:03:47] <headius> I started to attempt it but then I hit 
[19:03:49] <headius> library.load(runtime, wrap)
[19:05:23] <enebo[m]> yeah yuck
[19:52:04] <headius> I pushed a couple more minor 3.1 things
[19:52:05] <headius> going back to stdlib and test updating now
[20:26:18] <headius> project for someone: https://github.com/jruby/jruby/issues/7045
[21:12:04] <headius> enebo: ok, stdlib and tests are updated from 3.1
[21:12:25] <enebo[m]> ah nice
[21:12:26] <headius> several files we had diffs for are now completely gone from CRuby repo so I have removed them from our sync tool
[21:12:41] <headius> unicode_normalize only has some unicode table sources left in CRuby (see above issue) but I filed a bug to get that moved out to a gem
[21:12:43] <headius> remaining diffs against 3.1 are here: https://gist.github.com/headius/2e3928e8a96c1a86cd887e37da78b844
[21:12:58] <headius> jruby-ruby_3_1_0 branch pushed to our fork but we are close to dumping it altogether
[21:27:05] <headius> kares: I proposed a simpler option for getting the openssl gem to install on JRuby: https://github.com/ruby/openssl/issues/20#issuecomment-1022872855
[21:27:25] <headius> if you and enebo agree with that we could move forward adding a -java version of the openssl gem that just depends on jruby-openssl
[21:42:02] <enebo[m]> headius: I wrote a comment and I think that is a good idea
[23:38:54] <enebo[m]> byteit101: I installed zulu with JDK FX and I see the same problem as reported
[23:39:16] <byteit101[m]> oh "good"
[23:39:19] <enebo[m]> byteit101: I can see the .mods for jrubyfx in modules dir in the distro
[23:39:43] <enebo[m]> haha
[23:40:09] <byteit101[m]> must be a windows issue then
[23:40:32] <enebo[m]> I could maybe try a simple JavaFx Java program and see if that works
[23:40:53] <enebo[m]> I notice in the zulu downloads it says 2012r2 for platform version.  I am on windows 10
[23:41:32] <enebo[m]> but I saw no other versions and the java part of this works so I am just throwing it out as something which made me wonder
[23:42:38] <enebo[m]> Did modules get more mandatory in Java 17?
[23:42:53] <enebo[m]> Looking at this: https://foojay.io/today/a-javafx-app-on-zulufx-in-60-seconds/
[23:43:10] <enebo[m]> it appears they are recommending making a module-info.java to use javafx module
[23:43:35] <byteit101[m]> I disnt have to --add-opens in my testibg on 17 with those two samples
[23:45:01] <byteit101[m]> I do with the fxml sample though
