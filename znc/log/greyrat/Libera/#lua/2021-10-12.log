[00:02:08] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:06:50] *** Joins: kiril (~kiril@85.91.153.163)
[00:12:03] *** Quits: magla (~gelignite@55d44679.access.ecotel.net) (Quit: Stay safe!)
[00:15:08] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:17:25] *** Joins: kurfen (~kurfen@195.216.219.90)
[00:18:49] *** Joins: kiril (~kiril@85.91.153.163)
[00:25:01] *** Joins: xqt (~xqt@user/xqt)
[00:29:28] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[00:41:03] *** Quits: kurfen (~kurfen@195.216.219.90) (Quit: WeeChat 2.3)
[00:46:42] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:48:41] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[00:51:29] *** Joins: kiril (~kiril@85.91.153.163)
[00:55:42] *** Joins: aquanite (~aquanight@174-126-159-166.cpe.sparklight.net)
[00:56:43] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 250 seconds)
[00:56:43] *** aquanite is now known as aquanight
[01:06:24] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[01:39:41] *** Joins: pony (~ed@101.100.135.45)
[01:55:08] *** Quits: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr) (Quit: bye)
[02:13:17] *** Joins: xqt (~xqt@user/xqt)
[02:17:52] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[02:34:10] *** Joins: pizdets_ (~pizdets@183.182.114.60)
[02:34:41] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:34:48] *** Quits: pizdets (~pizdets@183.182.111.226) (Ping timeout: 250 seconds)
[02:35:52] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[02:36:46] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 245 seconds)
[02:51:51] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[03:03:04] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[03:03:33] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[03:29:25] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[03:40:02] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[03:41:58] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:55:07] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3015-1685-7ac7-6698.res6.spectrum.com) (Read error: Connection reset by peer)
[03:56:06] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[04:01:33] *** Joins: xqt (~xqt@user/xqt)
[04:02:22] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[04:06:10] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[04:10:54] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Quit: WeeChat 3.2)
[04:43:52] *** Quits: w0ng (~w0ng@103.212.227.181) (Ping timeout: 260 seconds)
[04:44:37] *** Quits: ratchet_freak (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be) (Ping timeout: 268 seconds)
[04:56:23] *** Joins: w0ng (~w0ng@103.1.212.165)
[05:04:13] *** Joins: tumn6 (~tumn@146.ip-149-56-101.net)
[05:04:41] *** Quits: tumn (~tumn@146.ip-149-56-101.net) (Read error: Connection reset by peer)
[05:04:41] *** tumn6 is now known as tumn
[05:22:42] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (Read error: Connection reset by peer)
[05:48:55] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[05:49:48] *** Joins: xqt (~xqt@user/xqt)
[05:50:06] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 245 seconds)
[05:54:31] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[07:05:21] *** Quits: pony (~ed@101.100.135.45) (Quit: WeeChat 3.0.1)
[07:06:08] *** Joins: pony (~ed@101.100.135.45)
[07:17:34] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:18:46] *** Quits: strungout (znc@mutant.penguin.fyi) (Quit: ZNC - https://znc.in seek the truth or pay the price)
[07:19:01] *** Joins: suffer (znc@mutant.penguin.fyi)
[07:33:58] *** Quits: ArRay (~ArRay_@user/array/x-1947090) (Remote host closed the connection)
[07:34:27] *** Joins: ArRay (~ArRay_@user/array/x-1947090)
[07:34:37] *** Quits: fcr (~fran@r186-48-171-206.dialup.adsl.anteldata.net.uy) (Ping timeout: 252 seconds)
[07:38:05] *** Joins: xqt (~xqt@user/xqt)
[07:39:16] *** Joins: fcr (~fran@r167-60-45-24.dialup.adsl.anteldata.net.uy)
[07:43:10] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 265 seconds)
[08:09:47] *** Quits: strast1 (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Ping timeout: 240 seconds)
[08:19:07] *** Joins: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[08:19:22] *** Joins: zoorat (~zoorat@gateway/tor-sasl/zoorat)
[08:44:45] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:04:29] *** Joins: uzi_ (~uzi@161.9.200.42)
[09:09:24] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:16:46] *** Joins: no-n (~ed@101.100.135.45)
[09:22:01] *** Quits: pony (~ed@101.100.135.45) (Quit: WeeChat 3.0.1)
[09:22:07] *** no-n is now known as pony
[09:26:21] *** Joins: xqt (~xqt@user/xqt)
[09:31:26] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 265 seconds)
[09:38:49] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:04:38] *** Quits: pony (~ed@101.100.135.45) (*.net *.split)
[10:04:38] *** Quits: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com) (*.net *.split)
[10:04:38] *** Quits: suffer (znc@mutant.penguin.fyi) (*.net *.split)
[10:04:39] *** Quits: TsT (tosstt@gallium.worldmaster.fr) (*.net *.split)
[10:04:39] *** Quits: password (~password@user/password2) (*.net *.split)
[10:04:39] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[10:04:39] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[10:04:39] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[10:04:39] *** Quits: mniip (~mniip@libera/staff/mniip) (*.net *.split)
[10:04:39] *** Quits: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch) (*.net *.split)
[10:04:39] *** Quits: luiserebii (~luiserebi@li1568-23.members.linode.com) (*.net *.split)
[10:04:39] *** Quits: Kane (~Kane@portal.yarg.fr) (*.net *.split)
[10:04:39] *** Quits: Renb (~rena@dhcp-108-168-18-202.cable.user.start.ca) (*.net *.split)
[10:04:39] *** Quits: jaawerth (~jaawerth@104.131.115.202) (*.net *.split)
[10:04:39] *** Quits: oni^ (oni@kapsi.fi) (*.net *.split)
[10:04:39] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[10:10:56] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: The Lounge - https://thelounge.chat)
[10:11:02] *** Joins: pizdets (~pizdets@183.182.115.176)
[10:11:04] *** Quits: pizdets_ (~pizdets@183.182.114.60) (Ping timeout: 265 seconds)
[10:11:50] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[10:12:17] *** Quits: cryocaustik7 (~cryocaust@user/cryocaustik) (Client Quit)
[10:13:09] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[10:15:26] *** Joins: xqt (~xqt@user/xqt)
[10:15:31] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 245 seconds)
[10:17:40] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:17:47] *** Joins: uzi_ (~uzi@161.9.200.42)
[10:19:25] *** Quits: mbalmer (~mbalmer@2001:67c:1090:5073:1187:5c65:e54b:214b) (Ping timeout: 265 seconds)
[10:20:33] *** Joins: kiril (~kiril@85.91.153.163)
[10:22:43] *** Joins: mbalmer (~mbalmer@46.175.8.162)
[10:26:27] *** Joins: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[10:26:27] *** Joins: suffer (znc@mutant.penguin.fyi)
[10:26:27] *** Joins: TsT (tosstt@gallium.worldmaster.fr)
[10:26:27] *** Joins: password (~password@user/password2)
[10:26:27] *** Joins: JanC (~janc@user/janc)
[10:26:27] *** Joins: cursey (~cursey@user/cursey)
[10:26:27] *** Joins: sm2n (~sm2n@user/sm2n)
[10:26:27] *** Joins: mniip (~mniip@libera/staff/mniip)
[10:26:27] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[10:26:27] *** Joins: luiserebii (~luiserebi@li1568-23.members.linode.com)
[10:26:27] *** Joins: Kane (~Kane@portal.yarg.fr)
[10:26:27] *** Joins: Renb (~rena@dhcp-108-168-18-202.cable.user.start.ca)
[10:26:27] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[10:26:27] *** Joins: oni^ (oni@kapsi.fi)
[10:26:27] *** Joins: Artea (~Lufia@artea.com.pt)
[10:28:45] *** Quits: JanC (~janc@user/janc) (Max SendQ exceeded)
[10:28:51] *** Quits: cursey (~cursey@user/cursey) (Max SendQ exceeded)
[10:29:16] *** Joins: JanC (~janc@user/janc)
[10:29:25] *** Joins: cursey (~cursey@user/cursey)
[10:32:16] *** Quits: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Ping timeout: 252 seconds)
[10:34:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:31a5:effc:63aa:3481)
[10:34:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:31a5:effc:63aa:3481) (Changing host)
[10:34:13] *** Joins: skapata (~Skapata@user/skapata)
[10:37:45] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:41:19] *** Joins: kiril (~kiril@85.91.153.163)
[10:41:28] *** Joins: ratchet_freak (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be)
[10:41:46] *** Joins: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[10:43:35] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:46:03] *** Quits: ratchet_freak (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be) (Ping timeout: 250 seconds)
[10:46:53] *** Joins: kiril (~kiril@85.91.153.163)
[10:47:27] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 265 seconds)
[10:49:27] *** Joins: uzi_ (~uzi@161.9.200.42)
[10:56:07] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:59:49] *** Joins: kiril (~kiril@85.91.153.163)
[11:05:34] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:05:49] *** Joins: pony (~ed@101.100.135.45)
[11:08:49] *** Joins: kiril (~kiril@85.91.153.163)
[11:11:06] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[11:18:06] *** Quits: zoorat (~zoorat@gateway/tor-sasl/zoorat) (Ping timeout: 276 seconds)
[11:18:44] *** Quits: pony (~ed@101.100.135.45) (Quit: WeeChat 3.0.1)
[11:20:40] *** Joins: pony (~ed@101.100.135.45)
[11:28:37] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:29:12] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:9ce7:54d4:819e:ca23) (Quit: Textual IRC Client: www.textualapp.com)
[11:31:35] *** Joins: kiril (~kiril@85.91.153.163)
[11:37:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:06] *** Quits: reset (~reset@user/reset) (Ping timeout: 245 seconds)
[11:42:10] *** Joins: reset (~reset@user/reset)
[11:42:41] *** Joins: zoorat (~zoorat@gateway/tor-sasl/zoorat)
[11:52:34] *** Quits: Renb (~rena@dhcp-108-168-18-202.cable.user.start.ca) (Ping timeout: 252 seconds)
[11:53:31] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:58:29] *** Joins: kiril (~kiril@85.91.153.163)
[12:16:58] *** Joins: Rena (~rena@dhcp-108-168-18-202.cable.user.start.ca)
[12:30:08] *** Quits: w0ng (~w0ng@103.1.212.165) (Read error: Connection reset by peer)
[12:38:11] *** Joins: w0ng (~w0ng@103.212.224.228)
[12:41:38] *** Joins: ziggurat_ (~quassel@50.239.20.16)
[12:48:37] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:48:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:49:55] *** Quits: ziggurat_ (~quassel@50.239.20.16) (Remote host closed the connection)
[12:50:24] *** Joins: ziggurat_ (~quassel@50.239.20.16)
[13:06:15] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:09:29] *** Joins: kiril (~kiril@85.91.153.163)
[13:13:13] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[13:23:57] *** Quits: password (~password@user/password2) (Quit: Ping timeout (120 seconds))
[13:26:41] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:28:14] *** Joins: avih (~quassel@23.94.231.119)
[13:29:23] *** Joins: kiril (~kiril@85.91.153.163)
[13:30:07] *** Joins: uzi__ (~uzi@161.9.200.42)
[13:30:14] *** Quits: uzi_ (~uzi@161.9.200.42) (Read error: Connection reset by peer)
[13:32:07] *** Quits: luiserebii (~luiserebi@li1568-23.members.linode.com) (Ping timeout: 252 seconds)
[13:32:23] *** Joins: luiserebii (~luiserebi@2400:8902::f03c:91ff:fe65:3ff5)
[13:33:14] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:44:56] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:46:56] *** Joins: kiril (~kiril@85.91.153.163)
[14:00:54] *** Quits: uzi__ (~uzi@161.9.200.42) (Read error: Connection reset by peer)
[14:01:06] *** Joins: uzi__ (~uzi@161.9.200.42)
[14:04:36] *** Joins: password (~password@user/password2)
[14:16:44] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[14:29:54] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[14:32:30] *** Joins: Guest67 (~Guest67@152.70.247.120)
[14:34:06] *** Joins: kiril (~kiril@85.91.153.163)
[14:47:04] *** Joins: Elw3 (~Elw3@dynamic-002-247-242-150.2.247.pool.telefonica.de)
[14:48:11] *** Joins: NeoCron (~NeoCron@p200300c4cf195d00df9b3d9f9a455325.dip0.t-ipconnect.de)
[15:36:36] *** Joins: ratchet_freak (~ratchetfr@d8D8779D9.access.telenet.be)
[15:39:50] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (Ping timeout: 246 seconds)
[16:09:40] *** Quits: Guest67 (~Guest67@152.70.247.120) (Quit: Client closed)
[16:27:20] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[16:27:35] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[16:54:33] *** Joins: Guest67 (~Guest67@152.70.247.120)
[17:03:22] *** Quits: Elw3 (~Elw3@dynamic-002-247-242-150.2.247.pool.telefonica.de) (Quit: Leaving)
[17:18:56] *** Quits: Guest67 (~Guest67@152.70.247.120) (Quit: Client closed)
[17:33:09] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-ac81-7fce-fe8c-415b.res6.spectrum.com)
[17:53:04] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[17:54:44] *** Quits: avih (~quassel@23.94.231.119) (Quit: No Ping reply in 180 seconds.)
[17:55:31] *** Quits: reset (~reset@user/reset) (Ping timeout: 245 seconds)
[17:56:02] *** Quits: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net) (Ping timeout: 265 seconds)
[17:59:55] *** Joins: avih (~quassel@23.94.231.119)
[18:08:42] <avih> cal lua_pcall (from C) throw an error before it actually calls the function? for instance, if it runs out of try-stack (or some other stack) which is needed in order to perform the pcall?
[18:08:46] <avih> can*
[18:09:13] <avih> in other words, is lua_pcall guaranteed to return?
[18:11:21] <avih> (and has this changed between lua versions?)
[18:12:31] <RhodiumToad> my understanding is that lua_pcall will always return normally and this hasn't changed since at least 5.1
[18:14:54] <avih> RhodiumToad: thanks. what does "normally" mean/imply here? are there cases which aren't "normally"?
[18:15:25] <RhodiumToad> I mean it'll return some value, whether LUA_OK or LUA_ERR*
[18:15:53] <RhodiumToad> and will not call the panic function or longjmp to some outer level
[18:16:03] <avih> oh, like "it always returns - normally like other "safe" c functions" ?
[18:16:12] *** Joins: Elw3 (~Elw3@x59cc9933.dyn.telefonica.de)
[18:16:41] <RhodiumToad> yes
[18:16:51] <avih> right. sounds good. so if it runs out of some space or stack, i presume it will return LUA_ERRMEM ?
[18:17:25] <RhodiumToad> the problematic edge case is that in 5.1, there's no way to safely extend the lua stack _before_ doing the lua_pcall in order to push the parameters
[18:17:50] <RhodiumToad> (you can use lua_cpcall to get around this one)
[18:18:28] <avih> (i guess "not normally" could be (c) stack overflow, which is likely to blow the same way as isdigit(..) for instance)
[18:19:02] <avih> RhodiumToad: i believe lua_cpcall is deprecated?
[18:19:20] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Quit: WeeChat 3.2)
[18:19:28] <RhodiumToad> lua_cpcall is removed in newer versions as unneeded
[18:20:07] <avih> (and there seems to be a trend with increasing lua versions to remove as much as possible direct use of lua_CFunction in APIs, in favor of "standard" lua stack usage)
[18:20:44] <avih> (obviously, except lua_pushcclosure to get it in, but once it's in, just use the normal api)
[18:20:55] <RhodiumToad> overflow of the C stack isn't handled at all by lua; lua imposes its own recursion limit in terms of number of C calls, in order to avoid unbounded stack usage, but it can't guarantee that the host environment actually provides enough stack and makes no attempt to check
[18:21:38] <RhodiumToad> avih: lua_pushcclosure is unsafe if there are upvalues (it can throw a memory error)
[18:22:07] <avih> i meant that there can be cases where it doesn't return - if the c stack is exhausted then no calls can be made at all, doesn't matter if it's lua_pcall or a libc function.
[18:22:11] <RhodiumToad> and there's a bug in 5.3.3 and 5.3.4 that makes lua_pushcclosure / lua_pushcfunction always unsafe
[18:23:39] <avih> i think that's normal TBH. i didn't expect pushcclosure (especially with upvalues) to never throw
[18:23:52] <RhodiumToad> the thing in 5.1 is that lua_checkstack itself can throw error, so there's no way to ensure that there's enough Lua value stack space for what you're about to push
[18:24:29] <RhodiumToad> a lua_pushcfunction that can't throw is essential, otherwise you can't emulate lua_cpcall
[18:24:34] <avih> you mentioned up to 5.3.4, is 5.4 immune to throws by pushcclosure?
[18:25:19] <RhodiumToad> 5.4 and 5.3.5-6 can't throw from lua_pushcfunction / lua_pushcclosure with no upvalues
[18:25:45] <RhodiumToad> if there are upvalues, it can throw a memory error or (in 5.3) a GC finalizer error
[18:25:56] <avih> well, TBH, i'd expect ANY push to possibly throw, except some first N pushes which are guaranteed to always succeed (and one should use those wisely to setup the initial protected environment)
[18:26:21] <RhodiumToad> that's not quite how it works; push doesn't check the stack itself, it relies on you doing that
[18:26:32] <avih> (first N - right after initializing the VM)
[18:27:05] <RhodiumToad> and yes, some number of stack slots are initially available in a new state or on entry to a C function
[18:27:12] <avih> what do you mean by "you doing that"?
[18:27:13] <RhodiumToad> (currently 20)
[18:27:41] <avih> right, 20 is way more than plenty to setup the initial protected environment to rule them all.
[18:29:24] <RhodiumToad> the case I needed to handle was this: C code calls Lua code which calls C code which might do some Lua API stuff (thus we don't know if there's stack space available) and then having to get back into Lua while guaranteeing not to throw
[18:30:39] <RhodiumToad> the problem I was facing was that the C code was _also_ using a setjmp/longjmp exception handling system, so letting lua throw in the wrong place would crash things
[18:31:58] <avih> right, that could be a mess indeed
[18:33:11] <RhodiumToad> this is how I discovered the bug in 5.3.3-5.3.4, because I had code in place that rigidly checked who "owned" the current error handling frame
[18:33:12] <avih> fwiw, i've embedded mujs in mpv years ago, which i still maintain, and now i'm also maintaining the lua mpv scripting support. and i have this "autofree" system to automatically catch any error at any level to correctly free resources, but i wasn't sure which things in lua could throw
[18:33:38] <RhodiumToad> the manual does document which functions can throw
[18:34:16] <avih> hmm.. i don't think i've seen it mentioned explicitly, definitely not in all versions (i care since 5.1)
[18:35:43] <avih> RhodiumToad: what "keywords" should i look for? "throw"? "raise"? something else? in order to find all the mentions
[18:36:31] <RhodiumToad> see the [-n, +1, e]  annotation on each API function
[18:37:08] <avih> (i do assume that anything which pushes something can throw, except some first N right after setting up the vm, and that's enough for me to guarantee correct release of resources for errors at any level)
[18:37:09] <RhodiumToad> that third field is - if the function won't throw, m if it can throw memory errors, e if it can throw any error
[18:38:03] <RhodiumToad> (and v if it throws an error on purpose)
[18:38:04] <avih> i don't understand this "annotation", can you give an example?
[18:38:15] <RhodiumToad> in the reference manual
[18:38:29] <avih> this, yes? https://www.lua.org/manual/5.4/manual.html
[18:38:44] <avih> same for earlier versions)
[18:38:47] <RhodiumToad> yes
[18:38:53] <RhodiumToad> look at, say, lua_arith
[18:39:08] <avih> k, sec
[18:39:27] <RhodiumToad> void lua_arith (lua_State *L, int op);    [-(2|1), +1, e]
[18:39:44] <avih> damn lol "[-(2|1), +1, e]" i didn't even notice it exists, and evel less idea what it was :)
[18:40:00] <RhodiumToad> that means it pops 1 or 2 values, pushes 1 result, and can throw any error
[18:40:04] <avih> where's the legend on how to read it?
[18:40:24] <RhodiumToad> introduction to section 4.8 describes it
[18:40:26] <avih> right
[18:40:51] <avih> how did i miss that... (i did mostly read earlier versions manuals, mostly 5.1 and 5.2)
[18:41:05] <RhodiumToad> if it seems odd that lua_arith can throw any error, it's because it might run metamethods
[18:41:40] <RhodiumToad> that annotation is certainly there as far back as the 5.1 manual
[18:42:01] <avih> hmm.. and lua_pcall indeed has "-" at the "error place", so supposedly it's guaranteed to not throw. nice.
[18:43:01] <avih> right, definitely exists in 5.1 too. man, seriously, i didn't even notice it existed :) (and i've spent hours with the reference manuals)
[18:43:35] <avih> brb
[18:47:39] <avih> RhodiumToad: so at thr 5.1 docs, for lua_getfenv, it supposedly never throws, and documented as " Pushes onto the stack the environment table of the value at the given index."  -- how can that be? wouldn't it run out of stack at some stage?
[18:48:09] <RhodiumToad> if you run off the end of the stack you just corrupt memory or crash, it's not a detected error
[18:48:22] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[18:48:29] <avih> (i don't know how the lua stack is implemented, but even if it reallocs it, at some stage it's OOM)
[18:48:34] <RhodiumToad> this is why you're required to use lua_checkstack if you might possibly use more than 20 stack slots at any C call stack level
[18:48:37] <avih> ah
[18:48:48] <avih> so it's a bug ")
[18:48:50] <avih> :)
[18:48:58] <RhodiumToad> no, it's documented :-)
[18:49:09] <avih> lol
[18:49:22] <RhodiumToad> seriously, read the whole "4.2 - Stack Size" section
[18:49:32] <avih> will do. definitely.
[18:50:04] <avih> i think i made some (incorrect) assumptions based on my familiarity with mujs.
[18:50:06] <RhodiumToad> sorry, that's from the 5.3 doc
[18:50:19] <avih> k
[18:50:22] <RhodiumToad> 4.1.1 - Stack Size  in 5.4
[18:51:19] <avih> i believe i'll be able to find it, but thanks :)
[18:52:14] <RhodiumToad> lua_checkstack in 5.1 throws if it needs to realloc the stack and gets a memory allocation error,
[18:52:28] <RhodiumToad> whereas in later versions it just returns false
[18:52:37] <avih> RhodiumToad: i assume all the builtin functionality which uses the same api also does this checks wherever needed? (up to rare neglection/bugs)
[18:52:45] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 268 seconds)
[18:52:50] <RhodiumToad> luaL_checkstack is a version that throws a memory error, so that's usually more useful
[18:53:54] <RhodiumToad> builtin library functions that use the normal C API use luaL_checkstack as appropriate, yes
[18:54:16] <avih> "lua_checkstack in 5.1 throws if it needs to realloc the stack and gets a memory allocation error," <- i think i can live with that, though obviously non throwing is nicer.
[18:54:54] <RhodiumToad> well, most of the time you want to throw the error, hence luaL_checkstack
[18:55:07] *** Joins: R2robot (~R2robot@user/r2robot)
[18:55:19] <RhodiumToad> lua_checkstack in >5.1 is for when you specifically need to not throw
[18:55:22] <avih> do you happen to support several lua versions at the same source code? do you have some mini abstraction thing to support similar meta functionality across versions?
[18:56:13] <RhodiumToad> I currently support luajit and 5.3-5.4, which means having to cope with those 5.1 issues that aren't covered by luajit's compatibility additions
[18:56:37] <avih> (in mpv we currently support 5.1/5.2/jit, and we barely need such abstraction. i think mainly we emulate lua_cpcall)
[18:57:08] <RhodiumToad> keplerproject has a whole bunch of compatibility stubs for fixing version differences
[18:58:00] <RhodiumToad> there are lots of small API changes that are otherwise annoying, like newer versions returning the value type from lookup functions while older versions return void
[18:58:10] <avih> hmm.. rather painful that the API changes between versions... (and even more painful that user scripts break, which is why we never got to 5.3)
[18:58:56] <RhodiumToad> what breakage did you have in 5.3?
[18:59:05] <avih> it does look like the api improves though, so this change is seemingly for the better, but it doesn't make it less painful...
[18:59:33] <avih> iirc something with numbers becoming integers by default? not sure.
[19:00:14] <RhodiumToad> ah right; 5.3 has integer and float subtypes, but most behavior stays the same
[19:00:45] <avih> we do have some (big) scripts, but if that's what we had then we'd do that (maybe), but there are hundred of 3rd party user scripts, and that's only at our wiki, not counting the many more that people write for themselves and don't publish
[19:02:01] <RhodiumToad> I'm not sure what user-visible issues you'd run into going from 5.2 to 5.3
[19:02:38] <avih> i don't recall the details TBH more than about the numbers, and i don't want to guess
[19:02:51] <RhodiumToad> at the C code level, there are changes in that some functions that expect integers, and would previously round floats to nearest integer, now treat non-integer floats as invalid input
[19:03:47] <RhodiumToad> i.e. lua_tointeger expects an exact integer
[19:03:50] <avih> yeah, i'm not concerned with changes we'd need to maintain our c/scripts code. that was never an issue for us.
[19:04:17] <avih> (i.e. whatever the changes are, it's gonna be doable)
[19:06:14] <RhodiumToad> right, but you have to work quite hard to expose the float/integer difference in Lua code rather than in C code
[19:07:42] <avih> also, there's another value in not supporting newer (different) versions, and that's that we maintain some coherence of the 3rd party scripts. if we support newer versions, then some users scripts would start using new features (even if trivial) not realizing that it only works in new versions, and the ecosystem gets broken. lua 5.1 is a pretty good language, and this way it kinda guarantee pick a random script and it will work with your lua version.
[19:08:13] <RhodiumToad> the problem is that 5.1 and 5.2 are long since EOL, and bugs in them will not be fixed
[19:09:03] <avih> yup. though as far as i know there was only one (known) CVE in 5.1, and another small bug, and no known bugs or CVEs in 5.2
[19:09:34] <avih> (judging by debian's maintenance and other places (like redis) which still support these versions)
[19:10:30] <avih> and luajit.. well... impossible to tell... :)
[19:12:09] <avih> luajit usually works (great), but in 5 minutes it might not. and no releases or even beta for nearly 5 years...
[19:12:46] <RhodiumToad> not to mention the forks
[19:12:53] <avih> it's a PITA. kinda like the python 2/3 shenanigans, just worse
[19:13:04] <avih> yeah
[19:13:37] <avih> so actually 5.1 and 5.2 is a pretty great pair to support.
[19:14:37] <avih> and the places which i saw which use them, there are no known bugs that i know of other than that 1 cve and one bug at 5.1.5 (with tiny fixes)
[19:14:58] <MattJ> We're dropping 5.1 support in Prosody because it's holding us back from various small improvements we'd like to make in the codebase, and it is being dropped from some distributions now
[19:15:31] <avih> what will you jump to?
[19:15:44] <MattJ> We'll aim to drop 5.2 in the future, but we want to target 5.4 due to apparent GC/memory improvements
[19:16:27] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[19:16:34] <MattJ> But it will be some time before we can use 5.4 as a baseline, so many of the 5.4 features still won't be usable (except maybe by plugin devs who don't care for compat)
[19:16:45] <avih> did you observe/measure the improvements? because 5.2 is supposed to be faster than 5.1, but in my (few, definitely not conclusive) 5.2 is ~ 15% slower
[19:17:08] <RhodiumToad> 5.4 has the choice of a generational GC
[19:17:09] <MattJ> Yes, I spent literally weeks measuring things :)
[19:17:29] <MattJ> Generational GC didn't work well for our use-case, or not as well as I'd hoped
[19:17:51] <MattJ> But for some reason under Prosody's load the GC in 5.2 and 5.3 are hopeless
[19:18:07] <MattJ> 5.1 is okay, and 5.4 is remarkable
[19:18:07] <RhodiumToad> but the incremental GC in 5.4 is better?
[19:18:12] <MattJ> Yes
[19:18:23] <RhodiumToad> strange, I didn't think that changed much
[19:18:40] <avih> (i implemented a string split function in numerous variants, and benched them with 5.1/5.2/jit - in all of them 5.2 is ~15% slower than 5.1, and 5.1 is ~3x slower than jit, but obviously with a very limited set of operations tested
[19:18:44] <RhodiumToad> avih: another downside of 5.1 is no ephemeron tables
[19:18:48] <MattJ> Tweaking parameters can get 5.2 and 5.3 under control, but 5.4 is great out of the box and better with tweaks
[19:19:15] <MattJ> I meant to post about it to the list, but it took so long to do all the testing that I kinda ran out of time to do a proper write-up
[19:19:16] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:19:50] <avih> "5.1 is okay, and 5.4 is remarkable" <-- nice
[19:20:25] <MattJ> (it was in the context of a security issue - since someone realised an unauthed connection to a Prosody instance on 5.2/5.3 could balloon memory until OOM)
[19:21:06] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 265 seconds)
[19:21:27] <avih> was that a bug in your implementation?
[19:23:33] <MattJ> The fix at the end of the day was to configure the GC to be more aggressive, that's all
[19:23:54] <MattJ> For a long time we assumed it was a memory leak, but couldn't pinpoint it, until we realised it didn't happen in all Lua versions
[19:24:01] <avih> anyway, if the lua maintainers decided to say "this version of the language is going to be supported for as far as we can", then i guess we could bite the bullet, but as long as each new version can break C code and 3rd party user scripts, we can't just keep chasing tails like this.
[19:24:44] <avih> kinda like ES5.1 is pretty much guaranteed to work even in a VM which supports javascript 2020.
[19:24:56] <MattJ> I think the Lua team would probably say bundle liblua (version of your choosing) and be done :)
[19:25:01] <MattJ> It's distros that don't like that
[19:26:09] <avih> it's an impossible position to be at as developers which support 3rd party scripts. there's just no good solution. either we fall behind EOL, or maintain our own version, and both are terrible.
[19:26:12] <MattJ> As you say, Lua has a small attack surface and is typically fairly bug-free. You probably risk introducing more bugs by updating unnecessarily.
[19:26:39] <avih> right...
[19:27:23] <avih> and like you say, distros and package managers don't want to maintain EOL'ed versions either. it's a PITA.
[19:28:38] <avih> we don't even really have an issue of attack surface. our scripts are not sandboxed. bug are bugs of course, but a newly discovered CVE will not add an attack vector for us.
[19:31:21] <avih> the only real solution would be to drop lua support, but that's not gonna happen because for now we can live with 5.1/5.2/jit.
[19:32:35] <avih> the problem with dropping lua is that there are not a great many small, good, supported, and common embedded scripting engines.
[19:34:05] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:583f:addf:6026:5042)
[19:34:44] <avih> mujs really is great. slower than lua 5.1 by a factor of x2-x5, but plenty enough for our needs, and it's supported by the company which maintain mupdf (that's the pdf's js support implementation), even if technically it's mostly a one man project. but the codebase is great, and i sent fixes, and it works very nicely.
[19:35:18] *** Quits: fcr (~fran@r167-60-45-24.dialup.adsl.anteldata.net.uy) (Ping timeout: 260 seconds)
[19:35:39] <avih> anyway, MattJ RhodiumToad thanks for your feedback and time. i definitely got homework :) later
[19:42:06] *** Joins: fcr (~fran@r186-48-100-25.dialup.adsl.anteldata.net.uy)
[19:50:05] *** Joins: ChipsterOne (~Chipster@99.234.26.93.rev.sfr.net)
[19:51:19] *** Joins: hs0ucy (~hs0ucy@modemcable162.76-21-96.mc.videotron.ca)
[19:51:44] *** Quits: Chipster (~Chipster@99.234.26.93.rev.sfr.net) (Ping timeout: 268 seconds)
[19:53:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 265 seconds)
[19:55:04] <avih> hmm.. i presume LUA_MINSTACK means i can do this amount of pushes regardless of the number of arguments/upvalues/etc which the c function was called with? e.g. if LUA_MINSTACK  is 20 and the function has 10 upvalues and called with 5 arguments, then stackspace is 35? and i could push 20 values safely?
[19:58:35] <avih> (do i need to limit the number of return values which lua_pcall can push?)
[19:59:53] <avih> hmm... "When you call a Lua function without a fixed number of results (see lua_call), Lua ensures that the stack has enough space for all results. However, it does not ensure any extra space"
[20:01:11] <avih> LUA_MINSTACK  is explained better at the 5.4 docs than 5.1, but it seems i imterpreted the 5.1 docs correctly.
[20:01:34] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 252 seconds)
[20:02:34] *** Quits: hs0ucy (~hs0ucy@modemcable162.76-21-96.mc.videotron.ca) (Quit: leaving)
[20:16:57] *** Quits: zoorat (~zoorat@gateway/tor-sasl/zoorat) (Ping timeout: 276 seconds)
[20:17:10] *** Joins: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr)
[20:30:48] *** Joins: Soni (~quassel@autistic.space)
[20:34:53] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 264 seconds)
[20:35:16] *** Quits: ghoti (~paul@198.23.196.224) (Ping timeout: 250 seconds)
[20:35:26] *** Joins: ghoti (~paul@198.23.196.224)
[20:36:42] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:49:26] *** Joins: xqt (~xqt@user/xqt)
[20:53:07] *** Quits: Elw3 (~Elw3@x59cc9933.dyn.telefonica.de) (Quit: Leaving)
[20:54:23] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 265 seconds)
[21:00:49] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[21:01:25] *** Joins: reset (~reset@user/reset)
[21:03:03] *** Joins: xqt (~xqt@user/xqt)
[21:13:17] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:13:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:19:39] *** Joins: ratchetfreak_ (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be)
[21:22:53] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:34:08] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[21:48:25] *** Joins: magla (~gelignite@55d450ed.access.ecotel.net)
[21:50:42] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[21:57:58] <RhodiumToad> LUA_MINSTACK doesn't include the arguments; that is, at the start of a C function called from Lua you can push 20 things safely regardless of how many arguments there were
[21:58:19] <RhodiumToad> upvalues aren't on the stack but are referenced by pseudo-indexes
[21:58:24] *** Joins: techsurvivor (~don@cpe-70-114-183-69.austin.res.rr.com)
[22:13:01] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[22:35:11] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[22:40:02] *** Joins: netlynx (~jan@94-226-69-15.access.telenet.be)
[23:02:23] *** Quits: ArRay (~ArRay_@user/array/x-1947090) (Remote host closed the connection)
[23:02:56] *** Joins: ArRay (~ArRay_@user/array/x-1947090)
[23:03:32] *** Joins: Elw3 (~Elw3@dynamic-002-247-243-142.2.247.pool.telefonica.de)
[23:03:55] *** Quits: netlynx (~jan@94-226-69-15.access.telenet.be) (Quit: Leaving)
[23:09:52] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[23:35:31] *** Quits: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net) (Ping timeout: 245 seconds)
[23:41:46] *** Quits: Rue (~rue@2001-b011-1000-1ce6-452e-25f3-38ca-950e.dynamic-ip6.hinet.net) (Ping timeout: 245 seconds)
[23:44:08] *** Joins: Rue (~rue@2001-b011-1000-1a43-da47-348a-6a91-701c.dynamic-ip6.hinet.net)
[23:48:27] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[23:52:06] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:53:15] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[23:53:27] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
