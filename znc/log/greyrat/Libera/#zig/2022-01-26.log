[00:10:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:15:31] *** Quits: phaleth (~user@user/phaleth) (Quit: phaleth)
[00:22:36] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[00:29:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[00:47:03] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:52:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:57:01] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Quit: WeeChat 3.4)
[01:02:50] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[01:03:52] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[01:26:04] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[01:27:52] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrvsawey4np8bqd.ipv6.telus.net)
[01:35:33] *** Joins: notapenguin (~ryu@187.3.254.107)
[01:48:15] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:49:22] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765)
[01:50:33] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[01:52:13] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Ping timeout: 240 seconds)
[01:57:14] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
[01:59:12] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:01:01] *** Joins: rovanion (~rovanion@h-46-59-13-236.A163.priv.bahnhof.se)
[02:10:25] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[02:18:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[02:20:32] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 240 seconds)
[02:26:31] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:29:33] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[02:29:59] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Client Quit)
[02:33:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[02:34:41] *** Quits: jemius (~imperator@2001:16b8:2d83:2b00:dee2:7a67:e2d7:19dd) (Quit: Leaving)
[02:37:13] *** Quits: qbit (~qbit@ns2.suah.dev) (Ping timeout: 256 seconds)
[02:38:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Client Quit)
[02:46:51] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[03:01:50] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[03:03:39] *** Quits: squeek502 (~squeek502@user/squeek502) (Ping timeout: 256 seconds)
[03:10:47] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[03:11:02] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 240 seconds)
[03:20:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[03:39:15] *** Joins: qbit (~qbit@ns2.suah.dev)
[03:45:38] *** Joins: squeek502 (~squeek502@user/squeek502)
[03:48:45] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[03:50:57] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Ping timeout: 240 seconds)
[03:57:57] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 240 seconds)
[04:41:00] *** Quits: Evo2 (~hastings@aj144082.dynamic.ppp.asahi-net.or.jp) (Remote host closed the connection)
[04:50:53] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[05:09:55] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrvsawey4np8bqd.ipv6.telus.net) ()
[05:13:05] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
[05:17:38] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 268 seconds)
[05:24:05] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[05:48:00] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrvsawey4np8bqd.ipv6.telus.net)
[05:50:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:50:57] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:15:23] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 256 seconds)
[06:22:35] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:32:58] <andrewrk> did you know this whole time, LLD had a strip flag that we could have been passing?
[06:33:13] <andrewrk> anyway fixed in 366c76
[06:44:16] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[06:45:02] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[07:03:00] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:07:47] <motiejus> I knew. :) thanks for 50905d88518f92a9b8e492daf8dbb6d38b7c61bf andrewrk  ; it will be my reference point on how easy it is to add passthrough lld args
[07:12:00] <andrewrk> that one happened to be easy because we already had the "must_link" functionality from supporting -Wl,-force_load=foo.a  (Jakub added that in  #10584)
[07:12:22] <andrewrk> and then for strip we already had the concept of strip
[07:12:54] <andrewrk> was planning on doing the --hash-style enhancement next though which would be a pretty decent example
[07:13:35] <motiejus> not sure I am following what's --hash-style
[07:22:47] <andrewrk> https://github.com/envoyproxy/envoy/issues/19535#issuecomment-1021449965
[07:23:17] <motiejus> ah, this one. It's literal
[07:24:45] <motiejus> we also hit internally `--output-def`, but found an easy-enough workaround
[07:24:53] <motiejus> I guess I should just file a task before applying the workaround
[07:28:08] <andrewrk> hmm I don't see --output-def in `ld --help`
[07:28:33] <motiejus> I see it in the man page of gnu ld
[07:28:52] <motiejus>   --output-def <file>                Generate a .DEF file for the built DLL
[07:28:54] <motiejus> maybe gnu ld specific
[07:29:16] <andrewrk> this looks like it's for windows
[07:29:48] <andrewrk> if you're targeting linux I'm not sure why the build script would request --output-def
[07:30:00] <motiejus> short story: libsodium's autoconf was probing for it, `zig cc` emitted a warning with a zero exit code, and libsodium was trying to build that file in the build process
[07:30:18] <motiejus> it was on x86_64 linux
[07:30:58] <andrewrk> oh that's interesting. so another improvement would to be exit failure when being probed for features
[07:31:35] <andrewrk> I suppose we could have unrecognized linker args be fatal, with an env var to override them into warnings
[07:32:17] <motiejus> yep. Though not sure how to detect when it's probing features. It's still complaining each linking time about things we care less about
[07:32:27] <andrewrk> error: unrecognized linker argument: --output-def. set ZIG_UNKNOWN_LINKER_ARGS_WARN=1 to turn this error into a warning
[07:32:46] <motiejus> e.g. gzipped headers or such
[07:32:58] <motiejus> sounds like a good one.
[07:34:08] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[07:45:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:48:22] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Quit: Leaving)
[07:56:28] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
[08:00:54] <motiejus> from https://github.com/ziglang/zig/wiki/Updating-libc: > Obtain the latest master branch Linux code.
[08:01:34] <motiejus> checking out `master` and doing anything with it makes me a bit wary; should we at least checkout the latest stable patch release?
[08:01:48] <motiejus> in this case, 5.16.2 or so
[08:12:18] <andrewrk> mmm perhaps. I was under the impression that they didn't really do release branches. let me double check
[08:12:24] *** Joins: lispy (~lispy4@84.69.59.93)
[08:12:32] *** Parts: lispy (~lispy4@84.69.59.93) (Leaving)
[08:12:36] *** Joins: lispy (~lispy4@84.69.59.93)
[08:14:34] <andrewrk> yeah I don't see any branches in this repo. it looks like everything just happens on master
[08:14:40] <andrewrk> maybe I'm missing something
[08:15:17] <andrewrk> maybe master branch itself goes through periods of stability/instability?
[08:15:45] <andrewrk> anyway I support your proposal to change it to checking out the latest stable patch release
[08:19:54] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Remote host closed the connection)
[08:26:12] <motiejus> the stable branches are in https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
[08:26:30] <motiejus> e.g.   remotes/stable/linux-5.16.y         5fd3e07fd10e Linux 5.16.2
[08:26:46] <motiejus> I usually have two remotes:  one for torvalds (https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git) and one stable
[08:27:46] <motiejus> I will update the wiki once I run this process. Now trying to see where the renaming will fit in update-linux-headers.zig
[08:41:37] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Ping timeout: 240 seconds)
[09:01:10] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:05:40] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[09:11:21] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[09:17:42] *** Joins: dwcraig (~dwcraig@c-73-61-103-149.hsd1.nh.comcast.net)
[09:24:59] *** Quits: dwcraig (~dwcraig@c-73-61-103-149.hsd1.nh.comcast.net) (Quit: leaving)
[09:25:13] *** Joins: ickk (~ickk@user/ickk)
[09:26:39] *** Joins: dwcraig (~dwcraig@c-73-61-103-149.hsd1.nh.comcast.net)
[09:33:27] <motiejus> turns out quite a simple change: https://github.com/ziglang/zig/pull/10699
[09:35:27] <andrewrk> hmm I wonder why we have that multiarch union anyway
[09:36:05] <andrewrk> ah looks like it was ported from process headers for musl
[09:44:31] <motiejus> ah, glibc includes arm64/, so I'd need to mess those headers too
[09:44:33] <motiejus> https://ci.ziglang.org/ziglang/zig/1713/1/4
[09:54:29] *** Joins: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[09:54:37] <marler8997> did we just get a zip extractor in std?
[09:58:18] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:59:03] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[10:05:37] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[10:10:53] *** Joins: phaleth (~user@user/phaleth)
[10:14:07] *** Quits: phaleth (~user@user/phaleth) (Client Quit)
[10:21:09] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[10:31:03] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[10:36:35] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:50:02] <squeek502> marler8997, more a deflate compressor + a faster deflate decompressor
[10:50:38] <marler8997> hmmm, I'm trying to figure out if I could use this project to extract zip files: https://github.com/hdorio/hwzip.zig
[10:54:49] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:08:37] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:10:06] <squeek502> not sure how thats related to std
[11:17:00] *** Parts: comrad (~quassel@holarse/comrad) (https://quassel-irc.org - Komfortabler Chat. Überall. )
[11:23:59] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:25:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[11:29:59] <andrewrk> self-hosted compiler progress report: LLVM backend is 645/1067 (60%) passing the behavior tests
[11:32:37] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765)
[11:36:53] *** Quits: Pistahh_ (~pistahh@user/pistahh) (Ping timeout: 268 seconds)
[11:38:35] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:46:45] *** Quits: qbit (~qbit@ns2.suah.dev) (Quit: WeeChat 3.3)
[11:52:10] *** Joins: l1x (uid1954@id-1954.tinside.irccloud.com)
[12:08:20] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 268 seconds)
[12:14:37] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[12:15:46] <ifreund> \o/
[12:18:41] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[12:18:58] *** Joins: bindu (~bindu@user/bindu)
[12:25:35] *** Joins: qbit (~qbit@ns2.suah.dev)
[12:31:22] *** Joins: Major_Biscuit (~MajorBisc@c-001-019-027.client.tudelft.eduvpn.nl)
[12:33:44] <da_lorax> Is there a way to do something like @intToEnum that returns an error or something rather than is undefined behavior if the int isn't an enum value?
[12:34:51] <luuk> da_lorax: std.meta.intToEnum(EnumType, value)
[12:38:39] <da_lorax> thanks :)
[12:40:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:42:17] *** Joins: fwg (~fwg@user/fwg)
[12:44:18] <da_lorax> Can I cast a `[]const u8` into a struct I know the layout of?
[12:45:05] <da_lorax> I'm trying to read a buffer of pixels off a network socket and it'd be cool to be able to address their R,G,B components
[12:46:18] <ikskuh> da_lorax: i recommend you using reader.readInt... to deserialize data and not do struct casting
[12:47:24] <da_lorax> can that be done without copying?
[12:48:19] <da_lorax> I'd prefer not to copy, raspi zeros don't have a ton of memory bandwidth
[12:49:05] <ikskuh> how are the pixels encoded?
[12:49:48] <da_lorax> RGBRGBRGB..., one u8 per color
[12:49:52] <da_lorax> openpixelcontrol.com
[12:50:00] <ifreund> what about endianness?
[12:50:09] <da_lorax> of a u8?
[12:50:55] <ifreund> ah, "one u8 per color"
[12:51:16] <ikskuh> da_lorax: i'd just use indices then
[12:51:30] <ikskuh> because the data is not aligned to a power of two
[12:52:28] <da_lorax> It's equivalent to a `[] const Struct {R: u8, G: U8, B: u8}`, is there no way I can interpret it as such?
[12:52:41] <ifreund> da_lorax: to answer your question, std.mem.bytesAsValue()
[12:52:56] <dutchie> or possibly bytesAsSlice if you have a bunch of them
[12:53:05] <ifreund> which is just @ptrCast() internally
[12:53:14] <ikskuh> da_lorax: note that you have to use extern struct
[12:53:54] <da_lorax> does that make it to the C ABI?
[12:54:04] <da_lorax> cause I know the noraml struct doesn't have guarantees about layout
[12:54:15] <ikskuh> yeah
[12:54:27] <dutchie> extern pretty much exactly means "this struct has C ABI" aiui
[12:54:39] <dutchie> (or fn or enum or whatever i guess)
[12:55:03] <da_lorax> perfect, that should work, thanks
[13:17:26] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Quit: Leaving)
[13:40:09] *** Joins: Pistahh (~pistahh@user/pistahh)
[13:40:40] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[13:41:40] *** Joins: amk (~amk@109.255.169.126)
[13:56:59] *** Joins: smeding_ (~roysmedin@167.71.77.228)
[14:00:20] <smeding_> hmm, is anyone actively working on zig for AVR? i ordered some attiny806 to futz around with and i think i'm gonna try and get zig working on there
[14:00:24] *** smeding_ is now known as smeding
[14:06:00] <ikskuh> smeding: avr isn't fun yet
[14:06:14] <ikskuh> zig can only generate object files that access RAM
[14:06:20] <ikskuh> so you need avr-ld
[14:12:05] <smeding> hmm, what do you mean by "object files that access RAM"? does it not just generate object files with the usual text/rodata/data/bss sections? i found this old code that just seems to have a basic linker script like i'd expect https://github.com/FireFox317/avr-arduino-zig
[14:14:28] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[14:14:40] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:16:06] <ikskuh> AVR has three memory spaces: flash, ram, io
[14:16:28] <ikskuh> io is mapped/visible in ram, but has certain instructions that make stuff go faster
[14:16:44] <ikskuh> you can put consts in either flash or ram
[14:16:51] <ikskuh> depending on what you want to do
[14:17:27] <smeding> ah, so it can't handle the different address spaces? i was wondering how it dealt with that but it's hard to find much information about how that even works in e.g. GCC
[14:17:56] <smeding> from what i could find i got the impression that the way they handled it was that they have a fake 24 bit address space where RAM is mapped to start at 0x800000
[14:18:22] <smeding> and i think various other things at say 0x810000
[14:19:01] <ikskuh> yeah, the whole GCC toolchain is a horrible hack
[14:22:57] <ikskuh> zig will get a proper address space support in stage2
[14:23:08] <ikskuh> where we can finally put and access variables in flash
[14:23:34] <smeding> oh, interesting
[14:37:47] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[14:38:02] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:43:41] *** Quits: Tharro (~Tharro@2001:bc8:1824:1623::1) (Ping timeout: 245 seconds)
[14:44:14] <smeding> that said, from what i understand that's still months away — and judging from that avr-arduino-zig repo, the horrible hack does apparently at least work for zig too? would there be any problem with just writing code like that until something better becomes available?
[14:44:44] <ikskuh> you can try that
[14:45:03] <smeding> with the caveat that i can't put constants in progmem etc.
[14:45:29] <ikskuh> yeah
[14:46:51] <smeding> i think i just have to put some blink code etc. together and look over the actual generated binary...
[14:46:55] <ikskuh> :)
[14:47:25] *** Joins: pkap (~pkap@185.213.155.252)
[14:49:11] <ikskuh> hm
[14:49:14] <smeding> does anyone have any recommendations for setting up interrupt vectors and register definitions and such? i'm pretty new to zig; no idea if there's already idiomatic ways of doing such things
[14:49:22] <ikskuh> how do i add constants to std.c? TCSA is missing
[14:49:36] <ikskuh> smeding: for AVR: use inline assembler or a separate assembly file
[14:49:44] <ikskuh> and a linker script that puts that assembly at the start of flash
[14:50:17] <smeding> yeah that's basically what i was thinking
[14:51:12] <smeding> vector table as assembly, export a default handler for them as a weak symbol somewhere, and let people register ISRs by doing their own export that overrides it
[14:52:54] <freshcoffee> ikskuh: hmmm c/darwin and c/openbsd have it. I think that gets usingnamespace'd into c .. but c/linux doesn't have it, it seems to be in os/linux.zig which I don't think is usingnamespace'd to c
[14:53:04] <ikskuh> ah yeah
[14:53:07] <ikskuh> just seen it as well
[14:53:13] <ikskuh> going to do the first PR of the year *grin*
[14:54:05] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrvsawey4np8bqd.ipv6.telus.net) ()
[15:00:30] <smeding> ah, apparently there's jetbrains support for zig as well, must have missed that when i looked before. neat
[15:04:29] *** Joins: Tharro (~Tharro@2001:bc8:1824:1623::1)
[15:15:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[15:18:01] *** Quits: Tharro (~Tharro@2001:bc8:1824:1623::1) (Quit: Bye, bye!)
[15:18:18] *** Joins: Tharro (~Tharro@2001:bc8:1824:1623::1)
[15:19:29] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:21:00] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[15:25:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[15:30:57] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777)
[15:38:02] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:39:56] *** Quits: ickk (~ickk@user/ickk) (Ping timeout: 260 seconds)
[15:44:11] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[15:49:20] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[16:10:21] *** Quits: pkap (~pkap@185.213.155.252) (Quit: Client closed)
[16:22:14] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[16:22:53] <tsujp> I have a question, "bindings" to RayLib from Zig would still use Raylib which is in C right? That removes the memory safety etc that Zig provides right?
[16:23:04] <tsujp> Here's a repo I found: https://github.com/Not-Nik/raylib-zig
[16:36:42] *** Joins: jokoon (~eio@2a01:e0a:542:e160:451f:1170:dd44:4afa)
[16:36:54] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:38:06] <ifreund> s/memory safety/type safety/
[16:42:05] *** Parts: jokoon (~eio@2a01:e0a:542:e160:451f:1170:dd44:4afa) (Leaving)
[16:48:32] *** Quits: Major_Biscuit (~MajorBisc@c-001-019-027.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[16:50:08] <tsujp> Right but I don't understand how it's using Raylib if it's not got `cImport` anywhere and then whether or not it's _safe_ to use Raylib via Zig if Raylib is in C
[16:51:01] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:52:46] <ifreund> tsujp: all @cImport() does is translate C headers into zig code definig `extern` functions and types used on the ABI boundry
[16:53:16] <ifreund> river doesn't @cImport() for most of its c library usage either
[16:55:15] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[16:55:55] <ifreund> in fact, manually defining the extern functions/types can be safer as you can be more precise with the types 
[16:56:08] <ifreund> e.g. there's no need to use [*c] pointers
[16:57:01] <ifreund> what exactly are you worried about with regards to safety when using raylib? safety isn't binary and is made of up many different but related things
[16:59:37] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:59:57] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:07:25] <tsujp> Okay so manually defining the functions/types with extern and then using a builder Zig can understand that an attempt to call a function or use a type like that is an attempt to use one via the C ABI and thus it uses (in this case) Raylib? That completes the binding?
[17:07:48] <tsujp> Well, what is malloc in Raylib fails when used via Zig? Can I just `try` the same as I would normal Zig code?
[17:09:59] <ifreund> tsujp: an extern function definition tells the zig compiler that that symbol will be resolved at link time. So as long as you link raylib then it will compile fine
[17:10:29] <ifreund> as for memory allocation in raylib, that depends on whether raylib handles allocation failure or not. Some c libraries do, some don't
[17:10:45] <ifreund> regardless, you'd need a wrapper on the zig side to be able to use `try`
[17:11:14] <tsujp> So really the answer is no it's no safe? Just doing `extern` does not make using a C library or codebase safe in Zig
[17:11:20] <tsujp> no it's not safe*
[17:11:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:12:35] <ifreund> safe isn't binary, what do you mean by safe here?
[17:12:48] <tsujp> Exactly what I said
[17:13:06] <ifreund> linking C code to zig code in no way changes what the C code does
[17:13:17] <ifreund> how would it?
[17:13:51] <tsujp> I've rewatched the Localhost Zig talk and the example given was memory allocation, having to check for NULL return from malloc in C for example. So, given Raylib is in C and it uses memory it's going to be malloc'ing and free'ing things. If I use Raylib via Zig, why would I do that if it's not safe to do so? What advantage does that give? How
[17:13:52] <tsujp> complex would the wrapper have to be?
[17:14:34] <tsujp> Why not just use FFI if the inclusion of C into Zig is like that? I don't get it (yet)
[17:15:13] <ifreund> using FFI doesn't "make ralib safe" either
[17:15:27] <tsujp> I didn't say it does...
[17:15:40] <ifreund> what do you mean by "why not just use FFI then?
[17:15:47] <tsujp> I said why use cImport if you can use FFI instead where FFI will give you as safe a result as cImport or manually using extern
[17:16:08] <ifreund> what do you mean by FFI here?
[17:16:15] <tsujp> foreign function interface
[17:16:20] <tsujp> I can use C from Ruby, or Python etc
[17:16:38] <ifreund> so you're asking why use raylib from zig instead of some other language?
[17:17:31] <ifreund> Probably because you like the tradeoffs zig makes between performance, safety, and complexity
[17:18:45] <tsujp> No im asking how safe is using Raylib from Zig
[17:19:26] <ifreund> if there's a bug in raylib or if raylib doesn't handle allocation failure, using it from zig or any other language cannot prevent that. 
[17:19:29] <tsujp> I'm new, I don't understand what is very probably the huge mountain of idiosyncrasies here because you keep asking me "what do you mean by safe" but I'm not an expert, I cannot reply to that, I don't know. How safe is it. that's what I am asking.
[17:19:43] <tsujp> Right so `try` on an extern fucntion _won't_ work?
[17:19:46] <ifreund> no matter whether you use @cImport(), FFI, extern definitions or whatever
[17:20:04] <koollman> tsujp: it's not more or less safe than using raylib from another language
[17:20:17] <koollman> (in general)
[17:21:03] <ifreund> tsujp: If raylib for example returns NULL from some function on allocation failure, you can add a wrapper around that function in zig to return an error.OutOfMemory in zig in that case
[17:21:29] <ifreund> if raylib doesn't expose this information somehow in it's API there's nothing zig or any other language (including C) can do to change that
[17:21:43] <koollman> the main point of calling a C lib from zig is to avoid writing more C. the 'unsafe/dangerous' part doesn't grow as much
[17:22:33] <ifreund> and to avoid rewriting useful code written in C
[17:23:09] <ifreund> For example, I'm not about to rewrite wlroots in zig, instead I contribute to wlroots upstream and use zig for my code
[17:28:39] <tsujp> Gotcha
[17:28:52] <tsujp> Yeah so I suppose I was confused on the scope of the problem that C interop was aiming to address
[17:29:03] <tsujp> Makes a lot of sense now that you've both explained and given an example
[17:29:04] <tsujp> Thank you :)
[17:30:10] <ifreund> no problem!
[17:31:20] <Franciman> i am thinking about writing a flex clone in zig
[17:31:31] <tsujp> What is flex?
[17:32:01] <ikskuh> flex is a parser generator
[17:32:03] <Franciman> an automatic lexer generator
[17:32:20] <tsujp> I see
[17:32:59] <Franciman> i don't know if i want to, though :D
[17:33:24] <tsujp> Perusing some random things from videos and what not the casing of function calls in zig seems inconsistent? `error.OutOfMemory` but `std.debug.assert` and not say `std.debug.Assert` or `std.Debug.Assert`. Stuff like `cImport` etc. Why not `error.out_of_memory` or some form of consistency there? Maybe it is consistent but coming into it now it
[17:33:25] <tsujp> doesnt appear that way yet
[17:33:49] <ifreund> OutOfMemory isn't a function call, it's an error name :P
[17:34:15] <ifreund> Style Guide: https://ziglang.org/documentation/master/#Names
[17:34:17] <tsujp> `@compileError`
[17:34:57] <tsujp> I see, thanks!
[17:35:03] <tsujp> Doe zigfmt enforce that yet?
[17:35:47] <tsujp> One of the things I'm liking is that there is a single, unconfigurable format for the source so we don't end up with 5 trillion different styles ala JS or C etc
[17:36:13] <ifreund> no, zig fmt doesn't enforce naming conventions as there are good reasons to break them on occasion
[17:36:32] <ifreund> e.g. when interfacing with established OS APIs that follow a different convention
[17:37:10] <tsujp> Would it not make sense to have a decorated statement there so that the enforced name scheme is ignored instead of never enforcing it to begin with?
[17:37:22] <tsujp> It'd also make it clearer without any other context why it's named as such
[17:37:40] <ifreund> I don't think that would be worth the complexity and verbosity
[17:43:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[17:47:06] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[17:47:39] <jemius> Are tha parts of the zig stdlib dealing with strings and files stable? In the sense of being usable without much trouble
[17:55:00] *** Joins: arkurious (~arkurious@user/arkurious)
[18:07:19] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:07:42] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765)
[18:12:47] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Ping timeout: 268 seconds)
[18:18:48] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[18:19:40] *** Joins: notapenguin (~ryu@187.3.254.107)
[18:20:21] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[18:26:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:28:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:32:37] *** Joins: phaleth (~user@user/phaleth)
[18:33:58] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:48:02] *** segfault[m] is now known as nopenope[m]
[19:09:12] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17)
[19:10:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:12:57] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:c11c:2a92:dcdc:271a) (Ping timeout: 240 seconds)
[19:25:04] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[19:27:40] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[19:33:03] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[19:39:45] *** Joins: Tekk_ (~Tekk@cpe-76-182-45-53.nc.res.rr.com)
[20:03:54] *** Quits: shimonaga (~shimonaga@199.58.81.203) (Remote host closed the connection)
[20:10:58] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[20:14:17] *** Joins: chiheisen (31e5c22067@2604:bf00:561:2000::229)
[20:19:43] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[20:20:02] *** Quits: arkurious (~arkurious@user/arkurious) (Ping timeout: 240 seconds)
[20:20:34] *** Quits: Tekk (~tekk@86.106.121.191) (Remote host closed the connection)
[20:20:49] *** Tekk_ is now known as Tekk
[20:23:32] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[20:27:30] *** Joins: xackus (~xackus@185.15.0.3)
[20:28:48] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[20:31:48] *** cr1901_ is now known as cr1901
[20:32:52] *** Joins: arkurious (~arkurious@user/arkurious)
[20:37:51] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[20:45:06] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:57:58] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 250 seconds)
[21:20:34] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[21:20:52] *** Joins: bindu (~bindu@user/bindu)
[21:28:35] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886)
[21:32:30] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[21:32:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[21:50:11] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[22:10:29] *** Joins: neceve (~quassel@2.26.93.228)
[22:14:31] *** Joins: nvmd (~nvmd@user/nvmd)
[22:20:59] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[22:26:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[22:27:17] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:48] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[22:31:55] *** Joins: lispy (~lispy4@84.69.59.93)
[22:35:12] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[22:48:22] *** kiedtl is now known as cot
[22:49:15] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:56:20] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[23:00:22] *** Joins: notapenguin (~ryu@187.3.254.107)
[23:00:36] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[23:02:39] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[23:07:23] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[23:13:23] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765)
[23:13:46] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:15:33] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765) (Client Quit)
[23:28:18] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[23:30:10] *** Joins: terminalpusher (~terminalp@2a01:586:1347:1:24d9:fe07:2585:32f7)
[23:31:42] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886)
[23:42:51] <tsmanner>  Does zig make any guarantees about struct layouts when two structs are defined identically?  e.g. if `struct { x: i32, y: u8 };` appears in two places with different names (or anonymously), is it safe to @bitCast between the two?
[23:44:09] <tsmanner> Within one build of course, external libraries etc that are being linked against I imagine would have to use packed or extern to make any layout guarantees.
[23:45:10] <luuk> No, the structs would have to be packed/extern.
[23:48:18] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[23:48:51] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[23:50:33] <ikskuh> tsmanner: you don't even have the guarantee in the same build
[23:53:45] *** Joins: kpence (~user@cpe-173-175-248-133.tx.res.rr.com)
[23:56:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
