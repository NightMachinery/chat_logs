[00:01:31] <semz> If I define (setf foo), does it have to return the value it stores?
[00:01:47] <semz> or is that guaranteed to happen on the setf side
[00:04:32] <etimmons> clhs 5.1.2.9
[00:04:33] <specbot> Other Compound Forms as Places: http://www.lispworks.com/reference/HyperSpec/Body/05_abi.htm
[00:04:45] <etimmons> seems to say that you should return it
[00:07:12] *** Quits: amb007 (~a_bakic@15.245.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:07:33] *** Joins: Noisytoot_ (~noisytoot@sourcehut/user/noisytoot)
[00:07:51] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:07:57] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[00:11:55] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 256 seconds)
[00:12:21] <semz> thanks, I didn't really know where to look in the spec
[00:17:30] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[00:28:47] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:30:29] <pjb> semz: no, (setf foo) has to return it, itself.
[00:34:36] *** Quits: jeffrey (~jeffrey@2001:1c00:b1c:4100::ff16) (Quit: Client quit)
[00:40:55] *** Joins: biog (~user1@159.224.42.85)
[00:46:01] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[00:46:17] <jeosol> etimmons: Thanks for that feedback. I will give it a try and report back
[00:46:21] *** Noisytoot_ is now known as Noisytoot
[00:55:54] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[01:06:52] *** Quits: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:16:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:31:01] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 240 seconds)
[01:39:46] *** Joins: bollu (~bollu@159.65.151.13)
[01:40:18] <bollu> beach I'm a common lisp newb. I'm staring at https://github.com/robert-strandh/SICL/blob/3dbe0a238857d13eb56b89f21ee74de22d2ce194/Code/Cleavir/Intermediate-representation/instruction-mixin-classes.lisp#L22 and I'm very puzzled :) It's a mixin for a binary operation. So.. where are the two operands?
[01:40:22] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:880e:252f:a296:2236)
[01:44:13] <rotateq> bollu: it's just for additional inheritance I might say
[01:46:33] <bollu> rotateq where is the data of an instruction stored? I presume the instruction needs to store the two operands somewhere. Where does it do that?
[01:47:33] <rotateq> bollu: it's for when define certain methods, there has nothing like you mean to be stored in the beginning
[01:48:12] <rotateq> like with commutative-mixin below
[01:49:14] <lisp123> rotateq: Nice answer, that explains it well :)
[01:49:56] <rotateq> lisp123: really? or sarcasm? ^^
[01:50:13] <lisp123> rotateq: It is :) I was trying to explain in #lisp but failing
[01:50:44] <bollu> rotateq in which case, can you point me to where the actual instruction set is.. defined? Like, I understand that you're declaring that add is commutative. But you must have a representation of an add instruction?
[01:50:50] <bollu> somewhere in the compiler?
[01:51:21] <rotateq> no I'm not deep into the SICL project at all and would say it's nothing for starting out
[01:51:32] <bollu> hmm
[01:51:39] <bollu> what is good code to read while starting out
[01:52:02] <rotateq> first you should learn some things and then many others come by
[01:52:05] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 256 seconds)
[01:52:39] <bollu> what do you mean
[01:52:39] <rotateq> but right, SICL has a really good style and thought in it
[01:52:52] <rotateq> bollu: you said yourself you're a newbie
[01:53:01] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:53:12] <lisp123> bollu: https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwi4_IShkZn1AhXVA2MBHZyeDn4QFnoECAMQAQ&url=https%3A%2F%2Fdoc.lagout.org%2Fprogrammation%2FLisp%2FObject-Oriented%2520Programming%2520in%2520Common%2520Lisp_%2520A%2520Programmer%2527s%2520Guide%2520to%2520CLOS%2520%255BKeene%25201989-01-11%255D.pdf&usg=AOvVaw2y1pxdKUQBxXOS6rXsS4Z8
[01:53:59] <bollu> rotateq I am indeed. I like to learn things by reading good code and finding out what I don't know
[01:54:06] <bollu> lisp123 neat, thanks for the textbook link!
[01:54:23] <rotateq> yes lisp123, a good book, but may also be a bit too advanced for now
[01:54:42] <rotateq> bollu: you won't come far by just guessing
[01:55:17] <rotateq> there's the Practical Common Lisp book for example
[01:56:52] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[01:56:59] <bollu> rotateq I know scheme and haskell, if that helps
[01:57:09] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[01:57:09] <bollu> rotateq I'm trying to figure out the delta, which is the object system, as far as I can tell
[01:58:01] <rotateq> yes Haskell was also most of my background before and some other stuff
[01:58:26] *** Joins: hineios5 (~hineios@a95-93-142-124.cpe.netcabo.pt)
[01:58:40] *** Joins: karlosz (~karlosz@136.56.98.53)
[01:59:42] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 260 seconds)
[01:59:42] *** hineios5 is now known as hineios
[02:00:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:00:36] <bollu> `(assert (equal  (expr->eval 1 nil) 1))` I'm sprinkling my toplevel with asserts like these, while I REPL-based develop. How does one actually translate their repl based tests into "real" tests
[02:02:06] <rotateq> with a function that runs at a certain time I would say
[02:03:37] *** Quits: varjag (~user@188.95.247.249) (Ping timeout: 240 seconds)
[02:13:19] *** Joins: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6)
[02:13:35] *** Quits: pve (~pve@178-55-174-192.bb.dnainternet.fi) (Quit: leaving)
[02:13:48] *** Quits: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6) (Client Quit)
[02:14:51] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[02:19:02] <yottabyte> has anyone here done any advent of code 2021?
[02:19:05] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[02:20:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:27:20] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[02:29:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[02:29:49] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:880e:252f:a296:2236) (Ping timeout: 240 seconds)
[02:32:35] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[02:33:49] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[02:35:18] <raeda> yottabyte: I did the first couple of days
[02:37:54] <jstoddard> bollu: I don't know if this is what you're looking for with regards to tests, but: https://gigamonkeys.com/book/practical-building-a-unit-test-framework.html
[02:38:16] <jstoddard> The whole book is pretty good, if you haven't seen it yet and are new to Common Lisp.
[02:38:48] <yottabyte> raeda: did you do day 3?
[02:40:02] <raeda> Yep. Need help?
[02:40:29] <yottabyte> I do. I got the correct answer for the test input, but I'm getting the wrong answer for the input they want
[02:41:26] <yottabyte> here's my work so far: https://github.com/NoorKhan/advent-of-code-2021/blob/main/3/3.lisp
[02:41:54] <yottabyte> my idea was to make a list of plists: 1 list for each "column" of bits
[02:49:15] <raeda> I used a length 12 array to count the bits
[02:49:50] <yottabyte> what was in each slot?
[02:50:09] <bollu> jstoddard thanks! that seems useful
[02:52:23] *** Joins: igemnace (~ian@user/igemnace)
[02:53:00] <raeda> The ith element would count the number of 1s in the ith digit
[02:54:10] *** Joins: miique (~miique@181.46.139.166)
[02:54:24] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[02:54:32] <raeda> I think your code is getting the right answer for part 1
[02:54:41] <yottabyte> it is
[02:54:51] <yottabyte> wait
[02:54:56] <yottabyte> it's not for me
[02:55:02] <yottabyte> every time I enter it in
[02:55:05] <yottabyte> for my input
[02:57:12] <yottabyte> yeah, I'm still getting it wrong
[02:58:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:58:55] <raeda> The answer I get from running your code ends with 724
[03:00:15] <yottabyte> for your own input?
[03:00:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:01:15] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[03:01:16] <raeda> From https://adventofcode.com/2021/day/3/input
[03:01:48] <raeda> I checked the input file in your github repo, and they're different
[03:01:53] <yottabyte> I think this input is different for everyone though
[03:01:59] <yottabyte> it's based on your login
[03:03:05] *** rgherdt_ is now known as rgherdt
[03:03:24] <yottabyte> running my code against your input, do you get the right answer for yourself?
[03:03:37] *** Joins: karlosz (~karlosz@136.56.98.53)
[03:04:10] <raeda> Whelp, I'm confused since your code works fine on my input
[03:04:54] <yottabyte> so for my input, my code gives me: 3029094. can you tell me if this is the number you get running my input (from my GitHub) on your solution?
[03:05:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:08:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[03:09:11] <raeda> No, but your code's output matches mine. I'll try restarting my CL image and recompiling
[03:10:55] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[03:13:01] <raeda> yottabyte: Your *read-base* isn't set to anything weird, is it?
[03:13:58] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[03:14:00] <raeda> On line 8, I would write (loop for index from 0 below (length line) ... )
[03:15:13] <yottabyte> *read-base* is 10
[03:15:27] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Client Quit)
[03:15:39] <raeda> `for index from 0 to (1- ...)` is the same as `for index from 0 below ...`, and you can get the line length directly without parsing then printing
[03:17:37] <_death> yottabyte: if you have a line like "0123", note that (write-to-string (parse-integer line)) => "123"
[03:18:04] <yottabyte> that's gotta be the problem. I did loop for index from 0 below (1- (length line)) and then I got the right answer
[03:18:22] <yottabyte> I had to subtract 1 from the length. idk if there's a better way
[03:18:22] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[03:18:30] <yottabyte> maybe a regex split on the length
[03:19:04] <_death> with BELOW you don't need to subtract.. in your code you're using TO.. but that doesn't have to do with what I said
[03:20:09] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:20:10] <yottabyte> I have to subtract because it's including non 0 or 1 characters (the new-line character at the end of the line, I imagine)
[03:20:31] <yottabyte> maybe I can do something with "for line = (read-line stream nil)" to only read what I want to read
[03:20:49] <_death> instead of guessing, you can debug
[03:21:27] *** Joins: jpl01 (~user@2001:16b8:498f:5400:5b0e:ac71:3257:8c68)
[03:23:42] <raeda> yottabyte: Yay! Congrats!
[03:26:46] <raeda> yottabyte: Another piece of advice: your binary-to-decimal function is the same as (parse-integer binary-string :radix 2)
[03:27:51] <yottabyte> Thanks everyone
[03:32:00] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Excess Flood)
[03:32:03] *** Joins: john__ (~john@dynamic-077-002-055-235.77.2.pool.telefonica.de)
[03:32:10] *** Quits: Alfr (~Alfr@user/alfr) (Killed (zirconium.libera.chat (Nickname regained by services)))
[03:32:14] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[03:32:14] *** Joins: Alfr (~Alfr@user/alfr)
[03:32:25] *** Quits: gaqwas (~john@dynamic-077-002-055-235.77.2.pool.telefonica.de) (Read error: Connection reset by peer)
[03:32:31] *** Quits: pranavats (3fba1d1b34@jabberfr.org) (Ping timeout: 256 seconds)
[03:34:05] <bollu> How do I create a shortcut to switch between the editor and the listener in lispworks?
[03:34:14] <bollu> I found the snippet (editor:bind-key "Tools Listener" #("Control-c" "Control-z"))
[03:34:17] <bollu> which doesn't seem to work
[03:37:28] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:58:13] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[04:16:51] *** Quits: john__ (~john@dynamic-077-002-055-235.77.2.pool.telefonica.de) (Remote host closed the connection)
[04:19:43] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:21:46] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:45:43] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:47:17] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzzâ€¦)
[04:55:49] *** Quits: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[04:56:06] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[05:01:36] *** Joins: gaqwas (~john@dynamic-077-002-055-235.77.2.pool.telefonica.de)
[05:06:11] *** Alfr is now known as Guest9480
[05:06:12] *** Quits: Guest9480 (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[05:06:15] *** Joins: Alfr (~Alfr@user/alfr)
[05:09:36] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[05:10:07] *** Joins: rogersm (~rogersm@90.166.180.250)
[05:19:12] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[05:19:37] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[05:29:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:42:41] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:49:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:51:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[05:53:43] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:09:19] *** Quits: raeda (~raeda@74.215.109.33) (Ping timeout: 268 seconds)
[06:10:54] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[06:11:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:24:43] *** Joins: raeda (~raeda@74.215.109.33)
[06:27:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[06:33:26] *** Quits: jpl01 (~user@2001:16b8:498f:5400:5b0e:ac71:3257:8c68) (Remote host closed the connection)
[06:54:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[06:55:22] *** Joins: jstoddard (~user@2600:8801:a400:5a00::ba77)
[06:55:23] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:57:04] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:57:23] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[06:58:45] *** Joins: remexre (~remexre@user/remexre)
[07:00:55] *** Quits: sloanr (~user@70-59-86-78.mpls.qwest.net) (Ping timeout: 256 seconds)
[07:03:28] *** Joins: Everything (~Everythin@37.115.210.35)
[07:09:52] *** Joins: pjb (~pjb@user/pjb)
[07:12:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[07:12:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:15:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[07:15:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:15:39] *** Quits: gaqwas (~john@dynamic-077-002-055-235.77.2.pool.telefonica.de) (Ping timeout: 256 seconds)
[07:17:01] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:19:24] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:29:09] *** Joins: beach (~user@2a01:cb19:150:3400:928b:3395:fe81:c0b2)
[07:29:23] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[07:30:08] <beach> Good morning everyone!
[07:33:52] <beach> bollu: An instruction has a list of inputs and a list of outputs.  Individual inputs and outputs are not explicitly stored.
[07:35:57] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[07:36:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:36:44] <beach> bollu: Look in instruction.lisp and you will see those slots.
[07:38:44] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:40:18] <beach> bollu: Look in .../HIR/fixnum-related-instructions.lisp for an instruction for adding two fixnums.
[07:41:49] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:43:47] <Everything> Good morning
[07:53:44] *** Joins: gaqwas (~john@dynamic-077-002-077-226.77.2.pool.telefonica.de)
[07:54:35] *** Joins: semz (~none@user/semz)
[07:56:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[07:56:27] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 256 seconds)
[07:58:27] *** Joins: aeth (~aeth@user/aeth)
[08:02:02] *** Joins: akoana (~ah@user/akoana)
[08:04:37] *** Quits: gaqwas (~john@dynamic-077-002-077-226.77.2.pool.telefonica.de) (Ping timeout: 240 seconds)
[08:07:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:09:35] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:11:49] <remexre> does anyone know if there's a reason why usocket uses select() instead of poll() on SBCL?
[08:11:58] <remexre> bizarrely, it seems to use poll() on SCL...
[08:17:51] *** Joins: miique (~miique@181.46.139.166)
[08:28:19] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:29:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:30:05] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:30:10] *** Quits: jstoddard (~user@2600:8801:a400:5a00::ba77) (Quit: ERC (IRC client for Emacs 27.1))
[08:48:20] *** Joins: karlosz (~karlosz@136.56.98.53)
[08:49:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:52:05] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Remote host closed the connection)
[08:52:43] *** Joins: Jing (~hedgehog@115.207.57.60)
[08:56:05] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:57:58] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:01:32] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[09:11:23] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:13:16] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:17:25] *** Quits: raeda (~raeda@74.215.109.33) (Ping timeout: 240 seconds)
[09:25:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:26:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:31:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[09:36:18] *** Joins: raeda (~raeda@72.49.214.135)
[09:39:41] *** Joins: raeda_ (~raeda@72.49.214.135)
[09:40:22] *** Quits: raeda (~raeda@72.49.214.135) (Read error: Connection reset by peer)
[09:46:24] *** Quits: jeosol (~jeosol@2600:1700:d6d0:4540::49) (Ping timeout: 256 seconds)
[09:52:13] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:54:37] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:55:20] *** Joins: pve (~pve@188-67-201-146.bb.dnainternet.fi)
[10:05:18] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:16:27] *** Joins: loke (~loke@junk.nocrew.org)
[10:20:13] <bollu> Morning! I'm looking for feedback on my common lisp code: https://gist.github.com/bollu/651e643565c9d099c6a5b6d5a7fc16d5
[10:20:38] <beach> bollu: Did you see my answers to your SICL question?
[10:21:20] <beach> bollu: To begin with, you have the wrong number of semicolons for top-level comments, and your indentation is wrong.
[10:21:54] *** Quits: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Quit: ERC (IRC client for Emacs 27.1))
[10:22:51] <beach> bollu: It looks like you are using lists where it would be better to use standard objects or structure objects.
[10:23:21] <beach> bollu: LET has an implicit PROGN so no need for an explicit one.
[10:24:16] <beach> bollu: Your naming convention with -> is not conventional.
[10:25:18] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:28:02] <beach> bollu: The code in your CASE should not be necessary.
[10:28:56] <beach> bollu: And names like BB and TY don't help the person reading your code.
[10:29:33] <beach> bollu: And comments like ";; then" and ";; else" just add noise.
[10:30:29] <beach> bollu: The number of blank lines between top-level forms seems completely arbitrary.  Use exactly one blank like, or none in exceptional cases.
[10:32:10] <beach> bollu: And you are misleading the person reading your code by having a function named ASSERT-EQ that then uses an equality predicate other than EQ.
[10:32:43] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[10:33:27] <beach> bollu: This code would be much shorter, much nicer, and much safer, if you used standard classes rather than lists.
[10:35:30] *** Joins: shka (~herr@109.231.0.226)
[10:37:25] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[10:37:30] <moon-child> bollu: (reduce (lambda (res x) (list res x)) ...) can be expressed simply as (reduce #'list ...)
[10:37:38] *** Joins: Lord_Nightmare2 (Lord_Night@user/lord-nightmare/x-3657113)
[10:40:11] <moon-child> bollu: GETTER should use EQ, not EQUAL, as it is comparing symbols
[10:40:17] <bollu> beach thanks a lot. I'll refactor this stuff using defclass and compare.
[10:41:24] *** Lord_Nightmare2 is now known as Lord_Nightmare
[10:42:13] <moon-child> bollu: close parentheses should not go on their own line
[10:44:31] <moon-child> in EXPR->EVAL, why use NUMBERP rather than EXPR->IS-CONST?
[10:46:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:48:57] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:49:26] <bollu> moon-child I should have used expr->is-const, you're right.
[10:49:42] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9af:d2b0:d08:47ca)
[10:58:43] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:84fa:8436:cbef:ffc)
[10:59:30] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[10:59:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:00:01] *** Joins: amb007 (~a_bakic@31.245.204.77.rev.sfr.net)
[11:02:02] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9af:d2b0:d08:47ca) (Ping timeout: 240 seconds)
[11:10:12] <ns12> remexre: What is SCL? Scieneer Common Lisp?
[11:10:46] <remexre> ns12: yeah...
[11:11:14] <ns12> Is it widely used?
[11:11:21] <phoe> not anymore
[11:12:23] <phoe> it's effectively dead - scieneer.com disappeared from the 'net
[11:13:51] <ns12> beach: "Your naming convention with -> is not conventional" - What is the convention for naming conversion functions?
[11:16:19] <beach> Well, these are not really conversion functions.  They are accessors.  And the best name for an accessor is the thing it returns like NAME for the name of an object, ADDRESS for an address of an object, etc.
[11:17:41] <jackdaniel> clx uses a->b, cffi uses a-to-b, the standard just specifies coerce and accessor like (STRING SOME-SYMBOL)
[11:17:55] <jackdaniel> s/coerce/COERCE/
[11:18:06] <jackdaniel> for conversion of course, as beach pointed out this is not really a conversion but a predicate
[11:18:36] <jackdaniel> the predicate name should be i.e EXPRESSION-CONSTANT-P (or in a form of an accessor)
[11:18:50] <ns12> Okay. Is it generally okay to use -> for conversion functions? For example, OBJ-A->OBJ-B.
[11:20:29] <jackdaniel> it is not unusual to see such function names; in LiSP author argues, that such functions should be named (OBJ-B<-OBJ-A ...) so the returned type is on the left (if I remember correctly)
[11:21:37] <semz> No CL standard function uses it to my knowledge, but you see them quite a bit, probably because Scheme uses them.
[11:22:02] <jackdaniel> well, standard doesn't have explicit conversion operators, except from the function COERCE
[11:22:28] <ns12> jackdaniel: Nowadays, does anyone follow the OBJ-B<-OBJ-A convention?
[11:22:37] *** Quits: amb007 (~a_bakic@31.245.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[11:22:39] <semz> parse-integer, kind of. Yes, I'm reaching.
[11:23:26] <jackdaniel> I wouldn't call it a convention, rather a recommendation. I'm sure someone does, but I don't know about such codebase myself
[11:23:30] *** Joins: amb007 (~a_bakic@162.39.22.93.rev.sfr.net)
[11:25:38] <ns12> What about the use of ! in the names of functions that mutate objects? Do Common Lisp programmers use ! like Scheme programmers do?
[11:26:35] <moon-child> conventionally they do not
[11:26:56] <jackdaniel> I saw it in a few libaries, but it is not common. a destructive version of FOO is NFOO (that's not the same as mutating, because you call them for the return value)
[11:27:02] <ns12> So how is mutation indicated? In the docstring?
[11:27:12] <jackdaniel> often it is indicated by a last letter f
[11:27:16] <jackdaniel> like (rotatef a b c)
[11:27:41] <moon-child> ns12: same way any other behaviour of the function is indicated
[11:27:44] <jackdaniel> or (maxf a 1 2 3) mind that the first argument is also taken into account for its value, not only as a storage place
[11:28:00] <moon-child> jackdaniel: I associate the letter f with a macro that mutates a place, not with a function
[11:28:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:28:55] <jackdaniel> sure, it is. I've assumed that we talk about operators
[11:29:17] <ns12> What is the meaning of "F"? Does it stand for anything?
[11:29:21] <jackdaniel> 'names of functions' may suggest otherwise, but organic  macros in scheme are underutilized so that's probably the cause that function comes to mind first
[11:29:29] <jackdaniel> MODIFY
[11:30:04] <jackdaniel> at leasts that's how I interpret it, I don't know how I came with this association
[11:30:36] <moon-child> apparently it's 'function'
[11:30:56] <jackdaniel> and, as for functions a usual name would be (setf foo)
[11:31:11] <jackdaniel> i.e (setf (name <object>) 'silly!)
[11:33:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[11:34:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:36:06] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:37:27] *** Quits: amb007 (~a_bakic@162.39.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[11:37:39] *** Joins: amb007 (~a_bakic@115.132.22.93.rev.sfr.net)
[11:39:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[11:49:02] *** Quits: amb007 (~a_bakic@115.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:49:16] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:09:42] *** Joins: gaqwas (~john@dynamic-077-002-077-226.77.2.pool.telefonica.de)
[12:13:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:14:45] *** Quits: Jing (~hedgehog@115.207.57.60) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:45:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:49:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:49:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:54:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[13:00:11] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:01:22] *** Joins: biog (~user1@159.224.42.85)
[13:02:13] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:07:03] *** Joins: Krystof (~user@81.174.155.115)
[13:20:02] *** Joins: nature (~nature@45.32.235.173)
[13:22:15] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[13:23:25] *** Quits: gaqwas (~john@dynamic-077-002-077-226.77.2.pool.telefonica.de) (Ping timeout: 256 seconds)
[13:25:01] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[13:26:17] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[13:28:55] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[13:33:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:35:33] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:37:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:50:00] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[13:50:17] *** Quits: biog (~user1@159.224.42.85) (Ping timeout: 240 seconds)
[13:50:40] *** Quits: dmgk (~dmgk@user/dmgk) (Quit: ZNC - https://znc.in)
[13:50:41] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[13:50:57] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[13:51:01] *** Joins: dmgk (~dmgk@user/dmgk)
[13:52:07] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[13:53:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:55:09] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 256 seconds)
[13:55:33] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[13:58:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:01:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:02:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:04:22] *** Lord_of_Life_ is now known as Lord_of_Life
[14:08:59] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f532:47f8:cb50:9aeb)
[14:11:01] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:14:37] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:84fa:8436:cbef:ffc) (Ping timeout: 240 seconds)
[14:19:05] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:84fa:8436:cbef:ffc)
[14:28:22] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:8845:2081:c2d:3858)
[14:31:56] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:84fa:8436:cbef:ffc) (Ping timeout: 252 seconds)
[14:37:22] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:8845:2081:c2d:3858) (Remote host closed the connection)
[14:37:38] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:8845:2081:c2d:3858)
[14:40:36] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:43:13] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:46:20] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:8845:2081:c2d:3858) (Remote host closed the connection)
[14:46:36] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:8845:2081:c2d:3858)
[14:50:23] *** Joins: igemnace (~ian@user/igemnace)
[14:53:40] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[14:55:20] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[14:56:16] *** Quits: Krystof (~user@81.174.155.115) (Remote host closed the connection)
[15:00:36] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:8845:2081:c2d:3858) (Read error: Network is unreachable)
[15:04:28] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:05:34] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:05:34] *** Joins: amb007 (~a_bakic@98.132.22.93.rev.sfr.net)
[15:08:23] *** Joins: notzmv (~zmv@user/notzmv)
[15:12:47] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:13:17] *** Joins: cranium (~cranium@user/cranium)
[15:14:34] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:21:45] *** Joins: varjag (~user@188.95.247.247)
[15:24:01] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[15:24:01] *** Quits: amb007 (~a_bakic@98.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:24:18] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:28:22] *** Joins: igemnace (~ian@user/igemnace)
[15:42:04] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[15:43:58] *** Joins: sander (~sander@user/sander)
[15:49:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:56:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:57:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:00:10] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf) (Remote host closed the connection)
[16:00:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[16:10:23] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[16:21:22] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[16:24:47] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[16:36:04] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[16:36:33] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[16:52:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:20:09] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[17:20:29] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[17:20:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[17:29:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:34:21] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:37:36] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[17:40:27] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[17:46:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:48:57] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:2ce4:4f4f:33d4:19e3)
[17:52:24] <theothornhill> Hey people! Does this look like a reasonable dsl for making a graphql server? I'd love some input, but here is a complete working graphql server (modulo networking) https://github.com/theothornhill/gql/blob/master/t/starwars/starwars-data.lisp
[17:52:32] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e1:c29f:ff:324e:39e1:8fdf)
[17:53:29] *** Joins: Krystof (~user@81.174.155.115)
[17:54:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:56:13] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:2ce4:4f4f:33d4:19e3) (Ping timeout: 240 seconds)
[17:57:02] <jackdaniel> where is the dsl?
[17:57:43] <theothornhill> well, it is the macros resembling defclasses.  Dsl might be the wrong term
[17:58:12] <jackdaniel> you mean defenum, definterface, defobject and defschema?
[17:59:12] <jackdaniel> is there a reason for defenum args not be a &body argument (instead of a list)
[17:59:41] <jackdaniel> re definterface and defobject, why are they not "normal" defclass arguments?
[17:59:48] <jackdaniel> s/arguments/forms/
[18:00:07] <jackdaniel> with possibly a different metaclass and slot metaclasses to accept other argument types
[18:00:29] <theothornhill> because they need to resolve into parsed objects, so that we both can use the js-like language and define our own
[18:00:53] <theothornhill> that's my thinking, at least
[18:00:55] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[18:01:27] <jackdaniel> well, these are clearly lisp forms, you may serialize it and deserialize with anything, you don't work on characters but on objects right?
[18:02:10] <theothornhill> yeah, I construct an ast, and these macros create ast objects manually
[18:02:20] <theothornhill> not quite sure I understand what you mean
[18:03:23] <jackdaniel> you've said that you have some specific syntax so objects can resolve into parsed objects, did I get that worng?
[18:03:28] <jackdaniel> s/worng/wrong/?
[18:03:42] <theothornhill> no, that's correct
[18:04:15] <jackdaniel> so, what I'm saying is that it doesn't matter what syntax you use, because serializer and deserializer work on data that is already read
[18:04:39] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 268 seconds)
[18:06:27] <theothornhill> Right
[18:07:32] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[18:08:52] <rotateq> so many strings :)
[18:09:57] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[18:12:09] <theothornhill> <3
[18:12:35] <theothornhill> yes, I don't really like that, but it might be better than changing the reader for casing?
[18:14:02] <rotateq> yes sure, for the ones that aren't all uppercase
[18:14:25] <theothornhill> true
[18:14:53] <jackdaniel> if this is about to expand to defclass then these would be slot names
[18:15:02] <jackdaniel> so perhaps (id :name "id" :type â€¦)
[18:16:31] <jackdaniel> (home-planet :name "homePlanet" â€¦) etc
[18:16:52] <theothornhill> They expand into other ast classes, for the time being at least
[18:19:44] <random-nick> you can avoid upcasing with ||
[18:20:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[18:21:00] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[18:21:03] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:22:50] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:27:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:29:10] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:30:15] *** Joins: Bike (~Glossina@71.69.170.70)
[18:30:15] *** ChanServ sets mode: +o Bike
[18:42:02] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[19:00:13] *** Quits: Bike (~Glossina@71.69.170.70) (*.net *.split)
[19:00:14] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (*.net *.split)
[19:00:14] *** Quits: random-nick (~random-ni@87.116.167.125) (*.net *.split)
[19:00:14] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[19:00:14] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (*.net *.split)
[19:00:14] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[19:00:14] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (*.net *.split)
[19:00:14] *** Quits: rogersm (~rogersm@90.166.180.250) (*.net *.split)
[19:00:14] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[19:00:14] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[19:00:14] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[19:00:14] *** Quits: alvaro121 (~aa@201.230.126.66) (*.net *.split)
[19:00:14] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[19:00:14] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (*.net *.split)
[19:00:14] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[19:00:14] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e1:c29f:ff:324e:39e1:8fdf) (*.net *.split)
[19:00:14] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (*.net *.split)
[19:00:15] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[19:00:15] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[19:00:15] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (*.net *.split)
[19:00:15] *** Quits: phantomics (~phantomic@97-118-150-246.hlrn.qwest.net) (*.net *.split)
[19:00:15] *** Quits: Xach (~xach@66-63-89-62.static.suscom-maine.net) (*.net *.split)
[19:00:15] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (*.net *.split)
[19:00:15] *** Quits: sirufer (68f46fc7c3@user/sirufer) (*.net *.split)
[19:00:15] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[19:00:15] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[19:00:15] *** Quits: resttime (~rest@2604:a880:400:d0::1b48:d001) (*.net *.split)
[19:00:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (*.net *.split)
[19:00:16] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (*.net *.split)
[19:00:16] *** Quits: varjag (~user@188.95.247.247) (*.net *.split)
[19:00:16] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[19:00:16] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[19:00:16] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (*.net *.split)
[19:00:16] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[19:00:16] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[19:00:16] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[19:00:16] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[19:00:16] *** Quits: utis (~utis@vpn-client281.uio.no) (*.net *.split)
[19:00:16] *** Quits: stack (~stack@ctrl-c.club) (*.net *.split)
[19:00:16] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[19:00:16] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[19:00:16] *** Quits: okflo_ (~okflo@lisa.diesenbacher.net) (*.net *.split)
[19:00:16] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[19:00:16] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[19:00:16] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (*.net *.split)
[19:00:16] *** Quits: jm (~jm@pool-74-104-177-164.bstnma.fios.verizon.net) (*.net *.split)
[19:00:16] *** Quits: qhong- (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[19:00:17] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[19:00:17] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[19:00:17] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[19:00:17] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[19:00:17] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[19:00:17] *** Quits: _death (~death@adeht.org) (*.net *.split)
[19:00:17] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[19:00:17] *** Quits: iquites (sid77830@id-77830.lymington.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: gko (~user@user/gko) (*.net *.split)
[19:00:17] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: gpiero (~quassel@camale.rm-rf.it) (*.net *.split)
[19:00:18] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[19:00:18] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[19:00:18] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (*.net *.split)
[19:00:18] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (*.net *.split)
[19:00:18] *** Quits: linjian (~linj@user/linj) (*.net *.split)
[19:00:18] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (*.net *.split)
[19:00:18] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[19:00:18] *** Quits: spec (~spec@user/spec) (*.net *.split)
[19:00:18] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[19:00:19] *** Quits: hisacro (~OBSD@my.displ.nl) (*.net *.split)
[19:00:19] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[19:00:19] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[19:00:19] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[19:00:19] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[19:00:19] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (*.net *.split)
[19:00:19] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[19:00:19] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[19:00:19] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[19:00:19] *** Quits: susam (~susam@user/susam) (*.net *.split)
[19:00:19] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[19:00:19] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[19:00:19] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[19:00:20] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[19:00:20] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[19:00:20] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[19:00:20] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[19:00:20] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (*.net *.split)
[19:00:20] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (*.net *.split)
[19:00:20] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[19:00:20] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[19:00:20] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[19:00:20] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[19:00:21] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[19:00:21] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (*.net *.split)
[19:00:21] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[19:00:21] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (*.net *.split)
[19:00:21] *** Quits: epony (epony@user/epony) (*.net *.split)
[19:00:21] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[19:00:21] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (*.net *.split)
[19:00:21] *** Quits: dale (dale@user/dale) (*.net *.split)
[19:00:21] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[19:00:21] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (*.net *.split)
[19:00:21] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[19:00:21] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[19:00:21] *** Quits: drakonis (drakonis@user/drakonis) (*.net *.split)
[19:00:22] *** Quits: hirez- (~hirez@2602:ffc5:20::1:512e) (*.net *.split)
[19:00:22] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (*.net *.split)
[19:00:22] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0) (*.net *.split)
[19:00:22] *** Quits: opc0de (~nathan@user/opcode) (*.net *.split)
[19:00:23] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[19:00:23] *** Quits: paul0 (~paul0@user/paul0) (*.net *.split)
[19:00:23] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[19:00:23] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: pok (~pok@user/pok) (*.net *.split)
[19:00:23] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (*.net *.split)
[19:00:23] *** Quits: dim (~dimlibera@212.85.154.83) (*.net *.split)
[19:00:23] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[19:00:23] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[19:00:23] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[19:00:23] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[19:00:24] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (*.net *.split)
[19:00:24] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[19:00:24] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (*.net *.split)
[19:00:24] *** Quits: sp (~sp@user/susam) (*.net *.split)
[19:00:24] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (*.net *.split)
[19:00:24] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (*.net *.split)
[19:00:24] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[19:00:24] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[19:00:24] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[19:00:24] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[19:00:25] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[19:00:25] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[19:00:25] *** Quits: les (znc@user/les) (*.net *.split)
[19:00:25] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[19:00:26] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[19:00:26] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[19:00:26] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[19:00:26] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[19:00:26] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[19:00:26] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (*.net *.split)
[19:00:26] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (*.net *.split)
[19:00:26] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[19:00:26] *** Quits: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073) (*.net *.split)
[19:00:26] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (*.net *.split)
[19:00:27] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[19:00:27] *** Quits: psf (~pi@206.55.172.18) (*.net *.split)
[19:00:27] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[19:00:27] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[19:00:27] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[19:00:27] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (*.net *.split)
[19:00:27] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[19:00:27] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[19:00:28] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[19:00:28] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[19:00:28] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[19:00:28] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[19:00:28] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (*.net *.split)
[19:00:28] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[19:00:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[19:00:28] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[19:00:28] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (*.net *.split)
[19:01:12] *** Joins: ChanServ (ChanServ@services.libera.chat)
[19:01:12] *** Joins: Bike (~Glossina@71.69.170.70)
[19:01:12] *** Joins: random-nick (~random-ni@87.116.167.125)
[19:01:12] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:01:12] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[19:01:12] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[19:01:12] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[19:01:12] *** Joins: rogersm (~rogersm@90.166.180.250)
[19:01:12] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[19:01:12] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[19:01:12] *** Joins: alvaro121 (~aa@201.230.126.66)
[19:01:12] *** Joins: unyu (~pyon@user/pyon)
[19:01:12] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[19:01:12] *** Joins: sterni (~lukas@user/sterni)
[19:01:12] *** molybdenum.libera.chat sets mode: +oo ChanServ Bike
[19:01:39] *** Joins: rain3 (~rain3___@86.127.204.59)
[19:01:47] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[19:01:57] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[19:01:57] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0)
[19:01:57] *** Joins: opc0de (~nathan@user/opcode)
[19:01:57] *** Joins: danieli (~danieli@user/danieli)
[19:01:57] *** Joins: paul0 (~paul0@user/paul0)
[19:01:57] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[19:01:57] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[19:01:57] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[19:01:57] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[19:01:57] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[19:01:57] *** Joins: pok (~pok@user/pok)
[19:01:57] *** Joins: dim (~dimlibera@212.85.154.83)
[19:01:57] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[19:01:57] *** Joins: phoe (~phoe@user/phoe)
[19:01:57] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[19:01:57] *** Joins: ck_ (~ck@plskthx.org)
[19:01:57] *** Joins: jfb4 (~jfb4@178.62.2.68)
[19:02:02] *** Joins: bldr (~bull@185.117.72.168)
[19:02:02] *** Joins: nckx (~nckx@tobias.gr)
[19:02:02] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[19:02:07] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[19:02:07] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[19:02:07] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[19:02:07] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[19:02:07] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[19:02:07] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[19:02:07] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[19:02:07] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[19:02:07] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[19:02:07] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[19:02:07] *** Joins: epony (epony@user/epony)
[19:02:07] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[19:02:07] *** Joins: antoszka-r (~antoni@rozalia.antoszka.pl)
[19:02:07] *** Joins: dale (dale@user/dale)
[19:02:07] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[19:02:07] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[19:02:07] *** Joins: drakonis (drakonis@user/drakonis)
[19:02:07] *** Joins: copec (~copec@schrodbox.unaen.org)
[19:02:07] *** Joins: lieven (~mal@ns2.wyrd.be)
[19:02:07] *** Joins: hirez- (~hirez@2602:ffc5:20::1:512e)
[19:02:13] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[19:02:13] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[19:02:13] *** Joins: sp (~sp@user/susam)
[19:02:13] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[19:02:13] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[19:02:13] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[19:02:13] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[19:02:13] *** Joins: anddam (~anddam@user/anddam)
[19:02:13] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[19:02:13] *** Joins: selwyn (~selwyn@user/selwyn)
[19:02:13] *** Joins: samebchase (~samebchas@51.15.68.182)
[19:02:13] *** Joins: jackdaniel (~jack@user/jackdaniel)
[19:02:13] *** Joins: les (znc@user/les)
[19:02:13] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[19:02:13] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[19:02:13] *** Joins: Fade (fade@outrider.deepsky.com)
[19:02:13] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[19:02:13] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[19:02:13] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[19:02:13] *** molybdenum.libera.chat sets mode: +o jackdaniel
[19:02:19] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[19:02:19] *** Joins: linjian (~linj@user/linj)
[19:02:19] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[19:02:19] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[19:02:19] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[19:02:19] *** Joins: spec (~spec@user/spec)
[19:02:19] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[19:02:19] *** Joins: hisacro (~OBSD@my.displ.nl)
[19:02:19] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:02:19] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[19:02:19] *** Joins: easye (~user@oxi.slack.net)
[19:02:19] *** Joins: Kabriel (~Kabriel@user/kabriel)
[19:02:19] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[19:02:19] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:02:19] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[19:02:19] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[19:02:19] *** Joins: zacts (~zacts@user/zacts)
[19:02:19] *** Joins: susam (~susam@user/susam)
[19:02:19] *** Joins: borodust (~irc@user/borodust)
[19:02:19] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[19:02:19] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[19:02:19] *** molybdenum.libera.chat sets mode: +o fe[nl]ix
[19:02:26] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[19:02:26] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[19:02:26] *** Joins: sepanko (~sepanko@user/sepanko)
[19:02:26] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[19:02:26] *** Joins: phantomics (~phantomic@97-118-150-246.hlrn.qwest.net)
[19:02:26] *** Joins: Xach (~xach@66-63-89-62.static.suscom-maine.net)
[19:02:26] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[19:02:26] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[19:02:26] *** Joins: etiago (~etiago@user/etiago)
[19:02:26] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[19:02:26] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
[19:02:33] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 240 seconds)
[19:02:33] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (Ping timeout: 240 seconds)
[19:02:37] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Ping timeout: 240 seconds)
[19:02:43] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:02:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:02:43] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[19:02:43] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[19:02:44] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Ping timeout: 250 seconds)
[19:02:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[19:02:48] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[19:02:48] *** Joins: _death (~death@adeht.org)
[19:02:48] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[19:02:48] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[19:02:48] *** Joins: gko (~user@user/gko)
[19:02:48] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[19:02:48] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[19:02:48] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[19:02:48] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[19:02:48] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[19:02:48] *** Joins: skyl4rk (~tlvb@user/tlvb)
[19:02:51] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Max SendQ exceeded)
[19:02:51] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 245 seconds)
[19:03:02] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 240 seconds)
[19:03:03] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[19:03:03] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[19:03:03] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[19:03:03] *** Joins: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073)
[19:03:03] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[19:03:03] *** Joins: gabc (~gabc@user/gabc)
[19:03:03] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[19:03:03] *** Joins: psf (~pi@206.55.172.18)
[19:03:03] *** Joins: dcx (~dcx@user/dac)
[19:03:03] *** Joins: amk (~amk@109.255.169.126)
[19:03:03] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[19:03:03] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[19:03:03] *** Joins: even4void (even4void@came.here.for-some.fun)
[19:03:03] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[19:03:03] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[19:03:03] *** Joins: lonjil (~quassel@user/lonjil)
[19:03:03] *** molybdenum.libera.chat sets mode: +o MichaelRaskin
[19:03:07] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Ping timeout: 260 seconds)
[19:03:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:03:08] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:03:08] *** Joins: varjag (~user@188.95.247.247)
[19:03:08] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[19:03:08] *** Joins: bollu (~bollu@159.65.151.13)
[19:03:08] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[19:03:08] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[19:03:08] *** Joins: xsperry (~xs@user/xsperry)
[19:03:08] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[19:03:08] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[19:03:08] *** Joins: utis (~utis@vpn-client281.uio.no)
[19:03:08] *** Joins: stack (~stack@ctrl-c.club)
[19:03:08] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[19:03:08] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[19:03:08] *** Joins: dstein64 (~dstein64@dannyadam.com)
[19:03:08] *** Joins: mzan (~quassel@mail.asterisell.com)
[19:03:08] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[19:03:08] *** Joins: jm (~jm@pool-74-104-177-164.bstnma.fios.verizon.net)
[19:03:08] *** Joins: qhong- (~qhong@rescomp-21-400677.stanford.edu)
[19:03:08] *** Joins: specbot (~specbot@common-lisp.net)
[19:03:08] *** Joins: minion (~minion@common-lisp.net)
[19:03:08] *** Joins: markasoftware (~quassel@107.161.26.124)
[19:03:17] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Ping timeout: 268 seconds)
[19:03:17] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 268 seconds)
[19:03:19] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 272 seconds)
[19:03:23] *** Quits: linjian (~linj@user/linj) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (Ping timeout: 250 seconds)
[19:03:29] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[19:03:32] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 240 seconds)
[19:03:32] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 240 seconds)
[19:03:38] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: sepanko (~sepanko@user/sepanko) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Ping timeout: 252 seconds)
[19:03:52] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 268 seconds)
[19:03:52] *** Quits: sp (~sp@user/susam) (Ping timeout: 268 seconds)
[19:03:52] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Ping timeout: 268 seconds)
[19:03:52] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Ping timeout: 268 seconds)
[19:04:03] *** Quits: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073) (Ping timeout: 260 seconds)
[19:04:55] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[19:07:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:09:02] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[19:15:46] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[19:16:01] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[19:16:34] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[19:23:37] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[19:23:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:28:25] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e1:c29f:bca2:8f0:75f6:d571)
[19:28:35] *** Joins: jeosol (~jeosol@2600:1700:d6d0:4540::49)
[19:30:16] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[19:31:18] *** Parts: jeosol (~jeosol@2600:1700:d6d0:4540::49) ()
[19:31:24] *** Joins: jeosol (~jeosol@2600:1700:d6d0:4540::49)
[19:31:53] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:36:57] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 240 seconds)
[19:37:02] *** Joins: eddof13 (~textual@177.230.240.94)
[19:38:49] *** Joins: linjian (~linj@user/linj)
[19:39:05] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[19:39:10] *** Quits: jeosol (~jeosol@2600:1700:d6d0:4540::49) (Changing host)
[19:39:10] *** Joins: jeosol (~jeosol@user/jeosol)
[19:47:41] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[19:49:30] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[19:49:31] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[19:51:06] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[19:52:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:55:17] *** Joins: remexre (~remexre@user/remexre)
[19:55:27] <sm2n> theothornhill: Are you only allowed one server per lisp image?
[19:56:41] <Alfr> sm2n, why?
[19:56:41] *** Joins: sp (~sp@user/susam)
[19:57:12] *** Joins: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[19:57:32] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:58:49] <sm2n> Well in the code it appears the gql schema is global. I wonder if that was intentional.
[19:59:13] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[19:59:43] <sm2n> I personally think it'd probably be desirable and useful to delimit schemata somehow
[20:00:02] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 240 seconds)
[20:00:12] *** Joins: remexre (~remexre@user/remexre)
[20:00:38] <Alfr> sm2n, that sounds more like a design limitation of your software in question, it's not inherent to CL.
[20:00:58] <sm2n> Yes, I was talking about the code theothornhill posted earlier
[20:01:32] <Alfr> sm2n, then never mind me. ;)
[20:01:35] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[20:03:47] *** Joins: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073)
[20:04:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:11:42] *** Joins: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr)
[20:12:32] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[20:12:32] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[20:15:17] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[20:16:55] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[20:19:36] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[20:20:38] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[20:20:38] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[20:21:03] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[20:23:01] *** Joins: sepanko (~sepanko@user/sepanko)
[20:23:01] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[20:23:02] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[20:25:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[20:27:05] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[20:31:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:34:20] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:34:44] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[20:36:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[20:36:44] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[20:38:03] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:40:44] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[20:43:49] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:44:49] <theothornhill> sm2n: That's just for now until I decide how to proceed.  I know of it :)
[20:45:25] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f7:d273:bca2:8f0:75f6:d571)
[20:48:13] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e1:c29f:bca2:8f0:75f6:d571) (Ping timeout: 240 seconds)
[20:48:45] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[20:51:29] *** Joins: karlosz (~karlosz@63-158-47-177.dia.static.qwest.net)
[20:52:37] <bollu> What all can :initarg be in a defclass? I accidentally discovered it can be either a plain name or a symbol: https://gist.github.com/bollu/b0b25e3d33a7c10cec72e1ed7bb071af
[20:52:48] <bollu> I tried strings, doesn't work
[20:53:06] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[20:53:31] <jackdaniel> both :bar-initarg and foo-initarg are symbols
[20:53:37] <jackdaniel> the initarg must be a symbol
[20:53:49] <jackdaniel> (not not necessarily a keyword)
[20:54:14] <bollu> Hmm, then I don't understand what a symbol is. I thought a :symbol was some kind of flyweight object that's efficiently allocated, while 'symbol is .. something else (I'm not sure what)
[20:54:53] <jackdaniel> :foo is a symbol in the package keyword, these symbols are kind of special, because they evaluate to themselves
[20:55:12] <jackdaniel> foo:xxx is a symbol XXX in a package "FOO"
[20:55:41] <jackdaniel> :xxx is a symbol named XXX in a package "KEYWORD"
[20:56:12] <bollu> mm
[20:56:56] <bollu> I feel there is some inconsistency still. In the declaration of foo, I use [foo-field :initarg foo-initarg] while for bar, I use [bar-field :initarg :bar-initarg]. The [foo-initarg] is not a symbol. Why is this accepted?
[20:57:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:57:14] <bollu> I'm not doubting your explanation, merely trying to understand if I'm missing something still.
[20:57:59] <beach> foo-initarg is a symbol.
[20:58:16] <bollu> Oh, I'm not reading right
[20:58:16] <bollu> I see
[20:58:23] <bollu> I thought 'foo-initarg was a symbol, with the quote.
[20:58:33] <jackdaniel> quote prevents evaluation
[20:58:48] <bollu> what is a symbol, then? is every identifier a symbol?
[20:59:12] <bollu> (and things of the form :<identifier> ? )
[20:59:47] <Alfr> bollu, result of (make-symbol "some-name").
[20:59:47] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:59:56] <beach> clhs 2.3.4
[20:59:57] <specbot> Symbols as Tokens: http://www.lispworks.com/reference/HyperSpec/Body/02_cd.htm
[21:00:02] <beach> bollu: ^
[21:00:04] <phoe> a symbol is one of primitive lisp datatypes
[21:00:30] <phoe> simplifying, a symbol is a string given identity (and optionally a package)
[21:00:30] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[21:00:38] <phoe> (although most of symbols you'll meet in lisp have packages)
[21:00:51] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[21:01:00] *** Joins: amb007 (~a_bakic@81.132.22.93.rev.sfr.net)
[21:01:10] <beach> Also be careful by what you mean by "is".
[21:01:15] <phoe> CL has no concept of "identifier"
[21:01:37] <jackdaniel> it has
[21:01:39] <jackdaniel> http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_i.htm#identifier
[21:01:43] <phoe> !
[21:01:56] * phoe stands corrected
[21:02:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:02:14] <jackdaniel> stand that way for 15m on tips of your toes
[21:02:16] <jackdaniel> :)
[21:02:23] <phoe> now that's a challenge
[21:03:47] <bollu> Nice, thank you!
[21:05:29] <bollu> CL-USER 30 > (make-symbol "foo") #:|foo|    I have not seen #:|...| anywhere else. should I have encountered it in the wild before?
[21:05:54] <Xach> bollu: maybe
[21:06:07] <jackdaniel> #:|foo| is composed of two reader macros
[21:06:18] <jackdaniel> #:xxx  means a symbol without package
[21:06:34] <jackdaniel> |xxx| means a symbol with a name "xxx" (as opposed to i.e "XXX")
[21:06:54] <jackdaniel> so #:|foo| means uninterned (without package) symbol with a name "xxx"
[21:08:09] <random-nick> | isn't a reader macro
[21:08:19] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:08:26] <random-nick> it's defined as a "multiple escape character"
[21:08:56] <jackdaniel> OK, me top tops on his toes
[21:08:59] <jackdaniel> s/top/tip/
[21:09:03] <bollu> :)
[21:09:17] <bollu> okay, neat, thanks! I go back to fixing my shoddy lisp as per beach's feedback
[21:11:53] <beach> bollu: Also, really, I am serious by being careful with what you mean by "is".
[21:12:11] <beach> bollu: When the reader sees the sequence of characters 'hello, it does not return a symbol.
[21:12:39] <beach> bollu: It returns a list of two symbols: (QUOTE HELLO)
[21:13:32] <beach> bollu: So a more accurate statement than "is", would be "in a context of evaluation, the form 'hello evaluates to the symbol named HELLO".
[21:14:48] <bollu> beach the rephrasing is very helpful.
[21:14:51] <beach> bollu: The rest depends on the evaluation rules and some other things.  Like when the reader sees :hello, it returns the symbol named HELLO in the keyword package.  But as it turns out, when the evaluator sees a symbol in the keyword package, it returns the same symbol as a value.  That is not the case with other symbols.
[21:15:48] <phoe> ;; ...with *most* other symbols - some of them are defined to evaluate to themselves, most notably the constants T and NIL
[21:15:58] <beach> Right.
[21:16:41] <jackdaniel> (defvar phoe 'phoe)
[21:16:41] <phoe> ;; but keywords are the group of symbols for which this behavior is required - all it takes is interning a symbol in the KEYWORD package for that symbol to gain the magical properties of a keyword
[21:16:55] <phoe> also what jackdaniel just said
[21:17:09] *** Quits: karlosz (~karlosz@63-158-47-177.dia.static.qwest.net) (Quit: karlosz)
[21:17:18] <beach> bollu: So this is why, again in the context of evaluation, a symbol such as HELLO by itself evaluates to the value of HELLO as a variable, whereas a symbol such as :HELLO evaluates to itself.
[21:17:41] <jackdaniel> btw lately I find myself more often writing (function foo) in macro definitions (as contrated to function bodies) than #'foo
[21:17:54] <jackdaniel> it makes all that quoting and unquoting much less cryptic
[21:18:01] <jackdaniel> and (quote foo)
[21:18:21] <bollu> jackdaniel that's very neat.
[21:18:27] <bollu> jackdaniel (the defvar)
[21:18:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:18:51] *** Quits: amb007 (~a_bakic@81.132.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[21:19:20] <jackdaniel> I like being complimented, keep going! ;)
[21:19:28] * jackdaniel leaves the office, see you \o
[21:19:31] <bollu> see ya!
[21:19:59] *** Joins: amb007 (~a_bakic@202.149.22.93.rev.sfr.net)
[21:20:04] <bollu> beach A stylistic question. If you recall the code review you did for me ~12h ago, I had functions like expr->eval. You mentioned this was bad form. What would you name such a function?
[21:20:09] <bollu> I am considering expr-eval
[21:20:11] <bollu> but I am not sure
[21:21:22] <beach> I need to do that tomorrow.  My (admittedly small) family just announced that dinner is served.  Sorry.
[21:22:03] *** Joins: wheelsucker (~user@2600:8801:8c26:7f00::2f04)
[21:22:25] <bollu> beach enjoy!
[21:22:25] *** Joins: Oladon (~olad@98.43.81.226)
[21:22:38] *** Quits: eddof13 (~textual@177.230.240.94) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:23:02] <jackdaniel> what does this function do?
[21:23:45] <jackdaniel> evaluate-expression would be a good name if it evaluates the expression
[21:24:54] <etimmons> Xach: Is Planet Lisp broken or is it just my feed? Some posts from yesterday aren't showing up.
[21:25:06] <Xach> etimmons: could be both!
[21:25:31] <lisp123> Last post 36 hours ago here
[21:25:38] <lisp123> Xach: Who owns lisp.org?
[21:25:43] <lisp123> What a domain...
[21:25:46] <lisp123> *drools*
[21:25:47] <bollu> jackdaniel it evaluates expressions, yes
[21:25:49] <Xach> lisp123: franz
[21:25:55] <yottabyte> in emacs, how do I load the entire file? so that every function and what not is available in slime
[21:25:58] <Xach> etimmons: i get 404 for the feed. did it move and i didn't know about it?
[21:26:16] <Xach> yottabyte: slime-load-file is one way
[21:26:26] <lisp123> Xach: Thanks. That's very nice of them for the home page.
[21:26:32] <etimmons> what address do you have?
[21:26:52] <Xach> it is possible you informed me and i failed to act. i am using https://www.timmons.dev/feed/common-lisp-rss.xml
[21:26:58] <bollu> Another question. Once I `(defclass expr () ())`, can I somehow get `number` and `symbol` to inherit from `defclass`?
[21:27:04] <yottabyte> oh, C-C C-L worked
[21:27:25] <bollu> Because I want `expr-eval` to evaluate numbers and symbols, as well as my own expression node types
[21:27:40] <phoe> what do you mean, "inherit from defclass"
[21:27:41] <bollu> [or is this an anti-pattern, and I should create custom expression types `expr-num` and `expr-sym`?]
[21:27:53] <phoe> you mean from EXPR?
[21:27:57] <bollu> yes, from EXPR
[21:27:58] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[21:28:09] <phoe> (defclass my-eval:number (my-eval:expr) ())
[21:28:25] <phoe> note that I package-prefixed your symbols because NUMBER and SYMBOL are predefined in the CL package
[21:28:34] <etimmons> Xach: Should be https://www.timmons.dev/tag/common-lisp-rss.xml
[21:28:43] <phoe> you'll want to define a package MY-EVAL (or some other name) and shadow symbols like NUMBER and SYMBOL
[21:28:49] <bollu> hmm
[21:28:50] <semz> If expr-eval is a generic function, you can define a method specialized to number or string. The CL classes number and symbol can't be made subclasses of your own classes, although you could make your own classes with that name.
[21:29:18] <semz> the latter is basically what phoe said
[21:29:22] <bollu> semz is it considered good practice to specialize a generic function to primitive types like number / symbol / string? (expr-eval is indeed a generic function)
[21:29:23] <Xach> etimmons: thanks, that works
[21:29:28] <phoe> yes, what semz said - depends on whether you'd like to reuse CL types
[21:29:30] <phoe> bollu: yes
[21:29:34] <phoe> s/types/classes/
[21:29:39] <bollu> right, sorry :)
[21:29:41] <semz> Definitely common.
[21:29:43] <bollu> I come from static typing land, mostly
[21:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:01] <bollu> nice, okay! thanks
[21:30:22] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:30:44] *** Joins: ns12 (~ns12@user/ns12)
[21:30:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:32:05] <etimmons> Xach: awesome, thanks!
[21:33:26] <lisp123> Can see the new post now
[21:33:48] <lisp123> etimmons: congrats on the release
[21:34:02] <Xach> etimmons: thanks for letting me know (possibly more than once) the correct link
[21:34:06] <etimmons> lisp123: Thank you!
[21:34:39] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:35:25] <etimmons> Xach: No worries. I think there was just a transcription error on one side or the other when I changed it. Or, more accurately, decided that I may blog about more than common-lisp some day
[21:43:52] *** Joins: eddof13 (~textual@189.178.218.195)
[21:44:26] *** Joins: jealousm` (~user@179.93.162.246)
[21:46:02] *** Quits: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Ping timeout: 240 seconds)
[21:49:12] *** jealousm` is now known as jealousmonk
[21:51:02] <etimmons> Xach: Also, if I were interested in making the new repos Twitter bot look at Gitlab as well what repo should I look at?
[21:51:10] *** Joins: sloanr (~user@70-59-86-78.mpls.qwest.net)
[21:52:14] *** Quits: sloanr (~user@70-59-86-78.mpls.qwest.net) (Remote host closed the connection)
[21:53:57] *** Quits: eddof13 (~textual@189.178.218.195) (Ping timeout: 240 seconds)
[21:55:55] <bollu> how do I compare classes for structural equality?
[21:56:07] <Xach> bollu: there is nothing built-in to do that.
[21:56:57] <bollu> Xach what are my options?
[21:57:08] <etimmons> Any Sly users know if there's a way to get an _inferior-lisp_ buffer like SLIME's? Sometimes I have messages printed before the mREPL starts that I want to see
[21:57:19] <bollu> Xach I'm trying to write an algorithm that needs persistence, so being able to write immutable style code and check structural equality would be very very useful
[21:59:37] <Xach> etimmons: https://github.com/xach/planetfeed
[21:59:37] <drakonis> etimmons: i skimmed your post about roswell and it reminds me a bit of how guix and nix operates
[22:00:03] <Xach> bollu: i'd look at joe marshall's posts about changesafe
[22:00:12] <etimmons> nvm, I found the inferior lisp buffer. For some reason wasn't showing up in my buffer list with C-x b ðŸ¤”
[22:00:14] <Xach> bollu: and kent pitman's "equal rights" article (i think that's the one)
[22:00:50] <bollu> Xach this? http://www.nhplace.com/kent/PS/EQUAL.html
[22:00:57] <bollu> and this? https://www.xach.com/lisp/changesafe.html
[22:01:26] <Xach> bollu: that's part of it. he blogged more details sometime in the past 10 years
[22:01:38] <bollu> Xach does it offer a solution? or perspective? ;)
[22:02:05] <Xach> bollu: perspective
[22:02:20] <bollu> Xach I am unsure that is what I need, if I need to implement algorithms that *need* persistence
[22:02:27] <bollu> but I shall read them nonetheless
[22:02:29] <bollu> thanks!
[22:03:20] <drakonis> minus taking over execution
[22:04:59] <etimmons> Xach: and is http://planet.lisp.org/github.atom produced by https://github.com/xach/ghprojects ?
[22:06:04] <Xach> etimmons: oh, that's probably a better starting project
[22:06:13] <Xach> let me see if there are uncommitted bits
[22:07:27] <etimmons> drakonis: I should try guix and nix someday.
[22:09:00] <drakonis> they're pretty decent, but both have their share of oddities
[22:09:07] <bollu> I think I will move to defstruct over defclass
[22:09:09] <bollu> for my use-case
[22:09:22] <lisp123> bollu: stick with defclass
[22:09:25] <bollu> lisp123 :(
[22:09:30] <drakonis> i should try to reimplement either in cl as soon as i'm capable of
[22:09:32] <lisp123> :)
[22:09:33] <bollu> lisp123 I'll need to write equality compares by hand
[22:09:50] <lisp123> hmm
[22:09:52] <drakonis> guix is very good though
[22:10:23] <lisp123> i'll send you something
[22:10:58] <lisp123> https://plaster.tymoon.eu/view/2824#2824
[22:11:06] <lisp123> there should be a class equal function in there
[22:11:24] <drakonis> it improves on nix in a myriad of ways but retains some design decisions due to reusing the nix daemon
[22:11:25] <lisp123> Note this requires you load the CLOSER-MOP package from quicklisp
[22:11:56] <lisp123> Take the relevant bits from the file (e.g. the last line will not work)
[22:12:19] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[22:12:34] <Xach> etimmons: there *are* some uncommitted changes to ghprojects
[22:13:02] <jstoddard> drakonis: If you implement guix in CL, I'll gladly try it out.  I have been interested in trying out guix, but haven't gotten around to it.
[22:13:08] <Xach> etimmons: I'll see about pushing them later today
[22:13:35] <etimmons> drakonis: I bet I'd actually like it. IIUC, once you enter a guix environment it's basically like a fresh OS where everything is available with the standard names and so on. And I realized by biggest complaint about Roswell was it didn't do that
[22:14:08] <drakonis> i would like to reimplement shepherd in cl as well
[22:14:32] <etimmons> Xach: No rush, I don't have any time budgeted for it soon. Just going to idly look and think for a while
[22:14:36] <Xach> etimmons: have you seen djb's remarks about packagers?
[22:14:46] <etimmons> I don't think so
[22:15:17] <drakonis> then actually get rid of the dependency on the nix daemon so i can use the daemon for deployment, build scheduling and monitoring
[22:15:39] <Xach> etimmons: https://cr.yp.to/compatibility.html
[22:15:54] <drakonis> It is a big project
[22:17:04] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:17:20] <Xach> headers say last modified 2001
[22:17:49] <drakonis> 2001? that's pretty much about the unixen
[22:18:04] <drakonis> not linux distros being mutually incompatible
[22:18:24] <etimmons> Xach: The first two examples (apache) brought some bad flashbacks to when I first realized that not every distribution put files in the same place
[22:18:52] <Xach> i'm glad he won and everything is consistent now
[22:18:52] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:19:00] <etimmons> ha
[22:19:16] *** Joins: miique (~miique@181.46.139.166)
[22:20:58] *** Quits: amb007 (~a_bakic@202.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:21:01] <drakonis> ha indeed
[22:21:15] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:21:59] <drakonis> cl-tar is highly appreciated.
[22:23:21] <drakonis> i certainly wonder something now, if i have a sufficient amount of external libraries, how prone am i to breakage?
[22:23:39] <drakonis> especially libraries that aren't 1.0?
[22:25:21] <etimmons> drakonis: Somewhat. I think most CL projects do a good job about not breaking things, but breakage does happen occasionally.
[22:25:21] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f7:d273:bca2:8f0:75f6:d571) (Read error: Connection reset by peer)
[22:25:35] <drakonis> jstoddard: it is worthwhile to try it out, if i actually finished the prototype, it'll look a lot like guix
[22:25:57] <etimmons> Frequent CI runs help (not just when you push, but also periodic to get updates from your deps)
[22:26:13] <drakonis> before actually engaging into a total makeover
[22:26:50] <etimmons> And if you add your project to QL, Xach will let you know if your project fails to build due to a dep change. But I don't think he runs tests, just compiles
[22:27:19] <drakonis> tbf, guix and nix have CIs for their package ecosystem
[22:27:36] <drakonis> so that gets avoided
[22:28:06] <drakonis> lots of package pinning is done to avoid breakage due to upstream updating
[22:28:13] <drakonis> it is fascinating
[22:28:24] <etimmons> And there are other approaches as well, like CLPM and Qlot that let you create pinned environments.
[22:28:58] <etimmons> But if you go that route, you definitely want to have your CI occasionally bump your deps so you don't get too far behind
[22:30:29] <drakonis> yeah.
[22:30:41] <drakonis> that's the same approach
[22:31:35] <etimmons> (shameless-self plug): I do have Gitlab CI scripts for CLPM that will automatically bump your deps and open an MR. That then triggers your regular CI tests so you can see if there was breakage
[22:31:45] <drakonis> i do want an escape hatch for ignoring pinning
[22:32:16] <drakonis> since guix does not provide it the easy way
[22:32:32] <drakonis> nix has it hidden under layers of indirection and code
[22:32:38] <drakonis> brb
[22:33:14] <etimmons> drakonis: That's pretty easy to do. pining is typically done with a separate file and requires no modification to an .asd file. So just ignore the extra file and load the system however you want to
[22:33:45] <etimmons> * pinning
[22:35:22] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[22:39:49] <etimmons> As a concrete example, I use CLPM to manage my dev and testing env for cl-tar. But it'll still work via QL (once the next dist hits) or just dropping it onto your ASDF source registry.
[22:41:32] <drakonis> not going to make it cl specific tho, as it would defeat the point of the rewrite
[22:41:42] <drakonis> also brb soon
[22:42:44] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[22:42:48] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[22:42:51] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[22:42:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[22:43:15] *** Joins: Alfr (~Alfr@user/alfr)
[22:43:46] <etimmons> Ah, I missed the part about reimplementing shepherd
[22:44:08] <etimmons> I was still firmly in CL land :)
[22:45:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[22:46:12] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:46:40] <lisp123> Quick one, is there a version of loop that collects for a vector not a list?
[22:47:15] <etimmons> (and trying to convince myself I'm not one of those integrators that introduces incompatibilities to lock users in :P)
[22:47:27] <aeth> lisp123: no, but depending on what you're doing, you can use MAP or MAP-INTO instead
[22:47:36] <aeth> (i.e. if you can write the iteration as a lambda)
[22:47:50] <lisp123> aeth: thanks, i'll use MAP and maybe write a mapcar equiv for vector
[22:47:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:48:04] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:48:12] <lisp123> "MAPV"
[22:48:49] <aeth> that's basically what MAP is when the second argument isn't NIL or 'list afaik
[22:49:10] <aeth> it's just that there are a lot of different kinds of vectors
[22:49:27] <aeth> maybe MAPSV if you're going for a 'simple-vector
[22:51:12] <lisp123> good point re different kinds of vectors
[22:51:41] <lisp123> I guess that's why MAP requires the sequence type to be specified
[22:51:48] <lisp123> ehh maybe I just use lists again lol
[22:51:57] <rotateq> lol lisp123 :D
[22:51:58] <lisp123> too much work with vectors sometime
[22:52:00] <lisp123> rotateq: :D
[22:52:14] <rotateq> we had this discussion in the past, i remember :P
[22:52:34] <lisp123> did we? wouldn't be suprised, I keep going in circles O
[22:52:58] <rotateq> yes i mean vectors vs lists
[22:57:28] <mfiano> #1=(cons 'I (cons 'keep (cons 'going (cons 'in #1#))))
[22:57:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:01:46] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[23:05:23] <drakonis> etimmons: no worries
[23:05:35] <etimmons> Hmm. I just discovered that Sly ripped out slime-sprof. That's unfortunate.
[23:05:49] *** Quits: rain3 (~rain3___@86.127.204.59) (Ping timeout: 240 seconds)
[23:08:21] <drakonis> anyways, it's a lot of wants and not enough haves yet
[23:08:41] <drakonis> the first step is the most important one
[23:15:06] <drakonis> shepherd's rewrite will still be in cl though
[23:15:55] <drakonis> another want is multiplatform
[23:16:53] *** Joins: jeosol (~jeosol@user/jeosol)
[23:24:14] <drakonis> but then, i can't guarantee that, because linux is my main platform
[23:30:20] <etimmons> Yeah, multiplatform is hard
[23:31:05] <drakonis> all i can hope for, is someone stepping up to work on it
[23:31:20] <drakonis> since I don't have a mac and windows is probably a rough ride
[23:31:39] <drakonis> the bsd family otoh
[23:31:50] <drakonis> i don't know if they'd care enough
[23:32:35] <drakonis> i know there's two users here
[23:33:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:33:25] <drakonis> freebsd users, that is
[23:37:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:38:57] *** Joins: attila_lendvai (~alendvai@catv-176-63-14-165.catv.broadband.hu)
[23:42:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[23:45:11] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:49:58] *** Joins: aeth_ (~aeth@user/aeth)
[23:50:04] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f532:47f8:cb50:9aeb) (Remote host closed the connection)
[23:50:14] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:50:19] *** aeth_ is now known as aeth
[23:53:52] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
