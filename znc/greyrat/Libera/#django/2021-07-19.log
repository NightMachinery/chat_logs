[00:24:24] *** Joins: stabler (~stabler@87-50-3-146-cable.dk.customer.tdc.net)
[00:26:18] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:26:54] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:28:29] *** Quits: stabler (~stabler@87-50-3-146-cable.dk.customer.tdc.net) (Client Quit)
[00:29:33] *** Joins: NeuroWinter (~NeuroWint@107.172.219.233)
[00:52:36] *** Joins: audio (~audio@2603-8081-1800-00ad-f446-7ebf-416d-c2f1.res6.spectrum.com)
[01:09:22] *** Quits: strudl (~strudl@user/strudl) (Quit: got milk?)
[01:09:50] *** Joins: strudl (~strudl@user/strudl)
[01:21:30] *** Joins: knbk_ (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[01:25:19] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[01:37:15] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[01:39:27] *** Joins: fros (~user@158.140.192.124)
[01:46:12] *** Joins: serghei1 (~serghei@user/serghei)
[01:51:44] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 255 seconds)
[01:52:51] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Remote host closed the connection)
[02:07:02] *** Quits: knbk_ (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 255 seconds)
[02:18:04] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[02:19:15] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[02:19:30] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[02:29:15] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Remote host closed the connection)
[02:49:33] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 258 seconds)
[02:49:46] *** Joins: hEXE90 (~hEXE90@ip70-180-255-41.lv.lv.cox.net)
[02:52:00] <hEXE90> Hi there, is anyone familiar with "NotImplementedError: annotate() + distinct(fields) is not implemented."?
[02:53:30] <hEXE90> I'm trying to annotate one mode with a subquery from another to count distinct instances of this other model, and I ran into this error.
[02:56:26] <hEXE90> https://pastebin.com/XRYWpTdx
[03:04:01] *** Joins: PaulWay[w] (~PaulWay@ppp167-251-222.static.internode.on.net)
[03:16:26] <Steve-Dusty> I don't understand what get_object_or_404 does
[03:16:32] <Steve-Dusty> the docs doesn't explain it clearly
[03:17:02] <MaioroiaM> Steve-Dusty: is there a particular bit you're stuck on?
[03:17:20] <PaulWay[w]> Is it the '404' bit? or the 'get object' bit?
[03:17:22] <PaulWay[w]> :-)
[03:20:18] <Steve-Dusty> Nevermind, I read the example
[03:20:38] <Steve-Dusty> but what exactly does "Http404" print out?
[03:20:43] <Steve-Dusty> raise Http404(SOMETHING)
[03:20:49] <Steve-Dusty> does it render the HTML?
[03:21:34] <MaioroiaM> Steve-Dusty: neither - https://docs.djangoproject.com/en/3.2/topics/http/views/#django.http.Http404
[03:21:41] *** MaioroiaM is now known as doismellburning
[03:34:23] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 252 seconds)
[03:48:58] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[03:51:59] *** Quits: lxsameer (~lxsameer@109.255.73.218) (Ping timeout: 252 seconds)
[03:53:27] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[03:54:04] *** Quits: hEXE90 (~hEXE90@ip70-180-255-41.lv.lv.cox.net) (Quit: Client closed)
[03:56:37] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[03:58:08] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[04:02:37] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[04:05:06] *** Quits: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) (Quit: Leaving.)
[04:11:19] <Steve-Dusty> I kept getting a NoReverseMatch. https://dpaste.org/G0Ap
[04:21:46] <GinFuyou> Steve-Dusty, your context doesn't have `question_id`, only `question`
[04:24:03] <Steve-Dusty> urls.py takes from my context..?
[04:24:07] <Steve-Dusty> i thought it's only from HTML
[04:24:41] <GinFuyou> No, it's about your url tag
[04:25:02] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:25:08] <GinFuyou> {% url 'vote' question_id %}
[04:25:32] <GinFuyou> You don't have `question_id` in context (of what you've shown)
[04:44:28] <Steve-Dusty> I have it in the parameter though
[04:45:16] <FunkyBob> in which 'parameter'?
[04:45:20] <FunkyBob> you mean the URL parameter?
[04:45:30] <FunkyBob> that will only pass it t hrough to the view... not the template
[04:49:14] *** Joins: Steve-Dusty66 (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net)
[04:49:23] <Steve-Dusty66> Just logged onto my new computer
[04:49:31] <Steve-Dusty66> what did you just say?
[04:49:57] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:54:52] <FunkyBob> I asked where you had 'the parameter' you spoke of
[04:55:01] <FunkyBob> I'm guessing you mean in the url path?
[04:55:44] <FunkyBob> Steve-Dusty66: ^^
[04:55:50] <Steve-Dusty66> I meant the the vote function in views.py
[04:56:04] <FunkyBob> ok, so it's passed to your view
[04:56:12] <FunkyBob> but did you pass it from y our view into the context for your template?
[04:58:58] <FunkyBob> since you've already passed question in... I would suggest you rewrite it as {% url 'vote' question_id=question.id %}
[04:59:27] <FunkyBob> (though I've not yet seen your code)
[05:00:01] <Steve-Dusty66> okay
[05:03:27] <GinFuyou> Yeah, I recommend using exclusively kwargs for urls (key=value)
[05:04:34] <FunkyBob> yeah, two separate changes there... worth noting
[05:05:00] <FunkyBob> you could just write {% url 'vote' question.id %} and it might also work
[05:05:37] <FunkyBob> but it's less error prone if you explcitly say question_id=  ... because then it will (a) remind you what value should go there, and (b) cause a loud, breaking error if you got the name wrong
[05:06:25] <Steve-Dusty66> i'll try it later when i can. How do you host your website?
[05:06:33] <FunkyBob> on a VPS usually
[05:06:44] <Steve-Dusty66> I put serious projects on digitalocean through PM2
[05:06:46] <FunkyBob> i've written a couple of posts about it
[05:06:53] <FunkyBob> yeah, I like DO
[05:06:55] <Steve-Dusty66> can you send?
[05:07:08] <FunkyBob> https://blog.tinbrain.net/ two links at the top right
[05:07:10] <Steve-Dusty66> I've never used nginx or apache.
[05:07:23] <FunkyBob> though I should probably write a "common, basic, just nginx+gunicorn" one
[05:07:26] <Steve-Dusty66> Just a proc manager so it's up 24/7
[05:07:28] <FunkyBob> since they are t he most common tools
[05:07:30] *** audio is now known as audiocat
[05:07:43] <FunkyBob> yeah, wire them into systemd, let it deal with keeping them going
[05:08:27] <Steve-Dusty66> what's JWT?
[05:08:37] <PaulWay[w]> Javascript Web Token.
[05:08:46] <PaulWay[w]> It's a form of eye cancer.
[05:08:57] <Steve-Dusty66> the one in localstorage?
[05:09:06] <FunkyBob> sometimes
[05:09:12] <Steve-Dusty66> it can bypass 2FA. I logged into discord through token
[05:09:15] <Steve-Dusty66> it's insecure
[05:09:19] <FunkyBob> no
[05:09:23] <FunkyBob> it's being used insecurely
[05:09:25] <FunkyBob> that's different
[05:09:38] <FunkyBob> JWT is hazardous, but not inherently insecure
[05:09:50] <FunkyBob> meanwhile, I think you're reading  the wrong posts :)
[05:09:59] <Steve-Dusty66> just curious
[05:10:31] <Steve-Dusty66> i see it on the navbar now
[05:11:00] <Steve-Dusty66> btw you spelled "beginners" wrong https://blog.tinbrain.net/tutorials/simple-django-deploy.html
[05:11:36] <PaulWay[w]> Ouch :-)
[05:12:55] <FunkyBob> open a github issie! :P
[05:13:12] <Steve-Dusty66> when you wrote "simple" and "beginners" deploy is it production grade?
[05:13:21] <Steve-Dusty66> like as secure as your blog website rn?
[05:13:39] <FunkyBob> (fix pushed)
[05:13:57] <FunkyBob> basically, yes.
[05:14:12] <FunkyBob> I trie t o explain at least basic security practices, like "don't run services you don't need"
[05:14:17] <FunkyBob> and "use root as little as possible"
[05:15:49] <dodobrain> FunkyBob, lol i just went on an unnecessary adventure.. channels overrides `runserver` and i was thinking why the heck is my runserver launching daphne instead of the django webserver
[05:16:02] <FunkyBob> dodobrain: heh
[05:16:21] <Steve-Dusty66> Why does it say "github pages"?
[05:16:35] <Steve-Dusty66> on your blog github deployment on the rright corner
[05:16:50] <Steve-Dusty66> Did you redirect on the domain?
[05:17:47] <FunkyBob> sorry? where?
[05:18:10] <Steve-Dusty66> "https://github.com/funkybob/kitty-litter"
[05:18:20] <Steve-Dusty66> under environments
[05:18:27] <Steve-Dusty66> "github pages"
[05:18:36] <Steve-Dusty66> and then you can go view deploymeny
[05:18:50] <FunkyBob> I tried github pages for a bit, but it really didn't meet my needs
[05:19:08] <FunkyBob> (also, I don't see what you're pointing to... maybe because I'm ont logged into github on this machine?)
[05:19:49] *** Quits: PaulWay[w] (~PaulWay@ppp167-251-222.static.internode.on.net) (Ping timeout: 258 seconds)
[05:19:52] <FunkyBob> I don't see "environments" anywhere, for a start
[05:20:01] <Steve-Dusty66> because I didn't know why you needed github pages when you had a real domain. wait i'll send a pic
[05:20:30] <Steve-Dusty66> https://github.com/funkybob/kitty-litter/deployments/activity_log?environment=github-pages
[05:20:35] <FunkyBob> my blog site is actually hosted on netlify
[05:21:08] <Steve-Dusty66> oh not on your VPS?
[05:21:14] <FunkyBob> i did try to use GH pages, but just found it too painfully inflexible
[05:21:22] <Steve-Dusty66> ok
[05:21:30] <FunkyBob> no, that  site is not on my vps... it was an exercise in dogfooding my toy SSG
[05:21:39] <FunkyBob> I used to host it on my vps
[05:23:24] <dodobrain> FunkyBob, so i've got a question. is there a reason why the builtin webserver still exists instead of defaulting to daphne (or something similar) ?
[05:23:36] <Steve-Dusty66> out of curiosity, do you do full stack development for a living?
[05:24:22] <FunkyBob> Steve-Dusty66: yes, I do
[05:24:38] <FunkyBob> dodobrain: a fair question, especially now that external deps are OK in django
[05:25:43] <dodobrain> FunkyBob, yes i didnt understand it that there was a specific usage for development and then you had to configure or do something different for prod deployments
[05:25:55] <schinckel> dodobrain: That is a good question - I wonder if there are other reasons, maybe related to debugging, or reloading or something?
[05:26:24] <dodobrain> schinckel, i just found out painfully that we have been using daphne by default for years in development!
[05:26:29] <dodobrain> and we havent had issues
[05:26:39] <dodobrain> sure thats only 1 data point, but really i didnt even know!
[05:27:06] <dodobrain> well ,when i say years i mean atleast the 1 year i've been in this sho
[05:27:08] <dodobrain> shop
[05:28:08] <dodobrain> somewhat more relevant in the current times when theres things like sanic that say their provided webserver is by default production ready
[05:28:41] <dodobrain> i know the motivations are different and the featureset is also different, but it would be useful for django to have somewhat of a similar attitude
[05:30:17] <FunkyBob> you're welcome to start the discussion on the dev mailing list
[05:30:57] <dodobrain> right, i'll send out an email sometime in the evening / tonight
[05:32:14] <dodobrain> i dont know how recent this thing is, but anyone using channels as an installed app is using daphne when they use `runserver`
[05:32:18] <Steve-Dusty66> I started learning django a few months ago and I'm having trouble even with a polling app. Am I falling behind compared to others who learned at the same pace?
[05:32:28] <Steve-Dusty66> during the same time*
[05:32:54] <FunkyBob> it's different for everyone
[05:32:55] <dodobrain> Steve-Dusty66, depends on what your previous experience is with programming and web applications
[05:33:06] <dodobrain> so really not relevant for comparison
[05:33:15] <FunkyBob> have you tried the DjangoGirls Tutorial?
[05:33:24] <FunkyBob> a different approach can sometimes be all it taks
[05:33:38] <dodobrain> unless you've been at it for a year and then still have issues with the polling app and the django orm and other useful (and most used) django bits
[05:34:49] *** Joins: Quacc (~Quacc@91.219.212.93)
[05:35:13] <Quacc> steve.
[05:35:17] <FunkyBob> Steve-Dusty66: if you keep asking questions in here, people iwll keep helping
[05:35:28] <FunkyBob> often I find the problem is due  to underlying assumptions and misconceptions
[05:35:39] *** Quits: Quacc (~Quacc@91.219.212.93) (Client Quit)
[05:36:04] <FunkyBob> so when we ask why you think what  you did should work, it can help for you to explain... so we can ferret out t hose problems :)
[05:36:11] <Steve-Dusty66> I did Python for a year before Django
[05:36:27] <Steve-Dusty66> Quacc yo
[05:36:31] <FunkyBob> they left
[05:37:07] <Steve-Dusty66> he's a friend from discord
[05:38:02] <Steve-Dusty66> he's downloading terminal client
[05:40:42] <b-rex> everybody started somewhere. been doing python for 10+ years and still a noob :P
[05:42:05] <Steve-Dusty66> FunkyBob should I implement React for my future blog?
[05:42:11] <Steve-Dusty66> and portfolio
[05:42:29] <FunkyBob> why?
[05:42:49] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[05:43:30] *** Quits: clemente (~Daniel@balticom-142-72-136.balticom.lv) (Ping timeout: 265 seconds)
[05:43:54] <FunkyBob> i mean, why would you use react, a tool for dynamic content, on your blog - which is essentially static content
[05:43:59] <Steve-Dusty66> idk. would react make things easier for a project at this scale?
[05:44:21] <Steve-Dusty66> I want to use Rest Framework
[05:44:25] <FunkyBob> no
[05:44:33] <FunkyBob> why do you want to use REST Fraemwork?
[05:45:31] <Steve-Dusty66> uhhhh because I heard it's very essential. many people who used Django also learn DRF
[05:48:00] <b-rex> if you like python and want to make a blog, try something like pelican or hyde
[05:48:13] *** Joins: serghei1 (~serghei@user/serghei)
[05:48:37] <Steve-Dusty66> Well, I want to do it in Python
[05:48:45] <b-rex> hyde hasn't been touched in years tho
[05:48:48] <Steve-Dusty66> I'm contemplating on which one to use
[05:49:04] <Steve-Dusty66> django*
[05:49:31] <b-rex> i think hugo kinda killed a lot of the other ones
[05:50:24] <Steve-Dusty66> is pelican a framework..?
[05:50:52] <b-rex> they're static site generators geared toward making blogs
[05:51:24] <b-rex> you'll typically write your posts in markdown and run the generator, then upload the generated files to a web server
[05:52:12] *** Joins: Quacc (~youbuntoe@cpe-172-88-78-217.socal.res.rr.com)
[05:52:13] <Steve-Dusty66> well, me using django is kind of the whole point..
[05:52:17] <Steve-Dusty66> hi wacc
[05:52:26] <Steve-Dusty66> got the terminal client?
[05:52:32] *** Quits: Quacc (~youbuntoe@cpe-172-88-78-217.socal.res.rr.com) (Client Quit)
[05:52:41] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 268 seconds)
[05:52:56] <Steve-Dusty66> .
[05:54:24] *** Joins: Quacc (~youbuntoe@user/quacc)
[05:54:28] <Quacc> wahoo
[05:54:33] <Steve-Dusty66> can someone tell me how spahetti this code is? https://github.com/Steve-Dusty/django-todo
[05:54:43] <Steve-Dusty66> @Quacc why did u leave
[05:55:57] *** Joins: dre (~dre@2001:8003:c932:c301:e078:5df6:bd54:b22a)
[05:56:32] *** Quits: Quacc (~youbuntoe@user/quacc) (Client Quit)
[06:00:20] *** Quits: molyvius (~molyvius@user/molyvius) (Read error: Connection reset by peer)
[06:12:12] *** Joins: djapo (~archangel@user/djapo)
[06:16:19] <FunkyBob> Steve-Dusty66: mostly stylistic points from what I see
[06:16:44] <FunkyBob> PEP-8  recomments snake_case for function names, not camelCase
[06:16:53] <FunkyBob> null defaults to False in model fields
[06:16:56] <FunkyBob> things like that
[06:17:43] <Steve-Dusty66> what about the ugly connection between apps?
[06:20:10] <FunkyBob> such as?
[06:21:48] <Steve-Dusty66> urls.py
[06:22:02] <Steve-Dusty66> they're everywhere and not properly structured i guess
[06:23:14] *** Joins: blackleitus (~blackleit@189.195.193.124)
[06:27:35] <FunkyBob> well, it's difficult to _not_ have your urls in an hierarchy...
[06:27:49] <FunkyBob> you could use an include for that long string of URLs with a common prefix, but that's meh...
[06:34:41] <Steve-Dusty66> FunkyBob what's the difference between https://blog.tinbrain.net/tutorials/quick-django-install.html and https://blog.tinbrain.net/tutorials/simple-django-deploy.html?
[06:35:43] *** Joins: Quacc (~Quacc@user/quacc)
[06:36:12] <Steve-Dusty66> Quacc
[06:42:27] <FunkyBob> Steve-Dusty66: one is aimed at people who don't know, so it tries to explain more
[06:42:39] <FunkyBob> also, one uses nginx+uwsgi, the other uses h2o+gunicorn
[06:43:55] <Steve-Dusty66> I guess the 1st option is more suited for me
[06:44:45] <Quacc> why is there an account named django-ticketbot?
[06:45:08] <Steve-Dusty66> maybe some irc thing
[06:45:12] <Steve-Dusty66> like discord bots
[06:45:25] <Steve-Dusty66> yeah Godot had an IRC bot
[06:45:44] <Quacc> mhm
[06:45:47] <Quacc> irc is pretty cool
[06:45:48] <Steve-Dusty66> btw Quacc thinks Django is a waste of time
[06:46:05] <Steve-Dusty66> can someone professional explain why it's helpful to him?
[06:46:08] <FunkyBob> #2342
[06:46:08] <django-ticketbot> https://code.djangoproject.com/ticket/2342
[06:46:11] <FunkyBob> that's why
[06:46:24] <FunkyBob> a waste of time?
[06:46:59] <Steve-Dusty66> yeah he thinks he can just use something that's not bloated
[06:47:06] <Steve-Dusty66> is Django bloated?
[06:47:11] <FunkyBob> can he speak  for hisself?
[06:47:20] <FunkyBob> what would use use instead? in what way is it 'bloated'?
[06:47:25] <Steve-Dusty66> one second
[06:48:08] <Steve-Dusty66> Quacc they won't beat the shit out of you; they're all ver constructive people
[06:48:17] *** Quits: audiocat (~audio@2603-8081-1800-00ad-f446-7ebf-416d-c2f1.res6.spectrum.com) (Ping timeout: 255 seconds)
[06:49:10] <Quacc> i would just say its has some unneded things
[06:49:25] <Quacc> then again im not a one for frameworks so im quite biased on the matter
[06:49:38] <Quacc> you really shouldn't ask me
[06:50:26] <FunkyBob> imho the goals of a framework are twofold:
[06:50:34] <FunkyBob> 1) protect the dev from the tedious things
[06:50:40] <FunkyBob> 2) protect the dev from the dangerous things
[06:51:21] <FunkyBob> the ORM, Forms, class-based views, the request object... lots of Django exists to  take the redious, common, reptetitive stuff and make it trivial
[06:51:39] <Steve-Dusty66> do frameworks make things slower?
[06:51:45] <FunkyBob> also the ORM, Forms, and so much more... exist to take the error prone, the security sensitive, the best practices... and make them easy
[06:52:06] <FunkyBob> depends on how you use them, what their purpose is, and which "slower" your'e measuring
[06:52:06] <Steve-Dusty66>  what exactly is CSRF>
[06:52:14] <FunkyBob> they should make developer productivity faster
[06:52:17] *** Joins: audiocat (~audio@2603-8081-1800-00ad-633b-6ddb-64ec-e38d.res6.spectrum.com)
[06:52:22] <FunkyBob> Cross Site Request Forgery, as it explains in the docs
[06:52:26] <FunkyBob> afk for a bit
[06:52:43] <Quacc> of course something like a framework or language makes something slower when its built on a prexisting thing (a few exceptions) but theres a fine line between something having too much and something that is fine
[06:54:50] <Steve-Dusty66> that's precisely why we need to learn how to use our tools
[06:58:02] <Steve-Dusty66> I there's no reason for me to write a url shortener in Django if I know how to use flask. Although exceptions can be made, one circumstance would be that I want to LEARN how to, let's say, use a specific function.
[06:58:40] <Steve-Dusty66> I'd start small by writing a minimal shortener to pick up that feature
[07:00:41] <schinckel> One of the reasons I like frameworks (and Django in particular) is that most projects that are more than just really small things wind up using a bunch of the things that Django provides, and rather than cobbling together a bunch of disparate packages to get the same functionality, you can just use the provided modules.
[07:01:08] <schinckel> If I'm working on something small (that I know is not going to grow to that complexity), then I'll certainly consider other alternatives.
[07:01:42] <schinckel> (For instance, my solar panel monitoring tool is unlikely to require a bunch of that stuff, so I just used flask)
[07:02:40] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[07:03:51] <blackleitus> +Steve-Dusty66, it is a protected request to avoid UNK to request the same as you with modified values
[07:04:35] <Steve-Dusty66> would it also prevent websocket DOSing?
[07:04:45] <Steve-Dusty66> if someone tries to spam my input
[07:05:26] <schinckel> That's _not_ something that django provides out of the box - but you can look at rate-limiting tools to handle that.
[07:06:26] <blackleitus> if its a post request allowing a DOSing yeah
[07:07:10] <blackleitus> CSRF allows some sort of spam avoiding request 1 shouldnt be request 2 too
[07:08:31] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[07:12:14] <schinckel> CSRF doesn't really protect against duplicate requests.
[07:12:29] <schinckel> Otherwise you'd run into things like repeated AJAX requests from within a single page not working.
[07:13:17] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[07:14:10] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75)
[07:17:50] <Steve-Dusty66> How would you respond to other haters saying "well if you're using some terrible bloat like python the standard library already has a lot of stuff that django duplicates
[07:17:50] <Steve-Dusty66> cough hashing" (context: Django bloat)
[07:17:56] *** Quits: Steve-Dusty66 (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net) (Quit: Client closed)
[07:18:39] <FunkyBob> ... no it doesn't
[07:18:53] <FunkyBob> how does django duplicate what's in stdlib?
[07:22:26] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Read error: Connection reset by peer)
[07:31:00] * Quacc 
[07:33:29] <PaulWay[w]> LOL
[07:33:52] <PaulWay[w]> Haters don't listen to reason.
[07:47:14] *** Parts: Quacc (~Quacc@user/quacc) ()
[07:47:48] <schinckel> The only things that django does provide that are in stdlib are where the stdlib version is sub-optimal, or doesn't exist in some versions of python.
[07:48:18] <PaulWay[w]> It's a nonsensical accusation.
[07:48:25] <schinckel> (That I'm aware of, anyway. Happy to be shown situations where other things are duplicated, so we can remove them)
[07:48:30] <PaulWay[w]> It's like saying "why do you implement a programming language, if we already have assembly language?"
[07:48:42] <PaulWay[w]> Don't humour them.
[07:48:53] <schinckel> Why do you have a keyboard/display? We already have punch cards.
[07:48:58] <PaulWay[w]> Exactly.
[07:50:44] *** Quits: himcesjf (uid409730@id-409730.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[08:00:11] <FunkyBob> it could be simply they misunderstood what they saw
[08:01:32] <PaulWay[w]> Well, my problem with that kind of situation is: the accuser isn't trying to be rational or reasonable, but they expect the defender to be rational and reasonable - and to meet unreasonable and irrational standards.
[08:02:12] <FunkyBob> i must have missed some of this discussion
[08:02:34] <PaulWay[w]> I only caught Steve's comment "How would you respond to...".
[08:02:59] <PaulWay[w]> And the whole premise of the statement Steve quoted is wrong.
[08:03:07] <FunkyBob> ah
[08:14:44] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[08:35:10] *** Joins: Quacc (~Quacc@user/quacc)
[08:44:03] *** Joins: sandeepk (~sandeepk@223.130.30.175)
[09:08:25] <audiocat> can anyone help me debug? https://stackoverflow.com/questions/68435141/why-would-15-20-minute-website-scrapes-work-at-first-but-after-a-couple-scrapes
[09:11:45] <Steve-Dusty> https://dpaste.org/d4Hi why am I getting form does not have cleaned_data attribute?
[09:14:19] <Steve-Dusty> fixed* forgot to add ()
[09:18:34] <Quacc> steve very cool
[09:20:00] <Steve-Dusty> ...
[09:28:59] *** Quits: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net) (Quit: Client closed)
[09:30:00] *** Quits: ChanServ (ChanServ@services.libera.chat) (shutting down)
[09:30:34] <PaulWay[w]> I'm trying to copy data from a legacy system to a new one, and I'd like to set the id field of the data going into the Django model.
[09:30:44] <PaulWay[w]> Any problem with that?
[09:30:46] *** Joins: ChanServ (ChanServ@services.libera.chat)
[09:30:46] *** sodium.libera.chat sets mode: +o ChanServ
[09:39:33] *** Parts: Quacc (~Quacc@user/quacc) ()
[09:40:18] *** Joins: Quacc (~Quacc@user/quacc)
[09:44:08] <serafeim> hello friends
[09:44:22] <serafeim> PaulWay[w]: no problem just set it as a plain integerfield
[09:45:07] <PaulWay[w]> Hmmmm.  That's not really the Django way though.
[09:45:43] <serafeim> why not.
[09:45:57] <PaulWay[w]> Because normally Django manages the id field.
[09:46:04] <serafeim> django allows setting whatever field you want as a PK. you are not forced to use the default one
[09:46:07] <serafeim> no that ain't true
[09:46:58] <serafeim> the thing is that if you use any funny PKs you may have problems in external dependencies that take the integer PK as granted
[09:47:06] <serafeim> but that ain't django's problem
[09:50:37] <PaulWay[w]> OK, so you can set the pk of a model instance if you're creating it?
[09:51:41] *** Joins: av (uid87081@id-87081.tinside.irccloud.com)
[09:53:52] *** Quits: sandeepk (~sandeepk@223.130.30.175) (Ping timeout: 255 seconds)
[09:54:38] <serafeim> of course
[09:54:50] <serafeim> just pass it on create as normal
[09:54:58] <PaulWay[w]> OK, thanks.
[09:55:02] <serafeim> but it must not be an auto field
[10:10:01] <PaulWay[w]> See, that's the detail.
[10:11:19] <PaulWay[w]> Is that because of the restriction in Django, or in the database engine?
[10:13:06] *** Quits: Quacc (~Quacc@user/quacc) (Quit: leaving)
[10:18:05] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[10:25:06] *** Quits: dre (~dre@2001:8003:c932:c301:e078:5df6:bd54:b22a) (Quit: Leaving)
[10:26:37] <serafeim> well if it is an auto field your value will be ignored (i think) and get the next value from the sequence
[10:26:59] <serafeim> you must do something like id = models.BigIntegerField(primary_key=True)
[10:28:05] <PaulWay[w]> But in that case don't you have to then assign a value to it every time?
[10:45:06] *** Joins: dre (~dre@2001:8003:c932:c301:9820:d974:d4b6:d3c4)
[10:45:29] <serafeim> of course
[10:48:00] <serafeim> what's your opinion on the thread locals debate: https://stackoverflow.com/questions/3227180/why-is-using-thread-locals-in-django-bad
[10:53:59] <FunkyBob> didn't realise there was a debate
[10:54:11] <FunkyBob> have they become any less slow?
[11:03:50] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[11:04:11] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[11:04:19] <serafeim> ηα ηα ηα αη
[11:04:21] <serafeim> sorry
[11:04:42] <serafeim> there is a debate for like 10 years: should we use thread locals in django or not :)
[11:05:41] <serafeim> django does not like using thread locals
[11:06:07] <serafeim> however i have concluded that they are one of the most useful things i can use in django so i include em by default to all my projects
[11:06:32] <PaulWay[w]> Mmmmm-hmmmmm.
[11:10:06] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f24:fcd4:fb8f:355f:2c84) (Read error: Connection reset by peer)
[11:12:15] *** jjhoo_ is now known as jjhoo
[11:16:22] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[11:16:42] *** Joins: flynn (~mcbloch@user/flynn)
[11:17:58] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:26:26] *** Joins: lxsameer (~lxsameer@109.255.73.218)
[11:28:54] <serafeim> and i also believe that disallowing the use of thread locals by django core is very problematic for new users
[11:29:46] <serafeim> i mean a new user will not know if he's allowed to use thread lcoals or not. he'll probably blindly follow the recommendations of django. and this will lead him to a great PITA when he wants to hava access to the current user from a model (for example)
[11:31:19] <FunkyBob> django doesn't disallow it
[11:31:47] <FunkyBob> serafeim: what problem(s) do you find thread locals solving?
[11:32:40] <serafeim> FunkyBob: take a look at this snippet: https://dpaste.org/LyJ3
[11:33:17] <serafeim> *all* my classes inherit from this `UserDateAbstractModel`. and i have free create/modified on/by.
[11:33:19] <serafeim> for free.
[11:33:24] <serafeim> without writing *any* other code
[11:33:36] <serafeim> this is *not* possible without the thread locals
[11:33:41] <FunkyBob> well, not "free" as such
[11:33:46] <serafeim> free for me.
[11:34:15] <serafeim> i do not need to write any other code. this is what DRY and more generally what python is
[11:34:18] <PaulWay[w]> I assume something has to set the current user somewhere...
[11:34:18] <serafeim> also.
[11:34:52] <FunkyBob> PaulWay[w]: I'd assume middleware
[11:34:56] <PaulWay[w]> Does that give you anything that logging doesnt'?
[11:34:57] <serafeim> PaulWay[w]: yes there's a middleware that does this in the thread locals https://github.com/jedie/django-tools/blob/master/django_tools/middlewares/ThreadLocal.py
[11:35:44] <serafeim> PaulWay[w]: of course. i need to know the use that created and modified eacch object. i even use django-reversion but i prefer to have it directly to the model as a foreignkey
[11:35:52] <serafeim> also this is a small example
[11:35:57] <serafeim> now we can go to more advanced things
[11:36:00] <PaulWay[w]> "Need to know" seems to be very subjective.
[11:36:10] <PaulWay[w]> So how do you know the user that modified that user before that?
[11:36:47] <serafeim> have you ever tried using wagtail? let's suppose you want to display a field in the wagtail admin depending on the current user. good luck doing that without thread locals
[11:37:04] <PaulWay[w]> I haven't...
[11:37:25] <serafeim> having the current user (and request) available *everywhere* is like havign super powers
[11:37:35] <FunkyBob> sounds like a flaw in wagtail
[11:37:38] <serafeim> ha ha ha
[11:37:43] <serafeim> FunkyBob: no it's just way too complex
[11:38:00] <FunkyBob> right
[11:38:03] <FunkyBob> a flaw in wagtail
[11:38:08] <serafeim> well that's how it is
[11:39:57] <serafeim> let me give you another example. i've got an app that keeps the user permissions in the session (don't ask me why). how could i check these perms without using the thread locals ?
[11:40:14] <FunkyBob> by passing user to where it's needed
[11:40:31] <PaulWay[w]> Sorry but I have to ask - why are you keeping user permissions in the session?
[11:40:43] <serafeim> FunkyBob: but the user *does not* have any permissions! i told you i have thn in tthe session
[11:41:07] <FunkyBob> so pass the session in
[11:41:56] <serafeim> PaulWay[w]: it has to do with having a different app keeping the perms of all users
[11:42:12] <serafeim> so when the user logs in it asks the different app for the user perms and stores them in the session
[11:42:16] <PaulWay[w]> serafeim: I think we're going to get to the point with this where you're happy doing things with Thread Local storage, and we don't see the point.
[11:42:34] <serafeim> FunkyBob: it's not possible in all cases. for example i am using the django-rules-light package. that package has the foloowing api to check perms: `def can_update_folder(user, name, obj, **kwargs)`
[11:42:42] <serafeim> FunkyBob: do you see requiest/session there ?
[11:42:45] <PaulWay[w]> I'm willing to generalise here and say that every problem you solve with thread local storage will also be solved some other way.
[11:42:56] <serafeim> PaulWay[w]: of course it can be solved some other way.
[11:43:25] <serafeim> PaulWay[w]: but you would need to re-write the complete functionaliy of various packages to change their API
[11:43:46] <serafeim> i had done this before and it was like putting needles in my eyes
[11:44:05] <serafeim> because most packages are *not* written with overriding in mind
[11:44:33] <serafeim> so you end copying pasting a lot of code just to add a request parameter
[11:45:50] <serafeim> of course there's no such thign as a free luncch
[11:46:24] <serafeim> the problem with the threadlocals is that everything becomes much more difficult to test since you need to have a request
[11:46:54] <serafeim> you can't call a method of a model anymore because it will try to get the current request
[12:00:37] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:03:31] <jor> well, if you don't use django.auth permission API and use your own... yeah, lot's of django apps won't work... how could they :/
[12:05:00] <jor> still, somehow adding your permissions to the user object would be a far easier path I would think, instead of thread_local. would atleast allow you to use the normal permission API
[12:08:45] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[12:10:42] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75) (Ping timeout: 246 seconds)
[12:12:36] *** Joins: doev (~doev@p4ff445f4.dip0.t-ipconnect.de)
[12:15:02] <serafeim> jor: i know. but i have added my own auth backend that ovverrides get_user_permissions to work with the threadlocal
[12:18:35] *** Quits: audiocat (~audio@2603-8081-1800-00ad-633b-6ddb-64ec-e38d.res6.spectrum.com) (Ping timeout: 255 seconds)
[12:22:19] <jor> but you have authenticated the user and are putting permissions in the session... sounds to me you have a place where both come together at the same time
[12:23:02] <jor> create something not thread bound, like you said your self, easier to test and also far easier to reason about :/
[12:29:24] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[12:29:28] *** Quits: dre (~dre@2001:8003:c932:c301:9820:d974:d4b6:d3c4) (Quit: Leaving)
[12:37:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 255 seconds)
[12:41:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:43:49] <serafeim> session is easy enough to reason about :)
[12:44:09] <serafeim> and it saves me a couple of queries for every view
[12:47:02] <serafeim> also did you know that you could use a cookie-session backend that saves everything session related in the cookie ?
[12:47:29] <serafeim> good stuff: https://docs.djangoproject.com/en/3.2/topics/http/sessions/#cookie-session-backend
[12:48:01] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[12:48:45] <jor> yeah I know it, always scary a hell. ;p
[12:48:55] <serafeim> why scary ?
[12:49:06] <serafeim> elixir-phoenix uses this method my default
[12:50:14] <jor> depends on the users browser to keep it save... :/
[12:50:29] <jor> my database server is better protected :p
[12:51:10] <jor> but yeah, it's fine to use. just my personal itch
[12:52:18] <serafeim> no it does not depend on the user browser
[12:52:57] <serafeim> the cookie data is encrypted and signed. even if you were able to tamper it somehow it would be verified by the django
[12:53:04] <serafeim> it is perfectly secure
[12:53:06] <jor> serafeim: it does. I as a hacker can now use your session. manipulate the input, analyse the output. figure out the algorith and find weaknesses... scary ;p
[12:53:28] <serafeim> jor: it has *exactly* the same security as the traditional session
[12:53:53] <serafeim> if a hacker gets your session cookie he can use your session no matter if the session cookie is just the session id or the whole session data
[12:54:18] <jor> no, session is a random generated ID. it's weakness is the randomess of the generator
[12:54:57] <serafeim> this isn't related
[12:56:20] <serafeim> the weakness of the cookie-session backend is that if a malicious use somehow gets acces to your djagno SECRET_KEY he can manipulate the session however he wants
[12:56:31] <serafeim> for example give himself admin rights
[12:56:58] <serafeim> but you keep your SECRET_KEY secrent, don't you ?
[12:57:48] <jor> I try... like everybody else... but if mine is stolen, it is less of a problem
[12:58:24] <serafeim> yes maybe
[13:06:59] <jor> I'm just on the other side if the paranoia spectrum ;) Also don't trust the algorithms to endure, specially when a hacker has some control over the input into it
[13:27:45] <wallbroken> FunkyBob: queryset.union(Shoe.objects.filter(delivered_user__in = User.objects.all()).distinct())
[13:27:50] <wallbroken> is this the current syntax?
[13:29:09] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[13:34:16] *** Quits: duoi (~duoi@user/duoi) (Ping timeout: 265 seconds)
[13:35:04] <Kim^J> Why are you doing that?
[13:35:10] <Kim^J> What are you trying to achieve?
[13:35:21] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Ping timeout: 252 seconds)
[13:36:20] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[13:37:06] *** Joins: duoi (~duoi@user/duoi)
[13:39:42] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[13:39:44] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (Ping timeout: 252 seconds)
[13:41:29] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:48:55] *** Joins: gkr (~gkr@37.164.116.244)
[13:50:42] <Kim^J> And as usual, no answer.
[13:50:42] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Read error: Connection reset by peer)
[13:50:54] <Kim^J> Ugh, why do I even bother.
[13:53:38] <wallbroken> Kim^J: i need to appeno to queryset all the items with that specific user in delivered_user field
[13:53:46] <wallbroken> i'm sorry, i was AFK
[13:58:44] *** Joins: sephi (~sylvain@2a01:4f8:c0c:6a45::1)
[13:59:38] <Kim^J> delivered_user__in = User.objects.all() <-- That's pointless
[14:00:04] <wallbroken> why?
[14:00:23] <wallbroken> queryset = Shoe.objects.filter(ordered_user__in = User.objects.all()).distinct()
[14:00:29] <wallbroken> i use this in another point
[14:00:30] <Kim^J> Explain, what that does.
[14:00:34] <schinckel> Is ordered_user nullable?
[14:00:46] <sephi> Hello, I’m looking for a way to automatically delete a record in the database when its m2m with another model is emptied (which can happen for a variety of causes, eg. cascade deletions). I’ve tried using a `pre_delete` signal but this fails when there are multiple objects in the m2m. Any idea how to do that?
[14:00:58] <Kim^J> schinckel: AFAIK it's a m2m-relation
[14:01:55] <schinckel> sephi: Not sure, but there is a specific m2m_changed (or similar) signal.
[14:02:16] <sephi> schinckel: Yeah I tried that but it’s not sent when it’s a cascade deletion :/
[14:03:05] <wallbroken> Kim^J: well, idk for sure, but i guess that it gets all the objects for a specific user
[14:03:24] <Kim^J> wallbroken: Does User.objects.all() return a specific user?
[14:03:37] <wallbroken> Kim^J: i guess yes
[14:04:37] <Kim^J> wallbroken: I know english isn't your first language, but please, just *read*. User.*objects*.*all*()
[14:04:44] <Kim^J> *all*
[14:04:55] <Kim^J> Lookup that specific word in a dictionary. Please.
[14:05:34] *** Joins: clemente (~Daniel@balticom-142-72-136.balticom.lv)
[14:06:30] <gkr> wallbroken: User.objects.all() return all the users
[14:07:18] <wallbroken> all user of the app?
[14:07:23] <gkr> If you want the authenticated user and have access to the request, try ordered_user=request.user
[14:07:28] <wallbroken> or all the user bounded to aspecific user?
[14:07:41] <Kim^J> *ALL USERS*
[14:07:41] <gkr> All the user saved in your database
[14:11:48] <wallbroken> ok
[14:12:14] <wallbroken> so, i'm putting all the user in a variable ordered_user__in
[14:12:28] <gkr> That's what your code do
[14:12:43] <wallbroken> what's weird
[14:12:46] <wallbroken> do you know why?
[14:13:01] <wallbroken> i see less items that i expect to do
[14:13:06] <wallbroken> i should see all of them
[14:13:58] <gkr> You should see all the shoe that have been ordered at least once, unless I'm mistaken
[14:14:58] <wallbroken> gkr:
[14:14:58] <wallbroken> queryset.union(Shoe.objects.filter(terminated_user__in = User.objects.all()).distinct())
[14:15:06] <wallbroken> using union, it works?
[14:16:02] <gkr> I missed the part where you explain what you are trying to do
[14:16:09] <gkr> But that union won't do anything
[14:16:10] <Kim^J> What is queryset? What do you think it should do? What
[14:16:14] <Kim^J> s the goal?
[14:16:30] <gkr> Union will take multiple queryset and return all the results
[14:17:01] <gkr> Union on one queryset will return all the result from that queryset, same as using directly the queryset
[14:17:31] <doev> I try to write a fixture like here: https://docs.djangoproject.com/en/3.2/howto/initial-data/#providing-initial-data-with-migrations , but it fails. I guess the reason is, that the model has an own primary key - a CharField called code.
[14:17:59] <doev> https://docs.djangoproject.com/en/3.2/howto/initial-data/#providing-initial-data-with-migrations
[14:18:26] <schinckel> sephi: What did you try with the pre_delete signal (it's probably going to want to be a post_delete one, I think)
[14:18:34] <wallbroken> the goal is to show all the items with terminated_user field for at least 1 user
[14:18:53] *** Quits: kiska (~kiska@user/kiska) (Quit: Ping timeout (120 seconds))
[14:19:21] <gkr> doev: I would look at natural primary key, that might solve your problem. Also, try to first export a fixture
[14:19:24] *** Joins: kiska (~kiska@user/kiska)
[14:20:15] <gkr> Shoe.objects.filter(terminated_user__isnull=False).count()
[14:20:54] <sephi> schinckel: post_delete won’t do it because at this point the object has been deleted and its deletion has been cascaded in the m2m, so there’s no way to know which m2m have changed because of this deletion.
[14:21:09] <wallbroken> count?
[14:21:33] <Kim^J> wallbroken: All shoes that have been terminated by a specific user? Or all shoes that have been terminated by at least one user?
[14:21:50] <jor> doev: also what exactly 'fails'? as long as you pass in proper unique values for all the fields it should work :/
[14:21:55] <Kim^J> (I still don't understand why you aren't doing it the standard way with orders...)
[14:22:31] <wallbroken> Kim^J: i need both
[14:22:47] <wallbroken> for now, give me the second one
[14:22:48] <sephi> schinckel: I did something like this in pre_deletede which works for single object deletions: MyModel.objects.annotate(nb_slots=Count("time_slot_set")).filter(time_slot_set=instance, nb_slots=1). But this doesn’t work when more than 1 object is deleted at once.
[14:22:50] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[14:23:23] <gkr> wallbroken: Remove count for the list of object, I like to use count
[14:23:49] <sephi> schinckel: I also tried overriding `TimeSlot.delete` and `TimeSlot.objects.delete` (to get both single and multiple objects deletion) which worked, but these methods aren’t called on cascade deletions :/
[14:23:52] <gkr> * I like to use count when trying queryset for the first time.
[14:24:04] <doev> gkr, thanks - dumpdata with already existing data gives me a good example.
[14:25:01] <wallbroken> https://dpaste.org/UntW
[14:25:05] <wallbroken> those union aren't working
[14:25:55] <Kim^J> What do you think union does?
[14:27:32] <wallbroken> Kim^J: something like append?
[14:27:35] <jor> ugh unions... this is why I usually recommend people learn a bit of SQL first. Django ORM hides a lot of it, but not everything :p
[14:28:04] <serafeim> i'm using django for like 10 years and i think i have used union once.
[14:28:11] <serafeim> and that was a code smell
[14:28:44] <gkr> wallbroken: I think you want Q objects.
[14:29:53] <gkr> Or maybe simply return Shoe.objects.all()?
[14:30:02] <Kim^J> I think they need to take a step back and actually think about what they want to achieve.
[14:31:47] <wallbroken> gkr: no
[14:32:06] <wallbroken> i need only objects with 3 specific m2m field assigned
[14:32:17] <wallbroken> gkr: can you show me an example with Q ?
[14:32:43] <gkr> https://dpaste.org/f1oa
[14:33:07] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 250 seconds)
[14:33:21] <gkr> This give you objects with a value assigned to any of the 3 specific m2m field
[14:34:09] <gkr> It's missing an import, from django.db.models import Q
[14:36:10] <wallbroken> gkr: thanks
[14:37:33] <wallbroken> gkr: and what if i want to do it only for the current logged in user?
[14:37:59] <wallbroken> like this:
[14:38:00] <wallbroken> self.request.user.delivered_items.all()
[14:38:20] <schinckel> sephi: It may be worth looking into how the django delete collector mechanism works. There may be a way to supplement/override that.
[14:39:21] <schinckel> serafeim: Union can actually be really useful - instead of using an OR, for instance, where a database will not use an index (but can on the two parts of the UNION)
[14:39:37] <gkr> a = Q(ordered_user=self.request.user) and so on
[14:40:06] <serafeim> schinckel: hmmm interesting i haven't thought of that
[14:40:59] <jor> sephi: as soon as bulk delete is a requirement, django signals aren't an option. Can pretty much only rely on custom database triggers at that point
[14:42:49] <jor> unions are also useful is you have mixed results (e.g. from two different models/tables). Still, usually workaround django orm at that point, since you don't have a Model
[14:43:13] <hylje> valuesqueryset territory
[14:44:25] *** Joins: shangxiao (~davids@101.181.108.207)
[14:58:21] *** Quits: fros (~user@158.140.192.124) (Ping timeout: 246 seconds)
[15:05:44] <shangxiao> anyone used https://github.com/Opus10/django-pgtrigger before?
[15:12:13] *** Joins: thiras (~thiras@user/thiras)
[15:14:25] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[15:26:26] *** Joins: zibby15 (~androirc@user/zibby15)
[15:31:58] <jor> shangxiao: guess not ;)
[15:32:53] <jor> first time I see it... but it is only a year old, so that's probably why
[15:32:54] <shangxiao> Interesting they've gone the decorator route… I suppose a limitation of not being able to extend Meta
[15:33:16] <shangxiao> (I really wish that extending Meta for 3rd party libs was a thing!)
[15:34:00] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[15:34:13] <shangxiao> although… it's only not a thing in terms of migration state
[15:37:43] *** Quits: himcesjf (uid409730@id-409730.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:37:59] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:38:32] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[15:43:50] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[15:46:12] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 265 seconds)
[16:21:25] *** Quits: mattcen[mx] (~mattcen@2001:470:69fc:105::5d1) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: theorangeone (~theorange@2001:470:69fc:105::4eb8) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: allegary (~allegary@apache/committer/gjm) (Quit: Bridge terminating on SIGTERM)
[16:21:36] *** Quits: kenbolton (~kenbolton@2001:470:69fc:105::2d24) (Quit: Bridge terminating on SIGTERM)
[16:21:36] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Bridge terminating on SIGTERM)
[16:24:05] *** Joins: mattcen[mx] (~mattcen@2001:470:69fc:105::5d1)
[16:26:58] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[16:27:14] *** Quits: sephi (~sylvain@2a01:4f8:c0c:6a45::1) (Quit: WeeChat 2.3)
[16:27:16] *** Joins: theorangeone (~theorange@2001:470:69fc:105::4eb8)
[16:27:16] *** Joins: kenbolton (~kenbolton@2001:470:69fc:105::2d24)
[16:27:16] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[16:27:16] *** Joins: mambang[m] (~mambang@user/mambang)
[16:27:16] *** Joins: allegary (~allegary@apache/committer/gjm)
[16:27:29] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[16:29:44] *** Joins: andyewen (~andyewen@31.124.173.184)
[16:39:43] <schinckel> jor: Yeah, you can use qs.values(x, y, z).union(other_model.values(x, y, z))
[16:40:13] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:40:27] <schinckel> shangxiao: Yeah, not being able to indicate that migrations should be created is a bit annoying.
[16:41:06] <schinckel> That does look interesting, but mostly my triggers are more complex than that.
[16:58:04] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[17:05:36] *** Joins: dudek (~dudek@185.150.236.155)
[17:10:19] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[17:10:43] *** Joins: Rikem (~mike@user/rikem)
[17:15:07] *** Quits: zibby15 (~androirc@user/zibby15) (Quit: Leaving.)
[17:17:10] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:17:32] *** Joins: dez (uid92154@user/dez)
[17:21:02] *** Joins: serghei1 (~serghei@user/serghei)
[17:49:48] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Read error: Connection reset by peer)
[17:53:21] *** Quits: shangxiao (~davids@101.181.108.207) (Quit: WeeChat 3.2)
[17:56:42] *** Quits: blackleitus (~blackleit@189.195.193.124) (Ping timeout: 265 seconds)
[17:57:55] *** Joins: blackleitus (~blackleit@189.195.193.124)
[17:59:28] *** Quits: serghei1 (~serghei@user/serghei) (Quit: serghei1)
[18:01:18] *** Joins: n00bn00b (~N00b@79.184.96.125.ipv4.supernova.orange.pl)
[18:02:22] *** Quits: blackleitus (~blackleit@189.195.193.124) (Ping timeout: 255 seconds)
[18:03:48] *** Parts: Santurysim (~Santurysi@user/santurysim) (Konversation terminated!)
[18:08:47] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[18:13:33] *** Joins: fakegermano` (~user@2804:431:e7cc:6a75:4e17:b960:5be6:37ca)
[18:18:48] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Remote host closed the connection)
[18:19:21] *** Joins: szunami (~szunami@69.5.120.124)
[18:19:56] <szunami> hello all
[18:20:15] <hylje> hello szunami
[18:20:58] *** Joins: blackleitus (~blackleit@189.195.193.124)
[18:22:53] *** Parts: szunami (~szunami@69.5.120.124) ()
[18:28:54] *** Quits: Rikem (~mike@user/rikem) (Quit: WeeChat 2.8)
[18:47:58] *** Joins: Rikem (~mike@user/rikem)
[18:52:09] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[18:57:04] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[18:58:38] *** Quits: blackleitus (~blackleit@189.195.193.124) (Read error: Connection reset by peer)
[19:25:22] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[19:32:00] *** Joins: Quacc (~Quacc@user/quacc)
[19:35:00] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[19:49:28] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Read error: Connection reset by peer)
[19:49:55] *** Quits: gkr (~gkr@37.164.116.244) (Ping timeout: 255 seconds)
[19:50:38] *** Joins: gkr (~gkr@37.173.86.101)
[19:55:20] *** Joins: stormbytes (~textual@ool-18e4a56c.dyn.optonline.net)
[19:56:59] *** Quits: stormbytes (~textual@ool-18e4a56c.dyn.optonline.net) (Client Quit)
[20:01:49] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Ping timeout: 268 seconds)
[20:04:01] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[20:04:26] <BlueCannonBall> BCB MAGIC
[20:05:21] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[20:05:21] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[20:05:43] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Client Quit)
[20:06:43] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[20:07:25] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[20:07:51] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Client Quit)
[20:11:14] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 246 seconds)
[20:21:08] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:25:55] *** Quits: Quacc (~Quacc@user/quacc) (Quit: leaving)
[20:29:25] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:32:40] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 255 seconds)
[20:36:47] *** Quits: doev (~doev@p4ff445f4.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[20:43:51] *** Quits: dudek (~dudek@185.150.236.155) (Read error: Connection reset by peer)
[20:45:04] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 240 seconds)
[20:45:18] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[20:50:43] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:56:01] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[20:59:48] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:00:11] *** Joins: Quacc (~Quacc@user/quacc)
[21:02:11] *** Parts: Quacc (~Quacc@user/quacc) ()
[21:02:15] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:02:50] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:03:31] *** Quits: fakegermano` (~user@2804:431:e7cc:6a75:4e17:b960:5be6:37ca) (Remote host closed the connection)
[21:04:54] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[21:05:10] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:07:05] *** Joins: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net)
[21:08:15] <Steve-Dusty> https://dpaste.org/dA4K I got no error but why does my view keep not validating the form?
[21:10:23] *** Joins: jeffdn (~jeff@c-67-188-108-155.hsd1.ca.comcast.net)
[21:12:11] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[21:13:05] <Steve-Dusty> it kept going to the else block
[21:13:05] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[21:13:39] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:16:16] <GinFuyou> Steve-Dusty, #1. how your form looks like? #2. you don't set value in input #3. you are setting `id` in a loop to a constant string
[21:16:25] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[21:17:08] <Steve-Dusty> https://dpaste.org/3iFc form looks like this
[21:17:55] <GinFuyou> mm, it's not what you want for voting
[21:18:08] <Steve-Dusty> wdym?
[21:18:45] <crowbar> Steve-Dusty: where is the GET view that renders the page?
[21:18:55] <Steve-Dusty> I only filtered out the "vote" view
[21:18:58] <Steve-Dusty> ot
[21:19:00] <Steve-Dusty> it's in details
[21:19:18] <Steve-Dusty> do you need to see it?
[21:19:48] <crowbar> sure.
[21:20:17] <Steve-Dusty> https://dpaste.org/ziXU
[21:20:32] <Steve-Dusty> @GinFuyou it'd only edit the "votes" of the choice selected
[21:23:03] <crowbar> Steve-Dusty:  you aren't passing any forms in the view context and you aren't rendering html that would parse as a ChoiceForm.
[21:24:14] <crowbar> Steve-Dusty: in you `detail` view you pass a queryset of choices you then loop over and render in the template but they aren't forms.  on line #5 you have form = ChoiceForm() but that just gets thrown away because you don't put it in the context.
[21:24:15] <Steve-Dusty> I just want the voter to be able to change the num  of "votes" in Choice model
[21:24:21] <Steve-Dusty> not create a Choice
[21:24:58] <hylje> the form doesn't have to be in the context, you can render it completely manually, but you do have to have the fields in POST/GET to match the fields on the form
[21:25:17] <hylje> consider having a set of forms with unique prefixes... or even a formset if you're brave
[21:26:16] <Steve-Dusty> so should I create a new form for users to be able to edit votes?
[21:26:46] <Steve-Dusty> https://docs.djangoproject.com/en/3.2/intro/tutorial04/
[21:26:49] <Steve-Dusty> because the documentation didn
[21:29:01] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Remote host closed the connection)
[21:30:36] <crowbar> Steve-Dusty: are you trying to complete the tutorial?
[21:31:52] <Steve-Dusty> no
[21:31:59] <Steve-Dusty> I'm trying to make a polls app on my own
[21:32:10] <Steve-Dusty> but I don't want to copy it or I won't get credit
[21:32:30] <Steve-Dusty> But there's like no other way to do it....
[21:32:45] *** Joins: Quacc (~Quacc@user/quacc)
[21:33:27] <crowbar> Steve-Dusty: you aren't setting a value in your html input, so even though you submit the form there's nothing there.
[21:34:00] <Steve-Dusty> im setting the "name"
[21:34:25] <Steve-Dusty> and wdym "setting a value"
[21:34:32] <Steve-Dusty> like submitting it?
[21:35:06] <crowbar> review the tutorial "detail.html" template and compare the <input> element attributes to yours.
[21:40:21] <Steve-Dusty> okay
[21:40:23] <Steve-Dusty> I gave it a value
[21:41:37] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[21:44:00] <Steve-Dusty> hey BCB
[21:44:20] <Steve-Dusty> I gave it a value but it still goes to the else block
[21:45:20] <GinFuyou> Steve-Dusty, your form uses all 3 fields, it won't be valid until all of them are submitted
[21:45:41] <GinFuyou> You want completely different form for voting, one with only a choice field
[21:46:38] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:46:42] <BlueCannonBall> hi steve
[21:46:46] <Steve-Dusty> hi bcb
[21:46:53] <crowbar> Or you can pull the choice value directly from the POST like the polls.view.py file does in the tutorial
[21:46:53] <Quacc> hi steve
[21:46:57] <Steve-Dusty> hi wacc
[21:47:30] <Steve-Dusty> I think somebody told me not to handle POST directly...
[21:49:32] <GinFuyou> If you want to learn proper django that doesn't cause invalid values in DB that hit you weeks after you inserted them - yes, use the forms.
[21:49:52] <GinFuyou> I've been there I know ^_^'
[21:50:04] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 255 seconds)
[21:51:28] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:51:48] <crowbar> GinFuyou: the tutorial is uses get() with a DoesNotExist exception so won't be an issue.  Steve-Dusty did you get a class assignment to implement a polls app?
[21:53:23] <GinFuyou> It's probably not in issue in the example of tutorial. But point of tutorial that you will reproduce pattern in other cases. And this pattern is highly insecure in most cases
[21:53:28] <Steve-Dusty> No.... my school doesn't teach coding... I'm just learning Django
[21:53:35] <GinFuyou> So point is to never use it
[21:53:45] <GinFuyou> Even where it
[21:53:52] <GinFuyou> it's more or less OK *
[21:54:48] <Steve-Dusty> I'm just putting my projects for display
[21:54:56] <crowbar> Steve-Dusty: you should just follow the tutorial.
[21:55:43] <Steve-Dusty> I already finished it
[21:55:49] <Steve-Dusty> a few months ago
[21:56:19] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[21:57:25] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[22:01:17] <GinFuyou> Steve-Dusty, that's a draft of what you can do (2 variants) https://dpaste.org/bzj2
[22:02:18] <GinFuyou> oops. line 23 is stupid. But you can get the pattern
[22:03:12] <GinFuyou> should be self.question.choice_set.all()
[22:04:06] <Steve-Dusty> what....
[22:04:16] <Steve-Dusty> why need a Simple?
[22:04:30] <GinFuyou> It's less code
[22:04:36] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:05:07] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:05:19] <GinFuyou> If you get what happens in bigger one - that's how you can do advanced things with forms
[22:05:39] <Steve-Dusty> Yeah I don't understand the bigger one
[22:06:08] <Steve-Dusty> I'll use the simple
[22:06:38] <GinFuyou> Yeah, but it doesn't validate that choice is from given question
[22:06:50] <GinFuyou> You can just re-check it in the view
[22:07:09] <GinFuyou> Though, I feel like contradict now my previous statements
[22:07:26] <GinFuyou> Regarding following good patterns I mean
[22:09:51] <Steve-Dusty> Wait
[22:10:14] *** Joins: audiocat (~audio@2603-8081-1800-00ad-44ce-b4a0-a90f-8858.res6.spectrum.com)
[22:10:21] <Steve-Dusty> So what do I do in the views? validate it and put it  in Choice Model?
[22:10:26] <GinFuyou> https://dpaste.org/ybsS
[22:11:27] <Steve-Dusty> oh, you took Simple away
[22:11:41] <GinFuyou> ok, let me fix the view, it has unnecessary step
[22:12:19] <GinFuyou> You can try with simple first to see if it works. But do you understand why it's not safe?
[22:12:33] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[22:12:57] <Steve-Dusty> yes
[22:13:08] <Steve-Dusty> because it doesn't have good patterns?
[22:13:23] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:14:20] <GinFuyou> https://dpaste.org/hpNU
[22:14:58] <GinFuyou> Steve-Dusty, it has good patterns. But it has a bad one too. I'm asking if you do understand what exactly is bad about it?
[22:16:52] <Steve-Dusty> No, I do not
[22:18:36] <GinFuyou> Ok, let me explain
[22:19:39] <GinFuyou> SimpleVoteForm has choice field which is Model Select field. It allows selecting a single instance from a given queryset (by submitting it's PK (ID))
[22:20:00] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[22:20:31] <GinFuyou> form converts PK into corresponding instance on validation (that's what you was doing in the view)
[22:21:15] <GinFuyou> but in this form class, field's queryset is all choices. So you can vote for any choice regardless of question
[22:21:47] <GinFuyou> Even if you render choice inputs manually as now, user still can forge the request
[22:22:36] <Steve-Dusty> ok
[22:22:44] <GinFuyou> So VoteForm is what does the proper thing: it takes question as one of arguments, and limits choices queryset to choices of give question
[22:22:52] <GinFuyou> *given
[22:23:00] *** Quits: Quacc (~Quacc@user/quacc) (Quit: leaving)
[22:23:15] <Steve-Dusty> where can I load the question keyword argument?
[22:23:24] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:23:54] <GinFuyou> Where you init (make an instance of form), I've given examples in later pastes
[22:26:36] <Steve-Dusty> https://dpaste.org/dcUi i was given this KeyError
[22:29:20] <GinFuyou> you didn't provide question kwarg
[22:30:21] *** Quits: andyewen (~andyewen@31.124.173.184) (Quit: Leaving)
[22:32:22] <Steve-Dusty> ohhh
[22:32:31] *** kostkon_ is now known as kostkon
[22:32:43] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[22:34:20] *** Quits: gkr (~gkr@37.173.86.101) (Read error: Connection reset by peer)
[22:34:26] <Steve-Dusty> I'm getting this error GinFuyou https://dpaste.org/Naen
[22:34:34] *** Joins: gkr (~gkr@78.199.13.26)
[22:34:50] <Steve-Dusty> is it __init__
[22:35:25] <GinFuyou> yes, that's my mistake now, sorrt
[22:35:28] <GinFuyou> *sorry
[22:35:45] <Steve-Dusty> yes it worked
[22:36:08] <Steve-Dusty> thanks for the help
[22:37:24] <GinFuyou> We basically did same thing that was in tutorial, but moved validation code and encapsulated it in the form class
[22:38:09] <GinFuyou> using form for validating data (even not coming from <form> submission) is a good pattern
[22:38:42] <GinFuyou> and overriding __init__ of the form is trick to make forms more "dynamic"
[22:39:09] <GinFuyou> So it should be a good lesson to remember
[22:43:29] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[22:46:09] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[22:50:47] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[22:51:31] *** Joins: Quacc (~Quacc@user/quacc)
[22:58:49] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[23:01:48] *** Joins: gpwasinuse (~gordon@96.71.93.13)
[23:05:53] <gpwasinuse> anyone ever encounter UUID primary keys being saved with uuid returned from a callable like `uuid.uuid4()` occasionally producing invalid uuids?  The problem records seems to save just fine but later their urls raise ValidationErrors when the url is fetched
[23:07:11] <GinFuyou> does it say that value is not a valid uuid4?
[23:08:07] <gpwasinuse> Yes - similar to this ticket: https://code.djangoproject.com/ticket/30114  but I am not using mod_wsgi
[23:08:27] <gpwasinuse> It seems to happen after a few thousand records are created and then goes away
[23:10:26] <gpwasinuse> I guess mine really isn't like that though - because I get invalid strings such as "c0-f1ce62cd76cfc2f741f-0fb8dcc053daf"
[23:10:57] <gpwasinuse> Just starting to track down the problem - didn't know if anyone has ever seen anything similar
[23:17:47] *** Quits: audiocat (~audio@2603-8081-1800-00ad-44ce-b4a0-a90f-8858.res6.spectrum.com) (Ping timeout: 246 seconds)
[23:20:22] *** Joins: audiocat (~audio@2603-8081-1800-00ad-2acc-6c61-53bd-5d99.res6.spectrum.com)
[23:20:57] <crowbar> gpwasinuse: what is raising the ValidationError?
[23:30:05] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:30:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:30:52] <gpwasinuse> to_python on the field - I guess I need to track down if the url is being generated incorrectly or the db record actually has an invalid uuid being created
[23:30:56] <gpwasinuse> thanks
[23:31:49] <GinFuyou> you can put full_clean() on whatever code that creates new records so it fails on bad value
[23:34:02] <gpwasinuse> Yea I suppose I will investigate there - Would bulk_create() with ignore_conflicts=True allow me to save an invalid UUID to models.UUIDField on Postgres?  But that would also mean that uuid.uuid4() is intermittently returning an invalid uuid somehow
[23:35:00] <crowbar> gpwasinuse: is there an invalid value stored in the db?
[23:38:04] <GinFuyou> gpwasinuse, any data you don't validate can be saved, it's down to DB if it rejects it.
[23:38:18] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:38:53] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:38:58] <GinFuyou> not sure how UUID field on postgres behaves
[23:39:10] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[23:40:46] <gpwasinuse> Ok - thanks guys - going to have to work out a test to track this one down as it isn't really clear what is happening yet.  Appreciate the thoughts
[23:47:20] *** Joins: papa-dinkle (~papa-dink@107.170.228.124)
[23:53:51] <jeffdn> I'm looking for the place in the codebase where the change that allowed queryset filters to be boolean expressions was made -- any pointers?
[23:54:29] <jeffdn> I ran into a bunch of issues with the compiler emitting non-performant code for Exists annotations in Django 2.2, saw that there was this new method available in Django 3.x, and wanted to investigate how it was done
[23:56:41] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:59:49] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Remote host closed the connection)
