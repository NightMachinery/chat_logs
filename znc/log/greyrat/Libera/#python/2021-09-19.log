[00:00:07] <white_magic> deniska: on second thought, you might be onto something: https://www.sqlite.org/fasterthanfs.html. Even my 'json-files-on-local-FS db' could become faster with minimal amount of code boilerplate. The only thing I would be missing is versioning. Is there any db that let's you view data changes across history?
[00:00:17] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:00:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[00:00:56] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:00:57] *** Joins: mindraj (~mindraj@user/mindraj)
[00:01:04] <bxsx> nedbat: Py3.5 with pip 21.0 installas requests 2.26.0 (which is not supported) but it works well
[00:01:12] <energizer> white_magic: dolt
[00:01:15] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[00:01:32] <nedbat> bxsx: what project is this?
[00:01:40] <white_magic> energizer: that is super cool, thanks
[00:01:42] <deniska> white_magic: well, sql server and maybe oracle do have support for temporal tables which basically gives you 'SELECT … AS OF yesterday' syntax
[00:01:42] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:01:44] <nedbat> bxsx: it seems to have an unrealistic support strategy
[00:02:02] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[00:02:22] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:02:24] <deniska> white_magic: for other stuff you'll have to invent columns like valid_from and valid_to on your own
[00:02:41] *** Quits: mindraj (~mindraj@user/mindraj) (Client Quit)
[00:02:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[00:02:50] <energizer> white_magic: there's also the `periods` extension for postgres
[00:02:58] *** Joins: mindraj (~mindraj@user/mindraj)
[00:03:41] <bxsx> nedbat: Py3.4 with pip 19.1.1 installs requests 2.26.0 (which is not supported) and raises errors thanks to: https://github.com/psf/requests/blob/main/requests/__init__.py#L98-L104
[00:03:46] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[00:04:11] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[00:04:38] <nedbat> bxsx: i can see that this is very painful. there is a reason people drop support for old versions.
[00:04:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:05:04] *** Quits: mindraj (~mindraj@user/mindraj) (Client Quit)
[00:05:10] <bxsx> nedbat: it has nothing with any pain, nedbat.
[00:05:16] *** Joins: mindraj (~mindraj@user/mindraj)
[00:05:27] <white_magic> energizer: that dolt db could really change the game for a lot of people. I wonder how popular it is.. The idea of being able to version a DB so easily (because every developer knows how to use git but many aren't that comfortable with DBs) is very appealing
[00:05:29] <nedbat> bxsx: i don't know what you mean
[00:05:34] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:05:43] *** Joins: wyclif (~wyclif@user/wyclif)
[00:05:46] <bxsx> nedbat: i simply don't get (yet) why it installs version that it shouldn't
[00:05:49] *** Joins: dre (~dre@2001:8003:c932:c301:ecf5:7fa2:569b:3a9)
[00:06:30] <nedbat> bxsx: it might be broken. maybe pip 19 didn't do that correctly yet.
[00:06:33] <bxsx> i can try to upgrade pip for Python 3.4, but for Python 3.5 it's already updated (v21.0) and it installas 2.26
[00:06:49] <nedbat> bxsx: what project is this?
[00:07:06] <deniska> white_magic: not sure about you, I'm more comfortable typing sql queries rather than git commands :D
[00:08:01] <white_magic> deniska: I mean for versioning.. If you can snapshot DBs with commit messages.. create branches. That is VERY appealing. Entirely separate from querying data from the DB.
[00:08:42] <energizer> white_magic: a couple years ago mozilla almost made an embedded sql database in rust for firefox with versioning but they gave up in the middle when they ran out of time. that would've been cool
[00:08:55] <energizer> 'mentat', it was called
[00:09:19] *** Quits: umimaso (~umimaso@188.166.147.131) (Ping timeout: 252 seconds)
[00:09:21] <white_magic> Hmm but if it's in Rust, I'm surprised that the enthusiastic Rust community didn't finish that project on their own
[00:10:01] <deniska> I guess it's not a rewrite of an existing project
[00:10:05] * deniska ducks
[00:10:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:11:14] *** Joins: wyclif (~wyclif@user/wyclif)
[00:12:59] <mattf> I am trying to write a simple application with flask that is behind a nginx proxy with a path with an uri like this: http://ix.io/3zhh. Problem is when I try to use flask's redirect or flask-login or url_to method itself is always returning me to weird urls with a "," on it like: mysite.com,mysite.com/thepath
[00:13:37] <energizer> white_magic: oh there's also cruxdb in clojure. not sure what kind of api it has.
[00:14:08] <mattf> where is that "," coming from? If i use redirect and a full url it works but not if i pass a method name like "login" etc, it always adds this , to it
[00:14:17] <rannnn8888> https://bpa.st/U4GQ my code run good on my windows server i upload to ubuntu aws server and install chrome but when i try get element i get erorr what can be the problem ?
[00:14:43] <rannnn8888> the site use java and i install only the chrome i need setup java ? or its come toghter when i install the browser
[00:15:06] <zln> Is it possible to apply one decorator to multiple functions without using @decorator on top of each one
[00:15:36] *** Quits: bxsx (~x@238.red-81-35-190.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[00:16:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:16:42] *** Joins: wyclif (~wyclif@user/wyclif)
[00:16:55] <mattf> ok it was proxy_params fault
[00:17:39] <energizer> zln: how will it know which functions to apply the decorator to?
[00:18:27] <zln> energizer: I wondered if it was possible syntatically
[00:18:42] <zln> I cannot know without asking
[00:18:52] *** Parts: ErkiS (~opera@85.253.103.121.cable.starman.ee) ()
[00:19:25] <zln> if I could answer your question, I could develop my own version of python :)
[00:19:45] <energizer> zln: applying a decorator is just equivalent to writing f = mydecorator(f) after the definition of the function. so yes you can do it, but it will make the code hard to understand so i wouldn't recommend it
[00:20:12] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[00:20:18] <zln> alright, then I will decorate each one to be more clear
[00:20:25] <energizer> good choice
[00:20:35] <zln> thanks for advise
[00:21:22] *** Quits: pro_z (~pro_z@37.214.34.140) (Ping timeout: 252 seconds)
[00:21:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:22:14] *** Joins: wyclif (~wyclif@user/wyclif)
[00:26:54] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[00:27:19] *** Joins: nomic (~nomic@185.217.117.73)
[00:29:26] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:30:24] *** Quits: junktext (~junktext@109.201.152.165) (Ping timeout: 268 seconds)
[00:30:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[00:31:52] *** Joins: wyclif (~wyclif@user/wyclif)
[00:31:55] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:32:22] *** Joins: junktext (~junktext@109.201.152.167)
[00:36:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:37:29] *** Quits: junktext (~junktext@109.201.152.167) (Ping timeout: 265 seconds)
[00:38:04] *** Joins: fikran (~fikran@user/fikran)
[00:39:54] *** Joins: computeiro (~Wender@189.37.68.112)
[00:41:12] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[00:41:46] *** Quits: wender (~Wender@189.37.68.112) (Ping timeout: 252 seconds)
[00:42:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:42:52] *** Joins: wyclif (~wyclif@user/wyclif)
[00:42:52] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[00:44:10] *** Joins: wender (~Wender@189.37.68.112)
[00:45:25] *** Joins: c10l (~c10l@user/c10l)
[00:46:00] *** Quits: runelind (~runelind@user/runelind) (Read error: Connection reset by peer)
[00:46:33] *** Joins: jazzy (~jaziz@2600:380:8478:544b:f0dd:f48c:6ca4:b0be)
[00:47:03] *** Quits: computeiro (~Wender@189.37.68.112) (Ping timeout: 268 seconds)
[00:47:08] *** Joins: somlis2 (~somlis@user/somlis)
[00:47:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:48:23] *** Joins: wyclif (~wyclif@user/wyclif)
[00:48:34] *** Joins: shimbles (~shimbles@209.201.38.106)
[00:48:35] *** Joins: bxsx (~x@238.red-81-35-190.dynamicip.rima-tde.net)
[00:48:47] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:48ce:c71b:81f:f816)
[00:48:50] *** Joins: runelind (~runelind@user/runelind)
[00:49:15] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 260 seconds)
[00:49:42] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 260 seconds)
[00:50:44] *** Joins: nomic (~nomic@185.217.117.73)
[00:50:45] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[00:50:51] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[00:53:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[00:53:49] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[00:53:54] *** Joins: wyclif (~wyclif@user/wyclif)
[00:54:20] *** Joins: arinov (~arinov@77.67.147.245)
[00:54:47] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[00:54:49] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[00:59:10] *** Quits: bxsx (~x@238.red-81-35-190.dynamicip.rima-tde.net) (Ping timeout: 260 seconds)
[00:59:58] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[01:01:40] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[01:03:22] <aphysically> well I'm officially dumping too much into logging
[01:03:36] <aphysically> time to try memoryhandler I guess
[01:03:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[01:04:00] <aphysically> I kinda wish memoryhandler had a timeout to flush too?
[01:04:55] *** Joins: wyclif (~wyclif@user/wyclif)
[01:07:02] <white_magic> Guys, I keep doing checks of this nature in Python: "if var1 is not None and len(var1) > 0:".... is there anything more concise I could use?
[01:07:24] <KirkMcDonald> white_magic: if var1:
[01:07:44] <white_magic> lemme try that
[01:07:54] <grym> truthyness is a double-edged sword, but when it cuts your way, it's quite nice
[01:08:01] <KirkMcDonald> white_magic: None is logically false, and empty collections are logically false.
[01:08:04] <apollo13> just be aware that those two statements do not check the same thing, but it usually works
[01:08:12] <KirkMcDonald> white_magic: But nonempty collections are logically true.
[01:08:51] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[01:09:01] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[01:09:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:10:28] *** Joins: wyclif (~wyclif@user/wyclif)
[01:10:47] <white_magic> KirkMcDonald: that works.. that will make life a lot easier for me. Less clear code, but less typing
[01:11:53] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Client Quit)
[01:11:57] <xb0o2> white_magic: it's such a common idiom that you could argue it's more clear :)
[01:12:16] <white_magic> xb0o2: some of us are fools who have been typing too much for years.
[01:12:22] <white_magic> It wasn't common for me :(
[01:12:54] *** Quits: shimbles (~shimbles@209.201.38.106) (Quit: Client closed)
[01:13:21] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[01:13:30] <xb0o2> By common I mean you'll encounter it in the wild a lot. At least now you can save your poor fingers.
[01:13:53] <white_magic> yea well at least Python is one of the most concise languages out there..and I use vim key bindings.. so it wasn't that bad
[01:14:25] <white_magic> xb0o2: how about this one.. is it possible to open a file and serialize it to json in one line?
[01:14:29] <grym> white_magic: yep
[01:14:49] <grym> white_magic: pathlib.Path('outfile.json').write_text(json.dumps(myobject))
[01:14:50] <white_magic> and have the receiving variable declared in the same line?
[01:15:19] <grym> or contents = json.loads(pathlib.Path('infile.json').read_text())
[01:15:22] <grym> the other way
[01:15:29] <white_magic> wow
[01:15:37] <grym> pathlib is rad
[01:15:38] <white_magic> this is neat.. that's going into my permanent box of tricks
[01:15:52] <white_magic> Yea I use path lib only to get the dir name of a file.. haven't been using it enough
[01:16:17] <grym> the very nice part of that is that .write_text and .read_text have context managers on the inside, so you're not leaving a dangling file handle or anything either
[01:16:52] *** Joins: bxsx (~x@238.red-81-35-190.dynamicip.rima-tde.net)
[01:17:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:18:10] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[01:18:24] *** Joins: nomic (~nomic@185.217.117.73)
[01:21:03] <aphysically> hmmm, I think this needs a threading queue somewhere I guess
[01:21:17] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[01:21:37] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[01:22:34] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:22:46] <grym> d-d-d-d-danger zone, goose
[01:23:24] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 265 seconds)
[01:23:54] *** Joins: wyclif (~wyclif@user/wyclif)
[01:24:07] *** Quits: arinov (~arinov@77.67.147.245) (Ping timeout: 252 seconds)
[01:24:37] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:c1e4:fb70:ed23:60db)
[01:25:13] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[01:25:22] <aphysically> when logging in debug mode I fall behind on output processing, but it's fine without logging output
[01:25:35] <aphysically> so I should be able to fix it by separating one of them
[01:25:43] <aphysically> (the output processing or the logging)
[01:25:46] <grym> how are you logging?
[01:25:51] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[01:25:51] *** Quits: paul424 (~tom@ip-31-0-121-199.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:25:58] <aphysically> logger.debug to a richhandler
[01:26:08] <grym> hmm.  it's ostensibly threadsafe
[01:26:10] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[01:26:18] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[01:26:31] <aphysically> I'm processing records with a regex once per video frame, which needs to run regex and such, and then if I'm also outputting that it falls behind realtime (but it's fine when my loglevel isn't outputting it)
[01:27:20] <aphysically> so I'm guessing if I either put the regex processing of lines into a queue that's eaten by a separate thread, or somehow thread queue the logging, things would be fine again
[01:27:31] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (Quit: ZNC - http://znc.in)
[01:28:00] *** Joins: Pickchea (~private@user/pickchea)
[01:28:06] <aphysically> actually because of the GIL this might need to actually be a separate process? depends what part of the logging is being slow and if it releases the GIL I guess?
[01:28:31] <aphysically> I'm assuming it's the outputting to the terminal itself, but really I have no idea
[01:28:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[01:29:26] *** Joins: wyclif (~wyclif@user/wyclif)
[01:29:42] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[01:31:09] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[01:31:11] <aphysically> grym: https://github.com/GBeauregard/pyffstream/blob/103ccf8a53591fc0ea9af14e50aadd84917b1079/src/pyffstream/encode.py#L685
[01:31:26] *** Quits: somlis2 (~somlis@user/somlis) (Quit: WeeChat 3.2.1)
[01:31:40] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:31:57] <aphysically> this runs once per frame, but it's processing video as fast as it can so to keep up it actually needs to be quite a bit faster than 1/fps
[01:32:18] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[01:32:34] *** Joins: naitsabes (~naitsabes@user/naitsabes)
[01:33:17] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:33:59] <grym> aphysically: this is the sort of fiddly stuff i'm ususally bad at
[01:34:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:34:50] <aphysically> since it's fast enough (at least on my computer) without threading it's probably fine realistically to leave this as is, but fixing this when debug is being output is interesting enough I'll probably persist figuring it out for fun
[01:34:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:34:56] *** Joins: wyclif (~wyclif@user/wyclif)
[01:35:01] <aphysically> fast enough without *logging I mean, not threading
[01:35:04] *** Quits: naitsabes (~naitsabes@user/naitsabes) (Client Quit)
[01:35:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[01:36:13] <aphysically> I do think it's probably the logging side that needs buffered or enqueued though
[01:37:40] *** Lord_of_Life_ is now known as Lord_of_Life
[01:38:16] <grym> logging.getLogger("asyncio")  welcome to PAIN
[01:38:19] <grym> (probably)
[01:38:41] <aphysically> I haven't tried to learn any asyncio yet, although I've already implemented a good bit of threading in this project
[01:38:57] *** Quits: mindraj (~mindraj@user/mindraj) (Quit: Goodbye, have a great day/evening!)
[01:39:06] <aphysically> (as in threading module threading, and concurrent futures usage of it)
[01:39:09] <grym> i try to avoid threading as much as i can
[01:39:13] *** Joins: somlis (~somlis@user/somlis)
[01:39:19] <grym> i always get it slightly wrong
[01:39:31] <grym> (at best)
[01:39:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:40:05] <aphysically> I'm still not sure compelling situations where I would want to learn asyncio to use instead of threading/where its syntax would benefit me
[01:40:18] <grym> webstuff, often
[01:40:26] *** Joins: wyclif (~wyclif@user/wyclif)
[01:41:11] <aphysically> when I was looking it was always examples where it seemed mostly pointless anyway and I started working on something else
[01:41:26] <aphysically> sometime I'll try to look up compelling usages of it I guess
[01:42:40] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[01:43:49] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:44:11] *** Joins: iflema (~ian@user/iflema)
[01:45:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:45:56] *** Joins: wyclif (~wyclif@user/wyclif)
[01:46:37] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:46:37] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[01:46:37] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 252 seconds)
[01:50:17] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:50:43] <az>  hi, could someone please look at my script here, I've created ti with help from this channel. However now with decoration I'm passing functions inside the decorator function to make connection to the Grpc provider https://gitlab.com/uak/bchd-grpc-python-lib/-/blob/main/bchd_grpc_lib.py like x = HitGrpc() then x.call_channel(x.get_data)()
[01:50:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:51:05] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4433) (Quit: Konversation terminated!)
[01:51:22] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:51:25] <az> I need a way to simplify call and general advice
[01:51:27] *** Joins: wyclif (~wyclif@user/wyclif)
[01:54:00] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 260 seconds)
[01:55:50] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:56:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:56:58] *** Joins: wyclif (~wyclif@user/wyclif)
[01:57:33] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Remote host closed the connection)
[01:58:56] *** Joins: semeion (~semeion@user/semeion)
[01:59:36] <aphysically> grym: ahah I fixed it without threading
[01:59:39] <aphysically> one sec I'll show you what I did
[02:00:24] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:00:58] *** Quits: Strom (strom@fedora/strom) ()
[02:02:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[02:02:29] *** Joins: wyclif (~wyclif@user/wyclif)
[02:03:07] *** Joins: Strom (strom@fedora/strom)
[02:03:29] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[02:05:14] <anddam> I was reading this big praise to CL for it's "real" REPL, where the interpreter never unrolls the stack on an exception but it throws you to the debug where you can do live stuff
[02:05:19] *** Joins: nomic (~nomic@185.217.117.73)
[02:05:31] <anddam> this get me wondering if this could not be done with python, and if ipd isn't that already in some way
[02:05:41] <aphysically> grym: if I process as bytes I buffer 5 lines into a bytesarray then process at once:
[02:05:43] *** Quits: Strom (strom@fedora/strom) (Client Quit)
[02:05:43] <aphysically> https://github.com/GBeauregard/pyffstream/commit/510b4f554a3f7cb85404eaf6c7a5c05990da017e
[02:05:56] <aphysically> and output in groups of 5 too
[02:07:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:07:47] *** Joins: Strom (strom@fedora/strom)
[02:07:58] *** Joins: wyclif (~wyclif@user/wyclif)
[02:08:28] <aphysically> maybe not as elegant as queueing the log output somehow, but this is probably vastly preferable to complicating the code more with queues and it solves the underlying problem (outputting too many lines to debug)
[02:08:57] *** Quits: bxsx (~x@238.red-81-35-190.dynamicip.rima-tde.net) (Quit: leaving)
[02:11:19] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[02:11:26] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[02:11:44] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:12:42] *** Quits: white_magic (~white_mag@2600:1700:6ae2:a20:f517:19d5:c05b:fe02) (Quit: Client closed)
[02:13:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:13:30] *** Joins: wyclif (~wyclif@user/wyclif)
[02:14:34] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:15:01] *** Joins: computeiro (~Wender@189.37.68.112)
[02:16:52] *** Quits: wender (~Wender@189.37.68.112) (Ping timeout: 252 seconds)
[02:17:28] <justsomeguy> anddam: Pharo Smalltalk also does this. They call it "resumable exceptions". I'd be interested in seeing an implementation in Python, and don't see why it can't be done.
[02:17:48] <justsomeguy> (I think the common lisp people call it a break-loop.)
[02:17:53] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:18:39] *** Joins: wender (~Wender@189.37.68.112)
[02:21:16] *** Quits: computeiro (~Wender@189.37.68.112) (Ping timeout: 252 seconds)
[02:21:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:23:44] <energizer> anddam: pdb's postmortem can do that
[02:23:44] *** Joins: tx (~tx@user/tx)
[02:27:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:28:36] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:29:02] <Yhg1s> justsomeguy: because raising exceptions causes code to be executed, which you would have to undo.
[02:29:35] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[02:30:33] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:31:03] *** Joins: Samian (~Sami@user/samian)
[02:31:09] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[02:32:46] <energizer> oh i guess i'm wrong, that's not what postmortem is
[02:33:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:33:32] <energizer> https://docs.python.org/3/library/pdb.html#pdb.post_mortem
[02:33:56] <energizer> Yhg1s: if you have a traceback you can go back into it, no?
[02:35:21] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[02:35:22] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[02:35:33] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[02:35:34] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[02:35:48] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[02:35:53] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[02:37:16] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:37:50] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[02:39:01] <pluri> if I raise an exception in called function, how do I make the upwards function react to it? I tried to return the Exception object, but the parent function isn't reacting
[02:39:07] *** Joins: Rikusho (~Guest82@2601:2c1:c200:1d00:e76a:4170:2e7d:6a79)
[02:39:17] <Rikusho> am in python finally
[02:39:24] *** Joins: Gerula (~Gerula@user/gerula)
[02:39:39] *** Quits: Strom (strom@fedora/strom) ()
[02:39:53] <energizer> pluri: try/except
[02:39:55] <energizer> Rikusho: yes
[02:40:13] <pluri> energizer I put the calling instruction within a try/except, but it's not getting triggered
[02:41:07] <Rikusho> anyone here familiar with warden terminal?
[02:41:07] <energizer> pluri: try: function_that_raises_an_exception(); except Exception as e: print('caught', e)
[02:41:10] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:41:25] <pluri> that's what i did
[02:41:50] <nedbat> pluri: can you link us to the code you're running?
[02:42:14] <pluri> oh, nvm. I was raising the exception within another try/except in the child function, then returning the exception object
[02:42:25] <nedbat> pluri: right, don't return the exception.  let it raise.
[02:42:33] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:42:35] <pluri> so what do i do in the except clause?
[02:42:40] <pluri> in the child function
[02:42:46] <pluri> do I put any instructions in it?
[02:42:51] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:43:02] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:43:12] <pluri> or just remove the try/except structure altogether from the child function
[02:43:18] <nedbat> pluri: you don't the except in the child
[02:43:38] <nedbat> pluri: right, that last thing :)
[02:43:44] <energizer> pluri: if you show the code you can get better feedback
[02:43:45] <aphysically> I should figure out a sane way to make a --version command
[02:43:47] <Rikusho> https://github.com/pxsocs/warden_terminal/blob/master/README.md
[02:43:47] <pluri> alright, thanks!
[02:43:59] <aphysically> importlib metadata I guess
[02:45:26] <energizer> aphysically: or just set a __version__ in a file
[02:45:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[02:45:41] <energizer> either is fine
[02:46:05] <aphysically> well, I set the version in the PEP 621 metadata, so I'd rather just read it from there....or I could read it from there to set __version__ I guess
[02:46:18] *** Parts: tx (~tx@user/tx) (Textual IRC Client: www.textualapp.com)
[02:46:36] <aphysically> flit (which I'm using) actually supports dynamically setting the pyproject.yaml metadata from the __version__, but I guess I'd prefer to do it the other way around
[02:47:25] *** Joins: fikran (~fikran@user/fikran)
[02:48:01] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:48:14] <aphysically> maybe I should be setting __version__ anyway as a courtesy for any users of my API?
[02:48:34] <Rikusho> im trying to configure when in small screen mode
[02:48:41] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:48:46] <Rikusho> to only have program display the BTC price
[02:48:50] <energizer> aphysically: some people make that argument
[02:49:02] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:49:05] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2.1)
[02:49:31] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[02:49:40] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[02:50:00] *** Quits: DerpGusta (~quassel@user/derpgusta) (Ping timeout: 260 seconds)
[02:50:43] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:51:21] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:52:55] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:53:18] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:53:24] *** Quits: Akuli (~Akuli@82-203-165-143.bb.dnainternet.fi) (Quit: Leaving)
[02:54:35] *** Joins: DerpGusta (~quassel@user/derpgusta)
[02:55:13] <aphysically> it does feel a bit weird to depend on importlib so I see why flit allows to do it the other way around
[02:55:31] *** Joins: Strom (strom@fedora/strom)
[02:55:34] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:56:12] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:56:21] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:56:50] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:59:17] *** Joins: blackout69 (~blackout6@mob-2-43-181-34.net.vodafone.it)
[03:00:02] *** Joins: rindolf (~shlomif@87.68.240.100.adsl.012.net.il)
[03:01:22] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[03:02:43] *** Joins: wyclif (~wyclif@user/wyclif)
[03:04:10] *** Joins: driib9 (~driib@185.195.233.164)
[03:05:07] <zln> I'm looking in a way to both use self.__dict__.update((k,v) for k, v in kwargs.items() if k in allowed_set) and also make sure that the object is initialized with all kwargs that is needed. It seems to me that the __dict__update() only sets the kwargs that is given as long as they are in the allowed_set. How do I check for required kwargs at the same time?
[03:06:28] <zln> is running an 'assert allowed_keys == set(kwargs.items())' sufficent before update?
[03:06:31] *** Quits: Gurkenglas (~Gurkengla@dslb-002-207-014-195.002.207.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:07:02] *** Quits: driib (~driib@185.195.233.170) (Ping timeout: 268 seconds)
[03:07:02] *** driib9 is now known as driib
[03:07:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:08:11] *** Joins: wyclif (~wyclif@user/wyclif)
[03:09:37] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[03:10:47] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:11:24] <KirkMcDonald> zln: You'd check whether the set of required keys is a subset of the set of provided keys.
[03:11:55] <zln> KirkMcDonald: subset or equal?
[03:12:05] <zln> or does it mean same thing?
[03:12:35] *** Quits: Narrat (~omnius@p200300df5f0ee19006ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[03:12:57] *** Joins: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur)
[03:13:15] <KirkMcDonald> zln: Subset. If there are optional keys, then they might not be equal.
[03:13:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:13:40] *** Joins: wyclif (~wyclif@user/wyclif)
[03:14:04] <KirkMcDonald> zln: Note that I'm referring to a non-strict subset, which means they can still be equal.
[03:14:12] <zln> KirkMcDonald: ah no, no optional, but I get what you mean. Thanks. Than 'assert' would suffice for this
[03:14:55] <zln> assert set(kwargs.items()) == myset
[03:14:57] <zln> ?
[03:15:25] <KirkMcDonald> If `myset` is just a set of the keys, then you'd want: set(kwargs) == myset
[03:16:02] <zln> ah, thanks. Thought I would test agains the keys buy set discards the values when converting ?
[03:16:13] <zln> *but*
[03:16:20] <KirkMcDonald> Iterating over a dict just gives its keys.
[03:16:29] *** Quits: Rikusho (~Guest82@2601:2c1:c200:1d00:e76a:4170:2e7d:6a79) (Ping timeout: 256 seconds)
[03:16:34] <zln> ah! thanks for that lesson :D
[03:16:36] <KirkMcDonald> kwargs.items() will give the (key, value) pairs, which isn't what you want here.
[03:16:56] <zln> that's right. Sorry, little late for my brain :)
[03:17:20] <leitz> Running tests often works better if you run from the right directory...
[03:17:58] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:18:20] <zln> leitz: I just want to make sure that all required kwargs is given and nothing more and at the same time update object attributes on the fly
[03:18:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:18:48] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[03:19:11] *** Joins: wyclif (~wyclif@user/wyclif)
[03:19:35] <leitz> zln, sorry. My comment was directoed at me. I'm getting back into things and kept trying to figure out why my tests were failing...
[03:20:00] <zln> ah :)
[03:20:34] *** Joins: Lando-SpaceIzzle (~Lando@user/lando-spacepimp)
[03:22:21] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:22:23] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:23:22] *** Joins: darksun (~darksun@user/darksun)
[03:23:25] *** Quits: Lando-HoloNet (~Lando@user/lando-spacepimp) (Ping timeout: 252 seconds)
[03:23:28] *** Quits: flokuehn (~flokuehn@muedsl-82-207-236-117.citykom.de) (Ping timeout: 268 seconds)
[03:24:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:24:14] <foo> I'm working on a media organizer and I pull a hash like this: https://bpa.st/IOOQ - one friend said: "i'm working on improving that pillow image hash function by having it return base64 data instead of hex data, which will give more bits of information in the same number of ascii characters." -> does this make sense to someone here? I'm not too familiar enough with hex data versus base62
[03:24:42] *** Joins: wyclif (~wyclif@user/wyclif)
[03:25:28] <Repiphany> Base 64 stores 4 times as much data as base 16 for a given number of ascii characters
[03:26:14] <foo> Repiphany: if I'm following, after reading a wikipedia page, Base64 - the number 64 - is indicative of how many different characters can be used in the hash, correct? eg. base 16 can use 16 chars, 64 can use 64 different chars in the hash?
[03:27:17] <Repiphany> Yes
[03:27:35] <Repiphany> But if space is really an issue, you'd just work directly with binary data
[03:27:44] <foo> Repiphany: does his comment about hashing image data in base62 relative to hex digest make sense?
[03:28:44] <kline> im not really sure why someone would consider base64 better than hex in this context
[03:29:30] <kline> since you cant really do anything with a hash other than check equality, and i dont think that an extra base64 encoding step makes that meaningfully better
[03:29:31] *** Joins: georgios (~georgios@user/georgios)
[03:29:48] <kline> esp with hex is the de facto alphabet for handling hash digests
[03:30:00] <kline> s/with/when
[03:31:04] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[03:31:41] *** Joins: srhm (~srhm@user/srhm)
[03:31:56] <foo> kline: thanks for chiming in, from what he said: it sounds like base64 will give me more bits of info in the same number of ascii characters relative to hex. eg. more info in the same number of bytes, which can equate to fewer collisions.
[03:32:11] <foo> Does that sound about right? I'm partly fact checking what he said, partly learning here.
[03:32:37] <kline> no, the hash data and collision chance will be the same regardless of the encoding method
[03:33:05] <foo> ah, after reading up on hex, it looks like hex is base16.
[03:33:11] <Repiphany> You're encoding the same binary data losslessly
[03:33:31] <kline> a number between 0 and 15 has the same chance of colliding if you pick two numbers at random as it would if you pick between 0 and f (in hex rather than decimal)
[03:33:36] <Repiphany> But you're limited to using a subset of ascii characters so the more characters you use, the more efficient your encoding
[03:34:50] <kline> foo, a longer hexadecimal string has the same chance of colliding as a shorter string with a larger set (say, base64) of characters
[03:34:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:35:06] <foo> Ok, if I'm following - I can see his reasoning: with hex/base16 versus base62, base62 has more characters to choose from in the hashing which would seem like it would provide fewer collisions. It sounds like, on the surface, this seems true - but in actuality, it's not. Correct?
[03:35:22] <Repiphany> The encoding is irrelevant for collisions
[03:35:30] <Repiphany> All that matters there is the hash length (in bits)
[03:35:37] <kline> foo, the hash space is the same for both, which means the same chance of a collision
[03:35:43] <kline> all you are doing is writing it in a different way
[03:35:43] *** Joins: wyclif (~wyclif@user/wyclif)
[03:36:00] <kline> its the same as the difference between writing the numbers with digits vs. words
[03:36:19] *** Quits: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it) (Ping timeout: 265 seconds)
[03:36:27] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[03:36:31] <kline> a random pick of 1-1000 with two guesses is the same, wether you write "616" or "six hundred and sixteen", right?
[03:36:47] <kline> one is just a shorter way to write the same data
[03:37:02] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 268 seconds)
[03:37:13] <foo> kline: whereas the shorter method here is hex, if I'm following. I think I see your point
[03:37:27] <kline> base64 would be shorter, but regardless, its the same data
[03:37:41] <kline> more characters -> shorter length
[03:37:58] <InPhase> The above point about different collision probabilities stands if the applied constraint is the length of representation.
[03:38:30] <kline> same as writing the number after fourteen is two digits in decimal (15) but 1 digit in hex (f)
[03:39:14] <foo> kline: ah, but if I was following his original point: "i'm working on improving that pillow image hash function by having it return base64 data instead of hex data, which will give more bits of information in the same number of ascii characters." ... "yeah, using this pillow hash mechanism through base62 is going to work perfectly." ... "More information in the same number of bytes. Fewer collisions."
[03:39:25] *** Quits: int3l (~int3l@78-83-124-208.spectrumnet.bg) (Quit: Shhhhh... Don't cry!)
[03:39:36] <kline> >more information in the same number of bytes
[03:39:38] <foo> kline: It sounds like he believes hex/base16 and base62/64 will both be in the same number of bytes
[03:39:45] *** Joins: Polyinsecure (~Polyinsec@180.244.128.179)
[03:39:56] <kline> yes, but he's going to use less bytes to write a hash digest in base64 than in hex
[03:40:01] <kline> so all his "savings" are lost
[03:40:10] <foo> To InPhase's point, perhaps hex/base16 is actually longer and base62/64 is fewer bytes? If I'm following
[03:40:21] <kline> a hash digest from a given algorithm only gives a fixed amount of information
[03:40:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:40:38] <Repiphany> If you're limited to only displaying part of the hash, you can display more by using b64 over b16
[03:40:49] <InPhase> What Repiphany said.
[03:41:06] <InPhase> Whether or not that is the case here requires additional context.
[03:41:13] *** Joins: wyclif (~wyclif@user/wyclif)
[03:42:43] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[03:44:06] <foo> Thanks InPhase / kline / Repiphany for chiming in as I attempt to wrap my head around hashing. So, in summary, hex is the same as base16. base64 means 64 chars can be used in the hashing, base16 means 16 chars can be used in the hash (which is hex). I can hash image data in either hex/base16 or base64, but note that base16 will use more bytes than base64 because base16 has fewer chars to work with and thus
[03:44:12] <foo> requires a longer hash. base64 has more chars it can work with, so it can result in a shorter hash. Do I have my understanding correctly here?
[03:44:29] *** Joins: nomic (~nomic@185.217.117.73)
[03:45:31] <Repiphany> The actual data of the hash will be the same once you decode it from base16 or base64 respectively
[03:45:57] <Repiphany> The shortest way to store it would be as binary data/bytes
[03:45:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:46:43] *** Joins: wyclif (~wyclif@user/wyclif)
[03:46:50] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[03:47:04] <rslopes> Repiphany: +1
[03:47:15] <foo> Repiphany: I guess I can TIAS here, too. I'm storing in sqlite as Text
[03:48:09] *** Joins: dude-x_ (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[03:48:10] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[03:48:13] <deniska> foo: if you actually care about the disk space, store the actual bytes of hash, not its hex or b64 representation
[03:48:40] <foo> deniska: I'm writing a media organizer to store thousands and thousands of photos.
[03:48:45] <kline> foo, information is information. fifteen is 15 is 0xf, no matter how it is written. the likelyhood of collision doesnt depend on the way you are representing it, just the algorithm you are computing it with
[03:48:49] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:49:34] <deniska> foo: "thousands and thousands" is typically not a lot of data
[03:49:47] <kline> anyone talking woo about base64 = more data per byte = less collisions is confused about this - sha512 will collide equally often if you store its output in decimal, hex, base64, or written english words
[03:49:59] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:51:19] <foo> deniska: I don't actually know, that's partly why I want to organize my media. Possibly hundreds of thousands, about 2TB of data. It's not a ton, to be fair.
[03:51:21] <rslopes> kline, thanks for the clarification
[03:51:26] *** Joins: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it)
[03:51:26] <kline> i probably sound like a broken record but thats because i still cant get my head around what your coworker is proposing and how it makes sense
[03:51:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:51:41] <kline> so ill just keep at some basic truths and hope you make the connection before i do :^)
[03:51:51] <foo> kline: thank you for sharing, I'm learning a bit here, and I shared most of this conversation with him. :)
[03:52:06] <kline> foo, if you can invite them here it might be easier to understand their thinking
[03:52:09] <foo> deniska: I wonder if I can store bytes in sqlite. *checks
[03:52:13] *** Joins: wyclif (~wyclif@user/wyclif)
[03:52:59] <kline> foo, i think sqlite has a blob option which just means "store binary objects with no more processing" but blob often comes with caveats about what you can do with it
[03:53:29] <foo> He said: i disagree. let's do an ad absurdum. imagine we have 1 character instead of 62. the first 6 chars of the hash can only be aaaaaa. with binary, we get 6 bits of data, which is 64 combinations. each bit we add to that is an order of magnitude more data. i think maybe they didn't understand the problem. you asked "does his comment about hashing image data in base62 relative to hex digest make sense?"
[03:53:35] <foo> which is not the right way to frame the question. the question is "if you have only 6 characters, does a character set of 62 hold more data than a character set of 16" and the questions is undoubtedly "yes."
[03:54:01] <Repiphany> Your colleague isn't doing hashing right
[03:54:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[03:54:15] <foo> He also said: another way to frame it is "if i convert a base-16 number to base-62, will it have fewer characters or more?"
[03:54:21] <kline> foo, he does understand that sha512 produces a fixed amount of data at all times, yeah?
[03:54:36] <kline> foo | He also said: another way to frame it is "if i convert a base-16 number to base-62, will it have fewer characters or more?"
[03:54:41] <foo> I believe so, but, checking.
[03:54:45] <kline> point out that itll still contain the same amount of data
[03:54:46] <Repiphany> If you convert binary data to b64, you're using more space to store that ascii string
[03:54:49] <kline> regardless of length
[03:55:04] <kline> or information, i suppose
[03:55:08] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 268 seconds)
[03:55:36] <Repiphany> A 160-bit hash is 20 bytes if you store directly, 28 bytes if you store as b64 and 40 bytes if you store the hex string
[03:56:08] <KirkMcDonald> You could frame it as "bits of entropy."
[03:56:34] <kline> foo, specifically, a sha512 hash (which youre using) will always have 512 bits of information
[03:56:48] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:56:54] <kline> if you write that in base64, youll still have a 2^512 chance of collision
[03:56:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:57:10] <Repiphany> https://en.wikipedia.org/wiki/Binary-to-text_encoding#Encoding_standards All encodings have <100% efficiency
[03:57:11] <kline> if you write it in binary itll be 512 characters long, but still a 2^512 chance of collision
[03:57:43] <kline> how you encode the information has no impact on how likely you are to collide
[03:57:45] *** Joins: wyclif (~wyclif@user/wyclif)
[03:58:17] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[03:58:32] <foo> Repiphany: thanks: "16:24 < Repiphany> If you convert binary data to b64, you're using more space to store that ascii string" -> I believe this is what deniska pointed out earlier
[03:58:47] <foo> (thanks for sharing a different way)
[03:59:02] <kline> storing 512 bits in a base64 system will give you a shorter string than in binary or decimal or hex, but you're just making tradeoffs in "length vs bredth"
[03:59:42] <kline> the area of this bit of wood is always the same, youre just making it longer but narrower in binary, and shorter but fatter in base64, with hex and decimal somewhere inbetween
[04:01:03] *** Quits: rslopes (~user@2804:431:c7dd:afcb:4d26:9795:b527:92ed) (Read error: Connection reset by peer)
[04:02:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:02:32] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Lost terminal)
[04:03:10] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[04:03:16] *** Joins: wyclif (~wyclif@user/wyclif)
[04:03:29] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:03:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[04:03:43] *** Joins: xakan6 (~xakan@ns354170.ip-91-121-101.eu)
[04:05:32] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:05:57] *** Quits: xakan (~xakan@ns354170.ip-91-121-101.eu) (Quit: Ping timeout (120 seconds))
[04:05:57] *** xakan6 is now known as xakan
[04:05:57] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 252 seconds)
[04:05:57] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (Ping timeout: 252 seconds)
[04:06:12] *** Gustavo6046_ is now known as Gustavo6046
[04:07:05] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[04:08:13] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 265 seconds)
[04:10:16] <foo> kline / Repiphany / KirkMcDonald / deniska / InPhase - thank you. After talking with him a bit further, he's storing 6 chars in the filename to differentiate images - in some cases images taken within the same second. He's partly talking about collisions in the filename, which given what we've been discussing - within the context of filename collisions, I think his point makes sense. Appreciate you all
[04:10:22] <foo> helping me understand some of the nuance here.
[04:11:01] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:48] <foo> And if you still disagree, let me know, but given what I understand (albiet a bit slowly) I think we're in sync.
[04:13:12] *** Joins: jeho2 (~jehoshaph@user/jehoshaphat)
[04:13:39] * foo googles Hashing Algorithms to learn more about this
[04:14:04] *** Joins: Oddity (Oddity@user/oddity)
[04:14:07] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[04:14:12] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 245 seconds)
[04:16:00] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:16:30] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 268 seconds)
[04:17:29] *** Joins: heco (~redrum@user/redrum88)
[04:18:08] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:25:56] *** Joins: jamwil (~jamwil@user/jamwil)
[04:26:14] *** Quits: jamwil (~jamwil@user/jamwil) (Client Quit)
[04:28:22] *** Quits: Sky_Net (~Sky_Net@176.14.213.149) (Ping timeout: 252 seconds)
[04:29:06] *** Joins: jamwil (~jamwil@user/jamwil)
[04:29:28] *** Quits: sniperwolf (~sniperwol@91.230.98.1) (Quit: Client closed)
[04:30:02] *** Quits: waxfire (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[04:30:13] *** Joins: waxfire (~waxfire@65.119.2.240)
[04:30:51] *** Quits: wender (~Wender@189.37.68.112) (Remote host closed the connection)
[04:30:59] <aphysically> just using a queuehandler as my logger seems to work fine too
[04:34:50] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[04:35:51] <foo> If anyone would give this media organizer their "blessing", I'd love an extra set of eyes: https://gist.github.com/zefoo/239ebb4fae0cd64402e32c3e4dc21573#file-gistfile1-txt-L591 -> my intent is to create something that copies media into folders based such as YYYY/MM/DD - the link goes to cli.py where I run a command to organize photos and copy them. I store various hashes for file, image data, and a hash of
[04:35:56] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[04:35:57] <foo> unique exif keys. I'm trying to make this as bullet proof as I can. I will eventually expand this to backup media/link with google photos. I have my code calculate the before/after filesize delta when it copies files to a new dir, so I can make sure if there are any discrepancies it's deliberate. I think I covered all case scenarios but I'd feel more confident in this if someone else could review. :)
[04:36:10] <aphysically> huh, I didn't' realize it was as simple as putting my logger on a queuehandler and starting a listener and then logging a ton to console is no longer holding up my calculations
[04:37:52] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Client Quit)
[04:37:54] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:42:24] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:43:20] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[04:44:52] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 268 seconds)
[04:45:10] <aphysically> wasn't sure what to typehint the queue for the streamhandler (guessing it stores logging.LogRecord?) I'll have to inspect it or something
[04:46:43] *** Joins: korg815 (~korg815@user/korg815)
[04:47:20] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:14de:bbb5:b3c1:e78b)
[04:47:29] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:50:07] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[04:51:06] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[04:54:46] *** Parts: blackout69 (~blackout6@mob-2-43-181-34.net.vodafone.it) ()
[04:55:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[04:56:47] *** Joins: fikran (~fikran@user/fikran)
[04:58:47] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[05:00:20] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[05:00:21] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[05:01:02] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[05:04:07] *** Joins: nomic (~nomic@185.217.117.73)
[05:04:33] *** Joins: nomic2 (~nomic@185.217.117.73)
[05:06:03] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 268 seconds)
[05:08:24] *** Joins: vicfred (~vicfred@user/vicfred)
[05:08:48] <foo> pip install pybase62; if I have an image im which is <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=10800x2350 at 0x10FBBEE80> and I try to encode it base62 to TIAS, this seems to hang: base62.encodebytes(im.tobytes()) - I wonder if encoding to base62 is significantly slower than hex, too.
[05:10:10] <nedbat> foo: why are you trying to encode an entire image as base62? A very large image, too.
[05:10:22] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:12:22] <foo> nedbat: been talking about hashes in here previously, was curious to TIAS. I'm using this in my media organizer code, to store the image data hash. I currently have this https://bpa.st/IOOQ which I use here: https://gist.github.com/zefoo/239ebb4fae0cd64402e32c3e4dc21573#file-gistfile1-txt-L70 - store this to catch duplicate images
[05:14:19] <nedbat> foo: ok, but you would hash the image, and then base62 the hash.
[05:15:00] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[05:15:49] *** Quits: nomic2 (~nomic@185.217.117.73) (Quit: Leaving)
[05:15:55] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[05:16:05] <foo> nedbat: ahh, then I think I want something like this: base62.encode(hashlib.sha512(im.tobytes()))
[05:16:11] <foo> (although that doesn't work)
[05:18:22] <foo> Specifically that's throwing this: *** TypeError: '>' not supported between instances of '_hashlib.HASH' and 'int'
[05:18:54] <nedbat> foo: i think you want hashlib.sha512(..).bytes()  or something.
[05:19:11] <nedbat> .digest()
[05:20:17] <foo> nedbat: ah, right, base62.encodebytes(hashlib.sha512(im.tobytes()).digest()) - thank you.
[05:25:30] *** Quits: qpdb_ (~qpdb@user/qpdb) (Ping timeout: 260 seconds)
[05:26:22] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:29:30] *** Quits: Polyinsecure (~Polyinsec@180.244.128.179) (Quit: Leaving)
[05:31:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:32:02] *** Quits: Dotz0cat (~Dotz0cat@h144.199.117.75.dynamic.ip.windstream.net) (Ping timeout: 260 seconds)
[05:32:57] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[05:34:11] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[05:34:46] *** Joins: Dotz0cat (~Dotz0cat@h115.70.29.71.dynamic.ip.windstream.net)
[05:35:16] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:36:34] *** Joins: vlm (~vlm@user/vlm)
[05:39:20] *** Joins: qpdb_ (~qpdb@user/qpdb)
[05:40:17] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[05:44:05] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:44:13] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (Ping timeout: 252 seconds)
[05:45:00] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Ping timeout: 260 seconds)
[05:45:01] *** Joins: tg (~tg@rockylinux/infra/tg)
[05:45:04] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[05:45:52] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 252 seconds)
[05:47:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:49:13] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Ping timeout: 268 seconds)
[05:49:27] <ano> what's the right way to print string without trailing space/newline in py2?
[05:49:47] <nedbat> ano: `print the_string,`
[05:50:02] <ano> nedbat: it adds trailing space, nope?
[05:50:04] *** Joins: lesihctej (jetchisel@user/jetchisel)
[05:50:12] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[05:50:27] <nedbat> ano: `sys.stdout.write(the_string)`  then
[05:51:13] <ano> ugh, really? even not sure how python became popular because of that
[05:52:04] *** Joins: KeiraT (~k@lulzsec.co.uk)
[05:52:15] <grym> an odd thing to complain about,no?
[05:53:11] <nedbat> ano: i guess there are other things to make it popular :)
[05:54:46] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[05:55:01] <ano> grym: odd? almost everything (even sh) can outputs without trailing spaces
[05:55:31] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 265 seconds)
[05:57:23] <nedbat> ano: i hope you'll like other parts of it
[05:58:36] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[05:59:33] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:00:44] *** Quits: hanaan (~naan@user/naan) (Quit: Leaving)
[06:01:15] <grym> print(whatever,end='')
[06:01:17] <grym> ¯\_(ツ)_/¯
[06:01:29] <ano> like most of py3 parts, just didn't know py2 have such a strange pitfall, also seems for py2 there is: from __future__ import print_function
[06:01:33] *** Quits: flyback (~flyback@2601:540:8201:1e60:8c12:f1ac:2fcb:c978) (Ping timeout: 268 seconds)
[06:01:52] <grym> i am rapidly forgetting anything i once knew about py2, fwiw
[06:01:56] <grym> which is a nice fact
[06:02:34] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[06:02:35] <grym> but yes, that future import's a helpful one
[06:04:01] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 268 seconds)
[06:04:03] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[06:04:34] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:04:36] <nedbat> ano: i had also overlooked the __future__ import. that would be a good way to go.
[06:04:46] <nedbat> ano: do you have to use py2?
[06:05:06] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[06:05:07] *** Joins: flyback (~flyback@2601:540:8201:1e60:c8ce:6d91:e2f9:8887)
[06:05:39] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[06:06:06] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:06:14] <ano> didn't use py2 for decades, returned to py2 only for/because of google foobar
[06:06:32] <nedbat> ano: btw, one of the reasons print was changed to be a function was to smooth out some of the weirdnesses
[06:06:34] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 260 seconds)
[06:06:38] *** Quits: lesihctej (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[06:08:34] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 265 seconds)
[06:08:53] *** Joins: califax- (~califax@user/califx)
[06:09:01] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[06:09:56] *** Joins: lesihctej (~jetchisel@user/jetchisel)
[06:10:37] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 252 seconds)
[06:11:05] *** Joins: brabrax (~brabrax@user/brabrax)
[06:12:03] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:12:04] *** califax- is now known as califax
[06:15:26] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[06:22:10] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 252 seconds)
[06:22:27] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[06:23:28] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[06:27:54] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[06:35:09] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[06:35:42] *** Joins: gggp (~textual@60.10.23.159)
[06:36:18] *** Quits: gggp (~textual@60.10.23.159) (Client Quit)
[06:37:28] *** Joins: Macuser (~Macuser@216.30.159.201)
[06:37:54] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[06:40:41] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[06:42:58] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 260 seconds)
[06:43:19] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:44:03] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[06:44:37] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:48ce:c71b:81f:f816) (Read error: Connection reset by peer)
[06:46:42] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[06:48:37] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[06:48:50] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[06:51:01] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[06:53:44] *** Lando-SpaceIzzle is now known as Lando-SpacePimp
[06:59:29] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Connection closed)
[07:02:06] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[07:04:11] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:e53e:bff9:da2:4604)
[07:04:42] <aac> is compile code faster than interpreter ? or better let python decide?
[07:05:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[07:06:43] *** Joins: fikran (~fikran@user/fikran)
[07:08:46] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[07:11:14] *** Quits: lesihctej (~jetchisel@user/jetchisel) (Read error: Connection reset by peer)
[07:11:41] <stealth_> aac what compile code? you mean bytecode? .pyc ?
[07:11:48] <aac> yeah bytecode
[07:12:39] <stealth_> aac, python will create it and its better to have it
[07:12:54] <aac> okay...
[07:12:55] <aac> :)
[07:13:00] <aac> thks
[07:14:51] *** Quits: brachamh (~brachamh@user/brachamh) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:15:52] <InPhase> aac: The advantage of the .pyc files is pretty minimal, as it has zero effect on runtime performance.  It only shortens the load time by a little bit.
[07:16:26] <aac> ah okay..
[07:16:30] <aac> silly of me :)
[07:16:37] *** Joins: brachamh (~brachamh@user/brachamh)
[07:16:44] <InPhase> aac: Where this is most impactful is if you have short scripts that import heavy libraries, then the precompilation of those libraries to pyc makes those load times shorter, which can impact the total script runtime enough to be meaningful.
[07:17:24] *** Quits: Jefren (~Jefren@70.35.66.186) (Ping timeout: 268 seconds)
[07:17:36] <InPhase> aac: Basically, it runs from the same bytecode either way, just without the pyc it has to map text to bytecode first.
[07:18:09] <aac> ok
[07:19:12] * vdamewood precompiles InPhase to .pyc files.
[07:19:25] <InPhase> Careful, I might byte.
[07:19:53] *** Quits: brachamh (~brachamh@user/brachamh) (Remote host closed the connection)
[07:19:57] * vdamewood optimizes the bytes out of InPhase.
[07:20:31] * InPhase resorts to taking a nibble.
[07:20:53] * vdamewood gives InPhase a little bit.
[07:21:06] <InPhase> Now I think we've gone too far.  :)
[07:21:46] <vdamewood> Would you prefer a big bit?
[07:22:40] *** Joins: brachamh (~brachamh@user/brachamh)
[07:25:24] <stealth_> get a room you two
[07:25:54] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 265 seconds)
[07:27:04] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[07:27:05] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:27:20] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:33:13] *** Quits: ssbr` (~ssbr@python/site-packages/ssbr) (Ping timeout: 268 seconds)
[07:35:24] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[07:38:24] *** Quits: brachamh (~brachamh@user/brachamh) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:40:10] *** Joins: brachamh (~brachamh@user/brachamh)
[07:40:46] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:42:51] *** Joins: Wulf (~Wulf@user/wulf)
[07:44:07] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[07:46:20] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 260 seconds)
[07:49:09] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[07:50:52] *** Quits: brachamh (~brachamh@user/brachamh) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:54:38] *** Joins: brachamh (~brachamh@user/brachamh)
[07:56:06] *** byzandula is now known as byzafk
[07:58:20] <JayDoubleu> can I use requests library by not specifying the method like so "requests.post()" but by giving it specific parameter method POST ?
[07:58:30] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:58:31] *** Joins: lethu (~lethu@user/lethu)
[07:58:40] <JayDoubleu> aka `requests(method='POST')
[07:59:07] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:59:12] *** Quits: brachamh (~brachamh@user/brachamh) (Remote host closed the connection)
[08:00:53] *** Joins: brachamh (~brachamh@user/brachamh)
[08:01:35] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[08:04:31] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 252 seconds)
[08:06:03] *** Quits: brachamh (~brachamh@user/brachamh) (Remote host closed the connection)
[08:07:43] *** Joins: brachamh (~brachamh@user/brachamh)
[08:08:48] <aphysically> huh, I was making my own integer enum but I guess I can just use enum.enum and enum.auto() and let python take care of details
[08:09:22] <aphysically> I have a utility function with too many arguments (a lot of which get reused in places) that it occurred to me I could use bitwise flags for and clean up my code a lot
[08:11:37] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 252 seconds)
[08:11:40] *** Quits: DaPinkOne (~Dap@user/dap) (Ping timeout: 268 seconds)
[08:11:54] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[08:12:54] <stealth_> aphysically, you can use `IntFlag` or `Flag` for bitwise
[08:13:11] <aphysically> yeah I was just looking at that
[08:13:40] <aphysically> I suppose I should be using flag and enum if I'm not intending to do the integer manipulations outside of the class and I keep everything auto()
[08:14:27] *** Quits: brachamh (~brachamh@user/brachamh) (Remote host closed the connection)
[08:15:20] <stealth_> aphysically, `auto()` starts with 1 not 0 like in C so just keep that in mind.
[08:15:30] <aphysically> so they're all truthy?
[08:15:53] <aphysically> hmmm, would be kind of nice to set a first one to falsey but probably better to keep to referring things by name exclusively anyway
[08:15:57] <stealth_> yes, you can manually set `SOMETHING = 0`
[08:16:16] <aphysically> ah, yeah
[08:20:40] *** Joins: brachamh (~brachamh@user/brachamh)
[08:21:10] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 240 seconds)
[08:21:55] *** Joins: Atque (~Atque@user/atque)
[08:22:30] <aphysically> if I set one to 0 I guess I should use IntEnum instead since being an int or not is no longer an implementation detail
[08:24:03] <stealth_> that wont be bitwise anymore though
[08:24:15] *** Joins: gggp (~textual@60.10.23.159)
[08:24:25] <stealth_> you can use 0 with IntFlag or Flag
[08:24:53] *** Quits: gggp (~textual@60.10.23.159) (Client Quit)
[08:25:15] <stealth_> bitwise is a powerful feature if used right!
[08:25:28] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:26:20] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[08:27:30] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[08:29:41] *** Joins: DaPinkOne (~Dap@user/dap)
[08:30:51] *** Joins: cheater (~Username@user/cheater)
[08:33:12] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:55] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[08:37:07] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-75b6-b217-124b-0862.res6.spectrum.com) (Read error: Connection reset by peer)
[08:38:20] *** Joins: Sky_Net (~Sky_Net@176.14.213.149)
[08:53:54] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[09:02:08] <hexology> `3.995963079726258e019 % 97` returns 1.0, but `39959630797262576401 % 97` returns 96. what is it about floating point that causes the first one to return 1.0?
[09:03:33] *** Joins: gggp (~textual@60.10.194.42)
[09:04:08] <stealth_> precision
[09:05:06] <KirkMcDonald> hexology: Floats can only accurately represent integers up to 2**53.
[09:05:39] *** Quits: gggp (~textual@60.10.194.42) (Client Quit)
[09:05:46] <stealth_> hexology, use https://docs.python.org/3/library/decimal.html
[09:05:52] <KirkMcDonald> Or use integers.
[09:06:52] *** Joins: gggp (~textual@60.10.23.159)
[09:08:19] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:08:43] <hexology> makes sense KirkMcDonald, i wasn't sure what the upper limit was
[09:08:44] <themill> they're also different numberes there
[09:09:13] <hexology> yeah, this question was "inherited" from someone else. the actual numbers are the same numerical
[09:09:15] *** Quits: Sky_Net (~Sky_Net@176.14.213.149) (Quit: Leaving)
[09:09:39] <KirkMcDonald> One is what you get when you convert the other to a float.
[09:10:06] <hexology> my `sys.float_info.max` is 1.7976931348623157e+308
[09:10:20] <KirkMcDonald> But it is worth noting that: https://bpa.st/NGVQ
[09:10:54] <KirkMcDonald> hexology: Correct. That is the maximum representable value. But the way floats work is that you lose precision as the magnitude increases.
[09:11:06] <hexology> ahh
[09:11:22] <KirkMcDonald> hexology: And past 2**53, that precision becomes worse than 1.
[09:11:37] <KirkMcDonald> Meaning that a float can't represent 2**53+1, for instance.
[09:12:27] <KirkMcDonald> `float(2**53) == float(2**53+1)` evaluates to True.
[09:13:33] <hexology> so from the perspective of the computer, what's happening with `3.995963079726258e019 % 97` that causes it to return 1.0?
[09:13:48] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:e53e:bff9:da2:4604) (Quit: aac)
[09:14:01] <KirkMcDonald> hexology: Welcome to the exciting world of IEEE 754 floating-point.
[09:14:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:14:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:15:05] <KirkMcDonald> hexology: Basically, once you convert the value to a float, it is now a different value. And that value, taken modulo 97, happens to be 1.
[09:15:26] <hexology> yeah, this is interesting stuff. this is the "floating" part of "floating point" that i've never had to care about before
[09:15:36] <KirkMcDonald> hexology: E.g. https://bpa.st/KOSQ
[09:15:48] <KirkMcDonald> hexology: It's the decimal point that "floats," essentially.
[09:16:06] *** Joins: fikran (~fikran@user/fikran)
[09:16:32] <KirkMcDonald> You've got 53 bits of number to play with, and then the decimal point can be placed some distance to the left or the right of that number.
[09:16:58] <hexology> right. i never really considered what happens when you run out of decimal places to lose
[09:17:05] <hexology> this was very helpful, thank you
[09:17:11] <KirkMcDonald> Roughly speaking, this translates to about 16 decimal digits.
[09:18:04] <hexology> and you can increase the number of <1.0 decimal places available by increasing the size of the data type, right?
[09:21:45] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 268 seconds)
[09:28:38] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[09:29:09] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[09:29:48] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[09:30:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[09:31:52] *** Joins: wyclif (~wyclif@user/wyclif)
[09:32:26] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Read error: Connection reset by peer)
[09:33:06] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[09:34:29] *** Joins: semeion (~semeion@user/semeion)
[09:35:45] *** Joins: kib_ (~kib@user/kib)
[09:36:30] *** Quits: kib_ (~kib@user/kib) (Client Quit)
[09:36:49] *** Joins: kib_ (~kib@user/kib)
[09:36:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[09:37:05] *** Joins: Wulf (~Wulf@user/wulf)
[09:37:10] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 268 seconds)
[09:37:19] *** Joins: wyclif (~wyclif@user/wyclif)
[09:37:36] *** Joins: jim (~jim@about/linux/staff/jim)
[09:37:47] *** Quits: DocMors (~DocMors@web.crypticity.net) (Ping timeout: 268 seconds)
[09:37:54] *** Quits: shutnoshut (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[09:38:21] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[09:38:22] *** Quits: scoobydoo_ (~scooby@user/scoobydoo) (Excess Flood)
[09:38:29] *** Joins: shutnoshut (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com)
[09:38:41] *** kib_ is now known as kib
[09:41:29] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 268 seconds)
[09:42:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[09:42:17] *** Joins: Polyinsecure (~Polyinsec@180.244.128.179)
[09:42:50] *** Joins: wyclif (~wyclif@user/wyclif)
[09:44:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2.1)
[09:47:10] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[09:51:34] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[09:52:57] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[09:53:05] <kib> https://0x0.st/-32n.jpg I have one of these devices. They provide a web interface for controlling them. It consists of a login screen and then the dashboard. The dashboard has battery info. I want to get a notification if battery falls below 35%. I am on linux and I would like to use python for this. How would I go about doing this?
[09:53:31] <kib> https://0x0.st/-32d.png and https://0x0.st/-32k.png are what my dashboard and login look like
[09:55:44] *** Joins: Guddu (~Guddu@190.84.88.92)
[10:02:39] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[10:02:48] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[10:05:42] *** Joins: zaquest (~notzaques@5.128.210.178)
[10:05:55] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[10:15:00] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[10:15:01] *** scoobydoo_ is now known as scoobydoo
[10:23:26] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[10:25:44] *** Joins: Gurkenglas (~Gurkengla@dslb-002-207-014-195.002.207.pools.vodafone-ip.de)
[10:25:58] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[10:28:18] <sh4rk> that's a simple conditional statement with a notification send to your sms as long as you have something setup server side that can send a text out
[10:28:28] <sh4rk> simple sip trunk setup with voip will work thawt out
[10:28:47] <sh4rk> or bypass voip and notify it to your email
[10:28:51] <sh4rk> sipmle with curl
[10:29:11] <sh4rk> curl grep and awk are the tools of the gods
[10:29:20] <sh4rk> learn them, use them, and realize what they can do, then learn websockets
[10:29:22] <sh4rk> socket.io
[10:31:12] <kib> sh4rk: I am a noobie I didn't understand most of what you said but I did have an inclination that I'd have to use curl, awk, grep
[10:31:23] <kib> the getting logged in part is what I am not able to figure out
[10:33:40] *** Joins: rendar (~rendar@user/rendar)
[10:37:18] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[10:39:05] <jinsun> kib: logging in should be easy with requests library, it is probably just basic auth which requests has built in https://docs.python-requests.org/en/master/user/authentication/#basic-authentication
[10:40:01] <kib> jinsun: ok I will check that out
[10:41:09] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[10:43:44] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[10:44:55] *** Joins: flokuehn (~flokuehn@i577BC60D.versanet.de)
[10:46:27] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:47:06] *** Joins: seednode (~seednode@user/seednode)
[10:47:44] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[10:51:48] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 265 seconds)
[10:52:34] <kib> jinsun: ok I get a "<Response [200]>" which I presume means I
[10:52:42] <kib> have logged in successfully. Now what?
[10:53:24] *** Joins: upsala (~zcb@185.213.155.160)
[10:54:24] *** Quits: zunk (~zunk@h-79-136-122-114.a240.priv.bahnhof.se) (Remote host closed the connection)
[10:55:44] <jinsun> kib: now see resposne.text if it has the stuff you want
[10:57:35] <kib> jinsun: where is respnse.text going to be? print(response.text) didn't work and it isn't there in the working directory either.
[10:57:45] <kib> response.text
[10:58:54] <jinsun> that <Response [200]> is the response
[11:00:46] <kib> ngl I feel kinda dumb.
[11:00:59] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 265 seconds)
[11:01:00] <sh4rk> itrs cool man there are levels to it
[11:01:12] <kib> is it a variable that i can print? print(Response) doesn't work...
[11:01:16] <sh4rk> it's all experience and what you currently utilize, waht your use-case is
[11:01:26] <sh4rk> oh man you are new :D
[11:01:32] <kib> yes I am :(
[11:02:05] <sh4rk> not a bad thing dude, glad to see you pick up python
[11:02:25] <sh4rk> a_file = open("response.txt"
[11:02:27] <kib> well I am not too bad with shell rn, and python is a good framework to learn :)
[11:02:33] <sh4rk> lines = a_file. readlines()
[11:02:39] <sh4rk> for line in lines:
[11:02:42] <kib> oh ok ok o
[11:02:43] <sh4rk> print(line)
[11:02:46] <kib> understood
[11:02:46] <sh4rk> a_file.
[11:08:32] *** Joins: minip (~minip@user/minip)
[11:09:01] <kib> I keep getting a no file found error.
[11:09:17] <kib> Response, response.txt nothing works
[11:09:24] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:b404:bc48:4027:46f5) (Read error: Connection reset by peer)
[11:09:37] <kib> https://0x0.st/-3_c.py
[11:09:42] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:96e:fc0e:e7fc:19d1)
[11:11:42] <kib> "<class 'requests.models.Response'>" this is the type of the response hmm
[11:13:22] *** Quits: Polyinsecure (~Polyinsec@180.244.128.179) (Quit: Leaving)
[11:14:10] <kib> there is no file caleld Response getting saved anywhere in my system :(
[11:14:13] *** Joins: manti7 (~manti7@176.10.104.94)
[11:16:54] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[11:17:34] <kib> I tried to curl the site. but in the output I can't find battery level :(
[11:19:33] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[11:19:42] *** Joins: lethu (~lethu@user/lethu)
[11:21:55] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 252 seconds)
[11:23:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:25:30] *** Joins: fikran (~fikran@user/fikran)
[11:27:39] *** Joins: eramirez (~eramirez@49.144.39.35)
[11:30:00] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[11:30:20] *** Joins: nomic (~nomic@185.217.117.73)
[11:32:01] <sh4rk> debug, this part is actual work
[11:32:26] <sh4rk> doubt anyone will do that for an off-brand device that you're trying to emulate
[11:32:56] <sh4rk> i gave you the basics, now its just a matter of finding the call for the battery life, and parsing that information through that response.txt
[11:33:02] <sh4rk> i figured you already knew what it was
[11:33:03] *** Joins: kosh (~kosh@user/kosh)
[11:34:02] <eramirez> I am trying to wrap my head around classes
[11:34:12] <eramirez>  I created a simple class but when I try to call method that reference
[11:34:13] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:34:20] <eramirez> another reference
[11:34:26] <eramirez> it fails
[11:34:32] <eramirez> https://bpa.st/VOMA
[11:34:54] *** Quits: Joel (~jjshoe@user/joel) (Remote host closed the connection)
[11:34:59] *** Quits: eramirez (~eramirez@49.144.39.35) (Read error: Connection reset by peer)
[11:35:16] <kib> sh4rk: makes sense thanks
[11:35:44] *** Joins: Joel (~jjshoe@user/joel)
[11:36:24] *** Quits: gggp (~textual@60.10.23.159) (Ping timeout: 268 seconds)
[11:37:56] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[11:37:58] *** Joins: eramirez (~eramirez@49.144.39.35)
[11:38:16] *** Quits: eramirez (~eramirez@49.144.39.35) (Read error: Connection reset by peer)
[11:38:22] *** Joins: audio (~audio@2603-8081-1800-6a6f-60cd-6954-be1d-d6dd.res6.spectrum.com)
[11:38:24] <aphysically> oh you're meant to use 'is' instead of equality with enums? huh
[11:39:10] *** Quits: gitly (~gitly@148.252.129.191) (Ping timeout: 240 seconds)
[11:39:15] *** Joins: ubert (~Thunderbi@91.141.68.10.wireless.dyn.drei.com)
[11:39:38] <aphysically> equality is defined anyway though, but I wonder how that works for structural pattern matching (does it not use equality?)
[11:39:40] <aphysically> I guess it doesn't matter
[11:39:52] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:40:30] *** Joins: PaddyF (~PaddyF@user/paddyf)
[11:41:00] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:41:23] *** Joins: gitly (~gitly@85.255.236.187)
[11:41:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[11:44:29] *** Quits: kib (~kib@user/kib) (Ping timeout: 265 seconds)
[11:47:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[11:48:45] *** Joins: jla (~jordi@64.225.79.195)
[11:48:57] *** Joins: mavez (~mavez@scotia.systems)
[11:49:36] *** Joins: wyclif (~wyclif@user/wyclif)
[11:49:58] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[11:50:11] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi)
[11:51:39] * jla studying PyXL3 https://github.com/gvanrossum/pyxl3
[11:53:28] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f95d-146.dhcp.inet.fi) (Client Quit)
[11:57:16] <Wulf> can't you use context managers? https://bpa.st/SX5Q
[11:57:21] *** Joins: gggp (~textual@114.245.104.163)
[11:57:26] *** Joins: KombuchaKip (~kip@192.252.230.5)
[11:59:09] *** Joins: paul424 (~tom@ip-31-0-126-60.multi.internet.cyfrowypolsat.pl)
[12:00:03] *** Quits: tecnico (~tecnico@207.157.74.150) (Quit: Client closed)
[12:00:10] <paul424> " As in Modula-3, there are no shorthands for referencing the object’s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call. "
[12:00:48] <paul424> what does " As in Modula-3, there are no shorthands for referencing the object’s members from its methods:" mean, I am no modula-3 nor English daily user, someone could restate that ?
[12:01:33] <Wulf> paul424: Do you know Java?
[12:01:47] <paul424> a bit, old story .... so Wulf  ?
[12:02:36] *** Joins: semeion (~semeion@user/semeion)
[12:03:01] <Wulf> paul424: A java method would be like  public int foo(int bar) { return this.value + bar }   In python you'd have to write def foo(self, bar: int) -> int: return self.value + bar
[12:03:14] <Wulf> paul424: you notice that python needs an explicit "self" in the parameter list?
[12:03:21] <paul424> yes...
[12:04:02] <paul424> what does " As in Modula-3, there are no shorthands for referencing the object’s members from its methods:" mean, I am no modula-3 nor English daily user, someone could restate that ?
[12:04:04] <Wulf> paul424: `this' in python is that shorthand.
[12:04:13] <paul424> aha
[12:04:13] <Wulf> err, `this' in java.
[12:04:55] <paul424> still don;'t know how to retranslate that sentence to polish , but at least I know what it is about
[12:06:02] <Wulf> paul424: automatic translation makes no sense? (I can't check, don't know any Polish):  Podobnie jak w Moduli-3, nie ma skrótów do odwoływania się do członków obiektu z jego metod: funkcja metody jest deklarowana z jawnym pierwszym argumentem reprezentującym obiekt, który jest dostarczany niejawnie przez wywołanie.
[12:06:40] <paul424> aha, now I get it
[12:06:47] *** Joins: Lewky (~Lewky@146.70.50.74)
[12:07:00] <paul424> it translated with google quality , but the sense preveailed :D
[12:07:09] <Wulf> paul424: https://www.deepl.com/
[12:07:37] * jla " bye,bye ... Google " ?
[12:07:39] *** Quits: Lewky (~Lewky@146.70.50.74) (Quit: WeeChat 2.8)
[12:07:50] <paul424> ahh that, I have seen it before, thansk
[12:07:53] <paul424> thanks*
[12:08:02] <Wulf> jla: wherever possible!
[12:08:43] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[12:09:35] * jla We are building a new search engine, made with Python...  BTW
[12:09:46] *** Quits: naterlater (~Nathan22@199.249.111.186) (Ping timeout: 252 seconds)
[12:10:03] *** Quits: Guddu (~Guddu@190.84.88.92) (Quit: Leaving)
[12:10:09] <Wulf> jla: hope it won't be too slow ;-)
[12:10:23] <jla> Fast as light
[12:10:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[12:10:52] <jla> underlaying PostgresSQL . db's ... indexes, and no JS front-end
[12:11:20] *** Quits: gitly (~gitly@85.255.236.187) (Ping timeout: 268 seconds)
[12:12:05] <jla> So that search results don't try to 'read your mind'   (social control) ad-hoc ?
[12:12:43] *** Joins: gitly (~gitly@85.255.235.85)
[12:12:55] *** Parts: jla (~jordi@64.225.79.195) ()
[12:15:24] *** Joins: Lewky (~Lewky@146.70.50.74)
[12:24:07] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 265 seconds)
[12:26:45] <control> how can i replace read().split() for faster file reading?
[12:28:19] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2.1)
[12:28:37] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Quit: Ping timeout (120 seconds))
[12:28:46] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[12:29:52] *** Joins: thiras (~thiras@user/thiras)
[12:30:16] <Wulf> control: what's the file format?
[12:30:43] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[12:30:46] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[12:31:06] <control> text file
[12:31:16] <control> only new lines, no spacing
[12:31:32] <control> lines length are the same
[12:32:32] <Wulf> control: you could read line-by-line instead.
[12:33:47] <hexnewbie> control: list(fileob) will give you the lines, I don't think anything will be faster than it. Repeatedly doing fileob.read(length) if the line length is *guaranteed* will avoid looking for line ends, but it may still be slower, and more prone to error.
[12:33:48] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Remote host closed the connection)
[12:34:04] <hexnewbie> s/slower/not faster/
[12:35:59] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:52] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:38:07] *** Quits: briian (uid321220@id-321220.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:38:47] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[12:39:17] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[12:39:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:44] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[12:45:49] <rendar> what annotation should i use to represent any object?
[12:49:25] <ChrisWarrick> rendar: typing.Any
[12:49:30] <rendar> ok
[12:49:47] <rendar> and for a list of integers, i guess typing.List[int]
[12:49:55] <ChrisWarrick> rendar: yes
[12:50:19] <ChrisWarrick> (depending on what you’re doing iwith it, perhaps a TypeVar would be better instead of Any)
[12:50:21] <rendar> but is the typing module still valid in python 3.9?
[12:50:25] <jinsun> rendar: or just object instead of Any  if you don't want to do any operation on it
[12:50:32] <ChrisWarrick> rendar: why would it not be valid?
[12:50:45] <rendar> ok
[12:50:58] *** Joins: oz4ga (~tim@93.90.4.233)
[12:51:34] <jinsun> a lot of stuff was deprecated from typing i 3.9, but you still need it for some things like Any
[12:52:06] *** Quits: gggp (~textual@114.245.104.163) (Ping timeout: 260 seconds)
[12:52:27] <rendar> i see
[12:52:45] <rendar> i was wondering if List[int] was integrated in python 3.9 itself, so i don't need t.List[int]
[12:53:06] <jinsun> you can do list[int] if you have 3.9 yes
[12:53:08] <ChrisWarrick> rendar: you can use list[int] if you’re going for 3.9+ only
[12:53:18] <jinsun> without importing anything
[12:53:37] <rendar> yes, that what i was wondering, thanks
[12:53:53] <rendar> of course i can also do: `def f(*args:list[int]): ...`
[12:54:08] <rendar> but, do i still need t.Any in 3.9?
[12:57:23] <The-Compiler> ChrisWarrick, rendar: you can use list[int] with 3.7+ and "from __future__ import annotations"
[12:57:36] <rendar> The-Compiler, thanks
[12:58:04] <The-Compiler> (though that makes them lazily evaluated, so if you use a framework using type annotations for other purposes, that might break)
[12:58:57] <The-Compiler> rendar: you don't really *need* Any, as leaving an annotation off usually has the same effect, but explicit is better than implicit
[13:01:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:02:09] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[13:04:45] <pluri> any tips for how to order two arrays (representing 1:1 correspondence), by the values in one of them?
[13:06:05] *** Joins: wyclif (~wyclif@user/wyclif)
[13:06:49] <rendar> ok
[13:07:23] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[13:07:41] <pluri> oh, list1, list2 = zip(*sorted(zip(list1, list2)))
[13:07:45] <pluri> cool
[13:07:51] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[13:08:16] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[13:08:58] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[13:10:20] *** Quits: PaddyF (~PaddyF@user/paddyf) (Quit: bye)
[13:12:21] *** Joins: gggp (~textual@114.245.104.159)
[13:12:51] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[13:16:30] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:16:35] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[13:16:51] <rendar> what about annotation can be asyncio.Task OR a coroutine?
[13:17:25] *** Joins: cdown (~cdown@194.207.141.245)
[13:18:49] *** Joins: Auron (Auron956@user/auron)
[13:18:54] <jinsun> typing.Union[asyncio.Task, typing.Coroutine]
[13:20:23] <jinsun> or just `Task | Coroutine` in python 3.10 or if you have the future import
[13:20:45] *** Joins: DocMors (~DocMors@web.crypticity.net)
[13:23:06] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:27:51] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[13:29:33] <rendar> thanks
[13:29:36] *** Quits: bomb-on (~bomb-on@213.220.122.129) (Quit: aллилѹіа!)
[13:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[13:32:46] *** Quits: paul424 (~tom@ip-31-0-126-60.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[13:33:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[13:34:14] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[13:34:35] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[13:34:44] *** Joins: georgios (~georgios@user/georgios)
[13:34:53] *** Joins: fikran (~fikran@user/fikran)
[13:40:30] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:43:34] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[13:44:41] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[13:46:34] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[13:48:22] *** Quits: ubert (~Thunderbi@91.141.68.10.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[13:48:51] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:49:18] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:49:23] *** Joins: srhm (~srhm@user/srhm)
[13:49:59] <bjs> ChrisWarrick: rendar: note that annotating as `Any` and annotation as `object` is not the same thing.
[13:50:06] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:50:34] *** Joins: srhm (~srhm@user/srhm)
[13:50:37] <rendar> what are the major differences?
[13:50:43] <bjs> rendar: if you want to annotate async things you probably want `Awaitable[T]`
[13:50:54] <bjs> rendar: Any means "disable typechecking"
[13:50:55] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[13:50:57] *** Joins: greknod24 (~grek@1.132.106.149)
[13:51:06] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:51:09] <bjs> rendar: `def f(x: Any) -> return x.foo()`  is valid,  but `def f(x: object) -> return x.foo()` is not
[13:51:29] <bjs> because if x could be *any* kind of object, then it's not safe to try call foo()
[13:51:41] <rendar> uhm i see
[13:51:42] *** Quits: greknod24 (~grek@1.132.106.149) (Read error: Connection reset by peer)
[13:51:49] <rendar> when object is used as annotation then?
[13:52:01] <bjs> rendar: when you have a function that can accept any object :)
[13:52:24] <rendar> what about i pass f() an object that has the foo() method then?!
[13:52:57] <bjs> rendar: I think you misunderstand how type checking works. When you write a function with annotations,  the function is typechecked.  The call sites are typechecked separately
[13:53:03] *** Quits: greknod2 (~grek@114-198-41-82.dyn.iinet.net.au) (Ping timeout: 265 seconds)
[13:53:22] <rendar> yes i know that
[13:53:24] <bjs> with : object my `f` just isn't type safe and you'll get an error from something like mypy
[13:53:45] <rendar> hmm i see
[13:53:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:53:54] *** Joins: greknod2 (~grek@ppp121-45-133-235.bri-pow-que-bras31.tpg.internode.on.net)
[13:54:06] <rendar> so what is a concrete example where object can be used as annotation?
[13:54:13] <bjs> rendar: a function that accepts any object
[13:54:29] <bjs> rendar: think `print` for example
[13:54:40] *** Joins: wyclif (~wyclif@user/wyclif)
[13:54:53] <rendar> why should print use object instead of t.Any?
[13:55:18] <bjs> rendar: ... because Any disables typechecking
[13:55:40] <bjs> if you wanted to write your own print() function, you want to say "this accepts any object" and the annotation for that is "object"
[13:55:54] <rendar> ok, let's say that 'object' should be used when objects passed to functions are not *used* by the function
[13:56:07] <bjs> rendar: no they can be used, you just can't do things you can't do to *all* functions
[13:56:17] <rendar> i see
[13:56:48] <bjs> e.g. `def f(x: object): print(str(x)); print(x == x); print(x is x); print("x={}".format(x))` etc
[13:56:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[13:57:38] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[13:57:42] <rendar> those examples are right because i can do x==x everywhere?
[13:58:11] <bjs> rendar: if you say annotate something as `object` then all mypy/pytype knows is that it's an object,  it'll let you do whatever you can do to any object with it
[13:58:17] <bjs> but it won't let you do things that some objects cannot do
[13:58:20] <rendar> uhm, i still don't see exactly how `def f(x:object): x.foo()` could be wrong
[13:58:30] <rendar> ok
[13:58:31] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[13:58:34] <bjs> rendar: because 42 is an object, but 42 doesn't have a foo method
[13:58:40] <rendar> ok, right
[13:58:40] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:9166:dd03:64af:7d9d)
[13:58:55] <rendar> so the annotation is the *minimum* common denominator
[13:59:03] <bjs> rendar: that's always what annotations mean
[13:59:22] <rendar> right
[13:59:22] <bjs> e.g. `def f(x: int): ...` also accepts booleans
[13:59:41] *** Quits: OPK (~OPK@user/opk) (Quit: Textual IRC Client: www.textualapp.com)
[13:59:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:59:46] <rendar> indeed
[14:00:05] *** Joins: rsx (~dummy@ppp-188-174-159-152.dynamic.mnet-online.de)
[14:00:08] *** Joins: wyclif (~wyclif@user/wyclif)
[14:00:16] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4433)
[14:00:42] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:00:43] *** Joins: greknod29 (~grek@114-198-40-118.dyn.iinet.net.au)
[14:00:50] <jinsun> but the type checker will not allow you to treat x like a boolean inside the function
[14:01:43] <jinsun> so got example you can't append x to list[bool] even if you know x is bool, because to the type checker thinks it is int
[14:01:54] <jinsun> s/got/for
[14:02:07] *** Joins: kib (~kib@user/kib)
[14:02:34] *** Quits: jazzy (~jaziz@2600:380:8478:544b:f0dd:f48c:6ca4:b0be) (Ping timeout: 252 seconds)
[14:02:57] *** Quits: greknod2 (~grek@ppp121-45-133-235.bri-pow-que-bras31.tpg.internode.on.net) (Ping timeout: 268 seconds)
[14:02:57] *** greknod29 is now known as greknod2
[14:03:40] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 240 seconds)
[14:03:46] <jinsun> similarly if you annotate object, you can pass any object, but inside the function the type checker will only allow operations on x that are valid for object, not any other type
[14:04:06] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:04:38] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[14:04:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:05:28] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:05:37] *** Joins: wyclif (~wyclif@user/wyclif)
[14:08:26] *** Joins: plastico (~plastico@neomutt/plastico)
[14:08:30] *** Quits: greknod2 (~grek@114-198-40-118.dyn.iinet.net.au) (Ping timeout: 268 seconds)
[14:08:36] *** Joins: greknod22 (~grek@203-33-161-241.dyn.iinet.net.au)
[14:10:23] *** Quits: gggp (~textual@114.245.104.159) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:10:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[14:11:07] *** Joins: wyclif (~wyclif@user/wyclif)
[14:11:11] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:12:36] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[14:13:02] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 268 seconds)
[14:14:11] *** Joins: darksun (~darksun@user/darksun)
[14:14:19] *** Quits: gitly (~gitly@85.255.235.85) (Ping timeout: 265 seconds)
[14:15:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:16:03] *** Joins: gitly (~gitly@85.255.235.31)
[14:16:06] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[14:16:38] *** Joins: wyclif (~wyclif@user/wyclif)
[14:21:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[14:21:26] *** Joins: fdan (~fdan@103.215.168.1)
[14:22:09] *** Joins: wyclif (~wyclif@user/wyclif)
[14:24:10] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[14:24:23] <rendar> if my understanding is correct, with coroutines its a common thing to have exceptions thrown inside a coroutine (e.g. through coro.send(...)) which are "silent" exceptions, i mean, python interpreter won't catch them, but why is that?
[14:24:41] <rendar> (err, i meant coro.throw())
[14:24:47] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[14:24:55] <bjs> rendar: uh, I mean they're caught and handled like any other exception
[14:25:40] <bjs> they're certainly not "silent", when you throw the next yield/await will raise an exception.  Indeed this is how .cancel() works.
[14:26:03] <rendar> bjs, well, but if i have a coroutine which *generates* an exception, let's say by running x=1/0, my application won't see any ZeroDivision exception thrown ... *UNLESS* i don't call that_coro_task.exception()
[14:26:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[14:26:44] <bjs> rendar: well that's because asyncio caught the exception when it ran it, and saved it to a variable that the exception() method reads
[14:26:46] <rendar> and even in that case, i get the *instance* of ZeroDivision exception, i don't get that exception thrown
[14:27:05] <bjs> rendar: if you `await` the future/task it'll re-raise the exception for you
[14:27:08] <rendar> bjs, oh, i see, that's a Task specific behavior then
[14:27:15] <rendar> which aims to encapsulate all of this
[14:27:39] *** Joins: wyclif (~wyclif@user/wyclif)
[14:28:48] <bjs> rendar: well the point is you have many tasks executing concurrently and one raises an exception.  What are you to do? This is the problem asyncio has to solve
[14:29:05] <rendar> yes, now i see
[14:29:57] <rendar> coroutines are "naked", so you *must* await them and exceptions will be thrown and propagated, while Task will await coroutine for you and will save any exception and do setup/cleaning stuff
[14:30:25] <bjs> rendar: coroutines are just like generators,  they don't execute until you tell them to advance to the next yield
[14:30:45] <rendar> yes
[14:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:11] <bjs> a coroutine doesn't execute until you tell it to advance to the next `await`.  It's asyncio's job to keep track of all the "executing" coroutines (which asyncio calls Tasks) for you,  and advancing each of them in turn to make sure they all interleave
[14:31:13] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Quit: I'm tired, have a good time!)
[14:31:19] *** Joins: kib_ (kib@user/kib)
[14:31:50] <bjs> then if one throws an exception, it has to go back to the one that was awaiting it and re-raise the exception there. So if you `await something` and something raises an exception it all fits together in the way you expect
[14:32:09] <rendar> ok
[14:32:12] <bjs> but if you create_task(something())  now there is no obvious "parent" to re-raise in,  this is one of the reasons why it's important you `await` your tasks
[14:32:19] *** Joins: OPK (~OPK@user/opk)
[14:32:38] <rendar> so the exception will be propagated until it reaches `try: asyncio.run(main()) except: ...`
[14:32:58] <bjs> rendar: no,  like I said, task exceptions are caught by asyncio
[14:33:13] <bjs> which then saves them and re-raises them when it reaches the "parent" `await`
[14:33:15] <rendar> no, i mean the `await x`
[14:33:27] <bjs> rendar: oh then it just gets raised at that line, like any other exception
[14:33:36] <rendar> if i always await something, the exception will reach the main try block
[14:33:40] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 240 seconds)
[14:33:43] <bjs> and if that's inside another task then asyncio will catch it again etc
[14:33:47] *** Quits: kib (~kib@user/kib) (Ping timeout: 268 seconds)
[14:34:30] *** Joins: cdown (~cdown@194.207.141.245)
[14:36:46] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[14:36:53] *** Joins: txtsd1 (~txtsd@user/txtsd)
[14:39:40] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[14:40:50] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 260 seconds)
[14:42:07] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[14:45:31] <bjs> rendar: here's a little fake asyncio that mimics what's going on https://bpa.st/HYYQ
[14:45:43] *** Joins: lethu (~lethu@user/lethu)
[14:46:23] <rendar> bjs, thanks, very interesting. One thing: why do you use `Exception` and not `BaseException` ?
[14:46:36] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[14:46:58] <bjs> rendar: Uh I didn't think
[14:47:11] <bjs> rendar: also I wanted to be able to Ctrl-C to exit my little test program :P
[14:47:22] <rendar> lol
[14:47:51] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[14:47:52] <rendar> bjs, should custom exceptions derive from Exception class or BaseException?
[14:47:59] <bjs> rendar: Exception.
[14:48:05] <rendar> ok!
[14:48:12] <bjs> BaseException really is for things you don't want to catch,  I don't think asyncio catches BaseException either
[14:48:20] <bjs> rendar: but the point is, there's an event loop that has a bunch of tasks, and each task is just a "running" coroutine.
[14:48:29] <rendar> yes i see
[14:49:23] <bjs> and that the run_*** method loops over the tasks in some scheduling way and advances the generator(/coroutine) forward.  If it sees an exception it just saves it off to re-raise later.  I don't do the re-raising here,  maybe you can try extend my little example to support `yield t3` to  re-raise in one of the other generators(/coros)
[14:56:16] *** Joins: EGH (~EGH@185.25.195.104)
[14:56:41] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[14:56:49] <no_gravity> Good Morning
[14:56:51] <no_gravity> I often wish there was something like regex that would match the case of the regex. So "hello wORLd".match(/World/i) would result in 'World' rather than 'wORLd'.
[14:57:59] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[15:01:00] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[15:02:15] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (Quit: ZNC 1.8.2 - https://znc.in)
[15:02:39] <hexnewbie> no_gravity: What would 'wORLD' matched against [wW]orld and [Ww]orld result in?
[15:02:39] *** Quits: jeho2 (~jehoshaph@user/jehoshaphat) (Ping timeout: 265 seconds)
[15:02:39] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[15:04:17] <bjs> rendar: I think if you take my paste and extend it to add a `sleep` coroutine, to support `yield t1`, and `yield sleep(1)`, you'll start to get a really good idea of what asyncio is actually doing
[15:04:37] <bjs> and why it behaves the way it does,  btw in my paste schedule() is basically create_task()
[15:04:48] <rendar> yes
[15:06:09] <rendar> bjs, why did you use generators+yield instead of coroutines+await in your example?
[15:06:35] <bjs> rendar: to show that async/await isn't magic
[15:06:41] <bjs> and that it's asyncio doing all the work
[15:06:45] <rendar> ok, yes i agree
[15:08:05] *** Joins: kib (~kib@user/kib)
[15:11:38] *** Quits: kib_ (kib@user/kib) (Ping timeout: 260 seconds)
[15:15:20] *** Joins: badsektor (~badsektor@user/badsektor)
[15:16:00] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:18:19] <rendar> bjs, but, if create_task() is a mere set.add() call, what actually brings coroutines running when i call that function? in your code it's just set.add
[15:20:27] *** Joins: Linux77 (~Linux7_7@186.233.182.243)
[15:25:02] <bjs> rendar: create_task doesn’t actually run anything
[15:26:43] <no_gravity> hexnewbie: 'wORLD'.match(/[wW]orld/i) # world
[15:26:50] <no_gravity> hexnewbie: 'wORLD'.match(/[Ww]orld/i) # World
[15:26:54] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[15:27:03] <bjs> rendar: given a coro it makes a Task object and attaches it to the event loop
[15:27:09] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[15:27:25] <bjs> asyncio is a little more complicated than just one big set but it’s the same idea
[15:28:17] <rendar> bjs, ok, and attaching the Task which in turn will await  coro() that will run the coroutine
[15:29:33] <bjs> rendar: not really, the task is the coroutine. just like in my example, it’s just a set of coroutines and the run_* function has the loop that actually next()s them
[15:29:36] <bjs> to make them run
[15:29:44] <grawity> no_gravity: the match object lets you retrieve the start,end of each match
[15:29:52] <rendar> ok
[15:30:01] <hexnewbie> no_gravity: That would be too difficult to achieve, then. But literals are probably doable
[15:30:02] <grawity> no_gravity: oh wait I got your problem the wrong way around, nevermind
[15:30:03] <no_gravity> grawity: Yes, but does that help?
[15:30:13] <no_gravity> hexnewbie: literals?
[15:30:18] <rendar> bjs, i always have imagined the Task object as a wrapper object which saves the coroutine internally, among other states
[15:31:17] <hexnewbie> no_gravity: Not regular expressions. Just literal string matches. With some effort you could split a regex into compilable regular expressions and literals, too. (Probably even without writing your own parser)
[15:32:13] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Ping timeout: 252 seconds)
[15:32:17] <no_gravity> hexnewbie: "split a regex into compilable regular expressions"?
[15:33:21] <bjs> rendar: yes like my Task, it contains the coroutine and some data (whether it’s finished running, what the exception was etc)
[15:33:37] <rendar> yep
[15:33:43] <hexnewbie> no_gravity: This is a regular expression: r'[Ww]orl[dD]'. This are multiple regular expressions: [r'[Ww]', 'orl', r'[dD]']. This is a string literal that can be matched without regular expressions: 'orl'
[15:34:19] <obiwahn> are python maps ordered?
[15:34:20] <no_gravity> hexnewbie: Consider this: brand = data.match(/(?:I bought )?a (?:new|old)?(BMW|Daimler|Porsche) for [0-9] Dollar/i)
[15:34:45] <no_gravity> hexnewbie: The match nr 1 is the brand. Nice. But the case is usually wrong. Not so nice.
[15:35:38] <obiwahn> Changed in version 3.7: Dictionary order is guaranteed to be insertion order. ^^
[15:36:26] <no_gravity> hexnewbie: I often have regular expressions like these. Often the user interface allows the user to create their own.
[15:36:37] <hexnewbie> no_gravity: Yeah, true; it will be difficult to split *that* into literals. My use of splitting regex into literals and regexes has been more... limited in scope (i.e. mine was aimed at doing glob.glob() with regex)
[15:36:41] <jinsun> obiwahn: yup they are ordered, except that when comparing dictionaries, the order doesn't matter
[15:36:53] <no_gravity> hexnewbie: All great. Except users are often dissatisfied that they cannot force the case of the matches.
[15:37:07] *** Quits: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[15:37:29] <bjs> obiwahn: is that you answering your own question or are you questioning the wording
[15:38:32] <no_gravity> So I *might* write my own regex dialect that supports it.
[15:38:35] <obiwahn> i just thought wtf why not by key (rb-tree or somehting like that) but then it might be troublesome to enforce < for all possible types so it would destroy the ease of use :)
[15:39:19] <obiwahn> i found the answer after asking and I should not have asked ... sorry.
[15:40:40] <hexnewbie> no_gravity: Well, fork one that exists. Perhaps the regex module for Python.
[15:40:46] *** Quits: Wulf (~Wulf@user/wulf) (Read error: Connection reset by peer)
[15:40:52] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 245 seconds)
[15:40:58] <no_gravity> hexnewbie: I would build on top of re.
[15:41:02] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[15:41:21] *** Joins: Wulf (~Wulf@user/wulf)
[15:42:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[15:42:54] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 260 seconds)
[15:43:23] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[15:43:46] <no_gravity> hexnewbie: Does re give you the part of the regex responsible for the match?
[15:44:03] <no_gravity> That would help a ton to write my re++.
[15:44:15] *** Joins: fikran (~fikran@user/fikran)
[15:44:29] <rendar> bjs, uhm, why did you say before that Exception
[15:44:38] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[15:45:00] <rendar> bjs, uhm, why did you say before that Exception makes cltr+c to be caught, while BaseException doesn't?
[15:45:22] *** Joins: mindraj (~mindraj@user/mindraj)
[15:45:42] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[15:46:05] <hexnewbie> no_gravity: Neither ‘re’ nor ‘regex’ seem to do that.
[15:46:16] <no_gravity> hexnewbie: I see. Too bad.
[15:48:21] <nedbat> no_gravity: i missed the start of the discussion: what do you need that re doesn't do?
[15:49:06] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Remote host closed the connection)
[15:49:12] <no_gravity> nedbat: Consider this: brand = data.match(/(?:I bought )?a (?:new|old )?(BMW|Daimler|Porsche) for [0-9]+ Dollars/i)
[15:49:15] <jinsun> rendar: Ctrl+C raises KeyboardInterrupt which is not a subclass of Exception
[15:49:28] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[15:49:30] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[15:49:44] <rendar> why?
[15:49:50] <no_gravity> nedbat: The match nr 1 is the brand. Nice. But the case is usually wrong. Not so nice.
[15:50:01] <no_gravity> nedbat: I often have regular expressions like these. Often the user interface allows the user to create their own.
[15:50:11] <nedbat> no_gravity: what do you mean "the case is wrong
[15:50:13] <nedbat> ?
[15:50:21] <no_gravity> nedbat: "bmw" instead of "BMW".
[15:50:23] <jinsun> rendar: so Ctrl+C works even if you catch Exception
[15:50:40] <rendar> jinsun, ok, clear, thanks
[15:50:42] <no_gravity> nedbat: If the regex engine would tell me which part of the regex matched, I could do something about it.
[15:50:59] <no_gravity> nedbat: Like "if the matching part is just chars, use the case of that part".
[15:51:10] *** Joins: PCatinean (~pcatinean@188.25.31.129)
[15:51:21] <nedbat> no_gravity: so you want case insensitivity, but not for the brand?
[15:51:36] <PCatinean> Nice to see so many people moving to Libera :)
[15:51:36] *** Quits: Affliction (affliction@user/affliction) (Remote host closed the connection)
[15:51:37] <jinsun> rendar: but if you catch BaseException (which you shouldn't do normally) then you catch that KeyboardInterrupt also and it doesn't work
[15:51:52] <nedbat> PCatinean: is anyone still on freenode?
[15:51:58] *** Joins: Affliction (affliction@user/affliction)
[15:52:07] <no_gravity> nedbat: I want case insensitivity for the match. But afterwards, the match should be converted to the case of the regex.
[15:52:13] *** Joins: lethu (~lethu@user/lethu)
[15:52:17] <PCatinean> nedbat, very few, mostly just to direct people here. I found out what was happening from your tweets though :)
[15:52:27] <nedbat> PCatinean: :)
[15:53:31] <nedbat> no_gravity: I see. You might be able to take the matched word, find it lowercased in the lowercased pattern, then map back to the original pattern
[15:54:01] <no_gravity> nedbat: Yes. But that would have some issues.
[15:54:08] <nedbat> no_gravity: what issues?
[15:54:21] <bjs> rendar: because KeyboardInterrupt inherits from BaseException not Exception
[15:54:22] *** Joins: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it)
[15:54:33] <bjs> rendar: BaseExcetpion is broadly "the stuff you usually don't intend to catch"
[15:54:41] <rendar> ok, i see now
[15:55:15] <no_gravity> nedbat: Like matching "hello world" against "(?:world)?(World)" would make it lowercase instead of uppercase.
[15:55:48] <nedbat> no_gravity: ok, but in that case, how do you know which was meant?
[15:55:58] <no_gravity> nedbat: The regex engine knows.
[15:56:33] *** Joins: int3l (~int3l@78-83-124-208.spectrumnet.bg)
[15:56:44] <no_gravity> nedbat: That is exactly the problem. That I don't know :)
[15:56:54] *** Joins: x28girl (~x28girl@181.46.32.25)
[15:57:05] <bjs> I think you should stop using the word "match" really
[15:57:09] <kungp> am i supposed to use the same threading.Lock() instance in all my threads or does it not matter?
[15:57:25] <bjs> kungp: yes you need to use the same instance in each thread otherwise the lock isn't doing anything
[15:57:25] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:58:04] <kungp> ok! so i should pass a "global" lock instance when instantiating a thread class
[15:58:14] <nedbat> kungp: what is the lock for?
[15:58:51] <kungp> i have 2 different threads communicating with different hardware, but they need to share a dict
[15:59:02] <nedbat> kungp: what are they doing with the dict?
[15:59:41] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:59:53] <kungp> i use the dict as a collection of all the data from the units, and they read and write it constantly
[16:00:12] <nedbat> kungp: ok, you should use a lock that you get the same way you get the dict.
[16:01:05] <kungp> now i just pass the dict from the main program when instantiating both objects
[16:01:17] <no_gravity> nedbat: Consider this: https://www.online-python.com/uehVWg6AEx
[16:01:19] <kungp> feels like maybe it's not the best way but should work no?
[16:01:21] *** Quits: grys (~quassel@botters/gry) (Ping timeout: 268 seconds)
[16:01:35] <bjs> kungp: yes, you should have 1 lock that is shared, just like how the dict is shared
[16:01:36] <no_gravity> nedbat: We find what BMWs crash into :). But how do we get the case right?
[16:01:48] <kungp> bjs: great, thank you :)
[16:05:03] <bjs> no_gravity: a "match" is just that, the part of the source it matched against.  It sounds like you want something more sophisticated that could transform the input somehow depending on the regex
[16:05:13] <bjs> no_gravity: I mean a pair of re.sub+re.search would work
[16:05:16] <nedbat> no_gravity: yup, looks like you will have to at least parse out the groups from the pattern.
[16:06:09] <no_gravity> bjs: Well, the input will always be the regex. So I might write my own regex extension that does the case magic.
[16:06:27] <bjs> no_gravity: well the input to be matched against here is the 'txt' string
[16:06:36] *** Joins: LucaTM (~LucaTM@user/lucatm)
[16:06:46] <no_gravity> bjs: In my case, the regex is also user input.
[16:07:09] <no_gravity> bjs: My users say "Hey, tell me what BMWs crash into: (?i)bmw hits a (BMW|Porsche|VW)"
[16:07:27] <no_gravity> Everything works great except for the case of the result.
[16:07:34] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:08:03] <bjs> no_gravity: is it only the grouped stuff (the stuff in parens) you want to do the case transforming on?
[16:08:04] <jinsun> so you need a regex to parse the regex first
[16:08:18] <no_gravity> bjs: The regular expressions usually are more complex.
[16:09:06] <no_gravity> bjs: But yes, the ones where users would love to preserve case usually have groups like (Some|Thing|Or|Other).
[16:09:20] <bjs> no_gravity: well it's pretty clear you're going to need a custom thing for this.  I'm not sure if extending the regex library is the way to do it,  probably a simple pass that goes over each group of the match and does a substitution or something similar would be a way to work
[16:09:23] <no_gravity> bjs: But the whole expression is usually much bigger and more complex.
[16:09:45] <no_gravity> bjs: Yeah, but how do I find the part of the regex that matched the group?
[16:09:58] <no_gravity> bjs: The regex engines know of course. But they don't tell me AFAIK.
[16:09:58] <jinsun> in general you don't want to preserve the pattern, otherwise you will just return the regex back to the user if it matched
[16:10:12] <no_gravity> jinsun: https://www.online-python.com/uehVWg6AEx
[16:11:43] <jinsun> yeah I got it, just that your use case it a bit niche, what if the pattern was `.*`, will you give back `.*` or the actual thing that matched
[16:12:08] *** Joins: frost (~frost@59.71.243.104)
[16:12:16] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[16:12:27] <no_gravity> jinsun: If the pattern contained anything but regular characters, I would not change the case.
[16:12:30] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:12:39] <no_gravity> The pattern that cause the match.
[16:12:49] <no_gravity> The subpattern that cause the match.
[16:12:52] <no_gravity> The subpattern that caused the match.
[16:13:01] *** Joins: ravan (~ravan@user/ravan)
[16:13:07] <no_gravity> But it is hard to find that subpattern.
[16:13:16] <no_gravity> Only the regex engine knows. And it does not tell me.
[16:14:19] <bjs> no_gravity: well that's why I said groups, the groups are the stuff between the parens
[16:15:00] <bjs> no_gravity: but it's an unusual thing you want to do, there's probably no "standard" extensions or methods to do it, you'll probably end up with some fairly hacky process that runs over the regex/input pair before you do the match itself
[16:15:34] *** Quits: kib (~kib@user/kib) (Ping timeout: 260 seconds)
[16:15:40] <no_gravity> bjs: Yes, I could do something pragmatic. When the result is "xyz", I could look for "xyz" in all substrings of the regex that are of the form \(([a-z]+\|?)+\). And when it finds one assumes that was the matching group.
[16:15:54] <hogarius> no_gravity: if you lower-case everything in the regex, and substitute proper capitalization only outside the regex, would that work?
[16:16:14] <no_gravity> hogarius: https://www.online-python.com/uehVWg6AEx
[16:16:27] <xaltsc> Hey, does someone know stuff about the configobj library
[16:18:25] <hogarius> no_gravity: yes.  Rewrite line 5 so rthat it is all lower case.
[16:18:31] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[16:19:11] <bjs> hogarius: i'm not sure you're trying to solve the same problem no_gravity is asking about
[16:19:50] <no_gravity> hogarius: That would lose the case information. The case in the regex is the case that should be in the output.
[16:19:59] *** Quits: Affliction (affliction@user/affliction) (Remote host closed the connection)
[16:20:21] *** Joins: Affliction (affliction@user/affliction)
[16:21:15] <no_gravity> Well, lets write a solution so we all can get a feel for how reliable it is.
[16:21:19] <no_gravity> Give me 5 minutes ...
[16:21:27] <hexnewbie> no_gravity: This almost works: https://bpa.st/ASDQ
[16:21:31] <no_gravity> Oh!
[16:22:35] <no_gravity> hexnewbie: Is there a way to copy that without the ">>>" and "..."?
[16:22:44] <no_gravity> hexnewbie: Can you put it on online-python.com or something?
[16:23:48] *** Quits: Samian (~Sami@user/samian) (Quit: Textual IRC Client: www.textualapp.com)
[16:23:51] <jinsun> with vscode you can create multiple cursors at one "column" and delete a characted at that posistion for all lines with one backspace
[16:24:00] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Lost terminal)
[16:24:04] <hexnewbie> no_gravity: Most editors support block selec, but that's the code: https://bpa.st/ZI5Q
[16:25:39] <no_gravity> hexnewbie: Hmm.. that uses "regex" which is not available on online-python.com
[16:26:10] <bjs> no_gravity: i'm sure you can figure out how to import re and use re instead of regex :P
[16:26:23] <no_gravity> It is also not available on my local machine.
[16:27:15] <no_gravity> bjs: Yeah, but it does not work with re: https://www.online-python.com/6eMfzV4vsh
[16:27:30] <hexnewbie> re does not seem to provide partial matches, allowing you to mangle the string until it matches both the case-sensitive and case-insensitive version of the regex. Albeit that's imperfect (as demonstrated), and there could be another string-altering strategy
[16:27:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[16:28:42] *** Joins: wyclif (~wyclif@user/wyclif)
[16:28:56] <no_gravity> hexnewbie: I see. Let me try to cook up a simple version with re ...
[16:30:05] <hexnewbie> That's far harder without ability to touch the parsed regex itself
[16:30:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:34:28] <no_gravity> WIP: https://www.online-python.com/cTM9io0Jh8
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:55] <no_gravity> How do you iterate through the return value of re.search()?
[16:37:20] *** Quits: DerpGusta (~quassel@user/derpgusta) (Ping timeout: 268 seconds)
[16:38:15] <no_gravity> My limited knowledge of Python stops me here: https://www.online-python.com/7XIg0H5j8T
[16:38:22] <hexnewbie> no_gravity: It's, um. It only has a .string attribute with the matched string, matched span returned by .span() (or .start() and .stop()) and the individual bracketed groups as .groups() (not useful if the user used (?:BMW|IBM))
[16:38:49] <no_gravity> Oh, search does not match all? Guess I need findall or something...
[16:40:37] <no_gravity> Ok, how about this? https://www.online-python.com/jWTVonGHBl
[16:40:55] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[16:43:07] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[16:43:37] <no_gravity> Some test cases: https://www.online-python.com/Lm764FQDlT
[16:44:31] <no_gravity> More test cases: https://www.online-python.com/CPmublO9kr
[16:44:49] *** Joins: pro_z (~pro_z@37.214.34.140)
[16:45:17] *** Joins: arinov (~arinov@77.67.147.245)
[16:45:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:47:47] <no_gravity> Ok, one more test case: https://www.online-python.com/893opAeQLc
[16:47:58] <no_gravity> I think I'll give this one a go and see how it performs in real life.
[16:48:46] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[16:48:48] *** Quits: x28girl (~x28girl@181.46.32.25) (Quit: Leaving)
[16:49:21] *** Joins: Jefren (~Jefren@208.104.190.6)
[16:49:49] *** Joins: x28girl (~x28girl@181.46.32.25)
[16:51:04] *** Quits: x28girl (~x28girl@181.46.32.25) (Changing host)
[16:51:04] *** Joins: x28girl (~x28girl@user/x28girl)
[16:51:19] *** Joins: Polyinsecure (~Polyinsec@180.244.128.179)
[16:53:45] *** Joins: x28_girl (~x28girl@user/x28girl)
[16:54:10] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 252 seconds)
[16:54:59] *** Joins: ssbr` (~ssbr@python/site-packages/ssbr)
[16:56:29] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:59:26] *** Quits: Polyinsecure (~Polyinsec@180.244.128.179) (Quit: Leaving)
[16:59:31] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[17:00:47] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[17:05:14] *** Quits: jootoi (~jootoi@130.61.158.197) (Remote host closed the connection)
[17:06:43] *** Joins: cheater (~Username@user/cheater)
[17:07:17] *** Joins: voirnox (~voirnox@0x80.me)
[17:09:54] *** Joins: DerpGusta (~quassel@user/derpgusta)
[17:10:38] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Ping timeout: 260 seconds)
[17:12:46] *** Joins: Roey (~Roey@user/Roey)
[17:12:57] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[17:13:54] *** Joins: srhm (~srhm@user/srhm)
[17:14:19] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[17:17:35] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[17:18:02] *** Joins: zuQe8 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net)
[17:19:27] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[17:22:30] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[17:23:10] *** Joins: gggp (~textual@60.10.194.42)
[17:23:15] *** Quits: txtsd1 (~txtsd@user/txtsd) (Ping timeout: 260 seconds)
[17:23:43] *** Quits: Aye (jeda@hellomouse/dev/cryb.jeda) (Quit: //System Offline//)
[17:24:59] *** Joins: txtsd1 (~txtsd@user/txtsd)
[17:31:18] <Roey> um
[17:31:18] <Roey> hey
[17:31:20] <Roey> In [234]: 47.30 + 138.18
[17:31:20] <Roey> Out[234]: 185.48000000000002
[17:31:28] <bjs> Roey: hi
[17:31:29] <Roey> what the hell is that .000000000002????
[17:31:32] <Roey> bjs: hi!!
[17:31:34] <bjs> Roey: it's floating point
[17:31:36] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Ping timeout: 268 seconds)
[17:31:48] <Roey> like, I know that FLOP operations are imprecise like that, but /damn/
[17:31:48] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[17:31:59] <Yhg1s> Roey: see chapter 15 of the tutorial at docs.python.org/tutorial
[17:32:06] <Roey> Yhg1s: thanks
[17:32:09] <bjs> Roey: damn?
[17:32:48] <Roey> bjs: yeah, I did not expect it to be that imprecise for adding digits of only hundredths precision
[17:33:34] <Yhg1s> Roey: well, you know how 1/3 can't be represented exactly in decimal, right?
[17:33:47] <bjs> Roey: print(0.1 + 0.2)  :)
[17:33:53] <Roey> *two significant digits
[17:34:00] <Roey> Yhg1s: I'm very very well aware of this
[17:34:00] <Roey> yes
[17:34:04] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 268 seconds)
[17:34:26] <bjs> Roey: same goes for 1/10 cannot be represented exactly in binary
[17:34:34] <Roey> aye
[17:34:37] <Roey> In [235]: print(0.1 + 0.2)
[17:34:37] <Roey> 0.30000000000000004
[17:34:38] <Roey> wow.
[17:34:50] <Yhg1s> Roey: well, neither 47.30 nor 138.18 can be represented exactly in binary.
[17:34:55] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[17:35:00] <Roey> I man this is not a big deal for me as I initially thought, as I only care about two significant digits here anyway
[17:35:13] <bjs> Roey: well like I said 0.1 doesn't really exist in binary, it's inexact
[17:35:25] <bjs> so 0.1+something is gonna lose precision
[17:36:12] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[17:36:22] <Roey> aye
[17:39:49] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 252 seconds)
[17:40:44] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be) (Ping timeout: 250 seconds)
[17:42:45] *** Joins: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net)
[17:45:35] *** Joins: jootoi (~jootoi@130.61.158.197)
[17:46:18] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[17:46:55] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[17:47:05] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[17:49:05] *** Joins: gggp (~textual@60.10.194.42)
[17:51:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[17:53:37] *** Joins: fikran (~fikran@user/fikran)
[17:54:04] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Ping timeout: 252 seconds)
[17:57:43] *** Quits: jootoi (~jootoi@130.61.158.197) (Quit: ZNC 1.8.2 - https://znc.in)
[17:59:02] *** Joins: jootoi (~jootoi@130.61.158.197)
[18:00:36] *** Parts: keir (~keir@user/keir) ()
[18:06:27] <Payam> what intellisense plugin do you g uys use? Kite?
[18:07:34] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:08:36] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 268 seconds)
[18:10:33] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[18:11:02] <Payam> Should I use Kite or does it take lots memory and cpu?
[18:11:15] *** Joins: Macuser (~Macuser@216.30.159.201)
[18:11:48] *** Quits: int3l (~int3l@78-83-124-208.spectrumnet.bg) (Quit: Bella Chao)
[18:12:03] *** Joins: raxor2k (~raxor2k@78.158.228.175)
[18:12:28] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[18:12:57] *** Joins: teut (~teut@122.162.88.202)
[18:13:11] *** Joins: digilink (~digilink@user/digilink)
[18:16:26] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be)
[18:17:01] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:17:41] *** Joins: manti7 (~manti7@176.10.104.94)
[18:17:50] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:a484:fed4:af15:fa66) (Quit: Some random bits)
[18:19:50] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 260 seconds)
[18:22:16] *** Quits: arinov (~arinov@77.67.147.245) (Ping timeout: 252 seconds)
[18:24:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:28:11] *** Joins: cdown (~cdown@194.207.141.245)
[18:31:30] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-80d8-d4ba-58c2-1b2b.res6.spectrum.com)
[18:32:02] *** Joins: mpan (~mysql@user/mpan)
[18:32:04] *** Parts: mpan (~mysql@user/mpan) ()
[18:36:17] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 265 seconds)
[18:37:05] *** Joins: iflema (~ian@user/iflema)
[18:38:10] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[18:38:50] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[18:38:59] *** Joins: cheater (~Username@user/cheater)
[18:39:17] *** Joins: wyclif (~wyclif@user/wyclif)
[18:39:24] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[18:41:52] *** Joins: dez (uid92154@user/dez)
[18:47:32] *** Quits: mindraj (~mindraj@user/mindraj) (Quit: Goodbye, have a great day/evening!)
[18:54:25] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be) (Read error: Connection reset by peer)
[18:57:23] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be)
[19:00:59] *** Quits: x28_girl (~x28girl@user/x28girl) (Quit: Leaving)
[19:03:13] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[19:03:29] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 268 seconds)
[19:03:58] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[19:04:02] *** Joins: blackout69 (~blackout6@mob-2-43-182-94.net.vodafone.it)
[19:07:00] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[19:08:11] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[19:08:13] *** Joins: Rikusho (~Rikusho@2601:2c1:c200:1d00:c9e3:65f8:be82:77c0)
[19:08:46] <Rikusho> is there a code line for mirroring my laptop screen to an LCD screen on Pi4 GPIO board?
[19:09:09] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[19:10:24] *** Joins: gggp (~textual@60.10.194.42)
[19:10:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[19:10:54] *** Joins: jazzy (~jaziz@2600:380:8478:544b:f0dd:f48c:6ca4:b0be)
[19:12:00] <BtbN> uhm, that needs a massive complex program, and will probably suck in terms of performance
[19:12:14] <altendky> and could mean many different things
[19:12:16] *** Joins: oldguy (~oldguy@user/oldguy)
[19:12:30] <Rikusho> lol i figured
[19:13:49] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[19:14:29] <Rikusho> ok time for another dumb question how do i copy code from my putty client to paste into the chat here
[19:14:35] <teut> would it be take a screenshot of the laptop and setup a socket connection?
[19:15:36] <Rikusho> the real reason i asked is im running a program called warden terminal and when i change the output from tty which is my laptop monitor to tty1 which is the GPIO lcd i cant control whats happening on the lcd from my laptop anymore
[19:16:23] <Rikusho> and when i sudo nano into my config.ini to auto scroll = false i keeps changing back to true when i boot the program
[19:17:48] <Rikusho> '
[19:17:48] <Rikusho> [MAIN]
[19:17:49] <Rikusho> refresh = 15
[19:17:49] <Rikusho> price_refresh_interval = 15
[19:17:50] <Rikusho> welcome_sound = on
[19:17:50] <Rikusho> welcome_text = “Good evening, Dave. Everything is running smoothly. And you?”
[19:17:50] *** litharge sets mode: +q $a:Rikusho
[19:17:53] <grym> Rikusho: copy to https://bpa.st/+python
[19:18:02] <grym> Rikusho: and send us the link to the resulting paste URL
[19:18:21] *** litharge sets mode: -q $a:Rikusho
[19:18:36] <Rikusho> https://github.com/pxsocs/warden_terminal/blob/master/README.md
[19:18:37] <grym> Roey: consequences of floats being a finite set :)
[19:19:20] <jinsun> if it is config.ini use https://bpa.st/+ini
[19:19:56] <grym> or if both, bpa.st/+ini+python
[19:19:57] <grym> :)
[19:19:58] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Remote host closed the connection)
[19:20:06] <Rikusho> https://bpa.st/CTWQ
[19:20:46] <Roey> grym: yeah, yeah :)
[19:20:50] <Rikusho> i talked to creator of code and ive been looking in the dashboard.py too should i use bpa to paste the are of the code he told me to change as well
[19:20:51] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[19:21:05] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Ping timeout: 260 seconds)
[19:24:03] <Rikusho> @grym did i do that bpa link correct?
[19:24:30] <grym> Rikusho: yep
[19:24:44] <Rikusho> ok cool
[19:25:04] <grym> Rikusho: i gave you the wrong formatter link; had you selected INI instead it would render with different colors https://bpa.st/E2AA
[19:25:04] <Rikusho> so is there a way i can get that auto scroll to always force to be false
[19:25:17] <grym> Rikusho: change it to False ?
[19:25:52] <Rikusho> i did but it still auto scrolls
[19:26:05] <grym> ok, so let's see your code then
[19:26:12] <Rikusho> even when i ctrl x out and save change
[19:27:11] <Rikusho> want me to paste the whole dashboard.py into the bpa link
[19:27:49] <jinsun> this dashboard.py https://github.com/pxsocs/warden_terminal/blob/master/dashboard.py ?
[19:28:04] <Rikusho> lol thats the one
[19:28:18] <jinsun> if you have a github link then no need to paste on bpaste
[19:29:01] <Rikusho> so at line 269 i deleted all widgets except large_price
[19:29:12] <Rikusho> so that should be the only widget to display
[19:29:19] <Rikusho> but auto scroll is still happening
[19:29:29] <Rikusho> and im still seeing the other widgets
[19:29:39] *** Joins: wyclif (~wyclif@user/wyclif)
[19:30:35] *** Joins: matsaman (~matsaman@user/matsaman)
[19:30:57] <grym>  you could fiddle things in load_config, perhaps
[19:32:31] <Rikusho> like what @grym?
[19:32:58] <grym> just set the flag to false
[19:33:11] <grym> or check/print the config to make sure it's what you think it is
[19:33:18] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[19:33:36] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[19:33:40] <Rikusho> ok i wont lie im still a python noob so youll have to explain it bit more lol
[19:33:44] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:34:50] <Rikusho> how would i set flag to false in relation to the load config
[19:34:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[19:35:09] *** Joins: wyclif (~wyclif@user/wyclif)
[19:35:12] <grym> i'd start with printing out the config there, perhaps
[19:35:30] <grym> so you'd edit that function to include a print() of the relevant bits of the config that you want to see
[19:36:55] <Rikusho> ok so add print() to what part of the code?
[19:37:18] <grym> right about here: https://github.com/pxsocs/warden_terminal/blob/master/dashboard.py#L26
[19:37:47] <jinsun> looks like the only place auto_scroll is used is line 513, so you could add there too
[19:38:05] *** Quits: gggp (~textual@60.10.194.42) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:39:02] <Rikusho> jinsun thats where i think its bugging bc im using small_display
[19:39:28] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[19:40:13] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:40:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:40:33] <Rikusho> @grym so id basically do this? Print()CONFIG.read(config_file)
[19:40:39] *** Joins: wyclif (~wyclif@user/wyclif)
[19:41:58] <grym> not quite, no
[19:42:04] <Rikusho> i figured lol
[19:43:19] <jinsun> it should be print, all lowercase, and it should be after the read, and pass the CONFIG to it, so print(CONFIG), (not sure if the repr is good for configparser or not)
[19:45:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[19:46:25] <Rikusho> ok so after i do that whats the next step? i dont just run the program im guessing
[19:46:28] *** Joins: wyclif (~wyclif@user/wyclif)
[19:48:36] <Rikusho> running program now shows configparser.configparser object at 0x....
[19:49:17] <jinsun> ok so the configparser object doesn't have good repr as I suspected
[19:50:06] <jinsun> try `print(CONFIG['MAIN'].getboolean('auto_scroll'))`
[19:51:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:52:16] *** Joins: wyclif (~wyclif@user/wyclif)
[19:52:26] <Rikusho> is this put in at line 26 or line 513 jinsun
[19:53:05] <jinsun> after line 26
[19:53:30] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[19:53:36] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[19:53:44] *** Joins: beuys (~beuys@user/beuys)
[19:53:51] <jinsun> at line 513 you can just `print(auto_scroll)` (before the if)
[19:54:31] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[19:55:53] *** beuys is now known as https
[19:56:08] *** https is now known as HTTPwww
[19:56:13] *** HTTPwww is now known as HTTP
[19:56:16] *** Joins: ano (~ano@user/ano)
[19:56:28] *** Quits: HTTP (~beuys@user/beuys) (Client Quit)
[19:57:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[19:57:48] *** Joins: wyclif (~wyclif@user/wyclif)
[19:58:42] *** Joins: Samnzdat (~ambassado@075-141-230-217.res.spectrum.com)
[19:59:04] <Rikusho> it doesnt like the print at line 513
[19:59:18] <Rikusho> lemme retry
[20:00:33] *** Joins: greedom (~greedom@2001:16b8:2eb0:7d00:4d9f:6127:44e2:50f3)
[20:01:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[20:01:31] <Rikusho> so print(auto_scroll) if auto_scroll it doesnt like the syntac
[20:01:40] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 252 seconds)
[20:01:46] *** Joins: Narrat (~omnius@p200300df5f4530f906ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:02:16] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:02:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:02:59] *** Joins: fikran (~fikran@user/fikran)
[20:03:11] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:03:12] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:03:17] *** Joins: wyclif (~wyclif@user/wyclif)
[20:04:14] <Rikusho> y
[20:04:26] <jinsun> did you put them in the same line? if so don't do that, insert a line before the if then put the print there
[20:05:02] <Rikusho> yeah i tried that but now its saying unexpected indent lol
[20:05:36] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[20:05:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:06:06] <Rikusho> ok got it
[20:06:28] <Rikusho> now the word True is showing up when running program
[20:06:46] <Rikusho> one widget has two Trues
[20:06:57] *** Joins: Hackerpcs (~user@user/hackerpcs)
[20:07:44] <jinsun> so auto_scroll is True. but you set it to False in the config?
[20:07:56] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[20:08:08] *** Joins: Fiji (~Fiji@user/fiji)
[20:08:15] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:08:22] <Rikusho> yeah it keeps changing itself back to true and i feel like it has to do with the small screen
[20:08:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[20:08:48] *** Joins: wyclif (~wyclif@user/wyclif)
[20:08:55] <Rikusho> small display*
[20:09:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[20:10:23] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[20:11:31] <jinsun> hmm doesn't look like there is anything settinng it to True though
[20:12:01] <jinsun> what happens when you put the print inside the load_config function, line 26?
[20:12:02] <Rikusho> but it indeed still cycles through widgets haha
[20:12:18] <Rikusho> it was showing a true as well i have it in both spots
[20:12:33] *** Quits: rsx (~dummy@ppp-188-174-159-152.dynamic.mnet-online.de) (Ping timeout: 268 seconds)
[20:12:51] <Rikusho> i feel like line 513- 525 is the answer
[20:12:58] <Rikusho> something about the cycle
[20:13:24] <jinsun> try `print(config_file)` as well in line 26, see if it is the config file that you are modifying
[20:13:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[20:14:18] <Rikusho> so delete the get boolean argument or just add the print
[20:14:19] *** Joins: wyclif (~wyclif@user/wyclif)
[20:15:08] <jinsun> just add the print
[20:15:19] *** Quits: teut (~teut@122.162.88.202) (Quit: Client closed)
[20:16:44] *** Joins: georgios (~georgios@user/georgios)
[20:17:07] <Rikusho> shows true again
[20:17:39] <Rikusho> shows warden_terminal/config.ini
[20:17:56] <jinsun> so is the config file where you set False?
[20:18:04] <jinsun> *is that the
[20:18:19] *** Quits: hexed (~k@xolan.net) (Quit: Lost terminal)
[20:18:21] <Rikusho> yep and i sudo into it and checked before running and it was set to falase
[20:18:24] <Rikusho> now its true again
[20:18:39] <Rikusho> it will stay false if i make terminal screen large
[20:18:41] *** Joins: zebrag (~chris@user/zebrag)
[20:18:52] <Rikusho> but when program detects small screen it sets it back to true
[20:19:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:19:48] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[20:19:49] *** Joins: wyclif (~wyclif@user/wyclif)
[20:19:53] <jinsun> okay so got the obvious problem out of the way, now no idea how small screen sets it to True
[20:20:21] *** Joins: rsx (~dummy@ppp-188-174-142-215.dynamic.mnet-online.de)
[20:20:34] *** Quits: greedom (~greedom@2001:16b8:2eb0:7d00:4d9f:6127:44e2:50f3) (Remote host closed the connection)
[20:22:56] <Rikusho> what about line 113
[20:23:19] *** Quits: monchi (~monchi@ec2-3-0-148-36.ap-southeast-1.compute.amazonaws.com) (Remote host closed the connection)
[20:24:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:24:58] <jinsun> well there are two places where it toggles auto_scroll, line 357 and 360, but those are for handling key presses, are you pressing S for some reason?
[20:25:20] *** Joins: wyclif (~wyclif@user/wyclif)
[20:25:38] *** Joins: MikZyth (~MikZyth@188.65.242.140)
[20:26:32] <Rikusho> nope and i dont have a way to when i push program to tty1
[20:26:44] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[20:27:25] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[20:28:34] <Rikusho> if i could control the lcd but plugging a keyboard into pi and it working i could just use arrow keys and such
[20:28:45] <Rikusho> but keyboard isnt responsive with umbrel node
[20:28:55] *** Joins: Fiji_ (~Fiji@user/fiji)
[20:30:06] *** Joins: adder (~adder@user/adder)
[20:30:07] *** Quits: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net) (Quit: WeeChat 3.2.1)
[20:30:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:30:50] *** Joins: wyclif (~wyclif@user/wyclif)
[20:31:31] <raxor2k> can someone help here? im trying to run a loop to check if a number between 1 to 6 are in the dict, and if not: print it.. but someone is strange here: https://bpa.st/NYEA
[20:32:45] *** Joins: teut (~teut@122.162.88.202)
[20:33:10] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 260 seconds)
[20:35:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:35:55] <raxor2k> i mean like i could for instance have multiple if checks to check for 0, 1,2 etc, but surely there is an easier way
[20:36:18] *** Parts: teut (~teut@122.162.88.202) ()
[20:36:21] *** Joins: wyclif (~wyclif@user/wyclif)
[20:37:27] *** Quits: Gerula (~Gerula@user/gerula) (Read error: Connection reset by peer)
[20:38:16] *** Quits: PCatinean (~pcatinean@188.25.31.129) (Quit: Leaving)
[20:38:26] *** Joins: cdown (~cdown@194.207.141.245)
[20:38:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:38:49] <jinsun> Rikusho: still can't see how small_diplay will make auto_scroll True, but you can just try setting it to False before the if in line 513, `auto_scroll = True`
[20:38:51] *** Joins: paul424 (~tom@ip-31-0-126-113.multi.internet.cyfrowypolsat.pl)
[20:39:10] <jinsun> Rikusho: oops `auto_scroll = False`
[20:40:17] *** Joins: greedom (~greedom@2001:16b8:2eb0:7d00:4d9f:6127:44e2:50f3)
[20:40:22] *** Joins: fikran (~fikran@user/fikran)
[20:40:24] *** Joins: Fiji- (~Fiji@user/fiji)
[20:40:36] <Rikusho> that might have worked lol
[20:40:51] <Rikusho> still shows two trues
[20:40:59] *** Quits: oldguy (~oldguy@user/oldguy) (Quit: Leaving)
[20:41:04] <Rikusho> but its displaying the correct widget
[20:41:07] <Rikusho> and its not scrolling
[20:41:12] <Rikusho> final test is to push to tty1
[20:41:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:41:54] *** Joins: wyclif (~wyclif@user/wyclif)
[20:42:26] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:42:38] <Rikusho> That did it! its staying on the correct widget and not scrolling
[20:43:40] *** Joins: kib (~kib@user/kib)
[20:43:46] <jinsun> Rikusho: I think I see now how small_screen set it to True, it is here https://github.com/pxsocs/warden_terminal/blob/master/node_warden.py#L400
[20:43:49] <Rikusho> still showing trues but its doing what i want it to haha
[20:44:09] <Rikusho> oh so should set that to false
[20:44:20] <jinsun> you are running node_warden.py right?
[20:44:24] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[20:44:36] <Rikusho> yep. i type python3 node_warden.py
[20:44:45] <jinsun> ya so try changing the line 400 there
[20:44:53] <jinsun> 'False' instead of 'True'
[20:45:13] <Rikusho> ok, ill let the owner of the script know thats the line thats being a pain
[20:45:51] <jinsun> or just comment out that line and see if your config setting works
[20:46:35] <Rikusho> ok
[20:47:41] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[20:48:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:49:29] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[20:50:44] <Rikusho> 65
[20:51:12] <Rikusho> oops haha
[20:52:22] <Rikusho> yep editing the node.py did the trick
[20:52:28] <Rikusho> thanks again Jinsun!!!
[20:55:35] *** Joins: wyclif (~wyclif@user/wyclif)
[20:56:40] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 240 seconds)
[20:56:51] <paul424> "A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead. For instance, if you have a function that formats some data from a file object, you can define a class with methods read() and readline() that get the data from a string buffer instead, and pass it as an argument. " This is the duck typing right ?
[20:57:08] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:57:18] <bjs> paul424: yes
[20:57:40] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[20:58:10] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:58:15] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:59:20] *** Quits: dude-x_ (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[20:59:36] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[21:00:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:01:07] *** Joins: wyclif (~wyclif@user/wyclif)
[21:01:11] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:01:37] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[21:05:51] <energizer> does duck typing say "a class that emulates the methods of that data type instead" or "a class that satisfies that interface"
[21:05:53] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[21:06:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:06:31] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[21:06:39] *** Joins: wyclif (~wyclif@user/wyclif)
[21:07:50] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[21:07:51] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[21:08:55] *** Joins: brabrax (~brabrax@user/brabrax)
[21:09:07] *** Joins: califax (~califax@user/califx)
[21:09:58] <raxor2k> bjs: no suggestions ?
[21:10:15] <bjs> raxor2k: sorry
[21:10:34] <bjs> raxor2k: your code is weird, you're trying to use "day_number" outside of the loop
[21:11:25] <raxor2k> bjs: ok, but you understand WHAT i wanna do, right ?'
[21:11:39] <bjs> raxor2k: i guess,  why don't you do the 1-6 loop inside the other loop
[21:11:45] <bjs> like for each task, for each i ..
[21:14:02] *** Quits: Rikusho (~Rikusho@2601:2c1:c200:1d00:c9e3:65f8:be82:77c0) (Quit: Client closed)
[21:14:32] <raxor2k> bjs: you surely didnt mean like this? https://bpa.st/PWKA
[21:14:44] <bjs> raxor2k: what exactly did you want to do?
[21:14:50] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:baf8:945:fb18:1cfa) (Ping timeout: 260 seconds)
[21:15:02] <raxor2k> bjs: print me the days that are NOT in tasks
[21:15:09] <bjs> raxor2k: so your loops are backwards then
[21:15:14] <bjs> you want for each i, to see if there's a task
[21:15:32] <bjs> uh, you used `i` for both loops sorry.  for each day
[21:16:35] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[21:16:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:16:54] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:17:28] <raxor2k> bjs: this then? https://bpa.st/SAEA
[21:17:37] *** Joins: wyclif (~wyclif@user/wyclif)
[21:17:44] <bjs> raxor2k: no, you're using "task_days" outside of the loop. That cannot be right
[21:18:03] <bjs> raxor2k: you're allowed to have nested loops
[21:18:30] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[21:18:56] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 268 seconds)
[21:19:13] <raxor2k> bjs: the previous paste did not have it outside the loop
[21:19:17] <raxor2k> anyways
[21:19:24] <bjs> raxor2k: https://bpa.st/SAEA  this one did
[21:19:26] <raxor2k> i just do the old boring way adding the multiple iffs
[21:19:50] <raxor2k> bjs: ok, but not this: https://bpa.st/Z36Q
[21:19:53] <raxor2k> it is still wrong
[21:19:53] <bjs> raxor2k: just use loops, `for day in range(0, 7): for task in program_tasks: ...` like nested
[21:20:23] <bjs> raxor2k: no, but we said, that one the loops are backwards. Why not loop over each day 0..7 and then check each task and if no task has that day, then print it out
[21:20:30] <paul424> sum(i*i for i in range(10))   shouldn't this one use two nested parenthesis instead of one pair : one for function call , and one for generator expression ?
[21:21:00] <bjs> paul424: it should,  but Python has a fancy special-case in the syntax to let you write it without it
[21:21:01] *** Quits: greedom (~greedom@2001:16b8:2eb0:7d00:4d9f:6127:44e2:50f3) (Remote host closed the connection)
[21:21:02] <ChrisWarrick> paul424: generator expressions that are the only argument of a function don’t require parentheses around them
[21:21:12] <paul424> oki , that's nice
[21:21:15] <bjs> paul424: specifically, if the generator expression is the only argument, you don't need the extra parens.
[21:22:14] <raxor2k> bjs: forgot to tell that i also tried this, but still the same : https://bpa.st/UKSA
[21:22:22] *** Joins: trace987 (~trace@dynamic-002-247-249-191.2.247.pool.telefonica.de)
[21:22:24] <raxor2k> no worries, i just add multiple if sentences and its done
[21:22:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:22:36] <bjs> raxor2k: well you're gonna have to have a boolean and keep track of whether you've seen the day before etc
[21:23:07] *** Joins: wyclif (~wyclif@user/wyclif)
[21:23:08] <bjs> raxor2k: when you see a task with that day, you set the boolean to true. if after the loop the boolean is still false ... etc, like when you first learned programming
[21:23:39] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:23:43] <paul424> unique_words = set(word for line in page  for word in line.split()) remember doing that in bash and it was much more complicated :D
[21:24:29] <bjs> raxor2k: something like https://bpa.st/4LNA
[21:24:53] <raxor2k> bjs: thanks for advice, but i will not do that
[21:24:57] <bjs> raxor2k: why?
[21:25:14] <raxor2k> i cant just add to lists, and then check if value in list
[21:25:17] <raxor2k> much easier
[21:25:36] <raxor2k> once finished i can show
[21:25:49] *** Joins: c10l0 (~c10l@user/c10l)
[21:26:06] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:263e:683b:dfac:b5c1)
[21:26:33] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[21:26:42] *** Joins: roarwe (~roarwe@95.67.117.102)
[21:27:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[21:28:20] <raxor2k> bjs: i rather do this instead: https://bpa.st/ZAQQ   much easier
[21:28:29] <bjs> raxor2k: that also works
[21:28:40] *** Joins: wyclif (~wyclif@user/wyclif)
[21:28:48] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 268 seconds)
[21:28:48] *** c10l0 is now known as c10l
[21:30:48] <raxor2k> bjs: i just find it strange how it works so easily with a list, but not with a dict
[21:30:50] <raxor2k> oh.. wait ..
[21:30:59] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:e53e:bff9:da2:4604)
[21:31:10] <bjs> raxor2k: using a dict also works
[21:31:13] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:31:15] *** Quits: gitly (~gitly@85.255.235.31) (Ping timeout: 265 seconds)
[21:31:44] <aac> hey. How do i make a list very big, with odd and primes at the same time? do i need to code it myself ?? what is the best performance instead?
[21:31:57] *** Quits: mumixam (~m@user/mumixam) (Remote host closed the connection)
[21:32:05] <aac> like odd = [1,3,5] prime = [1,3]  lst=  [1,2,3,5]
[21:32:20] <aac> this is a very big list :)
[21:32:29] <bjs> aac: how big do you want it to be?
[21:32:32] <aac> a lot
[21:32:33] <aac> :)
[21:32:34] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[21:32:36] <bjs> aac: a lot like?
[21:32:45] <aac> like ...what are t he units?
[21:32:52] *** Joins: thiras (~thiras@user/thiras)
[21:32:52] <aac> 10 ª 200
[21:32:54] <bjs> aac: well how many numbers?
[21:32:59] *** Joins: gitly (~gitly@85.255.237.208)
[21:33:01] <aac> minimum
[21:33:04] <bjs> aac: also isn't this just [1,2,3...every odd number]
[21:33:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[21:33:14] <aac> hmmm
[21:33:17] <aac> let me think
[21:33:22] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[21:33:23] <bjs> aac: there are no primes which are even above 2
[21:33:32] <aac> cool
[21:33:33] <aac> thks
[21:33:33] <aac> :)
[21:33:36] <aac> a lot better
[21:33:41] <aac> so just odd list
[21:33:45] <aac> cool once again thanks
[21:33:46] *** Joins: mumixam (~m@user/mumixam)
[21:34:10] *** Joins: wyclif (~wyclif@user/wyclif)
[21:34:12] <bjs> aac: but yes, you can make this list with a little loop.
[21:34:19] <bjs> up to however many elements you want
[21:34:29] <aac> is it fast?
[21:34:35] <aac> like the complexity or whatever :)
[21:34:37] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[21:34:44] <bjs> aac: I mean, sure
[21:34:49] <aac> hmmm
[21:34:50] <aac> :D
[21:34:55] *** Quits: raxor2k (~raxor2k@78.158.228.175) ()
[21:35:10] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[21:35:10] <bjs> aac: I feel like there's some context here I should ask about
[21:35:29] <aac> mmm yes probably, what's in your mind
[21:35:58] <aac> like list,set,dicitionaries what is the best performance
[21:36:04] <bjs> aac: ... why do you want this list? and what do you mean by "fast"
[21:36:08] <aac> iterate them i mean
[21:36:24] <aac> im assigning a variable only odd values
[21:36:33] <bjs> aac: they're the same
[21:36:37] <bjs> aac: okay, how many values?
[21:36:44] <bjs> I'm not sure "fast" is going to be the concern here
[21:36:49] <aac> mmm
[21:36:57] <aac> a lot of values dude, like i siad
[21:36:59] <aac> siad
[21:37:00] <aac> siad
[21:37:01] <aac> said
[21:37:17] <bjs> aac: but like, is that like... 10?
[21:37:31] <aac> no not really...at least 2^256
[21:37:43] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Quit: Leaving)
[21:37:46] <aac> :) told you
[21:37:47] <bjs> aac: have you thought about whether your computer has enough memory to store this list
[21:38:02] <aac> nevermind..ill just use one variable, and increment it
[21:38:03] <aac> :)
[21:38:10] <aac> thks
[21:38:10] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:38:11] <bjs> aac: instead of storing a list?
[21:38:16] <bjs> aac: what are you trying to do exactly?
[21:38:57] <aac> well..instead of assigning a value to a odd list, ill assign a variable to odd and incremente it, iteratering thorugh odd numbers
[21:40:21] <hogarius> aac: what are you going to do with the odd numbers?
[21:40:43] <aac> check to see if they match other values
[21:41:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:42:04] *** Joins: wyclif (~wyclif@user/wyclif)
[21:42:33] *** Parts: roarwe (~roarwe@95.67.117.102) (WeeChat 3.2)
[21:42:38] <aac> how would the list affect memory?
[21:42:47] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[21:44:31] <bjs> aac: the list stores all the numbers
[21:44:46] <bjs> aac: how much memory does your computer have? can it store 2^256 different numbers at once?
[21:44:46] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Remote host closed the connection)
[21:44:52] <aac> not really no lol
[21:44:53] <bjs> (the answer is no...)
[21:44:54] <aac> its fast though
[21:45:07] <aac> is the list the faster data structure?
[21:45:11] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[21:45:13] <bjs> aac: lists are fast yes
[21:45:22] <bjs> aac: they're all fast, but you can't make a list with 2^256 odd numbers in it
[21:45:28] <aac> ehheheeheheh
[21:45:31] <aac> got it
[21:45:32] <aac> :D
[21:47:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:47:29] <bjs> aac: your questions are a bit strange,  it's not clear what you want to do with these odd numbers once you have them :)
[21:47:33] *** Joins: wyclif (~wyclif@user/wyclif)
[21:47:36] <bjs> odd numbers are not very interesting
[21:47:55] <aac> im checking divisilibty
[21:47:59] <nedbat> all numbers are interesting. we can prove it.
[21:48:39] <bjs> aac: you can check whether a number is odd without having to check every odd number
[21:49:12] <aac> no no that's not i want. (alreaedy have isOdd function :)))
[21:49:46] <nedbat> aac: the more you can tell us about your situation, the better we can help
[21:50:08] <aac> im already good thks :)
[21:51:14] *** Parts: blackout69 (~blackout6@mob-2-43-182-94.net.vodafone.it) ()
[21:51:36] *** Joins: cyphase (~cyphase@user/cyphase)
[21:52:26] <aac> i wonder if in the future , one could store 2^256 values
[21:52:32] <aac> that would be nice :)))
[21:52:45] <bjs> aac: probably not
[21:52:48] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[21:52:49] <aac> why?
[21:52:58] <aac> on old day, 1k was a prize
[21:53:12] <bjs> aac: maybe we can double the amount we can store each year
[21:53:21] <bjs> but then we'd both be long dead by the time you can store that much
[21:53:36] <aac> eheh true
[21:53:39] <aac> heeheheh
[21:53:46] <aac> cna't imagine that then
[21:54:18] <aac> my computer takes 1 sec to boot...yours?
[21:54:25] *** Quits: Yasumoto (~Yasumoto@136.152.37.118) (Ping timeout: 252 seconds)
[21:55:18] <energizer> aac: what kind of computer is that?
[21:55:53] <aac>    (synth) = Intel Core i3-5000 / i5-5000 / i7-5000 / Core M (Broadwell), 14nm
[21:56:26] <aac>    brand = "Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz"
[21:56:28] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:57:46] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:57:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:58:35] *** Joins: wyclif (~wyclif@user/wyclif)
[21:58:52] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[21:59:15] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[21:59:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:01:29] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[22:01:33] *** Joins: Y37I (~yeti@d75-156-114-156.bchsia.telus.net)
[22:01:57] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Client Quit)
[22:02:03] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[22:02:41] *** Joins: greedom (~greedom@2001:16b8:2eb0:7d00:4d9f:6127:44e2:50f3)
[22:03:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:04:06] *** Joins: wyclif (~wyclif@user/wyclif)
[22:05:42] *** Parts: Y37I (~yeti@d75-156-114-156.bchsia.telus.net) ()
[22:06:40] <luke-jr> Is there a way to turn off the auto-indent in the Python console so I can paste large blocks of code in sanely?
[22:07:24] <energizer> luke-jr: use iPython
[22:07:43] <InPhase> Yeah, that always works smoothly for me in ipython.
[22:07:58] <InPhase> Plus, up arrow then lets you edit a block of pasted code.
[22:08:31] <luke-jr> MicroPython is my only option in this case :P
[22:08:36] <InPhase> And you can turn on vim keybindings upon hitting escape for that editing, which is a bonus.
[22:08:51] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[22:09:06] <KirkMcDonald> Also: What's "the Python console"? I'm pretty sure the standard interactive interpreter doesn't do any sort of auto-indenting.
[22:10:10] <InPhase> luke-jr: I've not used "MicroPython", but perhaps if you're stuck in a bad non-standard repl, you should small test files more for this purpose rather than so much repl work.
[22:10:14] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 260 seconds)
[22:10:30] <luke-jr> InPhase: test files are a big pain
[22:10:54] <luke-jr> InPhase: have to upload them, reboot, import :/
[22:11:03] <InPhase> luke-jr: It depends on the task.  Small test files are actually easier for iterative testing.
[22:11:19] <InPhase> luke-jr: You cannot edit directly on your embedded device?
[22:11:37] <luke-jr> no
[22:11:46] <InPhase> luke-jr: But it lets you run micropython directly?
[22:11:56] <luke-jr> MicroPython is a bare metal implementation
[22:12:23] <luke-jr> it runs directly on the ESP32 chip, yes
[22:13:09] <InPhase> luke-jr: Perhaps there is a simple editor implemented in Python which could work?
[22:13:30] <energizer> pyvim
[22:13:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:14:29] <InPhase> luke-jr: There is no guarantee a good soluion exists though.  I did some embedded work, and sometimes you're just stuck working through a tunnel in a painful manner, and you suffer through it.  I'm just trying to suggest some options.
[22:15:06] *** Joins: wyclif (~wyclif@user/wyclif)
[22:15:13] <nedbat> luke-jr: I've used this in the python console:  def paste(): exec(textwrap.dedent(sys.stdin.read()), globals())
[22:15:21] <InPhase> pyvim might be interesting, if it works and fits.
[22:15:21] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[22:15:25] *** Joins: Y37I (~yeti@d75-156-114-156.bchsia.telus.net)
[22:16:02] *** Joins: Yasumoto (~Yasumoto@136.152.37.118)
[22:16:07] <energizer> luke-jr: i'd go to some effort to avoid being in that situation if possible https://thume.ca/2020/05/17/pipes-kill-productivity/
[22:19:11] *** Joins: cdown (~cdown@194.207.141.245)
[22:19:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[22:20:37] *** Joins: wyclif (~wyclif@user/wyclif)
[22:21:03] <luke-jr> I'm trying to control a network switch chip using I2C. Not very possible in this case. :p
[22:21:45] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[22:24:18] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[22:25:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:25:52] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Remote host closed the connection)
[22:26:08] *** Joins: wyclif (~wyclif@user/wyclif)
[22:26:52] *** Quits: trace987 (~trace@dynamic-002-247-249-191.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[22:27:37] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[22:30:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:31:25] *** Joins: trace987 (~trace@dynamic-002-247-249-191.2.247.pool.telefonica.de)
[22:31:39] *** Joins: wyclif (~wyclif@user/wyclif)
[22:34:58] *** Quits: emerent (~quassel@p200300cd57485502ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[22:35:30] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[22:35:48] *** Joins: emerent (~quassel@p200300cd574855c0ba27ebfffed28a59.dip0.t-ipconnect.de)
[22:36:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:37:11] *** Joins: wyclif (~wyclif@user/wyclif)
[22:38:30] *** Joins: SnoopJ (~snoopj@user/snoopj)
[22:38:40] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[22:39:42] *** Quits: delarge (~chamigo@ctm.linuxers.cl) (Quit: leaving)
[22:42:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:42:41] *** Joins: wyclif (~wyclif@user/wyclif)
[22:44:28] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:44:46] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[22:46:10] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[22:46:43] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 268 seconds)
[22:46:53] <trace987> I have a classfunction and want to set one of its parameter as the type of its class, but I cant
[22:47:21] <bjs> trace987: okay
[22:47:24] *** Joins: nergar (~Nergar@177.225.152.202)
[22:47:37] <bjs> i'm not really sure what you meant by "set" one of the parameters as a type
[22:47:39] <trace987> what can I do
[22:47:44] <trace987> to achieve what I want
[22:48:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[22:48:41] <bjs> trace987: what is it you want to achieve?
[22:48:56] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[22:49:44] *** Joins: fikran (~fikran@user/fikran)
[22:49:55] <KirkMcDonald> trace987: You are talking about type annotations?
[22:50:14] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[22:51:01] *** Joins: Atque (~Atque@user/atque)
[22:51:11] *** Joins: cheater (~Username@user/cheater)
[22:54:10] *** Quits: jazzy (~jaziz@2600:380:8478:544b:f0dd:f48c:6ca4:b0be) (Ping timeout: 240 seconds)
[22:54:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:55:26] *** Joins: wyclif (~wyclif@user/wyclif)
[22:57:39] *** Joins: buttermelted (~buttermel@213-47-29-213.cable.dynamic.surfer.at)
[22:59:13] <buttermelted> hi, i cant install a package with pip, i installed it successfully in the past but now i dont know what to do. i am on arch.
[22:59:18] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[22:59:19] *** Quits: trace987 (~trace@dynamic-002-247-249-191.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[23:00:13] <nedbat> buttermelted: what's going wrong?
[23:00:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:00:57] *** Joins: wyclif (~wyclif@user/wyclif)
[23:01:23] *** Joins: trace987 (~trace@dynamic-002-247-249-191.2.247.pool.telefonica.de)
[23:01:27] <buttermelted> https://pastebin.com/u0xKCbc0
[23:01:47] <trace987> "and want to set one of its parameter as the type of its class"
[23:01:49] <trace987> this is what I want
[23:01:51] <trace987> KirkMcDonald, yes
[23:02:09] <trace987> bjs, the thing I told in the first of both chat messages
[23:02:39] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:02:39] <KirkMcDonald> trace987: You can give the class name as a string, or you can use `from __future__ import annotations`
[23:02:41] <buttermelted> seemst to work, but then https://pastebin.com/WWV6GQmi
[23:02:51] <trace987> I want the type to be the same as the same class
[23:03:15] <nedbat> buttermelted: instead of using the "pip" command, use "python -m pip"
[23:03:17] <trace987> KirkMcDonald, thx
[23:03:48] <buttermelted> same
[23:04:14] *** Joins: Akuli (~Akuli@213.216.211.210)
[23:05:05] *** Parts: sigint (sigint@user/sigint) ()
[23:05:27] <buttermelted> got another warning with another cmd
[23:05:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:08:23] *** Joins: fdan (~fdan@103.215.168.1)
[23:08:36] <nedbat> buttermelted: we can help if you link us to the details
[23:09:02] <buttermelted> so it warned me that path is not in .bashrc
[23:09:16] <buttermelted> i added .local/bin to .bashrc
[23:09:52] <buttermelted> PATH="$HOME/.local/bin:$PATH"
[23:10:39] <nedbat> buttermelted: so you fixed the problem?
[23:11:09] <buttermelted> still same problem
[23:11:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:11:44] *** Joins: fuxaches (~terry@S01060cb6d29d89df.ed.shawcable.net)
[23:11:47] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2.1)
[23:12:00] *** Joins: wyclif (~wyclif@user/wyclif)
[23:12:20] <nedbat> buttermelted: you installed the package with "python -m pip install .....", and then "python" tells you the package isn't installed?
[23:13:03] <buttermelted> oh wait a second
[23:13:21] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:14:45] <buttermelted> yes exactly @nedbat
[23:15:02] <nedbat> buttermelted: that seems very odd to me.  Can you pastebin the terminal session where you did that?
[23:15:37] <buttermelted> https://pastebin.com/JxnDSxsr
[23:15:48] <buttermelted> i got it to work just a few weeks ago
[23:16:24] <nedbat> buttermelted: sorry, i don't know about the CUDA libraries
[23:17:00] <buttermelted> cuda is unimportant
[23:17:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:17:26] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:e53e:bff9:da2:4604) (Remote host closed the connection)
[23:17:29] *** Joins: wyclif (~wyclif@user/wyclif)
[23:18:03] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Remote host closed the connection)
[23:18:32] <buttermelted> cuda belongs to another library call
[23:19:09] <nedbat> buttermelted: openaerostruct is your own library?
[23:19:13] *** Quits: mdk (~mdk@python/psf/mdk) (Quit: WeeChat 3.2)
[23:19:21] <buttermelted> from github
[23:19:36] *** Joins: mdk (~mdk@python/psf/mdk)
[23:19:42] <nedbat> buttermelted: did you write the /home/buttermelted/Documents/hydrofoil/openaerostruct.py file?
[23:19:48] *** Quits: trace987 (~trace@dynamic-002-247-249-191.2.247.pool.telefonica.de) (Ping timeout: 268 seconds)
[23:19:57] <buttermelted> yes, from an example from the documentation
[23:20:06] <nedbat> buttermelted: ok, don't name it openaerostruct.py
[23:20:12] <buttermelted> oh
[23:20:20] <fdan> in the similair way https://dpaste.org/7MNb
[23:20:26] <fdan> how can i write a python for loop
[23:20:53] <buttermelted> holy shit
[23:20:58] <buttermelted> it wörked
[23:21:06] <buttermelted> LOOOL
[23:21:38] <buttermelted> thank you mate
[23:21:40] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:21:40] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[23:22:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[23:22:41] *** Joins: brabrax (~brabrax@user/brabrax)
[23:22:51] <buttermelted> DAMN
[23:22:52] *** Joins: califax (~califax@user/califx)
[23:22:59] *** Joins: wyclif (~wyclif@user/wyclif)
[23:23:31] <buttermelted> i would have fiddled with configs for weeks
[23:24:57] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[23:25:58] *** Quits: x28girl (~x28girl@user/x28girl) (Ping timeout: 268 seconds)
[23:26:09] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:26:18] *** Joins: trace987 (~trace@dynamic-002-247-249-191.2.247.pool.telefonica.de)
[23:26:33] <bjs> fdan: something like `for i in range(5): print("*", end="")`  ?
[23:26:54] <fdan> how can i do the same thing with while
[23:26:56] *** Joins: srhm (~srhm@user/srhm)
[23:27:14] <nedbat> fdan: why do you prefer while?
[23:27:19] <nedbat> buttermelted: glad to help
[23:27:36] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[23:27:50] <fdan> thought it would be easy to correlate with C's syntax
[23:27:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:28:28] <nedbat> fdan: it's better to learn to use Python idioms
[23:28:30] *** Joins: wyclif (~wyclif@user/wyclif)
[23:29:09] <fdan> the for loops are easy, but if i ll have to use nested for loops with the different step values for range. it becomes difficul;t
[23:30:32] <nedbat> fdan: can you show us the nested loops situation?
[23:31:03] *** Joins: oriba (~oriba@dynamic-078-055-079-043.78.55.pool.telefonica.de)
[23:31:08] <fdan> i dont have a situation right now infront of me. but generally i feel its difficult
[23:32:57] <nedbat> fdan: we can help you if you get to that.  while loops are extra work. range is great.
[23:33:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:34:01] *** Joins: wyclif (~wyclif@user/wyclif)
[23:34:30] <fdan> a better way than this? https://dpaste.org/HJ8K
[23:34:59] *** Joins: rslopes (~rslopes@2804:18:1016:9dba:a709:c864:96e3:854)
[23:36:03] *** Joins: x28girl (~x28girl@user/x28girl)
[23:36:24] *** Joins: naterlater (~Nathan22@199.249.111.186)
[23:37:30] *** Quits: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it) (Ping timeout: 260 seconds)
[23:37:34] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e075:fc2f:468:25fc) (Read error: Connection reset by peer)
[23:37:39] *** Joins: magla (~gelignite@55d408e5.access.ecotel.net)
[23:37:47] <nedbat> fdan: yes, it's better than that :)
[23:38:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:39:31] *** Joins: wyclif (~wyclif@user/wyclif)
[23:40:00] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[23:41:24] *** Quits: j0be (~j0be@user/j0be) (Quit: times up...)
[23:41:59] <fdan> i want to find the common prefix of [flower,flow, flight]
[23:42:14] <fdan> i was able to do till 2 words using zip and a for loop
[23:42:57] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 245 seconds)
[23:43:12] <nedbat> fdan: you can zip three things also
[23:43:31] <fdan> using zip(*lst)
[23:43:34] <fdan> ?
[23:43:38] <nedbat> fdan: yes, try it
[23:43:48] <fdan> any other better and neat ways
[23:44:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:45:02] *** Joins: wyclif (~wyclif@user/wyclif)
[23:46:02] *** Joins: nomic (~nomic@185.217.117.73)
[23:46:11] *** Joins: Jigsy (~Jigsy@user/jigsy)
[23:46:37] <fdan> if possible without the python builtins
[23:48:38] <bjs> fdan: you can do the same way you'd do in C, but just in Python
[23:48:40] <bjs> if you want to avoid the builtins
[23:49:03] <fdan> any snippet?
[23:49:09] <fdan> so that i can learn
[23:49:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:50:32] *** Joins: wyclif (~wyclif@user/wyclif)
[23:52:13] *** Joins: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it)
[23:53:35] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[23:54:13] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[23:54:44] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[23:55:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:56:06] *** Joins: wyclif (~wyclif@user/wyclif)
[23:57:22] *** Quits: paul424 (~tom@ip-31-0-126-113.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:57:34] *** Quits: gitly (~gitly@85.255.237.208) (Ping timeout: 260 seconds)
[23:58:56] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[23:59:18] *** Joins: gitly (~gitly@85.255.233.67)
