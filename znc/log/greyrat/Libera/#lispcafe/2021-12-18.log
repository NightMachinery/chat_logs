[00:04:10] <pl> selling support contracts is much harder for non-enterprise customers
[00:04:29] <pl> and pushing people for buying newer versions doesn't really work past certain point
[00:11:31] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[00:15:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:16:29] <ck_> that's why they don't I guess. Have you tried windows 11 plus ultimate deluxe?
[00:19:28] <gilberth> The paradox situation also is: The better your software the less demand for new versions and also for support.
[00:20:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[00:21:06] <sham1> But you can't make the software too bad either because then you lose customers. So you need to find a happy medium of mediocrity
[00:21:39] <sham1> You need to make your software the equivalent of Blub
[00:22:04] <gilberth> With classical software you can't lose customers.
[00:23:24] <gilberth> I mean you have to sell new versions to generate further income. That means new customers, even if those customers were former customers.
[00:23:54] <pl> ck_: I have Windows 11 on one or two machines
[00:24:15] <ck_> that sounds like you're not sure whether it is really running on the second one :)
[00:25:06] <semz> It really feels to me like the proper way to pay for software is to pay for it to be made.
[00:25:37] <semz> It works for other industries, but with so much crapware flying around, I have no idea how a transition to this would work.
[00:26:10] <semz> Doesn't help that planning and budgeting is notoriously hard for software either
[00:28:10] <pl> ck_: one of them was off for some time and I do not remember if I pushed the update or not
[00:28:13] <pl> think I did
[00:28:19] <gilberth> Well, it doesn't work with software. Can anyone effort to pay all the development costs for a Windows or a word processor? A single person? Or for a web browser?
[00:28:38] <pl> also, paying for specific software being made tends to miss certain features
[00:28:47] <pl> although I heard SAS pretty much did it like that
[00:29:01] <pl> Another option is to do the work a'la Blender Foundation
[00:29:10] <pl> which, technically, is a subscription :P
[00:30:09] <pl> so is paying from taxes ;)
[00:38:28] <ck_> living is a subscription to oxygen and other chemicals
[00:38:33] <ck_> universe exposed as scam
[00:38:39] <ck_> UNSUBSCRIBED
[00:51:37] *** Quits: clothespin (~awolven@2601:246:4000:1030:5567:9e23:f3da:d184) (Ping timeout: 240 seconds)
[00:56:14] <sham1> EntropyCoin
[00:56:29] <ck_> lousy proof of work
[00:56:29] <sham1> And that's actually a thing. FML
[00:56:35] <ck_> haha, what
[00:56:45] <sham1> Yeah. There is EntropyCoin
[00:57:10] <ck_> yours for 23 microdollars
[00:57:59] <ck_> 334 USD market capitalization. A surprisingly small amount of entropy if you ask me
[00:59:10] <ck_> well if you'd exuse me, I'll enjoy my uncancellable unconsciousness-subscription
[00:59:20] <ck_> (that's my favourite one)
[01:07:19] *** Joins: amazigh (~amirouche@user/amirouche)
[01:26:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[01:26:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:50:01] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:35:47] * hayley reads the Rust async working group book
[02:36:19] <hayley> https://rust-lang.github.io/wg-async-foundations/vision/submitted_stories/status_quo/alan_builds_a_cache.html is funny, because it shows what happens when you have to deal in yield points and only yield points.
[02:37:04] <hayley> There are actually two bugs, and they have only fixed one. If the exemplar function can be called by two threads, a race condition is possible where an older value is written.
[02:37:55] <hayley> e.g. threads T1 and T2 perform this behaviour: T1: requests key; T2: requests key; T1: gets value 1; T2: gets value 2; T2: sets value 2; T1: sets value 1; now the cache has value 1, but value 2 is "newer".
[02:39:37] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 240 seconds)
[02:43:16] <hayley> I wonder how you'd avoid it though. Seems I just grabbed a lock for the name being serviced in the Netfarm server. But you could sort of handle it with a set-if-newer operation in the cache, where "newer" is provided by a timestamp included in the response.
[02:47:31] <hayley> OTOH the bug described only happens if you kill a thread^Wtask, which is a dumb thing to do. Why is it "more likely to happen" than panic-ing too? What the fuck?
[02:48:06] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[02:48:31] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[02:58:52] *** Joins: Oddity (~Oddity@user/oddity)
[03:14:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:16:26] <moon-child> gilberth: 'I believe the set of special forms of CL are complete'  eh, there are no continuations
[03:28:46] <hayley> Define "complete"?
[03:32:31] <moon-child> sure.  I mean, clearly they are turing-complete.  My interpretation was 'sufficient to natively express all other forms of control flow'
[03:34:35] <moon-child> ('natively' is, I guess, doing a lot of heavy lifting; but seems reasonable if you frame it in terms of local rewrites, that is macros.  (defmacro address-of-label (label) `(lambda () (go ,label))).  (defun go-label (f) (funcall f)).  (defmacro call/cc (fn) ???))
[03:37:54] <hayley> AIUI per Baker you can handle everything with CATCH.
[03:38:16] <hayley> ...or BLOCK/RETURN-FROM would be better, actually. Oh, and don't forget UNWIND-PROTECT.
[03:38:54] *** Joins: Alfr (~Alfr@user/alfr)
[03:40:40] <moon-child> how do I write call/cc locally in terms of such primitives?
[03:41:31] <moon-child> I think the only call/cc implementations for cl use a code walker
[03:42:29] <hayley> You do not. But then call/cc cannot express actors according to Hewitt.
[03:43:31] <moon-child> sure.  I'm not saying call/cc is complete; only that cl's special forms are not complete, or else complete means something else
[03:56:06] <hayley> https://www.theregister.com/2021/12/15/azul_introduces_remote_compilation_for/
[03:58:51] *** Quits: OlCe (~user@lfbn-nic-1-510-34.w90-116.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[03:59:21] <semz> "Is it really efficient to have a Java application send its bytecode over the network to another service that compiles and sends back the results to be executed?"
[03:59:26] <semz> Really? THAT is the issue here?
[04:01:25] <hayley> JITing can be asynchronous already, so what's the deal?
[04:01:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:02:13] <hayley> And compiling a Lisp function takes ~hundreds of microseconds into milliseconds usually, idk what the latency of a JVM JIT is, but compiling can be slower.
[04:03:48] <semz> I just find it funny that they focus on efficiency, when this setup is a security nightmare.
[04:10:22] <kakuhen> security is unnecessary now that we have teh cloud and require phone numbers from everyone
[04:13:08] <hayley> Can they just go back to making 864 core machines?
[04:16:46] <semz> Oh, apparently you're supposed to run it on your own machines/on your cloud stuff, not Azul's. That's less insane than how I understood it first.
[04:17:05] <moon-child> semz: it doesn't seem much more nightmarish than downloaded arbitrary code off the internet, compiling it, and executing it
[04:17:13] <hayley> I'm 858 cores short though.
[04:21:21] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[04:23:12] <semz> moon-child: Wouldn't that be nightmarish enough? But I'd say it's worse because when downloading a tarball, I can verify its checksum. You don't know the hash of your compiled code in advance.
[04:24:10] <semz> Because if you knew, why JIT at all, you effectively have an AOT compiler.
[04:28:49] <hayley> "For servers, memory is the most expensive" "Nah, that's graphics cards." "But I run out of memory on the graphics cards..."
[04:28:51] <hayley> https://www.youtube.com/watch?v=vxzadJK3oz8
[04:31:37] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[04:31:49] <mfiano> I have an arithmetic problem I need help with if anyone is up for it.
[04:32:08] <hayley> Well, I usually don't forget signs.
[04:32:16] <mfiano> It requires a bit of backstory
[04:32:43] <kakuhen> i haet number theory
[04:32:48] <mfiano> I am calling a syscall, that returns an array of 5 signed-byte 64's.
[04:33:16] <kakuhen> irl friends tried convincing me to read through J. P. Serre's "Arithmetic," and you can guess how I responded to that recommendation
[04:33:39] <mfiano> I perform some basic arithmetic on the scalars, but I need to operate on 60-bit values to optimize the fixnum arithmetic (writing implementation-specific code)
[04:34:18] <mfiano> Now this array is updated by the OS up to STAT-HZ*CPU-COUNT per second
[04:34:34] <mfiano> WHere STAT-HZ and CPU-COUNT are 127 and 24 on this machine, respectively.
[04:35:23] <mfiano> I am wondering how many days/mmonths/years/whatever will I be able to get at most with 60 bits instead of 64, and also what a likely maximum STAT-HZ for other machines for this to be useful would be
[04:35:35] <mfiano> (The array counters are only reset on reboot)
[04:36:01] <hayley> I counted 3.7826×10¹⁴ seconds, i.e. 11.99 million years.
[04:36:09] <hayley> 2^60 / (STAT-HZ * CPU-COUNT)
[04:37:10] <hayley> Even with 44.1kHz statistics (idk, you want CD quality audio out of your meters?) and 1024 cores, you still have a tiny bit over 809 years in 60 bits.
[04:37:10] <mfiano> Technically, the array is of type long, but yeah C and it's UB
[04:38:16] <semz> kakuhen: What do you hate about it?
[04:38:47] <mfiano> hayley: Ok thanks
[04:39:01] <hayley> https://www.pcworld.com/article/410553/adaptevas-1024-core-epiphany-v-mega-chip-packs-serious-wallop.html ✅ 1024 cores ✅ cache coherent shared memory 
[04:40:27] <hayley> But then that article links to a 2016 article which claims "By contrast, current Intel chips are much higher-clocked and built using a 14nm process. They achieve millions—not billions—of instructions per second." Eh? You could easily get 1 IPC back then.
[05:14:43] <kakuhen> semz: i just find it as interesting as other math, and whenever i have to push through it, it's very annoying
[05:15:00] <kakuhen> "not particularly easy + not particularly interesting" is the perfect combination for any student to dislike a topic
[05:15:19] <semz> I suppose we'll have to disagree about "not particularly interesting" :-)
[05:15:40] <kakuhen> yeah my friends do too
[05:15:47] <kakuhen> at least the ones from my commutative algebra class
[05:15:54] <kakuhen> they keep shilling number theory to me and how it's super interesting and stuff
[05:15:57] <kakuhen> but i just cant find it
[05:16:07] <kakuhen> it's ok, i like math not much other people like
[05:16:49] <kakuhen> i'm planning to take a seminar class on ramsey theory this winter, for instance
[05:16:56] <semz> math is a big field if nothing else, plenty of space for all kinds of folks
[05:17:02] <kakuhen> and i'm also likely going into homological algebra
[05:17:10] <kakuhen> even though i know it's a bad idea because of what happened on my comm alg final
[05:18:04] <kakuhen> we had to compute Tor and Ext on various modules over some p-adic power series ring
[05:19:07] <kakuhen> wasn't very fun, though the locality of p-adic power series ring makes it somewhat easier to construct a projective^Wfree resolution
[05:19:29] <kakuhen> it was the only problem on the final where i genuinely got lost and turned in a half-assed answer
[05:19:40] <semz> yeah that doesn't sound like a particularly fun exercise
[05:21:11] <kakuhen> and now i am enrolled in a course where i get to do this kind of tedious computations all quarter
[05:21:12] <kakuhen> :))
[05:22:43] <kakuhen> i like diagram chases and category theory, but we'll see what i think about it by the end of next winter
[05:23:10] <kakuhen> last spring i took a seminar course on category theory and we got all the way to monads & kan extensions, and it was really neat stuff; we ended up doing lots of interesting things with them in that class
[05:23:21] <kakuhen> i almost tried getting a prof i know to host a reading course on topos theory but decided against it
[05:32:27] <hayley> So apparently you have like 1000 cycles before you get anything from main memory, so compression is a huge deal. /me wonders what to compress in a document database.
[05:34:59] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[05:41:27] <hayley> gilberth: If you won't publish, would you do a talk for the Online Lisp Meeting?
[05:51:37] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[06:01:39] <hayley> https://www.youtube.com/watch?v=3YBmS5oaNwU
[06:49:18] *** Quits: Catie (~user@user/catie) (Quit: going home)
[07:06:14] <hayley> https://www.ebay.com/itm/113423145171 So they're selling a FEP but there's still no chips for the CPU? What kind of Lisp machine kit is this?
[07:19:53] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 268 seconds)
[07:21:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:56:36] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:57:18] <dave0> maw
[07:57:58] <hayley> maw
[07:59:01] <dave0> hi hayley 
[07:59:04] <dave0> it's warm today!
[07:59:56] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[08:00:04] <dave0> lady friend came over this morning, she is going good
[08:00:31] <dave0> she wore this 70's style jumpsuit thing
[08:00:36] <dave0> it showed off her butt :-p
[08:02:49] <pl> https://www.youtube.com/watch?v=7_9aVzf5fC4 what to do with a broken tesla
[08:02:58] *** Joins: notzmv (~zmv@user/notzmv)
[08:12:50] *** Joins: semz (~none@user/semz)
[08:36:57] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[08:39:34] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[09:48:46] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[09:52:30] * hayley now wonders what the bare minimum that is necessary from a metacircular compiler for writing a GC.
[09:54:20] <hayley> If I only do caller-saves registers, then I just have to walk the stack, which could be done with a few primitives: get the stack pointer as a fixnum, read the next slot...
[09:54:38] <hayley> Though if my language uses closures to do conditionals, I am screwed unless I inline those.
[09:58:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:01:01] <moon-child> yeah, I think you would need some sort of guarantee that CONS does not  CONS
[10:01:46] <hayley> Could always just not GC, but that won't last too long. Or I could write the GC in assembly, but that would be painful. 
[10:03:01] <hayley> moon-child: I could have CONS not CONS its arguments and have stack allocation early on, I guess.
[10:03:18] <moon-child> :D
[10:07:21] <hayley> Though, I have other problems. e.g. if I want to lookup a message in a map, I need to get at the vector and SVREF it. But then how do I get at a vector? Probably another message. So now I have to look up that message...but per AMOP, I can hard-code the slot numbers to break that circularity, even if it's fugly.
[10:11:10] <hayley> With a real compiler, I would satiate as in SICL, but I don't have a real compiler.
[10:12:14] <hayley> But this compiler would be really dumb. I have a stack machine, so each instruction would be compiled to some instructions which diddle the C stack.
[11:00:05] <hayley> But then (again), the closure would be allocated in the parent stack frame, and you could blow the stack that way. Maybe I do need an always inlined %IF.
[11:04:25] <hayley> But would it even be that hard to inline ifTrue: and whileTrue:? I don't think it'd be that bad.
[11:06:59] <hayley> ...and then I have damn lexical variables, which are more stuff to inline. So, I really should give the function object in a call like ((lambda ...) ...) its own region, and then inlining is not necessary. Whew!
[11:11:13] <hayley> ...but I don't have to inline the closures involved in ifTrue: and whileTrue: as there aren't going to be many of those per function call.
[11:11:54] <moon-child> pls no camels
[11:12:04] <hayley> camels?
[11:12:26] <hayley> Okay, fine.
[11:13:11] <moon-child> hmm, 'if-True': kebab of camel
[11:13:45] <hayley> I don't have to inline if/2 or while/2, because there won't be many per function call. e.g. (while #t (if a b c)) desugars to (while: (lambda () #t) (lambda () (if: a (lambda () b) (lambda () c)))) and look - you can't have a loop which allocates repeatedly in one region!
[11:15:13] <hayley> And, in my planned language, (let ((x v) ...) body ...) desugars to (value: (lambda (x ...) body ...) v ...
[11:15:29] <hayley> ) which has the same property. Isn't optimistic stack allocation fun? 
[11:22:11] <hayley> moon-child: Thanks for the hint.
[11:28:55] <dave0> hayley: star trek 6 starts in a couple of minutes!
[11:29:04] <dave0> the undiscovered country
[11:29:11] <dave0> it's one of the better ones
[11:32:50] <dave0> it's on
[11:40:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:03:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e) (Ping timeout: 252 seconds)
[12:04:47] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:995c:e86e:470c:8a37)
[12:19:12] <Gnuxie> Australian dub?
[12:22:13] <dave0> just because we can do a thing, does not mean we must do that thing!
[12:27:01] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[12:30:42] *** Joins: shka (~herr@109.231.0.226)
[12:31:51] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Client Quit)
[12:32:28] <hayley> https://twitter.com/nodefunallowed/status/1472129727649382401 So something I said a year ago was put into a Clojure weenieing post.
[12:34:23] <moon-child> congratulations!
[12:35:42] <hayley> I swear "have a good go fuck yourself" was a phrase that was used before it popped into my head five minutes ago, but I can't find who said it first ):
[12:38:28] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[12:42:41] <hayley> Oh, the original phrase is "I wish all <something> a very pleasant go fuck yourself" e.g. <https://i.redd.it/laqnlh7kos581.jpg>
[12:46:14] <contrapunctus> hayley: it amuses me that I am a fan of Lisp, malleable.systems, Alan Kay, anarchism, and interested in reading anything written by you and Gnuxie...and yet, I have not been able to get myself to read Software And Anarchy completely yet 😅
[12:46:46] <hayley> I'm not sure what Gnuxie is up to, but I am not an awfully big fan of the "malleable systems" movement.
[12:47:31] <contrapunctus> hayley: why's that?
[12:48:21] <moon-child> what's the malleable systems movement?  Is that the 'minimalism -> you should be able to have read every line of code in your system' people?
[12:48:38] <contrapunctus> moon-child: https://malleable.systems
[12:49:00] <hayley> FWIW this appears in the book. The main issue, as I see it, is that they see it as an interface problem, where you just have to script programs together. But I am convinced one needs to go deeper; that you'd need to redesign some parts of an operating system, mostly inter-process communication in order to get any useful semantics to work.
[12:49:59] <hayley> Furthermore, general purpose/application programming should be a whole lot better than it is. Hence I say that I want dynamic systems, and I believe it's a stronger position than just malleability.
[12:50:02] <moon-child> arcan is trying to do it with shared memory.  That is more a compatibility issue than anything
[12:50:44] <moon-child> honestly the only problem with shared memory is granularity
[12:51:40] <moon-child> (though similarly to dtrace an essential compromise; that 'only' is doing a lot of heavy lifting)
[12:52:19] <hayley> Oh, and I suspect it's because they're too conservative and stick to old desktop metaphors, even when they don't make sense. e.g. one project had you address program outputs like a spreadsheet, and this was a big selling point, but there was no spreadsheet-ness to it; you still had whole arrays and objects in one cell, rather than operating on ranges like SUM(A1:A10).
[12:54:38] <moon-child> what is wrong with that?  The main point of spreadsheets is that you get a structured, spatial representation for data.  Object-per-cell rather than atom-per-cell gives you more dimensions to work with
[12:55:07] <moon-child> with atom-per-cell, the result _lacks_ inherent structure; operations are defined ad-hoc, a situation only slightly better than unix pipelines
[12:57:20] <hayley> But the last part is more or less speculation, admittedly. I just went through the catalog and most looked like they were tackling UI problems, which is fine, but any real implementation of most of those ideas needs a more supportive operating system, and I don't just want to put metaphorical building blocks together - I want to machine rods and wires and whatever else I might think of.
[12:58:26] <hayley> moon-child: Without more effort (e.g. having cut/paste know how to update all references to cells), you cannot rearrange cells without rewriting, as you could in e.g. a visual dataflow language like shaders in Blender.
[12:59:18] <hayley> It's only one spatial representation, and I am not sure if there is more structure than just exploiting spatial locality.
[13:00:37] <moon-child> I haven't looked at blender.  But I agree higher-level inherent structure is good.  Premature composition as the root of all evil and all that
[13:00:42] <hayley> And, in any case, trying to tell people that it's just a spreadsheet is going to lead to confusion. You don't draw up tables or anything. My complaint was just that they poorly try to make things seem familiar.
[13:00:49] <moon-child> I see
[13:01:17] <hayley> Well, you just wire up data flow lines between computation boxes, it's probably not a unique UI.
[13:02:21] <moon-child> I see
[13:02:39] * hayley uploaded an image: (111KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/sOtJUomtRWUkSOOAKSsPkiNq/Screenshot%20from%202021-12-18%2020-32-23.png >
[13:02:57] <hayley> Here is a brick shader for example.
[13:12:17] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[13:14:06] <Gnuxie> Gnuxie is agitating badly 
[13:15:53] <Gnuxie> there is also interesting things from time to time 
[13:54:41] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[13:58:58] *** Joins: makomo (~makomo@user/makomo)
[14:03:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:47:43] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[14:51:07] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.8.2 - https://znc.in)
[14:53:04] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[15:27:33] <hayley> Speaking of, would anyone like it if I gave "The Lisp 'Curse' Redemption Arc" its own page, rather than having to link into a book?
[15:37:58] *** Joins: Alfr (~Alfr@user/alfr)
[15:42:25] <shka> hayley: for whom this page would be?
[15:42:51] <hayley> For shoving into the face of anyone who mentions the Lisp "curse".
[15:43:05] <shka> links are usually better at that
[15:43:37] <hayley> Of course I'd use a link, but at the very least, having a separate page is easier than sharing a specific page in a PDF document.
[15:43:45] <shka> i see
[15:44:09] <shka> this depends on the book subject honestly 
[15:44:22] <shka> also, do you have this article written anywhere?
[15:44:27] <shka> where i can read it?
[15:44:53] <shka> i have my own thoughts about this "curse", i wonder what you've came up with 
[15:45:09] <hayley> https://applied-langua.ge/software-and-anarchy.pdf page 25-ish? Check the table of contents
[15:45:38] <shka> 22
[15:45:43] <shka> thanks
[15:45:46] <hayley> Amusingly, if it's just a communication problem, you could totally argue today that there must be a Java curse, as no one set out to audit log4j, which is very well used even. :)
[15:45:55] <shka> i think that i have already read it up
[15:46:02] <hayley> Quite likely.
[15:46:14] <shka> but i can't remember that part
[15:46:27] <shka> is it new or my memory is just bad?
[15:46:43] <hayley> It's almost a year old now.
[15:47:15] <shka> gosh, you like your sentences long, don't you?
[15:47:52] <hayley> It's funny, I got ten years of foresight, and I can tell you none of the predictions in the original article happened. We have exactly one pattern matching library (Trivia) and one ML type system (Coalton) at the very least.
[15:49:05] <hayley> It's like it doesn't exist, but it must, because people who don't write any CL and don't actually investigate things other than testing libraries (of which people really use like five) tell me it does.
[15:50:21] <hayley> Hey, I cranked out seven pages, I can make long sentences if I like.
[15:50:49] <shka> ok, i finished reading it up
[15:51:16] <shka> i think that our thoughts are surprisingly aligned 
[15:51:44] <shka> though i personally i am more interested in using lisp for the personal growth 
[15:51:54] <shka> not technological advancement 
[15:52:54] <shka> because lisp makes certain concepts "easy", it also makes them accessible to  curious minds
[15:52:54] <hayley> At the basis of it all, I think computers are mostly useful for self expression, and making creating new means of expression would be a good use of time.
[15:53:07] <hayley> This incidentally requires some technical advancement.
[15:53:12] <shka> if person wants to know how any of this works, he ought to use lisp
[15:53:26] <shka> or she
[15:53:29] <shka> obviously 
[15:53:56] *** Quits: amazigh (~amirouche@user/amirouche) (Quit: WeeChat 2.8)
[15:54:07] <hayley> OTOH all I want usually already exists, I just have to revive it.
[15:55:36] <hayley> But, if I had to summarise: people often make arbitrary decisions, so give them a way to discover good choices, and don't keep them stuck with bad choices.
[15:57:57] <hayley> Making experimentation hard and having a BDFL, or another central body, make all design decisions go directly contrary to this principle.
[15:58:49] <hayley> In practise, people make decent decisions, and even though there are a lot of false ends, no one really has to think about them nowadays. Not much of a TL/DR.
[16:04:28] <hayley> Well, no, people think about them, if they want to learn from prior mistakes. But, if you ask someone for a library recommendation, on average you'll get a fine recommendation.
[16:09:06] *** Joins: treflip (~user@user/treflip)
[16:12:40] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:12:59] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:16:06] <hayley> shka: I'm off for the night.
[16:16:18] <shka> sleep well
[16:16:55] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[16:31:58] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:37:52] *** Joins: amazigh (~amirouche@user/amirouche)
[17:15:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:21:59] <dave0> nite all
[17:22:44] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:29:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[17:38:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:25:04] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:39:56] <gilberth> Good morning #lispcafe!
[19:40:04] <shka> https://www.youtube.com/watch?v=HEHuGcsGk9A
[19:40:07] <shka> gilberth: hi
[19:40:43] <gilberth> shka: Is that my good morning tune? And have you seen ixelp?
[19:41:10] <shka> gilberth: no, it's somewhat disturbing observation about american stock exchange
[19:42:01] *** Joins: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de)
[19:42:01] *** ChanServ sets mode: +o ixelp
[19:42:11] <Alfr> Good morning, gilberth.
[19:42:15] <shka> but i can get you some good morning tune
[19:42:25] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Remote host closed the connection)
[19:42:26] <gilberth> shka: What's so disturbing about it?
[19:43:00] <shka> gilberth: individual companies, like Tesla or Apple trade in volumes greater then the whole European stock exchange markets
[19:43:21] <gilberth> shka: Ah ok.
[19:43:52] <shka> gilberth: have a good morning tune  https://www.youtube.com/watch?v=Q7wjVkF8WMc
[19:43:52] -ixelp- Kangding Ray - A Protest Song - YouTube
[19:44:31] <gilberth> What's the protest about?
[19:47:18] <shka> well, how can i know?
[19:48:05] <contrapunctus> hayley, Gnuxie: page 9 - One of the * tenets?
[19:48:21] <gilberth> shka: ok. Anyhow: Thanks for the tune!
[19:48:32] <shka> shka is here to serve 
[19:48:59] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[19:53:44] <contrapunctus> Oh, TIL 'tenent' is a word. https://en.m.wiktionary.org/wiki/tenent
[19:53:45] -ixelp- tenent - Wiktionary
[19:56:04] <contrapunctus> hayley, Gnuxie: whom are -> who are? 🤔
[19:56:25] <gilberth> shka: The other songs by Kangding Ray which follow because of auto play are nice, too.
[19:57:01] <gilberth> contrapunctus: What's the sentence?
[19:57:38] <shka> gilberth: be advised, it eventually goes into minimalist techno
[19:57:45] <shka> which may or may not be your thing
[19:58:27] <gilberth> shka: Up until now, I like it. I listen to "Amber Decay" atm. Really nice!
[19:58:49] <shka> well, it kinda goes into this direction at this point i would say
[19:59:06] <shka> but regardless, i like kangding ray
[19:59:25] <shka> iirc he is a german from berlin btw
[19:59:47] <gilberth> contrapunctus: nvm. My native language is German, I could tell whether it's whom or who. :-)
[19:59:48] <contrapunctus> gilberth: "An evolutionary process must then lead to more and more self-aware and analytic actors, whom are better suited to the environment."
[19:59:55] <gilberth> shka: Does he still live there?
[20:00:10] <gilberth>  contrapunctus: "who"!
[20:00:45] <contrapunctus> gilberth: indeed 😏
[20:00:54] <shka> https://kangdingray.bandcamp.com/
[20:00:55] -ixelp- Kangding Ray
[20:00:58] <shka> gilberth: apparently so 
[20:01:17] <shka> amazingly, this person does not hack compilers 
[20:01:48] <gilberth> shka: Hey cool. Perhaps I will have a chance to listen to his music live. Who knows?
[20:02:00] <gilberth> shka: Why should he hack compilers?
[20:02:09] <shka> because bald
[20:02:12] <shka> ;-)
[20:02:33] <gilberth> Fake.
[20:02:41] <shka> German electronic music scene is very active, and Berlin is at very heart of it all
[20:02:54] <shka> well... so you know
[20:03:17] <shka> also, German jazz from ECM is a thing
[20:03:46] <gilberth> I am aware, and I must get healhty, find a flat in Berlin and move. And pandemic must pass.
[20:03:46] <shka> surprisingly 
[20:04:34] <shka> but it seems that ECM currently publishes more foreign music then German actually
[20:05:00] <shka> which makes sense actually 
[20:05:08] <shka> jazz is very un-germanic 
[20:05:29] <gilberth> Never thought about that.
[20:07:23] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:11:07] * contrapunctus wants to make an XMPP client, and wonders what's worse - bringing cl-xmpp (ancient unmaintained pure-CL library) up to speed, using CFFI and libstrophe (C), using ABCL and Smack/Stroke (Java), or using py4cl/clpython/burgled-batteries and a Python library (aioxmpp, slixmpp, nbxmpp...)
[20:14:05] <shka> xmpp didn't change all that much, no?
[20:14:42] <contrapunctus> shka: very much did, from what I hear.
[20:14:49] <shka> oh
[20:14:50] <shka> ok
[20:18:24] <contrapunctus> Fully-featured XMPP libraries in high-level languages tend to be around 12~15k SLoC, so...better to write a native client, or use a foreign library? If the latter, which language? (C, Java, Python?)
[20:19:38] <shka> wow, 12k lines of code?
[20:19:47] <shka> i would not have expect this to be this large 
[20:25:35] <contrapunctus> jabber.el (while quite old now and missing many modern features) is itself around that size. (a full client)
[20:29:05] <gilberth> What's so complex about it?
[20:29:17] <contrapunctus> Oh...huh. So the codebase size seems to be a lot more varied than that.
[20:30:17] <shka> well, i thought that xmpp is essentially a bunch of xmls thrown around with TCP at each other 
[20:32:01] <shka> and essentially a xmpp library is supposed to simply send, receive, and react to those xmls (according to some rules) 
[20:33:03] <gilberth> So the question perhaps is: How many of those LoCs are just due to XML parsing?
[20:33:03] <shka> so if you have a good framework to define reactions to those xmls you ought to be half way there 
[20:33:20] <shka> gilberth: good point actually 
[20:34:21] <shka> you could use plump for xml
[20:34:39] <gilberth> CXML
[20:34:54] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[20:35:16] <shka> or that, yeah
[20:35:35] <shka> then have a good way to define dispatch based on the xml and that's it?
[20:35:49] <contrapunctus> shka: that might be Shinmera's deeds
[20:36:03] <contrapunctus> (event handling library)
[20:38:09] <shka> yeah, then it wouldn't be 15k sloc
[20:38:43] <contrapunctus> Sizes of some XMPP libraries in descending order - 124k (Smack/Java), 97.4k (aioxmpp/Python), 59.1k (Stroke/Java), 15.6k (python-nbxmpp), 13.5k (libstrophe/C)
[20:38:45] <shka> i wouldn't assume that elisp implementation is a good guideline 
[20:39:10] <shka> 124k? :D
[20:39:38] <contrapunctus> sloccount output for all of these - http://ix.io/3ILZ
[20:40:35] <shka> well, a lot of that are perhaps tests
[20:41:01] <shka> and asci art https://github.com/igniterealtime/Smack/blob/master/smack-core/src/main/java/org/jivesoftware/smack/SmackReactor.java :P
[20:41:01] -ixelp- Smack/SmackReactor.java at master · igniterealtime/Smack · GitHub
[20:41:26] <contrapunctus> 39k SLoC in Smack is "extensions", 25k "core", 5.5k "legacy", 6k integration tests...
[20:41:51] <contrapunctus> They have a REPL in that wtf?
[20:42:02] <contrapunctus> Greenspun called...
[20:42:43] <gilberth> What can the REPL do? Perhaps it can do all you need?
[20:43:48] <contrapunctus> haha
[20:53:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[20:53:46] *** Joins: random-nick (~random-ni@87.116.181.93)
[20:58:25] <contrapunctus> So if one excludes tests, Smack is 106.7k SLoC and aioxmpp is 19.6k SLoC.
[20:59:09] <gilberth> Still a lot.
[20:59:57] <contrapunctus> I guess...so that's 'no' to a native Lisp library, then, I guess 🤔️
[21:00:10] <contrapunctus> unless somebody feels motivated to hlp
[21:00:14] <contrapunctus> * help
[21:00:38] <gilberth> Well, ... Lisp code is way denser.
[21:01:01] <shka> at least it can be
[21:02:17] <gilberth> Which translates to "producivity" in terms of LoC per day. I can write C like five times faster than Lisp. However those C lines usually do less.
[21:03:39] <gilberth> So I seem to have a certain speed at which I could churn out functionality/complexity. It's only that C needs more lines of code for that.
[21:03:53] <contrapunctus> Hm...
[21:05:26] <contrapunctus> I might start with a foreign library anyway, because I have no experience writing XMPP stuff...just to get an idea of other client library designs.
[21:05:52] <gilberth> Curious, what should your client do?
[21:09:51] <contrapunctus> gilberth: the existing XMPP clients are rather inflexible in terms of user customization. They also lack features missing in proprietary messengers, which I want to remedy. And I want a single codebase for all major platforms (desktop, mobile, terminal, Emacs, and web client), so there is feature parity and consistent behaviour.
[21:10:50] <gilberth> This sounds like quite a challenge.
[21:12:07] <contrapunctus> I'm tired of seeing people use proprietary protocols and give up their privacy for sake of features. Even after I set up clients and add contacts for them...
[21:25:25] *** Quits: amazigh (~amirouche@user/amirouche) (Quit: WeeChat 2.8)
[21:31:38] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:32:00] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:35:38] <gilberth> Yes, imagine email would work like that.
[21:36:26] <gilberth> It's good that email was invented long before Joe Six Pack discovered the internet.
[21:43:03] <contrapunctus> The features aren't useless. I see the value in them, that's why I'm working on this.
[21:43:42] <contrapunctus> But there's no reason they can't exist in XMPP clients.
[21:53:37] *** Joins: lisp123 (~lisp123@45.86.202.12)
[21:57:57] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 240 seconds)
[22:00:14] <gilberth> Is it really about the features why a certain messenger is used? Or isn't it rather because those who somebody might send a message is using that particular messenger?
[22:01:28] <gilberth> And, yes, I that I need multiple apps because everyone is on a different messenger. Not that I have many contacts, though.
[22:04:01] *** Joins: amazigh (~amirouche@user/amirouche)
[22:21:47] <contrapunctus> gilberth: It's likely both. I can at least tackle one.
[22:22:01] <contrapunctus> At least let nobody say that "I'm missing feature X"
[22:29:09] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[22:53:55] *** Joins: lisp123 (~lisp123@45.86.202.12)
[22:57:31] <shka> https://www.youtube.com/watch?v=88fWUZhYb04
[22:57:32] -ixelp- How to Lie Your Way to $34 Billion [Nikola Motors Fraud] - YouTube
[22:57:56] <shka> so we learned nothing after theranos...
[22:58:48] <shka> also, i guess that OMP works, for a single regression value 
[22:59:10] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 260 seconds)
[22:59:17] <shka> i still wonder how to extend this method for multiple regression targets
[22:59:34] <shka> other then running the algorithm multiple times for each target 
[23:00:18] <contrapunctus> shka: "You live and learn. At any rate, you live." — Douglas Adams
[23:06:06] * hayley slept a full four hours.
[23:06:45] <hayley> It is warm, and I have stressed myself by deciding I need to web-ify part of that book.
[23:08:28] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:09:50] <shka> sooo... i have a odd question
[23:10:06] <shka> anybody using one of those "gravity blankets"?
[23:22:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[23:41:34] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[23:45:17] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[23:52:40] <ck_> do you want to know whether they'd 'work' for you or not?
[23:54:27] <shka> i want to know if this is a well known scam
[23:55:00] <ck_> why would it be? we're talking about blankets with additional mass in them, right
[23:55:19] <shka> yes
[23:55:28] *** Joins: lisp123 (~lisp123@45.86.202.12)
[23:56:16] <contrapunctus> The less scammy-sounding name would be 'weighted blankets'
[23:56:21] <ck_> have you ever laid on your back and have something or someone put pressure to your abdomen?
[23:56:51] <shka> contrapunctus: right
[23:57:11] <shka> ck_: probably?
[23:57:12] <contrapunctus> ck_: it's a famous nightmare. "I dreamed an elephant was sleeping on my chest..."
[23:57:28] <ck_> There are people for which this has an effect on their nervous system. I don't know what advertising you're referring to, but the effect itself is not imaginative
[23:57:31] <ck_> imagined
[23:58:11] <shka> i guess i can try it 
[23:59:21] <ck_> you can try it without buying a blanket, that's what I meant earlier
[23:59:57] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 240 seconds)
