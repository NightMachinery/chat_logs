[02:33:41] *** Joins: AdamGordonBell[m (~adamgordo@2001:470:69fc:105::30de)
[02:42:30] *** Quits: AdamGordonBell[m (~adamgordo@2001:470:69fc:105::30de) (Quit: node-irc says goodbye)
[02:51:30] *** Joins: kai[m]1 (~kaikdeorg@2001:470:69fc:105::c43)
[02:51:30] *** Joins: rtyler[m] (~rtylermat@2001:470:69fc:105::30d5)
[02:51:31] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[02:51:31] *** Joins: enick_471 (~appservic@2001:470:69fc:105::93)
[02:51:41] *** Joins: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111)
[02:51:41] *** Joins: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb)
[02:51:41] *** Joins: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105)
[02:51:41] *** Joins: basshelal[m] (~basshelal@2001:470:69fc:105::30e7)
[02:51:41] *** Joins: edipofederle[m] (~edipofede@2001:470:69fc:105::30f1)
[02:51:41] *** Joins: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6)
[02:51:41] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[02:51:41] *** Joins: byteit101[m] (~byteit101@2001:470:69fc:105::30ec)
[02:51:41] *** Joins: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100)
[02:51:42] *** Joins: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c)
[02:51:42] *** Joins: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122)
[02:51:42] *** Joins: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127)
[02:51:42] *** Joins: kares[m] (~karesmatr@2001:470:69fc:105::30d1)
[02:51:42] *** Joins: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d)
[02:51:42] *** Joins: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d)
[02:51:42] *** Joins: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134)
[02:51:42] *** Joins: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b)
[02:51:42] *** Joins: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e)
[02:51:42] *** Joins: kalenp[m] (~kalenpmat@2001:470:69fc:105::3153)
[02:51:42] *** Joins: mrtommy[m] (~mrtommyma@2001:470:69fc:105::3161)
[02:51:42] *** Joins: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118)
[02:51:42] *** Joins: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146)
[02:51:42] *** Joins: TimGitter[m] (~gittertir@2001:470:69fc:105::314f)
[02:51:42] *** Joins: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140)
[02:51:42] *** Joins: RobertNicholas[m (~nicholasr@2001:470:69fc:105::3167)
[02:51:43] *** Joins: dan64[m] (~dan64matr@2001:470:69fc:105::407e)
[02:51:43] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[02:51:43] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[02:51:43] *** Joins: worldnamer[m] (~worldname@2001:470:69fc:105::381f)
[02:51:43] *** Joins: Hao[m] (~huhao1987@2001:470:69fc:105::3f8a)
[02:51:43] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[02:51:43] *** Joins: TestAccount[m] (~testaccep@2001:470:69fc:105::30da)
[02:51:43] *** Joins: olleolleolle[m] (~olleolleo@2001:470:69fc:105::3170)
[02:51:44] *** Joins: TimGitter[m]1 (~gittertim@2001:470:69fc:105::314b)
[02:51:44] *** Joins: donv[m] (~donvmatri@2001:470:69fc:105::3d93)
[02:51:44] *** Joins: onghu[m] (~onghumatr@2001:470:69fc:105::3db3)
[02:52:24] *** Quits: kares[m] (~karesmatr@2001:470:69fc:105::30d1) (Remote host closed the connection)
[02:52:24] *** Quits: headius (~headius@2001:470:69fc:105::3027) (Remote host closed the connection)
[02:52:24] *** Quits: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111) (Remote host closed the connection)
[02:52:24] *** Quits: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122) (Remote host closed the connection)
[02:52:24] *** Quits: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127) (Remote host closed the connection)
[02:52:24] *** Quits: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d) (Remote host closed the connection)
[02:52:24] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Write error: Connection reset by peer)
[02:52:25] *** Quits: TestAccount[m] (~testaccep@2001:470:69fc:105::30da) (Remote host closed the connection)
[02:52:25] *** Quits: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6) (Remote host closed the connection)
[02:52:25] *** Quits: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118) (Remote host closed the connection)
[02:52:25] *** Quits: TimGitter[m]1 (~gittertim@2001:470:69fc:105::314b) (Remote host closed the connection)
[02:52:25] *** Quits: edipofederle[m] (~edipofede@2001:470:69fc:105::30f1) (Remote host closed the connection)
[02:52:26] *** Quits: worldnamer[m] (~worldname@2001:470:69fc:105::381f) (Remote host closed the connection)
[02:52:26] *** Quits: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e) (Remote host closed the connection)
[02:52:26] *** Quits: mrtommy[m] (~mrtommyma@2001:470:69fc:105::3161) (Remote host closed the connection)
[02:52:26] *** Quits: basshelal[m] (~basshelal@2001:470:69fc:105::30e7) (Remote host closed the connection)
[02:52:26] *** Quits: Hao[m] (~huhao1987@2001:470:69fc:105::3f8a) (Remote host closed the connection)
[02:52:26] *** Quits: kalenp[m] (~kalenpmat@2001:470:69fc:105::3153) (Remote host closed the connection)
[02:52:27] *** Quits: enick_471 (~appservic@2001:470:69fc:105::93) (Read error: Connection reset by peer)
[02:52:27] *** Quits: dan64[m] (~dan64matr@2001:470:69fc:105::407e) (Remote host closed the connection)
[02:52:27] *** Quits: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb) (Remote host closed the connection)
[02:52:27] *** Quits: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134) (Remote host closed the connection)
[02:52:28] *** Quits: onghu[m] (~onghumatr@2001:470:69fc:105::3db3) (Remote host closed the connection)
[02:52:28] *** Quits: TimGitter[m] (~gittertir@2001:470:69fc:105::314f) (Remote host closed the connection)
[02:52:28] *** Quits: olleolleolle[m] (~olleolleo@2001:470:69fc:105::3170) (Remote host closed the connection)
[02:52:28] *** Quits: donv[m] (~donvmatri@2001:470:69fc:105::3d93) (Remote host closed the connection)
[02:52:28] *** Quits: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146) (Remote host closed the connection)
[02:52:29] *** Quits: RobertNicholas[m (~nicholasr@2001:470:69fc:105::3167) (Remote host closed the connection)
[02:52:29] *** Quits: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140) (Remote host closed the connection)
[02:52:29] *** Quits: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c) (Remote host closed the connection)
[02:52:29] *** Quits: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100) (Remote host closed the connection)
[02:52:29] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Remote host closed the connection)
[02:52:29] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (Remote host closed the connection)
[02:52:29] *** Quits: byteit101[m] (~byteit101@2001:470:69fc:105::30ec) (Remote host closed the connection)
[02:52:29] *** Quits: kai[m]1 (~kaikdeorg@2001:470:69fc:105::c43) (Remote host closed the connection)
[02:52:36] *** Quits: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105) (Remote host closed the connection)
[02:52:36] *** Quits: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b) (Remote host closed the connection)
[02:52:36] *** Quits: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d) (Remote host closed the connection)
[02:52:36] *** Quits: rtyler[m] (~rtylermat@2001:470:69fc:105::30d5) (Remote host closed the connection)
[02:52:36] *** Quits: lopex[m] (~lopexm]@2001:470:69fc:105::3158) (Remote host closed the connection)
[02:58:42] *** Joins: AdamGordonBell[m (~adamgordo@2001:470:69fc:105::30de)
[03:11:59] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[03:12:03] *** Joins: kai[m]1 (~kaikdeorg@2001:470:69fc:105::c43)
[03:12:03] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[03:12:04] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[03:12:04] *** Joins: enick_958 (~appservic@2001:470:69fc:105::93)
[03:12:11] *** Joins: basshelal[m] (~basshelal@2001:470:69fc:105::30e7)
[03:12:11] *** Joins: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100)
[03:12:11] *** Joins: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111)
[03:12:11] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[03:12:11] *** Joins: edipofederle[m] (~edipofede@2001:470:69fc:105::30f1)
[03:12:11] *** Joins: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb)
[03:12:11] *** Joins: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122)
[03:12:11] *** Joins: byteit101[m] (~byteit101@2001:470:69fc:105::30ec)
[03:12:11] *** Joins: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d)
[03:12:11] *** Joins: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c)
[03:12:11] *** Joins: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e)
[03:12:11] *** Joins: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127)
[03:12:11] *** Joins: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6)
[03:12:11] *** Joins: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105)
[03:12:11] *** Joins: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118)
[03:12:12] *** Joins: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134)
[03:12:12] *** Joins: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b)
[03:12:15] *** Joins: TimGitter[m]1 (~gittertim@2001:470:69fc:105::314b)
[03:12:15] *** Joins: kalenp[m] (~kalenpmat@2001:470:69fc:105::3153)
[03:12:15] *** Joins: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d)
[03:12:15] *** Joins: mrtommy[m] (~mrtommyma@2001:470:69fc:105::3161)
[03:12:15] *** Joins: TimGitter[m] (~gittertir@2001:470:69fc:105::314f)
[03:12:15] *** Joins: RobertNicholas[m (~nicholasr@2001:470:69fc:105::3167)
[03:12:15] *** Joins: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140)
[03:12:16] *** Joins: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146)
[03:12:16] *** Joins: kares[m] (~karesmatr@2001:470:69fc:105::30d1)
[03:12:16] *** Joins: olleolleolle[m] (~olleolleo@2001:470:69fc:105::3170)
[03:12:16] *** Joins: rtyler[m] (~rtylermat@2001:470:69fc:105::30d5)
[03:12:16] *** Joins: worldnamer[m] (~worldname@2001:470:69fc:105::381f)
[03:12:16] *** Joins: TestAccount[m] (~testaccep@2001:470:69fc:105::30da)
[03:12:16] *** Joins: dan64[m] (~dan64matr@2001:470:69fc:105::407e)
[03:12:16] *** Joins: onghu[m] (~onghumatr@2001:470:69fc:105::3db3)
[03:12:16] *** Joins: Hao[m] (~huhao1987@2001:470:69fc:105::3f8a)
[03:12:17] *** Joins: donv[m] (~donvmatri@2001:470:69fc:105::3d93)
[03:12:17] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[04:49:26] *** Quits: lucf117 (~lucf117@user/lucf117) (Remote host closed the connection)
[06:28:36] *** Joins: lucf117 (~lucf117@user/lucf117)
[08:16:58] *** Quits: lucf117 (~lucf117@user/lucf117) (Remote host closed the connection)
[14:46:49] <edipofederle[m]> Morning
[19:48:55] <headius> Morning!
[20:07:25] <fzakaria[m]> Morning!
[21:01:22] <edipofederle[m]> headius: do you had the chance to check the https://github.com/jruby/jruby/pull/6728 ?
[21:12:22] <headius> I will look now... yesterday got a little crazy
[21:12:41] <edipofederle[m]> no problem, when possible :)
[21:19:24] <headius> merged!
[21:19:38] <headius> enebo: byteit101: where do we stand with https://github.com/jruby/jruby/issues/6718
[21:20:11] <headius> looks like byteit101 identified a problem but not sure if any moves have been made to fix it
[21:38:33] *** Joins: lucf117 (~lucf117@user/lucf117)
[22:10:57] <enebo[m]> I haven't looked into it at all past the comments I made
[22:11:12] <enebo[m]> I am fixing https://github.com/jruby/jruby/issues/6173
[22:14:12] <headius> ok
[22:14:25] <headius> I am going to look at the last few blockers on my list for 9.3
[22:14:42] <enebo[m]> The last sentence I made in the comment on 6173 (case/when) is very interesting though
[22:15:10] <enebo[m]> Basically we build Array/List node as an array/list which means it will never end up being the all literal case
[22:15:40] <enebo[m]> but MRI now destructures the array into individual whens which allows when 1,2,3 to still be detected as only literals
[22:16:16] <enebo[m]> One issue with this strategy is that when not literals it causes both our interps to call eqq more
[22:16:26] <enebo[m]> err not more but more from witin the interp
[22:16:35] <enebo[m]> vs in a helper method in C/Java
[22:17:28] <headius> so the problem is that we are eagerly evaluating the list of conditions and then passing that out to a list-based eqq logic
[22:17:46] <enebo[m]> well the actual issue has nothing to do with list node
[22:17:47] <headius> but we should eval and eqq separately for each in the list
[22:18:32] <enebo[m]> the actual lazy issue reported is that they will not generically build an argspush but pass it to a special method which builds lhs and rhs in their own branches
[22:18:37] <headius> does this need to change in parser or just compiler? We could build the IR such that there are separate when conditions each with the same target
[22:18:47] <enebo[m]> although in theory a listnode could have the same issue
[22:18:55] <enebo[m]> it is just a builder issue
[22:19:06] <enebo[m]> it will just be more branches
[22:19:25] <headius> yeah
[22:19:35] <headius> can't really be avoided
[22:20:12] <enebo[m]> for the destructuring list part of this we could even do this more java-friendly and still pass as a list internally in cases where that would not cause problems
[22:20:57] <headius> ah right, as long as there's no side effect to evaluating a condition
[22:21:29] <enebo[m]> It is a little hairy though...like all constants...no problem leave as IRuubyObject[] internally but laziness in 2.6 may mean no resolution of things like autoload
[22:22:24] <enebo[m]> in any case the big benefit is people tend to put homogeneous data into whens so this may allow us to use literal-only case optimizations more often
[22:23:00] <enebo[m]> when it isn't the case more interp (which no biggy once JITd) and more code generated
[22:35:18] <headius> this is a nice discovery: https://github.com/jruby/jruby/issues/6730
[22:36:01] <headius> PR coming soon hopefully or we can fix it the way he describes
[22:36:12] <headius> I am triaging recent issues and then back to 9.3 for the rest of the week
[22:36:47] <enebo[m]> 500ms cache?
[22:37:47] <enebo[m]> stat() is the source of all performance issues as I used to always joke but I wonder how that patch effects us on faster systems too
[22:38:05] <headius> yeah for sure
[22:38:24] <headius> also interesting that the cache is getting evacuated right away... we may want to audit other weak caches
[22:38:27] <headius> they may be doing nothing at all
[22:38:31] <enebo[m]> the other comment was interesting too about weakmap never having anything in it
[22:38:45] <enebo[m]> yeah
[22:39:01] <enebo[m]> we will halve startup time :)
[22:39:13] <headius> I wish
[22:39:24] <headius> it will help jruby-complete and other embedded use for sure though
[22:39:55] <headius> really wish we could find a good jar caching library to replace this stuff with
[22:39:56] <enebo[m]> I do remember years ago load resolution was 20-30% of startup but that was before rubygems and tough to measure
[22:40:01] <headius> jar filesystem logic basically
[22:40:31] <enebo[m]> oh yeah this was for jar but I started thinkg about it in terms of actual filesystem as well
[22:41:25] <enebo[m]> there is a lack of determinancy in time stamps and file system changes so I wonder if we could stat less in that case troo
[22:42:27] <enebo[m]> I have always wanted a user-based filesystem where all gems and lib/ruby lived where we could just re-index on anything changing and precalculate a lot of stuff
[22:42:56] <enebo[m]> so it would still be a file-based resolution but behave more like an image-based one
[22:43:15] <headius> yeah for sure
[22:43:25] <headius> 99% of those files never change
[22:43:41] <headius> 99.9
[22:43:53] <enebo[m]> yeah virtually no files ever change outside the actual project itself
[22:44:24] <enebo[m]> I had thought about the idea also of having a mode which assumes no gems or stdlib can change while running so we just precalc all that stuff
[22:44:43] <enebo[m]> if you need to debug by changing a line in an installed gem you disable the mode
[22:45:22] <enebo[m]> but I am not a fan of filesystem resolution.  The utility of it is obvious but we all pay a pretty big time penalty for it
[22:56:33] <headius> ugh another problem with JAVA_HOME determination
[22:57:46] <headius> appears to affect the bash script too... the /usr/bin/java on MacOS is not a symlink so we can't traverse it to find the actual JDK dir
[22:58:10] <headius> it is a binary that launches whatever JDK is default for the system
[22:58:11] <headius> FML
[22:58:50] <headius> enebo: I think we will have to check some command output at least on MacOS to figure out if this is a module-enabled JDK level
[22:58:59] <headius> now I am sad
[22:59:39] <enebo[m]> HAHAH man that is disappointing but so Apple
[22:59:52] <headius> hmm we can use this though!
[22:59:53] <headius> $ /usr/libexec/java_home
[22:59:53] <headius> /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home
[23:00:04] <enebo[m]> OTOH linux has alternatives which does work but is largely useless for us
[23:00:39] <headius> benefit of walled garden is that this will work on all MacOS... so I guess we need to modify the launcher to check for MacOS (or check for this command) and use that as home
[23:00:53] <headius> only if env is not set
[23:01:15] <enebo[m]> ok well so we will just roll this out whenever and people can manually set HOME until then
[23:01:40] <enebo[m]> JAVA_HOME that is...I hope we all have HOME set
[23:02:36] <headius> hah
[23:02:45] <headius> yeah the workaround is not that onerous
[23:03:08] <headius> funny we never saw this because I always use pickjdk which sets JAVA_HOME
[23:03:37] <enebo[m]> yeah our dev envs always are a little different just due to needing to switch jvms often
[23:06:25] <headius> right
[23:06:34] <headius> and who uses java without JAVA_HOME I mean come on seriously
[23:09:00] <enebo[m]> Some mac users
[23:09:13] <headius> pshaw
[23:12:48] <enebo[m]> just nedding it up
[23:33:59] <headius> I guess I'll just fix this while I am here
