[00:00:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:02:18] *** Joins: d34df00d (~d34df00d@2600:1700:8c60:3a10::48)
[00:05:36] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[00:06:57] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[00:07:32] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[00:08:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:08:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:08:35] *** Joins: wroathe (~wroathe@user/wroathe)
[00:08:54] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[00:09:55] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[00:10:30] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[00:13:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:19:54] <wmacmil> so is there really no way to import a text file into haskell without always wrapping IO bindings around all the types and always working in a do block
[00:21:33] *** Joins: __monty__ (~toonn@user/toonn)
[00:22:07] <polyphem_> wmacmil: https://sadnesstheory.files.wordpress.com/2015/02/wpid-io-monad.jpg?w=584
[00:23:17] *** polyphem_ is now known as polyphem
[00:25:21] <EvanR> actually IO is Applicative so you can technical wrap everything with <*>'s xD
[00:25:35] <jkaye_> How would you get a file from on disk into memory without introducing effects? You're going to need an effect of some kind
[00:25:38] <EvanR> instead of do blocks
[00:25:55] <jkaye_> The default effect to do that is IO, but there are ways to use a different effect in your code if you want to keep the IO part separate
[00:26:20] <EvanR> getting a file through I/O is... like the main point of IO
[00:26:22] <geekosaur> I'm not sure what is meant by "import" here
[00:27:24] *** jkaye_ is now known as jkaye
[00:27:29] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Remote host closed the connection)
[00:27:50] <geekosaur> there are things like https://hackage.haskell.org/package/heredoc-0.2.0.0/docs/Text-Heredoc.html that can embed a file at compile time, hence not requiring IO at runtime
[00:28:00] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[00:28:26] <polyphem> change perspective, its the procedural view that traps you. instead of writing a subprogram that does file Io and validation, you load the file in main and pass it to pure program logic.
[00:29:58] <EvanR> main = printAnswer =<< pure . programLogic =<< readFile "name"
[00:30:06] *** Joins: pavonia (~user@user/siracusa)
[00:31:57] <EvanR> sometimes the way to make more of your program pure program logic is obvious, sometimes it isn't
[00:32:25] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:37:54] *** Quits: _ht (~quassel@82-168-34-160.fixed.kpn.net) (Remote host closed the connection)
[00:39:23] <wmacmil> does (^?) come builtin with Data.Aeson.Lens? 
[00:39:31] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:39:57] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (Ping timeout: 256 seconds)
[00:40:04] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[00:40:10] <briandaed> wmacmill you may always check such things in hoogle
[00:42:10] *** Joins: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net)
[00:43:15] <polyphem> wmacmil: if you have a decent terminal  , you can use this https://lazamar.github.io/haskell-documentation-in-the-command-line/ , its really nice to work with IMHO
[00:43:24] <jacks-> wmacmill, the whole point of IO type is to capture things like reading files. there are escape hatches, but they really shouldn't be used for things like reading files in 99% of the cases
[00:49:32] *** Quits: jumper149 (~jumper149@base.felixspringer.xyz) (Quit: WeeChat 3.3)
[00:50:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:50:37] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:a5f9:5faf:f69c:8827)
[00:53:10] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[00:53:33] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[00:54:11] *** travv0_ is now known as travv0
[00:54:42] *** Quits: travv0 (sid293381@id-293381.helmsley.irccloud.com) (Changing host)
[00:54:42] *** Joins: travv0 (sid293381@user/travv0)
[00:57:14] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:59:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[00:59:45] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[01:00:00] *** Joins: acarrico1 (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[01:00:39] *** Joins: mastarija_ (~mastarija@2a05:4f46:e0e:5000:a5f9:5faf:f69c:8827)
[01:00:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:01:30] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 250 seconds)
[01:02:01] *** Quits: schweers (~user@2001:16b8:e978:5100:aaa1:59ff:fe3f:235c) (Ping timeout: 245 seconds)
[01:02:59] *** acarrico1 is now known as acarrico
[01:03:10] *** Quits: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net) (Client Quit)
[01:03:27] *** Joins: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[01:03:37] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:a5f9:5faf:f69c:8827) (Ping timeout: 240 seconds)
[01:03:45] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[01:06:35] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[01:09:24] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[01:11:37] *** Quits: mastarija_ (~mastarija@2a05:4f46:e0e:5000:a5f9:5faf:f69c:8827) (Quit: Leaving)
[01:14:17] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[01:16:25] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:19:51] *** Joins: acidjnk (~acidjnk@p200300d0c7271e85bcf2712229551d8e.dip0.t-ipconnect.de)
[01:21:45] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[01:22:14] <qrpnxz> It's way too cool i can just say `-threaded` and my program will be threaded. The power of purity and amazing compiler writers
[01:22:57] <geekosaur> neh. "-threaded" just enables the threaded runtime; you still need to do something with threads :)
[01:23:15] <geekosaur> automatic threading is very much an unsolved problem
[01:26:12] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[01:28:32] *** Joins: yauhsien_ (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[01:28:32] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[01:29:07] <byorgey> still, the point stands, it's very easy to fork some threads or add some parallelism annotations
[01:31:12] <monochrom> Taking a step back, it is cool that we encourage multi-threading when communities of other languages fear it.
[01:31:36] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:33:16] *** Joins: cdeln (~cdeln@212-107-139-206.customers.ownit.se)
[01:34:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:36:42] *** Quits: cdeln (~cdeln@212-107-139-206.customers.ownit.se) (Quit: leaving)
[01:39:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:41:14] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:44:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:44:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:44:02] *** Joins: wroathe (~wroathe@user/wroathe)
[01:44:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[01:47:53] <shapr> Anyone using the morpheus graphql client with the GitHub API?
[01:49:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:49:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:50:28] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[02:03:00] *** Joins: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net)
[02:04:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:07:05] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0::7e04) (Quit: Leaving)
[02:08:07] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: leaving)
[02:08:50] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Quit: Leaving)
[02:09:54] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:11:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[02:11:47] *** Quits: themc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:15:29] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[02:17:13] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:18:57] *** hexeme is now known as ldlework
[02:20:22] *** Quits: vglfr (~vglfr@46.96.161.71) (Ping timeout: 250 seconds)
[02:22:09] *** Joins: alx741_ (~alx741@157.100.93.160)
[02:22:10] *** Quits: alx741_ (~alx741@157.100.93.160) (Client Quit)
[02:22:15] *** Quits: alx741 (~alx741@157.100.93.160) (Quit: leaving)
[02:28:48] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:30:10] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[02:32:28] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:35:55] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:37:27] *** Joins: vglfr (~vglfr@46.96.161.71)
[02:39:03] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:39:05] <[itchyjunk]> main :: IO () means main has the the type `IO ()` ?
[02:39:10] <[itchyjunk]> the () is part of the type?
[02:39:22] <monochrom> Yes.
[02:39:37] <[itchyjunk]> hmm
[02:43:13] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Remote host closed the connection)
[02:43:20] *** Joins: evocatus (~evocatus@62.182.77.224)
[02:45:04] *** Joins: yangby (~secret@115.199.105.217)
[02:45:18] *** Quits: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008) (Remote host closed the connection)
[02:45:21] <Axman6> @src ()
[02:45:21] <lambdabot> data () = ()
[02:45:31] *** Joins: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008)
[02:45:36] <jackdk> % :info IO
[02:45:36] <yahb> jackdk: type IO :: * -> *; newtype IO a = GHC.Types.IO (State# RealWorld -> (# State# RealWorld, a #)); -- Defined in `GHC.Types'; instance Alternative IO -- Defined in `GHC.Base'; instance Applicative IO -- Defined in `GHC.Base'; instance Functor IO -- Defined in `GHC.Base'; instance Monad IO -- Defined in `GHC.Base'; instance MonadPlus IO -- Defined in `GHC.Base'; instance Monoid a => Monoid (IO a) -- Define
[02:45:47] <monochrom> Ugh none of those is helpful.
[02:46:21] <monochrom> Perhaps wait for a question as opposed to trying to guess?
[02:51:27] *** Joins: dut (~dut@user/dut)
[02:55:48] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Quit: Leaving)
[02:57:06] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[02:57:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[02:58:47] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:00:16] <AWizzArd> OT for native speakers: which is correct when I want to talk about the property of being airborne?  a) airborness or b) airborneness ?
[03:01:06] <geekosaur> neither one's normally used, just "being airborne"
[03:01:19] <dolio> If it were either, it would be the latter.
[03:01:20] *** Joins: AlexNoo_ (~AlexNoo@94.233.240.62)
[03:01:31] <AWizzArd> geekosaur: example:  “Let’s talk about the airborneness of the Haskell virus.”
[03:01:31] <geekosaur> if I were wiring up a new word on the fly (English being kinda like that) I'd say "airborne-ness"
[03:02:10] <AWizzArd> Yeah, that sounds good. Thx! :-)
[03:02:45] <monochrom> m-w.com does not know either.  I've also tried airbornity, airborneity
[03:03:01] *** Quits: Alex_test (~al_test@178.34.151.107) (Ping timeout: 240 seconds)
[03:03:43] <AWizzArd> We see the evolution of language right here.
[03:03:53] *** Quits: AlexZenon (~alzenon@178.34.151.107) (Ping timeout: 256 seconds)
[03:04:08] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 250 seconds)
[03:04:35] <monochrom> airbearing?
[03:04:51] *** Quits: AlexNoo (~AlexNoo@178.34.151.107) (Ping timeout: 256 seconds)
[03:04:53] <geekosaur> only if it catches on :)
[03:05:07] <monochrom> Although, "air bearing" is something different, think ball bearing and then s/ball/air/ for even less friction.
[03:05:21] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[03:06:07] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[03:06:36] <monochrom> airbearability, like readability
[03:06:48] <monochrom> (I hate "readability")
[03:07:14] <hpc> yes, it has terrible wordishness :D
[03:08:10] <jackdk> "With respect to the Haskell virus, let us now direct our attention to the question of whether or not it is airborne."
[03:08:24] <jackdk> (sorry, I'm being silly this morning)
[03:08:35] <EvanR> haskell virus sounds like something that gets into your e.g. C++ and converts it to haskell
[03:09:21] *** Joins: AlexZenon (~alzenon@94.233.240.62)
[03:09:24] <EvanR> at which point fellow C++ programs come to kill it off
[03:09:28] <jackdk> I hear that's called "overuse of templates"
[03:09:33] *** Joins: Alex_test (~al_test@94.233.240.62)
[03:09:36] <monochrom> Haskell virus stops the world >:)
[03:10:04] <shapr> but only for garbage collection
[03:10:38] <EvanR> GIL, garbage interpreter lock
[03:11:00] <opticblast> is this the equivalent of greenspun?
[03:16:45] *** Quits: mmhat (~mmh@55d451ef.access.ecotel.net) (Quit: WeeChat 3.4)
[03:19:17] <EvanR> [itchyjunk], you heard of types like Maybe Int, [Char] (aka: [] Char), well IO () has that form
[03:20:11] <[itchyjunk]> IO is a type constructor
[03:20:18] <[itchyjunk]> and IO () is one such type
[03:20:29] <[itchyjunk]> so i can have IO blah where blah can be different types?
[03:20:30] <EvanR> yeah IO () :: *
[03:20:39] <[itchyjunk]> hmm didn't realize () was a type
[03:20:44] *** Quits: yangby (~secret@115.199.105.217) (Quit: Go out for a walk and buy a drink.)
[03:20:51] <EvanR> the Unit type
[03:21:09] <Axman6> like [] and Bool, it is one of the types defined in the Haskell standard
[03:21:10] <geekosaur> () is what we use when C would use "void"
[03:21:17] <geekosaur> so for example
[03:21:21] <geekosaur> :t putStrLn
[03:21:22] <lambdabot> String -> IO ()
[03:21:28] <Axman6> I donm't quite agree, since () has a value
[03:21:35] <geekosaur> no useful result value so it's IO ()
[03:22:04] <geekosaur> I suppose if we were defining the standard now we might use IO Void
[03:22:19] <geekosaur> but it's far too late to change now
[03:22:22] <Axman6> I feel that would be more problematic
[03:22:26] <EvanR> that would make it difficult to continue after a putStrLn....
[03:22:35] <Axman6> and there can be effects from forcing ()
[03:22:54] <ephemient> main :: IO Void would only work if the end of main were unreachable
[03:23:06] <Axman6> is someone returns (somethingMassive `rnf` ())
[03:23:10] <sprout_> nah,  void is absense of a value,  unit is the type with only one value
[03:23:19] <geekosaur> mm, I was thinking "only if inspected" and what would inspect it?
[03:23:43] <EvanR> passing around an actual Void at runtime seems weird
[03:23:53] <monochrom> What ephemient says. I add: () is 0 bit of information, Void is infinitely many bits of information.
[03:24:13] <EvanR> -1/12 bits of information?
[03:24:14] <geekosaur> then again I suppose oit'd be difficult to construct thatunboxed tuple, so hey :)
[03:24:20] <geekosaur> *so yeh
[03:24:36] <monochrom> One more angle: "return ??? :: IO Void" what should I use for ??? there?
[03:24:49] <EvanR> let x = x in x
[03:25:11] <geekosaur> ^
[03:25:33] <Axman6> let enterTheVoid = enterTheVoid in enterTheVoid
[03:25:37] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[03:26:21] <EvanR> the C version is better... where it (can?) refuse to compile if you use the return value from a void function call
[03:26:23] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[03:26:44] <ephemient> there's nothing wrong with using () as a value
[03:26:55] <opticblast> it's the Boring type
[03:26:59] <opticblast> whereas Void is Impossible
[03:27:59] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[03:28:08] <EvanR> Boring + Impossible = Boring, Impossible + Impossible = Impossible, Impossible ^ Impossible = Boring
[03:29:01] <opticblast> 1 + 0 = 1, 0 + 0 = 0, 0 ^ 0 = 1
[03:29:02] <opticblast> checks out
[03:30:21] <EvanR> 1 / (1 - Boring) = N
[03:31:03] <monochrom> "fix (print 0 >>)" can have type "forall a. IO a", equivalently "IO Void". This type can inform me that I have a non-terminating program and it is intentionally so.
[03:31:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:31:21] <opticblast> https://stackoverflow.com/a/33115522 is a good resource on unit vs void
[03:31:34] <monochrom> If "print 0" itself also has the same type, this is making types less informative.
[03:32:12] <opticblast> oh, right, and Void also means nontermination, as described in https://www.fpcomplete.com/blog/2017/07/to-void-or-to-void/
[03:33:21] <monochrom> But it all goes back to "I don't have information to give you" ≠ "I have impossible information to give you".
[03:34:29] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[03:35:43] <EvanR> I have exploding information to give you
[03:35:46] <monochrom> One more way to say the same thing: If "print 0" has type "IO Void", then it can also be trivially converted to the type "forall a. IO a"
[03:38:45] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[03:39:05] <sprout_> neat,  0 bits of information is still information of absense
[03:39:11] <sprout_> ah well
[03:40:14] <Raito_Bezarius> I have some newtype Lang from Text.Shakespeare.I18N, I do import renderMessage, mkMessage from the module but whenever I want to do newtype coercion from Text to Lang using Lang someText, it fails with data constructor is not in the scope, does it ring any bell?
[03:42:55] <Clint> Raito_Bezarius: which version of shakespeare are you using?
[03:43:22] <Raito_Bezarius> shakespeare == 2.0.25.* Clint 
[03:44:08] <Clint> Raito_Bezarius: i see https://hackage.haskell.org/package/shakespeare-2.0.25.1/docs/Text-Shakespeare-I18N.html#t:Lang
[03:44:20] <Raito_Bezarius> indeed
[03:44:46] <Clint> so, that's not a newtype
[03:45:02] <Raito_Bezarius> right ; hm, how can I lift Text to Lang then? is type only a type alias?
[03:45:22] <geekosaur> yes
[03:45:31] <Raito_Bezarius> alright
[03:45:32] <geekosaur> so it's already a Lang
[03:46:13] <Raito_Bezarius> hm hls got me confused
[03:46:34] <Raito_Bezarius> ah [Char] / Text stuff
[03:47:49] <EvanR> monochrom, actually, riddle me that again. If an IO action never completes, should it return Void or some variable
[03:48:08] <geekosaur> it just never returns
[03:48:21] <EvanR> I mean, which type is appropriate / inappropriate
[03:48:22] <geekosaur> the resulting type is forall a. IO a
[03:48:36] <geekosaur> :t undefined
[03:48:37] <lambdabot> a
[03:48:51] <jkaye> :t forever
[03:48:52] <lambdabot> Applicative f => f a -> f b
[03:49:23] <EvanR> I guess that's better than Void since it's polymorphic
[03:49:42] <geekosaur> right
[03:52:02] *** Quits: max22- (~maxime@2a01cb0883359800c8a77c004bdd2128.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:52:40] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:6410:d0a3:c1e2:34d8)
[03:54:52] *** tremon is now known as tremon_
[03:56:01] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[03:56:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:00:10] *** Joins: jkaye_ (~qicruser@2605:ef80:c:803f::60:fe3)
[04:00:10] *** Quits: jkaye_ (~qicruser@2605:ef80:c:803f::60:fe3) (Client Quit)
[04:00:14] *** Joins: jkaye__ (~qicruser@2605:ef80:c:803f::60:fe3)
[04:00:14] *** Quits: jkaye__ (~qicruser@2605:ef80:c:803f::60:fe3) (Client Quit)
[04:00:25] *** Joins: jkaye_ (~qicruser@2605:ef80:c:803f::60:fe3)
[04:00:52] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:01:18] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:02:08] <monochrom> If you have the Void type, then you also have the function "absurd :: Void -> a".  Then fmap absurd :: IO Void -> IO a gives you one direction of conversion.
[04:02:19] *** Joins: jedb (~jedb@89.38.225.36)
[04:02:28] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[04:02:35] <monochrom> The other direction is even easier, "forall a. IO a" specializes to IO Void.
[04:02:42] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 260 seconds)
[04:02:52] *** Parts: jedb (~jedb@89.38.225.36) (Leaving)
[04:03:03] <monochrom> I don't have a preference for either one.
[04:03:07] <EvanR> to dispatch a Void yell absurd
[04:03:18] *** Quits: jkaye_ (~qicruser@2605:ef80:c:803f::60:fe3) (Read error: Connection reset by peer)
[04:03:35] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[04:03:46] <monochrom> But "forall a. IO a" requires less learning for most people.
[04:04:56] <monochrom> But there are also people who think that IO Void is clearer.
[04:05:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[04:05:21] <monochrom> And finally there are absurd people who opine that forever should be IO () -> IO ().
[04:05:40] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[04:05:44] *** Joins: amk (~amk@109.255.169.126)
[04:07:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:08:15] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[04:09:35] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[04:16:03] <dolio> Has to be () so that my overzealous warnings about do bindings don't kick in.
[04:16:28] <jackdk> Wouldn't `IO Void` do that too?
[04:17:01] <dolio> Maybe. I'm not sure IO a would, though.
[04:17:24] <geekosaur> should unify, I'd think
[04:18:35] <Raito_Bezarius> I might be mad but how possible would that be to turn a String into constructors in Haskell? given I have A X_1, B X_2 X_3, C X_4, can I have a way to do eval :: [String] -> A | B | C if args can be coerced to X_1, X_2, X_3, X_4?
[04:18:43] <opticblast> "to Void or not to void" describes this exact issue: of whether to use "IO Void" or "forall a. IO a" to represent nontermination
[04:19:14] <opticblast> not sure what you mean there Raito_Bezarius
[04:19:25] *** Joins: kaph_ (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[04:19:52] <monochrom> Use "deriving Read"?
[04:19:56] *** Joins: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:c04a:81d5:ec6a:a9b3:865a)
[04:20:00] <monochrom> > read "Maybe 4"
[04:20:01] <lambdabot>  *Exception: Prelude.read: no parse
[04:20:09] <monochrom> err need type sig
[04:20:17] <monochrom> > read "Just 4" :: Maybe Integer
[04:20:18] <Raito_Bezarius> let's assume I have data U = A String | B Int | C, I'd like to have some function such that eval "A" ["X"] == A "X", eval "B" ["3"] == B 3, eval "C" []
[04:20:19] <lambdabot>  Just 4
[04:20:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:20:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:20:21] *** Joins: wroathe (~wroathe@user/wroathe)
[04:20:22] <opticblast> I wish read wouldn't default to @()
[04:20:45] <monochrom> Then what should it default to? Void?  >:)
[04:20:51] <opticblast> nothing. it should never default
[04:20:53] <geekosaur> sadly it can't be controlled per fuunction
[04:21:04] <opticblast> a shortcoming of Haskell imo
[04:21:09] <dolio> Wrong.
[04:21:23] <dolio> It doesn't default unless you turn on ExtendedDefaulting.
[04:21:27] <geekosaur> type inference wants you to reconsider
[04:21:37] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[04:21:40] <geekosaur> well, it still defaults, just not to ()
[04:21:41] <opticblast> type *inference* is great, type *defaulting* is not
[04:22:06] <monochrom> OK I am OK with "should be a type error".
[04:22:37] <geekosaur> you can do `default ()`
[04:22:57] <EvanR> Raito_Bezarius, by eval do you mean parsing?
[04:22:57] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:6410:d0a3:c1e2:34d8) (Ping timeout: 240 seconds)
[04:23:30] <opticblast> I think you mean ExtendedDefaultRules
[04:24:01] <Raito_Bezarius> ideally, I'd like to not parse manually EvanR and just have a very simple way to turn constructors strings into U
[04:24:25] <EvanR> usually that is what deriving the Read class does
[04:24:39] <EvanR> sometimes it doesn't work though and you have write your own
[04:24:51] <monochrom> > (read "Just") 4 :: Maybe Integer
[04:24:52] <lambdabot>  error:
[04:24:52] <lambdabot>      • No instance for (Read (Integer -> Maybe Integer))
[04:24:52] <lambdabot>          arising from a use of ‘read’
[04:25:02] <EvanR> > show (Just 4)
[04:25:03] <monochrom> Oh haha darn.
[04:25:04] <lambdabot>  "Just 4"
[04:25:14] <EvanR> > read "Just 4" :: Maybe Int
[04:25:16] <lambdabot>  Just 4
[04:25:42] <Raito_Bezarius> EvanR: hm, but does not read works with String?
[04:25:54] <Raito_Bezarius> so I guess I have to use some Read' class which takes [String] rather than String
[04:26:12] <EvanR> you want to go from [String] to [MyThing] ?
[04:26:20] <opticblast> oh, so that's why you said you wanted to parse *constructors*
[04:26:24] <Raito_Bezarius> I want to go from [String] to U
[04:26:25] <geekosaur> I think we're still unclear on what exactly you want
[04:26:35] <Raito_Bezarius> alright, let me go into detail
[04:26:41] <Raito_Bezarius> so I am still using Shakespeare
[04:26:53] <Raito_Bezarius> Shakespeare uses type constructors for messages
[04:27:08] <Raito_Bezarius> But, I have some runtime parts where I only have [String] where first argument is message and the rest are parameters
[04:27:19] <opticblast> "type constructors for messages"? what do you mean by that
[04:27:28] <monochrom> > read (unword ["Just", "4"]) :: Maybe Integer
[04:27:30] <lambdabot>  error:
[04:27:30] <lambdabot>      • Variable not in scope: unword :: [[Char]] -> String
[04:27:30] <lambdabot>      • Perhaps you meant one of these:
[04:27:31] <Raito_Bezarius> something like: data AppMessages = Hello | Goodbye
[04:27:31] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 250 seconds)
[04:27:41] <monochrom> Oh, unwords?
[04:27:42] <Raito_Bezarius> with some renderMessage :: AppMessages -> String function
[04:27:45] <monochrom> > read (unwords ["Just", "4"]) :: Maybe Integer
[04:27:45] <opticblast> you just mean messages are a data type
[04:27:46] <lambdabot>  Just 4
[04:27:48] <Raito_Bezarius> yes, opticblast 
[04:27:51] <Raito_Bezarius> sorry for the wrong vocabulary
[04:28:18] <geekosaur> those are data constructors, not type constructors
[04:28:36] <opticblast> each message is its own data constructor, makes sense
[04:28:36] <geekosaur> big difference, were they type constructors you'd be looking at some pretty heavy lifting
[04:28:37] <Raito_Bezarius> right
[04:29:51] <opticblast> oh, I see what monochrom is getting at: concatenate the strings so that you have a string which can be read directly as a message rather than a constructor-with-arguments-remaining
[04:30:06] <Raito_Bezarius> ah right I see now, thanks monochrom !
[04:30:21] * monochrom stretches low-tech solutions as much as possible.  Never surrender, never give up...
[04:30:50] <opticblast> ironic that "parse strings into data types as soon as possible" is counterproductive here
[04:31:53] <jackdk> Does anyone here have a windows machine running haskell that can test something for me? Does `System.Environment.lookupEnv "USERPROFILE"` return something sensible, or does it need to be `System.Environment.lookupEnv "%USERPROFILE%"`? I don't have a windows machine to test on, but I'm trying to fix something in amazonka.
[04:32:14] <Raito_Bezarius> is there any tip on how to implement Read instance? it seems like Shakespeare do not derive it
[04:32:56] <opticblast> I can install haskell on my windows
[04:33:00] <monochrom> Perhaps look for "standalone deriving".
[04:33:07] <Raito_Bezarius> nice monochrom !
[04:33:30] <opticblast> oh, you can derive typeclasses for data types that you don't control? wow
[04:33:42] <Raito_Bezarius> seems to do the job, monochrom !
[04:34:54] <monochrom> The condition is that you can import all of the data constructors, i.e., the author doesn't hide them from you.
[04:35:20] <monochrom> And then probably transitively for the field types.
[04:35:31] <monochrom> "Conditions apply."
[04:36:26] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (Ping timeout: 250 seconds)
[04:36:57] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[04:37:51] <opticblast> I don't think it's transitive -- you just need the field types to implement the same class (when that class requires it)
[04:38:23] <opticblast> Show requires all fields to implement Show, while Foldable doesn't, for instance
[04:39:07] <opticblast> actually, how *does* Foldable work recursively?
[04:39:28] <opticblast> oh, it's recursive when fields are also parameterized on a
[04:39:54] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 250 seconds)
[04:40:34] <opticblast> and if a takes any position other than last in those types, you can't derive Foldable
[04:41:21] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:21] <dsal> % :k Foldable
[04:41:22] <yahb> dsal: (* -> *) -> Constraint
[04:42:45] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:42:56] *** Quits: acidjnk (~acidjnk@p200300d0c7271e85bcf2712229551d8e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:44:59] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:47:28] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:47:39] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:47:59] *** Joins: acidjnk (~acidjnk@p200300d0c7271e85bcf2712229551d8e.dip0.t-ipconnect.de)
[04:52:01] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:2c90:e64f:dd1e:6519)
[04:55:17] *** Quits: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:c04a:81d5:ec6a:a9b3:865a) (Ping timeout: 240 seconds)
[04:56:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:00:11] *** Joins: ahammer (~ahammer@2409:8954:8cc:52c1:3534:681d:f1d0:740c)
[05:01:14] *** Quits: acidjnk (~acidjnk@p200300d0c7271e85bcf2712229551d8e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:05:01] *** Quits: pgib (~textual@173.38.117.86) (Ping timeout: 240 seconds)
[05:07:15] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:07:52] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:2c90:e64f:dd1e:6519) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:08:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:8293:8dc5:8087:f321) (Ping timeout: 240 seconds)
[05:08:22] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:2c90:e64f:dd1e:6519)
[05:08:23] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:2c90:e64f:dd1e:6519) (Client Quit)
[05:08:35] <Raito_Bezarius> can I print the standalone derivation or a data type in REPL?
[05:09:00] <Raito_Bezarius> I have some constructor X :: Int -> Message but read "X 3" :: Message fails the parsing
[05:10:46] <geekosaur> % set -ddump-deriv
[05:10:46] <yahb> geekosaur: ; <interactive>:108:6: error: Variable not in scope: ddump :: ASetter s t a b -> b -> s -> t; <interactive>:108:12: error: Variable not in scope: deriv :: ASetter s t a b -> b -> s -> t
[05:10:52] <Raito_Bezarius> thanks geekosaur 
[05:10:55] <geekosaur> % :set -ddump-deriv
[05:10:55] <yahb> geekosaur: 
[05:11:09] <geekosaur> % data X = X Int
[05:11:10] <yahb> geekosaur: 
[05:11:28] <geekosaur> %% deriving instance Read X
[05:11:29] <yahb> geekosaur: http://qp.mniip.com/y/40
[05:12:01] <Raito_Bezarius> got it!
[05:12:45] <geekosaur> but now you have to understand ReadP and maybe ReadS to figure out what it's doing :)
[05:12:54] <Raito_Bezarius> figured it out too
[05:12:56] *** Joins: acidjnk (~acidjnk@p200300d0c7271e85bcf2712229551d8e.dip0.t-ipconnect.de)
[05:13:00] <Raito_Bezarius> the parser seems quite sane
[05:13:11] <Raito_Bezarius> I just did not expect some { xxx = yyy } to appear
[05:13:57] *** Quits: ahammer (~ahammer@2409:8954:8cc:52c1:3534:681d:f1d0:740c) (Ping timeout: 240 seconds)
[05:18:03] <Raito_Bezarius> thanks a lot geekosaur, opticblast, monochrom ; partial i18n on blog got \o/
[05:18:49] *** Joins: ahammer (~ahammer@157.122.68.227)
[05:19:23] <opticblast> jackdk: you don't need the %
[05:19:34] <opticblast> in fact adding them makes it breka
[05:19:57] <jackdk> opticblast: cool thanks! could you also please tell me the value of `System.Info.os`, and whether your machine is 64bit?
[05:20:31] *** Joins: IndecisionTree (mike@user/IndecisionTree)
[05:20:34] <opticblast> mingw32, and not sure how to tell that on windows
[05:21:26] <opticblast> system type x64, so yes it's 64-bit
[05:21:54] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[05:21:59] <jackdk> thanks. I was worried that `System.Info.os` might say something else for non-32bit windows, but seems stable. I grepped GHC source for it too
[05:23:13] *** Joins: jkaye_ (~qicruser@2601:281:8300:7530:ad17:6976:1a41:d704)
[05:23:50] <opticblast> https://hackage.haskell.org/package/base-4.16.0.0/docs/System-Info.html#v:os suggests it is indeed mingw32 for all windows hosts
[05:26:07] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 256 seconds)
[05:27:01] <EvanR> monochrom, btw... it seems to me that a dumbpass handcoded scanl that just uses tuples to return a lazy list on one hand and the final state in the other looks basically like the code for break/span xD
[05:28:03] <EvanR> where in break/span the tail at the break point takes the role of the final state
[05:28:32] <EvanR> much less code than this crazy Unfolding thing
[05:30:25] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994cfb11256a527c2b165.dip0.t-ipconnect.de)
[05:30:40] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[05:30:40] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:31:39] *** Quits: ubert (~Thunderbi@p200300ecdf099487827ed8c05b109aa8.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:31:39] *** ubert1 is now known as ubert
[05:34:01] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:34:24] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[05:35:15] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[05:36:19] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[05:38:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:38:29] *** Quits: IndecisionTree (mike@user/IndecisionTree) (Quit: WeeChat 3.3)
[05:40:15] *** Quits: jacks- (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[05:40:41] *** Joins: califax- (~califax@user/califx)
[05:43:54] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:43:55] *** califax- is now known as califax
[05:44:20] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[05:47:04] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[05:48:13] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[05:51:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Remote host closed the connection)
[05:51:25] *** Joins: ahammer (~ahammer@157.122.68.227)
[05:51:33] *** Quits: jkaye_ (~qicruser@2601:281:8300:7530:ad17:6976:1a41:d704) (Read error: Connection reset by peer)
[05:51:48] *** Joins: burnsidesLlama (~burnsides@client-8-73.eduroam.oxuni.org.uk)
[05:52:35] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[05:54:51] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[05:55:12] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:55:44] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 250 seconds)
[05:55:59] *** Quits: burnsidesLlama (~burnsides@client-8-73.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[05:56:15] *** Joins: neurocyte091709 (~neurocyte@IP-212232084012.dynamic.medianet-world.de)
[05:56:15] *** Quits: neurocyte091709 (~neurocyte@IP-212232084012.dynamic.medianet-world.de) (Changing host)
[05:56:16] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[05:56:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:56:58] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:57:07] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[05:57:20] *** Quits: xff0x (~xff0x@2001:1a81:5213:d00:aaa3:1c56:33b0:7a9e) (Ping timeout: 252 seconds)
[05:57:26] *** Joins: ahammer (~ahammer@157.122.68.227)
[05:57:51] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:57:54] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:57:54] *** neurocyte091709 is now known as neurocyte09170
[05:59:12] *** Joins: xff0x (~xff0x@2001:1a81:5253:5900:c0c8:bfdc:4cf0:476f)
[05:59:30] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Client Quit)
[06:00:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:02:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:04:15] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[06:06:39] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Client Quit)
[06:07:52] *** Joins: pavonia_ (~user@user/siracusa)
[06:08:37] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 256 seconds)
[06:09:06] *** Joins: johnjaye (~pi@154.6.152.74)
[06:09:11] *** Quits: pavonia (~user@user/siracusa) (Ping timeout: 256 seconds)
[06:09:21] *** pavonia_ is now known as pavonia
[06:10:43] *** Joins: ahammer (~ahammer@157.122.68.227)
[06:10:53] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (Ping timeout: 256 seconds)
[06:11:35] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[06:14:20] *** Joins: Hao (~Hao@222-154-98-23-fibre.sparkbb.co.nz)
[06:16:02] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[06:19:08] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 250 seconds)
[06:22:07] *** Quits: acidjnk (~acidjnk@p200300d0c7271e85bcf2712229551d8e.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[06:32:25] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[06:34:06] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[06:34:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[06:35:25] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:35:30] <qrpnxz> are there known problems with C writing to, say, a StorableArray? The foreign function will change the array i give it, but has wrong behaviour. I recreate the example code in C, and it runs as expected. Not sure what to do.
[06:36:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:37:07] <Axman6> I think we'd need to see more code to be able to help
[06:37:16] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[06:37:25] <Inst> yo
[06:37:44] <Inst> I'm wondering, are there feminist groups for Haskell? I've tried to bring up to HF why Haskell should be more aggressively marketed at women
[06:39:11] <qrpnxz> perhaps i shouldn't be using the passed value from withStorableArray even if I'm gonna touch it later
[06:39:42] <qrpnxz> that's probably it. It's gonna get ugly, but i'll try an example without doing that
[06:40:57] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:40:57] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:40:57] *** finn_elija is now known as FinnElija
[06:43:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:44:42] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[06:44:59] *** Quits: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008) (Remote host closed the connection)
[06:45:12] *** Joins: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008)
[06:46:10] <jackson99> what web scraping library is recommended these days?
[06:46:36] <EvanR> I heard tagsoup is cool
[06:47:17] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb)
[06:47:48] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[06:47:57] <dsal> Inst: that's a strange goal.  What are you trying to accomplish there?
[06:48:00] *** Joins: jespada (~jespada@87.74.36.188)
[06:48:14] <jackson99> EvanR thanks I'll give it a try
[06:48:21] <Inst> increasing population of Haskell programmers by targeting underconsidered markets
[06:49:03] <Inst> Haskellers in the main tend to be experienced programmers who know multiple languages
[06:49:27] <dsal> Do you assume that women, in general, are not experienced programmers who know multiple languages?
[06:50:18] <Inst> I assume that men, in general, are not experienced programmers who know multiple languages.
[06:50:36] <Inst> 11% of devs, according to some surveys, self-identified as women.
[06:50:39] <qrpnxz> ?
[06:51:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:52:44] <Inst> there are active initiatives aimed to fix this
[06:53:41] <Inst> https://reshamas.github.io/why-women-are-flourishing-in-r-community-but-lagging-in-python/ <--- interestingly, r is also a functional language.
[06:53:52] <ephemient> at this point in time I'm not convinced the Haskell community is large enough to support outreach programs, nevermind who it's targeted towards
[06:54:03] <qrpnxz> first you have to show it's a problem, no?
[06:54:21] <EvanR> stop making sense right now
[06:54:26] <qrpnxz> lol
[06:54:48] <dsal> I don't think "Haskell:  A language for women" is a plausible pivot.
[06:55:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[06:57:31] <Inst> people are trying, though, I guess it's at the exploratory / experimental stage
[06:57:32] <Inst> https://joyofhaskell.com
[06:57:44] <Inst> co-author of Haskell Programming from First Principles (HaskellBook)
[06:58:25] <Inst> who, mind you, is one of those people for whom Haskell is a first language
[07:00:13] <Inst> ephemient: I'm told it's more a tooling and ecosystem issue
[07:00:13] <qrpnxz> huh, wonder what the differences are between this and huh, wonder what the differences are between this and https://haskellbook.com/
[07:00:23] <Inst> Haskellbook never shuts up
[07:00:33] *** Joins: Guest|45 (~Guest|45@172.56.42.40)
[07:00:40] <Inst> joyofhaskell is a quick overgrown "discover monads by implementing them yourself" book
[07:00:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:01:08] *** Quits: Guest|45 (~Guest|45@172.56.42.40) (Client Quit)
[07:01:22] <qrpnxz> you make both sound bad lol
[07:01:57] <Inst> iirc hacking around until you invent monads yourself is the least offensive way to learn monads, right?
[07:02:20] <ephemient> https://discourse.haskell.org/t/proposing-haskell-foundation-community-grants/3049 the biggest community outreach program now seems to be GSOC which is funded by somebody else. Haskell itself doesn't have anything…
[07:02:22] <dsal> I don't see that as a woman-outreach thing.  it's just a good author with probably a good book, though I've not read it.
[07:02:26] <Axman6> There are quite a lot of prominent frmale and non-binary Haskellers these days, and I haven't seen much in the way of cultural problems which have made it impleasant for people who aren't male to be part of the community. That doens't mean it doesn't exist, but I'm generally impressed with how little of a problem I see
[07:02:28] <qrpnxz> idk about "least offensive" but doesn't sound very efficient
[07:04:29] <qrpnxz> joy goes into lenses apparently, that's nice
[07:05:01] <Inst> it's guided projects
[07:05:13] <Inst> imo the problem with HPFFP is that, well, I'm blaming Chris Allen
[07:05:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:05:22] <EvanR> bandwagons are cool and all but is a beginners book dedicated to monads perpetuating the "you can't haskell without first getting monads" meme
[07:05:22] <EvanR> monads first 
[07:05:22] *** Quits: EvanR (~EvanR@user/evanr) (Remote host closed the connection)
[07:05:26] <Inst> but there seemed to have been two impulses there, one was to make a nice newbie tutorial to Haskell
[07:05:41] *** Joins: EvanR (~EvanR@user/evanr)
[07:06:05] <Inst> Finding Success (and Failure) in Haskell is more targeted at intermediate beginners, i.e, they know recursion and shit
[07:06:20] <Axman6> for someone so new to the language and with so little experience, you sure do have a lot of strong opinions on how things should be
[07:07:50] <monochrom> Dunning-Kruger discusses zero knowledge and infinity opinion.
[07:07:53] <ephemient> I do wonder if it would be easier to teach starting from Purescript - Haskell-like, but with strict evaluation - before expanding to full Haskell
[07:08:00] <qrpnxz> i mean, without IO nothing is gonna happen, so you need at least *a* monad to get by lol
[07:08:01] <monochrom> s/infinity/infinite/
[07:08:24] <ephemient> it might help for *some* people, anyway
[07:08:34] <EvanR> or is IO being a monad a coincidence, and you could technically apply two IO actions with <*> xD
[07:09:16] <ephemient> but I am definitely on the "just ignore Monads until they use the language enough to see repeated patterns" train
[07:09:17] *** Joins: mbuf (~Shakthi@122.174.202.253)
[07:09:19] <EvanR> "since you don't get monads yet, we will do all our work with IO Applicative"
[07:09:49] *** Quits: td_ (~td@muedsl-82-207-238-204.citykom.de) (Ping timeout: 256 seconds)
[07:09:49] <qrpnxz> a lot of the good types happen to be monads yeah, but is it that hard? You just gotta look at the type signatures and make stuff match
[07:10:38] <qrpnxz> if i got a (m a) and a (a -> m b), how do i work with this? well surely (>>=)
[07:10:52] <monochrom> My IO tutorial certainly motivates >>= and return without motivating full-blown monad.
[07:11:12] <qrpnxz> is that not full blown monad
[07:11:16] <qrpnxz> that defines a monad
[07:11:23] <EvanR> m a as future and (a -> m b) as event handler callback
[07:11:32] <monochrom> No I don't bring up the monad laws.
[07:11:33] <EvanR> look, javascript
[07:11:40] *** Joins: td_ (~td@94.134.91.30)
[07:11:54] <qrpnxz> the monad laws are basically "acts like you'd expect"
[07:12:01] <qrpnxz> i could not recite them
[07:12:03] <ephemient> matching up types is not a problem if you're coming from another language with a HM typesystem, but if that's not their background then even that is unfamiliar
[07:12:13] <dibblego> I do exactly what monochrom does
[07:12:47] <monochrom> Instead I explain that (getLine >>=) wants a callback, in "getLine >>= k", k is the callback.
[07:13:03] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[07:13:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:13:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:13:13] *** Joins: wroathe (~wroathe@user/wroathe)
[07:13:21] <qrpnxz> i prefer the railway analogy, it's just composition
[07:13:29] <EvanR> railway?
[07:13:45] <EvanR> :t (<=<)
[07:13:46] <lambdabot> Monad m => (b -> m c) -> (a -> m b) -> a -> m c
[07:13:53] <jackdk> https://www.honeybadger.io/blog/railway-programming-dry-monads/ choo choo
[07:13:54] <monochrom> For people who are OK with callback-oriented programming (so everybody), taking (getLine >>=) as one single unit is a bit easier than taking getLine alone as one single unit.
[07:13:55] <EvanR> ah this is composition
[07:14:16] <qrpnxz> jackdk, yes thanks
[07:14:54] <jackdk> actually I think https://fsharpforfunandprofit.com/rop/ was the original representation, but then it made its way into ruby because the only monads that `dry-rb` offers are basically `Either e`, `Maybe` and some exception-wrangling stuff
[07:15:28] <qrpnxz> right, but it gets across what i'm talking about so, good
[07:16:36] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Read error: Connection reset by peer)
[07:19:49] *** Quits: EvanR (~EvanR@user/evanr) (Quit: Leaving)
[07:20:19] <jackdk> monochrom: I think that's right, I felt like I understood `(>=>)` first, then `(>>=)`, then `join`. I also hear that analogies to promises seem to go over well when explaining the IO type
[07:20:28] *** Joins: Guest83 (~Guest83@49.36.127.54)
[07:20:30] <qrpnxz> I explained Monad to someone a bit ago by first explaining a Functor as a mappable thing, an Applicative Functor as allowing function application in a context (i elaborated), and a Monad as an Applicative Functor you can flatten, and they were rather satisfied with that. That's a sort of container-oriented look at it.
[07:20:33] <Guest83> hello!
[07:20:36] <qrpnxz> hi
[07:20:37] <Guest83> can i ask for help here?
[07:20:39] <jackdk> hello!
[07:20:50] <qrpnxz> yes
[07:20:56] <jackdk> yes, though in general it's best to just ask your question instead of first asking to ask your question. What's up?
[07:21:06] <Guest83> sorry!
[07:21:11] <Guest83> okay so i'm trying to setup a simple score system
[07:21:11] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[07:21:16] <Inst> isn't that sort of the point, though, Axman6?
[07:21:18] <Guest83> my current system
[07:21:20] <Guest83>     else if command =="scoreup"
[07:21:20] <Guest83>         then do
[07:21:21] <Guest83>             increase <- readIORef score_im
[07:21:21] <Guest83>             writeIORef score_im increase + 10
[07:21:22] <Guest83>             putStrLn "Score increased by 10"
[07:21:22] <Guest83>     else if command == "score"
[07:21:23] <jackdk> aaa
[07:21:23] <Guest83>         then do
[07:21:23] <Guest83>             score_m <- readIORef score_im
[07:21:24] <Guest83>             print score_m
[07:21:26] <jackdk> @where paste
[07:21:27] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[07:21:28] <qrpnxz> o oh
[07:21:38] <Guest83> https://paste.tomsmeding.com/0LJ6RxAb
[07:21:39] <jackdk> sorry, should've said that sooner
[07:21:45] <Inst> communities socialize, have dogmas, etc, newbies don't have the dogmas so you get new ideas, most of them are bad, but a small minority might be both original and useful
[07:22:44] <Guest83> what i'm trying to do is allow the. scoreup command to increase the value of score by 10
[07:22:46] <Guest83> what i
[07:22:59] <Guest83> what i've realised is that variables are immutable
[07:23:08] <Guest83> BUT, an article i found said that this would work
[07:23:26] <Guest83> article i'm using : http://www.michaelburge.us/2017/08/15/how-do-i-modify-a-variable-in-haskell.html
[07:23:42] <Guest83> their idea of this is https://paste.tomsmeding.com/C193lJ4O
[07:23:46] <monochrom> Yes you can treat score_im as a mutable variable. writeIORef is exactly right.
[07:24:02] <Guest83> mhm BUT
[07:24:09] <Guest83> this code when rand
[07:24:11] <Guest83> this code when ran*
[07:24:32] <Guest83> doesn't work
[07:24:38] <Guest83> > score
[07:24:39] <Guest83> 0
[07:24:39] <Guest83> > scoreup
[07:24:39] <lambdabot>  error: Variable not in scope: score
[07:24:40] <Guest83> Score increased by 10
[07:24:40] <Guest83> > score
[07:24:40] <lambdabot>  error: Variable not in scope: scoreup
[07:24:41] <Guest83> 0
[07:24:41] <Guest83> >
[07:24:41] <lambdabot>  error: Variable not in scope: score
[07:24:53] <monochrom> Then the problem is elsewhere.
[07:24:59] <Guest83> yeah so my linter
[07:25:08] <jackson99> there are ways to avoid IORef, though. for example you can implement game loop with recursion, and pass "updated" state on every recursive call
[07:25:18] <Guest83> i see
[07:25:24] <Guest83> my linter tells me something else though
[07:25:26] <jackdk> jackson99: true - but let's seee if we can get Guest83 's approach to work first.
[07:25:36] <Guest83> https://paste.tomsmeding.com/nVSxcP4k
[07:25:58] <Guest83> that is what my linter tells me
[07:26:03] <monochrom> writeIORef score_im (increase + 10)
[07:26:06] <jackdk> > :t writeIORef
[07:26:08] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[07:26:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:26:15] <jackdk> % :t writeIORef
[07:26:16] <yahb> jackdk: IORef a -> a -> IO ()
[07:26:39] <Guest83> i'm confused lol
[07:26:59] <monochrom> You need parentheses around (increase + 10)
[07:27:06] <Guest83> oh lambda bot is a bot that compiled haskell code not an annoying user
[07:27:34] <Guest83> that fixes the linter error but "scoreup" still prints 0
[07:27:51] <Guest83> lemme show you guys the entire way the system works
[07:27:53] <monochrom> Therefore the problem is elsewhere.
[07:27:56] <dsal> When you say "linter" do you mean "compiler" ?
[07:28:03] <Guest83> https://paste.tomsmeding.com/EFHMVbMh here is the entire code
[07:28:10] <Guest83> no the linter in my IDE
[07:28:15] <Guest83> no the linter in my code editor*
[07:28:53] <jackdk> I think dsal's point is that's an error from GHC, which is probably coming through your editor via haskell-language-server or similar
[07:28:54] <monochrom> You are creating a brand new score_im every iteration, as opposed to reusing the first one.
[07:29:29] <Guest83> jackdk thats right yeah
[07:29:44] <dsal> A linter tells you that you might not be doing something the best way.  The compiler tells you that you're not doing anything at all that the language will accept.
[07:29:45] <Guest83> monochrom is that what is resetting the score
[07:29:47] <monochrom> Perform your newIORef in main.  Give it to result or parse.
[07:29:51] <monochrom> Yes.
[07:29:52] <ephemient> and the same would happen in any language, not just Haskell
[07:30:27] <Guest83> lemme try to implement that
[07:32:20] <Guest83> monochrom i think i did it but it still doesn't work
[07:32:33] <Guest83> https://paste.tomsmeding.com/Way1L6iv
[07:32:47] <monochrom> Same difference.
[07:32:55] <Guest83> hm?
[07:33:02] <jackdk> you're halfway there - it recreates the IORef each time result calls itself
[07:33:07] <Guest83> oh!!!
[07:33:13] <Guest83> so i need to put it in main instead
[07:33:20] <Guest83> or...?
[07:33:27] <dsal> "monochrom> Perform your newIORef in main.  Give it to result or parse."
[07:33:32] <jackdk> that's right, and this would be true for pretty much any language
[07:33:52] <monochrom> "int x = 0;  for (;;) { ... }" vs "for (;;) { int x = 0; ... }"
[07:34:00] *** Quits: Hao (~Hao@222-154-98-23-fibre.sparkbb.co.nz) (Quit: Client closed)
[07:34:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:34:13] <Guest83> i see
[07:34:15] <Guest83> one second
[07:35:05] <Guest83> result score_ii =
[07:35:05] <Guest83>   do
[07:35:05] <Guest83>     putStr "> "
[07:35:06] <Guest83>     input <- getLine
[07:35:06] <Guest83>     parse input score_ii
[07:35:07] <Guest83>     result
[07:35:07] <Guest83> main =
[07:35:08] <Guest83>   do
[07:35:08] <Guest83>     score_im <- newIORef 0
[07:35:09] <Guest83>     result score_im
[07:35:10] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[07:35:16] <Guest83> https://paste.tomsmeding.com/4IvHdfjQ
[07:35:18] <monochrom> Yeah like that.
[07:35:19] <jackson99> as a sidenote, even if you want to use IORef, there's zero reason for parse to accept one. just return the result
[07:35:25] <Guest83> this gives me an error though
[07:35:37] <jackson99> s/result/score
[07:35:59] <Guest83> https://paste.tomsmeding.com/nz9KhRuW <- error
[07:36:15] <dsal> It's helpful to paste your code and the error at the same time.
[07:36:28] <monochrom> Have you modified parse to expect the extra parameter?
[07:36:51] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[07:36:57] <Guest83> i think so
[07:37:06] <Guest83> yeeup
[07:37:19] <jackdk> when you recursively call `result`, you need to pass it the ref again
[07:37:27] <Guest83> https://paste.tomsmeding.com/VduVbmjY <- code
[07:37:27] <Guest83> https://paste.tomsmeding.com/nz9KhRuW <- error
[07:37:35] <Guest83> jackdk i don't udnerstand
[07:37:35] <monochrom> Oh, that.
[07:37:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:37:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:37:59] *** Joins: wroathe (~wroathe@user/wroathe)
[07:37:59] <jackdk> L35 in the paste calls `result` with no arguments, but you've changed it to require one
[07:38:12] <jackdk> so it should now be `result score_ii`
[07:38:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:38:18] <Guest83> oh!!!!
[07:38:25] <jackson99> there's no reason to give score different names. they are all different variables in their own scope
[07:38:27] <Guest83> i forgot to change the recursive call haha
[07:38:43] <Guest83> makes sense jackson99 but its for readbility issues haha
[07:38:54] <jackson99> I'm not sure it helps readability :)
[07:38:58] <jackdk> (If you want an infinite loop, once you get this working you can think about using `Control.Monad.forever`)
[07:39:02] <Guest83> omg amazing! it works!!!!
[07:39:06] <jackdk> \o/
[07:39:11] <Guest83> thanks a bunch guys
[07:39:24] <Guest83> i'm sorry for the guest name haha, y'all can call me snowneo
[07:39:27] <dsal> The next trick is to get rid of the ioref
[07:39:32] <Guest83> i'm going to start hanging out here more often
[07:39:42] *** Quits: Guest83 (~Guest83@49.36.127.54) (Quit: Client closed)
[07:39:53] *** Joins: SnowNeo (~SnowNeo@49.36.127.54)
[07:40:01] <SnowNeo> i'm back!
[07:40:07] <SnowNeo> with an actual name this time
[07:40:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[07:40:42] <jackdk> so I think jackson99 and dsal are right - a good next exercise might be to pass the current score around as a parameter instead of using the IORef
[07:40:44] <dsal> Oh, I thought I'd never used an IORef in a program, but I found one where I did.
[07:41:02] <SnowNeo> i see
[07:41:19] <SnowNeo> i'm going to have to look into that
[07:41:28] <SnowNeo> my class starts in 4 minutes haha
[07:41:44] <dsal> Definitely wouldn't use an IORef for this.
[07:42:04] <SnowNeo> my first idea was to do it the python way (i'm really active in their discord community)
[07:42:21] <SnowNeo> but then a friend let me know vcariables a immutable
[07:42:47] <SnowNeo> http://www.michaelburge.us/2017/08/15/how-do-i-modify-a-variable-in-haskell.html <- place where i got to see iORef
[07:43:31] <jackdk>  It's a natural question to ask if you're used to solving problems with mutable variables, but it's also often not the right question to ask here
[07:43:46] <SnowNeo> haha
[07:43:54] <SnowNeo> i'm used to solving problems with mutable ones yes
[07:44:00] <jackdk> (and you get a lot more than you give up, once you start doing everything functionally)
[07:44:01] <SnowNeo> haskell is my first functional language
[07:44:31] <dsal> It's a good habit to break.  It's completely unnecessary for this, but it's one of a few problems.
[07:44:38] <dsal> What would you say `parse` is meant to do?
[07:44:45] <SnowNeo> i don't want to give up since i mainly work in languages such as java and python but i'm learning haskell since i'm intrguied by the idea of everything being a function
[07:45:07] <SnowNeo> well parse actually parses the command
[07:45:08] <Axman6> I would very, very strongly recommend you don't even attempt to use IORefs and instead pass around the value you want to change
[07:45:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:45:24] <SnowNeo> how would i do that, could you give me anexample
[07:45:26] <dsal> By the name, I'd expect it to take some kind of input and return `Maybe SomeCommand`
[07:45:49] <SnowNeo> `parse` also contains the logic for taking out well what the command says for example the exit and about command
[07:46:15] <dsal> Yeah.  So it both parses input and interacts with the process state.
[07:46:16] <jackson99> SnowNeo, return new score value from parse, call result recursively with the returned and updated score
[07:46:23] <SnowNeo> if you guys are familiar with python,`while True:` is what i tried to recreate with the result function
[07:46:36] <Inst> what kind of problem are you trying to solve?
[07:46:39] <dsal> :t forever
[07:46:40] <lambdabot> Applicative f => f a -> f b
[07:46:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:46:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:46:43] *** Joins: wroathe (~wroathe@user/wroathe)
[07:46:59] <SnowNeo> jackson99 i'll try to tackle that when my class ends forsho
[07:47:22] <SnowNeo> Inst i'm trying to make a simple text based rpg
[07:47:25] <Inst> oh guest83 ioref
[07:47:39] <SnowNeo> yes! i just changed my name to an actuall name
[07:47:43] <Inst> if you must have mutability, just store everything in a temp file and handle it that way
[07:47:54] <Axman6> ... no
[07:48:04] <dsal> SnowNeo: It's really helpful to think of your types.  Even by name.  `parse` doesn't sound like it should have any side effects.
[07:48:11] <SnowNeo> i don't think i need file thing for this
[07:48:24] <Axman6> you don't, Inst is giving you poor advice
[07:48:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:48:39] <SnowNeo> makes sense dsal i'll make note of that when i reopen my project after class
[07:48:48] <SnowNeo> i'm sure they're just trying to help
[07:49:10] <SnowNeo> i think a file storage system for a realtime game where i don't really store scores
[07:49:21] <SnowNeo> would be slow and suffering for noreason
[07:50:04] <Axman6> if you want to save state when you exit, a file is fine, but it's not what you want to use for storing state in your program while it's running
[07:50:32] <SnowNeo> yeeup
[07:50:39] <SnowNeo> i don't want this to be a saved state game
[07:50:50] <arahael> I've used temp files myself again and again. Strongly recommended avoiding that shit. :(
[07:50:58] <SnowNeo> just a simpple game someone can run in like 5 seconds to have a short 5 minute game
[07:51:10] <SnowNeo> are temp files more difficult to handle than normal ones?
[07:51:13] <arahael> You're basically implementing a crappy, half-assed database.  Just use a pre-existing database, they're common, and solve this exacct issue.
[07:51:28] <arahael> And sqlite is amazing.
[07:51:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:52:52] <Axman6> it sounds like files and saving state aren't necessary at all, so we should probably move off the topic
[07:52:57] <jackdk> Axman6: +1
[07:53:51] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[07:56:42] <qrpnxz> ah what the hell, suddenly it's working. Is this UB?! I have no idea what changed.
[07:56:43] <glguy> I just learned something about ViewPatterns; you can chain them
[07:56:46] <glguy> wakeNetwork :: (IntMap Effect -> ([Packet], IntMap Effect)) -> System -> [Event]
[07:56:48] <glguy> wakeNetwork f (networkF f -> (ps, enq ps -> idle -> events)) = events
[07:57:25] <glguy> ``enq ps -> idle -> events``
[07:58:25] <glguy> I'm not advocating it; I just hadn't thought to try before
[07:58:46] *** Quits: SnowNeo (~SnowNeo@49.36.127.54) (Quit: Client closed)
[07:58:53] <dsal> Oh neat.  I've seen people do nested chains.  I often use view patterns and end up finding I've just made things worse.  heh
[07:59:31] *** Quits: vglfr (~vglfr@46.96.161.71) (Ping timeout: 256 seconds)
[07:59:43] <Axman6> SnowNeo: if it were me, I would start by thinking about the what commands I wanted to execute and define a data type: data Command = Exit | About | ScoreUp | Score; then I would have a function parseCommand :: String -> Maybe Command. Then you can have a function with type executeCommand :: Int -> Command -> IO Int (IO so you can print things)
[08:00:02] <Axman6> glguy: looks weirdly like C struct pointer field syntax
[08:00:58] <dsal> % let f (take 2 -> [read -> a, read -> b] ) = a + b  in    f ["2", "3", "4"]
[08:00:58] <yahb> dsal: 5
[08:01:23] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[08:04:56] <glguy> I was going back and playing with one of my favorite old AoC problems, the 2019 intcode 50-machine network sim ; had an idea for making the code nicer https://adventofcode.com/2019/day/23
[08:13:59] <glguy> probably a couple years late for anyone to care, but in case anyone remembers doing that one https://glguy.net/advent/sln_2019_23/Main.html
[08:14:18] <qrpnxz> oh man, i think my problem was just a build system issue! I can't believe it.
[08:14:19] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:15:07] *** Joins: vysn (~vysn@user/vysn)
[08:17:00] <Axman6> welcome to the world of C programming?
[08:17:47] <Axman6> I've been fighting C for the last few days. I seem to have run into a problem where GHC's implementation of memcpy randomly decides it's just not going to stop copying and fills up all my ram
[08:18:35] <glguy> have you tried adding more ram?
[08:18:54] <Axman6> well, since it is only supposed to be copying 28 bytes, it is problematic
[08:20:10] <int-e> glguy: oh I vaguely remember... I ended up with a [Reply] -> [Request] style of interaction that year
[08:20:13] <qrpnxz> it's my own fault, i was building the project myself cause i don't want to mess with Cabal et al., but since i'm little experienced with that in GHC, i didn't have the dependencies right, and work didn't happen
[08:20:32] <jackdk> messing with cabal is likely to be much less frustrating
[08:20:47] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:21:22] <qrpnxz> doubt it, now that i got it right it's great.
[08:21:39] <glguy> int-e: my interpreter produced https://hackage.haskell.org/package/intcode-0.3.0.0/docs/Intcode.html#t:Effect , but I had a shortcut function for using it as a: [Int] -> [Int]
[08:22:30] <qrpnxz> speaking of effects, why is the prototypical state function (s -> (a, s)) rather than (s -> (s, a)) ?
[08:22:59] <qrpnxz> well, i suppose if you have to pass the state in, you'll want to get the state out in the usual case
[08:25:07] *** Joins: img (~img@user/img)
[08:25:12] <Axman6> or (s -> (a -> s -> r) -> r)
[08:25:24] <jackdk> I would like to know this also, as I always get a little sad that its functor instance isn't just the composition of ((->) s) and (s,)
[08:26:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b997:c1f9:27c:1247) (Ping timeout: 250 seconds)
[08:27:43] <int-e> I suppose we care more about the value than the successor state, so we put the value first?
[08:28:13] <int-e> It is an arbitrary choice.
[08:32:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:33:42] <Axman6> I agree that composing the two functions from state's... adjunction? would be nice
[08:34:31] <dolio> It is, though. You just can't use it as a type class instance in Haskell.
[08:35:45] <Axman6> functors*
[08:36:03] *** Quits: swistak (~swistak@185.21.216.141) (Ping timeout: 250 seconds)
[08:36:12] <dolio> In category theory it's not uncommon to put the S on the right in the adjunction, because then it stays in the right order, in a way.
[08:36:41] <dolio> curry instead of curry+flip.
[08:36:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:37:36] <dolio> Sometimes reordering is a big deal.
[08:38:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:39:04] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb)
[08:42:03] <int-e> :t unfoldr
[08:42:04] <lambdabot> (b -> Maybe (a, b)) -> b -> [a]
[08:43:57] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:a09c:720a:f4a0:1ac1) (Ping timeout: 240 seconds)
[08:43:59] <int-e> (b is a state, so there's another precedent for that argument order)
[08:48:17] <energizer> Is there a haskell implementation of python/rust/swift iterators? where the iteration is managed externally by the caller rather than internally by a HOF
[08:49:39] <monochrom> My http://www.vex.net/~trebla/haskell/cont.xhtml#yield comes close.  But I wouldn't go any closer.
[08:51:52] <jackdk> it would also be the `next` of any streaming type, right? like `streaming`'s `Streaming.Prelude.next :: Monad m => Stream (Of a) m r -> m (Either r (a, Stream (Of a) m r))`
[08:52:59] <int-e> yeah also the foundation of various stream fusions implementations (an old one for lists is  https://hackage.haskell.org/package/stream-fusion-0.1.2.5/docs/Data-Stream.html ...actual uses occur in bytestring and vector, I believe)
[08:53:24] <energizer> where does the iteration state live in a stream?: in the caller or the stream object?
[08:53:58] <monochrom> Both?
[08:54:10] <monochrom> In the stream object, but the caller owns the stream object.
[08:55:04] *** Joins: domini_ (~domini@22.112.235.77.dyn.idknet.com)
[08:55:11] <int-e> (but the caller can't use the state except through the stream's step function)
[08:55:19] *** Quits: domini_ (~domini@22.112.235.77.dyn.idknet.com) (Remote host closed the connection)
[08:56:32] <energizer> ok so that's like python
[08:57:22] <energizer> the alternative being an indexable list where the caller just indexes 0 and then 1 and then 2 ...
[08:58:37] <energizer> python style has basically hidden mutable state; otoh the indexable style is stateless but means the stream accumulates in memory as you read through it
[08:58:49] <jackdk> remember that list index `(!!)` is O(n) in Haskell, but if you want an indexed walk through the list you can zip it with `[0..]`
[08:59:03] <energizer> yeah so s/list/vector or whatever
[08:59:07] <jackdk> > zip [0..] ['a', 'b', 'c']
[08:59:08] <lambdabot>  [(0,'a'),(1,'b'),(2,'c')]
[09:00:31] <int-e> operationally, a lazy list is pretty much the same as an iterator anyway; there's a "next" operation (force the outermost constructor, (:) if there's another element; [] if everything is consumed), and thunks capture the hidden state.
[09:00:47] <int-e> at least as long as you consume the list once
[09:01:04] *** Joins: swistak (~swistak@185.21.216.141)
[09:01:40] <int-e> s/iterator/generator/ is a bit more accurate
[09:06:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:08:22] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[09:13:11] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[09:16:32] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[09:22:55] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[09:25:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[09:27:50] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[09:29:05] *** Joins: zaquest (~notzaques@5.130.79.72)
[09:29:46] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:30:23] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:87f:3f13:7a62:d6c7)
[09:35:43] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:a09c:720a:f4a0:1ac1)
[09:35:57] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[09:39:07] *** Joins: chomwitt (~chomwitt@ppp-94-67-201-202.home.otenet.gr)
[09:40:06] *** Quits: chomwitt (~chomwitt@ppp-94-67-201-202.home.otenet.gr) (Remote host closed the connection)
[09:42:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:42:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[09:43:10] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:44:58] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[09:45:26] *** Joins: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374)
[09:46:18] *** Joins: fef (~thedawn@user/thedawn)
[09:48:13] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[09:48:23] *** Joins: Erutuon (~Erutuon@user/erutuon)
[09:48:37] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 240 seconds)
[09:50:57] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[09:52:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[09:54:05] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[09:55:29] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:58:15] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[09:59:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:59:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:59:53] *** Joins: wroathe (~wroathe@user/wroathe)
[10:03:06] *** Joins: razetime (~quassel@49.207.203.87)
[10:03:06] *** Quits: razetime (~quassel@49.207.203.87) (Client Quit)
[10:03:11] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[10:04:05] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Remote host closed the connection)
[10:04:28] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[10:04:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:05:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[10:08:10] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[10:10:45] *** Quits: yauhsien_ (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:11:38] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[10:12:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[10:12:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:13:00] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:13:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:15:08] *** Joins: indiana-bones (~indignant@94.140.8.115)
[10:16:53] *** Joins: SnowNeo (~SnowNeo@49.36.127.54)
[10:16:56] <SnowNeo> hello!
[10:17:03] <SnowNeo> i'm back
[10:17:11] <SnowNeo> anyone here?
[10:20:26] <jackdk> shhhh... nobody say anything
[10:20:29] <jackdk> I mean hi SnowNeo 
[10:21:45] *** Quits: SnowNeo (~SnowNeo@49.36.127.54) (Client Quit)
[10:22:17] <Axman6> oof
[10:23:10] <jackdk> yeah oof =|
[10:24:46] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:26:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:29:07] *** Joins: ksqsf (~user@2001:da8:d800:611:dceb:3079:7447:6f34)
[10:30:02] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[10:30:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:30:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:30:41] *** Joins: wroathe (~wroathe@user/wroathe)
[10:30:53] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:a09c:720a:f4a0:1ac1) (Remote host closed the connection)
[10:32:12] *** Joins: SnowNeo (~SnowNeo@49.36.127.54)
[10:32:14] <SnowNeo> hi
[10:32:16] <SnowNeo> anyone here?
[10:32:33] <jackdk> SnowNeo: there's a few of us yea
[10:32:40] <jackdk> I was worried I'd scared you off
[10:32:41] <SnowNeo> ayee i'm back
[10:32:51] <SnowNeo> no no ahha, i had to screenshare and doc and assignment for class
[10:32:54] <SnowNeo> do*
[10:32:58] <SnowNeo> an*
[10:33:08] <SnowNeo> but i'm free now so back to haskell
[10:33:30] <SnowNeo> oki so what i'm trying to do now is make some of my favorite math concepts in haskell
[10:33:46] <SnowNeo> right now i'm making one of my favorite ones
[10:34:01] <SnowNeo> it says, "the sum of the first n number of odd numbers is equal to n square"
[10:34:12] <SnowNeo> so i made something and loaded up ghci
[10:34:18] <SnowNeo> upong running this :t take n[1,3..n*1000]
[10:34:33] <SnowNeo> i get to know that this is a tuple of (Num a, Enum a)
[10:34:52] <SnowNeo> what i want to do is get the sum of this tuple
[10:35:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:35:51] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[10:36:34] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:37:08] <SnowNeo> any help?
[10:37:12] <SnowNeo> i tried to dothis
[10:37:27] <SnowNeo> sum take n[1,3..n*1000]
[10:37:46] <SnowNeo> but it errored out with https://paste.tomsmeding.com/tYn0zBC2
[10:38:07] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:38:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:38:49] *** Joins: _ht (~quassel@2a02:a468:b619:1:b63a:bf2b:8ee:fbf2)
[10:39:18] <SnowNeo> nvm i got it
[10:39:44] *** Quits: SnowNeo (~SnowNeo@49.36.127.54) (Quit: Client closed)
[10:40:29] *** Quits: arahael (~arahael@118.208.232.68) (Quit: WeeChat 3.0)
[10:40:37] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[10:41:12] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[10:41:47] <Axman6> Glad we could help!
[10:44:01] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[10:44:57] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Ping timeout: 240 seconds)
[10:45:43] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[10:51:03] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[10:54:04] *** Joins: schweers (~user@i59F6300A.versanet.de)
[10:55:12] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[10:59:19] <Inst> it's funnier because he exited before you gave a sardonic response
[10:59:39] <Inst> anyways, is there a way to get the console to detect a keypress without using Haskeline?
[11:00:25] <Inst> also, my program will throw an exception if openFile fails
[11:00:37] *** Quits: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008) (Ping timeout: 240 seconds)
[11:00:41] <Inst> i can get around it by using a Maybe type to check and not divert to openFile, but this feels ugly
[11:01:14] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:58ed:c475:7de8:f0f9)
[11:02:09] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[11:03:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:03:37] *** Joins: razetime (~quassel@49.207.203.87)
[11:04:22] <dibblego> have you tried it yet?
[11:11:30] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[11:15:05] *** Quits: emf (~emf@2620:10d:c090:400::5:3f1) (Ping timeout: 250 seconds)
[11:15:48] <ksqsf> Inst: I believe you'll need to set terminal attributes using smth like tcsetattr()
[11:16:09] <Inst> I can't figure out how to get Haskeline to work
[11:16:59] *** Joins: emf (~emf@2620:10d:c090:400::5:2d26)
[11:17:20] <ksqsf> I never used haskeline, but I think it's the best option if you have nothing against it
[11:17:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:18:08] <ksqsf> I once used terminfo for a similar purpose; in case it's helpful: https://paste.tomsmeding.com/7KSLBIU7
[11:20:33] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[11:20:48] <ephemient> https://www.reddit.com/r/adventofcode/comments/e9zgse/2019_day_13_solutions/faom67y/ I have some code that uses termios directly to read terminal input immediately
[11:21:11] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[11:21:59] *** Joins: max22- (~maxime@2a01cb08833598000a8db68817efc706.ipv6.abo.wanadoo.fr)
[11:24:30] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[11:26:55] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[11:28:49] *** Parts: ksqsf (~user@2001:da8:d800:611:dceb:3079:7447:6f34) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[11:29:15] *** Joins: ksqsf (~user@2001:da8:d800:611:dceb:3079:7447:6f34)
[11:33:08] *** Joins: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[11:33:23] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Ping timeout: 252 seconds)
[11:37:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:37:30] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[11:41:15] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[11:41:28] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[11:41:41] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[11:42:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:45:37] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 256 seconds)
[11:46:02] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:47:00] *** Joins: mmhat (~mmh@55d4708c.access.ecotel.net)
[11:48:02] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[11:49:58] <polux> Hello! I am trying to map over the type of error in MonadError. Is it possible to write a function of type (MonadError t m, MonadError t' m') => (t -> t') -> m a -> m' a or something like that? Does it even make sense? I have a hunch it doesn't because it assumes MonadError somehow commutes enough with the other effects in m to lift mapErrorT, but
[11:49:58] <polux> nothing guarantees this is always the case.
[11:50:38] *** Quits: ksqsf (~user@2001:da8:d800:611:dceb:3079:7447:6f34) (Ping timeout: 250 seconds)
[11:50:48] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:52:17] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Ping timeout: 240 seconds)
[11:56:07] *** Joins: chele (~chele@user/chele)
[11:57:52] *** Joins: cheater (~Username@user/cheater)
[11:59:48] <ephemient> \f m -> (pure <$> m) `catchError` (pure . throwError . f) :: (MonadError t m, MonadError t' m') => (t -> t') -> m a -> m (m' a)
[12:00:09] <ephemient> is probably about as close as you can get in general, since there's no reason you should be able to join m and m'
[12:00:42] <polux> good point yes, thanks a lot!
[12:01:37] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 240 seconds)
[12:04:09] *** Joins: dextaa (~DV@user/dextaa)
[12:04:55] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:04:57] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[12:06:01] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:81fe:1ebc:de4c:76ed)
[12:06:26] <mastarija> Is there a paper on Haskell lenses I could read?
[12:06:59] <c_wraith> there are a number of papers on related theoretical concepts, but none will help you use any of the existing libraries.
[12:07:08] <c_wraith> So..  what's your goal?
[12:07:22] <mastarija> To get a theoretical background
[12:07:35] <mastarija> Hopefully in terms of category theory
[12:08:06] <c_wraith> ok, there's a really good paper for that - which I can't remember the name of.  I know how I can find it, but it'll take me a few minutes :)
[12:08:10] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[12:08:31] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[12:09:07] *** Joins: gustik (~gustik@2a01:c844:2436:6920:9e9:f97c:41d1:634c)
[12:09:56] <mastarija> c_wraith, cool thanks!
[12:10:44] <c_wraith> ok, it's a blog post rather than a paper, but it has a *lot* of links to papers.  https://julesh.com/2018/08/16/lenses-for-philosophers/
[12:12:04] <mastarija> Ah... I've just skimmed through that this morning.
[12:12:10] <c_wraith> hah.  sorry then :)
[12:12:14] <mastarija> haha, np.
[12:12:36] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[12:12:37] <c_wraith> Have you checked Bartoz's blog?
[12:12:49] <c_wraith> I think he made several posts about category theory and lenses
[12:13:16] <c_wraith> Yes, he has: https://bartoszmilewski.com/
[12:17:06] *** Joins: ksqsf (~user@2001:da8:d800:611:dceb:3079:7447:6f34)
[12:17:29] *** Quits: schweers (~user@i59F6300A.versanet.de) (Remote host closed the connection)
[12:18:22] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[12:18:39] *** Joins: michalz (~michalz@185.246.204.104)
[12:18:59] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:21:25] *** Quits: ksqsf (~user@2001:da8:d800:611:dceb:3079:7447:6f34) (Ping timeout: 240 seconds)
[12:21:28] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:23:23] <mastarija> c_wraith, I've actually found something right now on ncatlab
[12:23:39] <mastarija> http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/lens+(in+computer+science)
[12:23:58] <mastarija> I somehow always forget that this great resource exists
[12:27:16] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:30:09] *** Quits: boxscape (~boxscape@user/boxscape) (Quit: You have been kicked for being idle)
[12:30:16] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: You have been kicked for being idle)
[12:30:52] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[12:30:57] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:81fe:1ebc:de4c:76ed) (Quit: Leaving)
[12:31:12] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[12:32:12] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[12:33:41] *** Joins: ksqsf (~user@2001:da8:d800:611:1c16:6357:9dab:49e9)
[12:38:18] *** Quits: ksqsf (~user@2001:da8:d800:611:1c16:6357:9dab:49e9) (Ping timeout: 250 seconds)
[12:39:22] <tomsmeding> some domain misconfiguration there
[12:41:51] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[12:43:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:46:34] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:46:40] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[12:47:31] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:31] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:34] *** allbery_b is now known as geekosaur
[12:56:10] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[12:57:17] *** Joins: acidjnk (~acidjnk@p200300d0c7271e850c94254067925f57.dip0.t-ipconnect.de)
[12:57:18] *** Quits: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[13:03:01] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:05:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[13:06:15] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[13:07:42] *** Joins: mikoto-chan (~mikoto-ch@213-139-178-171.co.dnainternet.fi)
[13:09:00] *** Quits: indiana-bones (~indignant@94.140.8.115) (Quit: Leaving)
[13:11:36] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:11:49] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646)
[13:16:28] <tomsmeding> Inst: FWIW https://paste.tomsmeding.com/FKk61OAc
[13:16:52] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb)
[13:17:14] <tomsmeding> poor man's solution, like arrow keys and function keys will just produce some escape sequences as you'll notice, but might be enough for your purposes
[13:18:05] <Inst> thanks, will check
[13:18:27] *** Joins: cstml (~cstml@user/cstml)
[13:19:02] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb) (Client Quit)
[13:21:06] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[13:21:37] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Client Quit)
[13:21:47] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[13:25:22] *** Joins: __monty__ (~toonn@user/toonn)
[13:30:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:31:01] *** Quits: mikoto-chan (~mikoto-ch@213-139-178-171.co.dnainternet.fi) (Ping timeout: 256 seconds)
[13:34:06] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb)
[13:38:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:44:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[13:44:29] *** Joins: cheater (~Username@user/cheater)
[13:45:47] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[13:47:07] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:47:23] *** Joins: razetime (~quassel@49.207.203.87)
[13:48:50] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[13:49:28] *** Joins: euouae (~euouae@user/euouae)
[13:49:42] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[13:49:43] <euouae> Hello I am looking at the source code in Data.List
[13:50:00] <euouae> What are these Rules that I see in the comments? 
[13:50:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:50:29] <euouae> ooh they're GHC rules, https://wiki.haskell.org/GHC/Using_rules I should've guessed 
[13:50:44] <c_wraith> those are actually pragmas, not comments.  (Instructions to the compiler that aren't part of the language itself)
[13:50:53] <c_wraith> Pragmas are enclosed in {-# #-}
[13:51:05] <c_wraith> Note the #s, which are not part of the comments
[13:51:16] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[13:51:35] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[13:51:49] <euouae> right
[13:51:59] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:53:12] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[13:53:15] <euouae> Unfortunately that means the source code is harder to read... right?
[13:54:54] <merijn> euouae: yes, no, maybe, it depends :p
[13:55:01] <c_wraith> Most pragmas aren't important for meaning of the code, only for details that affect optimization
[13:55:02] <euouae> for example `concat xs = build (\c n -> foldr (\x y -> foldr c y x) n xs)` and `build g = g (:) []` with comments about how `build` is specially crafted to avoid GHC's simplifier?
[13:55:27] <merijn> euouae: effectively, the RULES in Data.List are optimisation that avoid building intermediate lists
[13:55:34] <c_wraith> the Language pragma is the one major exception, as it changes what code means in a lot of cases
[13:55:48] <euouae> merijn at the syntactic level?
[13:56:25] <merijn> euouae: Imagine "map f . map g", the 'map g' will build a new list, and so will 'map f' so building a list twice...you could replace it with 'map (f . g)' and only build one list
[13:56:48] <merijn> euouae: The rules are there to capture a lot of similar cases and transform them to be more efficient
[13:57:04] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:57:05] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:57:07] <c_wraith> You should basically ignore RULES pragmas in source, unless you're trying to understand performance characteristics
[13:57:15] <merijn> euouae: But that's not really important for the *meaning* of the code
[13:57:28] <euouae> OK I think I get it 
[13:57:36] <c_wraith> ...  Except that it's possible to write buggy RULES.  That's an unfortunate reality, but I've never actually seen it come up.
[13:57:38] <euouae> but I'm still curious, how is the map optimization accomplished?
[13:57:39] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[13:57:44] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[13:58:03] <merijn> euouae: Pretty sure there's a rule for converting 'map f . map g' into 'map (f . g)' :p
[13:58:03] <euouae> c_wraith so then they can't be ignored until they're fixed :P
[13:58:34] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net)
[13:58:52] <merijn> euouae: The thing about rules is that they can apply *after* inlining code. So during compilation when the compiler inlines stuff, it might find matches for the pattern in rules that the programmer can't/doesn't see
[13:58:55] <euouae> merijn got it, so it's a literal rewrite of the source code
[13:59:25] <euouae> nice
[13:59:44] <c_wraith> in the more general case though though, there are rules for using foldr on a list created by build that skips actually allocating the intermediate list
[13:59:48] <merijn> euouae: Almost nobody (who isn't a beginner) will end up *writing* 'map f . map g' over 'map (f . g)', but once there's 10 different helpers, etc. involved code like "foo (+) bar" might up *doing* that anyway
[14:00:05] <merijn> the same for folds, repeated ++, etc.
[14:01:19] <euouae> c_wraith oh so `build` is useful insofar as writing rules goes! I get it
[14:01:40] <c_wraith> exactly
[14:02:28] <tomsmeding> c_wraith: "I've never actually seen it come up" it was a major issue with ghc 9.0: https://gitlab.haskell.org/ghc/ghc/-/issues/19345
[14:02:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:03:24] <c_wraith> I suppose I should say I don't see it come up 
[14:03:34] <c_wraith> ... in released libraries
[14:03:41] <c_wraith> Though that one did get released!
[14:03:45] <euouae> marijn, that's smart. because of the inlining this optimization is useful even if the programmer is perfect
[14:04:31] <euouae> Unless say the programmer also guesses the inlining correctly, but yeah. I guess this rewriting idea must be a common optimization technique right?
[14:04:47] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db)
[14:05:04] <c_wraith> well, it depends heavily on purity to be so broadly applicable
[14:05:10] <merijn> euouae: I mean, in general "inlining a bunch of stuff, then optimising away stuff that you now know statically" is a common application step
[14:05:17] *** Joins: nschoe (~quassel@178.251.84.79)
[14:05:23] <euouae> right
[14:05:54] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[14:06:10] *** Joins: mixfix41 (~homefame@user/mixfix41)
[14:06:16] <merijn> Purity helps. Any compiler class on optimisation will start with "here's a neat optimisation" and then go onto "here's why mutability wrecks our day and makes us invest decades to check when we are actually allowed to do it" :p
[14:07:08] <euouae> heh I can only imagine what GCC is doing
[14:07:34] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:10:10] <merijn> euouae: A simple example is that, when you use a typeclass polymorphic function (whether it's fmap or (+)) and the compiler statically knows the type, it can just use the correct function directly, without the typeclass indirection
[14:10:35] *** Joins: yuri_ (~yuri@nat-0-31.msu.umos.ru)
[14:10:55] <euouae> there's cases where it's undetermined at compile time?
[14:11:09] <merijn> euouae: So if you inline a typeclass polymorphic function into a static expression (or other context with fixed compile time type), you avoid 100% of the cost of the indirection
[14:11:32] <geekosaur> polymorphic recursion is a thing
[14:11:43] <c_wraith> as a technical matter, GHC uses separate compilation.  Sometimes it has to compile a function in a context where it's polymorphic, so it doesn't know what the type is
[14:11:47] *** Quits: gustik (~gustik@2a01:c844:2436:6920:9e9:f97c:41d1:634c) (Quit: Leaving)
[14:12:01] <merijn> euouae: Well, consider situations where a value is made from user input at runtime
[14:12:10] <c_wraith> As a theoretical case, yeah - polymorphic recursion can happen.  You can call a function on a type not known until runtime
[14:12:14] <merijn> Separate compilation to, yeah
[14:13:58] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[14:14:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[14:14:24] <euouae> Oh I see, so the trick is to have e.g. the constructor take an argument of a more complicated type
[14:14:36] <euouae> wikipedia has `data Nested a = a :<: (Nested [a]) | Epsilon` as an example
[14:14:57] <c_wraith> > let f :: Show a => Int -> a -> String ; f 0 x = show x ; f n x = f (n - 1) (x, x) in f 3 () -- euouae: or this
[14:14:58] <lambdabot>  "((((),()),((),())),(((),()),((),())))"
[14:15:16] <c_wraith> the type show is called on depends on the Int parameter
[14:15:55] <euouae> isn't show called on a value, not a type?
[14:16:11] <c_wraith> yes.  I meant to say the type it is called *at*
[14:16:36] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[14:16:37] <euouae> oh wow so this creates different instances of `f` depending on the argument
[14:16:43] <euouae> so the compiler has to provide a factory of f's for the runtime
[14:16:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[14:16:49] <merijn> euouae: Right
[14:17:13] <tomsmeding> it might be instructive to consider that 'Show a =>' an actual, normal argument
[14:17:17] <euouae> ah polymorphism has some tricky implications
[14:17:34] <merijn> tomsmeding: The origin discussion was that in a lot of cases that can be optimised away :p
[14:17:49] <tomsmeding> ah right -- except in cases like this
[14:18:04] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:18:45] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[14:19:31] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[14:20:45] <euouae> but this is undecidable right? so the compiler /tries/ to guess that `f` requires no factory, and if the compiler can't prove that in sufficient time it just creates a factory for it
[14:21:11] <c_wraith> actually, polymorphic recursion is easily detected.
[14:21:49] <tomsmeding> euouae: re your Nested example: this kind of stuff appears in the wild, e.g. in finger trees used in Data.Sequence; see e.g. https://dl.acm.org/doi/pdf/10.1145/3406088.3409026
[14:21:53] <euouae> What of `let f :: Show a => Int -> a -> String ; f 0 x = show x ; f n x = f (n - 1) x`, is that polymorphic recursion or not?
[14:22:15] <merijn> euouae: The type of each recursive call is different
[14:22:20] <c_wraith> it is.  when it calls f recursively, the type is different
[14:22:38] <tomsmeding> no, because you changed (x, x) to just x :p
[14:22:58] <euouae> wait, those are conflicting answers
[14:22:59] <merijn> euouae: Consider "map f (x:xs) = f x : map f xs" here, the recursive call of 'map' has the exact same type as the original call
[14:23:22] <merijn> euouae: You typed different code from c_wraith's version :p
[14:23:39] <euouae> I know it was on purpose... how is polymorphic recursion detected?
[14:23:51] <euouae> Is it just by asking if the type of the recursive call is different than the original?
[14:24:13] <c_wraith> yes.  that's the definition of polymorphic recursion
[14:24:15] <merijn> euouae: asking whether it's *different* is hard
[14:24:16] <tomsmeding> you typecheck the whole thing, and check whether all the recursive calls have the same instantiations of the type parameters as the function itself
[14:24:23] <merijn> euouae: Asking whether it's *the same* is easy
[14:24:31] <tomsmeding> if not, it's potentially polymorphic recursion
[14:24:42] <euouae> merijn are you talking about equality versus equivalence of some sort?
[14:24:51] <merijn> euouae: So you just treat all cases that aren't the same as polymorphic
[14:24:58] <euouae> right
[14:25:07] <merijn> euouae: In the presence of parametric polymorphism you have cases where something "might be the same"
[14:25:13] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:25:14] <tomsmeding> there is an algorithm that distinguishes "surely the same" and "maybe different"
[14:25:35] <merijn> euouae: Consider: 'Nothing :: Maybe a'
[14:25:47] <euouae> tomsmeding thanks for that paper, looks interesting. I never read about finger trees so maybe soon is the time
[14:25:56] <merijn> Does Nothing have type 'Maybe Int'? It could...but it's not guaranteed
[14:26:44] <euouae> merijn Nothing gets a factory too?!
[14:27:06] <merijn> euouae: No, there's just one Nothing. But it's polymorphic, so its type fits many things
[14:27:34] <merijn> euouae: My point was just that "when it's polymorphic you can't really say it will be a specific type at runtime"
[14:27:36] *** Quits: yuri_ (~yuri@nat-0-31.msu.umos.ru) (Quit: Leaving)
[14:27:56] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 250 seconds)
[14:28:01] <euouae> right
[14:28:11] <euouae> no I'm following. It's all new to me though
[14:28:12] <tomsmeding> Nothing _would_ get a factory, but that factory would always produce the same thing anyway, so let's not make the factory at all
[14:28:19] <merijn> euouae: It might not be knowable until runtime what the proper type for 'a' should be
[14:28:36] <merijn> euouae: So 'do these things have the same type' isn't answerable until runtime in that case
[14:28:47] <merijn> euouae: (at which point, you're too late :p)
[14:29:01] *** Joins: fef (~thedawn@user/thedawn)
[14:29:14] <euouae> heh yeah
[14:29:14] <merijn> euouae: Which is why you *can* easily detect "these things are the same", but not "these things are *not* the same"
[14:30:12] <merijn> I mean, consider a worse version of f with 'f n x | even n = f (n-1) [x]; | otherwise = f (n-1) (x, x)"
[14:30:41] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[14:31:09] <merijn> > let f :: Show a => Int -> a -> String; f 0 x = show x; f n x | even n = f (n-1) [x]; f n x = f (n-1) (x, x) in f 4 ()
[14:31:11] <lambdabot>  "([([()],[()])],[([()],[()])])"
[14:31:22] *** Joins: SnowNeo (~SnowNeo@49.36.127.54)
[14:31:24] *** Joins: alx741 (~alx741@157.100.93.160)
[14:31:28] <SnowNeo> hello! anyone here
[14:31:39] <SnowNeo> jackdk dang you still here?
[14:31:50] <jackdk> SnowNeo: yeah mate
[14:31:57] <SnowNeo> nice nice, you free for a second?
[14:32:04] <euouae> merijn great stuff :D
[14:32:23] <SnowNeo> i'm basically trying to print a Floating point number
[14:32:26] <jackdk> yea for a bit, but just ask your question. Even if nobody can answer you might have insight just by wrangling it into text
[14:32:29] <SnowNeo> and having great problems
[14:32:40] <jackdk> go on
[14:32:40] <SnowNeo> `radicalcoolical outer inner = sqrt(outer^2*inner)`
[14:32:48] <SnowNeo> i want to print the result of this but I have no idea how
[14:33:00] <SnowNeo> \sqrt{3^{2}7}
[14:33:07] <SnowNeo> \sqrt{3^{2}7} = 3\sqrt{7}
[14:33:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:33:18] <jackdk> "print" as in "I've performed this computation and I want it to appear on the terminal", or "print" as in "I wanna turn it into a string"?
[14:33:31] <SnowNeo> i wanna make it a string
[14:33:37] <jackdk> :t show
[14:33:38] <lambdabot> Show a => a -> String
[14:33:43] <SnowNeo> but that doesn't work
[14:33:47] <euouae> tomsmeding quick question, what is the name of a type such as the one I gave above from wikipedia? If they have a name
[14:33:49] <jackdk> > show 3.14
[14:33:50] <lambdabot>  "3.14"
[14:34:00] <SnowNeo> well
[14:34:10] <SnowNeo> lemme send my code and the error
[14:34:23] <SnowNeo> https://paste.tomsmeding.com/lfYS7UT6
[14:34:24] <euouae> parametric polymoprhic types?
[14:34:51] <SnowNeo> https://paste.tomsmeding.com/lfYS7UT6 <- code
[14:34:52] <SnowNeo> https://paste.tomsmeding.com/dV9ePzRa <- error
[14:35:25] <SnowNeo> works fine in ghci
[14:35:43] <SnowNeo> Prelude> radicalcoolical 3 7
[14:35:43] <SnowNeo> 7.937253933193772
[14:35:58] <SnowNeo> but i don't know how ghci actually prints the values :/
[14:36:00] <jackdk> SnowNeo: yeah so that error is telling you the problem - inside that `do` block, you need to use IO actions
[14:36:09] <jackdk> :t putStrLn
[14:36:10] <lambdabot> String -> IO ()
[14:36:20] <jackdk> :t putStrLn (show 3.14)
[14:36:21] <lambdabot> IO ()
[14:36:39] <jackdk> but also there's a `print` function which is `print x = putStrLn (show x)`
[14:36:41] <jackdk> :t print
[14:36:42] <lambdabot> Show a => a -> IO ()
[14:36:46] <SnowNeo> oh my god tysm!
[14:36:52] <SnowNeo> you blow my mind every single time
[14:37:00] <SnowNeo> thanks a bunch jackdk
[14:37:04] <jackdk> np
[14:37:08] <SnowNeo> <3
[14:37:09] <tomsmeding> euouae: not sure :p
[14:37:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:37:18] *** Quits: SnowNeo (~SnowNeo@49.36.127.54) (Quit: Client closed)
[14:37:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[14:37:34] <euouae> maybe it should be polymorphic recursive type or such
[14:38:07] <euouae> this kind of thing makes it hard to reason about types
[14:38:39] <euouae> I'm also studying F* which on the outset looks kinda like haskell but I'm noticing that it does not have this feature, I don't think.
[14:38:57] <tomsmeding> euouae: the simplified finger trees paper I linked calls that phenomenom "non-regular recursion" (the sentence that goes over from page 1 to page 2)
[14:40:13] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:41:38] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646) (Read error: Connection reset by peer)
[14:43:02] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646)
[14:43:29] <jackdk> the finger trees made simple talk is also excellent https://www.youtube.com/watch?v=ip92VMpf_-A
[14:44:01] <euouae> nice, ty
[14:44:12] <euouae> Oh that's the author?
[14:44:26] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:44:49] <euouae> yeah seems so, cool
[14:45:14] <euouae> Recently I've been trying to understand basic things about formal verification and how to use dependent type theory
[14:45:18] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:45:39] <euouae> and this sort of thing about parametric polymorphism seems to be requiring proofs on the level of types themselves
[14:47:16] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[14:48:17] *** Quits: xff0x (~xff0x@2001:1a81:5253:5900:c0c8:bfdc:4cf0:476f) (Ping timeout: 240 seconds)
[14:50:04] *** Joins: Topsi (~Tobias@dyndsl-095-033-018-101.ewe-ip-backbone.de)
[14:50:27] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:51:47] <euouae> for example the simple formula `f x n = if n = 0 then x else f [x] n` can be proven to be such that `f x n === iterate singleton x !! n`
[14:52:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:53:34] <tomsmeding> what even is the type of that f
[14:53:45] <tomsmeding> oh dependent types, /me nods
[14:54:09] <euouae> right but OK in the case of Haskell you can use `show` there
[14:55:10] <euouae> I think at this point I'm just rambling. I got a lot of new info, thanks everyone 
[14:57:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[14:57:37] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[14:58:16] *** Quits: acidjnk (~acidjnk@p200300d0c7271e850c94254067925f57.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:00:47] *** Joins: xff0x (~xff0x@2001:1a81:5253:5900:c0c8:bfdc:4cf0:476f)
[15:02:11] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:03:29] <Inst> right now, i have a case of expression and i'd like to do pattern matching
[15:03:35] <Inst> within the syntax case x of
[15:03:44] <Inst> x = three different expressions, and haskell is apparently letting me do this
[15:04:05] <Inst> in the k -> j, k i want to be 3 separate values for the different expressions
[15:04:18] <Inst> currently, i'm using tuples, but for performance reasons, i'd like to ditch the tuples
[15:04:21] <Inst> any idea what i can do?
[15:05:31] *** Joins: cfricke (~cfricke@user/cfricke)
[15:06:00] <Inst> right now, i'm using a where block to define a function instead of case
[15:06:09] <Inst> but is there any way i can do this without the where block?
[15:07:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:08:53] <geekosaur> show your code?
[15:08:56] <geekosaur> @paste
[15:08:56] <lambdabot> A pastebin: https://paste.debian.net/
[15:11:16] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (Ping timeout: 250 seconds)
[15:11:19] <Inst> https://paste.debian.net/1227090/
[15:11:37] <Inst> the tupled version is actually more performant
[15:11:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:11:51] <Inst> or actually less resource intensive than the mainline version
[15:12:37] <Inst> with where
[15:12:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:14:46] <geekosaur> I don't think I understand what your problem is. I'd probably separate out the case expression for clarity, but as your code shows this isn't necessary syntactically
[15:15:15] <Inst> i'm trying to implement an imperative loop with checks in haskell
[15:15:25] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:81fe:1ebc:de4c:76ed)
[15:15:54] <Inst> that is to say, there are three conditions, if they're met, a certain action occurs per condition (accumulator is increased), and if none are met, the accumulator is also increased (by a different amount)
[15:16:17] <Inst> the tupled version works, but i'd like to avoid the tuple
[15:17:09] <geekosaur> I think the only way you avoid it is by having separate `case-of`s, and in this case that would get fairly ugly
[15:18:09] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb)
[15:18:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:18:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:20:32] <geekosaur> personally I'd just go with the tuples. even if you discarded them entirely and did pattern matching in the definition, you'd have a decent amount of code duplication
[15:23:32] *** Joins: fef (~thedawn@user/thedawn)
[15:23:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:24:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:32] <Inst> there's a way to do it with where, bind the mod statements to k, it's a bit more succinct that way, but performance and resource penalty
[15:27:45] <opticblast> unboxed tuples? if you really want to be performant
[15:29:46] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Quit: WeeChat 3.3)
[15:29:56] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[15:30:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:30:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:32:27] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[15:32:29] <geekosaur> pretty sure ghc already unboxes any strict tuple
[15:32:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[15:33:00] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[15:33:18] <geekosaur> and since these are Ints or at least Integers, they're strict
[15:33:36] *** Quits: kaph_ (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[15:35:04] <lortabac> are Int's strict? I don't see any strictness annotation in the definition
[15:35:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:35:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:35:55] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:35:59] <geekosaur> they don't need one, Int# is necessarily strict because it's a machine word
[15:36:35] <lortabac> yes Int# is strict, but Int?
[15:36:37] *** Joins: unknown__ (~thedawn@user/thedawn)
[15:37:03] <geekosaur> the only source of laziness is the I# wrapper and ghc treats that as strict because the underlying type and all basic operations are strict
[15:37:33] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[15:38:46] <geekosaur> basically the Int itself (I# Int#) is strict by necessity because the Int# is, the laziness comes in with whatever's holding an Int. in this case it's a tuple, and ghc will seek to make the tuple strict as one of the first optimizations it does. since I# Int# is strict, this is trivially satisfiable and the whole thing becomes strict
[15:39:46] <geekosaur> (this is also why ghci has no optimizations enabled, you can't turn off that strictifying-tuples optimization and ghc bytecode can't tell the difference between boxed and unboxed tuples so it crashes when it encounters an unboxed tuple)
[15:40:15] *** Quits: razetime (~quassel@49.207.203.87) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:41:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:41:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:42:25] <lortabac> geekosaur: what about the optimization of I#? is it enabled by -fstrictness or is it something else?
[15:43:26] <geekosaur> not sure I understand the question. a constructor tag can't separately be strict or lazy
[15:45:02] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:45:54] <lortabac> oh ok I see what you mean
[15:45:59] <geekosaur> again, any laziness comes with whatever's holding the whole vslue. and in this case ghc really wants to strictify that tuple, so it'll look inside and see three strict values and go ahead and strictify and unbox the tuple
[15:46:26] <geekosaur> things would rapidly become really confused if the constructor tag were separately allowed to be lazy
[15:46:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:47:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:47:33] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[15:48:34] <geekosaur> hm, although I guess we do not know that the values originally were strict, since it could have been produced by a lazy function. that said, it's going into a case-of, and pattern matching strictifies by default so it still works out
[15:48:47] <Inst> btw
[15:48:58] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 250 seconds)
[15:49:26] <Inst> my cabal refuses to install packages, it can't determine the version of ghc
[15:49:37] <Inst> i've been manually editing my GHCup managed GHC installation
[15:49:53] <geekosaur> did you select a particular ghc?
[15:50:11] <geekosaur> ("ghcup tui" is good for checking and managing this)
[15:51:18] <geekosaur> also doublecheck $PATH is set properly. there should be a file ~/.ghcup/env that you can "." or "source" from your shell startup files
[15:51:45] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:52:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:53:17] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:53:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:53:34] *** Joins: ksqsf (~user@2001:da8:d800:611:9111:d58c:6bc4:c652)
[15:53:51] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:54:32] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[15:56:16] *** Joins: Techcable (~Techcable@168.235.93.147)
[15:58:31] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Ping timeout: 256 seconds)
[15:58:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:59:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:00:09] <maerwald> Inst: manually editing?
[16:00:43] <Inst> the shim files
[16:00:50] <maerwald> you're on windows?
[16:01:12] <Inst> yeah
[16:01:22] <maerwald> you shouldn't do that lol
[16:01:32] <Inst> i don't dev enough to learn *nix
[16:01:41] <Inst> going to get a Macbook Air in May
[16:01:57] *** Joins: cfricke (~cfricke@user/cfricke)
[16:02:03] <maerwald> if you want to set the default ghc to 8.10.7 run: ghcup set ghc 8.10.7
[16:02:11] <Inst> and probably if my fucking computer stops being a piece of shit (i.e, it's reliable), I'll update the workstation laptop with a new SSD and install Arch Linux on it
[16:02:12] <maerwald> unfortunately, windows doesn't have 'ghcup tui'
[16:02:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[16:02:21] <geekosaur> you can install wsl2 now, although there are quite a few differences between linux and os x
[16:02:25] <geekosaur> oh :(
[16:02:42] <maerwald> yeah, brick has no windows support
[16:02:53] <maerwald> unsurprisingly
[16:03:00] <Inst> "the version of ghc 9.0.1 is not supported"
[16:03:03] <Inst> oh, no wonder
[16:03:30] *** Quits: cfricke (~cfricke@user/cfricke) (Client Quit)
[16:03:36] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:03:37] <maerwald> I'm still confused why I'm not getting any windows user bug reports... because they don't know how to report bugs or because there are none?
[16:03:39] <Inst> i don't have 9.0.1 installed
[16:03:40] *** Joins: cfricke (~cfricke@user/cfricke)
[16:03:46] <maerwald> Inst: ghcup install ghc 9.0.1
[16:04:00] <Inst> can ghcup uninstall? I don't need ghc 9.0.2
[16:04:04] <maerwald> yes
[16:04:07] <geekosaur> at this point (a) if I used 9.x at all it'd be 9.0.2 (b) still stick to 8.10.7
[16:04:10] <maerwald> ghcup rm ghc 9.0.2
[16:04:21] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:04:25] <maerwald> but 9.0.1 isn't really a good choice
[16:04:32] <maerwald> unless you like to have soundness issues in your code
[16:04:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:04:46] <Inst> doip, but HLS hasn't updated to support 9.0.2 yet :(
[16:04:50] <maerwald> true
[16:05:00] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[16:05:02] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[16:05:08] <Inst> i'd rather it just support 9.2.1
[16:05:22] <geekosaur> that'll take more work
[16:05:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:05:49] <geekosaur> they redid a bunch of stuff, in the long run things should work better but in the short run there's a fair number of breaking changes
[16:05:57] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[16:06:06] <geekosaur> "should work better" meaning it should be easier to support new versions
[16:06:10] <Inst> i'm fairly annoyed that they changed record syntax
[16:06:12] <Inst> now it's confusing with .
[16:06:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:06:28] <geekosaur> you have to enable that
[16:06:28] <Inst> totally should have tried screwing a different operator instead
[16:06:33] <Inst> oh, so an option
[16:06:37] <Inst> nice
[16:06:39] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[16:06:42] <geekosaur> RecordDotSyntax
[16:06:48] <geekosaur> iirc
[16:07:15] <geekosaur> they did seriously discuss using # instead. but users wanted .
[16:07:15] <Inst> jesus, my ghcup is already 10 gb
[16:07:33] <maerwald> Inst: ghcup gc --help
[16:07:35] <Inst> the lack of windows support with haskell ecosystem is bad
[16:07:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[16:08:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[16:08:14] <Inst> haskell imo has to get them early / get them young
[16:08:23] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb)
[16:08:35] <Inst> if people wanted to do FP, the FP support in mainstream languages is increasingly good
[16:08:52] <Inst> and they avoid Haskell's purity issues with GUI, they avoid Haskell's issues with unpredictable and lost performance
[16:09:43] <Inst> only thing that really makes me want to learn Haskell, despite seeing that there's a huge moountain to climb
[16:09:46] <Inst> haskell syntax is bae
[16:10:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[16:11:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:12:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[16:13:17] *** Quits: In0perable (~PLAYER_1@fancydata.science) (Quit: All your buffer are belong to us!)
[16:13:38] <maerwald> salt bae?
[16:16:39] *** AlexNoo_ is now known as AlexNoo
[16:16:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[16:16:54] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:17:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:17:37] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[16:19:40] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[16:19:47] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[16:26:14] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[16:26:25] *** Quits: max22- (~maxime@2a01cb08833598000a8db68817efc706.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:29:47] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[16:31:00] <Inst> bae is apparently some youth slang for baby
[16:31:06] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:31:19] <Inst> as a term of endearment
[16:35:06] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[16:35:47] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Remote host closed the connection)
[16:35:50] <maerwald> TIL
[16:35:59] *** Joins: Erutuon (~Erutuon@user/erutuon)
[16:36:39] <merijn> more like babe, imho
[16:36:59] <geekosaur> no, "bae" is a thing
[16:37:12] <geekosaur> not sure I want to know why
[16:37:28] <merijn> geekosaur: I meant bae is more like babe than baby
[16:38:30] <merijn> it'a just a written form of letting the final syllable drop
[16:38:45] *** Quits: Topsi (~Tobias@dyndsl-095-033-018-101.ewe-ip-backbone.de) (Ping timeout: 256 seconds)
[16:38:46] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[16:39:06] <maerwald> babe is a subset of baby?
[16:39:57] <merijn> only if your opinion is that words are exclusively defined by their dictionary meaning with zero emotional connotations and context
[16:40:08] <maerwald> of course
[16:41:11] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[16:42:03] <merijn> in other news...my typo rate is gonna skyrocket until I get used to the new keyboard >.>
[16:42:48] <Clint> that's called progress
[16:43:52] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[16:44:51] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[16:44:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[16:47:42] *** Joins: shriekingnoise (~shrieking@156-16-231-201.fibertel.com.ar)
[16:51:22] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[16:51:38] *** Quits: Erutuon (~Erutuon@user/erutuon) (Quit: WeeChat 2.8)
[16:51:47] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[16:55:41] *** Joins: cfricke (~cfricke@user/cfricke)
[16:56:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:58:44] *** Quits: ksqsf (~user@2001:da8:d800:611:9111:d58c:6bc4:c652) (Ping timeout: 250 seconds)
[16:59:20] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Quit: WeeChat 3.3)
[16:59:29] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[17:02:19] *** Joins: nschoe (~quassel@178.251.84.79)
[17:02:31] *** Joins: slack1256 (~slack1256@191.125.99.72)
[17:03:30] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[17:04:35] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[17:07:05] <Inst> okay
[17:07:25] <Inst> i have cabal complaining that it can't determine the version of ghc-pkg.exe
[17:08:48] <Inst> also, for my gui issue, readline has IO String / char solutions for my problem
[17:09:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:11:13] *** Joins: Guest21 (~Guest21@2a00:23c8:1510:8b01:f5c5:cd35:22b1:ed5c)
[17:13:09] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[17:17:48] <maerwald> Inst: can you pastebin the exact error?
[17:17:53] <maerwald> I believe I've heard that one before
[17:19:34] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[17:19:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:19:54] <maerwald> https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/197
[17:20:23] <maerwald> are you on windows 7?
[17:21:57] *** Joins: jkaye (~jkaye@2601:281:8300:7530:91a1:7dca:589a:aaae)
[17:22:01] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Quit: ZNC 1.8.2 - https://znc.in)
[17:22:25] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[17:23:55] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[17:26:43] *** Joins: max22- (~maxime@2a01cb088335980019ec243b097a98b9.ipv6.abo.wanadoo.fr)
[17:28:16] *** Quits: Guest21 (~Guest21@2a00:23c8:1510:8b01:f5c5:cd35:22b1:ed5c) (Quit: Client closed)
[17:32:42] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[17:36:56] *** Quits: max22- (~maxime@2a01cb088335980019ec243b097a98b9.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[17:43:33] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[17:44:19] *** Joins: pera (~pera@user/pera)
[17:50:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[17:50:28] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[17:51:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[17:51:36] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Ping timeout: 250 seconds)
[17:52:32] *** Joins: stef204 (~stef204@user/stef204)
[17:53:01] *** Quits: stef204 (~stef204@user/stef204) (Client Quit)
[17:55:30] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 250 seconds)
[17:57:14] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[17:58:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:58:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:58:16] *** Joins: wroathe (~wroathe@user/wroathe)
[17:59:39] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:01:34] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[18:02:48] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[18:03:20] <geekosaur> kinda wish (a) linux had ^T (b) cabal-install supported it
[18:03:36] *** Joins: ksqsf (~user@2001:da8:d800:611:7dce:871f:1852:dbd6)
[18:03:57] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Read error: Connection reset by peer)
[18:05:40] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[18:05:45] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:44a7:987:8de2:98bb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:06:14] <merijn> what do you mean?
[18:06:41] <byorgey> ^T as in swap the previous two characters??
[18:06:58] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:10:20] *** Joins: stef204 (~stef204@user/stef204)
[18:10:47] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[18:11:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:12:19] *** Joins: IndecisionTree (mike@user/IndecisionTree)
[18:15:53] *** Joins: emad (~emad@102.42.146.250)
[18:19:53] *** Quits: pera (~pera@user/pera) (Quit: leaving)
[18:20:02] <pavonia> Matrix transposition
[18:20:04] *** Joins: max22- (~maxime@2a01cb0883359800ad92d79b8ec75caf.ipv6.abo.wanadoo.fr)
[18:20:20] *** Parts: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) ()
[18:20:24] *** Joins: xkuru (~xkuru@user/xkuru)
[18:24:27] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[18:24:34] <geekosaur> status, on *bsd
[18:25:05] <geekosaur> so for example cabal-install could trap SIGSTAT and report what it's working on currently and around how far it is
[18:25:57] <maerwald> not sure cabal-install knows that
[18:26:30] <geekosaur> linus has consistently rejectred supporting it or anything like it because it's a bit of an ugly hack… but looking at the rest of the linux kernel I don't see how that's any different :)
[18:27:29] <geekosaur> it captures logs and can parse e.g. [3 of 197]
[18:27:34] *** Quits: ksqsf (~user@2001:da8:d800:611:7dce:871f:1852:dbd6) (Ping timeout: 250 seconds)
[18:29:05] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[18:29:11] *** Joins: EvanR (~EvanR@user/evanr)
[18:37:57] *** Joins: shapr (~user@2601:7c0:c37c:46d0:c5e9:5422:b6fa:e10b)
[18:40:01] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[18:42:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:42:19] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:44:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:44:58] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[18:45:02] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:46:06] *** Joins: Guest1824 (~Guest18@2a02:8388:6bc1:1d00:6d47:dee9:5eda:9fbe)
[18:46:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:49:06] <Guest1824> hi all. I'm looking for a function `[a] -> [[[a]]]`, that given a list produces all possible combinations of sublists, such that each combination concats to the original list, if that makes sense
[18:51:07] <Guest1824> e.g. foo [1,2,3] -> [ [ [1], [2], [3] ], [ [1], [2, 3] ], [ [1, 2], [3] ], [ [1, 2, 3] ] ]
[18:52:03] <EvanR> all possible list factorizations (relative to ++) xD
[18:52:22] <Guest1824> yes
[18:52:24] <EvanR> sounds like a job for the list monad
[18:53:42] <EvanR> :t inits
[18:53:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:53:43] <lambdabot> [a] -> [[a]]
[18:53:44] *** Joins: ksqsf (~user@2001:da8:d800:611:7dce:871f:1852:dbd6)
[18:54:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:54:55] <EvanR> hmm, if you had a function to return all cuts of a list, then you can map each one of those over the recursive question function and then join
[18:55:28] <EvanR> cuts :: [a] -> [([a],[a])]
[18:55:42] <EvanR> or, breaks
[18:58:03] <EvanR> factor xs = concatMap (\l r -> map (l ++) (factor r)) (breaks xs)
[18:58:18] <EvanR> er
[18:58:20] *** Quits: ksqsf (~user@2001:da8:d800:611:7dce:871f:1852:dbd6) (Ping timeout: 252 seconds)
[18:58:23] <EvanR> factor xs = concatMap (\l r -> map (l:) (factor r)) (breaks xs)
[18:58:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:59:27] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:59:32] <EvanR> factor xs = concatMap (\(l,r) -> map (l:) (factor r)) (breaks xs)
[18:59:38] <EvanR> at this point, to the ghci mobile
[18:59:53] <xsperry> > let xs = [1..3] in zip (inits xs) (tails xs)
[18:59:53] *** Joins: alx741 (~alx741@157.100.93.160)
[18:59:54] <lambdabot>  [([],[1,2,3]),([1],[2,3]),([1,2],[3]),([1,2,3],[])]
[19:00:06] <EvanR> i forgot about tails xD
[19:00:15] *** Joins: cdeln (~cdeln@m83-185-94-137.cust.tele2.se)
[19:00:20] <xsperry> it is missing [1], [2], [3] though
[19:00:37] <EvanR> that implements breaks though
[19:00:57] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[19:01:06] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:01:29] <cdeln> hello
[19:01:44] <geekosaur> o/
[19:02:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:03:20] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:03:41] <cdeln> first time using irc, cool stuff
[19:04:11] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:04:52] <Guest1824> EvanR: this function is tricky >:D
[19:05:04] <EvanR> did that factor idea work?
[19:05:27] <Guest1824> not yet. but the idea definitely makes sense
[19:06:26] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[19:06:32] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:08:04] <EvanR> to get fancy... something like... do { (l,r) <- breaks xs; fmap (l:) (loop r) }
[19:09:01] <EvanR> = loop xs
[19:09:55] <cdeln> I have a question about HTTP(S). What libs do you think that I should look into? Browsing hackage there seem to be quite a few.
[19:13:36] <Profpatsch> Can I  :reload  cabal packages in my `cabal repl`?
[19:14:00] <Profpatsch> e.g. I have a separate package coming from /cabal.project and I change something in it, can I tell cabal to reload the package incrementally?
[19:14:14] <sclv> no
[19:14:22] <Profpatsch> schade
[19:14:28] <Profpatsch> sclv: do you have a workaround?
[19:14:35] <merijn> That's a fundamental limitation in ghci atm
[19:14:36] <sclv> no
[19:14:52] <merijn> I think someone was working on multi-component ghci, but it's not done, afaik
[19:14:57] <Profpatsch> Very close to building my own wrapper which generates a cabal file with all the modules in hs-source-dirs and all the dependencies merged
[19:15:21] <Profpatsch> So you can develop as if everything was in the same package, but package with different packages
[19:15:34] <Profpatsch> Generate one cabal file for one use case, generate another for the other
[19:16:00] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:6113:2671:c33c:ef4a)
[19:16:01] <Profpatsch> Transparently switch between treating some packages as static (and pre-compile instead of interpret) and making everything run interpreted
[19:16:37] <Profpatsch> Use a toml config file to not feel dead inside
[19:17:11] <Guest1824> EvanR: using your recursive definition with concatMap gives me only []. my definition of breaks is: `breaks xs = zipWith ($) (map splitAt [1..length xs]) (repeat xs)`
[19:17:33] <EvanR> try xsperry's version of breaks
[19:17:57] <EvanR> well, if it works, then my code's broke
[19:18:22] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:18:37] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:19:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:19:30] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[19:19:32] <Guest1824> xsperry's version has ([], xs) as the first element though, which causes infinite recursion, afaics
[19:20:19] <EvanR> shoot
[19:20:22] *** Joins: alx741 (~alx741@157.100.93.160)
[19:20:52] *** Quits: xff0x (~xff0x@2001:1a81:5253:5900:c0c8:bfdc:4cf0:476f) (Ping timeout: 250 seconds)
[19:21:51] *** Joins: xff0x (~xff0x@2001:1a81:5253:5900:d5e3:e4eb:c9c5:42b2)
[19:25:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:25:47] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:26:23] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 252 seconds)
[19:27:34] <Cale> cdeln: As a client? I've mostly used http-conduit for that.
[19:28:00] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:28:08] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:28:32] <Cale> merijn: I think I heard the other day that multi-component ghci was basically working on HEAD now :)
[19:28:49] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[19:29:13] <Cale> (but I could have misunderstood or something, I'm not involved in that)
[19:29:53] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 256 seconds)
[19:30:17] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (Quit: You have been kicked for being idle)
[19:30:23] <Guest1824> EvanR: got it working now. the base case simply was missing :-)
[19:30:36] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[19:30:41] <EvanR> bah, that just means it was co-working
[19:31:11] *** Parts: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) ()
[19:31:29] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Read error: Connection reset by peer)
[19:31:31] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Read error: Connection reset by peer)
[19:31:46] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[19:32:31] <Guest1824> heh. thanks for your help!
[19:33:09] <Cale> Profpatsch, merijn: https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6805
[19:33:47] *** Joins: stef204 (~stef204@user/stef204)
[19:33:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[19:36:32] <Cale> https://mpickering.github.io/ide/posts/2020-10-12-multiple-home-units.html -- the high-level overview
[19:36:32] <fendor[m]> note, this does not have proper ghci support yet, iirc
[19:36:34] *** unknown__ is now known as fef
[19:37:18] <geekosaur> yeh, that seemed to be the last "future work" entry
[19:38:18] <Cale> Ahh
[19:38:24] <geekosaur> also no backpack support although I'm not sure if anyone cares
[19:38:35] <EvanR> :'(
[19:38:56] <geekosaur> there's a backpack internal that doesn't support multiple home units
[19:39:10] <geekosaur> they have to sort out how to teach it that without breaking everything
[19:39:15] <cdeln> Cale: Yes exactly. I am a bit confused about getResponseHeader giving a [ByteString] . Do you know why it's a list and not just ByteString? Would be nice to get something like (MimeType, Encoding) instead...
[19:39:43] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[19:40:04] <Cale> It gives you all the response headers that have the given name
[19:40:17] <Cale> There's no guarantee that there's only one, sadly.
[19:41:14] *** Joins: Rum (~bourbon@user/rum)
[19:42:54] *** Joins: alx741 (~alx741@157.100.93.160)
[19:42:58] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[19:43:15] <cdeln> Oh really? So in practice you just grab the first one and move on with your life i guess
[19:43:28] <Cale> For those ones, probably
[19:43:42] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:43:44] <EvanR> if there is even a first one xD
[19:43:48] <Cale> Some of the possible headers it makes a bit more sense why there might be more than one
[19:45:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:45:19] *** Joins: nschoe (~quassel@178.251.84.79)
[19:46:35] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[19:46:43] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[19:46:46] <Cale> (especially the Via: header, where each proxy or gateway that forwards the response will have added its own)
[19:47:21] <cdeln> Ok, makes sense for this level of abstraction in the http-conduit API.
[19:48:10] <cdeln> Do you know of any lib that parses HTTP stuff to a proper ADT?
[19:48:22] <wmacmil> i've upgraded ghc (8.10.7) and now a project which used import Data.Aeson is now not finding it
[19:48:47] <cdeln> I want to pattern match on the media type, wondering if i need to parse the content type header myself or not
[19:48:51] <wmacmil> when i run "cabal install aeson" it gives me this @ WARNING: Installation might not be completed as desired! @
[19:49:05] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[19:49:21] <geekosaur> if you are doing this the old-gfashioned way then you want to add --lib
[19:49:31] <cdeln> EvanR: True :p gotta do some Maybe wrapping
[19:49:37] <geekosaur> but ideally you make a cabal project and let cabal manage the deps for you instead of doing it manually
[19:50:24] <geekosaur> this avoids things like version collisions between multiple projects
[19:52:27] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:52:46] <Cale> cdeln: I don't know of anything too nice in that direction. Presumably it shouldn't be impossible to write some parsers for further processing the various HTTP headers and use them alongside something like http-conduit. I suspect that everyone is currently just looking for particular details and processing things by hand.
[19:53:40] <geekosaur> I'm pretty sure there is no general HTTP/HTML ADT that is any better than just working with HTTP/HTML directly
[19:53:55] <Cale> https://hackage.haskell.org/package/http-media -- this looks vaguely related
[19:54:48] <Cale> (but it's kind of a different thing really)
[19:56:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:56:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:56:06] *** Joins: wroathe (~wroathe@user/wroathe)
[19:56:17] <Cale> (Yeah, I think it's meant more for use on the server side to select a form of content to deliver)
[19:56:20] <wmacmil> @geekosaur : where's the best place to read about this? so do i just run 'cabal init' and 'cabal run' and then add aeson as a dependency in 'code.cabal'
[19:56:21] <lambdabot> Unknown command, try @list
[19:57:23] <geekosaur> that's part of it. you also use a cabal.project file although it may only contain a "src" stanza, then cabal v2-build
[19:57:56] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:58ed:c475:7de8:f0f9) (Quit: WeeChat 2.8)
[19:58:18] <geekosaur> it should manage building dependencies automatically and make them available only to your project (but if some other project at some point needs the same version of the same dependency/ies, it'll reuse them instead of rebuilding)
[19:58:29] <cdeln> Cale: Ok thx. Yeah looks so..
[19:58:34] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[19:58:54] <geekosaur> you get some real messes when you install dependencies "globally" which is why tools like cabal (v2+) and stack exist
[19:59:08] *** Joins: Akiva (~Akiva@user/Akiva)
[20:02:46] <wmacmil> do you manually add them to .cabal, or is there a way to do it from the 
[20:02:49] <wmacmil> command line
[20:03:11] <geekosaur> currently you add them manually
[20:03:22] *** Joins: alx741 (~alx741@157.100.93.160)
[20:04:30] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:05:32] <wmacmil> so once you've added them, how to do you tell cabal to update
[20:06:05] <wmacmil> just cabal update? 
[20:06:08] <sclv> you just "cabal build" again or "cabal repl" or whatever
[20:06:13] <sclv> and it picks it up from the changed file
[20:06:30] <sclv> `cabal update` just tells cabal to fetch the new package index from hackage if any new packages have been uploaded, etc
[20:07:01] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:07:07] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:09:18] <fendor[m]> is "sort" an overloaded (ad-hoc polymorphic) function because it depends on Ord or is it a parametric polymorphic function since it basically has only one function-body?
[20:09:18] *** Quits: cdeln (~cdeln@m83-185-94-137.cust.tele2.se) (Read error: Connection reset by peer)
[20:09:26] *** Joins: cdeln (~cdeln@m83-185-94-137.cust.tele2.se)
[20:12:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[20:12:45] *** Joins: notzmv (~zmv@user/notzmv)
[20:13:03] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[20:13:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:14:00] <jchia[m]> I want to do "[x] <- .." in a do block without requiring a MonadFail instance. I want the program to just error/crash if the pattern match fails. Is there a ergonomic way to do this? Currently, GHC complains "Could not deduce (MonadFail m) arising from a do statement with the failable pattern...".
[20:15:34] <EvanR> fendor[m], it's "constrained polymorphism", the Ord support is magically passed as another argument at runtime
[20:15:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:16:05] <EvanR> so it's a subset of parametric
[20:16:33] *** Joins: cosimone` (~user@93-44-186-159.ip98.fastwebnet.it)
[20:16:52] <geekosaur> jchia[m], MonadFail is what adds the code that enables it to crash at runtime, so no
[20:17:30] <jchia[m]> geekosaur: But I can use error in a monad without MonadFail, correct?
[20:19:04] <sclv> I'd say looking up the dictionary is ad-hoc polymorphism, and sorting relative to the dictionary is parametric polymorphism
[20:19:16] <geekosaur> you can, manually (and presuming you make sure an asynchronous exception is the right thing to do; for example, in IO it makes much more sense to throwIO). ghc won't
[20:19:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[20:19:32] <geekosaur> it demands MonadFail and there is no way to turn this off
[20:19:43] <jchia[m]> I'm allowed to do "xs <- ...; let [x] = xs", it's just more long winded
[20:19:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:20:08] <sclv> x <- head <$> ..
[20:20:25] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:20:40] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 250 seconds)
[20:20:44] <jchia[m]> so i'm hoping to find a more direct way. the pattern should not fail unless i have a bug
[20:20:51] <sclv> right, so use head
[20:21:20] <jchia[m]> thanks, that works
[20:21:34] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[20:22:28] <geekosaur> it's not quite identical since head will silently throw away the rest of a 2-item or more list, whereas your original demands an exactly 1 item list
[20:23:16] <fendor[m]> EvanR: Thanks!
[20:23:17] <EvanR> [x] <- looks better because you are daring the program to challenge your certitude that the result is a singleton
[20:24:06] <EvanR> exercised truth is more true than assumed truth
[20:24:10] <EvanR> or something
[20:24:26] <maerwald> https://hackage.haskell.org/package/ghc-9.2.1/docs/GHC-Utils-Misc.html#v:only
[20:24:47] <maerwald> eh, `singleton` rather
[20:24:59] *** Joins: alx741 (~alx741@157.100.93.160)
[20:25:39] *** Quits: cdeln (~cdeln@m83-185-94-137.cust.tele2.se) (Read error: Connection reset by peer)
[20:27:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:27:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:27:50] *** Joins: wroathe (~wroathe@user/wroathe)
[20:28:08] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:28:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:28:42] *** Joins: vicfred (~vicfred@user/vicfred)
[20:29:05] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[20:30:46] <jchia[m]> [x] <- looks better, but GHC doesn't allow me to use it. What's the rational for GHC requiring MonadFail considering that error could be used regardless of MonadFail?
[20:31:42] <maerwald> error sucks
[20:31:55] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[20:32:21] <jchia[m]> How so?
[20:32:25] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[20:32:34] <maerwald> eh, because it can escape your exception handler due to laziness
[20:32:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:32:52] <geekosaur> that was a large part of what I meant by the conmment about throwIO
[20:33:00] *** Quits: slack1256 (~slack1256@191.125.99.72) (Read error: Connection reset by peer)
[20:33:04] <geekosaur> error *will* bite your ass at some point
[20:33:06] *** Joins: slac97765 (~slack1256@191.126.99.72)
[20:33:19] <jchia[m]> I just want my program to crash if there is a bug
[20:33:29] <EvanR> error "foo" is a thunk that if evaluated, crashes
[20:33:41] <EvanR> length [1, 2, error "foo", 3]
[20:33:46] <EvanR> > length [1, 2, error "foo", 3]
[20:33:48] <lambdabot>  4
[20:33:57] <EvanR> to crash IO, use throwIO
[20:34:06] <jackson99>  > sum [1, 2, error "foo", 3]
[20:34:15] <jackson99> > sum [1, 2, error "foo", 3]
[20:34:17] <lambdabot>  *Exception: foo
[20:34:30] <jchia[m]> I suppose one has to be mindful of evaluation when using it.
[20:34:44] <geekosaur> yes
[20:34:49] <geekosaur> which is why ghc doesn't
[20:35:04] <maerwald> if you use error, then you will have to `evaluate . force $ pureComputation` if you wanna catch it
[20:35:04] <geekosaur> it can't know whether you will force evaluation of it
[20:35:10] <jackson99> even better to not use it in the first place. use Maybe/Either/Something similar in non-IO functions, and throw in IO functions
[20:35:27] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[20:35:27] <EvanR> also catching error is... not proper etiquette
[20:35:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:35:48] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Quit: WeeChat 3.3)
[20:35:50] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[20:36:36] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[20:37:08] <EvanR> you can also throw exceptions from pure code
[20:37:12] <EvanR> :t throw
[20:37:13] <lambdabot> Exception e => e -> a
[20:37:25] <EvanR> but it has the same "gotchas" as error
[20:37:55] <maerwald> @hoogle MonadThrow
[20:37:55] <lambdabot> Control.Monad.Catch class Monad m => MonadThrow m
[20:37:55] <lambdabot> Conduit class Monad m => MonadThrow (m :: Type -> Type)
[20:37:55] <lambdabot> Control.Monad.Trans.Resource class Monad m => MonadThrow (m :: Type -> Type)
[20:38:16] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:38:27] <EvanR> use MonadThrow to throw exceptions from a monad
[20:38:49] <maerwald> it's neat, because you can decide whether you wanna turn it into Maybe or cause a real exception in IO
[20:38:56] <jchia[m]> > error "foo" :: Either Bool Bool
[20:38:58] <lambdabot>  *Exception: foo
[20:39:01] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Client Quit)
[20:39:12] <EvanR> > Left "foo"
[20:39:13] <jchia[m]> [error "foo" :: Either Bool Bool]
[20:39:14] <lambdabot>  Left "foo"
[20:39:30] <jchia[m]> * length [error "foo"
[20:39:34] <EvanR> > throwError "foo" :: Either String Int
[20:39:36] <lambdabot>  Left "foo"
[20:39:56] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:40:19] <jackson99> I like MonadThrow too. caller can pick between Maybe, Either, List or IO exception
[20:40:45] <maerwald> right... because having functions returning Maybe all the time is annoying when you're in IO and don't really care about it
[20:42:43] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db)
[20:43:11] <maerwald> https://hackage.haskell.org/package/relude-1.0.0.1/docs/Relude-List.html
[20:43:16] <maerwald> not a fan of that api
[20:43:28] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[20:43:56] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 252 seconds)
[20:44:28] <EvanR> !!? returns a Maybe. So then you can safely use the maybe with safeFromJust :: Maybe a -> Maybe a xD
[20:44:31] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:44:47] <jchia[m]> My programs are command-line apps that don't try to recover from errors, including errors due to bad input data and bad config, and just crashes. Is it good to just throw a UserError from IO when bad input is detected? (The pure parts will just signal failure using Either, Maybe or similar things and when the results reaches the IO part, UserError is thrown.) Is there a better way?
[20:45:15] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[20:45:15] <maerwald> 'fail' throws a UserError in IO afair
[20:45:30] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:81fe:1ebc:de4c:76ed) (Quit: Leaving)
[20:45:40] <EvanR> % fail "yahoo" :: IO a
[20:45:41] <yahb> EvanR: *** Exception: user error (yahoo)
[20:45:48] *** Quits: opticblast (~june@secure-165.caltech.edu) (Ping timeout: 250 seconds)
[20:46:07] <EvanR> jchia[m], "let it crash" xD
[20:46:07] <geekosaur> but uses thrwIO so it won't get lost
[20:46:37] *** Joins: alx741 (~alx741@157.100.93.160)
[20:46:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:47:01] <maerwald> dunno... I think there's no programming language that has figured out how to do error handling correctly
[20:47:18] <maerwald> Haskell is certainly not in the top 5
[20:47:20] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:48:27] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[20:48:35] * geekosaur is not sure there is a "correctly" for all cases
[20:49:04] <EvanR> I appreciate how async spawns a thread which can return an answer or an error. And you can choose to have the answer and rethrow, or not. I don't know what the difference is between that and normal exception handling but it feels better
[20:49:20] <jchia[m]> What to do for assert? E.g. upon detecting an 'impossible' situation that can happen only because of a bug, what should be done if I want to crash? Exceptions can be caught but I don't want this the assert to make a catchable exception.
[20:49:36] <monochrom> I think a lot of languages have figured out, but people don't use the solutions.
[20:49:37] <EvanR> > assert (4 == 5) -- lights
[20:49:39] <lambdabot>  error:
[20:49:39] <lambdabot>      • No instance for (Typeable a0)
[20:49:39] <lambdabot>          arising from a use of ‘show_M73303100616269230597’
[20:50:01] <EvanR> :t assert
[20:50:04] <lambdabot> Bool -> a -> a
[20:50:25] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[20:50:42] <jchia[m]> In C++, I just use assert(). In Haskell, I sometime throw a UserError but I'm not sure what to do in a pure function.
[20:50:43] <EvanR> > assert (4==5) "There are _ lights"
[20:50:45] <lambdabot>  "*Exception: Assertion failed
[20:50:45] <lambdabot>  CallStack (from HasCallStack):
[20:50:45] <lambdabot>    assert, called at <interactive>:3:1 in interactive:Ghci1
[20:51:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:51:27] <EvanR> it can be inserted anywhere
[20:51:35] <monochrom> assert is in Control.Exception
[20:51:37] <EvanR> but then it crashes upon evaluation, when is who knows when
[20:51:42] <EvanR> which is*
[20:52:03] <EvanR> I guess a failed assertion at the end of time has no bearing on reality!
[20:52:04] <jchia[m]> "correct" for me means unconditionally crashes and prints an error message that I specify
[20:52:26] <monochrom> Yeah take lazy evaluation into account.  "const 10 (assert (4==5))" no error.
[20:52:28] <EvanR> but flies in the face of usual advice to fail as early as possible
[20:52:30] <jchia[m]> s/unconditionally/uncatchably/
[20:52:43] <EvanR> it's a conflict with laziness
[20:52:54] <monochrom> Then again, even in C, "1 ? 10 : assert(4==5)" is no error either.
[20:53:11] <EvanR> similar to how in stream processing, you might fail 9 miles down the stream, which sucks for whatever effects already happened
[20:53:33] <jackson99> aren't asserts ignored in C and C++ unless you compile with debug flag?
[20:53:39] <EvanR> transactions to the rescue
[20:53:50] <jchia[m]> I'm not clear how/whether the assert works when the expression is not evaluated
[20:53:59] <EvanR> it doesn't work
[20:54:00] <jchia[m]> because of laziness
[20:54:26] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:54:53] <monochrom> At some point I don't think lazy evaluation is as special as it sounds.
[20:55:19] <monochrom> In C, if your "assert(4==5)" is not evaluated, then there is no crash.
[20:55:41] <monochrom> The only difference from Haskell is that C evaluates more things than Haskell does.
[20:55:53] <maerwald> does the C standard define an evaluation strategy?
[20:55:55] <monochrom> But the rule "if unevaluated then no crash" is true of all languages.
[20:56:05] <EvanR> sequence points right
[20:56:24] <monochrom> Yes, enough for predicting assert crashes.
[20:56:37] <jackson99> monochrom, good point. if (True || myfunction())  assert in myfunction won't crash the program
[20:56:54] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Client Quit)
[20:56:55] <monochrom> Hell, it has to be enough for predicting debugging printfs in the first place.
[20:57:14] <EvanR> assert seems like a different kind of cultural tool from validation
[20:57:45] <EvanR> implicitly tossing a test somewhere, vs explicitly checking and explicitly failing at an explicit step
[20:58:12] <monochrom> Right, you expect production code to be -O2 and omits the asserts after compilation.
[20:58:34] <monochrom> It's strictly for internal testing phases.
[20:58:46] <monochrom> engineering sample
[20:58:54] <maerwald> production code is external testing phase
[20:58:56] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:59:00] <maerwald> so keep the asserts...
[21:00:01] <monochrom> Well yeah you can do what you want. I'm describing what the inventors of assert did.
[21:00:27] <EvanR> your manager may complain about leaving the asserts in xD
[21:00:32] <monochrom> Therefore what it was probably optimized for.
[21:00:37] <EvanR> it causes the program to crash more
[21:02:15] <EvanR> "if the client doesn't know about the garbage out, it's not a bug after all?"
[21:02:18] <maerwald> reminds me of a property test that failed every other month and no one understood why... it freaked out the coders, but the managers suggested to remove it, becauce it wasted so much time ppl investigating and not finding the cause
[21:03:01] <maerwald> "close enough" is sometimes ok
[21:03:10] <Rembane> I like that 
[21:03:34] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:04:02] <maerwald> just mark the test as "flaky"... done
[21:04:08] <monochrom> Ugh, from the perfectionist who thinks no language has done error handling correctly?
[21:05:16] <maerwald> I don't think the manager was a perfectionist
[21:05:18] <maerwald> xD
[21:05:29] *** Joins: aeka (~aeka@user/hiruji)
[21:07:35] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[21:08:29] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:09:08] *** Joins: alx741 (~alx741@157.100.93.160)
[21:13:14] *** Joins: vglfr (~vglfr@46.96.174.100)
[21:13:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:15:35] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:15:55] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:18:53] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:87f:3f13:7a62:d6c7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:20:13] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[21:20:42] *** Quits: Guest1824 (~Guest18@2a02:8388:6bc1:1d00:6d47:dee9:5eda:9fbe) (Quit: Client closed)
[21:22:38] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[21:23:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[21:23:16] *** Joins: SnowNeo (~SnowNeo@49.36.127.54)
[21:23:16] <SnowNeo> sup guys
[21:23:21] <SnowNeo> sup guys
[21:23:33] <SnowNeo> jackdk sir do you ever take a break
[21:30:04] *** Joins: alx741 (~alx741@157.100.93.160)
[21:31:21] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:33:39] *** Quits: SnowNeo (~SnowNeo@49.36.127.54) (Quit: Client closed)
[21:34:45] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:35:21] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:36:56] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:43:11] *** Joins: Akiva (~Akiva@user/Akiva)
[21:49:17] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:49:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[21:50:18] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[21:52:36] *** Joins: alx741 (~alx741@157.100.93.160)
[21:53:07] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[21:54:05] *** Joins: zachjs (~zachjs@148-59-188-143.3rivers.net)
[21:54:12] <dsal> jackdk is a bot
[21:54:40] * dsal isn't used to people with short-term connections
[21:54:42] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[21:55:28] <EvanR> that little timer showing how long you've been dialed in
[21:55:50] <EvanR> at ten cents a minute
[21:56:02] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[21:56:17] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[21:56:23] <monochrom> Haha nice, AOL and CompuServe
[21:56:23] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:56:50] <monochrom> "AOL keyword: Haskell"
[21:58:29] <geekosaur> delphi was my poison back then
[21:58:58] <int-e> AOL's coaster design never convinced me
[21:58:58] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:59:10] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:59:21] <int-e> (too smooth, too brittle, and wtf is that hole in the middle?)
[21:59:33] <monochrom> Oh haha that.
[21:59:38] <EvanR> I thought they were frisbees
[21:59:56] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[22:00:14] <monochrom> But have you heard of the complement joke: Someone was impressed that a multimedia PC came with a cup holder? >:)
[22:00:15] *** Joins: kmein (~weechat@user/kmein)
[22:00:32] <int-e> I have
[22:00:58] <int-e> It was more dramatic as a support call: "My cup holder broke!"
[22:01:17] <monochrom> Ah yeah I forgot the tech support context.
[22:01:51] *** Quits: cosimone` (~user@93-44-186-159.ip98.fastwebnet.it) (Remote host closed the connection)
[22:02:36] *** Joins: cosimone (~user@93-44-186-159.ip98.fastwebnet.it)
[22:03:48] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[22:07:08] *** Joins: opticblast (~june@secure-165.caltech.edu)
[22:08:11] *** justIrresolute is now known as justJustache
[22:08:29] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:09:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[22:09:46] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:10:47] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db)
[22:10:55] *** Joins: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net)
[22:12:29] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Quit: Leaving)
[22:12:38] *** Joins: alx741 (~alx741@157.100.93.160)
[22:14:09] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:16:21] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:16:40] *** Quits: mbuf (~Shakthi@122.174.202.253) (Quit: Leaving)
[22:18:16] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:21:25] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:24:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:27:50] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[22:30:05] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[22:31:06] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:31:46] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:32:11] *** Quits: zachjs (~zachjs@148-59-188-143.3rivers.net) (Quit: zachjs)
[22:34:15] *** Joins: alx741 (~alx741@157.100.93.160)
[22:38:25] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:39:06] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[22:40:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:41:12] <Inst> maerwald: win10
[22:41:16] <Inst> re cabal
[22:44:16] *** Joins: Topsi (~Tobias@dyndsl-095-033-018-101.ewe-ip-backbone.de)
[22:48:50] <maerwald> Inst: can you reproduce that?
[22:49:01] <Inst> bleh, i probably nuked my system
[22:49:05] <Inst> ghcup nuke doesn't even work
[22:49:14] <maerwald> what?
[22:49:27] <Inst> time to delete everything related to ghcup on my system!
[22:49:41] <maerwald> ok
[22:50:07] <tomsmeding> TIL 'ghcup nuke'
[22:50:16] <tomsmeding> I guess it's a useful thing to have
[22:50:43] <maerwald> Inst: are you saying ghcup nuked your system or you did?
[22:50:55] <Inst> going to nuke it
[22:51:00] <Inst> i'm going to nuek it
[22:51:10] <maerwald> ok, I guess I won't get useful information here
[22:51:14] <tomsmeding> :)
[22:51:18] <Inst> sorry
[22:51:57] <monochrom> "Waiting 10 seconds before commencing, if you want to cancel it, now would be the time." saved me
[22:51:58] <maerwald> windows is a shit-show of file-locking... so "ghcup nuke" indeed doesn't work if there's a process still locking files
[22:52:08] <tomsmeding> RT monochrom
[22:52:30] <maerwald> all you  can do is retry file deletion and hope that process died
[22:52:44] <maerwald> don't blame us :)
[22:52:44] <tomsmeding> perhaps it would be an idea to have that ask for a 'y' or something
[22:52:54] <maerwald> tomsmeding: no... ghcup is non-interactive
[22:53:01] <tomsmeding> right
[22:53:06] <monochrom> Nah I'm OK with the current way.
[22:53:14] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:53:15] <Inst> you'll humor me if i say something stupid, right? just this once?
[22:53:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:53:18] <tomsmeding> well, except 'ghcup tui', but then you're asking for it
[22:53:27] <maerwald> tomsmeding: correct
[22:53:36] <maerwald> there could be a nuke option
[22:53:41] *** Joins: ouestbillie (~gallup@142.169.82.16)
[22:54:09] <monochrom> My story is that I disbelieved that "nuke" existed so I entered "ghcup nuke" expecting "invalid argument".
[22:54:14] <maerwald> lol
[22:54:28] <Inst> does it really matter?
[22:54:37] <Inst> i'm used to manually nuking and reinstalling GHCup every few weeks
[22:54:42] <tomsmeding> same as monochrom here lol
[22:54:43] <maerwald> I don't believe --no-preserve-root exists ;>
[22:55:19] <maerwald> Inst: why do you do that?
[22:55:41] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:55:56] *** Joins: ub (~Thunderbi@141.98.252.232)
[22:56:01] <Inst> to get cabal working / fixing random bugs
[22:56:30] <geekosaur> o.O
[22:56:34] <tomsmeding> the creator of ghcup happens to be here in this channel, so if you want to report bugs, this is your chance :p
[22:56:41] <maerwald> yeah... that's why I'm saying. We don't get many bug reports from windows users. It seems they just reinstall and try again
[22:56:51] <Inst> i hope Haskell Foundation gets enough money
[22:57:02] <Inst> they're absolutely right that tooling needs fixing
[22:57:06] <maerwald> :D
[22:57:25] *** Joins: danso (~danso@danso.ca)
[22:57:33] <maerwald> well, they requested windows support in ghcup... I haven't seen a single dollar for it though :p
[22:57:42] <Inst> guessing, with 50% admin expenses, they can hire 200-350k worth of programming work
[22:57:46] <maerwald> (not that I asked)
[22:57:46] *** Joins: aliosablack (~chomwitt@athedsl-15695.home.otenet.gr)
[22:57:47] <Inst> you're the creator of GHCup, aren't you?
[22:57:57] <monochrom> Here be a great irony comparing Linux people and Windows people.
[22:58:07] *** Parts: danso (~danso@danso.ca) (WeeChat 3.3)
[22:58:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[22:58:17] *** Joins: danso (~danso@danso.ca)
[22:58:18] <maerwald> Inst: https://www.haskell.org/ghcup/about/#team
[22:58:40] <monochrom> Linux people whine and cry bug reports upon the slightest pretext, so most bugs aren't reproducible.
[22:58:41] <Inst> Hello, Mr. Ospald.
[22:58:44] *** Parts: danso (~danso@danso.ca) (WeeChat 3.3)
[22:58:45] <Inst> It's an honor to meet you.
[22:58:48] *** Joins: danso (~danso@danso.ca)
[22:58:49] *** Joins: alx741 (~alx741@157.100.93.160)
[22:58:54] *** Parts: danso (~danso@danso.ca) (WeeChat 3.3)
[22:58:57] <maerwald> allrighty
[22:59:12] <monochrom> Windows people can reproduce the bug 10 times, in fact they will go on to repeat and reproduce for 100 more times. Just that they will never talk about it.
[22:59:51] <maerwald> interestingly... windows devs/admins are *extremely* helpful
[23:00:08] <maerwald> I probably asked 200 questions in #powershell and always got an answer
[23:00:13] <Inst> windows users just reimage their system
[23:00:29] <xerox> also the first time they ever had a decent terminal
[23:00:34] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[23:00:39] <monochrom> Yeah I just mean the users.
[23:01:43] <maerwald> Inst: anyway... if you have bug reports with useful information, go here https://gitlab.haskell.org/haskell/ghcup-hs/-/issues
[23:01:51] <Inst> thanks
[23:02:04] <Inst> have a root canal in 90 minutes!
[23:02:33] * geekosaur sends novocaine
[23:02:36] <Inst> still less painful than cabal
[23:02:44] <maerwald> will there be a twitch stream?
[23:03:05] <monochrom> "viewer discretion is advised"
[23:03:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:04:06] <Inst> i'm pissed off, i get monads somewhat
[23:04:22] <maerwald> but yeah... I think WSL2 experience is better on windows (and ghcup/ghc/etc. work there)
[23:04:32] <Inst> like, there's 23928 bad tutorials on monads and 3-5 ones that actually work
[23:04:53] <monochrom> s/bad tutorials/blogs/
[23:04:58] <sm> Inst: lol
[23:05:01] <sm> sorry, good luck 
[23:05:09] <Inst> but i'm more interested in the Haskell type system, or at least, the full possibilities of what data declarations can do
[23:05:14] <geekosaur> monad tutorials are a (bad) joke in the haskell community
[23:05:14] <monochrom> This is why you should just stay away from blogs.
[23:05:23] <Inst> this is why monad obsessions are bad
[23:05:31] <Inst> Haskell type system -> more interesting than monads
[23:05:45] <Inst> i'd kill if all the 23928 bad tutorials on monads were instead bad tutorials on the Haskell type system
[23:05:47] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:05:54] <Inst> you get the type system, monads come automatically
[23:06:06] <monochrom> Bloggers write blogs for self gratification.  Very obvious anti-thesis to teaching and learning.
[23:06:11] <geekosaur> except we had the same type system backj before monads
[23:06:17] <Inst> FYI: I get the FAM typeclasses, maybe, [], IO monad, either to an extent, but not state
[23:06:20] <maerwald> Tutorials on type level programming are probably worse than monad tutorials. There's a good book on it though
[23:06:26] *** Quits: ub (~Thunderbi@141.98.252.232) (Quit: ub)
[23:06:27] <geekosaur> back in the [Response] -> [Request] days
[23:06:33] <monochrom> Moreoever, most people write on the haskell wiki as if it's a blog, too.
[23:06:36] <sm> @remember Inst have a root canal in 90 minutes! still less painful than cabal
[23:06:36] <lambdabot> I will never forget.
[23:06:45] <maerwald> Inst: https://leanpub.com/thinking-with-types
[23:06:48] <Inst> saw that
[23:07:13] <Inst> the stupid thing i wanted to say is that i'm fantasizing about having a completely ass-backwards Haskell course
[23:07:32] <Inst> as in, in the previous version, IO was lesson 3, including reading and writing files
[23:07:38] <Inst> monads were introed in lesson 2
[23:07:46] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:07:49] <monochrom> You can find blogs on type systems from for example the Java and Scala communities.
[23:08:30] <Inst> maerwald: I just want to know what I can and can't do with a data declaration, exactly what a type and data constructor is (beyond the capital letters to the left and right respectively of the = in a data declaration)
[23:08:48] *** Joins: econo (uid147250@user/econo)
[23:08:49] <Inst> then again, I'm probably screwed in lesson 1, wherein I don't have a clear and definite idea of what functional programming is
[23:08:55] <EvanR> make sure you don't make an ass-backwards infinite haskell course, or you can't even get started
[23:09:03] <monochrom> haha
[23:09:11] *** Quits: ouestbillie (~gallup@142.169.82.16) (Ping timeout: 256 seconds)
[23:09:34] <maerwald> if you want to learn nothing, but know a lot about random things, check out http://dev.stephendiehl.com/hask/
[23:09:49] <Inst> that's sort of my learning style
[23:10:34] <sm> Inst: there are docs which cover that sort of thing, you may not have found the write one
[23:10:48] <monochrom> I should write a category theory "tutorial" (so, blog post) called "what I wish I knew when learning math".
[23:10:54] <Inst> 4th attempt on Haskell Report 2010
[23:10:54] <sm> oops, that was not a subliminal suggestion. The right one.
[23:10:57] <Inst> will make 20-50
[23:11:13] <sm> have you tried graham hutton ? (book or youtube course)
[23:11:23] <sm> or the haskell wiki ?
[23:11:29] <maerwald> also, if you want a lot of random links without knowing which one to pick, there's https://www.haskell.org/documentation/
[23:11:30] <yushyin> haskell report and ghc user guide cover most things what 'data ...' can do
[23:12:16] <ephemient> {-# LANGUAGE EmptyDataDecls #-} and {-# LANGUAGE GADTs #-} aren't in the report, but are in the GHC docs
[23:12:17] <Inst> i have the hutton book
[23:12:31] * sm meant haskell wikibook, not haskell wiki. Not the same thing
[23:12:56] <maerwald> haskell wiki is that thing from 2005, right? :)
[23:13:16] <monochrom> It's been so long, I forgot the year.
[23:13:43] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:13:56] <Inst> also, is there a relationship between the concepts immutable and ephemeral?
[23:14:17] *** Quits: cstml (~cstml@user/cstml) (Ping timeout: 256 seconds)
[23:16:26] <Inst> that's probably too many dumb things to say for one day, i'm wondering how, at some point, I can learn / teach GUI with Haskell
[23:16:46] <sm> not one that we think about much, Inst. 
[23:17:35] <Inst> immutability means that if you try to implement objects, you either can't actually change them (immutability) or they stop existing the moment they're no longer referenced (ephemerality)
[23:18:31] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 250 seconds)
[23:18:56] <sm> there's a recent reddit thread listing GUI libs, did you see it ? https://code.world/haskell or Gloss are the easiest ways to start with GUI
[23:19:12] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:19:24] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:20:16] <Inst> i get directed to code.world repeatedly
[23:20:42] *** Joins: ouestbillie (~gallup@142.169.82.16)
[23:20:56] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: leaving)
[23:21:21] *** Joins: alx741 (~alx741@157.100.93.160)
[23:22:02] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:22:08] <Inst> is code.wordl FRP?
[23:22:25] <EvanR> I think immutability means you can't change them
[23:22:50] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Client Quit)
[23:23:14] <EvanR> GUI with haskell seems to be reactive banana + wxwidgets, or three-penny-gui for a long time
[23:23:45] <maerwald> if you delete an object, is it really immutable?
[23:24:15] <Inst> you mean this?
[23:24:16] <Inst> https://wiki.haskell.org/WxHaskell
[23:24:20] <EvanR> yeah
[23:24:26] <Inst> supposedly no longer being supported
[23:24:31] <EvanR> unsurprised
[23:25:24] <geekosaur> got desupported when wxwidgets was changing too quickly for the haskell bindings to keep up. if it got picked up again now things might go better
[23:25:26] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:25:37] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:25:56] <maerwald> no one's doing gui anymore... it's either web or tui
[23:26:02] <maerwald> and I think I'm ok with it
[23:26:17] <EvanR> or how ever you do a GUI in a video game
[23:26:23] <EvanR> other than text UI
[23:26:36] <monochrom> I still want gui instead of tui, but since I'm too lazy to do it, I am not complaining :)
[23:26:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:27:12] <geekosaur> pretty much all of my programming these days in any language is tui
[23:27:16] <Inst> text ui
[23:27:18] <maerwald> monochrom: well, I started a haskell filemanager in GTK+:3 long time ago, but never finished. Today I would write it in TUI
[23:27:23] <geekosaur> just how ancient geeks roll
[23:27:40] <Inst> i had a problem wherein a simple Haskell line reader / writer wouldn't accept chars
[23:27:42] <maerwald> TUI with mouse support
[23:27:45] <Inst> the reason I'm reinstalling cabal is because
[23:27:54] <geekosaur> doable
[23:27:58] <monochrom> And tui is still better than command line flags
[23:28:05] <Inst> apparently by default, at least on windows, you can't get a detect key
[23:28:14] <Inst> hmmm, damnit, ghcup is reinstalling
[23:28:37] <maerwald> why?
[23:28:52] *** Quits: michalz (~michalz@185.246.204.104) (Remote host closed the connection)
[23:29:23] <monochrom> Hrm, FRP for TUI, now that's an idea...
[23:30:09] <Inst> detect keypress
[23:30:14] <geekosaur> thought someone had played with that
[23:30:32] <Inst> not in SystemIO, getChar with powershell GHCI wants a line, but only processes the first item
[23:30:46] <Inst> alternative: readLine, Haskeline, depending on comfort with monad transformers
[23:31:07] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:31:20] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:31:22] <Inst> readKey (iirc) returns IO Char
[23:31:22] <maerwald> monochrom: already exists
[23:31:41] <Cale> maerwald: I am sort of sad though that all the web view widgets decided to drop their API that lets you manipulate the DOM from outside without javascript
[23:31:48] <maerwald> https://hackage.haskell.org/package/reflex-vty
[23:32:08] <monochrom> Ah nice
[23:32:27] <Cale> maerwald: For a little while, we could use the DOM as a glorified drawing library and control the contents 100% with native Haskell, now it needs some kinda janky JS websocket hackery.
[23:32:43] <monochrom> Oh Obidian again.
[23:32:45] <Cale> Oh, if you're trying out reflex-vty, let me know how you get on with it
[23:33:10] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:33:11] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[23:33:31] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:33:57] <Cale> (Ali Abrar and I made it over the course of a few weekends spread out over a couple of years)
[23:33:59] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[23:35:05] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:01] <tomsmeding> Inst: trying to get a single key will probably fail in interesting ways in ghci, but that's probably due to the interaction with ghci more than anything else. Did you try to compile and run the executable?
[23:36:07] <tomsmeding> (or use 'runhaskell'
[23:36:08] <tomsmeding> )
[23:36:48] <geekosaur> runhaskell behaves like ghci
[23:36:58] <tomsmeding> but not the repl part ;)
[23:37:10] <tomsmeding> which is what I think interacts with this
[23:37:18] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:56] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:38:11] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[23:40:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:41:51] <geekosaur> and as for getting a single key vs. ghci, I think that actually works *better* in ghci because it's running in character at a time mode, on unix at least. compiled programs have to do an extra step to get character at a time
[23:42:03] <geekosaur> might have to do that same extra step on windows too
[23:42:20] <geekosaur> hSetBuffering stdout NoBuffering
[23:42:26] <geekosaur> (import System.IO for this)
[23:43:21] <tomsmeding> geekosaur: https://ircbrowse.tomsmeding.com/day/lchaskell/2022/01/14?id=375142#trid375142
[23:43:25] *** Joins: alx741 (~alx741@157.100.93.160)
[23:44:08] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:44:16] <tomsmeding> presumably that didn't work for them, perhaps because they're working in ghci -- I have no clue what ghci does on windows, but given the dragons that come out sometimes with stack ghci vs stack exec ghci vs ghci vs ghc --interactive, I'm not hopeful
[23:44:30] <tomsmeding> vs ghci.sh
[23:46:24] * tomsmeding was thinking about this https://github.com/commercialhaskell/stack/issues/4737
[23:46:40] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:50:24] *** Joins: lispy (~lispy4@84.69.59.93)
[23:51:50] *** Quits: lispy (~lispy4@84.69.59.93) (Client Quit)
[23:52:26] *** Joins: lispy (~lispy4@84.69.59.93)
[23:54:30] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[23:54:50] *** Joins: spaceseller (~spacesell@31.147.205.13)
[23:56:13] *** Quits: IndecisionTree (mike@user/IndecisionTree) (Ping timeout: 256 seconds)
