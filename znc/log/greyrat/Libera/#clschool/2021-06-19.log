[20:58:06] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[20:58:06] *** Server sets mode: +nt 
[21:00:02] <greyrat> How do I define a global variable? Using `setq` gives me warnings of `undefined variable: ...`, using `defvar`, `defparameter` declares the value as special.
[21:01:39] <thrig> what's different about your "global variable" that defparameter doesn't work for it?
[21:14:16] <edgar-rft> I'm just asking myself if the SYMBOL-VALUE slot of an INTERNed symbol is "special" in the "special variable" sense. Or in other words, is there a difference between (DEFPARAMETER <symbol> <value>) and  (PROGN (INTERN <symbol>) (SETF <symbol> <value>)) ?
[21:16:03] <mfiano> symbols are interned on read automatically
[21:16:47] <edgar-rft> mfiano: if that were true then SETQ wouldn't complain about undefined variables
[21:16:48] <thrig> this seems important enough to not leave to some summer intern
[21:21:22] <mfiano> edgar-rft: SETQ isn't required to complain. That is implementation-specific behavior, and it would still complain in that case on SBCL since the variable is not special and doesn't have a binding
[21:22:41] <mfiano> In Common Lisp, it is undefined behavior to set a non-existent variable
[21:23:38] <edgar-rft> yes, but the question was: is the SYMBOL-VALUE slot "special" if not declared via DEFVAR or DEFPARAMETER or any other explicit declaration
[21:24:50] <mfiano> variables (locations) can be special, not bound values
[21:25:26] <edgar-rft> in other words: is there a way to create non-special global variables
[21:25:44] <mfiano> Yes, using implementation specifics (on some implementations)
[21:25:51] <mfiano> Not portably in CL though
[21:26:01] <mfiano> Unless you want a constant-variable with defconstant
[21:27:23] <edgar-rft> but if the SYMBOL-VALUE slot of an INTERNed symbol can be non-special then this *is* a way to create non-special global variables, or not?
[21:29:22] <mfiano> Not. values can't be special
[21:29:44] <mfiano> There is no "can be". It doesn't make sense
[21:30:37] <thrig> FOO would get interned in common-lisp-user (or somewhere) and then would vanish after a in-package elsewhere
[21:31:42] <mfiano> If you want to create true global variables semi-portably, your best option is https://github.com/lmj/global-vars/
[21:32:41] <edgar-rft> but DEFVAR and DEFPARAMETER both INTERN symbols and declare the SYMBOL-VALUE slot special, so why can't values be special?
[21:33:33] <mfiano> Show me where it says that
[21:33:42] <edgar-rft> *you* say that
[21:34:09] <mfiano> I never said SYMBOL-VALUE cell is declared special
[21:34:18] <mfiano> because it is not
[21:35:14] <edgar-rft> how else do you declare a variable as special (I mean internally)
[21:35:47] <mfiano> defvar, defparameter, or declare
[21:36:06] <edgar-rft> internally, not semantically
[21:36:17] <mfiano> That is up the the implementation
[21:39:47] <edgar-rft> Let me phrase it differently. I know there are special variables (DEFVAR, DEFPARAMETER, etc.) and lexical variables (bound by LET etc.). Is there any other form of variables in the standard?
[21:40:23] <mfiano> If a form is a symbol, then it is either a symbol macro or a variable.
[21:41:35] <edgar-rft> in what context?
[21:43:05] <edgar-rft> for example in (defun <symbol> (arghs) <code>) the <symbol> is clearly *not* a symbol macro or a variable
[21:46:50] <mfiano> It is a symbol as soon as it is read, before it is macroexpanded
[21:46:54] <mfiano> and therefor a variable
[21:53:38] *** Joins: phoe (~phoe@user/phoe)
[21:54:16] <phoe> edgar-rft: there are no other variable types in the standard
[21:54:45] <phoe> well, okay, there are constant variables but they are the boring type from our point of view because setting them is impossible
[21:54:59] <mfiano> The only variable types there are are constant variables and non-constant variables
[21:55:39] <phoe> and symbols can name lexical variables or dynamic variables
[21:55:51] <mfiano> or symbol macros
[21:56:07] <phoe> symbol macros ain't variables though
[21:56:22] <phoe> these work in the variable namespace, but we're talking about vars here
[21:56:28] <mfiano> Right, I was just quoting the hyperspec
[21:56:36] <mfiano> "f a form is a symbol, then it is either a symbol macro or a variable."
[21:56:42] <mfiano> If*
[21:57:31] <phoe> oh, yes
[21:57:39] <mfiano> symbol-macros are another way to simulate "global variables"
[22:04:06] *** Joins: derelict (~derelict@user/derelict)
[22:11:34] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 265 seconds)
[22:23:55] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:26:42] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[22:39:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[22:40:18] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:56:33] *** Joins: Riviera (Riviera@user/riviera)
[23:23:08] *** Joins: makomo (~makomo@user/makomo)
[23:24:05] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[23:30:32] *** Joins: selwyn (~selwyn@user/selwyn)
[23:41:53] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
