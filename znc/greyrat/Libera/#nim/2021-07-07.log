[00:00:04] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Digital logic languages have two phases, elaboration and simulation
[00:00:11] <FromDiscord> <ynfle (ynfle)> So what does matched mean in this case?
[00:00:13] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'm trying to move elaboration to compile time
[00:00:17] <FromDiscord> <leorize> what we are focusing on is that all non-primitive operations are in the vm itself and not optimized by compiling to native
[00:00:32] <FromDiscord> <timotheecour> https://github.com/timotheecour/Nim/issues/598 would solve that
[00:00:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> but I don't know if elaboration at compile time would be too slow - I guess there's only one way to find out
[00:01:22] <FromDiscord> <timotheecour> (edit) "that" => "that. There's indeed no upper bound on cost of VM relative to native code (python comparison is irrelevant because it can use C), depending on use case."
[00:01:34] <FromDiscord> <haxscramper> [ynfle (ynfle)](https://matrix.to/#/@ynfle-5f16f3e4d73408ce4fea241f:gitter.im)\:   matched means ... matched? We are doing pattern matching, so matched means "object triggers against this branch, and it is executed"
[00:01:43] <FromDiscord> <leorize> if you're mainly generating AST then it should not be too slow
[00:01:47] <FromDiscord> <timotheecour> (edit) "that." => "that, allowing VM for select user defined code to be as fast as native code."
[00:01:56] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3s9T
[00:01:57] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yes - mainly AST
[00:03:19] <FromDiscord> <@bracketmaster-5a708063d73408ce4> but a user of the DSL could decide they want to do some expensive computation to determine to parameterize their logic↵↵I guess the answer is, just don't do that
[00:04:10] <FromDiscord> <haxscramper> Isn't this stuff terribly expensive?
[00:04:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> elaboration is just AST traversal
[00:04:53] <FromDiscord> <@bracketmaster-5a708063d73408ce4> simulation is the expensive part
[00:05:34] <FromDiscord> <@bracketmaster-5a708063d73408ce4> now if the person has a very complex design such as a 2000 core GPU, elaboration can get pretty expensive
[00:06:28] <FromDiscord> <haxscramper> hmm, maybe I've just messed up terms. I thought elaboration included layout and all that kind of styff
[00:06:50] <FromDiscord> <@bracketmaster-5a708063d73408ce4> no, thats PNR - or place and route
[00:07:40] <FromDiscord> <@bracketmaster-5a708063d73408ce4> elaboration consumes some DSL and spits out a digital circuit
[00:07:43] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that is represented as a graph
[00:08:24] <FromDiscord> <haxscramper> netlist? Btw, there is a third option - you can use nimscript and pass some implementation procs to it, that do all heavy lifting
[00:09:03] <FromDiscord> <haxscramper> But that is only viable if your DSL is completely detached from other nim code
[00:09:04] <FromDiscord> <haxscramper> Just purely DSL
[00:09:04] <FromDiscord> <haxscramper> Just pure DSL
[00:09:05] <FromDiscord> <@bracketmaster-5a708063d73408ce4> circuit == netlist in most contexts I think
[00:09:37] <FromDiscord> <@bracketmaster-5a708063d73408ce4> the netlist elaboration spits out is usually far less granular than the synthesis netlist however
[00:10:01] <FromDiscord> <@bracketmaster-5a708063d73408ce4> implementation procs?
[00:10:09] <FromDiscord> <@bracketmaster-5a708063d73408ce4> tell me more?
[00:11:33] <FromDiscord> <haxscramper> You can embed nimscript in your program - https://github.com/haxscramper/hack/blob/master/testing/nim/compilerapi/test5.nim#L112↵Or you can use `compiler/parser` that would accept nim code
[00:11:52] <FromDiscord> <haxscramper> Basically if everything you care about is a macro, you can implement a program
[00:11:59] <FromDiscord> <haxscramper> That would act like a macro
[00:12:08] <FromDiscord> <haxscramper> Takes nim code, generates `<something>`
[00:12:53] <FromDiscord> <haxscramper> But that is more of an extreme option, and I haven't done this for anything yet
[00:13:31] <FromDiscord> <haxscramper> I'm just saying it is possible, and not that hard (AST for `compiler/parse` is exactly as NimNode, except it is called PNode)
[00:13:55] <FromDiscord> <haxscramper> and some other details
[00:14:34] <FromDiscord> <haxscramper> https://github.com/beef331/nimscripter
[00:14:37] <fn> <12R2D299> 4GitHub: 7"Quick and easy Nim <-> Nimscript interop"
[00:14:37] <FromDiscord> <haxscramper> https://peterme.net/how-to-embed-nimscript-into-a-nim-program-embedding-nimscript-pt-2.html
[00:14:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> interesting
[00:21:00] <FromDiscord> <haxscramper> If you are writing language (almost) from scratch you can go with compiler parser
[00:21:23] <FromDiscord> <haxscramper> Basically just save time on parser
[00:22:13] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what do you mean by this?
[00:23:50] <FromDiscord> <haxscramper> By "implementing digital logic language" you mean you are writing one from scratch, correct?
[00:24:03] <FromDiscord> <haxscramper> And you want to reuse nim macros to define language syntax
[00:24:41] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yes
[00:24:45] <FromDiscord> <@bracketmaster-5a708063d73408ce4> here is a snippet\:
[00:24:50] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sent a long message, see http://ix.io/3s9W
[00:24:55] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3s9X
[00:25:34] <FromDiscord> <Bung> oh, nimscripter why I not notice it earlier , maybe I could use it as theme plugin
[00:25:40] <FromDiscord> <haxscramper> I though you just wanted to reuse syntax. But you really want to
[00:25:45] <FromDiscord> <haxscramper> use nim type system as well?
[00:26:19] <FromDiscord> <haxscramper> Or not? The ` Output c = Signed(1024.Max)` part confuses me
[00:26:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yes - although I'm open to other options
[00:26:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> What that means is create an 11bit signal
[00:27:00] <FromDiscord> <@bracketmaster-5a708063d73408ce4> because we need 11 bits to represent a signed 1024 value
[00:27:07] <FromDiscord> <haxscramper (haxscramper)> yes, that message certainly didn't go well through the bridge
[00:28:06] <FromDiscord> <haxscramper (haxscramper)> Well, that's an interesting one
[00:28:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://spinalhdl.github.io/SpinalDoc-RTD/SpinalHDL/Structuring/components_hierarchy.html#introduction
[00:28:35] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that's another one from Scala
[00:29:11] <FromDiscord> <haxscramper (haxscramper)> So ideally you want to write this DSL code and make it output netlist, but benefit from nim type checking, correct?
[00:29:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yes. also, I'd like to support netlist simulation in nim
[00:29:58] <FromDiscord> <@bracketmaster-5a708063d73408ce4> although if I export the netlist to verilog, I could simulate in verilator
[00:30:40] <FromDiscord> <@bracketmaster-5a708063d73408ce4> In fact, verilator has a c simulator api - its possible to use verilator as a simulation backend from other languages
[00:31:09] <FromDiscord> <haxscramper> I think you can do this using compiler API
[00:31:10] <FromDiscord> <haxscramper> But no nim macros
[00:31:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Do you think that's a better idea?
[00:31:49] <FromDiscord> <haxscramper> So the idea is - you write your code in separate file as your DSL, then you parse it using `compiler/parser`. Then you convert the code into something nim can semcheck
[00:31:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Also - want to  DM so we don't blow up the Nim chat?
[00:32:09] <FromDiscord> <haxscramper> On discord/matrix
[00:32:18] <FromDiscord> <haxscramper> or telegram
[00:33:27] <FromDiscord> <haxscramper (haxscramper)> or gitter
[00:34:56] *** Quits: PMunch (~PMunch@178.74.36.198) (Ping timeout: 252 seconds)
[00:35:20] *** Joins: PMunch (~PMunch@178.74.36.198)
[00:51:41] <FromDiscord> <deech> Is there any way to macroexpand a macro that isn't syntactically valid?
[00:56:41] <FromDiscord> <vindaar> in what sense syntactically invalid though?
[00:56:42] <PMunch> echo result.repr?
[00:56:47] <FromDiscord> <vindaar> it must be representable by nim nodes
[01:01:49] <FromDiscord> <KJ> sent a code paste, see https://play.nim-lang.org/#ix=3sab
[01:02:28] <FromDiscord> <ynfle (ynfle)> Can someone help me with a segfault?
[01:05:13] <FromDiscord> <kaushalmodi> In reply to @KJ "Im trying to figure": It says↵↵> required type for default: Option[system.string]↵> but expression 'default = "10"' is of type: string
[01:06:01] <FromDiscord> <KJ> so it wants either none or system.string but isnt system.string the same as string
[01:06:40] <FromDiscord> <kaushalmodi> In reply to @KJ "so it wants either": It needs `Option[system.string]`, not a plain string. So pass it `some("10")`. e.g. https://play.nim-lang.org/#ix=3sac
[01:06:50] <FromDiscord> <ynfle (ynfle)> system.string isnt the same as Option[system.string]
[01:07:20] <FromDiscord> <KJ> i see
[01:14:14] <FromDiscord> <talaing> Hello. How can I receive data from socket using `nativesockets` module?
[01:15:25] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3sag
[01:20:22] <FromDiscord> <ynfle (ynfle)> My guess is the buffer
[01:28:43] <FromDiscord> <talaing> Also, what is `pointer` type?
[01:28:50] <FromDiscord> <talaing> Is it like a pointer to some variable?
[01:29:24] <FromDiscord> <ynfle (ynfle)> Ya
[01:29:31] <FromDiscord> <ynfle (ynfle)> Like `void ` in C
[01:33:01] <FromDiscord> <kaushalmodi> In reply to @talaing "Also, what is `pointer`": https://nim-lang.github.io/Nim/manual#types-reference-and-pointer-types
[01:34:03] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[01:46:14] <FromDiscord> <KJ> damn we have pointers in nim, I need to check this shit out. I have been so deprived of that pointer goodness from using python (python has there just isn't much point in using them)
[01:46:33] <FromDiscord> <ynfle (ynfle)> `ref` is what you should be using
[01:46:39] <FromDiscord> <ynfle (ynfle)> it's traced
[01:46:55] <FromDiscord> <ynfle (ynfle)> `ptr` & `pointer` is generally for interface with C
[01:47:54] <FromDiscord> <KJ> right
[01:48:25] <FromDiscord> <talaing> I'm not really sure how buffer is supposed to work.
[01:49:25] <FromDiscord> <talaing> I'm currently looking at https://github.com/nim-lang/Nim/blob/devel/lib/pure/net.nim and trying to understand how `recv()` function works in here, but there are 6 functions called `recv()`
[01:50:08] <FromDiscord> <talaing> (edit) "6" => "5"
[01:50:33] <FromDiscord> <talaing> 4 of them return `int` and only the last one returns `string`
[01:50:47] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3sal
[01:52:22] <FromDiscord> <talaing> (edit) "https://play.nim-lang.org/#ix=3sal" => "https://play.nim-lang.org/#ix=3sam"
[01:53:59] <FromDiscord> <ynfle (ynfle)> None of them are `recv` from winlean
[01:56:52] <FromDiscord> <talaing>  https://media.discordapp.net/attachments/371759389889003532/862082188899909632/yD41la8D.png
[01:56:58] <FromDiscord> <talaing> this is the first one
[02:00:54] <FromDiscord> <ynfle (ynfle)> What makes you think its the one from winlean?
[02:00:58] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 240 seconds)
[02:03:38] <FromDiscord> <talaing> I don't think recursion would make any sense here
[02:04:23] <FromDiscord> <talaing> and all arguments are matching the function from `winlean`
[02:04:32] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3sao
[02:04:32] <FromDiscord> <ynfle (ynfle)> It has nothing to do with recursion
[02:04:34] <FromDiscord> <ynfle (ynfle)> You're right
[02:04:41] <FromDiscord> <ynfle (ynfle)> Check out the tests [here](https://github.com/nim-lang/Nim/blob/44e653a9314e1b8503f0fa4a8a34c3380b26fff3/tests/stdlib/tnetdial.nim#L36)
[02:05:13] *** Quits: max22- (~maxime@2a01cb0883359800df4cb6313c4e6042.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:08:18] <FromDiscord> <talaing> Honestly, it's pretty confusing ._.
[02:09:33] <FromDiscord> <ynfle (ynfle)> In c, a string is just an array of characters.
[02:10:12] <FromDiscord> <ynfle (ynfle)> You pass in the address of the first character and it reads from the buffer (over here the buffer of the socket) in to that "string
[02:10:40] <FromDiscord> <ynfle (ynfle)> \basically just array of `char`s with a null terminater
[02:10:50] <FromDiscord> <ynfle (ynfle)> Use the high level ones that use `var string`
[02:10:57] <FromDiscord> <ynfle (ynfle)> Are you trying to figure out the implementation?
[02:14:45] <FromDiscord> <dom96> @talaing what's your goal?
[02:18:25] <FromDiscord> <ynfle (ynfle)> How can I use 2 experimental features? 2 experimental statements?
[02:19:32] <FromDiscord> <talaing> I'm writing a program which is extremely performance sensitive, I mean I need to achieve speed as fast as possible. I believe there is faster way to use sockets than importing entire `net` module and that's why I want to use lowest level module possible - `nativesockets`.
[02:20:07] <FromDiscord> <dom96> what does the program do?
[02:20:50] <FromDiscord> <ynfle (ynfle)> @\_discord\_450293018910654464\:t2bot.io what isn't used will be discarded by the compiler
[02:22:21] <FromDiscord> <talaing> In reply to @dom96 "what does the program": I feel like explaining it would take a lot of time, as it's really complicated.
[02:27:24] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3sar
[02:27:28] <FromDiscord> <talaing> Now I need to receive data from socket
[02:27:46] <FromDiscord> <ynfle (ynfle)> This is for windows?
[02:28:31] <FromDiscord> <talaing> Yes
[02:33:30] <fn> <11ForumUpdaterBot99> New post on r/nim by h234sd: Nim Data Table | Best Countries for Investments, see https://reddit.com/r/nim/comments/of56bu/nim_data_table_best_countries_for_investments/
[02:50:09] <FromDiscord> <dom96> In reply to @talaing "I feel like explaining": surely you can give a high-level overview, knowing this context can help me advise you how to get the best performance
[02:53:27] <FromDiscord> <KJ> hmmm, one of my cores was pegged at 100%, turns out `nimsuggest` was absolutely devouring cpu usage
[02:53:59] <FromDiscord> <talaing> In reply to @dom96 "surely you can give": I need to send ~18 HTTP requests as fast as possible. My current program which uses `net` does it within `0.006s` which may seem like you can't do better than that, but like I said, I believe I can do way better than that with `nativesockets` module.
[02:54:32] <FromDiscord> <talaing> They are all POST requests with some json data.
[02:54:55] <FromDiscord> <talaing> (edit) "`0.006s`" => "`0.007s`"
[02:55:05] <FromDiscord> <talaing> (edit) "`0.007s`" => "`~0.007s`"
[02:57:31] <FromDiscord> <dom96> do all HTTP requests go to the same hostname?
[02:57:49] <FromDiscord> <talaing> That's right
[02:58:02] <FromDiscord> <dom96> cool, so you can eliminate `getAddrInfo`
[02:58:18] <FromDiscord> <dom96> just sock.connect("ip")
[02:58:39] <FromDiscord> <talaing> Oh, good to know!
[02:59:34] <FromDiscord> <dom96> although if you're doing POSIX sockets then you'll still need to construct this addr info struct
[03:00:27] <FromDiscord> <dom96> https://en.wikipedia.org/wiki/Berkeley_sockets#Client
[03:00:30] <FromDiscord> <dom96> this has a pretty nice example
[03:00:51] <FromDiscord> <dom96> you should be able to translate that to Nim fairly easily
[21:04:11] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[21:04:52] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[21:05:01] <FromDiscord> <juan_carlos> Why are you even adding a type?, the macro will not use it, macro can only use return auto, is hardcoded in it.
[21:05:27] <FromDiscord> <Rika> its meant to further coerce the type
[21:05:30] <FromDiscord> <Rika> the proc i mean
[21:05:33] <FromDiscord> <Rika> supposedly;.
[21:05:35] <FromDiscord> <Rika> (edit) "supposedly;." => "supposedly."
[21:05:51] *** Server sets mode: +nt 
[21:06:54] <FromDiscord> <juan_carlos> let foo = (arg0, arg1, result) => code here; result = doStuff()
[21:07:03] <arkanoid> "let identity: int -> int = x => x" is a perfectly logical line. Maps an anonymous procedure to a variable with compatible procedure type
[21:07:10] <FromDiscord> <juan_carlos> Then it returns void, and you get result on the var result.
[21:07:39] <FromDiscord> <Rika> what?
[21:07:55] <FromDiscord> <juan_carlos> But the macro do not use it currently...
[21:08:11] <FromDiscord> <Rika> it's akin to `let identity = proc(x: int): int = x` except it's not working
[21:08:25] <FromDiscord> <Rika> where it seems like it shoud
[21:08:26] <FromDiscord> <Rika> (edit) "shoud" => "should"
[21:09:39] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[21:09:43] <FromDiscord> <juan_carlos> CTRL+F for "auto" on sugar.nim you will see is hardcoded to auto is not going to read the type from the variable if any.
[21:10:14] <FromDiscord> <Rika> i know that it is auto
[21:10:23] <FromDiscord> <Rika> i know that it isnt working because of it
[21:10:36] <FromDiscord> <Rika> what i mean is that shouldnt the compiler be smarter about this?
[21:10:43] <arkanoid> to prove it makes sense, if I replace the right hand side with proc it works "let identity: int -> int = proc(x: int): int = x". Why isn't auto capable of doing its job?
[21:11:43] <FromDiscord> <Rika> and im pretty sure its completely fine when you pass a `=>`'d proc to a function's parameter with type `int -> int`
[21:11:55] <FromDiscord> <Rika> which is roughly the same to the let expression arkanoid sent
[21:12:33] <FromDiscord> <juan_carlos> No idea, I am not compiler dev.
[21:12:59] <FromDiscord> <juan_carlos> Maybe if signature of func is kinda complex use a normal proc.
[21:13:30] <arkanoid> this works: "let identity: int -> int = proc(x: int): auto = x", it's the auto of the parameter type causing issues
[21:13:51] <arkanoid> kinda complex? an identity function?!
[21:14:07] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[21:14:26] <FromDiscord> <Rika> nim does not use the same type system as haskell
[21:14:45] <FromDiscord> <Rika> nim is not especially focused on having the same declaration system as haskell
[21:15:15] <FromDiscord> <Rika> yes, i still think this should be fixed
[21:15:16] <arkanoid> my haskell LOC count is zero
[21:15:35] <FromDiscord> <Rika> well i assumed it was haskell because it looked a lot like it
[21:15:41] <FromDiscord> <Rika> anyway, functional languages
[21:15:52] <FromDiscord> <Rika> use roughly the same type system
[21:15:57] <arkanoid> I was just refactoring some working nim code and I drilled down to that minimal example, that's it
[21:16:43] <arkanoid> do you think it should be issued in GH?
[21:17:04] <arkanoid> I don't even know how to name this to search existing issues
[21:17:34] <FromDiscord> <Rika> i feel like it should, though i do not know what to search either
[21:26:58] <arkanoid> I don't even know the correct title to address this
[21:27:22] <arkanoid> should I blame "auto" straight, or just talk about simple sugar composition fails
[21:34:13] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[21:46:55] <FromDiscord> <PressF> How do you convert a string provided by readLine(stdin) to an integer?
[21:47:32] <FromDiscord> <haxscramper> `.parseInt()`
[21:47:45] <FromDiscord> <haxscramper> https://nim-lang.org/docs/parseutils.html#parseInt%2Cstring%2Cint%2Cint
[21:47:51] <FromDiscord> <vindaar> https://nim-lang.github.io/Nim/strutils.html#parseInt%2Cstring
[21:47:55] <FromDiscord> <vindaar> better that one ;)
[21:48:13] <FromDiscord> <haxscramper> ah, yes
[21:48:23] <FromDiscord> <haxscramper> I'm still getting confused by the fact they are in different modules
[21:48:59] <FromDiscord> <kaushalmodi> I think `strutils.parseInt` calls `parseutils.parseInt` but also raises an exception if needed.
[21:49:30] <FromDiscord> <vindaar> I think in this case it's kind of nice. It separates what new users probably want / what one wants if parsing isn't the main use case
[21:50:02] <FromDiscord> <kaushalmodi> > but also raises the exception if needed↵Yes: https://github.com/nim-lang/Nim/blob/ffce6de84c94348dd5a615c9855a14ed64807449/lib/pure/strutils.nim#L1069-L1072
[21:50:19] <FromDiscord> <PressF> thx guys
[21:50:23] <FromDiscord> <PressF> I'll test it
[21:51:24] <FromDiscord> <PressF> it worked thx
[22:30:33] *** Joins: rockcavera (~rc@192.12.113.192)
[22:30:33] *** Quits: rockcavera (~rc@192.12.113.192) (Changing host)
[22:30:33] *** Joins: rockcavera (~rc@user/rockcavera)
[22:43:46] *** Quits: max22- (~maxime@2a01cb08833598000c10462ac28e9a0b.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[22:52:11] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[23:40:12] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[23:43:22] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
