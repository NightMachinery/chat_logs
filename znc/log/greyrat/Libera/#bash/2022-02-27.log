[00:00:12] *** Quits: xx (~xx@user/xx) (Ping timeout: 240 seconds)
[00:01:11] *** Quits: sinaowolabi (~SinaOwola@160.152.123.90) (Ping timeout: 245 seconds)
[00:03:54] <kurahaupo> coc0nut: I don't understand why people use [ … == … ] - either they're using Bash, in which case  [[ … ]] has saner behaviour, or they use [ ] for compatibility, in which case == is incompatible
[00:05:31] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[00:06:17] *** Quits: rgrinberg (~textual@2806:101e:7:79ba:dc50:f4f5:8b68:5890) (Ping timeout: 240 seconds)
[00:06:35] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[00:06:48] <OnlineCop> I don't know the difference, personally. That's probably the same reason "people" are using the wrong ones.
[00:07:05] <Shortstop> thanks that worked geirha
[00:07:19] <Shortstop> gonna try it out by logging out and logging back in with my bash function now
[00:07:25] <coc0nut> kurahaupo, it worked in this script. have to say i have very little experience with bash. been learning some python and so on. but still a noob hehe
[00:07:33] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[00:07:57] *** Quits: drd (~drd@2001:b07:a70:9f1f:7c59:9868:ca2f:aa81) (Ping timeout: 256 seconds)
[00:08:15] <coc0nut> but printf "alias n='nano'" >> ~/.bashrc <- is this a problem in a bash script?
[00:08:38] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[00:08:45] <coc0nut> thinking theres something with ' and " into eachother?
[00:08:46] *** Joins: jensen (~jensen@65.78.100.184)
[00:08:52] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:08:54] <coc0nut> must it be a space between single and double quote?
[00:08:58] <geirha> you'll want a newline there. Or at least ;
[00:08:59] <larryv> you probably want to add a newline
[00:09:36] <phy1729> RFC: !learn [== == is not a valid test for POSIX [. If you are targeting POSIX, you must use [ and =. If you are using a bash shebang, use [[ instead.
[00:09:48] <geirha> Any script that modifies my .bashrc is a script I'll avoid running
[00:10:15] <coc0nut> printf "alias n='nano'" >> ~/.bashrc ;
[00:10:18] <coc0nut> this is more like it?
[00:10:33] <geirha> still missing newline
[00:10:34] <phy1729> with a \n usually
[00:10:39] <larryv> sorry. we mean that your printf needs to output a newline or ;
[00:11:01] <geirha> else you'll end up with  alias n='nano'alias v='vim'alias ...
[00:12:00] <larryv> # printf '%s' a b c
[00:12:02] <shbot> larryv: abc
[00:12:03] <larryv> # printf '%s\n' a b c
[00:12:05] <shbot> larryv: a
[00:12:05] <shbot> larryv: b
[00:12:05] <shbot> larryv: c
[00:12:10] <coc0nut> ill show u
[00:12:11] *** Quits: extor (~xtor@192.99.217.240) (Ping timeout: 268 seconds)
[00:12:27] *** Quits: tobybl (~tobybl@229.193.115.87.dyn.plus.net) (Ping timeout: 256 seconds)
[00:12:48] <coc0nut> i ended up adding the aliases manually so havent tested if this works, but at least the syntax error is gone now
[00:12:49] <OnlineCop> coc0nut: I have a separate .bash_aliases file. Within .bashrc, I check if that file exists, and if it does, source it. That lets me do Bad Things to the aliases there, and not break the rest of my .bashrc if I delete it and start over.
[00:13:02] <coc0nut> but ill show you how i made my linebreaks, which seems to work fine
[00:13:11] <OnlineCop> ("it" being that .bash_aliases file, not .bashrc)
[00:13:26] *** Quits: Shortstop (~Shortstop@2603-9000-7704-32c6-0000-0000-0000-e936.inf6.spectrum.com) (Quit: WeeChat 3.4)
[00:14:54] <coc0nut> hehe, alias.sh file yes
[00:15:01] <geirha> editing manually is the sane approach
[00:15:21] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[00:15:26] <coc0nut> but please dont mind my wannabe l33t accent in the script haha im just playing abit with it
[00:15:27] <coc0nut> https://pastebin.com/MvtkuBET
[00:15:27] <pasteban> Paste is available without ads on https://pastebin.com/raw/MvtkuBET
[00:16:08] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[00:16:23] <geirha> yikes
[00:16:48] <larryv> !check
[00:16:49] <checkbot> coc0nut: Line 6: Don't use variables in the printf format string. Use printf '..%s..' "$foo". Line 32: Don't use variables in the printf format string. Use printf '..%s..' "$foo". Line 33: read without -r will mangle backslashes. See https://shellcheck.net/?id=cb8409 for all 4 issues.
[00:17:41] <geirha> consider using a verbatim heredoc at least
[00:18:32] <OnlineCop> I see: alias up='uptime'\nalias n='nano'
[00:18:50] <coc0nut> ai, i tried that and edited alot
[00:18:57] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 256 seconds)
[00:18:58] *** Joins: Shortstop (~Shortstop@2603:9000:7704:32c6::e936)
[00:19:11] <Shortstop> back again, yeah 'ebook-convert' does not like the filenames I provided lol
[00:19:13] <Shortstop> https://bpa.st/H2LQ
[00:19:23] <Shortstop> ^ Bash function in my ~/.bashrc
[00:19:28] *** Joins: akoana (~ah@user/akoana)
[00:19:28] <Shortstop> my attempt to run it: https://bpa.st/2SBQ
[00:19:33] <geirha> cat >> ~/.bashrc << 'EOF'
[00:19:44] <geirha> alias la='ls -la ; pwd'
[00:19:45] <larryv> Shortstop: you didn't quote all the expansions
[00:19:49] <geirha> alias n=nano
[00:19:51] <geirha> EOF
[00:20:03] <geirha> then you don't have to fight two layers of quoting anymore
[00:21:07] <geirha> Shortstop: you only quoted expansions that didn't need quoting
[00:21:11] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[00:21:46] <coc0nut> geirha, what you mean ? can u do alias n=nano without any quotes in bashrc?
[00:21:46] <geirha> and lose the directoryFiles variable
[00:21:50] *** Joins: ejjdhfjsu_ (~ejjdhfjsu@cmcust2a-84.174.nulinkdigital.com)
[00:21:57] *** Quits: ejjdhfjsu (~ejjdhfjsu@cmcust2a-84.174.nulinkdigital.com) (Ping timeout: 240 seconds)
[00:21:58] <Shortstop> so add quotes for the 'ebook-convert' line right?
[00:22:05] <geirha> coc0nut: of course. nano does not contain any special characters that need quoting
[00:22:18] <coc0nut> hm, cool
[00:22:52] <geirha> Shortstop: also rather silly to prepend "$PWD" to all the paths, only to immediately strip it off inside the loop
[00:23:29] *** Quits: martinus__ (~martin@15.59.202.77.rev.sfr.net) (Ping timeout: 256 seconds)
[00:23:37] <geirha> for file in ./*.epub ; do ebook-convert "$file" "${file%.epub}.pdf" ; done
[00:24:38] <geirha> oh and  local file  on a line above to avoid it leaking variables
[00:24:41] *** Joins: rgrinberg (~textual@200.68.171.127)
[00:25:45] <Shortstop> like a keyword 'local file'?
[00:25:52] <Shortstop> not sure what you mean for that
[00:25:58] <Shortstop> everything else should be good, will try the rest
[00:26:13] <geirha> # type local
[00:26:14] <shbot> geirha: local is a shell builtin
[00:26:39] <geirha> when you use   local var   in a function, the var becomes local to that function. by default all variables are global
[00:27:05] <larryv> it's basically just a command
[00:27:08] *** Quits: jinsun (~jinsun@user/jinsun) (Read error: Connection reset by peer)
[00:27:10] *** Quits: sinaowolabi__ (~SinaOwola@102.134.114.1) (Read error: Connection reset by peer)
[00:27:40] <geirha> # f() { var=f ; } ; var=outside ; f ; declare -p var
[00:27:42] <shbot> geirha: declare -- var="f"
[00:27:42] <Shortstop> so, 'for local file' is the replacement?
[00:27:44] *** Joins: sinaowolabi__ (~SinaOwola@102.134.114.1)
[00:27:47] <geirha> # f() { local var ; var=f ; } ; var=outside ; f ; declare -p var
[00:27:48] <shbot> geirha: declare -- var="outside"
[00:27:57] <geirha> no, local file ; for file in ...
[00:27:59] <larryv> no. it's a command. put it before the for loop
[00:28:05] <Shortstop> ah gotcha
[00:28:08] <Shortstop> will do
[00:28:23] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Read error: Connection reset by peer)
[00:29:30] *** Joins: jinsun (~jinsun@user/jinsun)
[00:30:29] <geirha> and don't forget you can get help on builtins and keyword with the help builtin;   help local
[00:30:33] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[00:31:31] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:36:41] *** Quits: f00 (~timm@user/timm) (Ping timeout: 252 seconds)
[00:39:04] *** Joins: dokma (~user@dh207-51-101.xnet.hr)
[00:39:26] <dokma> if VAR=package:i386 how do I remove the :i386.
[00:39:43] <dokma> some of those ${VAR#?"%whateverhere] ??
[00:40:22] <jensen> echo "${VAR%%:i386}"
[00:40:22] <dokma> what is that even called in the bash manual to look it up?
[00:40:36] <geirha> !pe
[00:40:36] <greybot> Parameter Expansion expands parameters: "$foo", "$1". You can use it to perform string or array operations: "${file%.mp3}", "${0##*/}", "${files[@]: -4}". They should *always* be quoted. See: http://mywiki.wooledge.org/BashFAQ/073 and "Parameter Expansion" in man bash. Also see http://wiki.bash-hackers.org/syntax/pe.
[00:40:36] <jensen> man bash, /%%
[00:42:45] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[00:43:12] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:45:09] *** Quits: MetaNova (~zero-one@znc/supporter/metanova) (Quit: quit)
[00:45:13] <wiscii> there is even a short version: man sh
[00:45:42] <dokma> jensen: works! thanks a bunch!
[00:45:56] <dokma> geirha: will read that. appreciated
[00:47:03] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[00:48:59] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[00:50:27] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Read error: Connection reset by peer)
[00:50:49] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[00:51:05] <dokma> where is man for bash's read ?
[00:51:12] <dokma> man bash somewhere?
[00:52:33] <larryv> it is in the bash(1) man page under SHELL BUILTIN COMMANDS. you can also run ''help read''
[00:53:00] *** Quits: Andrm (~Andrm@190.244.62.157) (Quit: Client closed)
[00:53:13] <dokma> tx
[00:53:19] <dokma> why would this dpkg -l | grep i386 | while read INSTALLSTATUS PACKAGE VERSION DESCRIPTION
[00:53:25] <dokma> read only one line and then stop?
[00:53:30] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:53:37] <OnlineCop> "help read" totally needs an Easter Egg in there, where it starts giving you a primer on ABCs and grammar.
[00:53:38] <dokma> I'll paste the entire script
[00:54:18] <OnlineCop> !paste
[00:54:18] <greybot> Paste short snippets (<= 5 lines) in channel. Paste more using http://paste.debian.net/ or http://paste.wooledge.org/ or see !ix or !sprunge. Please don't use pastebin.com -- it's full of ads and mangles whitespace. NEVER upload screen shots. Don't use a site that requires Javascript, or registration to view raw.
[00:56:08] <dokma> http://paste.debian.net/1232357/
[00:56:08] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 272 seconds)
[00:56:11] <checkbot> dokma: I think the problem is on line 11. Use ssh -n to prevent ssh from swallowing stdin. See 9 issues on https://shellcheck.net/?id=cb10770
[00:59:31] *** Joins: yustin (~yustin@user/yustin)
[01:02:44] *** Quits: l4s8g_ (~l4s8g@2a02:908:1a72:c7c0::cb3f) (Quit: l4s8g_)
[01:03:05] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Remote host closed the connection)
[01:03:47] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[01:03:48] *** Joins: mitrokov (~mitrokov@5.149.156.78)
[01:04:08] *** Joins: extor (~xtor@192.99.217.240)
[01:04:20] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[01:04:43] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[01:05:05] <kurahaupo> dokma: sed "s/'//" | sed 's/[^\/]*$//' → sed -e "s/'//" -e 's/[^\/]*$//' or sed "s/'// ; s/[^\/]*$//"
[01:07:01] <dokma> kurahaupo: thanks
[01:07:15] *** Quits: mitrokov (~mitrokov@5.149.156.78) (Client Quit)
[01:07:37] *** Joins: mitrokov (~mitrokov@5.149.156.78)
[01:08:23] <kurahaupo> dokma:  But shbot found the main issue
[01:10:59] *** Quits: MetaNova (~zero-one@znc/supporter/metanova) (Quit: quit)
[01:11:44] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[01:12:39] <geirha> s/shbot/checkbot/
[01:12:54] <OnlineCop> sed 's;[^/]*$;;'
[01:13:15] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[01:14:06] *** Quits: mitrokov (~mitrokov@5.149.156.78) (Quit: Leaving)
[01:14:06] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 245 seconds)
[01:18:20] <emanuele6> is ; really a legal delimiter character for the s command?
[01:18:49] <koollman> emanuele6: they are pretty much all legal for s
[01:19:01] <emanuele6> newline isn't
[01:19:14] <koollman> hence the 'pretty much' part :)
[01:19:29] <emanuele6> but ; is special in sed, it's a command delimiter just like newline
[01:19:51] *** Quits: kill (~killown@user/killown) (Read error: Connection reset by peer)
[01:20:01] <geirha> almost like newline
[01:20:08] <koollman> not when just after s
[01:20:15] <emanuele6> interesting
[01:20:25] *** Quits: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com) (Remote host closed the connection)
[01:20:37] <emanuele6> > Any character other than <backslash> or <newline> can be used instead of a <slash> to delimit the BRE and the replacement.
[01:20:46] <geirha> and you can't terminate a i, c, a, r or w command with ;
[01:20:46] <emanuele6> so also `;'
[01:21:02] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Ping timeout: 260 seconds)
[01:21:32] *** Joins: kill (~killown@user/killown)
[01:22:36] <emanuele6> well, not that interesting, but i am a little surprised :S
[01:23:54] <emanuele6> i wonder why <newline> and <backslash> are not allowed since `;' is
[01:24:42] <koollman> probably handled before reaching that part of the code
[01:25:11] <emanuele6> huh?
[01:25:20] <kurahaupo> emanuele6: what does "man sed" say about the delimiter of the "s" command?
[01:25:46] *** Joins: timm (~timm@user/timm)
[01:26:02] <emanuele6> koollman: i don't see how that is possible since \ is special in BREs
[01:26:12] <emanuele6> and replacement strings
[01:26:18] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:4d3e:ae3:d6a0:1183) (Read error: Connection reset by peer)
[01:26:20] <koollman> emanuele6: imagine writing a parser for a sed-like syntax from scratch. You're most likely splitting on newline first, and managing backslash in a very peculiar way
[01:26:56] <emanuele6> and is part of the syntax of many commands like i\, a\, c\ and the \x (x any character) address
[01:27:31] <emanuele6> koollman: but ; is also part of the syntax, not of specific commands, but the syntax in general
[01:28:06] <emanuele6> kurahaupo: GNU sed's man page doesn't even mention it. POSIX says what i sent before.
[01:28:51] <emanuele6> any character other than <backslash> or <newline> are allowed, so ; is also allowed
[01:30:51] <emanuele6> koollman: i don't get how you see <backslash> as more special than `;'. in sed, \ is only special in BREs, and replacement strings for s///, and as part of the syntax i\ a\ c\ and the \x range
[01:31:12] <kurahaupo> glad the man page answered the original question
[01:31:12] <emanuele6> i understand that <backslash> is special in some way, but `;' also is
[01:32:29] <dokma> read -p 'Continue? ' -n 1 -r
[01:32:35] <dokma> does not prompt me at all
[01:32:44] <dokma> it just continues over it like it's not there
[01:32:48] <kurahaupo> The problem is that if you actually used \ as the delimiter, that would stop you from using \. etc inside the pattern or \1 inside the replacement
[01:32:50] <emanuele6> and i don't really get what you mean with "handled before reaching that part of code", has different meaning in different commands as arguments, but it is not really part of sed's main syntax anymore than any other character
[01:33:00] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:33:06] <emanuele6> s/has/<backslash> &/
[01:33:28] <emanuele6> s/\(any\)\(more\)/\1 \2/
[01:33:35] <geirha> dokma: perhaps stderr is redirected elsewhere
[01:33:41] <emanuele6> kurahaupo: that is also true for ,
[01:33:48] <emanuele6> or &
[01:33:58] <emanuele6> if we are talking of the replacements string
[01:34:33] <OnlineCop> # echo '.;s' | sed s;.;s;;s.;s.;.
[01:34:35] <shbot> OnlineCop: bash: syntax error near unexpected token `;;'
[01:34:39] <emanuele6> and s\.\1\ can't even be ambiguous with s\.\\1
[01:34:40] <geirha> dokma: at any rate, it definitely depends on the context. the read by itself will work as you expect
[01:34:46] <kurahaupo> emanuele6: agreed, but then the rationale only has to make sense to the people who wrote the first version of sed
[01:35:24] *** Joins: lack (~lack@user/lack)
[01:35:33] <emanuele6> sure, but i koollman's was trying to explain it has \ is handled specially by the parser which doesn't make much sense
[01:35:40] *** Quits: ObscenityAlt (~Obscenity@user/obscenity) (Remote host closed the connection)
[01:35:48] *** Quits: timm (~timm@user/timm) (Ping timeout: 240 seconds)
[01:36:00] <emanuele6> ; is way more "special" then <backslash>, the choice to not allow <backslash> is mostly arbitrary i think
[01:36:43] <emanuele6> dokma: are you calling read inside a `| while read -r ...; do   ... read -p 'Continue? ' -n 1 -r ...; done' loop?
[01:36:51] <kurahaupo> emanuele6: Indeed, the sed parser is a  single pass; it doesn't "split on newlines first" or any such, it just walks looking at the next character
[01:37:49] <emanuele6> ooops
[01:38:14] *** Joins: remirol (~lorimer@user/lorimer)
[01:38:14] *** Quits: lorimer (~lorimer@user/lorimer) (Killed (NickServ (GHOST command used by remirol)))
[01:38:16] *** remirol is now known as lorimer
[01:38:38] <emanuele6> s; i koollman's was trying to explain it has \\ is;koollman was trying to explain by saying that \\ is;
[01:40:32] *** Quits: H3dn1ng (~H3dn1ng@185.213.154.231) (Quit: leaving)
[01:41:16] *** Joins: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[01:42:31] *** Joins: son0p (~ff@181.136.122.143)
[01:42:51] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[01:43:19] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[01:43:57] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Ping timeout: 256 seconds)
[01:48:36] *** Quits: sinaowolabi__ (~SinaOwola@102.134.114.1) (Ping timeout: 240 seconds)
[01:50:25] *** Quits: magla (~gelignite@55d47826.access.ecotel.net) (Quit: Stay safe!)
[01:53:03] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[01:53:18] *** Quits: Shortstop (~Shortstop@2603:9000:7704:32c6::e936) (Quit: WeeChat 3.4)
[01:54:46] *** Quits: voices- (~voices_@84.238.197.28) ()
[01:55:38] <dokma> geirha: I'm not redirecting stderr intentionally anywhere
[01:55:47] <dokma> what could've redirected it without being obvious?
[01:56:45] <dokma> and why would stderr matter here? isn't stdin the thing that read reads?
[01:56:48] <geirha> it's just one of many possibilities
[01:56:58] <geirha> it write the prompt to stderr
[01:57:00] <emanuele6> dokma: the prompt is written to stderr
[01:57:17] <dokma> can I check if stderr is redirected somehow?
[01:57:31] <emanuele6> can you show the context in which read-p is used?
[01:57:33] <geirha> so since you assume read is being run, but don't see the prompt, stderr being redirected was the first suspect
[01:58:14] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:58:35] <dokma> http://paste.debian.net/1232365/
[01:59:02] <emanuele6> oh, you sent a paste before
[01:59:03] <geirha> so it does prompt you for Contrinue? but it reads the response from the pipe
[01:59:08] <emanuele6> yeah, it's like i said
[01:59:18] <dokma> it doesn't even read
[01:59:23] <emanuele6> <emanuele6 > dokma: are you calling read inside a `| while read -r ...; do   ... read -p 'Continue? ' -n 1 -r ...; done' loop?
[01:59:23] <geirha> it does
[01:59:24] <dokma> it doesn't do anything
[01:59:27] <geirha> it reads from the pipe
[01:59:40] <emanuele6> it reads from the output of `grep i386'
[01:59:41] <dokma> emanuele6: ohh... didn't see that
[01:59:51] <dokma> damn
[01:59:59] <dokma> how do you prompt a user in such a loop?
[02:00:19] <emanuele6> you keep track of the original stdin and redirect that to read command inside the loop
[02:00:32] <emanuele6> s/keep/need to &/
[02:00:56] <dokma> tx
[02:01:06] <geirha> since this is linux specific, slapping on   </dev/tty  on that prompted read should also work
[02:01:26] <geirha> but that assumes there is a terminal involved at all
[02:01:28] <kurahaupo> geirha: that works on any POSIX system
[02:01:42] <geirha> aha, wasn't sure if it did
[02:02:31] <emanuele6> dokma: like this for example http://0x0.st/oKlh.sh
[02:02:32] <checkbot> emanuele6: I think the problem is on line 12. Use ssh -n to prevent ssh from swallowing stdin. See 9 issues on https://shellcheck.net/?id=cb14752
[02:02:38] <emanuele6> yeah, i know
[02:02:51] <kurahaupo>  /dev/tty being an alias for the process's controlling terminal was in 4.2BSD and very likely much earlier
[02:03:34] <geirha> the downside of reading directly from the tty instead of via stdin is that you can no longer non-interactively pass in the answer without involving expect or similar tools
[02:03:39] <emanuele6> or use read -p</dev/tty, but then you won't be able to easily automate your script with something like   printf '%s\n' answer1 answer2 | your_script
[02:03:52] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:05:01] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:05:19] *** Joins: zeden (~zeden@user/zeden)
[02:05:56] <geirha> I'd use a different fd for the loop instead.    while read -r -u 3 status package version description ; do ... ; done 3< <(dpkg -l '*:i386')
[02:05:59] <kurahaupo> emanuele6: if the answer in question is YourSecretPassword, bypassing stdin would be a security feature, not a bug
[02:06:59] <kurahaupo> geirha: I prefer read <&3 over read -u3 because it generalised better
[02:07:00] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[02:07:36] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[02:07:42] <kurahaupo> it works for any command, not just read
[02:08:28] <geirha> yeah, that's a good point
[02:08:31] <OnlineCop> Would that be `while <&3 read -r ...` or would the placement of the <&3 be best (or required) elsewhere?
[02:10:12] *** Joins: w1r3d (~w1r3d@user/w1r3d)
[02:10:35] <geirha> the redirection can be put anywhere for a simple command, so it's about style or whatever feels the most readable
[02:11:14] <geirha> when printing to stderr, I prefer to put the redirection right after the printf;    printf >&2 '%s: Some error\n' "$0"
[02:11:44] <kurahaupo> It's kinda a shame that redirections can't go before the keyword at the start of a compound statement
[02:12:06] <kurahaupo> geirha: ditto
[02:12:20] <emanuele6> i also like to do that
[02:13:21] <kurahaupo> I sometimes put input redirections before the command, if the impulse would otherwise be to violate !uuoc
[02:13:36] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[02:13:43] <phy1729> both of those yeah
[02:14:54] <OnlineCop> I can't tell whether there's a steeper learning curve for regular expressions or bash/ksh/sh...
[02:15:32] <koollman> different shape of curves, each with interesting difficult moments :)
[02:15:48] *** Quits: zouhair (~zouhair@lnsm3-montreal02-142-118-91-200.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[02:16:18] <OnlineCop> The first thing I was taught about '!' is that is deals with history. Then someone tells me to `find . ! -name foo` and that it wouldn't mess with history. Then I tried putting it within "double quotes", and the entire line I just wrote goes up in smoke with an error about not understanding something to do with the history...
[02:16:44] <OnlineCop> Then there's the redirection with < vs. << vs <<<
[02:17:00] <OnlineCop> "Imma redirect this heredoc and append it to that there file descriptor..."
[02:17:49] *** Joins: damarusama (~damarusam@209.52.44.123)
[02:18:01] *** Joins: zouhair (~zouhair@lnsm1-montreal01-142-122-44-148.internet.virginmobile.ca)
[02:18:01] *** Quits: zouhair (~zouhair@lnsm1-montreal01-142-122-44-148.internet.virginmobile.ca) (Client Quit)
[02:18:41] *** Joins: zouhair (~zouhair@lnsm1-montreal01-142-122-44-148.internet.virginmobile.ca)
[02:19:45] <damarusama> is there a one-liner to awk a curl, trying something like this awk -F'"' '/enclosure/{print $2;exit;}' << curl https://botsin.space/@mist_veil/media.rss
[02:20:11] <damarusama> or pipe a awk to a curl  ?
[02:20:29] <OnlineCop> I've never learned awk. `grep -o`, however... :D
[02:21:13] <damarusama> yeah I am unfamiliar with printing column with grop
[02:21:15] <damarusama> grep
[02:21:49] <koollman> I think regex are easier, because the language is smaller and there are more restrictions on what can be done. shell is much more complex in the end. But starting with regex is a bit more scary, somehow :)
[02:21:58] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:22:19] <damarusama> regex instead of awk?
[02:22:37] <OnlineCop> `grep -oP 'enclosure\s*\K\S+`
[02:22:37] <geirha> damarusama: curl ... | awk ...    but it's really a terrible idea to parse xml with awk
[02:22:41] <damarusama> hum the pipe works, but I get also all the output from curl (status and download)
[02:22:56] <geirha> curl -s  to silence the status
[02:23:07] <damarusama> well for the usage I am making (create a desktop image) as long as it works
[02:23:36] <damarusama> -s did the trick with the pipe!
[02:23:37] <geirha> "as long as it works 100% most of the time"
[02:23:53] <damarusama> heheh yeah worst case my desktop end up dark :D
[02:24:03] *** Joins: sinaowolabi__ (~SinaOwola@102.134.114.1)
[02:25:44] <damarusama> hum now I have a url that I need to curl or wget :D can I doulbe pipe?
[02:25:49] <damarusama> (thinking outloud)
[02:25:49] <OnlineCop> I wasn't able to get the << curl... to work for some reason; I had to curl ... | grep that.
[02:26:04] <damarusama> yeah curl | awk worked
[02:26:05] <geirha> ... | wget -i-
[02:26:11] <damarusama> nice
[02:26:25] <geirha> assuming the output contains one url per line and nothing else
[02:26:36] <damarusama> nice that's some dirty working code
[02:26:49] <damarusama> curl -s https://botsin.space/@mist_veil/media.rss | awk -F'"' '/enclosure/{print $2;exit;}' | wget -i-
[02:27:07] <OnlineCop> Does wget accept the 'url="' format?
[02:27:22] <geirha> no, that's curl
[02:28:40] <OnlineCop> Ah... so it was my grep regex that was leaving those on. I probably needed `grep -oP 'enclosure\s+url="\K[^"]+'` instead.
[02:29:43] <damarusama> now I feed that to feh --bg-fill :D  - this would be impractical to have that as a one liner right? better create a script with a variable
[02:29:55] *** Quits: rgrinberg (~textual@200.68.171.127) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:30:13] <OnlineCop> A one-liner that has to potential to break in case curl fails silently?
[02:30:24] <OnlineCop> I see no problem with that. Full steam ahead!
[02:31:54] <damarusama> tripple pipe!!
[02:36:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[02:37:01] <damarusama> curl -s https://botsin.space/@mist_veil/media.rss | awk -F'"' '/enclosure/{print $2;exit;}' | wget -O image2.jpg -i- && feh --bg-fill image2.jpg
[02:37:45] <damarusama> pull the latest media post from a mastodon user and create a background image with it, under certain linux window manager (I use i3)
[02:39:13] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220219201334])
[02:39:51] <damarusama> thanks for the help for my mindless saturday procrastination
[02:40:12] <OnlineCop> Are you passing the same -O filename to wget for each of those results?
[02:40:12] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Ping timeout: 240 seconds)
[02:40:29] <damarusama> yeah to overwrite it
[02:40:49] <damarusama> (and because I don't know what I am doing too)
[02:41:51] <OnlineCop> Without following the logic there too much, will that download 20-ish images, saving each of them as image2.jpg, and then only the last one will be the one you actually see? Or does wget intelligently append some unique suffix to each one?
[02:42:12] <OnlineCop> Otherwise, I'd probably `tail -n1` the awk's output to just get the last of those entries so you only download 1 image.
[02:42:26] <damarusama> no the exit on the awk just use the first instnace of enclosure
[02:42:38] <OnlineCop> Ah, gotcha.
[02:43:24] <damarusama> as you can see it's really hacked together - and really prone to errors
[02:45:06] <damarusama> but my desktop is black by default - so worst case I get my normal black background
[02:45:15] *** Joins: junebug (~junebug@2600:1700:3db0:2540:9123:34a9:7bc6:8825)
[02:50:50] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: Connection reset by peer)
[02:51:13] *** Joins: irc_user (uid423822@id-423822.lymington.irccloud.com)
[02:51:24] *** Joins: Thanatermesis (~Thanaterm@201.184.186.90)
[02:55:54] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[03:00:16] *** Quits: damarusama (~damarusam@209.52.44.123) (Quit: leaving)
[03:01:08] *** Joins: rcernin (~rcernin@124.190.132.36)
[03:01:10] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:08:59] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:9d42:51ae:9407:db15)
[03:11:58] <skered> Can you get the length of the rendered PS1?
[03:14:30] <dfdx> echo "${#PS1}"
[03:15:02] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:15:38] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[03:17:14] <skered> dfdx: That's number of characters in the PS1 string.  I'm talking about when PS1 once fully expanded.
[03:18:57] <geirha> s=${PS1@P} ; while [[ $s =~ (.*)$'\1'[^$'\2']*$'\2'(.*) ]] ; do s=${BASH_REMATCH[1]}${BASH_REMATCH[2]} ; done
[03:20:02] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:20:39] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[03:22:52] <skered> Thanks.  I think my only issue is to filter color codes.
[03:23:27] <geirha> if the resulting "$s" has colours, then the prompt is broken
[03:24:11] <geirha> !faq fancy
[03:24:11] <greybot> https://mywiki.wooledge.org/BashFAQ/053 -- I have a fancy prompt with colors, and now bash doesn't seem to know how wide my terminal is.  Lines wrap around incorrectly.
[03:25:42] <skered> I do use tput but not escaping them
[03:27:00] <skered> Is there any reason you can't put the escapes directly in the assignment statements?  blue="\[$(...)\]"
[03:29:45] <skered> I'm guessing this escaping with \[ \] is only a PS1 thing so if you're using the color vars else where it breaks there?
[03:29:55] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 256 seconds)
[03:30:02] *** Quits: waxfire6 (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[03:30:18] <larryv> yes
[03:30:19] *** Joins: waxfire6 (~waxfire@65.119.2.240)
[03:32:58] <geirha> those \[ and \] will be translated to bytes 1 and 2 before being passed to readline. They tell readline that between \1 and \2, the bytes won't cause the prompt to increase (because they will be eaten by the terminal instead)
[03:33:11] <geirha> hence why my loop removes all the \1...\2 sequences
[03:33:42] <geirha> so if there are still colours left, it means you've forgotten to enclose some of them in \[ \]
[03:38:35] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[03:38:48] <skered> If I have .bashrc-colors with all my colors and it defines yellow=$(...) I should be able to define ps1_yellow="\[$yellow\]" and use $ps1_yellow when I'm coloring my PS1 instead of ${yellow} ?
[03:39:05] *** Joins: mra90 (~mra@192.55.55.54)
[03:39:40] <mra90> why files=$(git diff --name-only) does not work as I expect which is keep each file at different index of file[]
[03:39:46] <mra90> files[]
[03:39:59] *** Quits: _sa0sin_ (~sa0sin@88.120.82.205) (Remote host closed the connection)
[03:40:07] <larryv> because your expectation is wrong
[03:40:40] <Earnestly> files isn't an array
[03:41:08] <mra90> Earnestly, it is to certain extent
[03:41:48] <Earnestly> What a stupid thing to write
[03:41:50] <mra90> files[0] keeps all the files, files[1] keeps diff and files[2] keeps -name-only
[03:42:12] <larryv> if you've already declared it as an array, files=blah only assigns to files[0]
[03:42:49] <larryv> anyway the git command outputs one big string, which you're capturing into ''files[0]'' as a scalar value. if you want to split it up somehow you have to do that yourself
[03:43:01] <mra90> larryv, what do you mean I declared it as an array? I only do the assignment as show
[03:43:18] <Earnestly> larryv: They're relying on wordsplitting and regarding that as an "array"
[03:43:26] <mra90> ok, make sense but why diff and --name-only are on different indexes?
[03:43:31] <Earnestly> Either a troll or extremely stupid
[03:43:32] <mra90> why they are there at all
[03:43:46] <Earnestly> But either way, I have no time for such things
[03:43:49] *** Joins: ominionx (~ominionx@3.sub-174-250-16.myvzw.com)
[03:43:53] <larryv> Earnestly: ugh, they're not even doing files=($(thing)), although that's probably what they're going to end up with
[03:44:04] <Earnestly> There's no fixing this
[03:45:16] <mra90> Earnestly, if somebody doesn't know certain thing like a bash in this case you auto categorize that person as stupid? (or troll)
[03:45:45] <larryv> mra90: show some code maybe. what you're saying makes no sense
[03:45:55] <Earnestly> Oh no this is much simpler
[03:45:56] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Read error: No route to host)
[03:46:05] <Earnestly> I do not help people who think they know better when they are asking for help
[03:46:22] *** Quits: sinaowolabi__ (~SinaOwola@102.134.114.1) (Read error: Connection reset by peer)
[03:46:26] *** Joins: luckiswithme (~luckiswit@149.167.139.11)
[03:46:26] <mra90> Earnestly, fine I did not ask you for help
[03:46:48] <Earnestly> The correct response is to mock them relentless and drive them out
[03:47:32] <mra90> larryv, your suggestion to do files=($(thing)) fixes the problem and now I get an array as I wanted
[03:48:07] <mra90> but now why the extra () caused the git string output to become an array?
[03:48:37] <larryv> that wasn't supposed to be a suggestion. it was a bad solution that i anticipated you arriving at, thinking it was good
[03:49:03] <larryv> i was correct but have gained nothing. alas
[03:50:18] <mra90> "<larryv> anyway the git command outputs one big string, which you're capturing into ''files[0]'' as a scalar value"
[03:50:27] <larryv> !pf 50 > mra90
[03:50:27] <greybot> mra90: https://mywiki.wooledge.org/BashPitfalls#pf50 -- Don't do this! -- hosts=( $(aws …) )
[03:51:21] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[03:51:36] <emanuele6> !b6
[03:51:36] <greybot> When given a choice of solutions, the newbie will always choose the wrong one.
[03:52:11] <mra90> larryv, fine but git diff output likely won't have * or ?
[03:52:18] *** Joins: sais9 (~sais9@host-87-5-181-251.retail.telecomitalia.it)
[03:52:37] <mra90> so I feel like it is safe to do files=($(git command))
[03:52:41] <emanuele6> but why not do it right?
[03:53:10] <mra90> emanuele6, which is?
[03:53:15] <phy1729> stdout filepaths can contain any byte but NUL
[03:53:26] <phy1729> er s/stout //
[03:53:27] <emanuele6> mra90: perhaps read the link
[03:53:27] <larryv> probably something like ''readarray -d '' files < <(git diff --name-only -z)''
[03:54:06] *** Quits: Thanatermesis (~Thanaterm@201.184.186.90) (Ping timeout: 272 seconds)
[03:54:12] <mra90> also where can I read on what effect this extra () have?
[03:54:19] <larryv> !arrays
[03:54:19] <greybot> An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). http://mywiki.wooledge.org/BashSheet#Arrays http://mywiki.wooledge.org/BashFAQ/005 http://wiki.bash-hackers.org/syntax/arrays
[03:54:43] <emanuele6> it's just an array assignment
[03:55:12] <emanuele6> and $() is the "usual" unquoted command substitution expansion
[03:55:18] <emanuele6> which is bad as always
[03:55:48] *** Joins: seninha (~chatzilla@user/seninha)
[03:55:49] <mra90> ah right, thanks
[03:56:10] <OnlineCop> eval $'$(git diff...)'
[03:56:25] <larryv> >:(
[03:56:33] <emanuele6> that $ is pointless and that makes no sense eitherway
[03:56:37] <mra90> which man page describes readarray
[03:56:42] <emanuele6> !man
[03:56:43] <greybot> bash builtins and keywords do not have separate man-pages, read bash's manual instead or use the help builtin. Rule of thumb: If ''type foo'' says foo is a builtin or keyword, run ''help foo'' or ''man bash'', otherwise try man and/or info.
[03:57:05] <emanuele6> mr90: so man bash
[03:57:22] <emanuele6> or just type `help readarray'.
[03:57:57] <emanuele6> which will tell you to read `help mapfile' (mapfile and readarray do the exact same thing)
[03:58:08] <mra90> yep I got it thanks. One more thing, why do we use double '<' in files < <(git diff --name-only -z)''
[03:58:29] <emanuele6> again, it's not double
[03:58:36] <emanuele6> it's two things used together
[03:58:41] <larryv> !<<(
[03:58:46] *** Quits: yustin (~yustin@user/yustin) (Ping timeout: 260 seconds)
[03:58:47] <greybot> command < <(othercommand) # Same thing as ''othercommand | command'' but without subshelling 'command'. Uses file redirection (<) to redirect a file created by process substitution (<()). The space between < and <(..) is important to avoid ambiguity (is it a heredoc, is it a redirected PS?).
[03:58:48] <emanuele6> < is a stdin redirection
[03:59:06] <emanuele6> and <() is a read process substitution
[03:59:43] <emanuele6> !<(
[03:59:43] <greybot> Process Substitution: <(command) or >(command) is replaced by a FIFO or /dev/fd/* entry. Basically shorthand for setting up a named pipe. See <http://mywiki.wooledge.org/ProcessSubstitution>. Example: diff -u <(sort file1) <(sort file2)
[03:59:49] <emanuele6> !redir
[03:59:49] <greybot> Redirections: http://mywiki.wooledge.org/Redirection
[04:00:23] <mra90> great, thank you very much!
[04:00:27] *** Joins: sinaowolabi__ (~SinaOwola@41.58.86.144)
[04:01:13] <emanuele6> you use `< <(git ...)' because `git ...|mapfile array' will run mapfile in a subshell
[04:01:31] <emanuele6> so you won't be able to use the array after
[04:01:57] <mra90> because array variable won't belong to my process right?
[04:02:07] *** Joins: xayto (~xayto@cpc69403-oxfd27-2-0-cust296.4-3.cable.virginm.net)
[04:02:31] <emanuele6> you would have to do something like `git ... | { mapfile array; everything that uses array here ;}' if you wanted to use the pipe syntax
[04:02:58] <emanuele6> !faq disappear > mra90
[04:02:58] <greybot> mra90: https://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop that's in a pipeline. Why do they disappear after the loop terminates? Or, why can't I pipe data to read?
[04:03:00] <mra90> or I can redirect it my process
[04:03:12] <mra90> to my*
[04:04:54] <mattf> http://ix.io/3QRY
[04:05:01] <mattf> what is a less dumb way to do that
[04:05:38] <emanuele6> what is that supposed to do
[04:05:50] <emanuele6> it sets CURL_PATH every time
[04:05:55] <mattf> yeah
[04:05:56] <emanuele6> to the same value
[04:06:01] <mattf> oh
[04:06:04] <mattf> wait
[04:06:31] <mattf> that would be really dumb
[04:06:37] <mattf> http://ix.io/3QS0
[04:06:39] <mattf> thats what i mean
[04:06:58] <emanuele6> the not dumb way would be not to use which(1) because which is a dumb program
[04:07:02] <emanuele6> !which
[04:07:02] <greybot> which(1) is an external program used to search PATH for an executable. It behaves differently on different systems and you can't rely on a useful exit code; use (from most to least portable) ''command -v'' or ''type -P'' (to find the path) or ''hash'' (to check) instead. See http://mywiki.wooledge.org/BashFAQ/081
[04:07:14] <sais9> Hello, I hope someone can enlighten me on this... I can't get `ls` and bash's completion to look the same based on LS_COLORS. Screenshot: https://i.postimg.cc/sfFB02JH/ls-colors.png
[04:07:17] <mattf> emanuele6: my concern is more with those ugly ifs
[04:07:22] <emanuele6> debian which even tells users your program is buggy or something like that if people use it
[04:07:32] <mattf> which doesn't even make sense there since they are already in the path
[04:07:50] <emanuele6> also you can just use type
[04:08:15] <emanuele6> mattf: but why are you overwriting CURL_PATH over and over?
[04:08:21] <emanuele6> are you supposed to append maybe?
[04:08:25] <emanuele6> i don't get it
[04:08:26] <mattf> one of multiple of those can exist, i just want the first one to be matched
[04:08:33] <mattf> i prefer curl-impersonate over curl
[04:08:48] <mattf> it should be an else if
[04:09:01] <mattf> but still, isn't there some simpler way without those ifs
[04:09:04] <emanuele6> also why are you setting CURL_PATH=$(which curl) if curl does NOT exist?
[04:09:09] <emanuele6> how does that make sense
[04:09:16] <mra90> in command < <(othercommand) it is like command | othercommand or the other way around?
[04:09:34] <mattf> emanuele6: oh thats a good point...
[04:09:39] <emanuele6> mattf: as i said, you can use one type(1) to do this
[04:09:40] <larryv> !<<( > mra90
[04:09:40] <greybot> mra90: command < <(othercommand) # Same thing as ''othercommand | command'' but without subshelling 'command'. Uses file redirection (<) to redirect a file created by process substitution (<()). The space between < and <(..) is important to avoid ambiguity (is it a heredoc, is it a redirected PS?).
[04:09:51] <emanuele6> but i won't tell you how until it makes sense
[04:09:53] <mra90> larryv, hmm so why echo ${files[0]} < <(files=(*.txt)) works then
[04:10:06] <larryv> wtf
[04:10:19] <mra90> a ok it make sense I think
[04:10:27] <mra90> files are now known for echo
[04:10:33] <mattf> emanuele6: http://ix.io/3QS1
[04:10:45] <mattf> oh one type?
[04:11:22] <emanuele6> first of all, don't use uppercase variable names
[04:11:23] <larryv> # touch {a,b,c}.txt && echo ${files[0]} < <(files=(*.txt)); declare -p files
[04:11:24] <emanuele6> !varcap
[04:11:24] <greybot> By convention, environment variables (PATH, EDITOR, SHELL, ...) and internal shell variables (BASH_VERSION, RANDOM, ...) are fully capitalized. All other variable names should be lowercase. Since variable names are case-sensitive, this convention avoids accidentally overriding environmental and internal variables. https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html
[04:11:26] <shbot> larryv:
[04:11:26] <shbot> larryv: bash: declare: files: not found
[04:11:31] <larryv> mra90: it doesn't work. stop writing random garbage
[04:12:17] * skered slaps his hands together!  My PS1 is clean!  
[04:12:19] <skered> Thanks!
[04:12:29] <skered> Has all this ps1_* vars too.
[04:13:08] <mra90> larryv, why did you add declare -p files into the mix
[04:13:18] <mra90> # touch {a,b,c}.txt && echo ${files[0]} < <(files=(*.txt));
[04:13:20] <shbot> mra90: no output
[04:13:23] <larryv> to show that files doesn't exist afterward
[04:13:37] <larryv> echo doesn't even read stdin
[04:13:59] <mra90> larryv, I didn't want it to read stdin
[04:14:12] <larryv> so why are you doing echo < anything
[04:14:17] <larryv> do you know what < is for?
[04:14:33] *** Quits: luckiswithme (~luckiswit@149.167.139.11) (Read error: Connection reset by peer)
[04:14:43] *** Quits: ominionx (~ominionx@3.sub-174-250-16.myvzw.com) (Quit: Leaving)
[04:14:52] <mra90> larryv, I thought < <(cmd) is for file redirection, like in:
[04:14:59] <mra90> !<<( > larryv
[04:14:59] <greybot> larryv: command < <(othercommand) # Same thing as ''othercommand | command'' but without subshelling 'command'. Uses file redirection (<) to redirect a file created by process substitution (<()). The space between < and <(..) is important to avoid ambiguity (is it a heredoc, is it a redirected PS?).
[04:15:11] <mra90> I tried to reproduce this only ^^
[04:15:15] <larryv> what do you think < redirects?
[04:15:28] <wiscii> traffic
[04:15:31] <phy1729> mra90: you seem to be missing shell fundamentals
[04:15:48] *** Quits: Jong (~Jong@184-99-74-148.boid.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:15:55] <mra90> in < <(files=(*.txt)); ?
[04:15:56] <larryv> wiscii: lol i chuckled. not bad
[04:16:28] <wiscii> :) i put a smile on a face. makes a change :D
[04:16:35] <phy1729> commands get a list of strings for argumens and a set of file descriptors. fd 0 is stdin, 1 is stdout, and 2 is stderr. Arguments and streams are not interchangeable.
[04:16:39] <mra90> larryv, < redirects whatever is on the right hand side to the left
[04:17:06] <phy1729> a pipe connects the stdout of the left into the stdin of the right
[04:17:49] <phy1729> < sets up the command to read the contents of the file as stdin; > sets up the command so that its output (on stdout) goes into the file
[04:18:14] <mra90> so the claim that "command < <(othercommand)" does the same thing as "Same thing as ''othercommand | command'' but without subshelling"
[04:18:19] <mra90> is not exactly true it seems like
[04:18:21] <wiscii> it's soo simple ...
[04:18:51] <wiscii> read LTR
[04:19:10] <koollman> mra90: somecommand | echo , would also not work
[04:19:19] <phy1729> stdin/stdout/stderr are just streams of bytes; there's no lists; no dictionaries; no fields. Just. Bytes. (until there are no more and you hit the end of the stream)
[04:19:20] <mattf> emanuele6: idk how to make it with a single type, i have to pipe it to awk and find the first line that is different from "found" for the last field. Is that what you had in mind
[04:19:38] <emanuele6> mattf: one way you can do it is like this http://0x0.st/oKUI.sh
[04:19:40] <mra90> koollman, because echo will be run in subcomand
[04:19:40] <mattf> or does type take some magical flags im not aware of. Can those shell builtins take flags even, i dont think so
[04:19:41] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[04:19:41] <phy1729> That's why files=$(...) has no hope of working. stdout is not an array
[04:19:50] <emanuele6> but i think the way that makes the most sense is something like this
[04:19:51] <koollman> mra90: no. because echo do not read stdin
[04:19:57] <emanuele6> mattf: http://0x0.st/oKUl.sh
[04:20:06] <emanuele6> just check if the command is available and use that
[04:20:16] <emanuele6> don't get the absolute path to file, it doesn't matter
[04:20:36] <emanuele6> also the solution in the second doesn't require subshells
[04:20:49] <emanuele6> s/second/& link/
[04:20:52] <mra90> phy1729: but files=($(...)) has a chance of working?
[04:21:22] <larryv> wtf did i not tell you exactly how to populate ''files''?
[04:21:26] <mattf> emanuele6: thats a good solution
[04:21:37] <wiscii> rofl .. a "chance"
[04:21:52] <mra90> larryv, yes you did, just chatting
[04:21:59] <phy1729> mra90: no
[04:22:27] <emanuele6> mra90: that doesn't set the files array to the lines of the output of ...
[04:24:07] <emanuele6> that uses $() to capture the output of ... (so newlines at the end of output are trimmed), then it splits expansion of $(...) with IFS characters, then it pathname expands each of the resulting words after the split, then the results are stored in order in the files array
[04:24:56] <mra90> # touch {a,b,c}.txt && files=(*.txt) && echo ${files[0]}
[04:24:58] <shbot> mra90: a.txt
[04:24:58] <wiscii> if you do it right like bash
[04:25:03] <emanuele6> it is a complex monstrosity that doesn't make much sense when you think about it
[04:25:20] <emanuele6> mra90: how is that the same to ($(...))
[04:25:28] <emanuele6> are we even talking of the same thing?
[04:26:11] <wiscii> where would we be without "complex monstrocities?"
[04:26:15] <mra90> # touch {a,b,c}.txt && files=($(ls *.txt) && echo ${files[0]}
[04:26:17] <shbot> mra90: bash: syntax error near unexpected token `&&'
[04:26:28] <wiscii> s/c/s/
[04:26:53] <emanuele6> ok, not surprised that they were thinking you are a troll
[04:27:01] <wiscii> me ?
[04:27:18] <emanuele6> you how?
[04:27:42] <emanuele6> i was referring to mra90
[04:28:01] <mra90> emanuele6, what's wrong with above command?
[04:28:05] <wiscii> oh ok :)
[04:28:19] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[04:28:34] <phy1729> !ls
[04:28:34] <greybot> DO NOT USE ls' output for anything. ls is a tool for interactively looking at directory metadata. Any attempts at parsing ls' output with code are broken. Globs are much more simple AND correct: ''for file in *.txt''. Read http://mywiki.wooledge.org/ParsingLs
[04:28:41] <wiscii> ty for clearing that up
[04:29:02] <mra90> phy1729, reading example on web -> https://opensource.com/article/18/5/you-dont-know-bash-intro-bash-arrays
[04:29:11] <mra90> and in the section "But wait, there's more!"
[04:29:14] <mra90> what do I see?
[04:29:15] <phy1729> !crap
[04:29:15] <greybot> The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
[04:29:18] <emanuele6> i am not sure you thought i was referring to you
[04:29:27] <mra90> "str=$(ls)	Save ls output as a string"
[04:29:33] <emanuele6> oh, i didn't even notice you sent a message. i see
[04:30:00] <wiscii> emanuele6: no problem, sorry for the distraction
[04:30:03] <mra90> phy1729, so which source is not crap for bash learning?
[04:30:15] <phy1729> !guide
[04:30:15] <greybot> http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
[04:31:33] <mra90> phy1729, thank you
[04:31:45] <mra90> emanuele6, now you see why I used ls in my exmaple
[04:32:05] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:32:51] <emanuele6> what are you talking about?
[04:33:16] <mra90> never mind, I need to ready that manual phy1729 gave first
[04:33:20] <mra90> thank for help :)
[04:33:23] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:34:05] <emanuele6> i was going to tell you more about the difference between =($(...)) and mapfile < <(...), but then you started talking of =(*.txt)
[04:34:22] <emanuele6> in which there is no ... involved
[04:34:36] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (Ping timeout: 240 seconds)
[04:34:37] <emanuele6> so i stopped
[04:34:53] <mra90> I just quickly look into that pdf,
[04:35:05] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[04:35:12] <mra90> I don't see any example of the form file=($(command))
[04:35:26] <mra90> and what effect that extra () has on $commnd output
[04:35:40] <emanuele6> because it's dumb
[04:35:56] <mra90> that's maybe but I want to understand why
[04:36:02] <phy1729> !wordsplitting
[04:36:02] <greybot> echo $foo; rm $foo -- If you leave $foo unquoted, bash will *remove* all whitespace (newlines, spaces, tabs) while expanding it, take each *word* as a separate argument. `echo` prints these words separated by one space and `rm` deletes each word. So ALWAYS *quote* your parameter expansions: echo "$foo" -- http://mywiki.wooledge.org/WordSplitting
[04:36:04] <mra90> at a first glance it does the job
[04:36:07] <emanuele6> i described what it does before.
[04:36:11] <phy1729> !itworks
[04:36:11] <greybot> It is a usual technique to make a program and then to test it. But: program testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence. -- Edsger W. Dijkstra
[04:36:33] *** Quits: off^ (~off@50-202-219-146-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[04:36:46] <emanuele6> why would the guide describe what something that never makes sense to use does?
[04:36:54] <emanuele6> maybe as a pitfall
[04:37:19] <emanuele6> wait, wasn't a link that explained =($()) from the guide sent before?
[04:37:47] *** Joins: rcernin (~rcernin@124.190.132.36)
[04:37:51] <mra90> ah yes I have even bookmarked it!
[04:37:52] <mra90> https://mywiki.wooledge.org/BashPitfalls#pf50
[04:37:58] <emanuele6> <larryv > !pf 50 > mra90
[04:38:08] <emanuele6> are you reading our messages or not?
[04:38:40] <mra90> yes sorry, instead of getting into discussion I should just read it
[04:41:44] <mra90> emanuele6, can we analyze this -> files=($(git diff --name-only))
[04:42:17] <emanuele6> first of all, it doesn't use -z and doesn't split on NUL
[04:42:36] <emanuele6> it outputs filenames (that may contains newlines) to stdout
[04:42:42] <emanuele6> which is dumb
[04:44:00] <emanuele6> how do you tell if "a\nb\nc\n" means "three files named `a', `b', `c'", or "two files named `a' and `b\nc'" or "two files named `a\nb' and `c'" or "one file named `a\nb\nc'"?
[04:44:04] <emanuele6> you don't
[04:44:19] <emanuele6> that is why reading files like that is dumb and -z/-0 options exist
[04:44:31] <koollman> (just make it a policy to shoot anyone writing files with \n in names)
[04:44:31] *** Joins: nehsou^ (~nehsou@50-202-219-146-static.hfc.comcastbusiness.net)
[04:44:57] <emanuele6> now, assuming reading  `git diff --name-only'  line by line would make sense (it does not, but let's assume)
[04:45:02] <mra90> from git help " When --raw, --numstat, --name-only or --name-status has been given, do not munge pathnames and use NULs as
[04:45:02] <mra90>            output field terminators."
[04:45:09] <mra90> it doesn't say much to me
[04:45:17] <mra90> it is on -z option
[04:45:34] <mra90> "do not munge pathnames"?
[04:45:40] <emanuele6> instead of outputting file1\nfile2\n
[04:45:47] <emanuele6> it outputs file1\0file2\0
[04:45:55] <emanuele6> and filenames can't contain \0
[04:45:57] *** Joins: sinaowolabi (~SinaOwola@160.152.198.126)
[04:46:11] <emanuele6> so it is safe to split on \0 to tell them apart
[04:46:44] <emanuele6> # touch $'a\nb' c; ls -1
[04:46:45] <mra90> emanuele6, I am on gitbash (win 10) and actually it works only without -z
[04:46:47] <shbot> emanuele6: a
[04:46:47] <shbot> emanuele6: b
[04:46:47] <shbot> emanuele6: c
[04:46:52] <emanuele6> see that output?
[04:47:05] <mra90> with -z I get CMakeLists.txt^@
[04:47:09] *** Quits: sinaowolabi (~SinaOwola@160.152.198.126) (Max SendQ exceeded)
[04:47:21] <emanuele6> it's 3 lines, but there are only two files
[04:47:44] <emanuele6> because one of the file names contains two lines
[04:48:12] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[04:48:13] <mra90> two lines?
[04:48:17] <emanuele6> because filenames can contain any character except NUL (and /, but paths can contain /) (and can't be just . or ..
[04:48:30] <emanuele6> mra90: there is one file that is named
[04:48:32] <emanuele6> a
[04:48:34] <emanuele6> b
[04:48:38] <emanuele6> and one file that is named:
[04:48:40] <emanuele6> c
[04:48:53] <mra90> ahh ok your talking about your example OK
[04:49:00] <mra90> yes I see it
[04:49:07] <emanuele6> so if you output a list of files separated by newline
[04:49:16] <emanuele6> <emanuele6> how do you tell if "a\nb\nc\n" means "three files named `a', `b', `c'", or "two files named `a' and `b\nc'" or "two files named `a\nb' and `c'" or "one file named `a\nb\nc'"?
[04:49:23] <emanuele6> <emanuele6> you don't
[04:49:28] <emanuele6> <emanuele6> that is why reading files like that is dumb and -z/-0 options exist
[04:49:45] *** Joins: kilobyte_ch (~kbch@77.109.171.24)
[04:49:59] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[04:50:10] <emanuele6> and to load files from a NUL delimited output to a bash array in bash, the command is simply   mapfile -d '' arr < <(cmd -z ...)
[04:50:41] *** Quits: jaysicks (~jaysicks@fibhost-66-137-185.fibernet.hu) (Ping timeout: 256 seconds)
[04:50:45] <emanuele6> but as i said, let's assume reading  `git diff --name-only'  line by line would be a thing that makes sense
[04:51:06] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 272 seconds)
[04:51:15] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:51:17] <emanuele6> what $(git diff --name-only) does is read the whole output of `git diff --name-only' as a long string
[04:51:43] <emanuele6> (extra step #1: ignoring every NUL character if they are present)
[04:51:46] <mra90> yes and now what I am not sure about is what happens when we encapsulate it by ()
[04:51:57] *** Quits: junebug (~junebug@2600:1700:3db0:2540:9123:34a9:7bc6:8825) (Ping timeout: 240 seconds)
[04:51:59] <mra90> it should be a subshell then
[04:52:05] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[04:52:06] <emanuele6> (extra step #2: ignoring all the newline characters at the end of the output if they are present)
[04:52:21] <emanuele6> once the string it is read, bash looks at the value of IFS
[04:52:29] <emanuele6> # echo "${IFS@Q}"
[04:52:30] <shbot> emanuele6: $' \t\n'
[04:52:45] <emanuele6> which by default is <space> <tab> <newline>
[04:52:53] <emanuele6> but it could be overwritten by the user
[04:53:17] <emanuele6> and it splits the long string containing the output of your `git diff --name-only' command on those characters
[04:53:38] <ke4nhw> brainless moment. If I use crontab -e instead of directly editing /etc/crontab, where does it put the data that I entered into the vim window it  brought up?
[04:53:41] <ke4nhw> rhel 8
[04:53:49] <emanuele6> now bash will look at the settings of your shell
[04:54:11] <koollman> ke4nhw: temporary file
[04:54:14] <emanuele6> if the `-f' setting is off (it is on by default), it will stop here
[04:54:21] <emanuele6> # echo "$-"
[04:54:22] <shbot> emanuele6: himBs
[04:54:28] <phy1729> !nabq > ke4nhw
[04:54:28] <greybot> ke4nhw: Not a #bash question. We're not experts in that software or OS; consider asking the channel or mailing list with experts on that topic (eg. #docker #git ##kernel #linux #openssh #rsync #systemd #ubuntu #zsh or PM alis with "list KEYWORD" to search for channels).
[04:54:42] <emanuele6> ( err the opposite if it is on it stops, it is off by default )
[04:54:57] <emanuele6> so it is on, it needs to apply pathname expansions
[04:54:59] <emanuele6> !glob
[04:54:59] <greybot> Globs are shell patterns that can be used for matching strings or expanding pathnames: [[ $name = Bob* ]]; rm -- *.txt; see http://mywiki.wooledge.org/glob
[04:55:00] <mra90> files=($(git diff --name-only)) && echo ${files[0]}
[04:55:03] <phy1729> Probably /var somewhere
[04:55:19] <ke4nhw> sorry, thought it was common in the bash env. Thank you
[04:55:43] *** Joins: rcernin (~rcernin@124.190.132.36)
[04:56:09] <emanuele6> (extra step #1b: bash will check the value of nullglob, this changes the behaviour of pathname expansion)
[04:56:12] <emanuele6> !nullglob
[04:56:13] <greybot> Causes unmatched globs to expand to nothing rather than themselves. shopt -s nullglob; files=(*); echo "There are ${#files[@]} files." - see: http://mywiki.wooledge.org/glob#nullglob
[04:56:28] <emanuele6> (extra step #2b: bash will check the value of dotglob, this changes the behaviour of pathname expansion)
[04:56:29] <koollman> ke4nhw: on my system it ends up as something like /tmp/crontab.XXXXX , and as soon as the editor closes, it is syntax-checked and wlil replace the actual crontab (something like /var/spool/cron/myuser) if all is fine
[04:56:30] <emanuele6> !dotglob
[04:56:30] <greybot> dotglob, if set, makes bash include filenames beginning with a '.' (excluding . and ..) in the results of pathname expansion (shopt -s dotglob)
[04:56:45] <emanuele6> (extra step #2c: bash will check the value of failglob, this changes the behaviour of pathname expansion)
[04:56:47] <emanuele6> !failglob
[04:56:48] <greybot> If set (shopt -s failglob), patterns which fail to match filenames during pathname expansion result in an expansion error. https://mywiki.wooledge.org/glob#failglob
[04:56:59] <emanuele6> s/2c/3b/
[04:57:11] *** Quits: omantere (~pi@85-156-109-34.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[04:57:23] <mra90> emanuele6, what are you testing now?
[04:57:25] <emanuele6> 4b: globstar 5: globasciiranges, etc, etc
[04:57:29] <emanuele6> extra complicated stuff
[04:57:46] *** Joins: omantere (~pi@85-156-109-34.elisa-laajakaista.fi)
[04:58:13] <mra90> emanuele6, do we agree that in my command above, the parthesis around $(git diff --name-only) run this command in the subshell?
[04:58:34] <emanuele6> files=($(...)) does so much weird and complicated stuff that it is incredibly complex to even describe it
[04:58:54] <emanuele6> mra90: what? no
[04:58:56] <mra90> emanuele6, yes I have difficultis trying to get that
[04:59:02] <emanuele6> why would we agree to that?
[04:59:04] <emanuele6> no
[04:59:11] <emanuele6> that is an array assignment
[04:59:22] <emanuele6> # a=( 1 2 ); declare -p a
[04:59:23] <shbot> emanuele6: declare -a a=([0]="1" [1]="2")
[04:59:30] <emanuele6> no subshell involved
[04:59:36] <emanuele6> why would there be a subshell
[04:59:43] <mra90> files=($(...)) ok so I confused
[04:59:56] <emanuele6> $(git diff --name-only) runs `git diff --name-only' in a subshell
[05:00:03] <mra90> because if you do time (some command) it will be run in subshell right?
[05:00:07] <emanuele6> but `files=( ... )' is irrelevant to that
[05:00:20] <emanuele6> what?
[05:00:39] <emanuele6> ok, we are not even talking about the same thing i feel like
[05:00:47] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[05:00:48] <mra90> "time (some command)" runs some command in subshell
[05:00:59] <emanuele6> why do you keep asking about `files=(*.txt)' `time (...)' etc?
[05:01:10] <emanuele6> how is that related to anything you have asked before
[05:01:30] <mra90> I am clarifying now that effect of () depends on context
[05:01:33] <emanuele6> mra90: time is irrelevant
[05:01:53] <mra90> now you are trolling
[05:01:54] <mra90> ;p
[05:02:11] <emanuele6> (some command) would also run in a subshell
[05:02:15] <emanuele6> time is just noice
[05:02:23] <emanuele6> s/noice/noise/
[05:02:34] <mra90> yes agree
[05:02:42] <teear> wtf
[05:02:49] <emanuele6> you crossed the line at this point
[05:03:05] <emanuele6> i am not going to waste more time
[05:03:21] <mra90> crossed line with what?
[05:03:32] <emanuele6> you are not even following what i am saying. no point in continuing
[05:03:33] *** Joins: sinaowolabi (~SinaOwola@160.152.198.126)
[05:03:39] <teear> there is subshells and subshells
[05:03:52] <mra90> lol I agreed to all you said ;D
[05:03:58] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:6c9d:e6be:e755:548a)
[05:04:00] *** Joins: jaysicks (~jaysicks@178-164-134-138.pool.digikabel.hu)
[05:06:26] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[05:08:15] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[05:08:29] *** Joins: Guest8467 (~Guest@host115.181-14-187.telecom.net.ar)
[05:10:21] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:13:33] *** Quits: jaysicks (~jaysicks@178-164-134-138.pool.digikabel.hu) (Remote host closed the connection)
[05:16:19] *** Quits: zouhair (~zouhair@lnsm1-montreal01-142-122-44-148.internet.virginmobile.ca) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[05:16:40] *** Quits: sais9 (~sais9@host-87-5-181-251.retail.telecomitalia.it) (Quit: Leaving)
[05:31:32] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:31:40] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[05:35:23] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:6c9d:e6be:e755:548a) (Ping timeout: 250 seconds)
[05:38:36] *** Quits: haniaF (~haniaF@83.24.216.182.ipv4.supernova.orange.pl) (Ping timeout: 272 seconds)
[05:38:45] *** Joins: haniaF_ (~haniaF@83.24.224.152.ipv4.supernova.orange.pl)
[05:39:55] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[05:43:04] *** Joins: junebug (~junebug@2600:1700:3db0:2540:e12d:3059:2a81:a407)
[05:43:34] *** Joins: mccoy_ (~mccoy@pd9e3f94a.dip0.t-ipconnect.de)
[05:46:12] *** Quits: mra90 (~mra@192.55.55.54) (Ping timeout: 240 seconds)
[05:46:29] *** Quits: mccoy__ (~mccoy@p5dcba0b1.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:50:32] *** Joins: Jong (~Jong@2620:10d:c090:400::5:8bc7)
[05:51:03] *** Quits: irc_user (uid423822@id-423822.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:52:00] *** Joins: irc_user (uid423822@id-423822.lymington.irccloud.com)
[05:52:41] *** Joins: roadie (~user@pd956924f.dip0.t-ipconnect.de)
[05:53:10] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 272 seconds)
[05:58:46] *** Joins: luckiswithme (~luckiswit@149.167.139.11)
[05:59:45] *** Quits: Jong (~Jong@2620:10d:c090:400::5:8bc7) (Quit: Textual IRC Client: www.textualapp.com)
[06:00:18] *** Quits: luckiswithme (~luckiswit@149.167.139.11) (Remote host closed the connection)
[06:04:47] *** Joins: Jong (~Jong@2620:10d:c090:400::5:8bc7)
[06:09:17] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[06:10:08] *** Joins: justAstache (~justache@user/justache)
[06:10:40] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:14:25] *** Joins: Thanatermesis (~Thanaterm@201.184.186.90)
[06:20:24] *** Quits: Thanatermesis (~Thanaterm@201.184.186.90) (Ping timeout: 272 seconds)
[06:26:39] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-101-189.pa.qld.optusnet.com.au)
[06:28:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[06:30:08] *** Joins: mra90 (~mra@192.55.55.54)
[06:30:25] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[06:33:04] *** Quits: arinov (~arinov@45.86.202.135) (Ping timeout: 272 seconds)
[06:41:50] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[06:47:43] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[07:00:27] *** Quits: sinaowolabi (~SinaOwola@160.152.198.126) (Ping timeout: 256 seconds)
[07:01:22] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[07:01:44] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[07:04:12] *** Quits: mra90 (~mra@192.55.55.54) (Ping timeout: 240 seconds)
[07:04:59] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-101-189.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[07:13:29] *** Joins: computerworm110 (~quassel@pppoe52109.htc.net)
[07:16:26] *** Joins: kurahaupo (~kurahaupo@pa49-182-36-101.pa.qld.optusnet.com.au)
[07:17:55] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:18:38] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[07:18:41] *** Joins: rcernin (~rcernin@124.190.132.36)
[07:19:02] *** Quits: rcernin (~rcernin@124.190.132.36) (Client Quit)
[07:20:28] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[07:21:52] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[07:22:33] *** Quits: computerworm110 (~quassel@pppoe52109.htc.net) (Quit: If this happens without warning, it's not you, it's my Internet.  :()
[07:23:02] *** Joins: computerworm110 (~quassel@pppoe52109.htc.net)
[07:24:19] *** Quits: Guest8467 (~Guest@host115.181-14-187.telecom.net.ar) (Remote host closed the connection)
[07:24:22] *** Joins: sinaowolabi (~SinaOwola@160.152.198.126)
[07:24:49] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[07:25:40] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[07:27:38] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[07:27:44] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[07:29:39] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:29:56] *** Quits: computerworm110 (~quassel@pppoe52109.htc.net) (Quit: If this happens without warning, it's not you, it's my Internet.  :()
[07:30:45] *** Quits: jos1 (~jos3@dyndsl-091-096-043-206.ewe-ip-backbone.de) (Ping timeout: 256 seconds)
[07:33:52] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 272 seconds)
[07:33:59] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:6c9d:e6be:e755:548a)
[07:35:09] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[07:35:43] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:37:40] *** Quits: roadie (~user@pd956924f.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[07:40:01] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Client Quit)
[07:40:18] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:40:48] *** Joins: MrConorAE (~MrConorAE@user/mrconorae)
[07:41:56] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:9d42:51ae:9407:db15) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:42:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:43:18] *** Joins: jos1 (~jos3@dyndsl-091-096-035-142.ewe-ip-backbone.de)
[07:43:33] *** Quits: MrConorAE (~MrConorAE@user/mrconorae) (Client Quit)
[07:46:47] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:9d42:51ae:9407:db15)
[07:49:33] *** Joins: malina (~malina@user/malina)
[07:53:24] *** Quits: sinaowolabi (~SinaOwola@160.152.198.126) (Ping timeout: 240 seconds)
[07:53:54] *** Joins: n4dir (~user@mue-88-130-56-001.dsl.tropolys.de)
[07:54:55] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[07:55:09] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[07:58:14] *** Joins: ryp (~ryp@user/ryp)
[07:58:32] *** Quits: suss (~user@user/suss) (Remote host closed the connection)
[07:59:05] *** Joins: suss (~user@user/suss)
[08:00:28] *** Quits: Laskolny1 (~wasyl@89-76-136-17.dynamic.chello.pl) (Ping timeout: 272 seconds)
[08:01:48] *** Joins: Laskolnyk (~wasyl@apn-31-1-27-179.dynamic.gprs.plus.pl)
[08:01:51] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 250 seconds)
[08:02:43] *** Joins: stoneware (~stoneware@user/stoneware)
[08:05:39] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:6c9d:e6be:e755:548a) (Ping timeout: 256 seconds)
[08:08:12] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:9d42:51ae:9407:db15) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:08:45] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[08:12:56] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[08:20:09] *** Joins: ekathva (~ekathva@n2gvphjzi3l3fwqfx-1.v6.elisa-mobile.fi)
[08:21:03] *** Quits: irc_user (uid423822@id-423822.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[08:23:11] *** Quits: Laskolnyk (~wasyl@apn-31-1-27-179.dynamic.gprs.plus.pl) (Ping timeout: 256 seconds)
[08:25:03] *** Joins: Laskolnyk (~wasyl@89-76-136-17.dynamic.chello.pl)
[08:26:23] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:37:31] *** Joins: iconz (~iconz@2a02:c7d:f45b:2100:8e8d:28ff:fe2c:403e)
[08:46:29] *** Quits: junebug (~junebug@2600:1700:3db0:2540:e12d:3059:2a81:a407) (Quit: Leaving)
[08:53:04] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: Connection reset by peer)
[08:54:58] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[09:07:23] *** Joins: rampart (~rampart@3.sub-174-250-16.myvzw.com)
[09:09:53] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 250 seconds)
[09:13:06] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[09:17:27] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:9d42:51ae:9407:db15)
[09:22:01] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:22:24] *** Joins: bluedust (~bluedust@103.148.21.74)
[09:23:31] *** Quits: timj (~timj@user/timj) (Ping timeout: 256 seconds)
[09:23:47] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:04] *** Quits: ke4nhw (~ke4nhw@user/ke4nhw) (Remote host closed the connection)
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:34:24] *** Quits: A|an (~Alan@173.218.175.171) (Quit: A|an)
[09:36:11] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[09:37:43] *** Joins: timj (~timj@user/timj)
[09:38:29] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[09:39:05] *** Joins: han-solo (~han-solo@user/han-solo)
[09:39:57] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Ping timeout: 256 seconds)
[09:40:21] <skered> It's expected for bash's PS1 when using \n to return 0d0a?  Not 0a?
[09:42:05] *** Quits: NoelFlantier3 (~Hubert@195.201.244.189) (Remote host closed the connection)
[09:42:12] *** Quits: Jong (~Jong@2620:10d:c090:400::5:8bc7) (Ping timeout: 240 seconds)
[09:42:30] *** Joins: NoelFlantier3 (~Hubert@195.201.244.189)
[09:43:00] <larryv> # foo='\n'; printf '%s' "${foo@P}" | od -A n -t c
[09:43:02] <shbot> larryv:   \r  \n
[09:44:18] <skered> Ok my example used xxd but I think that's "yes"?
[09:44:46] <larryv> seems so
[09:45:01] <skered> Ok good thanks for the confirmation.
[09:45:54] <skered> First time I've seen this ${var@...} thing.  (from geirha oneliner and your previous example).
[09:46:09] <skered> Is it something new(ish)?
[09:47:49] <larryv> to bash, yes. 2016
[09:48:07] <larryv> !faq features
[09:48:07] <greybot> https://mywiki.wooledge.org/BashFAQ/061 -- Is there a list of which features were added to specific releases (versions) of Bash?
[09:48:47] *** Joins: Jong (~Jong@163.114.132.1)
[09:50:06] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[09:50:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[09:51:13] <skered> hah comparing that to CHANGES is like night and day.
[09:53:33] *** Joins: rcernin (~rcernin@124.190.132.36)
[09:58:38] *** Quits: kurahaupo (~kurahaupo@pa49-182-36-101.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[10:01:27] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:05:24] *** Quits: tercaL (~tercaL@user/tercal) (Remote host closed the connection)
[10:10:55] *** Joins: mra90 (~mra@192.55.55.58)
[10:10:59] *** Joins: irc_user (uid423822@id-423822.lymington.irccloud.com)
[10:11:34] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[10:12:07] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[10:13:05] *** Joins: rcernin (~rcernin@124.190.132.36)
[10:13:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[10:15:02] *** Joins: xx (~xx@user/xx)
[10:16:38] *** Quits: iconz (~iconz@2a02:c7d:f45b:2100:8e8d:28ff:fe2c:403e) (Quit: iconz)
[10:18:29] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[10:18:42] *** Joins: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net)
[10:18:45] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:20:11] *** Quits: rampart (~rampart@3.sub-174-250-16.myvzw.com) (Quit: Leaving)
[10:20:40] *** Joins: rampart (~rampart@2.sub-174-250-16.myvzw.com)
[10:21:57] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: Connection reset by peer)
[10:24:49] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[10:27:31] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[10:27:33] *** Quits: larryv (~larryv@zsh/patchmanager/larryv) (Quit: larryv)
[10:27:47] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[10:28:05] *** Quits: jensen (~jensen@65.78.100.184) (Remote host closed the connection)
[10:28:28] *** Quits: karabaja4 (~karabaja4@dh207-93-84.xnet.hr) (Remote host closed the connection)
[10:28:57] *** Joins: noarb (~noarb@user/noarb)
[10:32:33] *** Joins: noarb- (~noarb@user/noarb)
[10:34:05] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[10:37:07] *** Joins: noteness_ (~noteness@user/noteness)
[10:40:06] *** Joins: fourHZ (~fourHZ@92-52-40-121.dynamic.orange.sk)
[10:42:01] *** Joins: bluedust_ (~bluedust@89.238.130.70)
[10:45:41] *** Quits: bluedust (~bluedust@103.148.21.74) (Ping timeout: 256 seconds)
[10:46:35] *** Quits: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[10:49:49] *** Joins: fef (~thedawn@user/thedawn)
[10:53:00] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[10:53:23] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[10:54:06] *** Quits: n4dir (~user@mue-88-130-56-001.dsl.tropolys.de) (Remote host closed the connection)
[10:55:50] *** Joins: rendar (~rendar@user/rendar)
[10:56:37] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:57:20] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[10:58:43] *** Quits: Dotz0cat (~Dotz0cat@h246.117.90.75.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[10:59:49] *** Joins: bluedust (~bluedust@103.148.21.74)
[11:03:15] *** Quits: bluedust_ (~bluedust@89.238.130.70) (Ping timeout: 256 seconds)
[11:04:31] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[11:06:37] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:09:40] *** Quits: bluedust (~bluedust@103.148.21.74) (Remote host closed the connection)
[11:15:36] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:6c9d:e6be:e755:548a)
[11:15:38] *** Joins: tobybl (~tobybl@229.193.115.87.dyn.plus.net)
[11:17:06] *** Joins: Guest56366 (~rx@dynamic-046-114-169-171.46.114.pool.telefonica.de)
[11:23:39] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 256 seconds)
[11:24:23] *** Joins: greenriot (~greenriot@user/gr33nr10t)
[11:24:47] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Ping timeout: 256 seconds)
[11:25:29] *** Joins: noarb (~noarb@user/noarb)
[11:29:05] *** Joins: noarb- (~noarb@user/noarb)
[11:30:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 260 seconds)
[11:37:17] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[11:39:39] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:43:32] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: Connection reset by peer)
[11:44:40] *** Joins: noarb (~noarb@user/noarb)
[11:45:45] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 256 seconds)
[11:48:49] *** Joins: karabaja4 (~karabaja4@dh207-95-76.xnet.hr)
[11:55:57] *** Quits: ryp (~ryp@user/ryp) (Ping timeout: 256 seconds)
[11:58:30] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[12:00:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:00:47] *** Quits: mra90 (~mra@192.55.55.58) (Ping timeout: 256 seconds)
[12:01:57] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:6c9d:e6be:e755:548a) (Remote host closed the connection)
[12:02:09] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:6c9d:e6be:e755:548a)
[12:03:47] *** Joins: cyphrCat (~ciphrCat@user/ciphrcat)
[12:07:17] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[12:15:10] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[12:19:02] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[12:19:28] *** Quits: w1r3d (~w1r3d@user/w1r3d) (Quit: Leaving)
[12:21:35] *** Joins: ravan (~ravan@user/ravan)
[12:22:30] *** Joins: drd (~drd@93-42-66-75.ip85.fastwebnet.it)
[12:22:59] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[12:23:00] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[12:26:01] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[12:26:08] *** Joins: ryp (~ryp@user/ryp)
[12:26:56] *** Quits: whaa (~whaa@c-75-67-72-65.hsd1.ma.comcast.net) (Remote host closed the connection)
[12:27:33] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (Quit: nyaa~)
[12:27:46] *** Joins: whaa (~whaa@c-75-67-72-65.hsd1.ma.comcast.net)
[12:27:48] *** Joins: mithrin (~mithrin@188-167-233-152.dynamic.chello.sk)
[12:29:49] *** Quits: tobybl (~tobybl@229.193.115.87.dyn.plus.net) (Remote host closed the connection)
[12:31:25] *** Joins: rkta_ (~rkta@2001:4ba0:cafe:eaf::1)
[12:31:40] *** rkta_ is now known as rkta
[12:32:00] *** Quits: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net) (Quit: Leaving)
[12:32:08] *** Joins: noteness (~noteness@user/noteness)
[12:32:35] *** Quits: noteness_ (~noteness@user/noteness) (Ping timeout: 240 seconds)
[12:34:36] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[12:36:12] *** Joins: l4s8g_ (~l4s8g@2a02:908:1a72:c7c0::cb3f)
[12:36:15] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[12:37:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:38:34] *** Joins: arinov (~arinov@213.194.126.155)
[12:39:08] *** Joins: tobybl (~tobybl@229.193.115.87.dyn.plus.net)
[12:45:36] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:46:02] *** Joins: arinov_ (~arinov@194.169.217.31)
[12:46:07] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[12:48:05] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[12:51:40] *** Joins: Ad1Tech (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl)
[12:56:19] *** Quits: ejjdhfjsu_ (~ejjdhfjsu@cmcust2a-84.174.nulinkdigital.com) (Ping timeout: 256 seconds)
[12:58:12] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:9d42:51ae:9407:db15) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:32] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 240 seconds)
[13:04:04] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[13:08:40] <cyphrCat> as an alternative to “!!:3”, There is a trick to recall the 3rd arg of the previous command by typing ESC-3, but what follows that?
[13:09:03] <cyphrCat> s/There is a trick /
[13:09:38] *** Joins: timm (~timm@user/timm)
[13:09:50] <cyphrCat> s/s*// #(had it right the 1st time actually)
[13:10:20] <cyphrCat> it’s an emacs-like keystroke IIRC
[13:11:03] *** Quits: irc_user (uid423822@id-423822.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[13:11:59] *** Joins: Atque (~Atque@user/atque)
[13:13:46] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[13:18:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[13:18:21] *** Quits: bash-libera (~bash-libe@h216-170-204-47.hrcnut.broadband.dynamic.tds.net) (Quit: Leaving...)
[13:19:55] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[13:24:41] *** Joins: n4dir (~user@mue-88-130-56-001.dsl.tropolys.de)
[13:30:05] *** Joins: jaysicks (~jaysicks@178-164-134-138.pool.digikabel.hu)
[13:32:12] *** Joins: magla (~gelignite@d5364c1c.access.ecotel.net)
[13:37:07] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[13:39:27] *** Joins: fef (~thedawn@user/thedawn)
[13:42:00] <geirha> M-3-.
[13:43:12] <geirha> or maybe M-3 M-. is the way to write it
[13:45:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[13:45:53] <cyphrCat> ah yes, thanks!  M-3 M-. worked
[13:47:35] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 252 seconds)
[13:50:52] *** Joins: yustin (~yustin@user/yustin)
[13:51:02] *** Joins: xmb (~xmb@178.197.192.136)
[13:51:45] *** Joins: arc_09 (~arc_09@2a02:a31d:803d:6700:44ff:18a9:e2b1:903c)
[13:52:21] *** Joins: Ad1Tech_IT (~Ad1Tech@h104101.man.tk-internet.pl)
[13:52:46] <xmb> i made ( tried ) a cmd intercept script, for a dude that requested his <cmd> --help goes to a file then vim, but the redirection back on line 23 doesnt seem working, any suggestions .. ?  http://ix.io/3QTO
[13:54:32] *** Quits: Ad1Tech (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl) (Ping timeout: 240 seconds)
[13:54:52] *** Joins: _Ad1Tech_ (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl)
[13:54:59] *** Quits: tobybl (~tobybl@229.193.115.87.dyn.plus.net) (Remote host closed the connection)
[13:55:32] *** Joins: iliv (~iliv@93-77-147-152.lvv.volia.net)
[13:57:30] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:57:47] *** Quits: Ad1Tech_IT (~Ad1Tech@h104101.man.tk-internet.pl) (Ping timeout: 256 seconds)
[13:59:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:00:21] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[14:04:42] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[14:07:49] *** Joins: lavaball (felix@31.204.155.215)
[14:09:12] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[14:09:39] <geirha> printf %s\\n\\n in there will end up as  printf %snn  since there's three layers "eating" backslashes
[14:09:56] <xmb> oh, k, thank you
[14:10:15] <xmb> will fix, but the redir back does work, the one to >/dev/tty
[14:11:45] <xmb> i made that to %s and "$cmd<newlinenewline>"
[14:12:14] <xmb> and made $' to '
[14:13:14] <xmb> is exec <>3 2<>4 and later what to replace back
[14:16:07] <xmb> may it be that exec in PROMPT_COMMAND is not working ?
[14:16:09] *** Quits: themachine (~themachin@user/themachine) (Quit: I fell over, send help.)
[14:17:38] <xmb> i tried exec 1>/dev/tty 2>/dev/tty, that works fine, excepts inside PROMPT_COMMAND is my observment
[14:18:57] *** Quits: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[14:19:01] *** Parts: cyphrCat (~ciphrCat@user/ciphrcat) ()
[14:19:36] *** Joins: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de)
[14:20:34] <xmb> http://ix.io/3QTT   with test cmd shown, after w --help i did control-d to exit
[14:21:25] *** Joins: themachine (~themachin@user/themachine)
[14:22:16] *** Joins: Agiofws (~Agiofws@178-147-226-132.haap.dm.cosmote.net)
[14:22:23] <Agiofws> hello
[14:22:33] <xmb> hi
[14:23:37] *** Quits: iliv (~iliv@93-77-147-152.lvv.volia.net) (Changing host)
[14:23:37] *** Joins: iliv (~iliv@user/iliv)
[14:24:48] *** Quits: themachine (~themachin@user/themachine) (Client Quit)
[14:25:29] *** Joins: arinov (~arinov@213.194.126.155)
[14:25:49] *** Lantizia is now known as stevenm
[14:26:09] <tirnanog> xmb: the value of cmd isn't known within PROMPT_COMMAND so your restoration of fd's 1 and 2 never occurs.
[14:26:16] *** Quits: n4dir (~user@mue-88-130-56-001.dsl.tropolys.de) (Remote host closed the connection)
[14:26:58] <xmb> they do, i set it in the debug trap whenever --help is found
[14:27:09] <xmb> i also in set -x it shows the printf in the file still redirected
[14:27:11] <tirnanog> no, they don't.
[14:27:20] *** Quits: arinov_ (~arinov@194.169.217.31) (Read error: Connection reset by peer)
[14:27:31] <tirnanog> your PROMPT_COMMAND test fails. nothing happens.
[14:27:35] <tirnanog> that's the problem.
[14:27:46] <Agiofws> if i post into my web browser  https://oauth2server/authorize?client_id=xxxxxxxx&redirect_uri=https://foo-bar/test&response_type=code&scope=read i get a login screen where i issue my credentials and then i get redirected to https://foo-bar/test and i get in the address bar of chrome  https://foo-bar/test/?code=M4Ulbs  <-------- is there a way i
[14:27:46] <Agiofws> can  get that in bash  without a gui  browser ?
[14:27:48] <xmb> no, ... what u mean
[14:27:54] *** stevenm is now known as Lantizia
[14:28:00] *** Joins: themachine (~themachin@user/themachine)
[14:28:05] <xmb> agiofws your msg is crippled to a bit after <-----
[14:28:32] <tirnanog> I don't know how much more clear I can be. the value of cmd isn't known within PROMPT_COMMAND. a test of [[ $cmd ]] then fails. the file descriptors are never restored to their prior state, never mind invoking viim.
[14:28:33] <Agiofws> if i post into my web browser  https://oauth2server/authorize?client_id=xxxxxxxx&redirect_uri=https://foo-bar/test&response_type=code&scope=read i get a login screen where i issue my credentials and then i get redirected to https://foo-bar/test and i get in the address bar of chrome  https://foo-bar/test/?code=M4Ulbs  <- is there a way i can
[14:28:33] <Agiofws> get that in bash  without a gui  browser ?
[14:29:11] <xmb> tirn, hold, see if it never matched it never would have redirected away to file
[14:29:13] *** Lantizia is now known as stevenm
[14:29:24] <tirnanog> I'n not talking about your trap.
[14:29:28] <tirnanog> I'm talking about PROMPT_COMMAND.
[14:29:36] <tirnanog> that is where cmd is empty.
[14:29:39] <xmb> hold there was a hint
[14:29:49] <Agiofws> i've tried elinks or lynx but because the login screen is coded in javascript the submit button will not work in text browsers
[14:30:05] <Agiofws> can i try with curl to emulate a browser?
[14:30:15] <tirnanog> xmb: if you use cmd as a sentinel in PROMPT_COMMAND, you rely on the value of cmd being known in PROMPT_COMMAND. again, it is _not_ known.
[14:30:21] *** Quits: yustin (~yustin@user/yustin) (Ping timeout: 245 seconds)
[14:30:36] <Earnestly> Agiofws: curl
[14:30:54] <tirnanog> therefore, fd's 1 and 2 are never restored and vim never runs.
[14:30:56] <xmb> this it is tirn, the $cmd was overwritten by other the trap, i made it away so it stays till cmd= in PROMPT_ and it did work, excepts a vim error to read stdin error
[14:31:01] *** Quits: themachine (~themachin@user/themachine) (Client Quit)
[14:31:33] <xmb> what is the right way with duplicating fd's and replacing them afterwards
[14:31:39] <xmb> i suspect then it fully works
[14:32:11] <tirnanog> it's not about how you handle the file descriptors. it's about cmd not being known. you could check for the existence of the temp file instead as a condition.
[14:32:32] <tirnanog> that might work.
[14:32:45] <tirnanog> I'll fiddle with it a bit more here.
[14:32:56] <xmb> no it did work mate
[14:33:08] <xmb> it went further, lemme paste
[14:33:11] <tirnanog> ok.
[14:34:13] *** Joins: themachine (~themachin@user/themachine)
[14:34:13] <xmb> http://ix.io/3QTX
[14:34:21] *** Joins: Ad1Tech_IT (~Ad1Tech@h104101.man.tk-internet.pl)
[14:34:27] <xmb> it moved to vim error cause wrongly opened /dev/tty instead of better
[14:34:45] <xmb> then now im at how to rightly duplicate fd 1 and 2 to 3 and 4 and especially how back i dunno
[14:35:54] <xmb> !redir
[14:35:54] <greybot> Redirections: http://mywiki.wooledge.org/Redirection
[14:36:00] *** Quits: jochum (~quassel@user/jochum) (Ping timeout: 252 seconds)
[14:36:20] <tirnanog> xmb: why not just print the header in the trap, then have vim open the temp file directly rather than using a pipe and thus depriving of it of the property of STDIN being a tty?
[14:36:36] *** Joins: jochum (~quassel@user/jochum)
[14:36:36] <xmb> oh ho okay lemme try
[14:37:07] *** Quits: themachine (~themachin@user/themachine) (Client Quit)
[14:37:11] *** Quits: _Ad1Tech_ (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl) (Ping timeout: 256 seconds)
[14:37:52] <xmb> very nice, works
[14:37:55] <tirnanog> cool.
[14:37:56] *** Quits: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[14:38:00] <xmb> thank you mate, will post the code, its for learning purposes
[14:38:32] *** Joins: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de)
[14:38:32] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[14:38:47] <xmb> http://ix.io/3QTY  ++  thanks
[14:39:59] <tirnanog> as for the file descriptors, if you want to back up exactly what they were, you could do exec {fd}>"$o2" >&"$fd" 2>&"$fd" followed by the inverse of that in the PROMPT_COMMAND.
[14:40:17] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 240 seconds)
[14:41:12] <tirnanog> bash will automatically write an available file descriptor number to the fd variable there.
[14:41:42] <xmb> yes good one, but how does the inverse look like, thats part 2 where i didnt get yet
[14:42:20] <tirnanog> I believe it would be: exec >&"$fd" 2>&1 &"$fd">&-
[14:42:34] <tirnanog> ergo, dup it back then close the temporary file descriptor number that was in use.
[14:42:41] <xmb> closing the file will redirect back ? that'd be cool
[14:42:52] <tirnanog> no, the final closure is just to stop it lingering.
[14:43:03] <xmb> i dont understand that english ..
[14:43:06] <tirnanog> so
[14:43:22] <xmb> will test
[14:43:24] <tirnanog> >&"$fd" <-- dups the fd whose number is the value of fd back to fd 1
[14:43:25] <xmb> thx :))
[14:43:39] <tirnanog> 2>&1 dups the (newly updated) fd 1 to fd 2
[14:43:47] <tirnanog> finally, we flose the temporary file descriptor
[14:44:17] *** Joins: themachine (~themachin@user/themachine)
[14:44:33] <tirnanog> I got that last one wrong, I think. it probably needs to be: "$fd">&-
[14:44:41] <tirnanog> or {fd}>&-. I'm a bit rusty on this.
[14:44:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:45:03] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[14:45:41] <xmb> thats right fd num > & - to close it, sec test
[14:46:27] <tirnanog> {fd}>&- is it
[14:46:28] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:46:29] <tirnanog> just tested
[14:46:47] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:47:49] <tirnanog> # ( exec {fd}>tmpfile; test -e /proc/self/fd/"$fd" && echo exists; exec {fd}>&-; test -e /proc/self/fd/"$fd" || echo gone )
[14:47:51] <shbot> tirnanog: exists
[14:47:51] <shbot> tirnanog: gone
[14:48:01] <xmb> well i fail completly
[14:48:14] *** Quits: themachine (~themachin@user/themachine) (Client Quit)
[14:48:26] *** Joins: themachine (~themachin@user/themachine)
[14:48:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:48:46] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[14:49:08] *** Joins: tercaL (~tercaL@user/tercal)
[14:49:12] *** Joins: freepp (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[14:49:14] <xmb> http://ix.io/3QU2  - what where , i completly dont get it
[14:49:29] <xmb> at the exec 2 and 1 back
[14:49:31] <xmb> is missing
[14:49:36] <tirnanog> let me summarise.
[14:49:42] *** Quits: freepp (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[14:50:16] <tirnanog> because I didn't think that through.
[14:50:25] *** Quits: timm (~timm@user/timm) (Read error: Connection reset by peer)
[14:50:36] <xmb> i think i need like exec 1<>3 2<>4
[14:50:39] <xmb> and back then how
[14:50:55] <xmb> 1>&3 2>&4 may work
[14:52:10] <tirnanog> right, now my brain is in gear ...
[14:52:16] <tirnanog> # ( tmpfile=whatever; exec {fd1}>&1 {fd2}>&2 >"$tmpfile" 2>&1; echo out; echo err >&2; exec >&"$fd1" >&"$fd2" {fd1}>&-; {fd2}>&-; cat "$tmpfile" )
[14:52:18] <shbot> tirnanog: out
[14:52:18] <shbot> tirnanog: err
[14:52:31] *** Joins: timm (~timm@user/timm)
[14:53:05] <tirnanog> that correctly backs up the original ones to fd1 and fd2 respectively, restores them afterwards, before finally closing them.
[14:53:21] <tirnanog> er, just one typo.
[14:53:22] *** stevenm is now known as Lantizia
[14:53:28] <tirnanog> # ( tmpfile=whatever; exec {fd1}>&1 {fd2}>&2 >"$tmpfile" 2>&1; echo out; echo err >&2; exec >&"$fd1" 2>&"$fd2" {fd1}>&-; {fd2}>&-; cat "$tmpfile" )
[14:53:30] <shbot> tirnanog: out
[14:53:30] <shbot> tirnanog: err
[14:53:31] <tirnanog> there.
[14:53:41] <tirnanog> (note: 2>&"$fd2")
[14:53:43] <xmb> # t=$SRANDOM ; echo out ; exec <>3 2<>4 >$t 2>&1 ; w --help ; exec >&3 2>&4 ; echo in
[14:53:45] <shbot> xmb: out
[14:54:02] *** Quits: richardm645 (~quassel@2600:8801:c507:b200:f015:781b:d5b2:25b) (Ping timeout: 240 seconds)
[14:54:08] <geirha> now you've created files named "3" and "4"
[14:54:16] <xmb> heh
[14:54:40] <tercaL> Hi. I have few lines of code that I want to set the shell argument option "x" whenever it is issued, like ./myscript.sh -x, the script should start executing the command, without expecting additional user input as arguments. Like, ./myscript.sh -a $argument, -r $argument are fine, but -x should have no argument, and when it is executed, it shouldn't expect for any argument and start the command defined there. Any idea? The code is: while getopts "a:r:x:" opt;
[14:54:40] <tercaL> do case "$opt" in a) echo "case a" ;;  r) echo "case r" ;;   x) exec /bin/mycommand  ;;  esac done
[14:55:17] <Earnestly> tercaL: You're telling getopts that -x takes an argument
[14:55:38] <tercaL> Earnestly: How to make it as exception? (no argument needed)
[14:55:44] <Earnestly> Remove :
[14:55:44] *** Joins: sinaowolabi (~SinaOwola@41.58.86.144)
[14:56:00] <tirnanog> xmb: so, if you use the first demonstrated exec in your debug trap and the second demonstrated exec in your prompt command, it should work.
[14:56:17] <tercaL> Earnestly: Worked! Thanks a lot.
[14:56:20] <xmb> okay lemme test thank you
[14:56:48] <geirha> # help getopts | awk -v RS="\n    \n" '$1 == "OPTSTRING"'
[14:56:50] <shbot> geirha:     OPTSTRING contains the option letters to be recognized; if a letter
[14:56:50] <shbot> geirha:     is followed by a colon, the option is expected to have an argument,
[14:56:50] <shbot> geirha:     which should be separated from it by white space.
[14:56:52] *** Joins: Atque (~Atque@user/atque)
[14:59:11] <Earnestly> I wonder how reasonable it would be to have encrypted json file as pass database
[14:59:23] <Earnestly> Where decrypt | jq is typical usage
[14:59:38] <xmb> tirn, that all looks to work excepts in vim the file is now empty, but i think i can fix that
[15:00:04] <tirnanog> xmb: it shouldn't be. feel free to paste the updated script if you are having problems.
[15:00:13] <xmb> i got one wrong tho err sec
[15:01:31] <xmb> http://ix.io/3QU3
[15:01:48] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[15:01:53] <xmb> i thought to move the {fd*}>&- to after vim maybe that wont overwrite it
[15:02:26] <geirha> missing a >
[15:02:30] <tirnanog> yes
[15:02:38] <tirnanog> it should be: exec {fd1}>&1 {fd2}>&2 >"$o2" 2>&1
[15:02:47] <tirnanog> because you also want stderr to go to your tmpfile
[15:02:58] <xmb> yes i saw when u said
[15:03:00] <tirnanog> as well as attenting to the missing >
[15:03:04] <tirnanog> attending
[15:03:29] <tirnanog> printf %s\\n would also help you.
[15:03:50] <xmb> i had it printgly in prompt command, the printf, sec
[15:03:52] <xmb> btw it works
[15:03:54] <xmb> sec to post
[15:04:44] <xmb> http://ix.io/3QU5
[15:05:37] <geirha> and it'll probably be cleaner if you set the DEBUG trap at the end of PROMPT_COMMAND, else you risk other parts of PROMPT_COMMAND triggering the debug trap which can lead to odd behavior. That also means the debug trap must unset itself whenever it sets cmd
[15:06:05] <xmb> uh i gotta think about it i dunno sounds complicated .. :) :)
[15:06:19] <geirha> gonna be a quoting nightmare though
[15:06:23] <xmb> the problem is if user has other debug traps or prompt commands
[15:06:44] <xmb> i gotta make a quoter.gawk for such cases yes
[15:06:53] <xmb> but also for it i aint ready with knows
[15:08:16] *** Quits: timm (~timm@user/timm) (Ping timeout: 245 seconds)
[15:10:01] <tirnanog> PROMPT_COMMANDS can be an array in 5.1.
[15:11:00] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 240 seconds)
[15:11:50] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[15:12:13] <xmb> ah cool, does it need to be continously indexed ?
[15:12:48] <tirnanog> I haven't tested but I doubt it.
[15:13:04] <xmb> cool mates here when comm works :)
[15:14:25] *** Joins: yustin (~yustin@user/yustin)
[15:15:45] <geirha> also, I'd change that exit 1 to return 0
[15:16:04] <xmb> oh oops right
[15:16:31] <xmb> its a bit useless check there
[15:16:34] <xmb> i make it away
[15:17:10] <xmb> to .. only i=${SRANDOM:-$RANDOM}
[15:19:41] *** Quits: wwilliam (~afernande@user/wwilliam) (Ping timeout: 256 seconds)
[15:20:56] *** Joins: wwilliam (~afernande@63.240.73.102)
[15:20:56] *** Quits: wwilliam (~afernande@63.240.73.102) (Changing host)
[15:20:56] *** Joins: wwilliam (~afernande@user/wwilliam)
[15:23:20] *** Parts: dokma (~user@dh207-51-101.xnet.hr) (ERC (IRC client for Emacs 27.1))
[15:24:30] *** Joins: cdown (~cdown@163.114.131.1)
[15:34:51] *** Joins: tobybl (~tobybl@229.193.115.87.dyn.plus.net)
[15:42:36] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[15:43:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[15:43:56] *** Quits: cdown (~cdown@163.114.131.1) (Remote host closed the connection)
[15:44:10] *** Joins: cdown (~cdown@163.114.131.1)
[15:45:29] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[15:46:20] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:46:23] *** Joins: sobkas (~sobkas@95.175.17.217)
[15:50:22] *** Quits: mongy (~mongy@user/mongy) (Quit: WeeChat 3.4)
[15:52:23] *** Quits: tobybl (~tobybl@229.193.115.87.dyn.plus.net) (Remote host closed the connection)
[15:53:34] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[15:54:06] *** Joins: sobkas (~sobkas@95.175.17.217)
[15:54:15] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[15:56:50] *** Joins: Ad1Tech (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl)
[15:58:36] *** Quits: Ad1Tech_IT (~Ad1Tech@h104101.man.tk-internet.pl) (Ping timeout: 240 seconds)
[16:04:59] *** Joins: bluedust (~bluedust@103.148.21.74)
[16:05:45] *** Joins: Ad1Tech_IT (~Ad1Tech@static.248.64.63.178.clients.your-server.de)
[16:08:17] *** Quits: Ad1Tech (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl) (Ping timeout: 240 seconds)
[16:13:19] *** Joins: kj (~kj@142.169.78.155)
[16:13:44] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:13:50] <Helmholtz> I have a bunch of bash functions that mainly `curl` some links and save the images to a global temp dir. What's the best way of parallelizing this?
[16:14:10] <Helmholtz> task1 & task2 & task3 & wait does not work...(it waits indefinitly)
[16:14:40] <xmb> are the dl's big
[16:14:50] <Helmholtz> Also each task prints to stderr...I want to keep the printing in order (no clobber)
[16:14:53] <xmb> it hangs till the tasks are done
[16:15:09] <xmb> hm !
[16:15:19] <Helmholtz> xmb, no...~50KiB but just connecting to the endpoint takes a few seconds
[16:15:38] <xmb> you can redirect their output to different out files ( the stderr ) then in a separate step cat those files together to the terminal
[16:15:44] <Helmholtz> xmb, well the tasks are done but wait simply doesn't let go
[16:15:55] <xmb> ignore the wait
[16:15:55] *** Quits: kj (~kj@142.169.78.155) (Client Quit)
[16:16:00] <xmb> hm
[16:16:27] <xmb> i havent seen wait hang over processes that finished
[16:16:31] <xmb> so the curls just didnt finish
[16:17:01] <Helmholtz> Should I use gnu parallel or xargs? Do they have a switch so the output does not clobber?
[16:17:35] <xmb> no
[16:17:42] <xmb> i dunno paralell
[16:17:48] <xmb> but xargs doent order output
[16:19:30] <xmb> task >1 2>&1 & task2 >2 2>&1 & while [[ $( jobs -p ) ]] ; do cat [12] ; sleep .75 ; done
[16:19:48] *** Quits: noent (~quassel@user/sven/x-0967695) (Quit: noent)
[16:20:00] *** Joins: noent (~quassel@squint.a-oben.org)
[16:20:01] *** Quits: noent (~quassel@squint.a-oben.org) (Changing host)
[16:20:01] *** Joins: noent (~quassel@user/sven/x-0967695)
[16:23:00] *** Quits: sinaowolabi (~SinaOwola@41.58.86.144) (Ping timeout: 240 seconds)
[16:23:00] *** Quits: sinaowolabi__ (~SinaOwola@41.58.86.144) (Ping timeout: 240 seconds)
[16:25:29] <furrymcgee> coproc or prepend each line with task number and sort afterwards
[16:30:13] <xmb> demo1() { sleep .5 ; echo one ; } ; demo2() { sleep 2 ; echo two ; } ; demo1 >1 & demo2 >2 & while [[ $( jobs -p ) ]] ;do cat [12] ; done
[16:30:17] <xmb> # demo1() { sleep .5 ; echo one ; } ; demo2() { sleep 2 ; echo two ; } ; demo1 >1 & demo2 >2 & while [[ $( jobs -p ) ]] ;do cat [12] ; done
[16:30:28] <shbot> xmb: [1] 51
[16:30:28] <shbot> xmb: [2] 52
[16:30:28] <shbot> xmb: and so forth... (but now the pastebin is sick of me)
[16:33:33] <xmb> # demo1() { sleep .5 ; echo one ; } ; demo2() { sleep 2 ; echo two ; } ; exec 2>/dev/null ; demo1 >1 & demo2 >2 & while [[ $( jobs -p ) ]] ; do oriintf \\ec ; cat [12] ; sleep .75 ; done
[16:33:43] <shbot> xmb: one
[16:33:43] <shbot> xmb: one
[16:33:43] <shbot> xmb: etc... ( http://ix.io/3QUx )
[16:34:44] *** Quits: drd (~drd@93-42-66-75.ip85.fastwebnet.it) (Ping timeout: 272 seconds)
[16:39:07] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[16:40:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:42:30] <Helmholtz> xmb, x="";y=""; task1() {x=3}; task2() {y=7}
[16:42:46] <Helmholtz> task1() & task2()& ...task3 needs x and y...are they set?
[16:43:03] <Helmholtz> considering before task3, we `wait`
[16:45:44] <tirnanog> !wait-n > Helmholtz
[16:45:44] <greybot> Helmholtz: Run up to 5 processes in parallel (bash 4.3): i=0 j=5; for elem in "${array[@]}"; do (( i++ < j )) || wait -n; my_job "$elem" & done; wait
[16:46:48] <Helmholtz> tirnanog, but what's wrong with my simple solution?
[16:47:07] <furrymcgee> # exec 3< <(task 2>&1) ; cat <&3 # this waits?
[16:47:09] <shbot> furrymcgee: bash: task: command not found
[16:48:04] <tirnanog> Helmholtz: I didn't see any solution on your part, only a question.
[16:48:56] <Helmholtz> tirnanog, `x="";y=""; task1() {x=3}; task2() {y=7}; wait; task3{echo "$x" "$y"}`
[16:49:01] <Helmholtz> task3
[16:49:28] <emanuele6> # x="";y=""; task1() {x=3}; task2() {y=7}; wait; task3{echo "$x" "$y"}
[16:49:30] <shbot> emanuele6: bash: syntax error near unexpected token `{x=3}'
[16:49:33] <Helmholtz> ah dammit...I post a pastebin
[16:49:37] <tirnanog> there's no parallelisation going on there.
[16:49:49] <emanuele6> and it's not even valid code
[16:50:07] <emanuele6> and <Helmholtz > task1() & task2()& ...task3 needs x and y...are they set?   is not valid either
[16:50:28] <tirnanog> wait doesn't wait indefinitely, by the way. that statement was mistaken. it does, however, wait for all jobs (unlike wait -n).
[16:51:04] *** Joins: drd (~drd@2001:b07:a70:9f1f:7c59:9868:ca2f:aa81)
[16:51:11] <tirnanog> so, sleep 5 & sleep 10 & wait would take roughly 10 seconds before concluding.
[16:52:05] <tirnanog> ok, I suppose you could say that's indefinite in practical terms, but you know what I mean.
[16:52:57] <Helmholtz> https://dpaste.com/FUKN6VWF8
[16:53:02] *** Quits: drbeco (~beco@2804:351c:dd01:f000:a19e:a89a:e0cb:cec7) (Quit: Leaving)
[16:53:41] <Helmholtz> If I do it without &s and wait (aka sequanetially) it would print 3
[16:53:49] <Helmholtz> but with the pasted code, it prints 0
[16:54:15] <emanuele6> you are expecting task1 and task2 to set the values of x and y?
[16:54:21] <emanuele6> that won't work.
[16:54:23] <emanuele6> !subshell
[16:54:23] <greybot> http://mywiki.wooledge.org/SubShell
[16:54:42] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:dd10:779a:8f5a:8f40)
[16:54:42] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:dd10:779a:8f5a:8f40) (Changing host)
[16:54:42] *** Joins: skapata (~Skapata@user/skapata)
[16:54:42] <emanuele6> you are running task1 and task2 in subshells
[16:55:25] <tirnanog> the question is, how does this shortcoming apply to the problem that you have? you vaguely talked about curling some links. the applicability is not immediately obvious.
[16:55:51] <Helmholtz> tirnanog, I provided this as an example
[16:55:56] <Helmholtz> my task does do curl
[16:56:10] <tirnanog> ok
[16:56:19] <Earnestly> Hum.  Can pax dump content of archive member in -r read mode to stdout?
[16:56:33] <Earnestly> This seems not possible
[16:57:08] <Earnestly> Whereas tar -Oxf - is fairly defacto
[16:57:30] <tirnanog> I don't think it's possible.
[16:57:53] <Earnestly> Funnily enough, or perhaps not surprising, tar can be used to read pax archives
[16:58:00] <Earnestly> (tar being GNU tar and BSD tar)
[16:58:28] <tirnanog> yes. meanwhile, popular implementations of pax - at least in the linux world - couldn't even created valid pax archives for a long time. funny old world.
[16:58:49] <Earnestly> The only one I'm aware of is netbsd pax
[16:58:54] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[16:59:13] <Earnestly> cpio is probably more defacto than pax lol
[16:59:13] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[16:59:31] <tirnanog> yes. pax failed pretty hard.
[17:00:06] <Earnestly> Which is a shame, it's really nice
[17:00:16] <tirnanog> yeah, it is.
[17:00:52] <tirnanog> I would add that gnu tar used not to create POSIX.1-2001 archives by default but it seems to now.
[17:01:21] <Helmholtz> emanuele6, so any neat way so the subshell can mutate the parent's global var?
[17:01:29] <Earnestly> Ooh, heirloom has a pax
[17:01:30] <tirnanog> no.
[17:01:33] <emanuele6> no.
[17:01:52] <Earnestly> heirloom doctools is really pretty
[17:01:55] <tirnanog> I mean, you would have to implement some form of IPC. writing to a fifo, for instance.
[17:02:16] <tirnanog> or a tempfile for subsequent reading.
[17:02:53] <tirnanog> Earnestly: heirloom pax was missing one posix-defined option, last I checked.
[17:02:56] <emanuele6> you need to communicate with the main shell, you can't just modify its state
[17:03:00] * Earnestly has been faffing about with typesetters.  sile is extremely nice, but seemingly has pretty awkward handling for embedded images and such
[17:03:04] <tirnanog> Earnestly: I'e forgotten which one though. it was ages ago.
[17:03:07] <Earnestly> Hm
[17:03:24] <tirnanog> but, also, check the format it produces.
[17:03:49] <tirnanog> some of the implementations don't even product the POSIX.1-2001 (pax) format to begin with, which is ridiculous.
[17:03:55] <tirnanog> produce, sorry.
[17:03:57] *** Joins: mitrokov (~mitrokov@77.222.63.216)
[17:06:05] <Earnestly> cpio operates similarly, and is pretty common
[17:06:05] *** Joins: zouhair (~zouhair@lnsm1-montreal01-142-122-44-148.internet.virginmobile.ca)
[17:06:17] <Earnestly> tirnanog: pax even has -0 lol
[17:06:33] <Earnestly> Sorry, posix pax doesn't even have -0
[17:06:39] <Guest56366> couldn't p1 and p2 write to p3 which starts something when it gets all values? (in that case)
[17:06:46] <tirnanog> Earnestly: right. an opportunity missed.
[17:06:53] <Earnestly> Not much point really, tar will do
[17:07:09] <Earnestly> Unless there is something even better
[17:07:24] <Earnestly> tirnanog: I made my own archiver thing in bash, called wax.  It was a laugh
[17:07:32] <tirnanog> nice name.
[17:07:44] <Earnestly> tirnanog: https://0x0.st/oKDQ.sh
[17:08:13] <Earnestly> Not a good idea, lack of nul support makes it terrible
[17:08:16] <Earnestly> Used ASCII separators
[17:09:03] <Earnestly> Hmmmm.
[17:09:06] <tirnanog> Guest56366: if a fifo were involved, potentially. using tmpfiles would be much easier for your example.
[17:09:12] <Earnestly> Could even just go full casync
[17:09:36] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[17:09:43] <Guest56366> those would persist and screw all up
[17:09:53] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[17:10:19] <tirnanog> oh, you're not Helmholtz. but anyway.
[17:10:24] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[17:10:34] <furrymcgee> bash --rcfile <(export)
[17:10:38] <tirnanog> anyway, I'm not sure what you mean by persist and screw all up.
[17:10:53] *** Joins: fef (~thedawn@user/thedawn)
[17:11:15] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[17:11:25] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[17:11:43] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[17:11:56] <tirnanog> a simple exit trap may be used to clean up an array of tempfiles.
[17:11:56] *** Quits: Ad1Tech_IT (~Ad1Tech@static.248.64.63.178.clients.your-server.de) (Read error: Connection reset by peer)
[17:12:19] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[17:12:27] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[17:12:35] <Guest56366> can u make an 1 line example
[17:12:43] <Guest56366> or 2
[17:12:45] *** Quits: tercaL (~tercaL@user/tercal) (Quit: halt -p)
[17:12:45] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[17:12:57] <Guest56366> or 5
[17:13:13] *** Joins: drbeco (~beco@2804:351c:dd01:f000:a19e:a89a:e0cb:cec7)
[17:13:20] *** Joins: Ad1Tech_IT (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl)
[17:13:34] <Earnestly> I love me some tempfiles, they are my memory and my structured data
[17:13:45] <Earnestly> Also it has permissions, which is nice
[17:14:06] <Earnestly> casync does not take files, it takes directories.  Hrmph.
[17:14:10] <gnoo> Guest56366: trap 'rm -rf -- "${tmpfiles[@]}"' EXIT
[17:14:37] <Earnestly> gnoo: Use a directory and place all files under it.  Then you need only rm the directory
[17:14:58] <Guest56366> gnoo: thank you.
[17:15:15] <tirnanog> # trap 'rm -f "${tmpfiles[@]}"' EXIT; tmpfiles=(tmp1 tmp2); p1() { echo 1 > "${tmpfiles[0]}"; }; p2() { echo 3 > "${tmpfiles[1]}"; }; p3() { read -r x <"${tmpfiles[0]}"; read -r y < "${tmpfiles[1]}"; echo $((x + y)); }; p1 & p2 & wait; p3
[17:15:16] <gnoo> Earnestly: thanks!
[17:15:18] <shbot> tirnanog: [1] 52
[17:15:18] <shbot> tirnanog: [2] 53
[17:15:18] <shbot> tirnanog: and so forth... (but now the pastebin is sick of me)
[17:15:19] <Earnestly> mkdir /tmp/buf <=> char buf[];
[17:15:21] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 245 seconds)
[17:15:22] <tirnanog> grr.
[17:15:22] <xmb> helmholtz u need dependencies coded in, ..
[17:15:27] <Guest56366> :)
[17:15:33] <Guest56366> ty.
[17:15:36] <tirnanog> anyway, try that in your own shell.
[17:15:43] <tirnanog> and yeah, a tempory directory could be neater.
[17:15:52] <Earnestly> gnoo: I try to make the agreement between myself and the computer as simple as possible
[17:16:18] <gnoo> yup, a directory is much simpler than an array of files
[17:16:29] <xmb> Helmholtz, u cannot accomplish this using var=value, but u need the ouput of curl i guess
[17:16:50] <tirnanog> xmb: he wouldn't say, which is a problem.
[17:17:07] <xmb> hm prolly so then
[17:17:26] <Helmholtz> ok here is what I did
[17:17:41] <Helmholtz> I just `printf`ed each tasks output and catch it in parent script
[17:17:46] <Helmholtz> read -r my_var < <(task1) &
[17:17:50] <Helmholtz> like that
[17:18:00] <xmb> hm
[17:18:14] <emanuele6> what does that accomplish?
[17:18:17] <xmb> lemme make a version with output files
[17:18:19] <tirnanog> nothing.
[17:18:39] <Helmholtz> my problem was subshell
[17:18:49] <tirnanog> and still will be.
[17:19:03] <emanuele6> so to "solve it" you added a second subshell inside the subshell?
[17:19:31] <Earnestly> tirnanog: heh, casync of a directory "compressed" from 532K to 32K
[17:19:35] <tirnanog> # bash -c 'read -r var < <(echo 1); declare -p var'
[17:19:37] <shbot> tirnanog: declare -- var="1"
[17:19:41] <tirnanog> # bash -c 'read -r var < <(echo 1) & wait; declare -p var'
[17:19:43] <shbot> tirnanog: bash: line 1: declare: var: not found
[17:19:58] <tirnanog> you can't just 'trick' bash into doing what you want.
[17:19:58] <Earnestly> tirnanog: And then zstd drops it to 11K
[17:20:29] <tirnanog> Earnestly: ah. I hadn't heard of casync prior.
[17:20:34] <Earnestly> So a little more than casync
[17:20:41] <Earnestly> Hm
[17:20:46] <Earnestly> tar*
[17:20:51] <Earnestly> tar produces 9.8K
[17:21:07] <Helmholtz> tirnanog, you are right it still doesn't wokr
[17:21:21] <tirnanog> that's why it wasn't presented as a solution ;)
[17:21:25] <Earnestly> tirnanog: I love me some CAS
[17:23:39] <xmb> what was the modifier to preserve -A arrays in declaring ?
[17:23:58] <xmb> eg, declare -A copy=( "${arr[@]@<what>}" )
[17:24:26] <xmb> its K
[17:26:13] <furrymcgee> the trick is to read after the write
[17:27:59] <emanuele6> doesn't that @K trick require eval?
[17:28:04] <emanuele6> or do i remember wrong?
[17:28:26] <tirnanog> I think you're right.
[17:28:30] <furrymcgee> # exec 3< <( echo 3) ; read -u3 p ; declare -p p
[17:28:31] <shbot> furrymcgee: declare -- p="3"
[17:29:22] *** Joins: skapata (~Skapata@user/skapata)
[17:29:24] <emanuele6> # declare -A x=( [hi]=123 [b]=euiwqo ); declare -A copy=( "${x[@]@K}" ); declare -p x copy
[17:29:26] <shbot> emanuele6: declare -A x=([b]="euiwqo" [hi]="123" )
[17:29:26] <shbot> emanuele6: declare -A copy=(["b \"euiwqo\" hi \"123\" "]="" )
[17:29:29] <emanuele6> yeah
[17:29:45] <emanuele6> # declare -A x=( [hi]=123 [b]=euiwqo ); eval "declare -A copy=( ${x[@]@K} )"; declare -p x copy
[17:29:46] <shbot> emanuele6: declare -A x=([b]="euiwqo" [hi]="123" )
[17:29:46] <shbot> emanuele6: declare -A copy=([b]="euiwqo" [hi]="123" )
[17:30:17] *** Quits: Agiofws (~Agiofws@178-147-226-132.haap.dm.cosmote.net) (Ping timeout: 256 seconds)
[17:30:44] <Earnestly> Well that was fun, casync is neat
[17:31:05] <Earnestly> Here is more active/complete go version: https://github.com/folbricht/desync
[17:35:06] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[17:35:07] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[17:36:27] *** Quits: PeGaSuS (WeeChat@user/pegasus) (Remote host closed the connection)
[17:36:52] *** Joins: martinus__ (~martin@15.59.202.77.rev.sfr.net)
[17:36:58] <xmb> # declare -A left=foo done[${j[${J[$left]}]}]=
[17:37:00] <shbot> xmb: bash: done[]: bad array subscript
[17:38:35] <xmb> depthread: line 19: 26137 "1" 26138 "2": syntax error: invalid arithmetic operator (error token is ""1" 26138 "2"")
[17:38:52] <xmb> http://ix.io/3QUE
[17:39:15] <geirha> # declare -A x=( [hi]=123 [b]=euiwqo ); declare -A "copy=( ${x[@]@K} )"; declare -p x copy
[17:39:17] <shbot> geirha: declare -A x=([b]="euiwqo" [hi]="123" )
[17:39:17] <shbot> geirha: declare -A copy=([b]="euiwqo" [hi]="123" )
[17:39:33] <xmb> i did so in the script pasted
[17:39:44] <xmb> i fixed the error i think
[17:40:36] *** Joins: PeGaSuS (WeeChat@user/pegasus)
[17:43:22] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[17:44:00] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[17:44:03] *** Quits: drbeco (~beco@2804:351c:dd01:f000:a19e:a89a:e0cb:cec7) (Quit: Leaving)
[17:44:32] *** Joins: drbeco (~beco@2804:351c:dd01:f000:a19e:a89a:e0cb:cec7)
[17:45:36] *** Quits: drbeco (~beco@2804:351c:dd01:f000:a19e:a89a:e0cb:cec7) (Remote host closed the connection)
[17:46:33] *** Joins: fef (~thedawn@user/thedawn)
[17:47:32] *** Joins: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net)
[17:52:50] <emanuele6> geirha: oh, right
[17:53:54] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 272 seconds)
[17:59:10] *** Quits: rampart (~rampart@2.sub-174-250-16.myvzw.com) (Remote host closed the connection)
[18:00:00] *** Joins: rampart (~rampart@2.sub-174-250-16.myvzw.com)
[18:02:52] *** Joins: sinaowolabi (~SinaOwola@41.58.239.156)
[18:07:46] <xmb> Helmholtz, this works: filename 'depthread2'   http://ix.io/3QUN
[18:07:57] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[18:08:34] <xmb> in short summarized.. u dont need this complicated code, u stack up & and $! to array, then wait for em all, or specific ones, then spawn there
[18:09:45] <xmb> but yea u need file management and such as a reader, like i did
[18:09:58] *** Joins: drbeco (~beco@2804:351c:dd01:f000:c3d0:abfe:ba01:7c9c)
[18:10:05] <xmb> i suggest u to try my script, it will reset the view to newest each .75s
[18:10:54] *** Quits: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net) (Ping timeout: 260 seconds)
[18:11:01] *** Quits: bluedust (~bluedust@103.148.21.74) (Ping timeout: 240 seconds)
[18:11:36] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Ping timeout: 245 seconds)
[18:11:55] <xmb> lemme clean up a bit
[18:12:13] *** Quits: mitrokov (~mitrokov@77.222.63.216) (Ping timeout: 256 seconds)
[18:12:49] *** Joins: iconoclasthero_ (~quassel@pool-68-238-241-198.phlapa.fios.verizon.net)
[18:12:53] <xmb> Helmholtz, http://ix.io/3QUQ
[18:12:54] <checkbot> xmb: I think the problem is on line 10. eval negates the benefit of arrays. Drop eval to preserve whitespace/symbols (or eval as string). See 9 issues on https://shellcheck.net/?id=cb72974
[18:12:54] *** Quits: iconoclasthero (~quassel@pool-68-238-241-198.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[18:15:13] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[18:15:21] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[18:15:47] <xmb> but u have to fiddle probably in the end the cd to tmp dir away
[18:15:53] <xmb> i made that for easy >file and cat usage
[18:16:17] *** Quits: sinaowolabi (~SinaOwola@41.58.239.156) (Read error: Connection reset by peer)
[18:16:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[18:18:25] <furrymcgee> ???
[18:19:09] *** Joins: wurstwasser (~frank.hol@2001:a61:3491:4301:3ca3:7076:aa9b:3b0a)
[18:19:35] *** Quits: noent (~quassel@user/sven/x-0967695) (Quit: noent)
[18:19:46] *** Joins: son0p (~ff@181.136.122.143)
[18:19:57] *** Joins: noent (~quassel@squint.a-oben.org)
[18:19:57] *** Quits: noent (~quassel@squint.a-oben.org) (Changing host)
[18:19:57] *** Joins: noent (~quassel@user/sven/x-0967695)
[18:20:28] *** Joins: sinaowolabi (~SinaOwola@41.58.239.156)
[18:21:03] <xmb> ? i code for fun cmds for ppl here since ever, whenever im in or not
[18:21:14] *** Quits: sinaowolabi (~SinaOwola@41.58.239.156) (Max SendQ exceeded)
[18:22:41] *** Joins: sinaowolabi (~SinaOwola@41.58.239.156)
[18:25:57] <furrymcgee> a simple task needs a simple solution
[18:26:24] <xmb> thats the one, my last link
[18:26:26] *** Joins: sinaowolabi__ (~SinaOwola@41.58.239.156)
[18:26:50] <xmb> a to file in background, a reader, and wait for groups
[18:27:49] *** Quits: drbeco (~beco@2804:351c:dd01:f000:c3d0:abfe:ba01:7c9c) (Remote host closed the connection)
[18:27:54] *** Quits: noent (~quassel@user/sven/x-0967695) (Quit: noent)
[18:28:06] *** Joins: noent (~quassel@squint.a-oben.org)
[18:28:06] *** Quits: noent (~quassel@squint.a-oben.org) (Changing host)
[18:28:06] *** Joins: noent (~quassel@user/sven/x-0967695)
[18:28:08] *** Joins: drbeco (~beco@2804:351c:dd02:6800:8a6d:70bc:984:398e)
[18:28:38] *** Quits: jwash (~jwash@c-73-254-46-148.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[18:28:38] *** Quits: drd (~drd@2001:b07:a70:9f1f:7c59:9868:ca2f:aa81) (Ping timeout: 252 seconds)
[18:29:43] *** Joins: fef (~thedawn@user/thedawn)
[18:30:06] *** Quits: noent (~quassel@user/sven/x-0967695) (Client Quit)
[18:30:19] *** Joins: noent (~quassel@user/sven/x-0967695)
[18:30:37] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[18:30:51] <furrymcgee> it bloated with random @!$
[18:31:01] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[18:31:53] <xmb> the last link ?
[18:32:07] <xmb> a bit indeed
[18:32:33] *** Joins: jwash (~jwash@c-73-254-46-148.hsd1.wa.comcast.net)
[18:37:40] *** Joins: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com)
[18:37:48] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:3df8:cd30:3e5c:fc25)
[18:38:33] *** Quits: noent (~quassel@user/sven/x-0967695) (Quit: noent)
[18:39:00] <xmb> http://ix.io/3QV2 .. contains ls -c usage
[18:39:34] <xmb> and no tmpdir
[18:39:38] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:43:17] *** Joins: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net)
[18:44:49] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[18:48:13] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[18:50:09] *** Quits: drbeco (~beco@2804:351c:dd02:6800:8a6d:70bc:984:398e) (Quit: Leaving)
[18:52:50] <furrymcgee> how do you poll(2) in bash?
[18:53:09] <xmb> you sleep loop there is no poll
[18:53:21] <xmb> excepts there is a feature like 'wait -n' for it
[18:53:27] <xmb> else u have to some .c and have it
[18:53:52] *** Joins: _Ad1Tech_ (~Ad1Tech@h104101.man.tk-internet.pl)
[18:54:27] *** Quits: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net) (Ping timeout: 256 seconds)
[18:55:38] <Earnestly> furrymcgee: Use blocking IO
[18:56:24] *** Quits: arc_09 (~arc_09@2a02:a31d:803d:6700:44ff:18a9:e2b1:903c) (Quit: Leaving)
[18:56:43] *** Quits: Ad1Tech_IT (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl) (Ping timeout: 256 seconds)
[18:56:49] <furrymcgee> read -t0?
[18:57:09] <Earnestly> No
[18:57:16] *** Joins: noent (~quassel@squint.a-oben.org)
[18:57:16] *** Quits: noent (~quassel@squint.a-oben.org) (Changing host)
[18:57:16] *** Joins: noent (~quassel@user/sven/x-0967695)
[18:58:29] *** Quits: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[19:01:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[19:01:18] *** Quits: martinus__ (~martin@15.59.202.77.rev.sfr.net) (Ping timeout: 260 seconds)
[19:03:02] *** Joins: bluedust (~bluedust@103.148.21.74)
[19:04:28] *** Joins: drbeco (~beco@2804:351c:dd02:6800:c024:382c:90ec:dcb6)
[19:06:44] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Ping timeout: 272 seconds)
[19:08:53] *** Quits: fatal (~0x00@user/fatal) (Remote host closed the connection)
[19:09:08] *** Joins: fatal (~0x00@user/fatal)
[19:10:35] *** Quits: sinaowolabi__ (~SinaOwola@41.58.239.156) (Ping timeout: 256 seconds)
[19:10:36] *** Quits: sinaowolabi (~SinaOwola@41.58.239.156) (Ping timeout: 240 seconds)
[19:13:32] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[19:14:23] *** Joins: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net)
[19:18:03] *** Joins: Dotz0cat (~Dotz0cat@h161.215.213.151.dynamic.ip.windstream.net)
[19:18:59] *** Joins: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de)
[19:22:10] *** Joins: mongy (~mongy@user/mongy)
[19:28:10] *** Joins: dreamon (~dreamon@pd95035d1.dip0.t-ipconnect.de)
[19:32:24] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[19:32:35] *** Quits: nehsou^ (~nehsou@50-202-219-146-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[19:33:16] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[19:33:30] *** Joins: drd (~drd@2001:b07:a70:9f1f:7c59:9868:ca2f:aa81)
[19:34:22] *** Joins: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net)
[19:35:40] *** Joins: ejjdhfjsu (~ejjdhfjsu@cmcust2a-84.174.nulinkdigital.com)
[19:40:36] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[19:41:06] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[19:41:56] *** Joins: sinaowolabi (~SinaOwola@41.58.61.107)
[19:42:56] *** Joins: goldfish (~goldfish@user/goldfish)
[19:43:11] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:43:24] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[19:43:52] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[19:43:59] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[19:45:38] *** Joins: goldfish (~goldfish@user/goldfish)
[19:45:50] <xmb> hey goldfish
[19:46:19] *** Joins: Kyuzo68 (~Kyuzo@host-79-24-234-134.retail.telecomitalia.it)
[19:52:51] *** Quits: fourHZ (~fourHZ@92-52-40-121.dynamic.orange.sk) (Quit: Connection closed)
[19:56:53] *** Joins: junebug (~junebug@2600:1700:3db0:2540:c800:b907:a7af:3732)
[19:59:20] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[20:00:42] *** Joins: richardm645 (~quassel@2600:8801:c507:b200:58de:7cfd:ea7e:7fca)
[20:02:18] *** Quits: Kyuzo68 (~Kyuzo@host-79-24-234-134.retail.telecomitalia.it) (Quit: Konversation terminated!)
[20:02:53] *** Joins: crashrep (~crashrep@user/crashrep)
[20:10:41] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[20:14:29] *** Joins: ferdna (~ferdna@user/ferdna)
[20:16:13] *** Joins: timm (~timm@user/timm)
[20:17:08] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:17:29] *** Quits: timm (~timm@user/timm) (Remote host closed the connection)
[20:17:43] *** Joins: timm (~timm@user/timm)
[20:18:23] *** Joins: fourHZ (~fourHZ@92-52-40-121.dynamic.orange.sk)
[20:18:49] <Earnestly> # printf 'a\t\tc\n' | { read -ra; declare -p REPLY; }
[20:18:51] <shbot> Earnestly: bash: read: -a: option requires an argument
[20:18:51] <shbot> Earnestly: read: usage: read [-ers] [-a array] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name ...]
[20:18:51] <shbot> Earnestly: bash: declare: REPLY: not found
[20:18:57] *** Quits: Dotz0cat (~Dotz0cat@h161.215.213.151.dynamic.ip.windstream.net) (Ping timeout: 240 seconds)
[20:19:02] <Earnestly> # printf 'a\t\tc\n' | { read -ra a; declare -p a; }
[20:19:04] <shbot> Earnestly: declare -a a=([0]="a" [1]="c")
[20:19:18] <Earnestly> # printf 'a\t\tc\n' | { IFS=$'\t' read -ra a; declare -p a; }
[20:19:19] <shbot> Earnestly: declare -a a=([0]="a" [1]="c")
[20:19:25] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[20:19:27] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[20:19:29] <Earnestly> # printf 'a,,c\n' | { IFS=, read -ra a; declare -p a; }
[20:19:31] <shbot> Earnestly: declare -a a=([0]="a" [1]="" [2]="c")
[20:19:33] <Earnestly> Why
[20:19:45] <xmb> hahuhi
[20:20:05] <xmb> post it to the mailing list too i suggest
[20:20:59] <xmb> oh its more minor than i thought
[20:21:41] *** Quits: karabaja4 (~karabaja4@dh207-95-76.xnet.hr) (Remote host closed the connection)
[20:21:42] <xmb> # mapfile -t -d $'\t' a < <( printf %s\\t a '' '' b ) ; declare -p a
[20:21:43] <shbot> xmb: declare -a a=([0]="a" [1]="" [2]="" [3]="b")
[20:21:51] <xmb> at least mapfile works correct
[20:23:10] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[20:23:46] <Earnestly> It's even more interesting:
[20:24:50] <Earnestly> #d printf 'a,,c\n' | { IFS=, read -r a b c; printf '[%s] ' "$a" "$b" "$c"; }; printf 'a\t\tc\n' | { IFS=$(printf '\t') read -r a b c; printf '[%s] ' "$a" "$b" "$c"; }
[20:24:57] <Earnestly> d# printf 'a,,c\n' | { IFS=, read -r a b c; printf '[%s] ' "$a" "$b" "$c"; }; printf 'a\t\tc\n' | { IFS=$(printf '\t') read -r a b c; printf '[%s] ' "$a" "$b" "$c"; }
[20:24:59] <shbot> Earnestly: [a] [] [c] [a] [c] []
[20:25:04] <Earnestly> # printf 'a,,c\n' | { IFS=, read -r a b c; printf '[%s] ' "$a" "$b" "$c"; }; printf 'a\t\tc\n' | { IFS=$(printf '\t') read -r a b c; printf '[%s] ' "$a" "$b" "$c"; }
[20:25:06] <shbot> Earnestly: [a] [] [c] [a] [c] []
[20:25:16] *** Quits: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net) (Ping timeout: 272 seconds)
[20:26:31] <xmb> looks bugged
[20:26:49] <xmb> why does it print the [a].. line only once
[20:27:49] <xmb> i tried the line on term and results the same
[20:28:05] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:29:25] <Earnestly> White space characters get trimmed regardless
[20:33:02] <Earnestly> It's like awk -F ' ' all over again, sigh
[20:33:54] <tirnanog> Earnestly: it's because the word splitting rules say so, with read observing those rules. the details are in the Word Splitting section.
[20:34:31] <Earnestly> Yeah
[20:34:36] <Earnestly> It is annoying
[20:34:41] <tirnanog> yes, it is.
[20:35:36] <Earnestly> This is one of those features which did not stand the test of time; users need the ability to explicitly request trimming (for any split character) instead of trying to indirectly get the desired result, e.g. awk -F '[ ]'
[20:37:01] *** timm is now known as f00
[20:39:23] <xmb> will u report it to the bash mailing list or shall i, earnestly
[20:40:07] <Earnestly> It's not a bug
[20:40:11] <emanuele6> it is not a bug
[20:40:20] <xmb> hmm ?
[20:40:32] <xmb> oh
[20:40:36] <xmb> i misread something, lemme reread
[20:40:48] <emanuele6> https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05
[20:40:51] <emanuele6> it's posix behaviour
[20:42:24] <xmb> i guess a IFS=$'\t' is a 'IFS white space' and gets trimmed then .. ? that ?
[20:42:49] *** Quits: magla (~gelignite@d5364c1c.access.ecotel.net) (Quit: Stay safe!)
[20:43:31] *** Quits: yustin (~yustin@user/yustin) (Ping timeout: 256 seconds)
[20:43:44] *** Quits: l4s8g_ (~l4s8g@2a02:908:1a72:c7c0::cb3f) (Quit: l4s8g_)
[20:45:56] <emanuele6> why are you reading the "otherwise" section?
[20:46:21] <emanuele6> oh, it says AND, not OR in the first step
[20:46:35] *** Quits: bluedust (~bluedust@103.148.21.74) (Remote host closed the connection)
[20:46:36] <xmb> dunno :)
[20:47:17] <emanuele6> Each occurrence in the input of an IFS character that is not IFS white space, along with any adjacent IFS white space, shall delimit a field, as described previously.
[20:47:21] <emanuele6> Non-zero-length IFS white space shall delimit a field.
[20:47:59] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 268 seconds)
[20:48:04] <emanuele6> so IFS character that are IFS white space (<space> or <tab>) in sequence count as a single delimiter, not as multiple
[20:48:28] <emanuele6> that is the same for regular word splitting
[20:48:37] *** Joins: Guest9674 (~Guest@host151.190-137-36.telecom.net.ar)
[20:48:48] <xmb> IFS=$'\t' read -ra a < <( printf 'a  \t\tb' ) ; declare -p a
[20:48:53] <xmb> # IFS=$'\t' read -ra a < <( printf 'a  \t\tb' ) ; declare -p a
[20:48:54] <shbot> xmb: declare -a a=([0]="a  " [1]="b")
[20:48:59] <xmb> hm
[20:49:02] <emanuele6> # a=,a,,b,c,d,; IFS=,; set -x; : $a
[20:49:04] <shbot> emanuele6: + : '' a '' b c d
[20:49:18] <emanuele6> # a=' a  b c d '; IFS=' '; set -x; : $a
[20:49:19] <shbot> emanuele6: + : a b c d
[20:50:30] <xmb> # a=$'a  \t\t   b' IFS=$'\t' : set -x ; : $a
[20:50:31] <shbot> xmb: no output
[20:51:31] <xmb> .. no idea
[20:51:36] <emanuele6> xmb: you used a : instead of a ;
[20:51:46] *** Joins: royal1 (~royal122@123.201.171.96)
[20:51:49] <emanuele6> # a=$'a  \t\t   b' IFS=$'\t' ; set -x ; : $a
[20:51:50] <shbot> emanuele6: + : 'a  ' '   b'
[20:52:08] <xmb> i see, sorry, thanks
[20:52:57] *** Joins: zebrag (~chris@user/zebrag)
[20:53:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[20:53:30] *** Joins: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:54:42] *** Joins: igemnace (~ian@user/igemnace)
[20:54:47] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:57:15] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Quit: Client closed)
[21:00:44] *** Joins: ChmEarl (~chmearl@user/chmearl)
[21:02:26] *** Quits: royal1 (~royal122@123.201.171.96) (Ping timeout: 245 seconds)
[21:04:50] *** Joins: Hercules (~Hercules@user/hercules)
[21:09:31] *** Quits: drd (~drd@2001:b07:a70:9f1f:7c59:9868:ca2f:aa81) (Ping timeout: 245 seconds)
[21:10:04] *** Joins: john_johnk (~Thunderbi@102.178.207.77.rev.sfr.net)
[21:10:27] *** Quits: iliv (~iliv@user/iliv) (Ping timeout: 256 seconds)
[21:10:49] *** Joins: martinus__ (~martin@15.59.202.77.rev.sfr.net)
[21:11:36] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[21:14:57] *** Joins: arinov_ (~arinov@213.194.126.155)
[21:15:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[21:17:05] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[21:17:38] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[21:18:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:22:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[21:23:45] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:25:45] *** Quits: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com) (Ping timeout: 256 seconds)
[21:32:27] *** Joins: iliv (~iliv@93-77-147-152.lvv.volia.net)
[21:41:55] *** Joins: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[21:42:03] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[21:44:08] *** Quits: altNick1 (~ident@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[21:45:00] *** Joins: w1r3d (~w1r3d@user/w1r3d)
[21:46:05] *** Joins: seninha (~chatzilla@user/seninha)
[21:47:28] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:dd10:779a:8f5a:8f40)
[21:47:28] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:dd10:779a:8f5a:8f40) (Changing host)
[21:47:28] *** Joins: skapata (~Skapata@user/skapata)
[21:48:57] *** Quits: yac (~user@user/yac) (Ping timeout: 240 seconds)
[21:49:09] *** Quits: junebug (~junebug@2600:1700:3db0:2540:c800:b907:a7af:3732) (Remote host closed the connection)
[21:49:34] *** Joins: junebug (~junebug@2600:1700:3db0:2540:b54b:f8c3:ed3a:ac59)
[21:51:18] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[21:51:36] *** Joins: SCL87 (~user@2a02:908:4c25:1220:e4e2:22f:d836:e91b)
[21:53:29] <SCL87> hello there
[21:53:31] <xmb> in the scenario i open 250 new rxvt's with bash, no input, how to kill em properly, killall bash ? i chosen bash here rather as i gotta fix this for bash scripts
[21:53:33] <xmb> hi
[21:54:36] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:3df8:cd30:3e5c:fc25) (Quit: CodePoint)
[21:54:48] <xmb> is a kill equivalent to a logout cmd ? two kills make a bash killed if jobs are running
[21:54:52] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[21:55:17] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[21:55:35] *** Quits: junebug (~junebug@2600:1700:3db0:2540:b54b:f8c3:ed3a:ac59) (Ping timeout: 250 seconds)
[21:56:03] <emanuele6> logout is like exit, not like kill.
[21:57:09] <xmb> and so.. how to porperly kill -i shells
[21:57:48] <emanuele6> what does that mean?
[21:58:21] <xmb> i tried kill $$, it doesnt kill anything
[21:58:25] <geirha> I think he means how to kill only interactive shells
[21:58:27] <SCL87> You want to kill the process of the shell?
[21:58:28] <xmb> i know kill -9 will work but
[21:58:34] <geirha> interactive bash ignores sigterm by default
[21:59:21] *** Joins: drd (~drd@2001:b07:a70:9f1f:7c59:9868:ca2f:aa81)
[21:59:23] <xmb> i want to kill say a selection of interactive shells, say the criteria is not important so killall bash was my first, i didnt try tho
[21:59:28] *** Joins: gl0woo (~gl0woozzz@phobos.whatbox.ca)
[21:59:55] <geirha> that will likely kill bash running scripts as well
[22:00:00] <xmb> yep
[22:00:09] <xmb> and not criteria of 'few seconds old' met
[22:00:52] <xmb> i dont like killall bash, .. i gotta find a better way... what about bash -l awk grep
[22:01:24] <xmb> hm there is only 'bash' in ps showing on rxvt default
[22:01:57] <xmb> maybe i should setsid rxvt or inside rxvt -e setsid bash -l
[22:02:09] <geirha> this is a one-off job, right? not something you intend to put in a script?
[22:02:14] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[22:02:24] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[22:02:28] <xmb> erm, i planned for a script, as it would happen more and more and then id need it
[22:02:46] *** Quits: w1r3d (~w1r3d@user/w1r3d) (Remote host closed the connection)
[22:02:56] <xmb> i now dont wanna test many windows due to i predict me too many fails, but when the script is finished then its easy to use
[22:03:04] *** Joins: magla (~gelignite@d5364c1c.access.ecotel.net)
[22:03:06] <geirha> you could iterate /proc/*/ and parse cmdline and environ; perhaps also some other files in there, to decide whether to kill or not
[22:03:07] <xmb> ( hey i code it .. )
[22:03:09] *** Joins: w1r3d (~w1r3d@user/w1r3d)
[22:03:16] <xmb> that sounds good
[22:03:32] <xmb> ill awk the parsing
[22:03:41] <xmb> u know which file to check for oldness of the process
[22:05:10] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[22:05:27] <xmb> is kill -7 bus error ? should i kill -9 all pids then
[22:05:56] <geirha> man proc
[22:05:59] <xmb> i think killing rxvt is enough not bash then will quit bash
[22:06:01] <xmb> k
[22:06:46] <xmb> still dunno heh, hard to see there
[22:08:13] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[22:09:59] <xmb> file stat i guess
[22:10:36] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[22:11:18] <xmb> so i look up in stat, the time somehow, and for criteria i add pgrp function
[22:11:37] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 240 seconds)
[22:12:07] <xmb> then i setsid 250 rxvts and kill em, with either criteria pgroup or time -few seconds
[22:13:35] *** Joins: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[22:14:19] *** Parts: jos1 (~jos3@dyndsl-091-096-035-142.ewe-ip-backbone.de) ()
[22:20:57] *** Joins: larryv (~larryv@zsh/patchmanager/larryv)
[22:22:12] *** Joins: skapata (~Skapata@user/skapata)
[22:24:12] *** Joins: junebug (~junebug@2600:1700:3db0:2540:dc7f:3b1b:9adc:b400)
[22:24:12] *** Joins: Atque (~Atque@user/atque)
[22:24:39] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[22:25:30] *** Quits: Guest9674 (~Guest@host151.190-137-36.telecom.net.ar) (Remote host closed the connection)
[22:26:49] *** Quits: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net) (Quit: Quit)
[22:31:41] *** Quits: fourHZ (~fourHZ@92-52-40-121.dynamic.orange.sk) (Quit: sleep)
[22:32:07] *** Joins: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com)
[22:33:48] *** Joins: yac (~user@user/yac)
[22:34:07] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:35:34] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:3df8:cd30:3e5c:fc25)
[22:35:54] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[22:39:43] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[22:40:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:43:37] *** Joins: malina (~malina@user/malina)
[22:46:35] *** Joins: stealth[] (~stealth]@2001:9e8:36da:c400:477:3762:6e32:dbc7)
[22:47:09] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:cdbf:b436:9743:fee8)
[22:48:05] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[22:49:18] *** Quits: fatal (~0x00@user/fatal) (Remote host closed the connection)
[22:49:38] *** Joins: fatal (~0x00@user/fatal)
[22:50:51] *** Joins: Betal (~Betal@user/betal)
[22:52:36] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 240 seconds)
[22:53:49] *** Joins: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[22:55:33] *** Quits: ormaaj2 (~ormaaj2@user/ormaaj) (Ping timeout: 256 seconds)
[22:58:28] *** Joins: rx_ (~rx@dynamic-046-114-165-003.46.114.pool.telefonica.de)
[23:00:35] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:00:37] *** Quits: Guest56366 (~rx@dynamic-046-114-169-171.46.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[23:01:57] *** Joins: Andrm (~Andrm@190.244.62.157)
[23:03:04] *** Joins: ormaaj2 (~ormaaj2@user/ormaaj)
[23:03:29] *** Joins: Atque (~Atque@user/atque)
[23:06:51] *** Joins: Ad1Tech_IT (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl)
[23:09:43] *** Quits: _Ad1Tech_ (~Ad1Tech@h104101.man.tk-internet.pl) (Ping timeout: 256 seconds)
[23:16:22] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[23:17:30] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[23:17:35] <f00> xmb i'm having fun playing around with your scenario.
[23:17:51] <f00> ps -e f -o pid,start_time,comm | grep -Pzo '\N+rxvt\n(\N+\\_\N+\n)*'
[23:18:03] <xmb> hm nice one lemme test
[23:18:17] <Earnestly> Is there a tool which 'buffers' everything between a pipe?  E.g. foo | buffer-all | bar, where buffer-all is like cat but works like sort
[23:18:33] <xmb> there is stdbuf command which u can say buffer 1 or more
[23:18:47] <xmb> in case it uses stdio.h your app
[23:18:51] <xmb> oh u want sort and cat
[23:18:58] <Earnestly> stdbuf doesn't buffer everything
[23:18:58] <xmb> sort will buffer all
[23:19:00] <OMGOMG> !sponge
[23:19:01] <greybot> sponge() ( tmp=$(mktemp) && cat > "$tmp" && cat -- "$tmp" > "$1" && rm -- "$tmp"; ) # read and write the same file in a pipeline: grep -v '^#' file | sponge file
[23:19:13] <xmb> no but u can maybe set stdbuf io to 1g or so
[23:19:39] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[23:19:43] <xmb> foo | stdbuf -o 9999999 sort | cmd3
[23:19:46] <emanuele6> jq -sRr .
[23:20:02] <Earnestly> OMGOMG: That has the same problem, also I actually would like to avoid tmpfiles in this, because it's decryption data
[23:20:04] <emanuele6> well, `jq -sRj .'
[23:20:09] <Earnestly> Hm, -j yeah
[23:20:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:20:58] *** Joins: tercaL (~tercaL@user/tercal)
[23:20:58] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:21:19] *** Joins: Guest8574 (~Guest@181.95.237.11)
[23:21:47] <xmb> f00, very cool fitting cmd
[23:22:08] *** Quits: LuKaRo (~LuKaRo@p57b157e5.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[23:22:34] <xmb> i gotta look later into it, i prefer awk '<code>' /proc/*/{cmdline,stat}
[23:22:43] <xmb> but it shows right results your thing, good fun i hope
[23:22:56] * f00 happy
[23:23:06] <xmb> :))
[23:23:24] <Earnestly> emanuele6: Ah well it's not that.  foo < file works, but cat file | foo does not
[23:23:46] <tercaL> Hi everyone, hope you're having a great Sunday. I've a bash script fetching an IP list from mysite.com/page1.txt, and outputs the list on terminal, one IP per each line, how to set it like, if the output'd list matches the $IP, execute 2nd command, if not, continue with an another GET request to mysite.com/page2.txt (not page1.txt) until $IP matches?
[23:24:17] <emanuele6> Earnestly: odd
[23:24:25] <Guest8574> must be cat file > foo
[23:24:25] *** Quits: drd (~drd@2001:b07:a70:9f1f:7c59:9868:ca2f:aa81) (Ping timeout: 250 seconds)
[23:24:31] <Earnestly> Go figure
[23:24:37] <emanuele6> it is probably checking that the file is a regular file
[23:24:47] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 256 seconds)
[23:24:48] <emanuele6> it is probably checking that stdin is a regular file
[23:24:54] <Guest8574> if foo is a file too
[23:24:58] <emanuele6> for some reason
[23:25:00] <xmb> while read -r ip ; do [[ ip == *ip* ]] && cmd ; done
[23:25:02] <Guest8574> is meant to be*
[23:25:10] <xmb> while read -r ip ; do if [[ ip == *ip* ]] ; then cmd ; fi ; done
[23:25:15] <xmb> er
[23:25:23] <emanuele6> xmb: you probably mean $ip
[23:25:26] *** Joins: drd (~drd@2001:b07:a70:9f1f:7c59:9868:ca2f:aa81)
[23:25:29] <xmb> while read -r ip ; do if [[ $ip == *ip* ]] ; then cmd ; fi ; done < <( curl -sq url )
[23:25:34] <xmb> yes i meant thank you
[23:25:34] *** Joins: karakedi (~eAC53C340@user/karakedi)
[23:25:50] <xmb> curl -sqL url
[23:25:58] *** Joins: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[23:26:17] <Earnestly> emanuele6: Mucking around with casync and enchive.  casync --what=archive make - somedir | enchive archive > foo.catar.enchive.  From here I would like: enchive extract < foo.catar.enchive | casync mount somepath, but it fails in weird ways.  Can do enchive extract < foo.catar.enchive > foo.catar and then casync mount somepath < foo.catar without issue.  Go figure
[23:26:19] <emanuele6> or maybe it is trying to seek stdin
[23:26:21] <Earnestly> Some race probably, idk
[23:26:54] <Earnestly> casync isn't really maintained or developed
[23:27:00] <xmb> try casync mount somepath < <( cmd )
[23:27:05] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 268 seconds)
[23:27:38] <Earnestly> Same problem as |
[23:27:43] <emanuele6> how is that different from `cmd | casync'? it is still a pipe
[23:27:45] <Earnestly> Failed to seek for stat to /: Illegal seek
[23:27:50] <emanuele6> exactly
[23:27:57] <emanuele6> <emanuele6 > or maybe it is trying to seek stdin
[23:27:59] <Earnestly> And your usual: d?????????  ? ?       ?          ?            ? t/
[23:28:07] <emanuele6> stdin needs to be a regular file so it can be seeked
[23:28:16] <Earnestly> emanuele6: What I think is happening is when it's a file, it checks if stdin is a file and then uses that
[23:28:17] <emanuele6> it probably doesn't support pipe as stdin
[23:28:21] <xmb> it needs a file
[23:28:22] <Earnestly> Which is why < foo works
[23:28:43] <emanuele6> stdin can be used as a regular file if it is a regular file
[23:28:47] <emanuele6> there is no need to check
[23:29:09] <xmb> yes i didnt read newest msges
[23:29:09] <Earnestly> I recall in C needing to do a little more work to detect this
[23:29:40] <emanuele6> no, i am pretty sure you don't need to do anything
[23:29:41] <Earnestly> Such as finding out the file behind the fd, and reopening it
[23:29:49] <emanuele6> fd0 is already a regular file
[23:29:54] <emanuele6> if you run with `< foo'
[23:29:59] <emanuele6> there is no need to reopen
[23:30:07] <Earnestly> Hm
[23:30:59] <emanuele6> it is probably saying to use stdin if no file is provided, but it then assumes the file is a regular file so it tries to seek it
[23:31:19] <Earnestly> Yes
[23:31:32] <Earnestly> # ls /proc/self/fd/0 < .bashrc
[23:31:34] <shbot> Earnestly: /proc/self/fd/0
[23:31:37] <Earnestly> # ls -l /proc/self/fd/0 < .bashrc
[23:31:39] <shbot> Earnestly: lr-x------ 1 root root 64 Feb 27 20:01 /proc/self/fd/0 -> /root/.bashrc
[23:32:10] <Earnestly> emanuele6: And it's not grown the necessary error checks to bail out on this
[23:33:00] <emanuele6> yes, it probably just does file = file ? file : stdin;  and then it uses it as  fseek(file, x, y)  without bothering to check
[23:33:25] <Guest8574> bashrc is a txt file: why don't you use cat?
[23:33:42] <Earnestly> Heh, casync list does: Input is neither a file or directory. Refusing.
[23:33:50] <Guest8574> (I usually use ">"; not familiar with "<")
[23:34:15] <Guest8574> .bashrc*
[23:34:28] <Earnestly> This is no good then
[23:34:31] <Earnestly> tar it is
[23:34:45] <emanuele6> bsdtar ftw
[23:36:23] <larryv> tercaL: how do you determine what your next URL is? do you have an array or something? or are you dynamically generating each URL
[23:36:25] *** Joins: arinov (~arinov@77.67.133.10)
[23:37:47] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[23:37:52] <Earnestly> I appreciate https://github.com/skeeto/passphrase2pgp
[23:38:44] <tercaL> larryv: the last line of the output (catting mysite.com/page1 on terminal) has an line like indicating there is one more URL/page, like /page2
[23:39:28] <Earnestly> Sometimes websites like have .php files which they call to paginate and you can often use that same interface
[23:39:31] <xmb> curl base.url/page{1..200}.txt | grep -Fq ip
[23:39:56] <xmb> is mysite.com actually the url
[23:40:02] <Earnestly> E.g. I very roughly threw together this for geekhack: https://0x0.st/oKne.sh
[23:40:25] <Earnestly> Also curl has wildcard notation so you can use curl .../[1-200]/...
[23:40:39] <Earnestly> E.g. curl understands: "http://example.com/archive[1996-1999]/vol[1-4]/part{a,b,c}.html"
[23:40:53] <xmb> cool
[23:40:58] <xmb> ++
[23:41:30] <tercaL> the worst part is; it's not really "page1", "page2", but completely random hash as URL :(
[23:41:52] <xmb> can u public the url so i can code u the solution ?
[23:41:53] <Earnestly> It might not be random
[23:41:55] <tercaL> so I have to fetch that, to browse and cat through the 2nd page, till there is no.
[23:42:14] <Earnestly> tercaL: Use the inspector and find the headers it's using to make these calls
[23:42:49] <tercaL> xmb: Sure but well, that's Cloudflare API
[23:43:09] <xmb> ehm with your username and pass or is it public
[23:43:16] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:cdbf:b436:9743:fee8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:43:21] <xmb> i mean making a page html available as a paste is a good beginning
[23:43:33] <xmb> there i can extract the info n do the code
[23:43:46] <tercaL> Asked here, but the answer is confusing and he has his *secret* shell script doesn't want to share: https://community.cloudflare.com/t/api-how-to-get-all-items-ips-from-all-pages-within-a-list-currently-getting-a-limited-number/
[23:44:37] <xmb> u have already the curl part ?
[23:44:46] <xmb> or is that also todo to be done
[23:44:56] <tercaL> xmb: I have it, yeah.
[23:45:02] *** Quits: junebug (~junebug@2600:1700:3db0:2540:dc7f:3b1b:9adc:b400) (Ping timeout: 240 seconds)
[23:45:23] <tercaL> The only problem is, Cloudflare lists 25 IPs per query, and at the end, gives a "cursor" point like; "after": "Zs0S_F2GVyR2K3NaelX1vw2BlRNS7JECc4lmh1psRQ"
[23:45:36] <xmb> and is that a url or is that more hidden code
[23:45:42] <xmb> if its a simple url np else it wont work
[23:45:45] <tercaL> and the curl should go through GET /items?cursor=$cursorid ($after thing)
[23:46:01] <xmb> so easy
[23:46:04] <xmb> so
[23:46:15] <tercaL> till there is no after but "before": "q3SIz0NuwsD0S5NC2j1tBRADSeKCzNcPcIeILxeBIxU"
[23:46:49] <xmb> good, paste your these_results bringing code to :   curl -F 'f:1=<-' ix.io
[23:47:05] <xmb> if u dont mind sharing the ips or msg else i dunno
[23:47:16] <xmb> but i gotta know the exact data from 0 to 100 to make parser
[23:47:20] <tercaL> The only problem is, Cloudflare lists 25 IPs per page, I have 5 pages of IPs , trying to get all pages and fetch an IP within the results.
[23:47:55] <xmb> thats a way
[23:47:55] <tercaL> sure
[23:48:01] <xmb> id have done easier, without storing the data
[23:48:08] <xmb> what is your goal, if an ip matches the list
[23:48:09] <xmb> only this ?
[23:48:41] <tercaL> if an IP matches, executing the final command (have it ready too)
[23:48:53] <xmb> k
[23:48:58] <xmb> and if not found no cmd, just exit 1 or so
[23:49:13] <tercaL> the problem is fetching all pages, following each random "after": "Zs0S_F2GVyR2K3NaelX1vw2BlRNS7JECc4lmh1psRQ"s till there is no "after" but "before"
[23:49:15] <xmb> paste me an example curl line u do
[23:49:22] <xmb> yea its no problem mate
[23:49:23] <tercaL> sure
[23:49:50] <larryv> you're fetching JSON but not parsing it as such?
[23:50:07] <tercaL> I have it as output.txt, is there any terminal command to paste it within the terminal?
[23:50:08] <xmb> i, with gawk
[23:50:18] <xmb> i pasted it, the curl to ix.io command
[23:50:35] <tercaL> but what's -F 'f:1=<-'
[23:51:11] <tercaL> curl -F 'f:1=<-' ix.io ?
[23:51:18] <xmb> the 'to post to this' on this url, yes so
[23:51:27] <xmb> try http://ix.io it will show the cmd i got it from there
[23:51:41] <xmb> then sometimes it doesnt return an url its buggy then just retry till u got an url
[23:51:47] <larryv> tercaL: you can use something else if you want. e.g., https://paste.wooledge.org/
[23:52:08] <tercaL> http://ix.io/3QWt
[23:52:46] <xmb> and show the curl command u did to get this, w/o user pass info
[23:53:30] <tercaL> curl -4sX GET "https://api.cloudflare.com/client/v4/accounts/$CF_Acc_ID/rules/lists/$CF_List_ID/items" -H "X-Auth-Email: $CF_Email" -H "X-Auth-Key: $CF_AuthKey" -H "Content-Type: application/json"
[23:53:47] <xmb> okay hold on a minute
[23:54:33] <tercaL> and the "after" part would be let's say, $cursorid, and the curl URL turns to be: curl -4sX GET "https://api.cloudflare.com/client/v4/accounts/$CF_Acc_ID/rules/lists/$CF_List_ID/items?cursor=$cursorid" -H "X-Auth-Email: $CF_Email" -H "X-Auth-Key: $CF_AuthKey" -H "Content-Type: application/json"
[23:54:50] <xmb> okay perfect, sec
[23:54:52] <tercaL> $cursorid=SPej7AqbUxGAgLKI3L9saf45nZMPTURTzimV_E8c
[23:55:27] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[23:55:28] <tercaL> larryv: Well, there's the thing..
[23:55:43] <tercaL> and thanks for https://paste.wooledge.org/ <- really useful it seems. <3
[23:56:26] *** Joins: Kyuzo68 (~Kyuzo@host-79-24-234-134.retail.telecomitalia.it)
[23:56:46] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[23:57:02] *** Quits: sinaowolabi (~SinaOwola@41.58.61.107) (Ping timeout: 240 seconds)
[23:57:43] <tercaL> xmb: And that indicates it reached to the last page (stopping the loop - no more try should be) http://ix.io/3QWB
[23:58:13] <tercaL> no more "after": "..." but "before": "..."
[23:58:44] *** Joins: LuKaRo (~LuKaRo@p57b157e5.dip0.t-ipconnect.de)
