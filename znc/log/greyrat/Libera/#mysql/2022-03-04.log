[00:35:24] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[00:55:29] *** Quits: Dra|n (~Shaaf@186.120.251.229) (Changing host)
[00:55:29] *** Joins: Dra|n (~Shaaf@user/Dran/x-3752239)
[01:46:44] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[02:03:18] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[02:03:38] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:03:41] *** Joins: nickel715 (~nickel715@user/nickel715)
[02:04:01] *** Quits: ueberall (ueberall_l@user/ueberall) (Remote host closed the connection)
[02:04:25] *** Joins: ueberall (~ueberall@user/ueberall)
[02:08:16] *** Server sets mode: +CTcnt 
[02:31:22] *** Quits: mattf (~mattf@li908-138.members.linode.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[02:33:17] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[03:21:51] *** Joins: ferdna (~ferdna@user/ferdna)
[03:51:54] *** Quits: Guest3952 (~vit@chello085216193138.chello.sk) (Ping timeout: 250 seconds)
[04:03:27] *** Joins: coder7of9 (~coder7of9@user/coder7of9)
[04:28:16] <k_sze> Is there a way to configure MySQL server such that it is illegal to not specify a name when adding constraints and indices?
[04:28:32] <k_sze> e.g. I never want to get autogenerated constraint/index names.
[04:31:24] <thumbs> I don't think so
[04:48:35] <Xgc> k_sze: There are a few things that would break if you did that.  But you probably could build your own version to disable that in some way.
[05:04:06] <k_sze> Xgc, is it because MySQL sometimes *needs* to autogenerate indices when I add a foreign key?
[05:12:57] *** Joins: ath28 (~dimi1947@46.198.179.62)
[05:16:57] <Xgc> k_sze: That's one.
[05:17:36] <Xgc> k_sze: Only if you didn't already have a usable index.
[05:17:53] *** Quits: ath28 (~dimi1947@46.198.179.62) (Quit: Leaving)
[05:24:14] <k_sze> Hmm, in that case, how shall I manage schema change across multiple database instances (which *shall* converge)? For instance, I have two databases A and B. I create a foreign key in A, which autogenerates an index. In B, for development reasons, I add an *explicitly named* index that would be equivalent to the autogenerated one in A. Now I want to add the same *explicitly named* index to B, but the equivalent, autogenerated one already exists. Is there
[05:24:14] <k_sze> a way I can write the DDL such that MySQL will add a new index if it doesn't exist or rename an existing, equivalent one to my new name?
[05:25:31] <k_sze> The whole point being that I don't have to go look for an existing, equivalent index myself.
[05:26:09] <k_sze> And I don't have to know the autogenerated name.
[05:30:58] <k_sze> In other words, a way to identify and manipulate indices and foreign keys based on their characteristics, not on any foregone name.
[05:34:49] <thumbs> k_sze: it's relatively easy to create that test case
[05:35:28] <thumbs> create table, create an index without specifying the name, create another table, and add a FK constraint. Then use SHOW CREATE TABLE
[05:43:05] <k_sze> So for instance, using the Sakile sample database: https://dbfiddle.uk/?rdbms=mysql_8.0&sample=sakila&fiddle=89e314a383396c3c0b6a31d972bf34ca
[05:43:21] <k_sze> idx_fk_country_id is autogenerated, right?
[05:44:42] <thumbs> let's create a table and see
[05:50:46] <k_sze> OK, so MySQL will silently rename the existing index if it's completely equivalent: https://dbfiddle.uk/?rdbms=mysql_8.0&sample=sakila&fiddle=3a0d42714131a7886f8d8589543806d6
[05:51:30] <k_sze> Now I need to see what it does in case I add a composite index that already covers the simple index.
[05:52:49] <k_sze> So MySQL also silently replaces the simple index: https://dbfiddle.uk/?rdbms=mysql_8.0&sample=sakila&fiddle=1505ba690c0db2f6206f3edf733ce486
[05:58:06] <thumbs> indeed
[06:00:08] *** Quits: MrTrick (uid181961@id-181961.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[06:01:25] <thumbs> always best to verify your assumptions in those cases
[06:03:18] *** Joins: MrTrick (uid181961@id-181961.uxbridge.irccloud.com)
[06:47:24] *** Quits: Vacuity (~Vacuity@user/vovo) (Ping timeout: 250 seconds)
[06:49:10] *** Joins: Vacuity (~Vacuity@user/vovo)
[06:59:34] *** Quits: coder7of9 (~coder7of9@user/coder7of9) (Quit: Client closed)
[07:40:54] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[08:38:31] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Quit: fBNC - https://bnc4free.com)
[08:51:39] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[09:16:22] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:20:55] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[09:21:09] *** Joins: rvalue (~rvalue@user/rvalue)
[10:58:09] *** Joins: Heartsbane (~heartsban@shell.xmission.com)
[11:31:26] <k_sze> When there's already a UNIQUE KEY index on a column, is a regular index on the same column definitely redundant?
[11:31:31] <k_sze> (InnoDB)
[11:33:18] <doug16k> a non-unique index is a unique index plus something that makes it unique
[11:33:35] <k_sze> Right.
[11:34:03] <doug16k> as if it just concatenated the primary key
[11:36:13] <doug16k> I don't know innodb implementation details though
[11:38:51] <doug16k> if it did do what you said exactly, then the nonunique one would have a prefix that matches the whole unique key, plus waste some space to make sure it is unique, even if that prefix is unique
[11:40:06] <doug16k> if you accidentally have UQ and PK checked in mysqlworkbench it will do that, but it will be a primary key and a unique index that is completely redundantly the same
[11:42:03] <doug16k> I also wish I knew if an (a, b, c) index will be elided if there is another compound (a, b, c, x, y)
[11:43:39] <doug16k> I think not
[11:43:48] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[11:43:49] <doug16k> I think it creates everything you said
[11:44:58] <doug16k> since nobody is jumping in and smashing me over the head about how wrong I am, I have to guess it's right
[11:48:40] <doug16k> you would think that knowing how databases and B+ trees and all that help, but then it is expected that you go study the source of innodb itself. so all possible questions are invalid since an innodb dev would know
[11:58:02] <doug16k> I have been using mysql on RDS for a while, so "unbelievably slow" is what comes to mind when I think of SQL
[11:58:52] <doug16k> hard to worry about indexes when connect is 2000ms
[11:59:38] <Naktibalda> I'm not an expert, but 2s connect should be a network problem
[12:00:12] <doug16k> bad DNS?
[12:00:19] <doug16k> what would it be you think?
[12:00:51] <doug16k> I'd have to try with a raw IP to rule it out
[12:01:36] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[12:02:07] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[12:02:14] <doug16k> same region of course
[12:04:34] <doug16k> I cache everything. not matter how hard you try they shut down your workers and you get instantiated cold again soon after. stupid lambda magnifies the effect of connect performance
[12:06:31] <doug16k> it's a 2xlarge something 8 cpu 32GB sql server
[12:06:54] <doug16k> on same lan that thing should be in the microseconds to connect, no?
[12:07:38] <doug16k> with < 100 connections and almost idle
[12:09:15] <doug16k> connect includes some of the chatter, so you see way more than the network socket connect
[12:10:17] <doug16k> does mysql log enough spam to see if DNS lookup is taking long?
[12:10:42] <doug16k> oh wait...
[12:10:50] <doug16k> what am I thinking, the taking long is client side
[12:11:24] <doug16k> I could do the DNS lookup
[12:11:33] <doug16k> use the raw IP I got dynamically
[12:14:52] *** Joins: Guest3952 (~vit@chello085216193138.chello.sk)
[12:42:59] <doug16k> I realize that if it elided (a, b, c) because it can use (a, b, c, x, y) then it would miss the opportunity to have a tree with more keys per node in a separate "redundant" (a, b, c) index
[12:46:39] <doug16k> oyt'
[12:46:54] <doug16k> oops, it's boeing style, do what the pilot said, even if it seems ridiculous
[12:47:21] <doug16k> silently using a bigger index is the autopilot taking over like airbus
[12:47:37] <doug16k> alpha floor protection said screw you I am saving disk space
[14:50:33] *** Quits: Kuraokami (unit193@libera/staff/unit193) (Ping timeout: 256 seconds)
[15:08:25] *** Quits: bytestream (~bytestrea@user/bytestream) (Remote host closed the connection)
[15:24:25] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:61ef)
[15:43:54] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[16:09:55] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:61ef) (Quit: Client closed)
[16:10:33] *** Quits: funhouse (~funhouse@user/funhouse) (Quit: Client closed)
[16:21:37] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[16:23:41] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:61ef)
[16:25:21] *** Joins: Sheilong (uid293653@2a03:5180:f:3::4:7b15)
[17:21:17] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:61ef) (Ping timeout: 256 seconds)
[17:57:36] *** Joins: Kuraokami (unit193@libera/staff/unit193)
[18:22:40] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[18:23:01] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[18:23:21] *** Joins: nb2 (~nb@fedora/ansible.user.nb)
[18:23:21] *** Joins: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch)
[18:24:50] *** Joins: tosaraja_ (~quassel@192.89.120.58)
[18:24:51] *** Joins: Wanderer_ (~wanderer@user/wanderer)
[18:24:56] *** Joins: yang_ (~yang@fsf/member/yang)
[18:25:19] *** Joins: finstern1s (~X@23.226.237.192)
[18:25:42] *** Joins: Terlisimo1 (~Terlisimo@outofband.ozna.net)
[18:27:36] *** Server sets mode: +CTcnt 
[18:29:52] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[18:29:52] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[18:29:52] *** Quits: mickey (~user@user/mickey) (*.net *.split)
[18:29:52] *** Quits: nb (~nb@fedora/ansible.user.nb) (*.net *.split)
[18:29:52] *** Quits: cryocaustik7 (~cryocaust@user/cryocaustik) (*.net *.split)
[18:29:53] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[18:29:53] *** Quits: DPA (~DPA@94.16.128.75) (*.net *.split)
[18:29:53] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[18:29:53] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (*.net *.split)
[18:29:53] *** Quits: doug16k (~doug16k@172-97-224-241.cpe.distributel.net) (*.net *.split)
[18:29:53] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (*.net *.split)
[18:29:53] *** Quits: Spitfire (spitfire@user/Spitfire) (*.net *.split)
[18:29:53] *** Quits: devhen (~devhen@irc.devhen.org) (*.net *.split)
[18:29:53] *** Quits: tosaraja (~quassel@192.89.120.58) (*.net *.split)
[18:29:53] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[18:29:53] *** Quits: yang (~yang@fsf/member/yang) (*.net *.split)
[18:29:53] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (*.net *.split)
[18:29:53] *** Quits: Wanderer (~wanderer@user/wanderer) (*.net *.split)
[18:29:53] *** devhen3 is now known as devhen
[18:29:57] *** mickey3 is now known as mickey
[18:29:57] *** nb2 is now known as nb
[18:29:57] *** jancoow9 is now known as jancoow
[18:29:57] *** cryocaustik71 is now known as cryocaustik7
[18:34:07] *** Quits: tercaL (~tercaL@user/tercal) (Remote host closed the connection)
[18:36:12] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[18:37:14] *** Joins: doug16k (~doug16k@172-97-224-241.cpe.distributel.net)
[18:37:53] *** Joins: Sleepy63 (~Sleepy63@user/sleepy63)
[18:51:26] *** Wanderer_ is now known as Wanderer
[19:25:48] *** Quits: stutz (~stutz@user/stutz) (Ping timeout: 240 seconds)
[19:31:29] *** Joins: stutz (~stutz@p200300e88f1c5e00b25adafffe87820c.dip0.t-ipconnect.de)
[19:31:29] *** Quits: stutz (~stutz@p200300e88f1c5e00b25adafffe87820c.dip0.t-ipconnect.de) (Changing host)
[19:31:29] *** Joins: stutz (~stutz@user/stutz)
[19:41:50] <mickey> what would be an efficient way or storing 1024 float values for each row in a table when there's like 1.3M rows
[19:41:55] <mickey> s/or/of
[19:42:35] <mickey> the application will be fetching none or all of the 1024 floats of every row, so there's no real need of keeping them separate
[19:43:44] <mickey> i could store a json encoded list but im wondering if there's a better approach for something like this
[20:00:45] <thumbs> mickey: use a varchar or varbinary column
[20:03:39] *** Joins: travisghansen (~travisgha@192.74.130.86)
[21:34:14] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[21:34:28] *** Joins: rvalue (~rvalue@user/rvalue)
[21:36:02] *** Quits: ueberall (~ueberall@user/ueberall) (Quit: ZNC)
[21:37:53] *** Joins: ueberall (ueberall_l@user/ueberall)
[21:46:26] <doug16k> 4K isn't too much for a varchar?
[21:46:59] <doug16k> I thought that'd cause it to be pessimistic about how many records fit in leaves
[21:47:25] <doug16k> I guess it's pointless to indirect to something else if that's the whole point of the record though
[21:48:01] <litheum> they're actually *floats*? or are they *decimal* types?
[21:48:53] <litheum> if the database doesn't need to know the data in the column (so that you can filter on it, sort by it, etc.), it'll for sure be more efficient to store it in some packed format rather than as a ton of separate columns
[21:51:01] <doug16k> they proposed json encoding, so they probably mean doubles
[21:51:05] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:51:50] <doug16k> json would be doubles, no idea if that's ok for mickey
[21:51:53] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[21:58:25] <litheum> json encoding sounds super inefficient
[21:58:31] <doug16k> why
[21:59:13] <doug16k> there is a JSON column type
[21:59:29] <doug16k> it doesn't store it with binary representation?
[21:59:45] <litheum> oh jeez, if you use the json column type, then you're forcing the server to confirm every time you insert that the whole big long thing is valid json, which is expensive
[21:59:59] *** yang_ is now known as yang
[22:00:50] <doug16k> yeah? iterating through characters in C is super expensive eh?
[22:00:53] <litheum> this what i was referring to earlier: if the database doesn't need to know the data in the column, don't make it care about it
[22:01:14] <litheum> https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html#data-types-storage-reqs-json "the space consumed by a JSON document is roughly the same as it would be for the document's string representation" *and* there is additional overhead
[22:02:02] <litheum> json is notoriously expensive to validate and interact with
[22:02:27] <litheum> sounds like you've got some idea, so why not go start doing some testing to see what works for you, it doesn't seem like you're very interested in my opinion on the matter?
[22:02:37] <doug16k> if your implementation calls functions for each character probably yeah
[22:02:55] <litheum> you're making lots of assumptions instead of reading docs, and you're arguing with me about silly things, i have no idea what you're hoping to get out of this
[22:03:05] <Naktibalda> doug16k: what's the reason that you have exactly 1024 values for each row?
[22:03:32] <doug16k> I don't, it's mickey
[22:03:45] *** Joins: gamara (~gamara@cpe9050cade20e3-cm9050cade20e0.cpe.net.cable.rogers.com)
[22:03:45] <Naktibalda> ar, right
[22:04:22] <Naktibalda> varchars must fit into 64k row length limit
[22:05:19] <doug16k> litheum, not going to sit here and agree with 16GB/sec scanning json being super expensive. sorry
[22:06:40] <doug16k> probably on an out of order processor at 4+ ghz with gigantic caches and almost supernatural prefetcher and branch predictor with 128+ reorder window
[22:07:12] <doug16k> 16 of them
[22:07:59] <doug16k> it's reading the nvme at 4GB/sec that's the problem
[22:10:16] <doug16k> it's 4GB/sec when it gets around to it
[22:12:39] <doug16k> if you store it as binary, won't a pedant complain that it might be bigendian on some clients?
[22:13:15] <doug16k> or not even ieee-754?
[22:17:10] *** Parts: doug16k (~doug16k@172-97-224-241.cpe.distributel.net) (Leaving)
[22:30:11] *** Quits: gamara (~gamara@cpe9050cade20e3-cm9050cade20e0.cpe.net.cable.rogers.com) (Quit: Client closed)
[22:38:19] *** Joins: gamara (~gamara@cpe9050cade20e3-cm9050cade20e0.cpe.net.cable.rogers.com)
[22:53:28] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[22:55:52] *** Joins: ueberall (ueberall_l@user/ueberall)
[23:09:32] *** Quits: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:13:00] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[23:32:08] *** Joins: enlinqz (~enlinqz@2603-8080-f60c-6d68-00ab-7c8b-6557-2e76.res6.spectrum.com)
[23:53:08] *** Quits: gamara (~gamara@cpe9050cade20e3-cm9050cade20e0.cpe.net.cable.rogers.com) (Quit: Client closed)
[23:57:15] *** Quits: mooz (~none@173.208.98.70) (Quit: leaving)
[23:58:30] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: If you can't laugh at yourself, make fun of other people.)
