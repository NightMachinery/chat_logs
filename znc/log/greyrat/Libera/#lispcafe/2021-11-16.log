[00:18:06] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 244 seconds)
[00:18:35] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[00:35:39] *** Joins: Catie (~user@user/catie)
[00:42:13] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 250 seconds)
[00:44:29] *** Quits: derelict (~derelict@user/derelict) (Quit: bye)
[00:44:59] *** Joins: derelict (~derelict@user/derelict)
[00:59:20] <gilberth> CCL is funny. It reads #\foo:a as #\a, as well as #\::a, and #\:::a, and #\::|newline| reads as #\Newline. Yet another bug. Terrific.
[00:59:57] <sham1> That doesn't seem right
[00:59:59] <Catie> ls
[01:00:05] <Catie> Wrong window, sorry
[01:00:28] <sham1> Could not access /home/Catie/homework: Permission Denied
[01:02:26] <gilberth> #\n\e\w\l\i\n\e => #\Newline, in all but ABCL. I would need to read the spec.
[01:04:00] <gilberth> May I escape character names? #\N|ewline| works, too. In all but ABCL.
[01:09:44] <gilberth> I may, so I found an ABCL bug and a CCL bug.
[01:14:57] <phantomics> Wow, weird
[01:16:58] <phantomics> CCL does have one of the better ways of printing a character matrix
[01:18:08] <gilberth> The "#\" reader macro reads either a single character after the "\" or a full token. In effect, a token is read with the first char after the "#\" being escaped. ABCL misses that entirely, while CCL misses that package markers, ":" and "::", may not appear.
[01:18:37] <phantomics> SBCL and ECL print out the full unicode name for many characters outside ASCII, so you get stuff like #2A((#\BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT #\RIGHTWARDS_ARROW ...
[01:19:46] <gilberth> CCL does that too, but apparently knows fewer character names.
[01:21:09] <gilberth> E.g. #\ß -> #\Latin_Small_Letter_Sharp_S. Which by the way is a lie, as "ß" is no letter, but a ligature.
[01:22:44] <gilberth> Anyhow, does the standard mandate, that characters outside the standard characters must print that way? OTOH #\space must print as "#\ ", which I find awkward.
[01:26:41] <gilberth> The Lisp machine also has character codes for what would be function keys on keyboard. NextStep actually is like that and maps function keys, cursor keys, etc to a private use area. I borrowed that for CLIM and now have characters like #\Left, #\Help, or #\F1.
[01:28:29] <gilberth> I believe that instead of a gazillion emojis, one should map such keys officially to Unicode. The keysyms of X11 could be a basis.
[01:30:14] <phantomics> Interesting, haven't checked the standard but I don't know it would say anything specific since it long predates Unicode
[01:35:13] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[01:35:17] <gilberth> It doesn't predate character sets beyond US-ASCII. The ANSI-CL standard actually is pretty careful with characters, which is a reason why we don't have the trouble with Unicode some other languages have.
[01:38:41] <Alfr> phantomics, 13.1.4.1 where space is defined to be a graphic character, and 22.1.3.2.
[01:40:36] <Alfr> gilberth, you mean anything but base-chars may or may not work?
[01:42:29] <gilberth> Alfr: standard chars. 22.1.3.2 doesn't say whether #\ß may print as #\ß. And base-char is just the upgraded array element type of standard char arrays. It has no other meaningful meaning.
[01:43:22] <gilberth> In CCL BASE-CHAR is the very same type as CHARACTER.
[01:43:51] <Alfr> gilberth, yes. I somehow mistook him to be inquiring about the "#\ " instead of "#\space".
[01:45:17] <Alfr> gilberth, guess I meant standard-char and mix that up too.
[01:46:15] <gilberth> #\space is a standard graphic character and thus must print as "#\ ". I believe it doesn't forbid #\ß being printed as #\ß, but that would be dangerous to implement, as your stream might as well not be able to print "ß".
[01:48:48] <gilberth> What makes me curious though is that in terms of the reader first #\Backspace is constituent and only then has "invalid" trait. Which makes we wonder again, if overstriking in US-ASCII was ever used to have accented chars or umlauts. Like u<BS>" -> ü, which would work on a printer or a teletype.
[01:50:25] <gilberth> That isn't that strange, Unicode also has some combining chars, so you could construct accented characters using more than one code point.
[01:52:09] <gilberth> With CLtL1 it at times was a challenge to find an element-type that would give you a working string. CLtL2 really improved that.
[01:56:38] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[01:57:05] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:58:44] <Alfr> gilberth, maybe that only abc\<backspace> is invalid but abc<backspace> isn't?
[02:00:00] <hayley> https://www.youtube.com/watch?v=Ab-9LbTfLFc
[02:00:01] -ixelp- Jo the Waiter - YouTube
[02:00:06] <gilberth> Alfr: The reverse. Any character is fine after "\".
[02:02:30] <Alfr> gilberth, hm ... then I don't the invalid part of the table.
[02:05:47] <gilberth> Alfr: The CADR however reads x^H_ as a symbol name just fine. And the CADR console, being bitmapped, displays it fine. Lisp Café demo: <http://clim.rocks/gilbert/cadr-lispcafe.png>; There is no "é" in the character set. Underline demo: <http://clim.rocks/gilbert/cadr-underline.png>
[02:07:14] <gilberth> Alfr: Invalid is what may not appear without an escape in a token. And that is a trait and cannot be modified.
[02:08:27] <gilberth> Alfr: You can make e.g. #\_ a white space by saying (set-syntax-from-char #\_ #\space). (read-from-string "(foo_bar)") => (FOO BAR). But you can't make #\Backspace be accepted without escape in a token.
[02:09:39] <Alfr> gilberth, ah, makes sense.
[02:10:07] <Alfr> gilberth, just tested it; though inputting it was a challenge.
[02:11:12] <gilberth> It's a bit confusing, as characters have syntax and constituent characters then have traits, like being an escape, a decimal point, etc. Actually, I believe it would be fine to change the traits too. Would be handy to e.g. change the meaning of "/" to what "\" is. E.g. to read old Lisp.
[02:12:09] <gilberth> Alfr: ^V ^H on a tty, ^Q ^H in Emacs.
[02:12:51] <Alfr> gilberth, (read-from-string (coerce '(#\a #\b #\c #\backslash #\backspace) 'string)) => |AB|, 5
[02:13:08] <Alfr> and then (length (symbol-name *)) => 4
[02:13:58] <Alfr> gilberth, guess a little bit surprising when looking at the output only.
[02:15:20] <Alfr> I guess the multiple escape is a hint, but still I don't really like it.
[02:16:15] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:54a:dd24:cbe5:99a3)
[02:17:01] <gilberth> Try in SLIME, then #\backspace is printed as ^H. And yes, I was talking about doing without escape, as any character works after an backslash. BTW #\Backslash is not a standard character name and thus will not work with every CL.
[02:19:08] <Alfr> gilberth, #\\ looks like there may still be something missing, same as with your #\  above.
[02:21:35] <hayley> https://www.youtube.com/watch?v=OMvjgtsRHuU
[02:21:35] -ixelp- doin your mom by the smiths - YouTube
[02:21:54] <gilberth> Alfr: (read-from-string (map 'string 'code-char '(92 27 91 51 49 92 109 114 101 100 92 27 91 48 92 109)))
[02:22:12] <gilberth> Alfr: Yes, but #\backslash just doesn't work here.
[02:22:27] <Alfr> gilberth, oh, really? Interesting.
[02:23:22] <Alfr> gilberth, I wonder what that maps to in EBCDIC.
[02:24:57] <Alfr> gilberth, oh that one definitely looks nicer in a terminal.
[02:27:16] <Alfr> I need to sleep. 'night all.
[02:27:50] <gilberth> Who does care about EBCDIC. And "\" is called "REVERSE SOLIDUS in Unicode :-p
[02:28:02] <gilberth> Alfr: Take care.
[02:29:22] <Alfr> gilberth, and ß: latin small letter sharp s ;)
[02:29:43] <gilberth> I said that already. Still a lie.
[02:30:16] <gilberth> It's. Not. A. Letter. Dammit!
[02:30:45] <Catie> It's a ligature, ain't it?
[02:31:01] <Catie> Between ſ and s
[02:31:01] <gilberth> Yep, an s+z ligature.
[02:31:11] <gilberth> Catie: Exactly.
[02:31:36] <gilberth> Nope. Sorry. ſ + z
[02:32:00] <Catie> Huh. It looks like it's going the wrong way for a 'z'
[02:32:28] <gilberth> See <https://upload.wikimedia.org/wikipedia/commons/0/0d/Berliner_Strassenschilder.jpg>
[02:32:56] <Catie> Oh, a cursive 'z'. Huh
[02:33:01] <Alfr> gilberth, I think it's considered a letter in German (originating from that ligature, yes).
[02:33:16] <gilberth> There also is t + z ligature. The z is at times written with a descender.
[02:34:15] <gilberth> Alfr: It is these days, which doesn't change that it really is a ligature. When people would grasp that, things would get easier and there would be no such uttermost silly ideas like inventing an uppercase "ß".
[02:35:25] <gilberth> Catie: My German handwriting is like that. I also use the ſ in my handwriting. And my "h" also has a descender.
[02:36:15] <Catie> I only use the ſ when I really want to irritate people
[02:37:12] <mfiano> Hey Catie, I made huge progress!
[02:40:01] <gilberth> Catie: My German handwriting is like the old Kurrent or Kursiv writing. Way faster than what we learned at school. My English handwriting is a more standard handwriting.
[02:41:16] <gilberth> Thus almost nobody could read my scribblings, as they don't know the script :-)
[02:43:13] <phantomics> I thought reverse_solidus was distinct from a backslash
[02:44:59] <gilberth> phantomics: <https://unicode.org/Public/UNIDATA/UnicodeData.txt> says so.
[02:45:30] <phantomics> How about that
[02:46:06] <phantomics> I was looking for a short slash character, like a half-height diagonal line, but there seems to be none in common Unicode
[02:46:16] <phantomics> But did see some variants of solidus
[02:47:07] <Catie> mfiano: I'm really glad!!!
[02:47:17] <Catie> gilberth: My handwriting is hot garbage
[02:50:01] <gilberth> Catie: My handwriting used to be until I ditched the silly, ugly, slow script we were taught at school.
[02:50:58] <Catie> gilberth: I used to practice for about an hour a day, and it definitely got better! I'm just not motivated anymore
[02:51:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[02:53:52] <gilberth> Catie: Have you picked a proper script? And, I still use pen and pencil for thinking and thus write a lot, though most is in English.
[02:55:11] <Catie> gilberth: A proper script? Probably not. I tried to develop my handwriting into something roughly consistent with itself, but that's about it. At this point, I almost exclusively type. I'm quicker at it, and I have a painful habit of tensing up my entire wrist when I write
[02:56:19] <mfiano> Catie: I sent you a message last night because it says you are online, but that message is still pending, so looks like you really aren't :)
[02:56:22] <gilberth> Catie: Try a fountain pen, if you don't use one already.
[02:56:49] <Catie> mfiano: I haven't been online, and my home machine is currently off of the internet. I think the windstorm knocked something down earlier today
[02:56:59] <Catie> gilberth: I'll have to give that a go! Thanks for the tip
[02:58:03] <mfiano> Yeah it does show you as offline now. Maybe it was your status message that confused me. Still getting used to tox, although I now have 2 people in my list :)
[02:58:27] <Catie> mfiano: Hey, congratulations! We're driving adoption
[02:59:14] <Catie> mfiano: Yeah, I may or may not be on again tonight. At the very least, I have to get the network thing figured out though
[02:59:36] <gilberth> Catie: When you do, watch how you keep your hand. A fountain pen needs to touch the paper in a bit less than 45° angle. This is why I have trouble with regular ball pens, which need a way more upright position to function.
[02:59:46] <mfiano> Catie: Not a problem. I was just going to explain to you my awesome solution to VM -> bare metal
[03:00:24] <Catie> gilberth: Yeah that makes sense, it's a much more natural angle for your hand. I think I also press down way too hard on the paper
[03:00:31] <Catie> mfiano: I can't wait to hear it!
[03:01:42] <hayley> https://www.youtube.com/watch?v=PsVAdrdkyoA "Plus you get xclock!"
[03:01:42] -ixelp- The Apple Network Server 500 - YouTube
[03:01:55] <gilberth> Catie: Makes perfect sense. A fountain pen needs very, very, very little pressure. Actually you could damage it by too much pressure, which is why I never let anyone else use one of my fountain pens.
[03:02:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:03:26] <Catie> gilberth: You know, I think just two days ago I started thinking about getting a fountain pen. Fun coincidence, but the recommendation is also very helpful, thank you
[03:03:32] * hayley runs out of ideas of who to send to the Coffee Compiler Club
[03:04:02] <hayley> Not myself, not beach, nor drmeister, Bike hasn't got back, heisig would be busy...
[03:04:04] <gilberth> Catie: I promise, you won't regret the move.
[03:04:26] <Catie> gilberth: Done!
[03:04:34] <Catie> What's the Coffee Compiler Club?
[03:04:58] <gilberth> Cathie: Ordered one?
[03:05:33] <Catie> gilberth: Not just yet, I think I'm gonna see if there's any at a stationery store. I'll need ink as well, right? Like an inkwell or something?
[03:05:37] <gilberth> s/h// Sorry. No completion here.
[03:05:47] <Catie> gilberth: I think I'll survive
[03:06:39] <hayley> Catie: A weekly (currently) online meeting of compiler hackers run by Cliff Click.
[03:09:41] <gilberth> I would recommend a fountain pen, which is filled with bare ink, and not one that take one of those cartridges. But for a start, when you don't want to spend too much, go for the latter, as they used to be cheaper. And buying at a real store is good, because there are different kind of tips, which feel really different. In a store you could perhaps try them.
[03:10:18] <gilberth> However tips could be replaced.
[03:10:45] <Catie> gilberth: I think for now, trying in-store would be a good idea. Since I've got no idea what to expect and all
[03:10:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[03:11:51] <gilberth> And when not in use, make damn sure that you put the cap on, as the tip would dry otherwise and render the pen dysfunctional. It's a mess to clean it.
[03:12:23] <Catie> Ah, thank you! I'll keep that in mind
[03:12:28] <gilberth> Catie: Yes, try some and see which feels best. You could get more sophisticated later.
[03:14:17] *** Joins: jurov (~jurov@rev-81-92-255-36.radiolan.sk)
[03:16:20] <gilberth> Catie: Curious, didn't you use fountain pens at school?
[03:17:04] <Catie> gilberth: Nope, pencils across the board. I generally used a mechanical pencil. They made us use pens in some engineering classes, but that was about it
[03:18:05] <gilberth> Oh, I asked, because we all were required to use fountain pens at school.
[03:18:45] <Catie> Oh wow, yeah no. I knew one person in elementary school who used a fountain pen, but I think she just liked it. It was never mandated or anything
[03:21:07] <gilberth> Well, I went to school in the 80s, perhaps it's different these days, idk. Anyhow, with age most students switched to regular pens, while I always kept using fountain pens.
[03:22:51] <gilberth> You rarely see an adult or university student using one, somehow most people don't like them, or they are too mush a hassle.
[03:24:54] <Catie> I'd imagine it's probably the latter
[03:25:29] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:54a:dd24:cbe5:99a3) (Remote host closed the connection)
[03:28:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:29:29] <gilberth> Anyhow, key is how you hold the pen and keep your hand. In this regard this is like golf. Bad posture of hand => bad result. :-)
[03:30:46] <gilberth> So you may need some time, when nobody showed you.
[03:30:58] <Catie> Hey, I've got plenty of time
[03:32:27] <gilberth> Good.
[03:36:32] * hayley needs a better cooling solution for the Raspberry Pi server.
[03:36:56] <hayley> Problems are that the fan is tiny, so it spins fast and thus makes an annoying hum, there is still no heatsink, and it is always on with no thermal control.
[03:36:58] <gilberth> Out of coins, milady?
[03:37:28] <hayley> The machine idles at like 50°C with no fan and just ssh running.
[03:37:57] <gilberth> You could submerge it in oil, if you wish.
[03:38:04] <hayley> The official case fan is a bit larger, and comes with a heatsink, but still not excellent.
[03:38:22] <gilberth> Yep, a Pi runs pretty hot. Even with a proper heat sink. And even when not doing much.
[03:38:32] <hayley> gilberth: Yes, and it lives under a couch, and one of the cats seems to like playing with it when I have to move the couch to service it. 
[03:39:03] <hayley> 36° with the fan.
[03:39:28] <gilberth> Is there anything cats don't love to play with? And, have you taught CL to your cat yet?
[03:39:56] <gilberth> hayley: With the noisy fan?
[03:40:09] <hayley> The Pi 4 is kinda exceptional, though, it requires USB-C for more power draw, and has a spiffy out of order CPU IIRC. Whereas my older Pi 2 ran at like 3 W and didn't need a heatsink even.
[03:40:10] <hayley> gilberth: Yes.
[03:40:30] <hayley> Still, a heatsink would help.
[03:40:39] <gilberth> Anyhow, transistors work up to 125°C.
[03:40:56] * gilberth tries to remember which version his Pi is.
[03:41:12] <hayley> Maybe I should design a controller. Get some software on the Pi to emit PWM, power the fan through a MOSFET...
[03:41:59] <hayley> Huh, the new Pi software actually has software for PWM fan control already.
[03:42:16] <gilberth> Hmm, IIRC my fan already connects to some PWM. But I never installed it. Also I never bothered to use the case.
[03:44:29] <hayley> ...and if I wanted to attach a larger fan, I'd need to make a new case, which I don't feel like doing. sigh
[03:45:22] <gilberth> You could still go for oil.
[03:45:47] <hayley> Won't fit under the couch.
[03:46:34] <gilberth> No? Why not?
[03:48:14] <gilberth> You could also just put it into the fridge. :-)
[03:48:42] <hayley> Not good for the fridge.
[03:48:54] <Catie> That sounds like a good way to have all your food go bad
[03:49:19] <gilberth> How many kW does the Pi produce?
[03:50:58] <hayley> 0.01?
[03:51:55] * gilberth checked his board and it says "Pi 4"
[03:53:10] <hayley> So I could just wire up a PWM fan, but the connector probably won't match up with the Pi header. 
[03:53:43] <gilberth> Well, trouble is, that I could not imagine how to properly mount some large heat sink. And /me doesn't like fans.
[03:54:19] <hayley> There's little ones e.g https://www.ebay.com/itm/263344268599
[03:54:20] -ixelp- Raspberry Pi 2/3/4 3 Piece Aluminium and Copper Heat Sink Adhesive Cooling Kit | eBay
[03:54:22] <gilberth> hayley: Mine came with a fitting fan.
[03:54:31] <hayley> Also cases which are just giant heatsinks.
[03:54:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7c12:e31e:34fb:c517) (Ping timeout: 265 seconds)
[03:55:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:55:10] <hayley> e.g. https://www.ebay.com.au/itm/183800698485
[03:55:11] -ixelp- GeeekPi CNC Extreme Cooling Fan Heatsink Kit For Raspberry Pi 4 Model B / 3B+ | eBay
[03:55:27] <hayley> That still has a fan, but the heatsink is pretty big.
[03:55:55] <gilberth> hayley: Hmm, those look like my heat sinks, although mine are just of golden colour.
[03:56:02] <hayley> Still no PWM though.
[03:56:23] <hayley> Okay, this one has PWM: https://www.ebay.com.au/itm/304212411588
[03:56:24] -ixelp- Raspberry Pi 4 Aluminum Heatsink with PWM Controllable Fan, Raspberry Pi 4 | eBay
[03:56:48] <hayley> It just so happens to have postage which is 3x as much as the actual product.
[04:02:03] <hayley> Could get a heatsink case from a nearby electronics store, but it also does not have PWM, and instead has two tiny fans, which sounds terrible.
[04:02:34] <hayley> But there is just a heatsink on sale too.
[04:03:23] <gilberth> hayley: I took a picture: <http://clim.rocks/gilbert/my-pi.jpeg>
[04:04:24] <gilberth> Those heat sinks came with the Pi.
[04:04:26] <hayley> Don't think I could even fit a bodge PCB in the case, either. So I'm stuck with this.
[04:06:26] <gilberth> I wonder, if I could turn my Pi into a file server for the Time Machine.
[04:07:09] <gilberth> And as a shared NFS server for some sanity.
[04:07:47] <gilberth> Mounting NFS over a DSL landline is not particular fast. :)
[04:07:57] <hayley> Quite likely. Though you probably want an external hard drive, and thus a powered USB enclosure.
[04:08:10] * hayley uses a 1TB drive she found from the tip still.
[04:09:10] * moon-child uses an old crappy laptop as an nfs driver
[04:09:22] <hayley> .oO(Shopping list: heat sink, new power supply for synthesizer since the last one broke open, new mouse that has a working left button)
[04:09:23] <gilberth> Hmm, my USB drives power from USB, guess that won't work then. Being powered from USB is nice otherwise, because you could just transport those drives and don't need to care to find the power supply.
[04:09:27] <moon-child> has enough power to drive everything by itself.  And ethernet (only 100mbps though)
[04:09:50] <hayley> The Pi can't run a HDD via its own power supply. 
[04:10:26] <gilberth> ok, so I would need a different solution.
[04:10:52] <hayley> But an external powered enclosure was like AU$20, which is cheap. 
[04:11:12] <gilberth> But first I should get a cable up here and between the machines, the WiFi is neither fast, nor reliable.
[04:11:16] <hayley> "New products: Ryzen 5900X $799.00"
[04:12:13] <hayley> Well, the store I got mine from doesn't seem to have the enclosure I have. Hm.
[04:12:25] <gilberth> I believe I should get used to actually live here at my cousins place. *sigh* My house has ethernet in every room running to a central point in the basement.
[04:13:03] * hayley tries to remember what the other store she got RAM from was called.
[04:13:29] <hayley> Worse, I tried to apply for a job there.
[04:14:01] * hayley looks through emails
[04:14:15] <gilberth> At the other store? For doing what?
[04:14:41] <hayley> "Thankyou for being a <bank> customer" Okay, just don't lose my money.
[04:14:48] <hayley> Probably warehouse stuff.
[04:15:52] <hayley> Aha, this one: https://www.scorptec.com.au/product/hard-drives-&-ssds/enclosures/61748-se325-bk
[04:15:53] <gilberth> Reminds me that my bank has given up on getting negative interest from me for the little money I have in their account.
[04:16:37] <hayley> $39 is still pretty good, given that I got the drive for $0 and don't have to pay for a slower smaller drive.
[04:17:07] * hayley looks for what else is on sale
[04:17:23] <hayley> "PCIe SSD, self encrypting drive" But I don't want my data to be self-encrypted, I need to decrypt it later!
[04:17:30] <gilberth> Perhaps you find a 64-core machine?
[04:17:49] <hayley> gilberth: https://www.scorptec.com.au/product/cpu/amd-threadripper/88215-100-100000087wof
[04:18:44] <gilberth> Hmm, have they forgotten put the decimal point in that quote?
[04:19:06] <hayley> Or https://www.scorptec.com.au/product/cpu/server-&-workstation/82216-100-100000038wof too
[04:19:38] * hayley wonders if anyone looking for benchmarks for 64 core machines cares about "gaming performance".
[04:20:11] <gilberth> Puh! Do I look rich? You could get a car for that quote. Though no Porsche.
[04:21:32] <hayley> Apparently the 3990X isn't that much slower.
[04:21:56] <hayley> https://www.scorptec.com.au/product/cpu/amd-threadripper/81131-100-100000163wof I need it in order to compile Rust regex benchmarks, okay?
[04:22:55] <gilberth> And now complain again about Python being slow.
[04:23:20] <hayley> "Customers also bought: Windows 10 Pro"
[04:23:36] <hayley> Now what am I going to do with that? Does the scheduler even work on 128 threads?
[04:24:24] <gilberth> How can Windows even be "Pro"? And won't you need a Pentium Pro for that?
[04:24:57] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[04:25:15] <hayley> Apparently the scheduler thinks you can only have 64 threads on one socket, and so splits the 128 threads into two processor groups.
[04:25:50] <gilberth> Ah. Does that make sense?
[04:26:45] <hayley> No, because there are in fact 128 threads on one socket, and so you can kiss your hyperthreading bye.
[04:27:37] <gilberth> Does hyperthreading really help?
[04:28:07] <hayley> Sometimes.
[04:28:28] <gilberth> When you compile Rust?
[04:28:32] <hayley> IIRC it's best if you are memory bound, because then the processor has a different instruction stream to execute if it would stall.
[04:28:33] <moon-child> hyperthreading alleviates cache misses
[04:28:35] <moon-child> yeah
[04:29:50] <gilberth> So it's only good for bandwidth. When all you do is mindlessly shuffling data?
[04:30:59] <hayley> If you are mindlessly shuffling data, and there is no data dependency, then you can just queue up a bunch of copies to run concurrently.
[04:33:30] <hayley> Rather it'd be pointer-happy programs, and compilers are usually pointer-happy (inb4 moon-child mentions the APL compiler again) so it might help.
[04:34:25] <moon-child> hayley: well, depends; a pointer-happy program you can maybe keep executing different parts of the same program
[04:34:48] <hayley> Yes, it depends on data dependencies.
[04:35:22] <hayley> If you're traversing a linked list, then woe to you, since there isn't much else to do (except read barriers of course).
[04:35:51] <moon-child> I seem to recall ocaml people (why is it always ocaml people?) got rather nice performance prefetching two nodes ahead on a linked list traversal
[04:36:23] <hayley> They also prefetched in their mark-sweep GC, which is also a pointer chasing problem.
[04:36:39] <moon-child> hence 'always ocaml people' :)
[04:36:47] <hayley> Aren't there fintech companies using OCaml?
[04:37:04] <moon-child> hayley: re apl: tbf, it can frequently saturate memory b/w, so you _would_ have a nice time with HT
[04:37:14] <moon-child> hayley: jane street is a prominent hedge fund using ocaml
[04:37:20] <hayley> https://ocaml.org/learn/companies.html Jane Street for example.
[04:38:48] <gilberth> Anyhow, I can't see how to really make use of so many cores.
[04:39:07] <hayley> And then Aesthetic Integration, Bloomberg, LexiFi, and Nomadic Labs (blockchains count right?) on the list.
[04:39:16] <moon-child> gilberth: bitcoin mining!
[04:39:39] <hayley> cargo build --release!
[04:40:07] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[04:40:13] <hayley> At least CL isn't a "blockchain language" like Haskell and Rust are apparently. mfs complain Lisp is dead, but I'd say being dead is better than that.
[04:41:05] <moon-child> dad was at one point responsible for a non-trivial amount of aws infrastructure.  Said at one point 'I have these warehouses full of top-grade servers that aren't being used for anything yet ... I could make $millions mining bitcoin on them and no one would know'
[04:41:13] <gilberth> moon-child: Are you kidding? Bitcoin mining in a country with the highest price for electricity? I pay like EUR 0,30 per kWh.
[04:41:32] <hayley> Hm, surely they'd spot the power bill going up.
[04:42:12] <hayley> gilberth: Concurrent parallel GC is also a popular use of moar cores.
[04:42:33] <hayley> It's basically free if you have more cores™
[04:43:08] <gilberth> hayley: Well GC is cheap enough for me already. But actually, I believe we could benefit from more fine grained parallelism in general.
[04:43:33] <moon-child> hayley: surely you saturate memory before you reach 64 cores?
[04:43:45] <hayley> You also need a fuckton of bandwidth, yes.
[04:43:56] <moon-child> 64-core m1 when
[04:44:02] <gilberth> I never tried, but I believe e.g. CSS could be made faster, when doing work in parallel, which you can. Almost.
[04:44:46] <hayley> gilberth announces Servo 2
[04:44:59] <gilberth> There was a version of Closure, which would parse, find CSS attributes, and render concurrently. Just didn't made much sense on a single-core machine.
[04:45:00] * moon-child does not understand why anybody would want to work on new web things
[04:46:14] <gilberth> I used futures to implement that. You could traverse e.g. the parse tree just as if you have the whole DOM, while some parts still are underway.
[04:46:29] <moon-child> like vectors are neat.  Decent chance I'll teach my toy gpu font thingy about cubics & paths & hinting.  But why touch svg/css/html/shit?
[04:46:41] <gilberth> And that made sense, when you have a 38kbps link.
[04:46:42] <hayley> https://youtu.be/C03JVwYVOs4?t=300 You can see additional threads being used for GC and JIT.
[04:46:43] -ixelp- Azul's Real-Time Profiling & Monitoring (RTPM) Tool - YouTube
[04:46:55] <moon-child> gilberth: hmm, you probably would want coroutines for that, no?
[04:47:11] <moon-child> (well, unless you have closos and cheap real threads.  But.)
[04:47:23] <hayley> "-XX:+UseGenPauselessGC" ( ͡° ͜ʖ ͡°)
[04:48:16] <gilberth> I don't want coroutines for that, but threads. Unless you could CMUCL's threads a coroutines, which they are not. The stackgroups are, but I have not used them.
[04:48:33] <gilberth> * count
[04:49:10] <moon-child> gilberth: let me rephrase that then.  You probably would want some mechanism for switching between threads of execution without a hardware/kernel context switch, no?
[04:51:37] <gilberth> moon-child: Which you have with CMUCL's cooperative multithreading, technically. But that is not what I want. It actually wouldn't hurt too much in the concurrent parsing application, as data will come in packets, so the there isn't that much context switching actually happening. Most of the time you'll be idle anyway.
[04:52:00] <gilberth> In case of rendering, there won't be much, if any, waiting for other threads.
[04:54:00] * hayley yoinks an operation manual
[04:54:06] <hayley> "Appendix B: Not utilized at this time."
[04:54:23] <gilberth> It's a pity. The approach I used before Closure was written in a partly functional style. I would memorize all function calls and that way had an implicit display list and updating the display for a modified DOM was blazing fast. Really fast. On a 200MHz machine, with just 64MB RAM. And this approach could be parallelized trivially.
[04:56:00] <gilberth> Think incremental redisplay on steroids.
[04:56:39] <gilberth> Perhaps I find a copy and resurrect it.
[04:58:35] <gilberth> It's really silly, when you read the sources of WebKit e.g. all reasoning what needs to be recomputed and updated on a certain DOM change is written manually. I didn't need that approach, the memo would know, because it recorded the whole computation tree, with its dependencies. Also: That way you couldn't miss any recomputation needed.
[05:00:40] *** Quits: X-Scale (~ARM@31.22.167.45) (Ping timeout: 256 seconds)
[05:00:43] <gilberth> I'm still after that, because I want a modernized CLIM. And I always said, that we should not confuse display lists with typesetting and have ubiquitous typesetting for our user-interface and that CSS actually is a simple, yet workable box model.
[05:01:16] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[05:01:38] <gilberth> Actually I started to implement CLIM because of my failed browser project. I needed a GUI.
[05:02:29] *** X-Scale` is now known as X-Scale
[05:03:32] <hayley> Took you a while to get defun lines in CSS though.
[05:03:33] <moon-child> gilberth: hmm, I would imagine a fairly simple tree where when you update one node, if its size changes you ask its parent to lay itself out again, and repeat until fixedpoint.  But from what you say I gather there is more to it?
[05:03:53] <moon-child> gilberth: 'box model' no love for constraint-based? :)
[05:04:10] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[05:05:13] <hayley> Speaking of bandwidth and the coffee compiler club, can I cite someone's story at the CCC? Someone said that ZGC blew their memory bandwidth and the allocation rate dropped 20x while GCing.   
[05:05:37] <gilberth> moon-child: (a) it's funny that after almost 30 years contraint based it getting fashionable, and (b) A box model still is good for typesetting.
[05:07:36] <gilberth> moon-child: When you love constraint-based, have a look at Garnet. It drives that concept way further than just using it for layout. Gadgets are entirely build upon that and there is a Lisp extension to have constraint computation and the system remembering dependencies for quick update. Heck, it even has support for animations, in the 90s.
[05:10:19] <gilberth> moon-child: (c) for layout of frames -- not text -- I actually favor something constraint based.
[05:11:43] <moon-child> gilberth: garnet looks interesting!  I will look at that later
[05:12:40] <moon-child> 'layout of frames -- not text -- I actually favor something constraint based'  hmm, that is my intuition too, but i feel like that can run into problems.  Say you have columns of text and you embed an image in the middle, so you have to reflow the text around the image and that changes where you put both the text and the image.  Well, tex's solution is running to a fixedpoint which is obviously
[05:12:42] <moon-child> not tenable ...
[05:14:45] <gilberth> I don't see where the trouble is. And TeX is very static, when you want text to flow around an image, you need to specify exactly where the image is. TeX cannot really adapt nicely to different available margins.
[05:16:04] <moon-child> well, one obvious problem is that you can get stuck in a loop
[05:16:35] <moon-child> I suppose if you limit your constraint-expressing language enough that it's guaranteed to terminate it would work
[05:17:03] <hayley> I got information on the university startup thing.
[05:17:12] <gilberth> How would you specify where the image has to go? You said "middle", but CSS does it fine with left or right with floating boxes. CSS does fine, implementations still struggle to follow the spec.
[05:17:19] <moon-child> but you want not only 'guaranteed to terminate' but 'terminates in a reasonable amount of time', which is harder.  See: cpp
[05:19:15] <hayley> It's not awfully clear if the startup funding applies to the ideas we made at the hackathon (I already published an implementation which is incomplete but still very fun), or to new ideas.
[05:19:27] <hayley> "Starting with FounderHUB, a 5-week program designed to churn that winning idea into something that is validated, both problem and solution."
[05:19:57] <hayley> Then there's another 12 week program where they do...more preparation and then I pitch to get up to $22,500 funding.
[05:20:01] <gilberth> Well, if you think about TeX paragraph layout, it really is a search for an optimal solution, which makes it pretty expensive, as in theory you need to consider each and every break opportunity been taken or not, which is O(exp).
[05:20:28] <hayley> IIRC there is memoization which brings it down to O(n^2) but that's also not cheap. 
[05:20:57] <hayley> https://twitter.com/KenHatesSoftwar/status/1460424794126516230 "You can literally wiggle the mouse cursor over the sidebar divider in Finder and watch its memory usage go up by a couple MB every time the cursor changes" "But we're stuck with ARC instead of a full tracing GC because the latter takes too much memory."
[05:21:01] <moon-child> yeah.  But if you're sufficiently incremental and your paragraphs are reasonable length, it should (?) be workable in most cases
[05:21:09] <gilberth> TeX uses all sorts of tricks. And it's better than O(n^2).
[05:22:27] <gilberth> Still pretty expensive, but our machines are really fast. Remember running TeX on an 16MHz machine?
[05:23:20] <gilberth> And in general I believe for "online" use you could get away with finding just a good solution.
[05:24:21] <gilberth> TeX already cuts a lot of obviously bad solutions, like breaking while the line is not yet any where near full.
[05:24:55] <moon-child> I will say, I accept the necessity of caches, but I object to them on aesthetic grounds.  This is why I want to render curves on-gpu; not because it is faster (except in a few rare circumstances), but because it is fast enough that I do not have to care about caching stuff
[05:25:05] <moon-child> (not that I am so naive as to think imgui makes any sense)
[05:25:30] <gilberth> You could start with a non-TeX solution and just break when the next word doesn't fit. Then twiddle a little by breaking earlier and see, if the paragraph gets more even. You can stop anytime and have a valid solution.
[05:27:20] <gilberth> I wonder how long it'll take browser engines to offer the TeX paragraph layout algorithm like my ancient browser did.
[05:27:21] <moon-child> and stop if you exceed frame budget?  but you would like to eventually get to optimal layout.  So if you present suboptimal layout on the first frame and then fix it the second frame, that's worse imo
[05:28:02] <moon-child> like how some website will show first a font that you already have installed, then load web font and switch to it
[05:28:08] <moon-child> *some websites
[05:28:58] <gilberth> moon-child: Yes, you don't want to change layout, once you decided for a solution. But online use in say a Listener should favor responsiveness over a perfect layout. Its not like you will print thousands of copies of that.
[05:30:34] <moon-child> eh, you send thousands of copies, one to each user's computer; it amounts to the same thing
[05:32:02] <gilberth> It's also a question of your data structures. You only need to really typeset what is visible. However, when you don't know the height of paragraphs not displayed, and thus not typeset, you must say good bye to the notion of a fixed y-coordinate measured from a (0,0) position. Both what is above and below your current viewport may shift, when typeset.
[05:32:31] <gilberth> moon-child: My Lisp Listener is not broadcasted.
[05:33:04] <gilberth> At least I hope so :-)
[05:33:10] <moon-child> gilberth: I think position relative to parent bounding box is sensible.  That way you may easily move a node without recomputing its children
[05:34:15] <gilberth> moon-child: This is what you always want to do. It's only silly McCLIM which doesn't keep parent relative positions.
[05:35:03] <gilberth> What I tried to say was, that your position is better relative to your siblings, too.
[05:35:51] <moon-child> ah, hmm, I see
[05:36:06] <gilberth> When I look at just some random paragraph and only it is typeset, I don't know the exact vertical space above or below that paragraph.
[05:36:22] <moon-child> if you do that just for something like hbox or vbox--list of things above/below or left/right of each other, you can do it by switching from a tree to a lattice
[05:36:35] <moon-child> idk if that's the most sensible though
[05:37:18] <gilberth> The scrollbar could be an estimate on volume and you would typeset on demand. You could even do that in the background and typeset a safety distance ahead and back, so that near scrolling is instant.
[05:38:40] <gilberth> I rather believe we should say good bye to the whole notion of a display list. The typesetter is the display list, or rather memorization.
[05:38:53] <moon-child> yeah, first-fit will probably be close enough to the height of a paragraph
[05:39:14] <moon-child> and scrollbar height is always only a suggestion if content is allowed to change in response to scrolling.  Ex infinite list (cf spreadsheet or w/e)
[05:39:53] <gilberth> Sure, and that will be quick. But you also want to skip kerning and subpixel adjustment and estimate fixed char widths, too. The former is pretty expensive.
[05:39:55] <moon-child> (though there's an argument to be made that 'content is allowed to change in response to scrolling' is a bad idea..._)
[05:40:21] <gilberth> When I never have seen that content, would I notice?
[05:40:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:40:36] <moon-child> gilberth: kerning can be parallelized... :)
[05:41:21] <gilberth> Sure, but I would need to do with an estimate anyway, so I could as well do it real quick.
[05:41:59] * moon-child nods
[05:42:27] <gilberth> Even sth simple as a HTML/CSS renderer is surprisingly expensive already. People have spend thousand of man-years to make it quick.
[05:44:50] <gilberth> Oh and don't forget hyphenation. That isn't too cheap, also. And you really want hyphenation.
[05:44:56] <moon-child> yes!
[05:46:43] <moon-child> 'surprisingly expensive' in fairness--you praise css; but I think many of the things html/css do are redundant.  The main point of graphical presentation (beyond text) to me, is to show relationships.  Text is sufficient to show a (potentially-filtered) list of nodes or edges.  But to show relationships you need something graphical.  I don't think 'represent relationships' has been a primary
[05:46:45] <moon-child> priority of the people designing the web
[05:47:59] <moon-child> vs 'push ads as efficiently as possible'
[05:48:21] <gilberth> It also is not a good fit for UIs. CSS comes from the typesetting world.
[05:50:02] <gilberth> Still. CLIM already has some typesetting macros, like formatting a table. I want that to be ubiquitous.
[05:50:49] <gilberth> And I would like to abolish the distinction between a gadget, a sheet, and what CLIM calls an output record. CLIM is an odd hybrid, and it shows.
[05:51:05] <moon-child> clim 3 when
[05:51:24] <gilberth> Name is taken. I would need another name.
[05:52:08] <moon-child> I thought they gave up on that?
[05:53:28] <gilberth> moon-child: Seriously, I still need to finish my Silica, which is CLIM without the presentation type stuff. This should be the basis for any GUI, be it CLIM, or not. Actually a layer to address your host window system and your host standard gadgets.
[05:54:32] <gilberth> I am not quite sure, what I'll do with CLIM per se. Perhaps, as CLIM2, is free, albeit not particular good, I borrow from that to have a CLIM-2 compatible thing, which works.
[05:55:07] <moon-child> why do you want to have something compatible with clim2?
[05:55:35] <gilberth> moon-child: Marketing and user base.
[05:55:43] <moon-child> do you need such things?
[05:56:33] <gilberth> Actually I would care, because it saddens me that there still is no de facto standard GUI for Lisp.
[05:57:18] <gilberth> But: I will clearly mark the border between the somewhat alien presentation based UI and the classical gadgets, panes, some graphics part.
[06:01:56] *** Joins: Catie (~user@user/catie)
[06:42:00] <hayley> CLIM 2 episode 1
[06:44:00] <hayley> https://www.youtube.com/watch?v=tolxXaluJv0 "Now can we go back to digital video? *video quality improves* Thank God."
[06:44:00] -ixelp- The Macintosh 512K - YouTube
[06:46:19] <hayley> "No, opening second hand equipment does not count as an unboxing video." Funny guy.
[07:01:29] <gilberth> I always find the keyboard curious, as it lacks cursor keys. But then cursor keys weren't that common.
[07:02:44] <hayley> Smalltalk-80 doesn't use cursor keys either. You have to point at everything. 
[07:05:15] <hayley> Very fun if you use a Wiimote :)
[07:07:18] <gilberth> Well, I try to avoid using the mouse because its slow. I try to avoid using cursor keys also, because they are slow, too. It's much more convenient for me to use c-f, c-b, c-n, c-p instead.
[07:08:36] <gilberth> Oh wait! The Mac keyboard has no control key?
[07:11:38] <moon-child> CLIM can't count to 3
[07:11:50] <moon-child> gilberth: cursor keys are not terrible, if you have a good keyboard :)
[07:12:18] <gilberth> Still off the home position.
[07:12:36] <moon-child> so are b, n, and p
[07:13:06] <gilberth> You don't know my home position. :-)
[07:13:13] <moon-child> :D
[07:13:23] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[07:13:32] <moon-child> on my keyboard, the arrow keys are right below cv and m,.  So it's probably a similar amount of effort to reach those as ytbn
[07:14:06] <moon-child> (diagonal vs double-distance.  Not very bad either way, and only one keypress instead of a combination)
[07:14:08] <gilberth> Where is your space bar then?
[07:14:47] <moon-child> thumb clustre
[07:15:01] <moon-child> along with ctrl,alt,shift,super,esc
[07:15:20] <moon-child> https://kinesis-ergo.com/wp-content/uploads/kb600-oh-fullsize.jpg
[07:15:48] <gilberth> Oh no! A split keyboard.
[07:16:13] <moon-child> gilberth: I have toyed with the idea of getting a pair of one-handed maltrons--one for each hand
[07:18:03] <gilberth> I am not brave enough for such solutions.
[07:20:29] <moon-child> yeah, I'm not seriously considering doing that.  But the split keyboard is great, imo.  I don't think I can ever go back to hitting ctrl/alt/shift/super/esc with my pinkies
[07:20:35] <moon-child> and ortholinear is great too
[07:22:11] * hayley will take one Mellotron per hand
[07:22:43] <gilberth> jwz once posted a photo of the two halves of a split keyboard mounted to the left and right hand side of a chair. At a position where your hands are if you just let your arms go and pointing down. Can't find it.
[07:23:45] <gilberth> But he suffers from -- what it's called again? -- chronic wrist pain from too much touch typing. Can't hack anymore.
[07:25:28] <moon-child> somewhat similar, I wanted one of these https://moonrim.io/.  Not mounted on the side of a chair, but still has hands angled in instead of down
[07:28:26] <moon-child> I also want a datahand.  But that is probably a pipe dream
[07:29:34] <gilberth> A datahand? What's that?
[07:29:59] <moon-child> https://upload.wikimedia.org/wikipedia/commons/b/b5/DataHand_overhead_view.jpg  this
[07:30:13] <moon-child> instead of moving your fingers around, you keep them in place and click them up/down/right/left
[07:30:30] <moon-child> err, I guess north/south/east/west/down
[07:32:20] <gilberth> Clicking left and right feels awkward to me.
[07:33:21] <Qwnavery> abandon mouse, return to punch cards
[07:33:44] <gilberth> It feels like I have little motor control for left and right finger motion.
[07:34:18] <moon-child> I mean, you have to so the same thing to type tyghbn.  But yeah.  I wonder if a scheme where you go down/up multiple times would work, though I bet it would make certain combinations much harder
[07:34:21] <gilberth> Qwnavery: You still need to type to punch those cards.
[07:35:42] <Qwnavery> gilberth: nuh-uh! use one of those handheld hole punches, no keyboard required.
[07:37:28] <gilberth> moon-child: When I reach out on a regular keyboard, it's more like I spread all fingers or move the whole hand with the wrist stationary. I have trouble moving just one single finger and imagine applying horizontal force.
[07:39:00] <gilberth> It's more like fingers are made to open/close and I am fine doing that with a single finger alone. Not so in the other direction.
[07:39:38] <moon-child> bending from the wrist sounds really unergonomic.  That said, examining what I do, it looks like I change angle slightly--half from the knuckle half from the wrist--and curl/straighten the finger joints
[07:40:44] <moon-child> with only a slight amount of lateral motion on the finger itself
[07:40:48] <moon-child> distributing the load, I guess :P
[07:42:33] *** Quits: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 250 seconds)
[07:43:34] <gilberth> Well, I watched, what I do to e.g. reach out for the backspace key. The hand rotates around the wrist. The arm doesn't really move much. I use a whisk the same, arm doesn't move while stirring things.
[07:45:40] <moon-child> well, whisk is different, because you're not doing anything with your fingers, so less potential for rsi
[07:46:04] <moon-child> trying a flat keyboard, I move my whole hand somewhat to press backspace and esc, but twist it when holding modifiers
[07:46:09] <gilberth> I am safe from rsi. My home position is different.
[07:46:34] <moon-child> oh?
[07:47:42] <gilberth> Yes, hands are straight and not angled in my home position. It's like | \ and not like /\
[07:48:41] <gilberth> left arm and hand are 90° relative to space bar and right hand and right arm are at an 45° angle wrt to space bar in home position.
[07:49:34] <moon-child> that's an improvement over standard positioning but ... 'safe' idk
[07:50:13] <gilberth> Well, I type whole day for more than 30 years now without any trouble.
[07:50:47] <hayley> I'll probably break my hands first on this damn mouse with a broken left button.
[07:51:40] <gilberth> hayley: When the left button is broken use the left hand for the mouse and remap mouse buttons in reverse. I once did that, because just that.
[07:51:44] * hayley wants a nice mouse, doesn't want it to glow in the dark or to be branded with "xXX-Gamer-420-epic-noscope-time-XxX" on it.
[07:52:32] <gilberth> Tell me, when you found a mouse that doesn't mindlessly glow.
[07:52:56] <moon-child> get a nice logitech trackball
[07:53:06] <hayley> I think this mouse uses IR optical or something, as it doesn't glow red.
[07:54:13] <gilberth> My wireless mouse must use IR, too. I don't mind the sensor, but I mind intentional blue glow without an other function than to annoy me.
[07:54:22] * hayley wonders what else to get.
[07:54:48] <hayley> I don't feel like going to the city just to get a heatsink and a $20 mouse, admittedly.
[07:55:11] <Qwnavery> unpopular opinion here: use vim-bindings and abandon mice entirely
[07:55:53] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/AzlLZTFgaiMdvamBlnkbKtIf/randall-smith.jpeg >
[07:55:57] <White_Flame> I prefer a telekinetic connection with my computer to refer to things
[07:56:06] <White_Flame> *telepathic
[07:56:08] <moon-child> Qwnavery: mice are necessary for analogue input.  I agree they are way overused
[07:56:17] <gilberth> I have an old copy of OrCAD for DOS, which could be operated without a mouse. But for CAD work I really prefer a pointing device.
[07:56:37] *** Joins: zbrown[m] (~zbrowntnl@2001:470:69fc:105::1:33db)
[07:57:40] <Qwnavery> moon-child: return to GNU Screen, take the absurd minimalist pill
[07:57:57] <hayley> Return to Xerox Alto
[07:58:11] <Qwnavery> hayley: now THAT is a movement I can get behind.
[07:58:15] * hayley uploaded an image: (28KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CDWYUQxgezdGMrOYGibulSnG/alan%20kay.jpg >
[07:58:27] <gilberth> Qwnavery: Can it be operated with punched cards?
[07:58:41] <hayley> ^ me holding the collective imaginations of suckless weenies
[07:58:49] <Qwnavery> gilberth: s/punched cards/a reverse printer/
[07:59:14] <moon-child> Qwnavery: I am colour grading an image.  What should I use but a mouse?  Or do you say I should not grade the colour of images?
[07:59:43] <gilberth> I suggest dials.
[08:00:05] <hayley> I suggest a VR headset and controllers.
[08:00:11] <moon-child> sure, dials would be good.  Where should I get one?  And how will I hook it up to my image editor?
[08:00:45] <Qwnavery> moon-child: write the image from scratch in MIT Lisp Machine Lisp running on a Raspberry pi, vectorize it with a Tektronix 4010
[08:00:53] <gilberth> Idk. One of those oldish HP workstations controlling our pick and place machines had a keyboard with dials.
[08:00:58] <hayley> None of the project ideas seem both affordable and interesting. "Retro gaming?" Hell nah. "Fridge/freezers?" Got one at home. "Smart home?" Parents would kill me. "3d printing?" Can't afford one. "Bluetooth speakers?" Don't want one.
[08:01:25] *** Quits: zbrown[m] (~zbrowntnl@2001:470:69fc:105::1:33db) (Quit: Reconnecting)
[08:01:40] <moon-child> oughtn't a '3d printing' project to build your own 3d printer? :)
[08:01:41] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[08:01:54] <gilberth> You could steer the pick and place head with those dials. One for x, one for y, and one for the head rotation.
[08:02:40] <moon-child> sure.  But presumably you have some slider, and you want to have maximum granularity on the dial.  So you have to specify the bounds of that slider on an ad-hoc basis
[08:02:54] <moon-child> (ok, maybe not maximum granularity, but _configurable_ and _consistent_ granularity)
[08:03:01] <hayley> I also need a new power brick for a synthesizer. Apparently they want $50 for one.
[08:03:12] <moon-child> you could do it, sure.  But a pain
[08:03:28] <gilberth> moon-child: How about a fine and coarse dial?
[08:04:04] <Qwnavery> reverse-engineer a harddrive serial bus so that by spinning the bare metal HDD disks they act as HID devices for x and y
[08:04:06] <hayley> Just use a Theremin imo
[08:04:07] <moon-child> I think a button on the side to change granularity is fine
[08:04:12] <moon-child> no--a dial to set the granularity of the dial! :D
[08:04:47] <Qwnavery> hayley: with volume control, or without?
[08:05:05] <hayley> With volume control, of course.
[08:05:18] <Qwnavery> What might that be used for, might I ask?
[08:05:35] <Qwnavery> Variable-rank multidimentional input?
[08:07:04] <hayley> What the fuck, they want $109 for a 4GB Raspberry Pi 4B too?
[08:07:21] <Qwnavery> wat? AUD?
[08:07:31] <hayley> Yes.
[08:07:42] <Qwnavery> When I got mine it was that much including all the accessories.
[08:07:52] <Qwnavery> Is that just the board by itself?
[08:07:56] <hayley> Hm, the dealer I usually get big orders from has $92.40 with tax. Fuckin' chip shortage.
[08:08:01] <hayley> Yes.
[08:08:30] <hayley> "Developed in the United Kingdom by the Raspberry Pi Foundation to promote teaching of basic computer science in schools." I thought it was designed to bootstrap SBCL and live under a couch.
[08:08:48] <Qwnavery> :P
[08:09:35] <hayley> OTOH, the first board I got from that dealer was DOA and I had to organise a replacement.
[08:10:14] <Qwnavery> I thought the whole chip-shortage meme was artifical due to an influx of demand that was procedually inflated along the supply chain.
[08:10:43] <hayley> https://en.wikipedia.org/wiki/2020%E2%80%932021_global_chip_shortage#Causes has a list of causes.
[08:11:29] <Qwnavery> Dayum.
[08:11:58] <hayley> Oh well, at least I'm not buying GPUs this week.
[08:14:21] <Qwnavery> From my understanding though, like along the chip manufacturer supply chain, they (*were* at least) procedurally increase their chip orders to account for DOIs, Oversupply etc.
[08:14:45] <Qwnavery> They overestimated the demand as a result.
[08:14:56] <hayley> Yeah, that'd help too.
[08:15:32] <Qwnavery> So the actual semiconductor fabs are producing like 100x the number of chips initially demanded.
[08:15:46] <hayley> Ouch.
[08:15:50] <Qwnavery> Dunno if they worked that out though.
[08:16:12] <Qwnavery> Both ways the industry is fucked.
[08:16:30] <Qwnavery> Oversupply or Hyperinflation.
[08:18:20] <Qwnavery> If it's the latter, it's a real worry because median wage hasn't increased, it means chips will become completely unaffordable even to those with the extra cash to spare.
[08:18:46] <hayley> What the hell is a structural heatsink? They all have structure, no?
[08:19:39] <Qwnavery> I'd hope so, what gonna strap half a copper tube to the die with a little bit of thermal paste?
[08:19:57] <hayley> All I can tell from the product listing is "structural heatsinks look larger".
[08:21:46] <Qwnavery> Like that one PC case that's literally a giant heatsink?
[08:22:33] <hayley> .oO(Shopping list: wireless mouse, Pi 4 CPU-sized heatsink. Also I want something to test my compiler on, but the Pi 4 would probably suffice since it can run 32-bit ARM code.)
[08:22:43] <hayley> What's a few orders of magnitude between friends?
[08:26:23] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[08:26:59] <Qwnavery> you wrote a compiler?
[08:27:44] <Qwnavery> who am I kidding, of course. But is the code up on your git, sound interesting.
[08:27:48] <hayley> Not yet. I wrote a fair part of the register allocator for SICL/x86-64, as well as some other things, but the next one will be by myself targeting ARM for sanity.
[08:28:11] <Qwnavery> in lisp or in asm?
[08:28:36] <hayley> The former was Common Lisp, the latter will be a new language.
[08:29:19] <Qwnavery> hm, sounds fun
[08:30:37] <hayley> Features of the latter include lexical closures, macros, cons/car/cdr, transparent modularity via message passing OO, and late binding anywhere I can shove it.
[08:31:01] <hayley> The implementation ideally should have a relatively good compiler with method inlining and optimistic stack allocation.
[08:32:35] <Qwnavery> hygenic macros?
[08:33:00] <hayley> Maybe, though I'd throw in non-hygenic too.
[08:33:11] <Qwnavery> o.o
[08:33:49] <Qwnavery> have you got a special intended purpose in mind for it?
[08:34:53] <hayley> But macros are on thin ice if we want transparent modularity. Absolutely nothing of a macro can be implementation details; the expansion has to be in terms of the protocol, and every module implementing a protocol has to have the same macros.
[08:36:09] <hayley> The alternatives are to re-compile a module for each set of dependencies (look ma, I made g++/rustc/etc!) or to use fexprs (lol).
[08:36:46] <hayley> 1. An actually good implementation of a fully message passing language, as Newspeak doesn't have one, and Self won't build easily these days 2. Laugh at MicroPython weenies
[08:38:40] *** Joins: semz (~none@user/semz)
[08:43:12] <hayley> But I guess it makes sense to have compile time "modules", i.e. interfaces, if we ever want to do type checking or any static analysis.
[08:43:47] <hayley> And then you have a place to stick macro definitions.
[08:45:39] <Qwnavery> I have a lot to learn.
[08:47:24] <Qwnavery> I understand blips of that.
[08:50:04] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[09:17:41] * moon-child resolves to make his own keyboard, with a maltron case and a few dials
[09:18:55] <moon-child> looking at a microcontroller with a 600mhz cpu and 8mb flash...may be enough for clisp or ecl, though I will probably just go with s7
[09:19:53] <moon-child> 18 analogue pins...rather a lot...eh, I'm sure there will be some use for them
[09:31:41] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:34:38] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[09:35:18] *** Joins: ln43 (~ln43@user/ln43)
[09:35:28] <ln43> Good morning everybody
[09:45:12] *** Parts: ln43 (~ln43@user/ln43) ()
[09:58:34] *** Quits: robin (~robin@user/terpri) (Ping timeout: 268 seconds)
[10:09:25] *** Joins: robin (~robin@user/terpri)
[10:09:27] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:09:44] *** Joins: robin (~robin@user/terpri)
[10:11:56] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[10:12:47] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[10:17:17] *** Joins: ln43 (~ln43@user/ln43)
[10:18:21] <ln43> And nothing, today i was trying to start a discussion in the web and game channels but it seems that there are not replies in textual form...
[10:19:09] <moon-child> is there another form of reply?
[10:19:11] <moon-child> dcc audio message?
[10:21:14] <ln43> i was trying to sustain the thesis that php is not bad di per se
[10:21:50] <ln43> ok since it is a simple language it was mostly misused and that's all, so there is a lot of not elegant code all around
[10:22:14] <ln43> but ok, after 10 minutes of php one can do a lot more than after 10 minutes of java
[10:31:24] <ln43> so as happens for all the good things that are still present while the time is passing over the rest (e.g. js and netscape vs explorer and Jscript) all that remains from the past and is still used is quite good compared to the rest
[10:31:52] <ln43> ops the last phrase i messy, sorry for that
[10:31:58] <ln43> is
[10:34:39] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ktwOZvebWAjesnUEixQDblEY/bruhcha.jpg >
[10:34:56] <ln43> good morning hayley
[10:35:12] <ln43> good morning moon-child
[10:35:17] <hayley> PHP does not seem simple to me.
[10:35:56] <hayley> One fun quirk I heard of a few days ago is that function arguments are copy-on-write, which requires you to do some refcounting if you don't want to copy all the time.
[10:44:43] *** Joins: sm2n_ (~sm2n@user/sm2n)
[10:44:56] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[10:49:10] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 256 seconds)
[10:50:33] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:51:21] <dave0> maw
[10:51:51] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:53:40] <hayley> maw
[10:56:09] <dave0> maw hayley 
[10:56:13] <dave0> how's it going?
[10:56:44] <hayley> Not great.
[10:57:24] <dave0> oh what's wrong?
[10:57:43] * dave0 gives hayley a brownie
[10:58:05] * dave0 gives hayley a coffee with a picture in the froth
[10:58:10] <hayley> I suck at cooking, and I've come to the realisation that I really only want to write compilers from now on.
[10:58:45] <dave0> wish i knew how to make a compiler
[10:59:25] <hayley> It's not so much knowledge, it's rather the audience. Most end users, in my opinion, are entitled bastards who will scream their lungs out if you get one thing wrong in your software.
[11:00:23] <dave0> did you forget to carry the one?
[11:00:28] <hayley> But when your audience is more programmers, they're kinda aware that getting everything right is hard, so they're either more sympathetic, or they hate themselves.
[11:00:45] <hayley> Sadly many people choose the latter, but you get the idea.
[11:01:36] <hayley> I always talked about the market for meta-programming tools in the literal sense ("programs that work on programs"), including editors and compilers, to friends, and it seems to be nice due to being a fixed point of sorts.
[11:02:54] <dave0> some guy said that.. "i'd rather write programs that write programs, than write programs"
[11:03:12] <dave0> also
[11:03:27] <hayley> Again, it's more the audience than the actual material.
[11:03:30] <dave0> you're a lisper.. lisp already got it right, no need to reinvent it
[11:04:50] <hayley> Well, what I said back then was that if you made a programming environment that was hard, but somehow people thought it was a good idea (read: C) then you could keep selling add-ons with the same properties indefinitely, and thus get infinite money.
[11:05:22] <hayley> Of course, there isn't infinite money to be had, and people get sick of your shit eventually...
[11:06:59] *** Quits: robin (~robin@user/terpri) (Ping timeout: 264 seconds)
[11:09:48] <dave0> sounds good to get paid from writing programs
[11:15:02] <moon-child> hayley: occasionally I come to the realisation that, since there is little about computers that I care about beyond compilers, there will be little to compile beyond the compiler (and subordinate components--text editor,scheduler,graphics&disc driver).  I try not to do that too often!
[11:15:16] <hayley> Yes, another problem.
[11:15:18] <moon-child> (though--I don't want to spend my life on computer junk, so probably won't get that far even)
[11:17:12] <shka> hi all
[11:27:14] <hayley> hi none
[11:54:52] <moon-child> 'I claim Forth leads to Prolog which leads to ML which leads to Lisp which leads to C which leads you back to Forth'
[12:01:28] <dave0> i'll drink to that!
[12:08:55] <contrapunctus> dave0: here's to the ladies who lunch
[12:10:32] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 268 seconds)
[12:11:50] <dave0> i had to google :-p
[12:12:24] <dave0> it says broadway musical: company !
[12:12:38] *** Joins: johnjay (~pi@192.142.100.50)
[12:16:03] <contrapunctus> dave0: https://www.youtube.com/watch?v=0ILt3dF43-A
[12:16:04] -ixelp- Barbara Walsh - The Ladies Who Lunch // Company (2006 Broadway Revival) - YouTube
[12:20:10] <dave0> she's singing!
[12:20:50] <contrapunctus> lol yes, they do that in musicals ;)
[12:24:55] <shka> not only that, she is good at it
[12:25:27] <hayley> https://www.youtube.com/watch?v=BI9gOtRMogY
[12:25:27] -ixelp- This Town Ain't Big Enough For Both Of Us - YouTube
[12:26:59] <shka> i would rather have something tranquilized
[12:27:00] <shka> https://www.youtube.com/watch?v=nmL7rXt1fvI
[12:27:01] -ixelp- Washer - YouTube
[12:27:16] <hayley> https://www.youtube.com/watch?v=E5p-ceS1qT4
[12:27:16] -ixelp- Blank Frank (2004 Digital Remaster) - YouTube
[12:35:29] <hayley> https://openjdk.java.net/jeps/8277131
[12:35:30] -ixelp- JEP draft: Virtual Threads (Preview)
[12:42:30] <hayley> https://openjdk.java.net/jeps/8263012 special variables in Java???
[12:42:31] -ixelp- JEP draft: Scope Locals
[12:44:10] <moon-child> lol
[12:47:04] <hayley> "The core idea of scope locals is to support something like a "special variable" in Common Lisp. This is a dynamically scoped variable, which acquires a value on entry to a lexical scope; when that scope terminates, the previous value (or none) is restored. However, we don't want our scope locals to have a set() method."
[12:47:45] <hayley> Boo, doing controlled mutation is cool, though I've managed to not ever change a binding rather than rebind.
[12:55:06] <moon-child> well, isn't binding of specials a type of controlled mutation?
[12:55:16] <moon-child> how controlled do you want it to be?
[12:58:22] <hayley> Usually I would compare to e.g. implicit parameters in Haskell. Being able to modify, as well as rebind, would make the comparison very different.
[14:03:57] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[15:16:28] <hayley> https://www.youtube.com/watch?v=sUT2kKZeUpo
[15:16:28] -ixelp- [Vinesauce] Joel - Blue Shell Incident - YouTube
[15:38:23] *** Quits: eschaton (~eschaton@li541-49.members.linode.com) (Remote host closed the connection)
[15:51:33] <dave0> nite all
[15:54:44] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:12:35] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[16:14:21] *** Joins: X-Scale` (~ARM@46.50.0.92)
[16:15:32] *** X-Scale` is now known as X-Scale
[17:13:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[17:15:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:42:29] *** Joins: dra (~dra@2a04:4540:640d:8d00:68ba:6e09:9911:7679)
[17:42:36] <dra> Hello!
[18:07:21] <gilberth> Good morning #lispcafe!
[18:10:52] <gilberth> SBCL is creative with its reader, it does (read-from-string (format nil "(a~Ab)" (code-char 160))) => (|A B|), that is the NBSP is considered a constituent and turns into a regular SP. I am not sure, whether I like that. And I believe that would be even outside of ANSI-CL, but I'll have to read closely, to be definitive here.
[18:17:28] *** Joins: ln43 (~ln43@user/ln43)
[18:21:34] <gilberth> It returns a character for (code-char #xD800), which I don't like either, there is no [Unicode] character with that code point.
[18:29:48] <ln43> https://www.youtube.com/watch?v=8Qx2lMaMsl8
[18:29:48] -ixelp- The Flower Duet (Lakmé) - YouTube
[18:34:44] *** Quits: dra (~dra@2a04:4540:640d:8d00:68ba:6e09:9911:7679) (Ping timeout: 265 seconds)
[18:35:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:40:03] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 265 seconds)
[18:43:50] <shka> dear god
[18:44:08] <shka> C# has preprocessor directives/macros
[18:44:21] <shka> and they work like in C
[18:44:41] <shka> the evil that man do lives on
[18:45:27] <shka> https://www.youtube.com/watch?v=M6JpxDebokM
[18:45:28] -ixelp- Iron Maiden - The Evil That Men Do (Official Video) - YouTube
[18:47:08] <gilberth> SBCL has a lot of those funny characters. (read-from-string "ⒻⓄⓄ") => FOO
[18:48:37] <gilberth> And (read-from-string "℡") => TEL
[18:49:01] <gilberth> Is that a feature?
[18:51:13] <gilberth> Also (read-from-string "Ⅻ") => XII ;why not 12, which would have been nifty.
[18:52:12] <gilberth> I really don't like that.
[18:57:29] <shka> gilberth: oddly cute "feature"
[18:59:29] <gilberth> It also does (read-from-string "ﬁ") => FI, but not (read-from-string "ß") => "SZ".
[19:06:03] <gilberth> When I say (defpackage :fi) (read-from-string "ﬁ::x"), I get FI::X, why doesn't (read-from-string "🆑:cons") yield CONS then? That would have been cute.
[19:06:40] <gilberth> It's surprising and inconsistent.
[19:15:46] <gilberth> Further: (read-from-string "⅓") => 1⁄3, which is not a ratio. When it would turn that into 1/3, like Raku does, that would have been nice.
[19:18:32] <gilberth> Anyhow, someone had too much time on his hands.
[19:26:10] <sham1> Do the dedicated Roman numeral codepoints turn into numbers?
[19:26:48] <gilberth> Nope. See above.
[19:33:15] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:34:06] <gilberth> I don't like that ligature business, why is "ﬁ", and "ĳ" expanded, "Ŀ" even, but not "å" or "œ"? "ß" is not regarded as a ligature by the Unicode, but both "ĳ" and "œ" are. "ĳ" is expanded, "œ" is not.
[19:41:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:50:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:57:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:15:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:16:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:26:20] *** Quits: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net) (Quit: Ex-Chat)
[20:29:36] <sham1> Well some languages use œ as an actual letter, like French, while ij is still considered a ligature even in something like Dutch where it's a digraph
[20:31:58] <sham1> We've been over this before, but yeah. People don't consider things like ß, å, ä, œ, æ or ø as mere ligatures anymore
[20:38:12] *** Joins: random-nick (~random-ni@87.116.165.220)
[20:40:10] *** Joins: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:44:13] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[20:49:03] *** Joins: treflip (~user@95.79.32.99)
[21:02:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:12:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0)
[21:13:47] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: later)
[21:18:04] <gilberth> This distinction is somewhat arbitrary. And Unicode calls "ĳ" a ligature. And things like "ø" or "å" or "ö" or "ä" are never a ligature. The latter are outright different letters because they sound very different from "o" or "a". My point was that SBCL's handling of this is inconsistent.
[21:19:53] <gilberth> While we are at it: "ß" and "ss" sound the same, although "ß" is considered a letter in Unicode. Which I argue is not.
[21:21:47] <gilberth> Hence: An utter mess.
[21:33:44] <sham1> Human language
[21:34:05] <gilberth> Still, SBCL is inconsitent IMHO.
[21:35:54] <selwyn> good morning everyone
[21:36:24] <gilberth> selwyn: You adapted your sleeping pattern?
[21:38:52] <selwyn> uh
[21:38:56] <selwyn> a little bit actually
[21:39:02] <selwyn> not planning to make it permanent
[22:00:55] <selwyn> i did have a nocturnal sleeping pattern for a while and i absolutely hated it
[22:01:10] <selwyn> though it was not really out of choice
[22:01:25] <selwyn> i can see how you could hack best during early hours of the morning though
[22:01:45] <selwyn> iirc drmeister does most of his coding between 12 and 3am
[22:02:55] <gilberth> It's pretty lonely to be awake when everybody else sleeps, but, yes, you can concentrate well.
[22:04:47] <gilberth> In a city it's ok, as you still hear some other people even in the middle of the night. It depressed me in my house though, as I felt like the last human left, while the whole damn little town was asleep and there was complete silence and darkness around.
[22:06:17] <gilberth> My cousin has a nocturnal sleeping pattern too, as this runs in our family. Although I am perhaps the most extreme. But they say that my grandfather was like me, getting to bed at sunrise.
[22:06:25] <selwyn> so it is not out of choice?
[22:07:59] <gilberth> Remind me, that when --- as unlikely this may sound --- some woman would find me interesting, I would only engage when she is more a nocturnal type too. As my wife would want to crash at 22:00, while 21:00 is the time of day I have the most energy. Not a good fit.
[22:09:09] <gilberth> selwyn: Nope. It's my natural sleeping pattern. One that my body like most and I feel most energetic and productive with.
[22:10:09] <gilberth> Always has been. And perhaps will never change. I am lucky that I do not need to work for food.
[22:20:50] <shka> https://www.youtube.com/watch?v=mvdQcDDUV1o
[22:20:50] -ixelp- Russian Anti-Satellite Weapon Causes Emergency On Space Station - YouTube
[22:20:53] <shka> fucking russians
[22:23:37] <selwyn> didnt china blow up a satellite in like 2009
[22:23:40] <selwyn> how is this different
[22:25:52] <shka> selwyn: this is even worse honestly
[22:26:12] <shka> because China destroyed satellite higher up
[22:26:16] <selwyn> right
[22:26:27] <shka> which means that it will take longer for those debris to decay
[22:26:36] <selwyn> um
[22:26:37] <shka> BUT they are unlikely to hit ISS
[22:26:39] <selwyn> you mean fall to earth?
[22:26:42] <shka> yeah
[22:26:51] <shka> well, mostly burn in the atmosphere 
[22:26:59] <gilberth> The Russians destroyed a satillite?
[22:26:59] <selwyn> sure
[22:27:13] <shka> gilberth: yup
[22:27:21] <shka> fucking stupid action
[22:27:51] <shka> also, to quote the answer from the Russia, back in the 2007
[22:28:07] <shka> "reports on the Chinese anti-satellite missile test "exaggerated and abstract", reminding at the same time, that Russia always was against the militarisation of space."
[22:30:15] <shka> wiki says that fragments from 2007 test passed 6 kms away from the ISS
[23:02:37] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[23:05:10] *** Quits: molson (~molson@24-220-198-232-dynamic.midco.net) (Remote host closed the connection)
[23:13:45] *** Joins: Catie (~user@user/catie)
[23:14:45] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0) (Quit: Leaving)
[23:20:04] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[23:22:57] *** Joins: minion (~minion@common-lisp.net)
[23:33:53] <selwyn> whats the war use for this
[23:33:56] <selwyn> down gps satellites?
[23:39:51] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0)
[23:45:43] <gilberth> Perhaps surveillance satellites. Without those, the enemy would not know what you're up and where your weapons are.
[23:48:23] *** Quits: Catie (~user@user/catie) (Ping timeout: 264 seconds)
[23:56:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0) (Quit: Leaving)
[23:59:23] *** Joins: Catie (~user@user/catie)
