[00:01:59] *** Quits: squeek502 (~squeek502@user/squeek502) (Read error: Connection reset by peer)
[00:04:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[00:05:48] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[00:06:25] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[00:07:34] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[00:09:21] *** Joins: arkurious (~arkurious@user/arkurious)
[00:22:02] *** Joins: rgrinberg (~textual@2806:101e:7:def:9c0d:c444:6765:d1db)
[00:30:17] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[00:53:46] *** Joins: squeek502 (~squeek502@user/squeek502)
[00:58:04] *** Quits: rgrinberg (~textual@2806:101e:7:def:9c0d:c444:6765:d1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:05] *** Quits: yeti (~username@user/yeti) (Read error: Connection reset by peer)
[01:00:49] *** Joins: yeti (~username@user/yeti)
[01:47:51] *** Joins: notzmv (~zmv@user/notzmv)
[02:02:13] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[02:03:49] *** Joins: Techcable (~Techcable@168.235.93.147)
[02:18:18] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:d897:2052:df35:5fc4) (Remote host closed the connection)
[02:18:36] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:d897:2052:df35:5fc4)
[02:25:47] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 268 seconds)
[02:27:53] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[02:38:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:48:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 268 seconds)
[02:53:04] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:56:30] *** Joins: rgrinberg (~textual@187.223.23.238)
[03:22:29] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[03:32:47] *** Quits: duck2 (~duck2@146.185.156.161) (Quit: Ping timeout (120 seconds))
[03:33:15] *** Joins: duck2 (~duck2@146.185.156.161)
[03:39:57] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[04:24:51] *** Joins: livoreno (~livoreno@user/notzmv)
[04:39:54] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Remote host closed the connection)
[04:40:13] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:53:57] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[04:58:41] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[05:04:50] *** Joins: Techcable (~Techcable@168.235.93.147)
[05:26:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[05:26:38] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:27:04] *** Joins: Colt (~Colt@user/colt)
[05:32:17] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[05:36:35] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[05:36:43] *** Joins: ndwk (~ndwk@2607:fea8:c320:ce00:d4d9:5e79:9a4:e934)
[05:36:43] *** Quits: ndwk (~ndwk@2607:fea8:c320:ce00:d4d9:5e79:9a4:e934) (Changing host)
[05:36:43] *** Joins: ndwk (~ndwk@user/ndwk)
[05:43:39] <leon-p> just wondering, are there any zig bindings (or pure implementations) of anything like libmagic? Basically I am interested in rough heuristics to decide whether a file is more likely to contain human readable text or binary data.
[05:44:57] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[06:45:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:157f:fad:702e:d7a) (Ping timeout: 240 seconds)
[07:02:33] *** Quits: ndwk (~ndwk@user/ndwk) ()
[07:07:03] *** Joins: rgrinberg (~textual@2806:101e:1:83af:99bc:509:eb58:3474)
[07:07:37] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[07:20:42] *** Joins: xd1le (~xd1le@user/xd1le)
[07:49:21] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:01:52] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2cf4:5f96:7154:f400)
[08:10:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:16:19] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[08:36:30] *** Joins: earnestly (~earnest@user/earnestly)
[09:07:29] *** Quits: zkanda (~zkanda@box.makean.art) (Quit: The Lounge - https://thelounge.chat)
[09:08:08] *** Joins: zkanda (~zkanda@box.makean.art)
[09:16:58] <mischief> leon-p: should be straightforward to just use libmagic?
[09:18:09] <leon-p> mischief: that's what I ended up doing, but I though it may be a good idea to ask if there was anything more ziggy first :)
[09:19:38] <mischief> that is what i like about zig, binding to c is like using superglue instead of eating a bucket of wheat paste
[09:41:50] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[09:46:30] <leon-p> actually turns out that for my use case I can also just read the first few bytes and check if they are valid utf8. A bit hacky but works quite well.
[10:06:08] *** Quits: rgrinberg (~textual@2806:101e:1:83af:99bc:509:eb58:3474) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:30:41] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 250 seconds)
[10:50:50] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[11:14:15] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[11:21:33] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[11:27:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2cf4:5f96:7154:f400) (Ping timeout: 240 seconds)
[12:00:16] *** Joins: frett27 (~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd)
[12:57:14] *** Quits: ur5us_ (~ur5us@203.86.198.200) (Ping timeout: 268 seconds)
[12:58:01] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[13:56:34] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:28:53] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[14:30:47] <rubin55> merry christmas all, quick question. I'm playing around with Zig, specifically with trying to call into a c library. As an example, a cImport stdio.h and try to do c.printf("something\n").
[14:31:24] <rubin55> Zig gives me a quite good error message, saying that "libc headers not available; compilation does not link against libc"
[14:31:44] <rubin55> So: if i do zig build run, what do I need to pass additionally to have the run link against libc?
[14:35:14] <rubin55> Experimenting with cImport, am I doing something  obviously wrong? https://www.irccloud.com/pastebin/Lv1Bumvz/hello.zig
[14:35:59] *** Quits: frett27 (~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd) (Quit: Leaving)
[14:38:46] *** Joins: frett27 (~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd)
[14:38:50] <frett27> zig build-exe test.zig -lc
[14:39:44] <frett27> compiles fine, you must change :   _ = printf ...
[14:40:02] <frett27> because you need to handle the return of the printf function in zig
[14:41:40] <frett27> https://pastebin.com/v36g3RZG
[14:42:39] <frett27> better code : devs have to handle the error return of a function, and handle the possible bad encountered cases, .. it saves a lot of time
[14:43:10] *** Joins: earnestly (~earnest@user/earnestly)
[14:45:57] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[14:54:42] <rubin55> Alright, that seems to work!
[14:56:50] <rubin55> So I'm experimenting a bit further, with libsodium, I'm getting a segmentation fault. I'm trying out this: https://www.nmichaels.org/zig/wrap-sodium.html
[14:57:37] <rubin55> Getting segmentation fault on call to c.sodium_init() https://www.irccloud.com/pastebin/7dQnuRO7/sodium.zig
[14:58:27] <rubin55> What I get after executing ./main https://www.irccloud.com/pastebin/Mzf5eQwV/stdout.log
[14:58:48] <rubin55> (using   zig build-exe main.zig -lsodium   to compile)
[14:58:57] <frett27> use: gdb main
[14:59:10] <frett27> and batcktrace to see where the core dump occurs
[15:02:46] <rubin55> Mm, even though the main executable has symbols, I don't seem to get very useful backtrace..
[15:03:26] <rubin55> Am quite new to gdb, maybe doing something obviously stupid. https://www.irccloud.com/pastebin/obCSpfpj/gdb.out
[15:03:56] <frett27> works fine, on my side
[15:03:58] <frett27> [nix-shell:~/iotmonitor/dev]$ zig build-exe sodium.zig  -lc -I/nix/store/ky7awdidglv88q964bsjr96s8bjsy1wz-libsodium-1.0.18-dev/include/ -lsodium
[15:03:58] <frett27> [nix-shell:~/iotmonitor/dev]$ ./sodium 
[15:03:58] <frett27> info: All your codebase are belong to us.
[15:03:58] <frett27> warning: Sodium init said: void
[15:03:58] <frett27> [nix-shell:~/iotmonitor/dev]$ 
[15:04:16] <frett27> i stripped the error.zig file (i don't have)
[15:05:12] <frett27> https://pastebin.com/vSzWeUtF
[15:05:56] <frett27> how did you compile the sodium.zig ?
[15:06:09] <rubin55> zig build-exe main.zig -lsodium
[15:08:05] <rubin55> I'm running zig from master, might that be a bit too bleeding edge? I noticed that zls (the lsp language server) did not compile with 0.9, hence master
[15:09:34] <frett27> i'm using the 0.9.0, normally it should work.
[15:09:46] <rubin55> Let me retry with 0.9.0
[15:10:14] <frett27> seems that the entry point is adress 0, from gdb
[15:11:17] <frett27> generated elf is not properly formed
[15:11:33] <frett27> may be a configuration or linker issue
[15:13:29] <rubin55> 0.9.0 does the same, indeed. Mm. I'm running void linux, haven't had something like this before (I can compile stuff normally, both using clang and gcc)
[15:14:21] <frett27> what arch ?
[15:14:30] <rubin55> amd64
[15:15:47] <frett27> what is the result of ldd main ?
[15:15:58] <frett27> and objdump -x main
[15:17:24] <frett27> on my side, i had to add the -lc argument, 
[15:17:32] <rubin55> Output of objdump -x main https://usercontent.irccloud-cdn.com/file/wbIcS4hA/objdump.out
[15:17:33] <frett27> otherwise it does not compile
[15:18:16] <rubin55> I didn't (i.e., it compiles with zig build-exe src/main.zig -lsodium)
[15:18:31] <rubin55> hah!
[15:18:49] <rubin55> with -lc it works, however, I get no error without -lc
[15:19:13] <frett27> hum ... may be the issue, libsodium needs c library
[15:19:36] <rubin55> What kind of error do you get when you omit -lc?
[15:20:12] <frett27> my compile error, when not giving the -lc
[15:20:13] <frett27> https://pastebin.com/T80FUnKQ
[15:20:17] <rubin55> off to eat for a bit.. do you think I should file a bug report?
[15:20:49] <frett27> in your case, the needed C functions are not dynamically linked, so ... 0x00000 addresses when lib sodium call the libc
[15:21:47] <frett27> rubin55: think, a bit analysis before, you level up your knowledges and give a more precise context
[15:22:13] <frett27> i'm running on ubuntu, don't know void linux, 
[15:30:49] <frett27> rubin55: if you change the zig version, takes care to clean the zig-cache folder (it may preserve some old precompiled versions)
[15:31:22] <frett27> rubin55: that may cause the non error raise issue encountered
[15:32:43] *** Quits: Arnavion (arnavion@user/arnavion) (Quit: Arnavion)
[15:36:42] *** Joins: Arnavion (arnavion@user/arnavion)
[15:41:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[15:47:44] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:13:36] <rubin55> frett27: this I did, removed zig-* folders before recompile
[16:15:03] <rubin55> frett27: What I also find strange is that ldd does show libc.so.6 linked in
[16:16:18] <frett27> not in the objdump dynamic section :
[16:16:19] <frett27> Dynamic Section:
[16:16:19] <frett27>   RUNPATH              /lib64:/lib:/usr/lib64:/usr/lib
[16:16:19] <frett27>   NEEDED               libsodium.so.23
[16:16:19] <frett27>   DEBUG                0x0000000000000000
[16:17:19] <frett27> mine includes :
[16:17:19] <frett27> Dynamic Section:
[16:17:19] <frett27>   RUNPATH              /nix/store/c9p3mci4zp74bgm9hv9n904sp5my46ym-nix-shell/lib64:/nix/store/c9p3mci4zp74bgm9hv9n904sp5my46ym-nix-shell/lib:/nix/store/9pzsl6w1cpb3cm1jxw90vfingidjw0ax-libsodium-1.0.18/lib
[16:17:19] <frett27>   NEEDED               libsodium.so.23
[16:17:19] <frett27>   NEEDED               libpthread.so.0
[16:17:21] <frett27>   NEEDED               libc.so.6
[16:17:25] <frett27>   NEEDED               ld-linux-x86-64.so.2
[16:17:27] <frett27>   DEBUG                0x0000000000000000
[16:17:44] *** Joins: livoreno (~livoreno@user/notzmv)
[16:17:48] <Franciman> merry christmas
[16:17:55] <Franciman> and i got this compiler bug
[16:17:57] <Franciman> https://bpa.st/U7VA
[16:17:59] <Franciman> xd
[16:18:11] <Franciman> if you need to see the code
[16:19:44] <Franciman> https://github.com/Franciman/telescope/blob/main/src/compiler/compile.zig#L298 i think this is the problem
[16:20:47] <rubin55> frett27: so, /usr/include/sodium/crypto_hash_sha512.h references stdlib.h (and stdint.h, stddef.h); is seems that zig in your case concludes from that that libc linkage is missing (i.e., the error message "note: libc headers not available; compilation does not link against libc"); I just don't get why zig is not warning me in the same way
[16:21:22] *** Joins: neceve (~quassel@2.26.93.228)
[16:22:43] <frett27> Franciman: can you add the debug symbols ?
[16:24:55] <frett27> rubin55: yep, that's the question
[16:25:45] <rubin55> I'm going to try and compile zig from source instead of binary distro
[16:26:09] <frett27> rubin55: try nix
[16:28:52] <frett27> rubin55: i use this shell.nix   https://pastebin.com/SwnGzQG9
[16:29:16] <frett27> nix install is one liner : https://nixos.org/download.html
[16:29:35] <frett27> then in the shell.nix folder, run : nix-shell
[16:29:51] <frett27> it opens a shell with the 0.9.0 version compiled on your plateform
[16:30:04] <frett27> after a bunch of LLVM13, .. install
[16:30:37] <frett27> it saves me a lot of time when working with lots of source dependencies i wanted to dig in
[16:48:31] <bw> what's the canonical error (in zig) to return from a "reader" for the end of input? (e.g. a slice, a file, etc)
[16:49:09] <bw> is it `error.EndOfStream`?
[16:51:19] <frett27> using the std.io buffered
[16:51:30] <frett27> it returns 0 byte read for eof
[16:51:33] <frett27> from : https://github.com/ziglang/zig/blob/master/lib/std/io/buffered_reader.zig
[16:51:38] <frett27> no error
[16:52:35] <bw> i'm just implementing a `readByte` function (for input to `leb128` functions)
[16:53:00] *** Joins: terminalpusher (~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717)
[16:53:26] <rubin55> frett27: thanks a lot, will definitely give nix a try. In the meantime I created a bug report for it: https://github.com/ziglang/zig/issues/10410
[16:55:47] *** Joins: Dko1905 (~Dko1905@185.156.175.180)
[16:55:52] <Dko1905> Hello!
[16:55:59] <frett27> bw: you're right, my bad, error.EndOfStream when trying to read more bytes that available : https://github.com/ziglang/zig/blob/master/lib/std/io/reader.zig
[16:56:14] <frett27> bw: using streams 
[16:56:41] <Dko1905> Is there any way of getting autocompletion to work in vim or vscode?
[16:57:03] *** Joins: jokoon (~eio@2a01:e0a:542:b20:e00f:eff6:b9e4:3ba9)
[16:57:04] <frett27> Dko1905: zls, 
[16:57:29] <frett27> but afaik, not available yet for the new version 0.9.0
[16:57:58] <Dko1905> frett27: I've installed coc-zig, but it doesn't seem to do anything.
[16:58:53] <Dko1905> I also have zig.vim
[16:59:09] <rubin55> Dko1905: I have it working
[16:59:23] <rubin55> I needed to run zig 0.10.0-dev.62+5b171f446 to compile zls
[16:59:31] <rubin55> (with vim)
[17:00:22] <rubin55> I used zig.vim, vim-lsp, asyncomplete, asyncomplete-lsp and vim-lsp-settings
[17:00:35] <rubin55> (plugins, through VimPlug)
[17:01:12] <rubin55> After installing zig.vim, opening a .zig file prompts you to install a language server, through :LspInstallServer
[17:01:29] <rubin55> This then automatically builds/sets-up zls
[17:01:50] <Dko1905> hmmm
[17:02:07] <rubin55> (note: it specifically did not work with 0.9.0 - zls compile failed)
[17:03:30] <Dko1905> I have zig 0.8 installed
[17:03:33] <rubin55> vim-lsp-settings is really nice! I succesfully set-up an LSP server for 12 of the 13 languages I play around with, seriously easy
[17:05:09] <Dko1905> I already use Coc, I'm not sure if switching away is a good idea.
[17:05:53] <rubin55> Fair enough, at least the above should point you in the right direction + lets you know it's at least possible!
[17:06:40] <Dko1905> thanks
[17:17:57] <Dko1905> When will zig 0.10 be released?
[17:18:35] <ikskuh> in roughly 6 months
[17:18:56] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:19:16] <ikskuh> note that zig-0.10-dev… can be downloaded on the website as a nightly build
[17:19:53] <Dko1905> Will zig receive proper polymorphism?
[17:19:55] <terminalpusher> I hope 0.10 will include <https://github.com/ziglang/zig/issues/1268> so that the inefficient vtables can be replaced by comptime interfaces
[17:20:04] <terminalpusher> Dko1905: exact same question here.
[17:20:10] <ikskuh> Dko1905: do you mean classes and inheritance? no
[17:20:37] <ikskuh> terminalpusher: comptime interfaces and vtables are orthogonal things that cannot replace each other
[17:21:01] <Dko1905> interfaces
[17:21:06] <terminalpusher> ikskuh: you don't think the dynamic dispatch that the allocators rely on can be resolved?
[17:21:18] <ikskuh> not with comptime interfaces
[17:21:22] <ikskuh> what #1268 is proposing is a way to restrict `anytype` arguments to something
[17:21:46] <terminalpusher> yeah, it'd be a great way to solve the issue
[17:21:53] <terminalpusher> I really hope Zig gets something like comptime interfaces
[17:22:01] <ikskuh> this means that everything that uses comptime interfaces would still be duplicated in implementation for each different argument invoked
[17:22:29] <ikskuh> Dko1905: for vtable based interfaces, there's only a single thing missing in the language and that is declaration creation via @Type
[17:22:51] <terminalpusher> ikskuh: do you suspect code size increases?
[17:23:03] <ikskuh> terminalpusher: it will increase per type you pass in linearl
[17:23:10] <ikskuh> same as status quo
[17:23:18] <ikskuh> the only thing that will change will be better error messages
[17:23:19] <ikskuh> tha's all
[17:23:56] <terminalpusher> but the vtables could be avoided that way
[17:24:14] <ikskuh> no
[17:24:30] <ikskuh> vtables are runtime dispatch while #1268 proposes compile time dispatch
[17:25:15] <ikskuh> we have compile time dispatch already
[17:25:16] <terminalpusher> yeah, so with compile time dispatch it should be possible to remove the allocator's runtime dispatch vtables using compile time dispatch, no?
[17:25:24] <ikskuh> yes, but:
[17:25:26] <ikskuh> it will bloat the code
[17:25:31] <ikskuh> so you cannot pass around ArrayList(u8) anymore
[17:25:32] <ikskuh> but
[17:25:34] <ikskuh> you need
[17:25:45] <ikskuh> ArrayList(u8, ArenaAllocator) or ArrayList(u8, GeneralPurposeAllocator) or ArrayList(u8, PageAllocator)
[17:26:03] <ikskuh> this means that basically all of Zig will be a huge template library 
[17:26:10] <ikskuh> because this will make *everything* generic
[17:26:20] <ikskuh> that uses dynamic memory allocation
[17:26:33] <ikskuh> which means that if you have a struct that has an allocator, that struct is now generic
[17:26:41] <terminalpusher> so I suppose the trade off here is between big code size and speed
[17:26:43] <ikskuh> and incompatible to the same struct with a different allocator
[17:27:00] <ikskuh> there isn't much of a speedloss 
[17:27:05] <ikskuh> especially not for allocators 
[17:27:22] <ikskuh> the only allocator that would get substantially faster is the FixedBufferAllocator
[17:27:36] <ikskuh> everything else will only get a tiny fraction of speed 
[17:27:51] <ikskuh> assuming the compiler couldn't inline the allocator call anyways
[17:28:11] <ikskuh> and note that "bigger code" means "slower code"
[17:28:23] <terminalpusher> got it
[17:28:45] <ikskuh> but my main concern here is maintainability
[17:28:59] <ikskuh> i don't want to have more than one arraylist in my code base
[17:29:30] <terminalpusher> I hope there comes up a solution that maybe satisfies both sides somehow
[17:29:33] <ikskuh> i don't even like the comptime Reader/Writer dispatch
[17:29:40] <ikskuh> there won't be
[17:29:53] <bfredl> also with ArrayList you can avoid multiple allocations by pre-allocating a large capacity
[17:30:13] <ikskuh> as there only could be if both solutions would lead to the same machine code
[17:30:24] <ikskuh> but they lead to very different machine code
[17:30:50] <terminalpusher> well I'm looking forward to see how all this plays out in the end
[17:31:46] <ikskuh> i just want my decls in @Type
[17:31:57] <ikskuh> so i can implement stuff like std.mem.Allocator without all that boilerplate 
[17:35:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:35:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[17:35:52] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:53:23] *** Joins: notzmv (~zmv@user/notzmv)
[18:06:02] *** Joins: MartinFromBelgiu (~MartinFro@2a02:a03f:d8ee:9d00:9c24:a80:3c31:737)
[18:07:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:5d5c:8c41:79c4:9b80)
[18:12:30] *** Joins: arkurious (~arkurious@user/arkurious)
[18:13:41] *** Quits: MartinFromBelgiu (~MartinFro@2a02:a03f:d8ee:9d00:9c24:a80:3c31:737) (Quit: Client closed)
[18:14:06] <Dko1905> I'm quite new to zig, how would I convert `[20]u32` to `*u32`?
[18:18:09] <ikskuh> *u32 points to a single element, so you'd just do &val[3] to get the pointer to the 4th element
[18:18:39] <Dko1905> I have the function `pub fn getgroups(size: usize, list: *gid_t) usize`, which accepts a list (as a pointer)?
[18:18:59] <ikskuh> then "*gid_t" is wrong
[18:19:03] <ikskuh> it should be [*]gid_t
[18:19:11] <ikskuh> "[*]" points to multiple elements
[18:19:17] <ikskuh> while "*" points to exactly one :)
[18:19:44] <Dko1905> Well then I found an error in the std.
[18:20:20] <ikskuh> yep
[18:20:51] <Dko1905> What should I do then?
[18:20:57] <Dko1905> Call the syscall manually?
[18:21:30] <ikskuh> the correct thing is: fork zig, change the signature, make a PR
[18:21:40] <ikskuh> which is a cool first contribution to fix bugs
[18:22:54] <Dko1905> Is vim the only editor that has basic auto completion?
[18:23:11] <ikskuh> every editor that uses ZLS can do more than basic autocompletion
[18:23:13] <ikskuh> i use VSCode 
[18:24:32] <Dko1905> seems like i missed that VSCode also works.
[18:24:47] <ikskuh> you have to install both Zig and ZLS extension as well as install ZLS
[18:24:58] <ikskuh> it's not the easiest setup, but also not more than 5 minutes of work
[18:27:05] <Dko1905> I can finally enjoy proper syntax highlighting.
[18:27:26] <ikskuh> but to give you a "quick hack answer" to your question:
[18:27:32] <ikskuh> pass "&arr[0]" to groups
[18:27:38] <ikskuh> but still make the PR! *grin*
[18:35:06] <Dko1905> Why is it std.os.linux instead of std.os.nix|std.os.unix?
[18:39:07] <Dko1905> Oh no, what would -1 be when casted to usize?
[18:40:14] <Dko1905> Seems like the std.os.linux.getgroups function is completely useless.
[18:47:48] <jcmoyer> @bitCast(usize, @as(i64, -1))
[18:48:30] <jcmoyer> maybe better to use isize instead of i64 actually
[18:48:34] <jcmoyer> it does look like that function should return c_int though
[18:53:59] <ikskuh> terminalpusher: The Problem with intrusive comptime interfaces can be seen with std.io.Reader btw
[18:57:57] <terminalpusher> will take a look
[19:10:48] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:d897:2052:df35:5fc4) (Remote host closed the connection)
[19:11:08] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:b03f:919f:5106:21c0)
[19:11:27] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[19:24:52] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:39:23] *** Quits: moog (~moog@107.77.244.157) (Remote host closed the connection)
[19:47:45] <rubin55> :q
[19:47:49] <rubin55> ...
[19:47:51] <rubin55> sorry
[19:47:57] <frett27> :-)
[19:48:14] <rubin55> Betrayed editor usage!
[19:48:48] <frett27> also get some ":q" in markdown files :-)
[19:48:55] <rubin55> hahah
[19:50:11] <frett27> looks like having ^H^H in some messages, *nix legacy :-)
[19:50:27] <rubin55> So true
[19:52:26] *** Quits: jokoon (~eio@2a01:e0a:542:b20:e00f:eff6:b9e4:3ba9) (Remote host closed the connection)
[19:52:46] *** Joins: jokoon (~eio@2a01:e0a:542:b20:e00f:eff6:b9e4:3ba9)
[20:01:53] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[20:03:22] *** Joins: amk (~amk@109.255.169.126)
[20:05:37] *** Joins: pkap (~pkap@193.32.127.238)
[20:13:44] *** Joins: xackus (~xackus@185.15.0.3)
[20:19:13] <companion_cube> ikskuh: are your arguments also applicable to IO streams? :) 
[20:19:54] <ikskuh> wdym with io streams in that case?
[20:20:15] <ikskuh> you mean the performance penalty of i/o vs. virtual call?
[20:20:16] <ikskuh> yeah
[20:24:07] <companion_cube> I mean IO streams being interfaces with virtual calls yeah
[20:24:16] <companion_cube> More flexible this way
[20:25:31] <frett27> ikskuh: what is the virtual call cost vs L1/L2 access ?
[20:26:03] <ikskuh> http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/
[20:26:14] <ikskuh> frett27: roughly 3 times longer
[20:26:43] <ikskuh> companion_cube: yeah, but Reader/Writer are comptime interfaces due to the error mapping
[20:27:43] <companion_cube> That's a good reason, but it implies a lot of complexity for the user... 
[20:28:04] <ikskuh> yeah
[20:28:06] <ikskuh> i don't like it
[20:28:23] <ikskuh> i would be okay with "IoError"
[20:28:27] <ikskuh> and "PermissionError"
[20:29:24] <Dko1905> jcmoyer: I just called getgroups from `@cImport` and created my own wrapper around the C API.
[20:30:21] <frett27> ikskuh: ok, you got it. so if the virtual call is in cache -> cost of a L1 acces ? right ? 
[20:31:58] <ikskuh> yep
[20:32:03] <ikskuh> kinda like that :)
[20:32:09] <ikskuh> you still have a indirect call
[20:32:16] <ikskuh> but that should be predictable
[20:32:24] <ikskuh> also compilers can devirtualize nowadays :)
[20:34:09] <frett27> ikskuh: makes sense, so why is the virtual indirect call focus your attention in design ?
[20:35:39] <ikskuh> wdym?
[20:36:06] <ikskuh> we have two distinct techs (virtual calls vs. comptime reification of functions)
[20:36:23] <ikskuh> and for most stuff, virtual calls are cheaper overall 
[20:36:27] <ikskuh> in my experience
[20:36:39] <ikskuh> but it really depends on the target arch
[20:36:42] <companion_cube> ikskuh: seems like it'd call for an error hierarchy
[20:36:48] <companion_cube> just like with exceptions, except explicit
[20:37:28] <companion_cube> I think it's interesting how C++ and rust both provide ways to choose between virtual and specialized
[20:37:51] <ikskuh> hm?
[20:37:56] <companion_cube> (in rust: either <T: Interface> or (&mut dyn Interface), for example)
[20:38:04] <companion_cube> well it's nice that the user has a choice
[20:38:06] <ikskuh> afaik that's not a thing in C++
[20:38:32] <companion_cube> in C++ you can use a template specialization I think.
[20:38:42] <companion_cube> for a type inheriting from your interface.
[20:38:52] <ikskuh> i mean we can do  that too :D
[20:39:34] <companion_cube> manually, I guess
[20:39:56] <ikskuh> (which is the same "manually" as in C++)
[20:40:24] <companion_cube> in C++ you have a tool to express the interface (an abstract class typically?), then you can specialize manually
[20:40:37] <companion_cube> in zig you still have to manage the vtable yourself, right?
[20:40:46] <frett27> ikskuh: i felt like the virtual call or interface definitions (even if it is reified on comptime), was a non target, so my question was what is the real cost of a virtual call or interface (vtable, COM like interface or C++ indirect table) cost
[20:48:22] <frett27> there is a thought in that way provided by alex : https://github.com/alexnask/interface.zig
[20:48:33] <Dko1905> How would I cast a `c_int` to a `u_size` (knowing that a negative number is impossible)?
[20:49:16] <frett27> @intCast ?
[20:50:05] <Dko1905> yes
[20:51:14] *** Joins: Arw- (~Arwalk@lfbn-dij-1-1321-197.w92-141.abo.wanadoo.fr)
[20:52:14] *** Quits: Arw (~Arwalk@lfbn-dij-1-1321-197.w92-141.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[21:01:42] <ikskuh> companion_cube: yes
[21:02:04] <ikskuh> frett27: it's hard to answer
[21:02:11] <ikskuh> depends on the context and application
[21:02:26] <ikskuh> Dko1905: using @intCast()
[21:02:34] *** Quits: frett27 (~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd) (Ping timeout: 268 seconds)
[21:02:53] <Dko1905> Zig sure is an interesting language.
[21:04:38] *** Quits: terminalpusher (~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717) (Remote host closed the connection)
[21:05:42] *** Joins: frett27 (~frett27@lfbn-lyo-1-612-60.w90-119.abo.wanadoo.fr)
[21:13:58] *** Quits: frett27 (~frett27@lfbn-lyo-1-612-60.w90-119.abo.wanadoo.fr) (Remote host closed the connection)
[21:20:41] *** Joins: frett27 (~frett27@lfbn-lyo-1-612-60.w90-119.abo.wanadoo.fr)
[21:30:30] *** Quits: xiamx[m]1 (~xiamxmatr@2001:470:69fc:105::1:5692) (Quit: Reconnecting)
[21:30:42] *** Joins: xiamx[m]1 (~xiamx@2001:470:69fc:105::1:5692)
[21:30:46] *** Joins: PatriceFreydiere (~frett27@2a01:cb14:5fa:7e00:313b:a8c8:1fa9:f3fb)
[21:31:23] *** Quits: frett27 (~frett27@lfbn-lyo-1-612-60.w90-119.abo.wanadoo.fr) (Read error: Connection reset by peer)
[21:31:59] *** Quits: xiamx[m]1 (~xiamx@2001:470:69fc:105::1:5692) (Client Quit)
[21:32:08] *** Quits: jokoon (~eio@2a01:e0a:542:b20:e00f:eff6:b9e4:3ba9) (Quit: Leaving)
[21:32:11] *** Joins: xiamx[m]1 (~xiamx@2001:470:69fc:105::1:5692)
[21:35:52] *** Quits: PatriceFreydiere (~frett27@2a01:cb14:5fa:7e00:313b:a8c8:1fa9:f3fb) (Ping timeout: 268 seconds)
[21:37:05] *** Joins: PatriceFreydiere (~frett27@2a01:cb14:5fa:7e00:5184:983a:a07d:f5fb)
[21:38:04] *** xiamx[m]1 is now known as xiamx
[21:40:11] <xiamx> Has anyone used zig to write programs that sends http requests? I know there's a zig native library called ziget, and the alternative of just using libcurl, what's your folks' experience? Which one would you use? 
[21:43:04] <ikskuh> zfetch is superb
[21:43:05] <ikskuh> :)
[21:43:11] <ikskuh> by nameless/truemedian
[21:46:20] *** Joins: nyah (~nyah@94.6.71.219)
[21:52:39] *** Joins: terminalpusher (~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717)
[21:56:11] <xiamx> thx ikskuh 
[22:03:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 268 seconds)
[22:07:24] <Dko1905> How should I store a C `char *` in an extern struct in zig?
[22:08:51] <Dko1905> I'm trying to port the passwd struct from https://pubs.opengroup.org/onlinepubs/009695399/basedefs/pwd.h.html
[22:10:35] <Dko1905> Would `pw_name: []u8` work?
[22:14:04] <ikskuh> it depends
[22:14:14] <ikskuh> but [:0]u8 is a good choice 
[22:14:25] <ikskuh> (which explicitly states that the slice is zero terminated
[22:16:24] <Dko1905> Oh no `extern structs cannot contain fields of type '[:0]u8'`
[22:19:34] <Dko1905> I need to use [*:0]
[22:20:55] <Dko1905> Is there a better way of getting string len then calling strlen from <string.h>?
[22:23:20] <gpanders> A [:0]u8 is just a type with two fields, ptr and len. So you can store [*:0]u8 in your extern struct (that’s ptr) and then create a separate len field. If you’re getting the string from C then you’ll have to use strlen, but you can store the result in your len field so that you don’t need to calculate it more than once
[22:23:46] <ikskuh> std.mem.sliceTo(ptr, 0)
[22:27:51] <Dko1905> It works.
[22:27:56] <Dko1905> No reason to change it.
[22:34:42] <Dko1905> There's a funny type that I can't seem to recreate in Zig: "Pointer to a null-terminated array of character pointers to member names." My first thought was `[*:0][*:0]u8`, but that doesn't compile.
[22:39:12] <ikskuh> [*:null]?[*:0]u8
[22:39:17] <ikskuh> would that be
[22:39:47] <Dko1905> Interesting, could you explain what the x part of [*:xxxx] is?
[22:40:08] <ikskuh> it is the sentinel
[22:40:23] <ikskuh> it means that the memory is always guarded by a sentinel value
[22:40:30] <ikskuh> for example, 0 for a NUL terminated string 
[22:41:19] <ikskuh> you can terminate arrays, slices and pointers with a sentinel
[22:41:32] <ikskuh> that sentinel must be a valid member of the element type
[22:44:13] <Dko1905> So the sentinel is just the stop sign? Will sentinel based slices only use the sentinel and not have a len?
[22:44:20] <ikskuh> yes, exactly
[22:44:26] <ikskuh> on the first part
[22:44:35] <ikskuh> on the second: no, they still have the len part
[22:44:45] <ikskuh> but will assert that the sentinel is present on slice[slice.len]
[22:45:44] <Dko1905> That's very nice
[22:47:57] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:b03f:919f:5106:21c0) (Read error: Connection reset by peer)
[22:47:58] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:b03f:919f:5106:21c0)
[22:48:50] <Dko1905> I have an [][]u8, how would I free it using defer?
[22:49:16] <ikskuh> depends on how you allocated it
[22:49:26] <ikskuh> but you can use a for loop
[22:49:37] <Dko1905> What's the difference between [*]u8 and []u8?
[22:49:43] <ikskuh> defer { for(slice) |item| { free(item); } free(slice); }
[22:49:56] <ikskuh> [*]u8 is a pointer to many while []u8 is a slice (ptr + len)
[22:50:12] <Dko1905> Thank you
[22:50:13] <ikskuh> "var slice: []u8" => slice.ptr has the type [*]u8
[23:01:18] <Dko1905> I'm getting SEGV, and I'm not sure why. Code: https://hastebin.skyra.pw/hawatocadu.csharp
[23:06:21] <Dko1905> Valgrind find an invalid read of size 8: "Address 0x485e000 is not stack'd, malloc'd or (recently) free'd"
[23:27:39] <Dko1905> Sorry, I freed the array before the elements.
[23:36:05] *** Joins: ur5us_ (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
[23:40:58] *** Joins: rgrinberg (~textual@200.68.178.168)
[23:41:44] *** Quits: pkap (~pkap@193.32.127.238) (Quit: Client closed)
[23:49:42] *** Quits: rgrinberg (~textual@200.68.178.168) (Read error: Connection reset by peer)
[23:52:06] *** Joins: rgrinberg (~textual@187.223.78.219)
[23:58:13] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
