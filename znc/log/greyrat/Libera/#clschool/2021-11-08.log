[00:12:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:16:38] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:33:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:40:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:46:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[00:46:14] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:47:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:01:46] *** Quits: rain3_ (~rain3_mob@2a02:2f09:d10a:400:1c15:54ba:27b3:ce61) (Ping timeout: 245 seconds)
[01:30:05] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[01:45:35] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[02:15:46] *** Joins: lagash (lagash@lagash.freeirc.org)
[02:24:29] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 256 seconds)
[02:27:58] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[02:29:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[02:30:59] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:33:55] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[02:41:55] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[02:43:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:44:20] *** Joins: pjb (~pjb@user/pjb)
[02:48:26] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 245 seconds)
[02:57:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[03:11:31] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 256 seconds)
[03:15:00] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[03:17:01] *** Quits: Jing_ (~textual@2604:a840:3::1033) (Remote host closed the connection)
[03:18:04] *** Joins: Jing (~textual@2604:a840:3::1033)
[03:21:09] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 256 seconds)
[03:33:58] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[04:37:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[04:39:34] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[04:52:24] <lagash> How do I collect the results in a list instead of printing them here? (alex:map-permutations #'print '("en" "fr" "es" "ru") :length 2)
[04:55:50] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 268 seconds)
[05:03:51] <White_Flame> I presume it doesn't return anything useful?  (let ((result nil)) (map-* (lambda (x) (push result x)) ...)
[05:05:19] <White_Flame> oh, and then RESULT at the end of the LET body if you want it returned :)
[05:13:33] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[05:16:17] <lagash> White_Flame: it calls the function every time, yeah
[05:16:46] <White_Flame> I mean the result of map-permutations isn't anything useful?
[05:17:21] <White_Flame> but a LET wrapping a PUSHing function object is how you manually collect results
[05:26:05] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:26:51] <lagash> White_Flame: so what am I doing wrong here? (let ((result '())) (map-permutations (lambda (x) (push result x)) '("en" "fr" "es" "ru") :length 2) result)
[05:32:38] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 244 seconds)
[05:33:27] <lagash> Ah I see - you switched the push args from the correct ones..
[05:41:00] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[06:11:09] *** Quits: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com) (Ping timeout: 256 seconds)
[06:24:42] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[06:25:05] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[06:31:14] <White_Flame> um, it was a test? ;)
[06:31:18] <White_Flame> you passed! \:D/
[06:58:45] *** Quits: sts-q (~sts-q@91.200.108.233) (Ping timeout: 256 seconds)
[06:59:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[07:03:10] *** Joins: sts-q (~sts-q@212.53.219.160)
[07:05:07] *** Joins: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com)
[07:09:59] *** Quits: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com) (Ping timeout: 264 seconds)
[07:32:11] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:32:52] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 260 seconds)
[07:33:24] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[07:33:26] *** Quits: pedro-delfino (sid507296@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:33:26] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[07:33:34] *** Joins: pedro-delfino (sid507296@2a03:5180:f:1::7:bda0)
[07:34:31] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[07:47:48] *** Joins: travv0 (sid293381@user/travv0)
[08:13:44] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Read error: Connection reset by peer)
[08:49:47] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[08:55:46] *** Quits: Jing (~textual@2604:a840:3::1033) (Remote host closed the connection)
[08:56:15] *** Joins: Jing (~textual@2604:a840:3::1033)
[09:06:10] *** Joins: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com)
[09:10:40] *** Quits: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com) (Ping timeout: 244 seconds)
[09:34:59] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:35:10] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[09:42:53] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (*.net *.split)
[09:42:53] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[09:42:54] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[09:43:06] *** Joins: zagura (~zagura@user/zagura)
[09:44:08] *** Joins: jfb4 (~jfb4@178.62.2.68)
[09:45:33] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[10:09:35] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Remote host closed the connection)
[10:09:47] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[10:36:08] *** Joins: pjb (~pjb@user/pjb)
[10:37:01] *** Quits: malaclyps (~mala@user/malaclyps) (Quit: ZNC 1.6.1 - http://znc.in)
[10:54:39] *** Joins: mala (~mala@user/malaclyps)
[10:59:30] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:07:39] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:07:53] *** Joins: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com)
[11:12:19] *** Quits: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com) (Ping timeout: 250 seconds)
[11:17:09] *** Quits: Jing (~textual@2604:a840:3::1033) (Quit: Textual IRC Client: www.textualapp.com)
[11:17:29] *** Joins: Jing (~textual@2604:a840:3::1033)
[11:17:44] *** Quits: Jing (~textual@2604:a840:3::1033) (Client Quit)
[11:17:59] *** Joins: Jing (~textual@2604:a840:3::1033)
[11:18:59] *** Quits: Jing (~textual@2604:a840:3::1033) (Client Quit)
[11:19:18] *** Joins: Jing (~hedgehog@2604:a840:3::1033)
[11:58:50] *** Joins: random-nick (~random-ni@87.116.176.55)
[13:09:37] *** Joins: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com)
[13:14:06] *** Quits: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com) (Ping timeout: 250 seconds)
[13:41:12] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[14:41:55] <CodeBitCookie[m]> Good Morning Everyone!
[14:43:44] <CodeBitCookie[m]> I have a simple question; Can we do (custom?) memory management with pointers like in C++? All I see is automated. Is that just the default behavior or can we change that? Thanks. 
[14:49:07] *** Joins: Jacobis9000 (~jonaholuf@host86-189-251-32.range86-189.btcentralplus.com)
[14:49:22] <edgar-rft> several options: you can use CONS and LIST to allocate memory dynamically, or use MAKE-ARRAY to allocate blocks of memory, but the de-allocation is still left to the garbage collector. Another technique is to pre-allocate a pool of objects and use them in circle.
[14:50:49] <edgar-rft> the reason why Lisp has no pointer data-type is that internally nearly everything is a pointer
[14:53:13] *** Joins: paule32_ (~paule32@user/paule32)
[14:56:29] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 268 seconds)
[15:10:43] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[15:30:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:36:57] *** Joins: pjb (~pjb@user/pjb)
[16:06:08] <pjb> CodeBitCookie[m]: you can still do memory management like in C if you insist.  For example, here is a simple GC-managed heap: com.informatimago.common-lisp.heap.heap (in http://github.com/informatimago/lisp)
[16:24:21] <CodeBitCookie[m]> pjb: edgar-rft Thanks. Meaning, it is already so optimized, I don't need to worry about the level of control and instead worry about my algorithms and code being slow. 
[17:05:37] *** Joins: Jing_ (~hedgehog@2604:a840:3::1033)
[17:05:38] *** Quits: Jing (~hedgehog@2604:a840:3::1033) (Remote host closed the connection)
[17:11:38] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:cfc:4250:3de5:1a9b) (Quit: Konversation terminated!)
[17:19:20] <beach> CodeBitCookie[m]: Automatic memory management is nearly always faster than manual memory management, so why would you want to explicitly use the worse alternative? 
[17:27:19] <beach> CodeBitCookie[m]: Furthermore, the reason for automatic memory management is that manual memory management is notoriously unreliable.  As Paul Wilson says: "Liveness is a global property", meaning that you can't have a modular program that correctly "knows" when to deallocate some memory because it is no longer live.
[17:27:44] <beach> CodeBitCookie[m]: And that's why we have all those pointer bugs in C and C++ programs.
[17:28:06] <beach> Either memory leaks or incorrect deallocations of live objects.
[17:30:49] <beach> So my hunch is that in fact, all large C++ programs are extremely slow compared to what similar code would be like in a language with automatic memory management.  The reason  is that if it is big, it has to be modular, and if it has to be modular, they must work around the manual memory management problem, say by copying everything, or by using reference counters.
[17:31:11] <beach> And then, they have very slow code indeed.
[17:33:04] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:34:40] <beach> Of course, the only comparisons between C++ performance and (say) Common Lisp performance that exist are for programs where modularity does not matter, i.e. tiny benchmark programs. 
[17:34:55] <beach> So my hunch has not been tested, and probably won't be.
[18:04:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:04:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:21:42] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:24:57] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Quit: ERC (IRC client for Emacs 26.3))
[18:55:43] *** Joins: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:43:17] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:46:25] *** Joins: Oladon (~olad@98.43.81.226)
[19:57:27] *** Quits: Jing_ (~hedgehog@2604:a840:3::1033) (Remote host closed the connection)
[19:57:59] *** Joins: Jing (~hedgehog@2604:a840:3::1033)
[20:01:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:12:50] <sts-q> beach: Thank you for that explanation! It is the first time, that i read it this way. And although written as believe, it makes sence to me.
[21:36:43] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[21:39:09] <derelict> hi everyone, is there a way to recompile stuff defined with def-var?
[21:40:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:43:45] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[21:54:03] <Jacobis9000> How do I load up a file into slime again?
[21:54:18] <pjb> (load "file.el")
[21:54:24] <pjb> M-: (load "file.el") RET
[21:55:08] <pjb> You have patches to slime?
[21:56:09] <Jacobis9000> I don't know about patches, and I cannot enter the commands you suggested
[21:57:01] <pjb> slime is an emacs lisp program, written in emacs lisp.  Loading a file into slime, would mean loading a file into emacs lisp, possibly to patch or enhance slime.
[21:57:36] <pjb> loading a file with slime would be a different matter, since slime is a CL IDE; this would mean loading a file into the inferior CL.
[21:57:40] <Jacobis9000> no just so I can run functions I've written before
[21:57:45] <pjb> loading files in CL is done with (LOAD "file.lisp")
[21:58:28] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:59:42] <pjb> slime let you load the current common lisp buffer into the CL inferior lisp process using with a command such as slime-load-file, that you can run with M-x slime-load-file RET path.lisp RET or with C-c C-l 
[22:01:34] <pjb> If you've not saved your functions into a file, then you don't have a file to load. You can just send each of your functions to the inferior CL, with lisp-eval-defun  C-c C-e   or with lisp-eval-form-and-next C-c C-n
[22:01:36] <Jacobis9000> thanks
[22:01:49] <pjb> You can ask emacs for help in the current mode with C-h m
[22:50:20] <Jacobis9000> Why when I use (setf vowels '(a e i o u)) do I get an undefined variable warning?
[22:54:06] <White_Flame> does the variable VOWELS exist anywhere?
[22:54:28] <White_Flame> eg, from a surrounding LET, or a toplevel DEFVAR?
[22:54:34] <Jacobis9000> I just read further in the book and it said some implementations of lisp complain, and you must declare the variable first with defvar
[22:54:59] <White_Flame> yep, it's a pretty ancient Lisp thing to just use vars without declaring them
[22:55:16] <White_Flame> so it's still technically there, but not a great idea
[22:56:16] <Jacobis9000> what is the difference between DEFVAR and DEFPARAMETER?
[23:01:13] <mfiano> it's undefined behavior to access a variable without defining it
[23:01:32] <mfiano> some implementations will warn you. others may not. and still others may do something totally unexpected
[23:02:54] <mfiano> defvar defines it and optionally binds it a value once, even if redefined. defparameter defines it and binds it always.
[23:09:56] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 250 seconds)
[23:12:02] <White_Flame> basically defparameter resets the value every time you load the fine it's in, while defvar will only initialize it but won't reinitialize its value again when you reload it
[23:12:12] <White_Flame> so the application will continue retaining its state with defvar
[23:15:16] <Jacobis9000> Let me clarify:
[23:16:33] <Jacobis9000> (defvar trees '(ash beech oak)) (setf trees '(ash beech oak elm)) when I run the program next time, it will remember the second value of trees???
[23:17:14] <White_Flame> no
[23:17:19] <White_Flame> oh wait, yues
[23:17:31] <White_Flame> also, what do yo mean by "run the program"?
[23:17:40] <White_Flame> what the SETF changes, the DEFVAR will not reset
[23:17:48] <Jacobis9000> reset when?
[23:17:51] <Jacobis9000> I don't understand
[23:18:02] <Jacobis9000> The memory should all be cleared when the program exits
[23:18:30] <White_Flame> if you restart your lisp image, and reload your code, then yeah the defvar will be creating a new var again
[23:18:39] <White_Flame> if you re-run your code within the image after the setf, the setf'd value will remain there
[23:19:01] <Jacobis9000> 'within the image'?
[23:19:34] <White_Flame> the running lisp
[23:23:27] <Jacobis9000> I'm sorry I don't follow
[23:23:30] <Jacobis9000> You mean the REPL?
[23:23:35] <Jacobis9000> What is the running lisp?
[23:23:42] <mfiano> the lisp image
[23:23:51] <White_Flame> sbcl.exe
[23:23:56] <Jacobis9000> I have never heard this term lisp image
[23:23:58] <White_Flame> its running process
[23:24:00] <mfiano> Common Lisp is an image-based language
[23:24:16] <mfiano> The state of the world is not reset until sbcl.exe (or whatever) is restarted
[23:24:24] <mfiano> You can run multiple "programs" within a single image
[23:25:53] <White_Flame> when the lisp OS-process starts, it is the runtime code, and a loaded snapshot image of an initialized lisp state
[23:26:13] <White_Flame> all its global environment, instantiated function & data objects, etc
[23:26:36] <White_Flame> you can re-save such an image and resume it as well
[23:27:03] <White_Flame> it's somewhat sorta kinda maybe like saving a VM snapshot, if you squint hard
[23:27:37] <Jacobis9000> Hmm
[23:31:02] <White_Flame> it's also how you make your own executables
[23:31:13] <White_Flame> lisp has a heritage as an OS
[23:31:57] <Jacobis9000> Ok well I cannot say I understand this
[23:32:07] <Jacobis9000> But I will just accept it for now and do more research later
[23:32:33] <White_Flame> well, just suffice it to say that the running state of your lisp executable is "the image"
[23:32:36] <Jacobis9000> That it's some sort of image of an environment rather than just a programming language translated into machine code
[23:32:40] <White_Flame> as an opaque vocabulary term
[23:33:32] <White_Flame> it is the environment in which your code & data objects exist, waiting to be called; and any running code is running
[23:33:49] <White_Flame> (a saved image doesn't have any code running, though)
[23:36:32] <Jacobis9000> Ok thank you
[23:36:41] <Jacobis9000> I will bear this in mind
[23:44:56] <White_Flame> when you DEFUN functions, or create new vars, or even change the value of variables, you're technically "mutating the image"
[23:48:24] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[23:51:31] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 250 seconds)
[23:53:17] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:30f5:9848:95e4:c61b)
