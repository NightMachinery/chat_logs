[00:02:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[00:05:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:07:03] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[00:16:55] <leftylink> dang.
[00:17:30] <leftylink> every time I write Hash.new { |h, k| h[k] = [] } I wish it could be Hash.new { [] } instead. but that ship has sailed long ago.
[00:23:20] <leftylink> I suppose it's most consistent. Hash.new(obj) doesn't assign obj, so neither should Hash.new { obj } assign it.
[00:26:12] <leftylink> but if I jusst wanted the ergonomics, I guess I can make it happen yself.
[00:29:52] <leftylink> pandabot: rb module AssignIt refine Hash.singleton_class do def new; super { |h, k| h[k] = yield } end end end; using AssignIt; h = Hash.new { [] }; h[:a] << 1; h[:b] << 2; h
[00:29:52] <pandabot> {:a=>[1], :b=>[2]} - https://carc.in/#/r/cny0
[00:29:55] <leftylink> and there we have it
[00:30:09] <leftylink> no more need to write h[k] = 
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:35:45] <havenwood> leftylink: class Hash def default_lefty=(simple_proc); self.default_proc = ->(h, k) { h[k] = simple_proc.
[00:35:45] <havenwood> call } end; end; h = {}; h.default_lefty = ->{ [] }
[00:40:11] *** Quits: rapha (~jrs@46.4.31.69) (Changing host)
[00:40:11] *** Joins: rapha (~jrs@user/rapha)
[00:40:40] *** Quits: Tomte (~Tomte@user/Tomte) (Read error: Connection reset by peer)
[00:45:11] *** Quits: _ht (~quassel@82-168-34-160.fixed.kpn.net) (Remote host closed the connection)
[00:51:05] *** Quits: bluedust (~bluedust@103.165.167.52) (Read error: Connection reset by peer)
[00:51:41] *** Joins: bluedust (~bluedust@103.165.167.52)
[01:23:46] <ox1eef> call it something else and propose it as a patch to ruby :)
[01:26:29] <leftylink> speaking of hash and default_proc does anyone have a link to the "Obviously." stack overflow answer handy?
[01:27:30] <leftylink> ah
[01:27:34] <leftylink> pandabot: learn obviously https://stackoverflow.com/a/17585165
[01:27:34] <pandabot> Learned new fact obviously; 333 facts total
[01:28:53] <leftylink> actually
[01:29:03] <leftylink> I should save the answer text in case stack overflow ever shuts down or something
[01:29:16] *** Joins: fredlinhares (~fredlinha@2804:14c:5ba4:4adf::1001)
[01:29:26] <leftylink> pandabot: learn obviously ->f{f[f]}[->f{Hash.new{|h,k|h[k]=f[f]}}] https://stackoverflow.com/a/17585165
[01:29:26] <pandabot> Re-learned existing fact obviously; 333 facts total
[01:29:27] <leah2> it will be mirrored on a dozen clone sites
[01:47:53] *** Quits: fredlinhares (~fredlinha@2804:14c:5ba4:4adf::1001) (Quit: WeeChat 3.4)
[01:52:13] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Ping timeout: 240 seconds)
[01:54:59] *** Quits: analogsalad (~analogsal@user/analogsalad) (Remote host closed the connection)
[01:57:14] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
[01:58:45] *** Joins: bluedust_ (~bluedust@59.89.217.203)
[02:02:02] *** Quits: bluedust (~bluedust@103.165.167.52) (Ping timeout: 240 seconds)
[02:13:54] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[02:21:53] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[02:23:21] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[02:35:19] *** Quits: ua__ (~ua@public-gprs226755.centertel.pl) (Ping timeout: 256 seconds)
[02:48:04] *** Joins: ua__ (~ua@public-gprs264209.centertel.pl)
[02:49:00] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[02:52:15] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:52:36] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:02:17] *** Quits: ua__ (~ua@public-gprs264209.centertel.pl) (Ping timeout: 240 seconds)
[03:06:53] *** Joins: Guest9014 (~vit@chello085216193138.chello.sk)
[03:11:13] *** Quits: weaksauce (~textual@ip68-5-101-101.oc.oc.cox.net) (Ping timeout: 256 seconds)
[03:16:04] *** Joins: ua__ (~ua@public-gprs225747.centertel.pl)
[03:44:26] *** Quits: bluedust_ (~bluedust@59.89.217.203) (Read error: Connection reset by peer)
[03:50:26] *** Joins: weaksauce (~textual@ip68-5-101-101.oc.oc.cox.net)
[03:50:57] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Ping timeout: 240 seconds)
[04:24:24] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:31:07] *** Quits: Guest9014 (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[04:41:15] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[04:44:22] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:48:51] *** Joins: hanzo (uid532183@user/hanzo)
[05:03:04] *** Joins: lispy (~lispy4@84.69.59.93)
[05:13:05] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
[05:36:51] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[05:38:45] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:01:51] *** Quits: whysthatso125 (~whysthats@74-206-50-195.sta.estpak.ee) (Quit: Ping timeout (120 seconds))
[06:02:08] *** Joins: whysthatso125 (~whysthats@74-206-50-195.sta.estpak.ee)
[06:24:00] *** Joins: Rounin (~david@84.212.130.215)
[07:21:26] *** Joins: SteveR (~SteveR@2600:6000:ff7e:f6d5::97b)
[07:36:25] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[07:38:14] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:38:29] *** Joins: shiru (~shiru@p4236133-ipoe.ipoe.ocn.ne.jp)
[07:45:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[07:46:17] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[07:48:22] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Quit: Leaving)
[07:50:17] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[07:56:28] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
[08:19:54] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Remote host closed the connection)
[08:21:18] *** Joins: lunarkitty (uid501895@user/pyra)
[08:24:06] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:24:42] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[08:30:28] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:39:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[08:40:51] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:47:36] <nakilon> ox1eef not sure why it should be dangerous
[08:47:57] <nakilon> we actually have a profit of not remembering what is nil.to_i
[08:48:46] <nakilon> and not calling unnecessary Integer#to_i
[08:49:50] <nakilon> leftylink I just don't use block form at all; just do h[k] ||= []; h[k]...
[08:51:21] <leftylink> sometimes that's all right. otherwise when you're about to freeze the array you have to remember to unset the default proc
[08:51:46] <leftylink> pandabot: rb h = Hash.new { |h, k| h[k] = [] }; h[:a] << 5; h.freeze; h[:b]
[08:51:48] <pandabot> stderr: -e:2:in `block in <main>': can't modify frozen Hash: {:a=>[5]} (FrozenError) - exit 1 - https://carc.in/#/r/cnyy
[08:51:53] <leftylink> s/freeze the array/freeze the hash/ of course
[08:51:55] <ox1eef> nakilon: it is "dangerous" because it swallow exceptions you didn't expect. that pattern and those similar to it (eg rescue nil) are usually thought of as an anti-pattern.
[08:52:20] <nakilon> that isn't a pattern
[08:52:21] <leftylink> pandabot: rb h = Hash.new { |h, k| h[k] = [] }; h[:a] << 5; h.default_proc = nil; h.default = [].freeze; h.freeze; h[:b]
[08:52:22] <pandabot> [] - https://carc.in/#/r/cnyz
[08:52:27] <nakilon> that is just a single Integer() method
[08:52:58] <ox1eef> i am talking about the "rescue nil" or "rescue 0" part, it can swallow exceptions you don't expect. you may call it as you like, i identify it as a pattern.
[08:53:43] <nakilon> isn't Integer("14 Foobars", exception: false) swallowing the exception?
[08:53:52] <ox1eef> only the exceptions you *expect*
[08:54:17] <nakilon> I don't see here any list of exception classes specified
[08:55:01] <ox1eef> usually, it raises a TypeError -if i'm not mistaken. "raise: false" keeps it to that. your example can swallow any other exception that may be raised.
[08:55:37] <nakilon> I see no proof
[08:56:11] <ox1eef> the proof is in how rescue 0 works. imagine, Integer(call_method) rescue 0; now, call_method may raise something you don't expect.
[08:56:47] <nakilon> but it isn't Integer(call_method)
[08:57:01] <nakilon> oh you mean v is a method?
[08:57:04] <ox1eef> yes, but it could be, and that is why that pattern is generally not recommended.
[08:57:27] <nakilon> speaking about exception supressing pattern is making me laugh
[08:57:34] <nakilon> since everyone have adopted stupid &.
[08:57:38] <nakilon> that is a cancer
[08:57:51] <ox1eef> i see it as a pattern as it is something programmers use to solve a problem, you can call it what you like
[08:57:58] <ox1eef> often use*
[08:58:03] <nakilon> I'm doing defensive programming for years and have never seen anyone caring about exceptions more
[08:58:33] <ox1eef> as i said at the start, it is fine by me - but there is that opinion, which i just explained, that discourages it
[08:59:02] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[08:59:25] <nakilon> ok I see the problem but it's only is if v becomes a method
[08:59:30] <ox1eef> right
[09:01:16] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:05:40] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[09:06:20] <nakilon> did anyone catch the mouse click in terminal? as I understand it's possible with cruses but there is onle one sample in repo and no one even asked on SO, heh
[09:06:39] <nakilon> I'm thinking about making some interface for something parallel
[09:07:52] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[09:34:02] <nakilon> you know what would fix the rescue problem?
[09:34:17] <nakilon> if ruby demanded to use () when calling a method without args
[09:34:21] <nakilon> I would be fine with that
[09:35:12] <nakilon> it would not be not convenient since we already need to write [] when calling lambda without args
[09:36:21] *** Quits: SteveR (~SteveR@2600:6000:ff7e:f6d5::97b) (Ping timeout: 256 seconds)
[09:40:55] <ox1eef> there's lambda {|foo, bar| p [foo, bar] }.(1, 2) as well. i think it's too late for ruby to change its syntax in such a dramatic way.
[09:42:11] <nakilon> isn't every major ruby update a drama? _--
[09:42:30] <nakilon> especially now
[09:43:29] <nakilon> I think there should be a balance that if we so many new features to the language, we should also polish the existing
[09:43:47] <nakilon> *if we add
[09:56:43] <ox1eef> the transition between major updates has always been mostly smooth for me, but i remember 1.9, 2.x and 3.1 introducing new syntax that's not backwards compatible, so there's that.
[10:05:37] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[10:11:00] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[10:12:53] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:20:40] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:21:04] *** Joins: _ht (~quassel@2a02:a468:b619:1:8a98:8031:2935:e3fc)
[10:22:42] *** Quits: shiru (~shiru@p4236133-ipoe.ipoe.ocn.ne.jp) (Quit: Lost terminal)
[10:26:10] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[10:28:15] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:31:01] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[10:31:03] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[11:01:58] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[11:49:31] *** Joins: leonthemisfit (~Leon@user/leonthemisfit)
[11:58:35] *** Joins: fef (~thedawn@user/thedawn)
[12:05:54] *** Joins: bluedust (~bluedust@103.161.144.140)
[12:13:40] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[12:14:37] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[12:19:38] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:42:02] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 240 seconds)
[12:49:11] <IsoLinCHiP> Hmmm, you writing about ruby 3.1 made me notice the /de locale of ruby-lang.org hasnt mentioned 3.1 being released yet. Is it really worth having so many different locales and a prominent NEWS section if they arent equally curated?
[12:50:19] *** Quits: TheBrayn (~m8769@user/elpix) (Quit: WeeChat 3.3)
[12:54:57] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[13:00:12] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[13:00:48] *** Joins: bluedust (~bluedust@103.161.144.140)
[13:04:57] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[13:17:26] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Quit: Leaving)
[13:46:59] <nakilon> feel free to contribute and translate
[13:54:23] *** Joins: Guest9014 (~vit@chello085216193138.chello.sk)
[14:05:57] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[14:17:36] <ox1eef> it is an effort of volunteers after all, it depends on who is interested in spending time to translate and has knowledge of german. 
[14:37:30] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:03:35] *** Joins: re (~user@user/re)
[15:08:32] <depesz> Hi. I have code that does gem 'whatever'; require 'whatever'; - how can I check which version of whatever is loaded? Specifically it's xdg gem.
[15:11:36] <nakilon> depesz https://stackoverflow.com/a/6949179/322020
[15:11:39] <nakilon> via Gem
[15:13:38] *** Joins: bluedust (~bluedust@103.161.144.140)
[15:15:08] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[15:17:12] <depesz> ah, so i use: Gem.loaded_specs["xdg"].version - thanks a lot.
[15:19:47] <depesz> this leads to problematic question, though - how do I figure out when api was changed. didn't thought that one through :/
[15:25:26] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:26:02] <nakilon> depesz either inspect github commits checking the tags
[15:26:05] <nakilon> or use https://www.reddit.com/r/RubyLang/comments/orpr9r/diffendio_online_service_to_see_the_diff_between/
[15:49:24] <Sheilong> I am parsing a game log file to extract some players. My approach using some regular expression works fine. I already did some debug and it correctly parses and extracts the players. However, when I attempt to save it in an array it is not properly append those players there.  https://paste.ofcode.org/D6F69MubxWW6vrJtwvgdmg
[16:09:15] <ox1eef> Sheilong: first, i'd suggest each_with_object() over reduce().
[16:10:02] <ox1eef> after that, i'd suggest using print/puts to record misses and hits, so you have a better understanding of what's happening.
[16:11:17] <Sheilong> ox1eef: why each_with_object over reduce?
[16:12:28] <nakilon> why two times matches =
[16:13:29] <Sheilong> using an "|" with the  two regex is getting wrong strings
[16:13:52] <ox1eef> Sheilong: i think it'd be easier to understand with each_with_object rather than reduce. you wouldn't need "next" anymore, just a guard around the push operation that populates the array.
[16:17:22] <Sheilong> I wouldn't know how to do that way.
[16:18:19] *** Quits: Guest9014 (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[16:20:37] <ox1eef> readlines(..).each_with_object([]) { |line, arr| if match(line); arr.push(line); end }
[16:22:11] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[16:22:20] <ox1eef> well, you'd push the captures rather than the whole line - hopefully you get the idea.
[16:24:19] <Sheilong> ox1eef: I see. The only problem is that I have two regexes. I once tried make a single one using an '|'. But I probably was doing something wrong because with | it parses strings that it shouldn't.
[16:29:01] <ox1eef> https://paste.ofcode.org/xCrVMrXbXYAdLFLy47NPbu
[16:29:06] <ox1eef> something like that may work
[16:30:47] <nakilon> havenwood how am I supposed to fix this error? https://dpaste.org/xUHL/slim as a user of the library Common 
[16:33:45] <nakilon> (ignore line 13)
[16:38:58] <nakilon> looks like this works but I'm not sure if it's good: def self.request ; Async{ sleep( SEMAPHORE_TIME.async{ [@prev + 0.1 - Time.now, 0].max.tap{ @prev = Time.now } } ) }
[16:39:35] <nakilon> i.e. I added Async{...} in self.request
[16:43:06] <Sheilong> ox1eef: thanks. How I deal with the case when there is a position in the array returned by captures that is nil in such case?
[16:43:38] <Sheilong> I'd also need to return a list of unique values.
[16:45:03] <ox1eef> you can remove nil from an array by using .compact
[16:45:12] <ox1eef> arr.concat matches.captures.compact
[16:47:37] <Sheilong> ox1eef: How about returning the unique without having to do some sort of assignment?
[16:48:20] <ox1eef> i don't quite follow. .uniq can be used to remove duplicates from an array.
[16:50:02] <leftylink> dang. I need to reflect. I was about to say "this should not be done with each_with_object. it should be done with flat_map". but there's no reason for this "should". I'll take some time off to reflect. sorry for getting angry
[16:51:40] <ox1eef> yes, you're right - flat_map could work as well.
[16:56:29] <Sheilong> ox1eef: Yes. But from that block, how I'd do that? 
[16:59:37] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:59:54] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:02:27] *** Joins: analogsalad (~analogsal@user/analogsalad)
[17:03:24] <Sheilong> What I mean is about how to make that block yield the uniq from the resulting list without have to assign the output of that block to some variable and then call uniq.
[17:09:51] <leftylink> uniq may be called on any array, and each_with_object has returned an array.
[17:10:37] <leftylink> so, call it on that array, and no assignment is needed
[17:10:53] <leftylink> pandabot: rb [1, 2].flat_map do |x| [x, x] end.uniq
[17:10:54] <pandabot> [1, 2] - https://carc.in/#/r/co1g
[17:11:12] <leftylink> no assignments there
[17:14:44] <Sheilong> Thanks guys. 
[17:15:00] <Sheilong> I combine the regular expression into a single one and did the following https://paste.ofcode.org/395z5mQvYMCMRmUZBnYZx9p
[17:15:13] <Sheilong> Is it okay?
[17:15:36] <Sheilong> I added next and unless to avoid writing two lines with if
[17:15:45] *** Joins: bluedust (~bluedust@103.161.144.140)
[17:15:59] <leftylink> pandabot: ri Enumerable#flat_map
[17:15:59] <pandabot> https://ruby-doc.org/core-3.0.1/Enumerable.html#method-i-flat_map
[17:16:20] <leftylink> to me it's not okay unless it uses flat_map unless each_with_object, but not everyone shares the same standards of okay, I understand.
[17:16:42] <leftylink> s/flat_map unless/flat_map instead of/
[17:20:17] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[17:22:47] *** Joins: Guest59 (~Guest59@2001:1284:f022:2ed3:c1d:3b48:5b4e:2ece)
[17:23:04] <Sheilong> I am trying something like File.readlines(path).flatmap do |line| |line.match(re_pattern_players.captures.compact)| end.uniq
[17:27:22] <Sheilong> https://paste.ofcode.org/ppLxfxbNy9wXEnbeY99Q5m
[17:29:03] *** Joins: Noktar (~Noktar@138.204.25.100)
[17:29:37] <ox1eef> https://paste.ofcode.org/FvtUYAyH5HL3CmpLcMWrdd
[17:29:51] <Sheilong> with flat_map it is adding a nil to the resulting list.
[17:30:05] <ox1eef> see above
[17:30:12] <leftylink> code does what yout ell it to do, no more no less
[17:30:19] *** Quits: Guest59 (~Guest59@2001:1284:f022:2ed3:c1d:3b48:5b4e:2ece) (Quit: Client closed)
[17:30:19] <leftylink> pandabot: rb [1].flat_map { next }
[17:30:20] <pandabot> [nil] - https://carc.in/#/r/co1h
[17:32:01] <Sheilong> Sorry for being such a noob : (
[17:32:26] <leftylink> now personally I wish that wouldn't type check and that with flat_map the block *has* to return a list, but I guess the decision was made too long ago
[17:35:08] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[17:44:04] *** Joins: constxd (~brad@142.167.170.88)
[17:49:25] *** Parts: Noktar (~Noktar@138.204.25.100) ()
[18:02:20] <nakilon> pandabot: rb [1].flat_map { next [] }
[18:45:01] <gr33n7007h> >> 1 + 1
[18:45:01] <ruby[bot]> gr33n7007h: # => 2 (https://carc.in/#/r/co2f)
[18:45:26] <gr33n7007h> who fixed it
[18:46:39] <gr33n7007h> >> RUBY_VERSION
[18:46:41] <ruby[bot]> gr33n7007h: # => "3.0.1" (https://carc.in/#/r/co2g)
[18:47:30] <adam12> gr33n7007h: jhass[m] figured it out. LetsEncrypt cert issue IIRC.
[18:48:19] <gr33n7007h> adam12: ah, nice!
[19:12:53] *** Quits: alex[m] (~alexchete@2001:470:69fc:105::1:1001) (Quit: Client limit exceeded: 20000)
[19:35:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[19:41:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:29:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[20:31:49] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:41:44] *** Joins: SteveR (~SteveR@2600:6000:ff7e:f6d5::97b)
[20:58:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[20:58:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:02:17] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:07:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[21:08:28] *** Joins: goldfish (~goldfish@user/goldfish)
[21:08:51] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[21:09:35] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:09:44] *** Joins: bluedust (~bluedust@103.161.144.140)
[21:17:47] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 268 seconds)
[21:32:30] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[21:37:07] *** Joins: Guest9014 (~vit@chello085216193138.chello.sk)
[21:38:37] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 240 seconds)
[21:41:17] *** Quits: Guest9014 (~vit@chello085216193138.chello.sk) (Ping timeout: 240 seconds)
[21:45:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:46:51] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[21:47:48] <Hess> >> 10.times.to_a
[21:47:48] *** Joins: alex[m] (~alexchete@2001:470:69fc:105::1:1001)
[21:47:48] <ruby[bot]> Hess: # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] (https://carc.in/#/r/co32)
[21:47:50] <Hess> nice
[21:48:20] <Hess> >> (999**999).times.to_a
[21:48:22] <ruby[bot]> Hess: # =>  (https://carc.in/#/r/co33)
[21:48:28] <Hess> shrug
[21:49:18] *** Quits: havenwood (~havenwood@about/ruby/havenwood) (Quit: The Lounge - https://thelounge.chat)
[21:49:59] *** Joins: havenwood (~havenwood@about/ruby/havenwood)
[22:00:20] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 268 seconds)
[22:31:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[22:31:55] *** Joins: lispy (~lispy4@84.69.59.93)
[22:33:55] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:33:59] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:39:57] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[22:51:21] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[23:19:09] *** Quits: SteveR (~SteveR@2600:6000:ff7e:f6d5::97b) (Ping timeout: 256 seconds)
[23:28:18] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[23:29:05] *** Quits: yxhuvud (~quassel@2001:1ba8:1424:ea00:9011:7274:8c0:3359) (Read error: Connection reset by peer)
[23:29:21] *** Joins: yxhuvud (~quassel@2001:1ba8:1424:ea00:6dd1:836f:d16:b8da)
[23:34:32] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[23:37:16] <legit> >> puts "test"
[23:37:17] <ruby[bot]> legit: # => test ...check link for more (https://carc.in/#/r/co4r)
[23:37:22] <legit> Oh, I see.
[23:44:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:45:14] <Hess> >> Dir.pwd
[23:45:15] <ruby[bot]> Hess: # =>  (https://carc.in/#/r/co4v)
[23:45:44] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:46:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:47:47] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
