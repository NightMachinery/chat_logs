[00:01:21] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:01:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:02:02] *** Joins: Guest95 (~Guest95@pool-96-233-64-53.bstnma.fios.verizon.net)
[00:02:13] <phoe> Bike: a terrible question
[00:02:32] <phoe> (funcall (compile nil '(lambda (x) (lambda () x))) 42)
[00:02:42] <phoe> does this return a COMPILED-FUNCTION or just a FUNCTION
[00:02:52] <phoe> at least according to the standard
[00:03:26] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:03:39] <phoe> clhs compiled-function
[00:03:40] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_cmpd_f.htm
[00:03:44] <Bike> hmm. not sure there's anything mandating it be a compiled-function, though in practice it will be. and it's also mandated that it be at least minimally compiled regardless
[00:03:50] <phoe> "Functions produced by the compile function are of type compiled-function."
[00:04:03] <phoe> that obviously refers to the "outer" lambda, but how about the inner one
[00:04:19] <phoe> and I know that it'll be in practice, I'm just nitpicking at the specification now
[00:14:38] <Bike> the observable effect of compilation is the minimal compilation requirements, and that would have to apply to the inner function
[00:14:50] <Bike> even if it wasn't a compiled-function for some technical bullshit reason
[00:15:04] <phoe> yes
[00:22:10] *** |3b|` is now known as |3b|
[00:23:29] <Guest95> SBCL is signaling a UNDEFINED-FUNCTION condition when I try to load my system with QUICKLISP:QUICKLOAD. The reason is because I use the function before it is defined in the file and I can fix the problem by moving the function definition above its invocation. I am confused about this though because I thought that you could use a function before you
[00:23:29] <Guest95> define it within the same compilation unit.
[00:26:04] <phoe> Guest95: depends
[00:26:12] <phoe> how do you use it?
[00:26:18] <phoe> do you use it inside a function body or macro body?
[00:26:36] <phoe> or do you have your file contents like (foo 42) ... (defun foo (x) ...) ?
[00:26:45] <Guest95> I use the function to create the initial value for a dynamic variable
[00:26:48] <phoe> oooh
[00:26:51] <phoe> then that won't work
[00:27:17] <phoe> the compiler needs to be able to call a function in order to initialize a global variable
[00:27:27] <phoe> and for that the function must already be defined
[00:27:31] <phoe> so it must be earlier in the file
[00:27:39] <phoe> you can do things like (defun bar () (foo)) ... (defun foo () ...)
[00:27:49] <Guest95> ok its clear now
[00:27:52] <phoe> but note that that doesn't require FOO to be actually called
[00:28:09] <phoe> (defvar *x* (foo)) does require FOO to be called in order to produce a value for *X*
[00:28:35] <phoe> whereas (defun bar () (foo)) or, alternatively, (lambda () (foo)), doesn't require that
[00:29:49] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:30:33] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[00:30:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:37:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:40:30] *** Quits: Guest95 (~Guest95@pool-96-233-64-53.bstnma.fios.verizon.net) (Quit: Client closed)
[00:44:51] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:45:33] *** Joins: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de)
[00:47:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:48:14] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:55:29] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[00:55:43] *** Joins: z3t0 (~z3t0@146.71.14.98)
[01:01:03] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:30c6:2766:a3ba:f574) (Quit: Konversation terminated!)
[01:08:00] *** Quits: cosimone` (~user@93-44-186-112.ip98.fastwebnet.it) (Remote host closed the connection)
[01:08:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:14:19] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:16:00] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:28:26] *** Quits: random-nick (~random-ni@87.116.181.150) (Read error: Connection reset by peer)
[01:37:32] *** Quits: rgherdt (~rgherdt@ip5f5af1b0.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[01:42:53] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:48:26] *** Quits: pve (~pve@37-136-244-191.rev.dnainternet.fi) (Quit: leaving)
[01:51:44] *** Quits: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de) (Remote host closed the connection)
[01:54:03] <yottabyte> thoughts on  https://github.com/nightfly19/cl-arrows?
[01:54:41] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab)
[01:55:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:59:05] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:04:02] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[02:04:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:05:52] *** Joins: pjb (~pjb@user/pjb)
[02:05:59] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:2107:8a12:e730:473f)
[02:10:02] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab) (Ping timeout: 240 seconds)
[02:15:45] <Bike> wouldn't use it myself, don't feel strongly about others doing so
[02:29:46] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[02:29:51] *** Joins: random-nick (~random-ni@87.116.167.125)
[02:32:11] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:53:10] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[02:54:06] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[03:02:02] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 240 seconds)
[03:02:22] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[03:04:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[03:05:32] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[03:06:14] *** Joins: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de)
[03:12:47] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[03:13:27] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:15:34] *** Quits: frgo_ (~frgo@2a02:3038:401:f00f:4c94:f370:ca36:9178) (Remote host closed the connection)
[03:16:39] <etimmons> yottabyte: there are several versions of arrows out there. I think that one you linked might be the one with licensing issues
[03:17:22] <yottabyte> This appeared to be the most popular one I found
[03:17:56] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[03:18:39] <etimmons> https://github.com/quicklisp/quicklisp-projects/issues/1934
[03:18:40] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:29:18] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::1dea) (Remote host closed the connection)
[03:29:25] *** Joins: jstoddard_ (~Jeremiah@2600:8801:a400:5a00::1dea)
[03:30:17] *** jstoddard_ is now known as jstoddard
[03:31:48] *** Joins: frgo (~frgo@dynamic-046-114-151-106.46.114.pool.telefonica.de)
[03:36:02] *** Quits: frgo (~frgo@dynamic-046-114-151-106.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[03:38:05] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[03:42:40] <yottabyte> wow.
[03:45:37] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::1dea) (Ping timeout: 240 seconds)
[03:48:57] *** Joins: jeosol (~jeosol@user/jeosol)
[03:50:30] *** Joins: frgo (~frgo@2a02:3038:401:f00f:a1de:e56a:8fdf:cf9)
[03:52:25] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:54:37] *** Quits: frgo (~frgo@2a02:3038:401:f00f:a1de:e56a:8fdf:cf9) (Ping timeout: 240 seconds)
[03:56:19] *** Quits: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de) (Remote host closed the connection)
[04:06:27] *** Joins: frgo (~frgo@2a02:3038:401:f00f:c6c:a5ec:fa0e:fbce)
[04:10:48] *** Quits: frgo (~frgo@2a02:3038:401:f00f:c6c:a5ec:fa0e:fbce) (Ping timeout: 250 seconds)
[04:25:25] *** Joins: frgo (~frgo@2a02:3038:401:f00f:3841:cfb3:b361:7e06)
[04:29:32] *** Quits: frgo (~frgo@2a02:3038:401:f00f:3841:cfb3:b361:7e06) (Ping timeout: 240 seconds)
[04:30:10] *** Joins: frgo (~frgo@2a02:3038:401:f00f:c0cd:7fc7:df92:b325)
[04:35:32] *** Quits: frgo (~frgo@2a02:3038:401:f00f:c0cd:7fc7:df92:b325) (Ping timeout: 240 seconds)
[04:40:19] *** Joins: notzmv (~zmv@user/notzmv)
[04:43:32] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:44:26] *** Joins: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de)
[04:45:32] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:48:32] *** Quits: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de) (Ping timeout: 240 seconds)
[04:56:38] *** Quits: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se) (Quit: Leaving)
[04:58:14] *** Joins: Bike (~Bike@71.69.170.70)
[04:58:14] *** ChanServ sets mode: +o Bike
[05:04:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:04:32] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 240 seconds)
[05:08:18] *** Quits: paul0 (~paul0@user/paul0) (Quit: Leaving)
[05:19:26] *** Joins: thomp (~thomp@c-73-66-98-90.hsd1.ca.comcast.net)
[05:28:50] *** Joins: xsperry (~xs@user/xsperry)
[05:29:43] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[05:31:33] <yottabyte> In slime, the current directory is set to whatever buffer I started slime in. As I open new files in different directories, slime remains open and still pointed to that other directory, even if I close the original file. How do I change it to the current file's directory? Close and restart slime?
[05:32:32] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net) (Ping timeout: 240 seconds)
[05:33:54] <Catie> With no input on the repl, type ",cd"
[05:36:29] <sveit_> in SBCL, would (labels ((f (x) (+ x 1)) (g (x) (+ (f x) 1))) (declare (inline f g)) (g x)) inline the definitions of /both/ g and f into the call?
[05:36:49] <sveit_> and if i instead put (declare (inline f)) (without g) would f be inlined into the definition of g?
[05:39:03] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[05:39:26] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Remote host closed the connection)
[05:45:41] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:46:10] *** Joins: jstoddard (~Jeremiah@2600:8801:a400:5a00::1dea)
[05:48:32] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[05:49:26] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:50:54] *** Quits: thomp (~thomp@c-73-66-98-90.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[05:53:54] <_death> you can use DISASSEMBLE to find out
[05:58:26] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[06:03:11] <sveit_> thanks! another question: is there a simple way to make macros "fall back", in the sense that (macrolet ((a (b) (if (eq b 'b) ''nice ''not-nice))) (macrolet ((a (b) (if (eq b 'a) 'nicest (SOMEHOW EXPAND A)))) (a 'b))) macroexpands to 'nice?
[06:04:12] <sveit_> in my placeholder (SOMEHOW EXPAND A), (a b) will not work, or would `(a ,b)
[06:04:56] <sveit_> well actually (a b) would work, but by accident. had i called the argument to a, c, it would not work
[06:08:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:14:03] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[06:16:21] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Remote host closed the connection)
[06:21:03] <Bike> no, you shadow the macro
[06:21:20] <_death> not sure if there's a standard way.. a non-portable one is (macrolet ((a (b) (if (eq b 'b) ''nice ''not-nice))) (macrolet ((a (c &environment env) (if (eq c 'a) ''nicest (macroexpand `(a ,c) (sb-c::lexenv-parent env))))) (a b)))
[06:35:32] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[06:48:37] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[06:52:41] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[06:54:56] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[06:58:39] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Client Quit)
[06:59:19] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net)
[07:00:08] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[07:00:35] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[07:04:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[07:06:29] *** Joins: akoana (~ah@user/akoana)
[07:10:39] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:13:41] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:34] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:21:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:23:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:28:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[07:30:21] *** Joins: phantomics (~phantomic@71-218-243-149.hlrn.qwest.net)
[07:30:48] <beach> Good morning everyone!
[07:36:42] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:42:41] *** Joins: Bike (~Bike@71.69.170.70)
[07:42:41] *** ChanServ sets mode: +o Bike
[07:43:24] <dre> Good~~ Morning~~ BEACH~~~
[07:43:29] <phantomics> Morning beach
[07:48:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:56:44] <Josh_2> Mornin
[08:10:36] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::1dea) (Quit: Leaving)
[08:12:56] *** Joins: myrrh (~markus@user/poet)
[08:19:34] *** Joins: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4)
[08:20:53] *** Quits: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4) (Client Quit)
[08:24:30] *** Joins: occ (~occ@user/occ)
[08:25:39] *** Joins: semz_ (~semz@2001:9e8:4bc7:9200:8633:3c58:9ba4:6b3a)
[08:25:39] *** Quits: semz_ (~semz@2001:9e8:4bc7:9200:8633:3c58:9ba4:6b3a) (Changing host)
[08:25:39] *** Joins: semz_ (~semz@user/semz)
[08:28:12] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:41:02] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:42:24] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[08:42:33] *** Quits: myrrh (~markus@user/poet) (Ping timeout: 256 seconds)
[08:43:03] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:43:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:51:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:57:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:5cec:b035:3bed:59cc) (Ping timeout: 240 seconds)
[08:58:02] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:58:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:59:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:00:25] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:06:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:14:49] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Quit: ERC (IRC client for Emacs 27.1))
[09:19:08] *** Joins: myrrh (~markus@user/poet)
[09:19:58] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:22:39] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[09:25:07] *** Joins: ad_absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net)
[09:27:07] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:27:08] *** Quits: ad-absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net) (Ping timeout: 250 seconds)
[09:52:48] *** Joins: domovod (~domovod@176.196.122.197)
[10:06:24] *** Quits: ad_absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net) (Quit: Leaving)
[10:07:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:08:30] *** Joins: Alfr (~Alfr@user/alfr)
[10:09:09] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:d86c:41cf:1829:367e)
[10:33:00] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab)
[10:41:57] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[10:43:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:44:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:46:00] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 250 seconds)
[10:46:24] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[10:54:13] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[10:54:58] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[11:01:49] *** Joins: epony (epony@user/epony)
[11:11:17] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[11:15:17] *** Quits: gpiero_ (~quassel@camale.rm-rf.it) (Ping timeout: 240 seconds)
[11:24:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:26:45] *** Quits: dre (~dre@2001:8003:c932:c301:74de:141a:136f:2db6) (Quit: Leaving)
[11:27:06] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:30:58] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[11:31:55] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[11:47:33] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:57:29] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Ping timeout: 256 seconds)
[12:01:03] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[12:03:43] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[12:03:53] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:13:24] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[12:14:17] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:25:06] *** Joins: pve (~pve@178-55-249-95.bb.dnainternet.fi)
[12:32:23] *** Joins: notzmv (~zmv@user/notzmv)
[12:37:48] *** Joins: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de)
[12:39:28] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[12:44:53] *** Quits: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de) (Remote host closed the connection)
[12:45:58] <phoe> good morning
[12:49:30] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab) (Ping timeout: 250 seconds)
[12:52:02] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:52:47] <beach> Hello phoe.
[13:03:32] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[13:17:51] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:d86c:41cf:1829:367e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:18:05] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:21:06] *** Joins: cosimone (~user@93-47-231-31.ip115.fastwebnet.it)
[13:25:29] *** Joins: Krystof (~user@81.174.155.115)
[13:27:48] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:58ff:45a7:b03e:c3bc)
[13:28:24] *** Joins: pjb (~pjb@user/pjb)
[13:43:57] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[13:50:02] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[13:54:26] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[13:54:35] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:58:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:02:02] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Ping timeout: 240 seconds)
[14:04:13] *** Joins: shka (~herr@109.231.0.226)
[14:10:05] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:11:03] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[14:11:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:11:18] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[14:12:54] *** Lord_of_Life_ is now known as Lord_of_Life
[14:14:19] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[14:17:42] *** Joins: frgo (~frgo@2a02:3038:410:bd2a:176:e22e:aeee:9592)
[14:19:08] *** Joins: frgo_ (~frgo@2a02:3038:410:bd2a:8432:f56b:e9ff:b739)
[14:20:02] *** Joins: frgo__ (~frgo@2a02:3038:410:bd2a:946b:dc4f:192:eebb)
[14:23:02] *** Quits: frgo (~frgo@2a02:3038:410:bd2a:176:e22e:aeee:9592) (Ping timeout: 240 seconds)
[14:23:17] *** Quits: frgo_ (~frgo@2a02:3038:410:bd2a:8432:f56b:e9ff:b739) (Ping timeout: 240 seconds)
[14:24:46] *** semz_ is now known as semz
[14:25:33] *** semz is now known as semz_
[14:25:40] *** semz_ is now known as semz
[14:40:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[14:46:14] *** Joins: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de)
[14:52:32] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:00:07] *** Quits: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de) (Remote host closed the connection)
[15:03:24] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Ping timeout: 250 seconds)
[15:03:51] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[15:05:21] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:16:50] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:17:15] <jackdaniel> fe[nl]ix: any chance for merging https://github.com/lispci/fiveam/pull/59 ?
[15:17:45] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Quit: Quit)
[15:22:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:32:32] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:34:39] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:45:32] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[15:48:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:49:13] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[15:50:47] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:55:24] *** Joins: domovod (~domovod@176.196.122.197)
[16:15:31] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:15:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:20:27] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[16:21:11] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[16:24:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:25:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:29:14] <bollu> Why do we have two types of quotations? '(1 2 3) and `(1 2 3)? From what I can tell, unquoting (,x) is only allowed within a backquote (`) and not within regular quotes ('). I Why does just backquotes not suffice?
[16:30:53] <moon-child> bollu: one example is: `',x
[16:31:25] <moon-child> bollu: QUOTE came first, and is a basic language feature
[16:31:27] <jackdaniel> backquote is meant for templating and it is used by the reader; quote is a special form (quote foo) and it prevents evaluation
[16:31:33] <moon-child> bollu: quasiquote and unquote is a utility feature
[16:31:50] <jackdaniel> these are two different things with somewhat overlapping scope of being useful
[16:32:13] <bollu> can one implement one in terms of the other? Or are they both primitives?
[16:32:19] <moon-child> jackdaniel: technically quote is a special _operator_, and it is (quote foo) that is a special form :)
[16:32:38] <bollu> :)
[16:32:57] <moon-child> bollu: it is easy to implement ` and , yourself.  Try it
[16:33:13] <_death> well, ` is not so easy..
[16:33:30] <beach> Not so easy indeed.
[16:33:38] <_death> ' is easy though
[16:33:52] <moon-child> it isn't?
[16:33:53] <jackdaniel> they should be treated as orthogonal features acting on a different level of abstraction
[16:33:54] <beach> bollu: The reader macro for ` creates a macro form and not a special form.
[16:34:01] <_death> moon-child: did you try it?
[16:34:12] <moon-child> there's a paper on the topic that iirc constructs something useful (though without nesting) in a page or so of code
[16:34:27] <moon-child> err, sorry
[16:34:27] <_death> there's a cltl2 appendix
[16:34:29] <moon-child> with nesting, without optimization
[16:34:36] <jackdaniel> beach: what do you mean by that it creates a macro form?
[16:35:01] <beach> jackdaniel: Something like (quasiquote ...)
[16:35:12] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[16:35:37] <beach> I guess "macro call" is the right term.
[16:35:42] <jackdaniel> does the standard say that it creates such a thing? (putting aside cltl2 appendix that provides example implementation that does that)
[16:35:42] <beach> Let me look it up.
[16:36:14] <beach> jackdaniel: It was a pedagogical approximation.
[16:36:17] <moon-child> 'An implementation is free to interpret a backquoted form F1 as any form F2 that, when evaluated, will produce a result that is the same under equal as the result implied by the above definition, provided that the side-effect behavior of the substitute form F2 is also consistent with the description given above'
[16:37:33] <jackdaniel> beach: I see.
[16:38:09] <_death> note that `#(foo ,x) should also work btw
[16:38:20] <beach> jackdaniel: It was a way of answering the question "Or are they both primitives?" by giving some better terminology.
[16:38:34] <jackdaniel> I had quite a headache persuading someone in the past that the implementation is not obligated to create an intermediate form
[16:39:07] <beach> jackdaniel: That I can understand.  The reader macro would be fairly complicated then.
[16:39:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:39:49] <jackdaniel> the reader macro would be fairly complicated when it uses or when it doesn't use the intermediate macro form?
[16:39:54] <moon-child> https://3e8.org/pub/scheme/doc/Quasiquotation%20in%20Lisp%20(Bawden).pdf  pp26-27 here
[16:40:43] <beach> jackdaniel: The latter.  In the first case, it is straightforward.  The complication is then in the macro definition of the macro call that it generates.
[16:40:47] <phantomics> Could someone remind me of the repository that has the suggested CL standard additions?
[16:41:03] <moon-child> wscl?
[16:41:18] <jackdaniel> I see. fwiw SBCL uses an intermediate form (after cltl2 appendix) while ECL doesn't
[16:41:22] <jackdaniel> I don't know about other implementations
[16:41:23] <moon-child> (which being https://github.com/s-expressionists/wscl)
[16:41:36] <moon-child> I think ccl doesn't either
[16:41:56] <beach> phantomics: WSCL is not for additions to the standard.  It is for specifying currently unspecified behavior in a way that is consistent with what major implementations already do.
[16:42:44] <phantomics> Ok, that's it, I saw it before but didn't look in the passed folder, thanks
[16:43:06] <phantomics> beach: makes sense
[16:44:20] <pjb> bollu: you don't need quote either.  Instead of writing (list 'a 'b 'c) you can write (list (intern "A") (intern "B") (intern "C")).
[16:44:46] <beach> phantomics: There is not much that the community would agree upon in terms of suggested additions, so WSCL is meant to be nearly completely uncontroversial.
[16:44:48] <bollu> pjb what is "intern"?
[16:44:54] <pjb> clhs intern
[16:44:55] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_intern.htm
[16:45:20] <moon-child> pjb: it gets complicated.  You must maintain read-time structure-sharing
[16:45:50] <beach> With #= and ##?
[16:45:54] <_death> moon-child: nice, I should read it sometime.. however, even short papers (and code) can take nontrivial time and effort to implement
[16:45:56] <moon-child> pjb: (let ((x '#1=(2)) (y '#1#)) (eq x y))  how do you ensure this is t?
[16:45:57] <moon-child> beach: yes
[16:46:18] <phantomics> beach: right, the addition I'm proposing will address the definition of an alphanumeric character, which is currently somewhat inconsistent
[16:46:22] <pjb> moon-child: (let ((l2 (list 2))) (let ((x l2) (y l2)) (eq x y))) #| --> t |#
[16:46:44] <moon-child> pjb: right.  But that is a global transformation
[16:48:43] <moon-child> and I expect even that can not be made to work in the presence of EVAL
[16:52:10] <_death> that only works because strings are self quoting ;)
[16:52:46] <moon-child> _death: objects of most types are self-evaluating
[16:52:55] <_death> indeed
[16:52:56] <moon-child> the notable exceptions are symbols and lists
[16:53:11] <semz> the only exceptions, no?
[16:53:18] <moon-child> so I do not find fault with that part, unless you limit yourself to _only_ symbols and lists
[16:53:26] <jackdaniel> semz: #<foo> doesn't self-evaluate neither
[16:53:41] <_death> jackdaniel: it does..
[16:54:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:54:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:54:29] <_death> e.g., (let ((x (find-class 't))) (eq x (eval x))) => T
[16:54:32] <jackdaniel> I always thought that the reader will refuse to even read it
[16:54:49] <semz> #<foo> is not valid syntax
[16:55:02] <moon-child> jackdaniel: then there is no way to even try to evaluate it
[16:55:18] <semz> but if you'd put the object into a form and evaled that, the object would self-evaluate
[16:55:36] <jackdaniel> OK, I've confused terms apparently, sorry for the noise
[16:56:14] <phoe> the question is whether this is a value that is already read or if it is text meant to be turned into a Lisp value by the Lisp reader
[16:56:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:57:05] <jackdaniel> since we're talking about "objects" not "source code text" there is no such a question, that's what I've confused.
[16:57:13] <semz> we clearly need LISPRC so we can pass objects to the channel instead of serializing them to text
[16:57:53] <_death> irc sexp?
[16:57:55] <moon-child> semz: you joke, but ...
[17:10:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:10:17] <_death> semz: your "only exceptions" question reminded me of sb-kernel:make-unbound-marker... (eval (sb-kernel:make-unbound-marker)) => #<unbound> hmm ok.. but then, (eval *) => ; Evaluation aborted :)
[17:10:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:11:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:11:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:12:01] <semz> _death: (eval (sb-kernel:make-unbound-marker)) works for me, as does (let ((x (sb-kernel:make-unbound-marker))) (eval x))
[17:12:22] <phoe> this is because lexical variables are always bound
[17:12:29] <phoe> * is a dynamic variable though
[17:12:39] <phoe> and if * is bound to an unbound marker then it's unbound
[17:12:44] <phoe> that's the SBCL implementation detail
[17:12:59] <semz> yeah it's clearly non-standard but interesting nonetheless
[17:14:16] *** Quits: frgo__ (~frgo@2a02:3038:410:bd2a:946b:dc4f:192:eebb) (Ping timeout: 250 seconds)
[17:15:05] *** Joins: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se)
[17:18:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:20:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:27:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:29:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:30:33] *** Quits: myrrh (~markus@user/poet) (Quit: leaving)
[17:32:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:33:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:35:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:37:32] *** Quits: pve (~pve@178-55-249-95.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[17:44:42] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[17:49:01] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[17:54:32] *** Joins: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de)
[18:01:54] *** Joins: Common-Lisp (~user@2600:1700:94cc:c0::44)
[18:05:17] *** Joins: igemnace (~ian@user/igemnace)
[18:06:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:08:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:21:49] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 240 seconds)
[18:23:40] *** Joins: psf (~pi@206.55.172.18)
[18:24:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:24:53] *** Joins: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de)
[18:26:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:27:59] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[18:44:00] *** Joins: frgo (~frgo@2a02:3038:410:bd2a:5c22:6d3e:18af:81bb)
[18:48:19] *** Quits: Common-Lisp (~user@2600:1700:94cc:c0::44) (Quit: goodbye)
[18:48:53] *** Joins: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de)
[18:50:03] *** Quits: frgo (~frgo@2a02:3038:410:bd2a:5c22:6d3e:18af:81bb) (Ping timeout: 240 seconds)
[18:52:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:52:39] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[18:52:40] *** Joins: Everything (~Everythin@37.115.210.35)
[18:53:31] *** Joins: Bike (~Bike@71.69.170.70)
[18:53:31] *** ChanServ sets mode: +o Bike
[18:54:53] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[18:57:47] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[18:57:55] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[18:59:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[19:02:29] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[19:03:13] *** Joins: treflip (~user@user/treflip)
[19:10:34] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:17:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:27:35] *** Quits: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[19:28:30] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[19:42:00] *** Quits: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de) (Remote host closed the connection)
[19:42:16] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:42:37] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:54:55] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[20:12:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:13:49] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[20:14:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:17:11] *** Joins: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77)
[20:22:32] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:28:58] *** Joins: morganw (~user@80.225.24.132)
[20:29:28] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:32:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:34:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:40:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:42:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:50:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:52:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[20:52:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:55:35] *** Joins: Common-Lisp (~eric@2600:1700:94cc:c0::44)
[20:57:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:57:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:01:29] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[21:06:04] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[21:06:28] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[21:08:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:08:32] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.3)
[21:10:30] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[21:13:02] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:19:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:24:43] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:58ff:45a7:b03e:c3bc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:52:39] *** Joins: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de)
[21:55:48] *** raeda_ is now known as raeda
[22:03:44] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 250 seconds)
[22:04:54] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[22:11:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:16:04] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[22:19:05] *** Joins: Guest22 (~Guest22@host-79-13-15-200.retail.telecomitalia.it)
[22:19:34] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[22:19:56] *** Quits: Guest22 (~Guest22@host-79-13-15-200.retail.telecomitalia.it) (Client Quit)
[22:27:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:27:37] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[22:34:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:36:32] *** Quits: Common-Lisp (~eric@2600:1700:94cc:c0::44) (Quit: Leaving)
[22:38:43] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[22:40:21] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:44:19] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:45:21] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:45:33] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[22:46:08] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:48:55] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[22:54:50] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[22:58:14] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[23:04:02] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[23:06:10] *** Quits: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de) (Remote host closed the connection)
[23:10:23] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[23:10:39] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:13:20] *** Joins: kevingal (~quassel@37.228.202.92)
[23:16:24] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[23:19:45] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[23:21:57] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[23:27:25] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:29:36] *** bedouin_ is now known as de
[23:29:47] *** de is now known as megeve
[23:32:42] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[23:35:16] *** Joins: foxfromabyss (~foxfromab@2a01:c22:a808:6300:39f6:c597:7ce:76e0)
[23:38:29] <foxfromabyss> hi! I have two questions.
[23:38:29] <foxfromabyss> 1) is it possible to extend existing methods(?), such as `+` or `eq` for new classes, without jumping through too many hoops?
[23:38:30] <foxfromabyss> 2) let's say I have 2 classes. Class A and Class B. Class B has a field with value of Class A. I have written a comparator for Class A. Is it possible to piggyback on that comparator for `sort`?
[23:39:07] <moon-child> regarding 1, no, but see cl-generic
[23:39:17] <moon-child> I do not recommend extending EQ; consider EQUAL instead
[23:39:33] <moon-child> for 2, something like :key #'get-a should do what you want
[23:39:49] <phoe> either :key or :test or both
[23:39:56] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[23:40:12] <phoe> (defclass a () (...)) (defclass b () ((a :accessor b-a)))
[23:40:15] <foxfromabyss> so `:test` gets applied to `:key` actually?
[23:40:21] <moon-child> yes
[23:40:35] <phoe> then (sort list-of-b-instances :key #'b-a :test #'a<)
[23:40:36] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:40:41] <phoe> woops, sorry
[23:40:49] <foxfromabyss> thanks :)  Sorry if the questions were dumb :D
[23:40:52] <phoe> then (sort list-of-b-instances #'a< :key #'b-a)
[23:40:58] <phoe> and no problem
[23:41:00] <moon-child> morally, f :key g is the same as (lambda (x y) (f (g x) (g y)))
[23:41:13] <pjb> foxfromabyss: yes: (shadow '+) (defgeneric + (a b)) (defmethod + (a b) (cl:+ a b )) (defmethod + ((a string) (b string)) (+ (parse-integer a) (parse-integer b)))
[23:41:27] <moon-child> but it is convenient to avoid typing g twice
[23:41:32] <foxfromabyss> i am scared of shadowing
[23:41:38] <foxfromabyss> :(
[23:41:40] <pjb> foxfromabyss: yes, sort takes a less argument.
[23:42:02] <foxfromabyss> thanks a lot for all the answers, appreciate it very much
[23:42:21] <pjb> foxfromabyss: so you're scared of too many hoops, of shadowing, and what else?
[23:42:42] <foxfromabyss> too many hoops is just me being lazy, and shadowing feels like smth that would break a lot of stuff, but maybe not
[23:43:03] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[23:43:03] <foxfromabyss> *could break a lot of stuff
[23:43:54] <foxfromabyss> unrelated, is there an example somewhere of how people use SLIME/SLY? So far i've been just pasting stuff from the source file and testing it there, but it feels like I am underutilizing a lot of features
[23:43:59] <foxfromabyss> but i am not sure what i could even need
[23:44:04] <foxfromabyss> coming from a non-repl background
[23:48:51] <contrapunctus> foxfromabyss: `M-x slime` -> `(ql:quickload :my-project)` -> edit code in buffer -> `M-x slime-eval-defun`
[23:49:15] <moon-child> C-c C-c
[23:49:19] <contrapunctus> (To send code to the REPL.)
[23:49:47] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[23:50:37] <pjb> foxfromabyss: you can avoid shadowing, by using symbols with a different name: (defgeneric plus (a b)) …
[23:50:55] <contrapunctus> (Mine is in a Hydra, so `m e e`,  or sometimes I use `lispy-eval` (just `e`))
[23:52:52] *** Joins: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de)
[23:55:45] <frodef> Hi all, is there some package that provides a compatibility layer for the MOP? Such that I can call e.g. sb-mop:class-slots without relying explicitly on sbcl/sb-mop ?
[23:55:50] <phoe> closer-mop
[23:56:01] <frodef> phoe: thanks
[23:56:07] <phoe> (ql:quickload :closer-mop) and then (:use #:c2cl) instead of #:cl
[23:56:13] <phoe> or just #'c2mop:class-slots
[23:57:00] <jackdaniel> c2cl supplements implementation-specified operators like defmethod with wrappers when the implementation doesn't implement fully the mop protocol and that can be fixed with a wrapper
