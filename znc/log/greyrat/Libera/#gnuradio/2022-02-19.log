[00:33:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:45:58] *** Joins: linext (~linext@pool-100-8-168-246.nwrknj.fios.verizon.net)
[00:46:16] *** Quits: pcero_ (~pcero@187.135.224.248) (Quit: Konversation terminated!)
[00:55:48] *** Quits: linext (~linext@pool-100-8-168-246.nwrknj.fios.verizon.net) (Ping timeout: 272 seconds)
[00:56:01] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[00:56:18] *** Joins: linext_ (~linext@pool-100-1-123-28.nwrknj.fios.verizon.net)
[01:03:30] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[01:14:52] <LordKalma> this book says "1024-point DFTs can now be performed in a few seconds on home
[01:14:52] <LordKalma> computers". I think they are wrong by couple orders of magnitude haha
[01:15:31] <Yamakaja[m]> ðŸ˜‚
[01:16:13] <Yamakaja[m]> Even a "real" DFT should take something measured in milliseconds
[01:16:17] <Yamakaja[m]> Lets see ...
[01:17:58] <Yamakaja[m]> 1.16ms in numpy for the DFT, 9.53Âµs for the FFT :D
[01:18:09] <LordKalma> sounds about right
[01:19:27] <Yamakaja[m]> Which book are you reading?
[01:20:46] <LordKalma> Understanding DSP, Lyons
[01:27:48] *** Quits: linext_ (~linext@pool-100-1-123-28.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[01:36:35] *** Joins: linext (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net)
[01:40:19] *** Joins: linext_ (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net)
[01:43:37] *** Quits: linext (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[01:49:48] *** Joins: nabaiste^ (~nabaiste@50.233.120.162)
[01:50:47] <DerekKozel[m]> I love that textbook
[01:53:12] <DerekKozel[m]> Slightly different computers in 1996
[01:55:12] <patchvonbraun[m]> When I was a spotty-faced teen, in 1980, we were looking at using FFT to categorize nerve impulses from lab rats, sampled at a few kHz.  We couldn't do it in real-time on a PDP-11.  Things have, indeed, changed a lot :)
[01:56:24] <DerekKozel[m]> Paired with Digital Communications by Sklar and Ray, it's a pretty complete basis for SDR comms
[01:57:17] <DerekKozel[m]> There's room for new fancy stuff, or deep dives into FEC or other areas, but they're the two books I pull out most for SDR stuff
[02:00:39] <Yamakaja[m]> <patchvonbraun[m]> "When I was a spotty-faced teen..." <- I recently learned to appreciate the power of our modern CPU Cores, which i had underestimated immensely. "Getting 10 SP GFLOPs on a Zen 2 Core might be doable?" Turns out, that thing can retire 16 mul FLOPs and 16 add FLOPs per cycle with AVX2, which results in 128 GFLOPs on a single core at 4 GHz. Of course allowing the CPU to hit these throughputs is still a challenge, but that's
[02:00:39] <Yamakaja[m]> still a lot :D
[02:01:32] <Yamakaja[m]> > <@patchvonbraun:gnuradio.org> When I was a spotty-faced teen, in 1980, we were looking at using FFT to categorize nerve impulses from lab rats, sampled at a few kHz.  We couldn't do it in real-time on a PDP-11.  Things have, indeed, changed a lot :)
[02:01:32] <Yamakaja[m]>  * I recently learned to appreciate the power of our modern CPU Cores, which i had underestimated immensely. "Getting 10 SP GFLOPs on a Zen 2 Core might be doable?" Turns out, that thing can retire 16 mul FLOPs and 16 add FLOPs per cycle with AVX2, which results in 128 GFLOPs on a single core at 4 GHz. Of course allowing the CPU to hit these throughputs is still a challenge, but even 70% of that is a lot :D
[02:02:19] <patchvonbraun[m]> Yamakaja: That is balanced with the number of FLOPs you need to "do anything useful" with a modern comms sample stream.  So, more GLFOPS is always better :)
[02:02:23] *** Quits: jemius (~imperator@200116b82d874f00d0910dd2486afb5e.dip.versatel-1u1.de) (Quit: Leaving)
[02:03:17] <Yamakaja[m]> And of course not every workload can actually benefit from SIMD :/
[02:05:23] *** Joins: linext__ (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net)
[02:05:34] <patchvonbraun[m]> Yamakaja: Precisely so.  The naive will complain that they can't get the performance they need even though they have a bagjigga-core CPU, not realizing that some parts of the flow simply don't parallelize that well.
[02:06:13] <Yamakaja[m]> Well, with SIMD we're still only talking about a single core :P
[02:06:40] <patchvonbraun[m]> Well, sure, but the "doesn't parallelize that well" scales both into SIMD and multi-core
[02:07:30] <Yamakaja[m]> To a certain extent i guess, but if you can do it with SIMD using multiple cores is going to be a waste on many levels :D
[02:07:55] <Yamakaja[m]> (Unless of course if even with SIMD a single core wont be able to keep up)
[02:08:17] *** Quits: linext_ (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[02:10:02] <patchvonbraun[m]> Yeah, that's the issue.  If it takes on average 150 instructions per sample just to move samples into a place where you can operate on them in parallel, and your single core can't keep up at 100Msps, no amount of SIMD or parallelism will help.   
[02:10:45] <Yamakaja[m]> Where is that 150 per sample number coming from?
[02:11:57] <patchvonbraun[m]> I pulled it from my posterior.    The point is that paralellism and SIMD are only part of the picture in getting samples out of hardware and into a nicely-parallizable context--it turns into a rate-limiting-step.
[02:15:45] <LordKalma> the first computer at our home was P4 already haha
[02:16:38] <Yamakaja[m]> So modern dual-channel bandwidth is in the 400 Gbps region, that should be enough for a lot of applications :D
[02:16:44] <Yamakaja[m]> * modern dual-channel memory bandwidth is
[02:16:56] <Yamakaja[m]> * modern dual-channel memory bandwidth is
[02:17:21] <LordKalma> this reminds me when I saw some folks making GPU computations and wondering why the scaling stopped at some grid size
[02:17:31] <LordKalma> BECAUSE THE BUS HAS FINITE BANDWIDTH YOU FUCKWITS
[02:17:47] <Yamakaja[m]> If you access patterns are predictable enough, and your instructions lend themselves to being pipelined / reordered, your CPU won't be idling too much
[02:18:02] <Yamakaja[m]> s/you/your/
[02:23:43] *** Joins: tark90 (~tark@2601:282:1781:4cc0::35bd)
[02:31:23] *** Quits: tark90 (~tark@2601:282:1781:4cc0::35bd) (Quit: Client closed)
[02:33:43] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[02:52:06] *** DiffieHellman_ is now known as DiffieHellman
[03:54:47] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:fd68:614b:79ea:3a06)
[04:00:44] *** Joins: nsk_nyc (~nsk_nyc@network45-238-142-host-234.inethn.net)
[04:10:57] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[04:39:08] *** Joins: ltx128 (~locu512@14-200-133-66.tpgi.com.au)
[04:44:39] *** Quits: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 256 seconds)
[05:24:12] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[05:26:52] *** Quits: DaViruz (~daviruz@host-78-78-253-119.mobileonline.telia.com) (Ping timeout: 272 seconds)
[05:33:48] *** Joins: pcero (~pcero@187.135.224.248)
[05:38:45] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:46:47] *** Quits: nsk_nyc (~nsk_nyc@network45-238-142-host-234.inethn.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:46:56] *** Quits: pcero (~pcero@187.135.224.248) (Quit: Konversation terminated!)
[05:48:56] *** Joins: pcero (~pcero@187.135.224.248)
[05:56:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:57:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:59:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[06:17:40] *** Joins: Lucanis (~Lucanis@user/lucanis)
[06:23:17] *** Quits: linext__ (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[06:24:52] *** Joins: linext (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net)
[06:25:44] *** Joins: boru` (~boru@user/boru)
[06:25:47] *** Quits: boru (~boru@user/boru) (Killed (NickServ (GHOST command used by boru`)))
[06:25:49] *** boru` is now known as boru
[06:31:45] *** Quits: linext (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[06:38:47] *** Joins: linext_ (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net)
[06:39:53] *** Quits: linext_ (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[06:41:01] *** Joins: linext_ (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net)
[06:42:21] *** Joins: Vonter (~Vonter@user/vonter)
[06:50:56] *** Quits: pcero (~pcero@187.135.224.248) (Quit: Konversation terminated!)
[07:00:06] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:fd68:614b:79ea:3a06) (Read error: Connection reset by peer)
[07:35:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[08:20:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[08:21:06] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[08:25:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:03:37] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 256 seconds)
[10:09:05] *** Quits: cuoops (~cuoops@user/cuoops) (Quit: kthxbye)
[10:17:55] *** Joins: cuoops (~cuoops@user/cuoops)
[10:43:18] *** Quits: cuoops (~cuoops@user/cuoops) (Quit: kthxbye)
[10:53:27] *** Joins: cuoops (~cuoops@user/cuoops)
[11:00:57] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[11:14:07] *** Joins: Vonter (~Vonter@user/vonter)
[11:17:09] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 252 seconds)
[11:18:32] *** Joins: DaViruz (~daviruz@host-78-78-162-44.mobileonline.telia.com)
[11:19:38] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 272 seconds)
[11:20:08] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[11:31:09] *** Joins: pcero (~pcero@187.135.224.248)
[11:40:17] *** Quits: Thorn (~Thorn@user/thorn) (Ping timeout: 240 seconds)
[11:43:19] *** Joins: Thorn (~Thorn@user/thorn)
[11:50:19] *** Joins: nsk_nyc (~nsk_nyc@network45-238-142-host-234.inethn.net)
[11:55:19] *** Joins: Vonter (~Vonter@user/vonter)
[12:13:37] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:cc96:6fbe:2c10:a50a)
[12:30:06] *** Quits: promach[m] (~promach@2001:470:69fc:105::ca1) (Quit: You have been kicked for being idle)
[12:34:24] *** Joins: axelrod (~axelrod@user/axelrod)
[12:39:30] *** Joins: jemius (~imperator@200116b82d0cbc00d0c6cbff9bb9cb78.dip.versatel-1u1.de)
[13:04:51] *** Quits: nsk_nyc (~nsk_nyc@network45-238-142-host-234.inethn.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:05:36] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[13:14:23] *** Quits: axelrod (~axelrod@user/axelrod) (Ping timeout: 256 seconds)
[13:18:03] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:388f:e9e1:9705:5630) (Remote host closed the connection)
[13:22:53] *** Quits: ltx128 (~locu512@14-200-133-66.tpgi.com.au) (Ping timeout: 256 seconds)
[13:35:20] *** Joins: BrianG61UK (~BrianG61U@82-69-89-71.dsl.in-addr.zen.co.uk)
[13:36:40] *** Quits: jemius (~imperator@200116b82d0cbc00d0c6cbff9bb9cb78.dip.versatel-1u1.de) (Quit: Leaving)
[13:43:33] *** Quits: greenriot (~greenriot@user/gr33nr10t) (Read error: Connection reset by peer)
[13:46:45] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[14:02:09] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[14:04:49] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[14:15:21] *** Joins: Vonter (~Vonter@user/vonter)
[14:37:44] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[14:39:23] *** Joins: Vonter (~Vonter@user/vonter)
[14:46:06] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 272 seconds)
[15:21:06] *** Joins: ltx128 (~locu512@14-200-133-66.tpgi.com.au)
[15:27:15] *** Joins: Vonter (~Vonter@user/vonter)
[15:32:36] *** Quits: BrianG61UK (~BrianG61U@82-69-89-71.dsl.in-addr.zen.co.uk) (Ping timeout: 240 seconds)
[15:38:01] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:299a:3503:1ee9:f148)
[15:57:43] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[16:02:03] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[16:05:16] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 272 seconds)
[16:25:21] *** Joins: Vonter (~Vonter@user/vonter)
[16:30:40] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:59:28] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:09:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:10:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[17:12:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:19:43] *** Joins: filename (~kilitary@185.193.143.131)
[17:31:17] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[17:31:41] <DerekKozel[m]> There's so much to consider on computer systems. When you start pushing performance it's easy to run into bottlenecks, solve one, then have the next bottleneck in a totally different type of resource.
[17:43:38] <LordKalma> indeed
[17:43:52] <LordKalma> one thing that I saw recently that I though was pretty cool was causal profilers
[17:44:02] <LordKalma> https://github.com/plasma-umass/coz
[17:44:11] <LordKalma> the talk is worth a watch
[17:57:30] *** Joins: axelrod (~axelrod@user/axelrod)
[18:10:28] *** Quits: ltx128 (~locu512@14-200-133-66.tpgi.com.au) (Read error: Connection reset by peer)
[18:17:50] *** Quits: axelrod (~axelrod@user/axelrod) (Ping timeout: 256 seconds)
[18:45:24] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[18:48:25] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[19:00:25] *** Joins: peter[m]1 (~petergnur@2001:470:69fc:105::1:c525)
[19:02:21] *** Joins: Vonter (~Vonter@user/vonter)
[19:30:28] *** Quits: karol[m] (~karolkdeo@2001:470:69fc:105::39d) (Quit: You have been kicked for being idle)
[19:32:10] <apt[m]> Hi, please forgive the super-beginner question!... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/4a0b5c6c3c6184b8da12df8c56568a4c2078dad6)
[19:33:11] <Yamakaja[m]> Throttles are only needed when you're not working with hardware and used to slow down the simulation to prevent it from using all the available CPU resources.
[19:33:19] <apt[m]> Ohhhhh
[19:33:29] <apt[m]> Hahaha, that makes so much sense. Thank you!!
[19:33:40] <Yamakaja[m]> In fact, when working with hardware, you really shouldn't be using throttles :D
[19:33:59] <apt[m]> I was so confused!! We will definitely be leaving them out then, lol
[19:48:20] *** Joins: jemius (~imperator@200116b82d0cbc00d0c6cbff9bb9cb78.dip.versatel-1u1.de)
[20:02:36] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 240 seconds)
[20:24:03] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[20:27:33] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[20:31:38] *** Joins: metal_egg (~metalegg@pool-72-94-145-43.phlapa.fios.verizon.net)
[20:35:59] <BarryDuggan[m]> apt: look at https://wiki.gnuradio.org/index.php?title=Sample_Rate_Tutorial
[20:40:29] *** Joins: yesno (~yesno@109.98.151.62)
[20:46:52] *** Quits: metal_egg (~metalegg@pool-72-94-145-43.phlapa.fios.verizon.net) (Quit: Leaving)
[20:51:58] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[20:58:18] <LordKalma> so if GRC doesn't have an actual real-time source/sink it just processes as fast as possible?
[20:58:24] *** Joins: IanW (~IceChat9@arcanum.force9.co.uk)
[20:59:14] <muaddib[m]> Yes. a time disciplined source/sink
[20:59:42] <muaddib[m]> Audio card/SDR
[21:01:07] <LordKalma> and so the throttle block just makes it behave rate-limited?
[21:01:07] <patchvonbraun[m]> LordKalma: Yup.  It views things as streams of samples without any notion of time.  Time is an artifice imposed by hardware at the interface to the "real world".  To the extent that blocks that aren't hardware blocks take a "sample rate" parameter, that's just used to normalize things like FIR filter coefficients, etc.
[21:01:53] <patchvonbraun[m]> LordKalma: Yes.  Used almost exclusively for simulations.   But I've used it sparingly in real hardware graphs where there's a sub-graph that isn't directly tied to the hardware.
[21:02:12] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:9959:de5e:ec61:4eac)
[21:04:07] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:9959:de5e:ec61:4eac) (Read error: Connection reset by peer)
[21:04:10] <LordKalma> so if you have like a file source and a soundcard sink, it pretty much computes the whole DSP chain and has everything in a buffer just before the sink
[21:05:18] <LordKalma> because only at point you're really rate limited
[21:05:39] <LordKalma> or does it "work backwards" and only asks for the samples at that moment, get what I'm trying to ask?
[21:05:52] <patchvonbraun[m]> LordKalma: Not quite.  Think of the sound-card "sucking" samples out of the graph.  Gnu Radio has a buffering mechanism, but it doesn't hold an infinite mass of samples.   That's what the buffering and work-scheduling parts of Gnu Radio are all about.
[21:06:42] <LordKalma> okay, so when the sink is rate limited, it pulls from the chain at the necessary rate as well
[21:06:47] <DerekKozel[m]> Samples are never produced until something wants to consume them.
[21:07:08] <muaddib[m]> youâ€™re also rate limited by your sound card rate.
[21:07:08] <muaddib[m]> So if youâ€™re streaming in at your base band sample rate, that wont work out. 
[21:07:20] <LordKalma> speaking of, I'm constantly surprised that on an SDR-DSP-Audio chains, you have 3 clocks, and no buffer underruns 
[21:07:40] <LordKalma> muaddib[m], yes, I'm just trying to understand the case of the rate-limited sink
[21:07:47] <LordKalma> since rate-limited source is pretty much trivial
[21:07:54] <LordKalma> you get what you get :p
[21:08:04] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:9191:2ef8:a1:afeb)
[21:08:19] <patchvonbraun[m]> LordKalma: You only have two clocks, really.  There's no inherent clock within the flow-graph.
[21:08:47] <patchvonbraun[m]> And, YES, such graphs DO suffer the two-clock problem from time to time.
[21:08:55] <LordKalma> well, I was counting the CPU, but I guess that one is so fast it's pretty much infinite irt to the source/sink clocks 
[21:09:27] <LordKalma> patchvonbraun[m], it's just on my experience as a consumer of SDR software, I don't ever remember of hearing a buffer underrun "pop" :)
[21:09:50] <DerekKozel[m]> You can definitely hit CPU bounds in a single block pretty easily with a really long filter for instance.
[21:10:05] <LordKalma> (also, I though people did synchronized FFT displays, then I realized it's just a rough approximation) 
[21:10:55] <LordKalma> DerekKozel[m], assuming the chain doesn't change, that's just lag
[21:11:04] <muaddib[m]> My work around for the two clock problem when streaming from a radio is to run the DSP and decimation down to 48k in one flow graph and send to 48K stream out of a ZMQ socket. Then I have a separate flowgraph with a multiply block and the sound card set to blocking=yes
[21:11:44] <LordKalma> muaddib[m], doesn't that result in very annoying "pop"s every now and then?
[21:11:49] <muaddib[m]> It helps avoid the Au and choppy audio problem
[21:12:15] <muaddib[m]> No
[21:12:48] <LordKalma> blocking=yes means what in this context, sorry?
[21:13:04] <muaddib[m]> I think about flowgraphs like a giant mechanical cog machine with different size cogs. Whatever your throttle or source Clock is running at, is the speed that youâ€™re turning the crank on the whole machine.
[21:14:04] <LordKalma> well, audio codec callbacks wait for *no one*. Is that what blocking is about? actually hangs the codec callback until there are samples? 
[21:14:06] <muaddib[m]> Blocking, in my experience, means that it will back pressure the flow graph as a hardware sink.
[21:14:26] <muaddib[m]> My explanation may be flawed.
[21:15:11] <DerekKozel[m]> There's sample latency (total number of samples buffered along the flowgraph), but essentially always a flowgraph will run faster than realtime or obviously slower than realtime.
[21:15:48] <DerekKozel[m]> If it's slower than realtime then it starves hardware sinks that have hard realtime clocks, or causes hardware sources to overflow their internal buffers (or network buffers)
[21:16:36] <LordKalma> https://wiki.gnuradio.org/index.php/Audio_Sink#OK_to_Block the documentation isn't lengthy either
[21:16:57] *** Quits: nabaiste^ (~nabaiste@50.233.120.162) (Ping timeout: 240 seconds)
[21:18:24] <DerekKozel[m]> Probably partially because the Audio Sink has six possible backend drivers
[21:18:52] *** Joins: filename (~kilitary@185.193.143.131)
[21:19:03] <LordKalma> hum, so, like, audio APIs basically callback a function at some rate, right? 
[21:20:25] <LordKalma> if you receive a callback and have no samples to give, what happens? 
[21:22:08] <DerekKozel[m]> shrug Depends on the backend I think
[21:22:20] <DerekKozel[m]> And also the exact soundcard that's being used
[21:22:50] <LordKalma> thanks
[21:23:20] <LordKalma> well, sometimes you have to wonder how all of this works, all being held together with spit and hopes and dreams
[21:23:37] <DerekKozel[m]> For PulseAudio for instance this error is thrown if the ring buffer underruns 
[21:23:38] <DerekKozel[m]> https://github.com/gnuradio/gnuradio/blob/main/gr-audio/lib/portaudio/portaudio_sink.cc#L74
[21:24:20] <DerekKozel[m]> Hardware interfaces are hugely challenging, and the variety of audio drivers and devices makes that really hard to make hard guarantees with
[21:25:31] <DerekKozel[m]> With most SDR hardware the guarantees are firmer. Though for instance the RTL-SDR will silently drop receive data sometimes. The PlutoSDR used to silently overflow as well, though now has the option of timestamping and reporting overflows
[21:26:34] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[21:26:42] <LordKalma> I guess if you don't have very hard requirements on latency you can buffer the sink, and only start consuming when it's like half-full
[21:27:07] *** Joins: davew723[m] (~davew723g@2001:470:69fc:105::1:c545)
[21:28:48] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[21:29:02] <DerekKozel[m]> BTW, I missed your comment earlier about Conan. You might find this talk interesting (or maybe you're already familiar with all it talks about)
[21:29:02] <DerekKozel[m]> https://archive.fosdem.org/2020/schedule/event/fsr_modernizing_distribution_of_sdr_tools/
[21:29:49] *** Joins: nabaiste^ (~nabaiste@50.233.120.162)
[21:30:17] <LordKalma> heheh I'll listen
[21:30:28] <LordKalma> I've contributed to CCI 
[21:30:44] <LordKalma> I tried adding rtlsdr, but omfg who wrote those cmakelists?
[21:30:49] <LordKalma> *librtlsdr anyway
[21:31:23] <LordKalma> I've added miniaud.io (pretty cool audio IO library), and found a bug on FFFTW that ended up getting fixed upstream
[21:31:28] <LordKalma> fuck yeah, I "fixed" FFFTW :D :D
[21:32:12] *** Joins: guerby_ (~guerby@ip165.tetaneutral.net)
[21:32:18] <davew723[m]> I'm pretty new to GNURadio and started developing a couple Out of Tree blocks.  I would like to extract/artifact the make test results into GitLab CI as part of my builds.  https://www.gnuradio.org/doc/sphinx-3.7.0/gr_unittest/index.html suggests that I can just add a second arg (gnuradio.gr_unittest.run(PUT, filename=None)) for a XML output report name.  When I do that I get the following from 'DEPRECATED: Using filename with
[21:32:18] <davew723[m]> gr_unittest does no longer have any effect.'  Before I dig thru the GNURadio common code I figured I would ask if anyone knows what the roadmap is for this support or has a solution?  (Its a habit of mine to setup tests right away or I can guarantee I will never add them...)
[21:32:36] *** Quits: guerby (~guerby@ip165.tetaneutral.net) (Ping timeout: 252 seconds)
[21:33:47] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Quit: ZNC 1.8.2 - https://znc.in)
[21:34:48] <LordKalma> DerekKozel[m], to successfully use a package manager, developers must learn build system higiene. Especially in libraries. You can be much more relaxed in application code, but in libraries, which are expected to be consumed by others, every hard-coded decision and assumption is a pain for packagers. And I think that's still *very* lacking in the C[++] ecosystem in general. Especially C, in my experience. 
[21:35:57] <DerekKozel[m]> Agreed
[21:36:43] <davew723[m]> * any effect.'  (and I don't get an .xml)  Before I
[21:36:58] <LordKalma> Conan doesn't solve everything. Notably, it doesn't have a good way to pass in compiler options (I guess you could try CXX_FLAGS env. variable), but it's up to the underlying build code to respect that.
[21:37:25] <DerekKozel[m]> davew723: I'm trying to find an example of the CI testing of an OOT that I saw recently
[21:37:30] <LordKalma> And Conan is going trough puberty, so it's a big hot fire mess right now, months away from 2.0 which will break half of it :) 
[21:38:20] <LordKalma> that said, it's a great community, and they've been doing tremendous work. I'm pretty satisfied. The only problem with conan is that you have to tell your fellow developers they need a python dependency to manage their dependencies.
[21:38:38] <LordKalma> which is kinda weird, telling people to install python to build your c++ project, but oh well
[21:38:46] <LordKalma> since GRC is very coupled to python that's not a problem :)
[21:39:21] <DerekKozel[m]> Yes, and Python is needed for the build even if you're using the runtime core that does not require Python
[21:40:51] <DerekKozel[m]> davew723: the one I was looking at just uses `ctest -V`, it doesn't export a separate file with the test results
[21:41:04] <DerekKozel[m]> https://github.com/daniestevez/gr-satellites-ci-action/blob/main/entrypoint.sh
[21:42:29] <DerekKozel[m]> And this gitlab example is for GNU Radio 3.8, not sure if there's a change in GitLab since then.
[21:42:29] <DerekKozel[m]> https://gitlab.com/librespacefoundation/gr-ccsds/-/blob/master/.gitlab-ci.yml#L35
[21:42:51] <DerekKozel[m]> Please do share anything you find back here! It'd be great to improve docs about OOT CI on various platforms
[21:46:20] <davew723[m]> Derek Kozel:  Thanks for the references!  The second one is close to what I'm doing now.  I will dig around a little more in that usage.
[21:47:24] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 240 seconds)
[21:50:41] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[21:58:40] <DerekKozel[m]> davew723: ctest --output-junit testRes.xml
[22:00:58] <DerekKozel[m]> https://gitlab.kitware.com/cmake/community/-/wikis/doc/ctest/Testing-With-CTest
[22:01:10] <DerekKozel[m]> New feature in CMake!
[22:04:00] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[22:10:09] *** Joins: Vonter (~Vonter@user/vonter)
[22:22:55] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Ping timeout: 240 seconds)
[22:22:57] <LordKalma> for some definition of new :p
[22:23:22] <LordKalma> ctest is pretty nice. Integrates well with couple testing frameworks
[22:27:47] <LordKalma> the thing most programmers hate is build code, which I actually don't mind writing 
[22:28:35] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[22:29:04] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[22:29:13] *** Quits: cuoops (~cuoops@user/cuoops) (Quit: kthxbye)
[22:30:26] *** Joins: cuoops (~cuoops@user/cuoops)
[22:32:29] *** Joins: BrianG61UK__ (~BrianG61U@2a02:8010:66b7:dddd:299a:3503:1ee9:f148)
[22:34:37] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:299a:3503:1ee9:f148) (Ping timeout: 240 seconds)
[22:34:44] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:9191:2ef8:a1:afeb) (Ping timeout: 252 seconds)
[22:34:57] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:9191:2ef8:a1:afeb)
[22:37:37] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[22:37:45] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:299a:3503:1ee9:f148)
[22:38:46] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:299a:3503:1ee9:f148) (Client Quit)
[22:39:06] *** Quits: BrianG61UK__ (~BrianG61U@2a02:8010:66b7:dddd:299a:3503:1ee9:f148) (Ping timeout: 245 seconds)
[22:39:52] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:9191:2ef8:a1:afeb) (Ping timeout: 250 seconds)
[23:14:38] *** Quits: pcero (~pcero@187.135.224.248) (Quit: Konversation terminated!)
[23:20:06] *** Joins: filename (~kilitary@185.193.143.131)
[23:50:31] <davew723[m]> Derek Kozel:  Thanks.  Unfortunately the way gr_modtool gens the tests that doesn't work.  ctest is just calling python/qa_xxx.py test files.  So ctest looses control of the ability to --output-junit like it normally would, unless I missed something.  gr_unittest is based on python unittest.  I was able to modify the generated qa_xxx.py test code to leverage python unittest-xml-reporting library.  (I faintly remember doing this with some
[23:50:32] <davew723[m]> other framework.)  Anyway I have reports working now.  Assuming I play with it awhile and it continues to work well I could propose a small tweak to the gr_modtool.
[23:52:31] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[23:53:45] *** Quits: nabaiste^ (~nabaiste@50.233.120.162) (Remote host closed the connection)
[23:54:01] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[23:55:24] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[23:56:07] *** Joins: Rayston (~Rayston3@98.186.222.191)
[23:57:39] <DerekKozel[m]> Please do! 
[23:58:08] <DerekKozel[m]> If you could file an issue right now that works be great. And a PR or suggestion later even better
[23:59:30] *** Joins: Luke_LM (~Luke_LM_4@cpc72411-sotn15-2-0-cust758.15-1.cable.virginm.net)
