[00:00:21] <sham1> Yeah. I was thinking about making a small library for some function memoization
[00:01:38] <amazigh> sham1: how is that related to SRFI 225
[00:01:54] <sham1> Well you need to cache the procedure returns somehow
[00:02:29] <sham1> And it was the first SRFI I saw for mappings. Clearly I should have just navigated to 146 first because I actually know how to use that
[00:08:10] <amazigh> Zipheir: I am willing to reply to you message on R7RS WG2 group about scheme-live, since I am the primary contributor, I want to underline that scheme-live, in my mind, is not a fork of R7RS-Large, but a space where to have a long now convo about libraries unlike SRFI but maybe that is me misunderstanding SRFI process, and also Lassi goals
[00:10:03] <amazigh> also possibly less formal than SRFI, the way I see it is that SRFI should be dedicated to existing libraries that were proven to work, and shared in the community
[00:10:51] <amazigh> recent example SRFI-200 or SRFI-204.
[00:10:54] *** Quits: zostj (~rue@61-231-129-103.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[00:10:59] <amazigh> unlike an iterative process where SRFI n, is supersed by SRFI n+m
[00:11:43] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[00:15:13] <amazigh> eg. SRFI 231
[00:22:37] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[00:23:15] *** Joins: irontom (~user@38.81.106.9)
[00:26:26] *** Joins: m455 (~m455@user/m455)
[00:27:28] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:30:10] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[00:34:12] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[00:34:50] *** Joins: TCZ (~tcz@91.150.178.124)
[00:40:16] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[00:40:44] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:41:26] *** Joins: irontom (~user@38.81.106.9)
[00:44:01] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[00:48:12] <Zipheir> amazigh: Oh, I remember what it's supposed to be.  Lassi talked extensively to me about it last January.
[00:50:13] <Zipheir> amazigh: But, AFAIR, he never explained why he (a) disappeared from scheme-live, and (b) suddenly started trying to (apparently) rework scheme-WG2 "in its image".
[00:50:30] <Zipheir> It's a very weird story.
[00:53:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:54:28] *** Joins: seninha (~chatzilla@user/seninha)
[01:09:52] *** Joins: irontom (~user@38.81.106.9)
[01:10:03] *** Joins: mnieper (~user@2a02:810d:440:adc:2f77:7c24:80fc:2dbd)
[01:11:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:18:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:26:15] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[01:26:25] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[01:53:18] *** Joins: irontom (~user@38.81.106.9)
[01:55:05] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:57:36] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[02:05:15] *** Joins: mnieper` (~user@212.30.36.103)
[02:06:15] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:06:35] *** Quits: klovett (~klovett@107.116.92.161) (Quit: ZZZzzz…)
[02:07:09] *** Quits: mnieper (~user@2a02:810d:440:adc:2f77:7c24:80fc:2dbd) (Ping timeout: 252 seconds)
[02:14:10] *** Joins: seninha (~chatzilla@user/seninha)
[02:16:28] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[02:17:45] *** Joins: badkins (~badkins@136.56.92.199)
[02:18:00] *** Quits: mnieper` (~user@212.30.36.103) (Ping timeout: 250 seconds)
[02:29:54] *** casmajavi_ is now known as casmajavi
[02:34:54] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 250 seconds)
[03:18:11] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:19:35] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[03:30:04] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:32:01] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[03:37:04] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[03:47:15] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 252 seconds)
[03:47:21] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:10:59] *** Joins: s-liao (~s-liao@101.86.102.167)
[04:15:04] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Remote host closed the connection)
[04:26:39] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:40:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[04:40:43] <jcowan> Zipheir: It parallels various earlier stories of the same type.
[04:44:42] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:bc91:87ee:dc4:4024)
[04:44:42] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:bc91:87ee:dc4:4024) (Changing host)
[04:44:42] *** Joins: skapata (~Skapata@user/skapata)
[04:56:07] *** Joins: klovett (~klovett@107.116.92.161)
[04:57:46] *** Joins: badkins (~badkins@136.56.92.199)
[04:57:58] *** Joins: irontom (~user@38.81.106.9)
[05:11:38] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 272 seconds)
[05:27:28] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 272 seconds)
[05:32:46] *** Joins: seninha (~chatzilla@user/seninha)
[05:42:12] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 252 seconds)
[05:42:54] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:44:15] *** Joins: jao (~jao@45.134.142.222)
[05:53:35] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[05:55:55] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[05:55:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[05:56:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:56:16] *** alMalsamo is now known as lumberjack123
[06:01:31] *** Joins: badkins (~badkins@136.56.92.199)
[06:05:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:07:17] *** Quits: daviid (~user@179.210.58.162) (Ping timeout: 240 seconds)
[06:16:14] *** Joins: m455 (~m455@user/m455)
[06:28:36] *** Joins: daviid (~user@2804:18:5825:b434:6222:8f6e:bc4d:33d)
[06:43:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[06:43:43] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[06:48:15] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[07:00:34] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 272 seconds)
[07:13:49] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:59] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[08:03:14] *** Joins: badkins (~badkins@136.56.92.199)
[08:07:42] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[08:22:36] *** Quits: s-liao (~s-liao@101.86.102.167) (Quit: Client closed)
[08:26:52] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[08:31:58] *** Quits: jao (~jao@45.134.142.222) (Ping timeout: 250 seconds)
[08:34:19] *** Joins: s-liao (~s-liao@101.86.102.167)
[08:35:21] *** Quits: s-liao (~s-liao@101.86.102.167) (Client Quit)
[08:39:46] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[08:42:03] *** Quits: daviid (~user@2804:18:5825:b434:6222:8f6e:bc4d:33d) (Ping timeout: 252 seconds)
[08:50:24] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:01:24] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:10:00] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[09:21:31] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[09:39:01] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[09:41:08] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:47:07] *** Joins: zacque (~zacque@124.82.52.252)
[09:50:21] *** Quits: klovett (~klovett@107.116.92.161) (Quit: ZZZzzz…)
[10:13:20] *** Quits: madage (~madage@user/madage) (Quit: leaving)
[10:14:31] *** Joins: madage (~madage@user/madage)
[10:24:29] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:26:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:bc91:87ee:dc4:4024)
[10:26:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:bc91:87ee:dc4:4024) (Changing host)
[10:26:20] *** Joins: skapata (~Skapata@user/skapata)
[10:54:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[10:56:09] *** Joins: lwhjp (~user@softbank126150065004.bbtec.net)
[10:58:37] *** Joins: s-liao (~s-liao@101.86.102.167)
[11:21:11] *** Joins: seninha (~chatzilla@user/seninha)
[11:25:47] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:28:35] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:36:26] *** Joins: Nselm (~Nselm@p200300d56f3ad47571811764dd95855a.dip0.t-ipconnect.de)
[11:38:35] *** Joins: badkins (~badkins@136.56.92.199)
[11:42:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[12:39:29] <dpk> jcowan: repeating with attribution is great! it's actually one of the things you can do to support marginalized/ignored colleagues in meetings etc. the problem is 'saying what i just said but without mentioning me (thus implicitly claiming my idea as your own)'
[12:43:05] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[12:43:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:55:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[12:57:36] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[13:02:51] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[13:13:05] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:18:45] *** Joins: daviid (~user@179.210.58.162)
[13:28:37] *** Quits: s-liao (~s-liao@101.86.102.167) (Ping timeout: 256 seconds)
[13:30:40] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[13:30:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[13:32:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:33:15] *** Joins: mala (~mala@user/malaclyps)
[13:39:38] *** Joins: badkins (~badkins@136.56.92.199)
[13:43:58] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[13:50:45] <amazigh> hello all :)
[13:51:26] <amazigh> aeth: do you know a website that record the price of hardware. I am still looking forward buying a threadripper, but I do not know when will be the good time
[13:54:41] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:3cb:4a0c:5063:cb17) (Ping timeout: 256 seconds)
[14:27:22] *** Quits: lazr (~lazr@45.76.248.123) (Ping timeout: 260 seconds)
[14:39:54] *** Joins: X-Scale` (~ARM@83.223.233.31)
[14:41:00] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[14:41:01] *** X-Scale` is now known as X-Scale
[14:52:07] *** Joins: s-liao (~s-liao@101.86.102.167)
[14:52:27] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:a944:f298:3868:4c64)
[14:55:38] *** Joins: thevishy (~Nishant@49.37.242.151)
[15:02:30] *** Joins: cybersyn (~user@42.113.121.31)
[15:07:05] *** Joins: notzmv (~zmv@user/notzmv)
[15:28:30] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:30:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:34:59] *** Quits: s-liao (~s-liao@101.86.102.167) (Ping timeout: 256 seconds)
[15:36:02] *** Joins: zostj (~rue@61-231-129-103.dynamic-ip.hinet.net)
[16:00:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:03:59] *** Joins: badkins (~badkins@136.56.92.199)
[16:05:03] *** Quits: Nselm (~Nselm@p200300d56f3ad47571811764dd95855a.dip0.t-ipconnect.de) (Quit: Client closed)
[16:13:49] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[16:21:42] *** Quits: zostj (~rue@61-231-129-103.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[16:23:11] *** Joins: zostj (~rue@61-231-129-103.dynamic-ip.hinet.net)
[16:25:09] *** Quits: thevishy (~Nishant@49.37.242.151) (Quit: Leaving)
[16:36:33] *** Joins: s-liao (~s-liao@101.86.102.167)
[16:37:06] <jcowan> dpk: Thanks.  I grew up with a hard of hearing to deaf (not Deaf) father and he often did that with everyone.  I think that the men in a meeting are consciously listening to one another only, but some of what she says is picked up unconsciously and repeated, so that it reallly does *seem* to the man that it's his own idea.
[16:58:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:58:20] <dpk> my father is now also doing something similar (asking things my mother or sister already told him) and we can't tell if it's his hearing or forgetfulness and thus potentially dementia
[16:58:33] <dpk> (though he did a test for dementia a few years ago and it was negative)
[16:58:53] <dpk> (or just that he isn't paying attention to them, as you say)
[17:01:00] *** Quits: zwrr (~zwr@2804:d45:b966:fb00:d5f4:d325:b39e:8704) (Ping timeout: 240 seconds)
[17:02:04] *** Joins: zwr (~zwr@2804:d45:b966:fb00:53dd:b5a5:6b8e:e94d)
[17:10:04] *** Quits: zostj (~rue@61-231-129-103.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[17:10:12] *** Quits: gabot (~gabot@lambda.ccs.neu.edu) (Ping timeout: 240 seconds)
[17:10:31] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[17:14:02] *** Joins: zostj (~rue@61-231-129-103.dynamic-ip.hinet.net)
[17:15:13] <jcowan> One of the things I do in meetings is to say "I think Sarah has something to say" if I see that she's trying to cut in but can't quite.  Works pretty well.
[17:16:10] <jcowan> It's a delicate balance between being ignored myself and embarrassing Sarah into even deeper reticence, though.
[17:23:24] <Franciman> ggwp
[17:26:01] *** Joins: gabot (~gabot@lambda.ccs.neu.edu)
[17:30:17] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[17:31:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:32:34] *** Joins: badkins (~badkins@136.56.92.199)
[17:36:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:42:49] *** Quits: casmajavi (~casmajavi@user/casmajavi) (Quit: Leaving)
[17:54:14] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[17:54:24] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[18:02:51] *** Quits: zacque (~zacque@124.82.52.252) (Quit: Goodbye :D)
[18:08:41] *** Quits: s-liao (~s-liao@101.86.102.167) (Quit: Client closed)
[18:15:44] *** Joins: klovett (~klovett@107.116.92.161)
[18:16:32] *** Joins: badkins (~badkins@136.56.92.199)
[18:18:52] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 272 seconds)
[18:19:05] *** Joins: psf (~pi@206.55.172.18)
[18:34:24] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[18:43:47] *** Joins: kiky (~kiky@89.151.179.41)
[18:44:00] *** Parts: kiky (~kiky@89.151.179.41) ()
[18:55:42] *** Joins: klf (~fkl@67.216.58.219)
[18:55:44] <klf> Hello.
[18:59:32] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[18:59:55] <klf> So I've gotten most of the design sketched out for a typechecker of a miniScheme to C compiler that I am writing.  Before I get to my question, let me briefly describe my SymbolTable followed by a small example.
[19:00:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:ac39:dcc4:f026:98c)
[19:00:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:ac39:dcc4:f026:98c) (Changing host)
[19:00:21] *** Joins: skapata (~Skapata@user/skapata)
[19:02:23] *** Joins: robin (~robin@user/terpri)
[19:02:45] <klf> class SymbolTable instances maintain a stack (a Python list) of dictionaries, each representing a scope (which gets pushed and popped)
[19:05:09] <klf> (define x #t) ; scope['x'] = [Type('bool')]
[19:05:47] <klf> (define x 1) ; scope['x'] = [Type('bool'), Type('int')]
[19:07:23] <klf> (define x #f) ; scope['x'] = [Type('int'), Type('bool')], where scope['x'][-1] represents the curernt type of 'x'
[19:11:19] <klf> (define x (lambda (i j) (+ i j)))  ; I am using a class SignaturesList to represent a procedure.
[19:13:27] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[19:13:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[19:13:55] *** Joins: Everything (~Everythin@37.115.210.35)
[19:14:35] <klf> Problem:  I am thinking of a clean way of  maintaining binding information across definitions --- between primitives types (i.e., Type('int'), Type('str'), Type('bool')) and procedure type (i.e., SignaturesList)
[19:16:23] <klf> Using on the current design, I think the problem is still solvable. I guess I could instead maintain a stack of two stacks --- one for procedures and one for primitive types.
[19:16:44] <klf> Just thinking if there's something more elegant.
[19:16:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[19:17:16] <klf> Zipheir: What do you think, buddy?
[19:17:51] <amazigh> there is two bindings, the variable -> type and in the case of a type = procedure a procedure -> signature
[19:18:42] <amazigh> I do not see the use of two scopes.
[19:19:26] <klf> sorry, I don't understand your question.
[19:19:35] <amazigh> procedure is a type that must mention the signature
[19:19:50] <amazigh> it is a not a question.
[19:20:45] <amazigh> What you don't understand?
[19:20:54] <amazigh> what is it you don't understand?
[19:22:36] <amazigh> btw, in the line (define x #f); scope['x'] ... if I follow your design, it is missing Type('bool') at the beginning of the list / stack / scope
[19:23:05] <amazigh> anyway, that will not work.
[19:25:06] <amazigh> what you need is stack of "scopes" usually called "environments" in Scheme, in each environment there is a bindings {'myvar1': its_type, 'myvar2': its_type2} where its_typeFOO is Type('int') or Type('bool'
[19:25:09] <klf> okay, let's start on that aforementioned line.  It's missing on purpose.  
[19:25:15] <amazigh> or even Type('procedure')
[19:25:40] <klf> amazigh: I do have a stack of scopes.
[19:25:49] <klf> 11:35 < klf> class SymbolTable instances maintain a stack (a Python list) of dictionaries, each representing a scope (which gets pushed and popped)
[19:26:24] <amazigh> why are you storing the previous type in scope['x']?
[19:27:34] <amazigh> once overriden the previous object, hence the previous type is not useful.
[19:28:51] <amazigh> sorry, the environment, looks like environment = [{'myvar': type0, ...}, {...}, {...}] it is also stack like you describe
[19:29:15] <amazigh> the inner dictionaries bind a variable name with a type
[19:31:26] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[19:32:25] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:33:22] <klf> amazigh: because I'll need a new declaration in C for every different type.
[19:33:48] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[19:36:00] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[19:36:42] <amazigh> hmm that is now how it is done in the Scheme I know
[19:38:26] <amazigh> let's pick your example with 'x' (that is not a good name), since there 2 types associated with x. You will declare in C: 
[19:38:27] <klf> This was one of the solution suggestions from my instructor.
[19:38:28] <amazigh> boot_t x_bool; and int x_int
[19:38:30] <amazigh> ?
[19:38:32] <klf> https://imgur.com/a/bkXrnzK
[19:40:06] <klf> When conpiled to C, scope['x'][0] will be assigned one name, and scope['x'][1] will be assigned another.
[19:40:14] <amazigh> yes
[19:41:07] <amazigh> How do you know what C variable holds the last the good value?
[19:41:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:41:48] *** Quits: zostj (~rue@61-231-129-103.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[19:41:49] <klf> 11:40 < klf> (define x #f) ; scope['x'] = [Type('int'), Type('bool')], where scope['x'][-1] represents the *current* type of 'x'
[19:42:42] <amazigh> you mention you need to compile to C too, that is why I am asking.
[19:43:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:01:55] <amazigh> klf: re-ask your question maybe some else will chime in
[20:04:54] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:25:03] *** Joins: badkins (~badkins@136.56.92.199)
[20:26:12] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[20:28:51] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:28:59] *** Joins: badkins (~badkins@136.56.92.199)
[20:33:13] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:37:55] *** Joins: badkins (~badkins@136.56.92.199)
[20:42:34] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[20:56:29] <Zipheir> klf: Is scope some kind of environment?
[20:56:51] <Zipheir> No, I guess not.
[20:56:53] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[20:58:50] <Zipheir> klf: Shouldn't each toplevel-defined name be associated with only one type?  What's the meaning of scope[x] = [bool, int] ?
[20:59:05] *** Joins: jao (~jao@45.134.142.222)
[21:00:34] <klf> at any given level, a name can be associated to at most three types since I limit my input language to three types
[21:01:41] <klf> e.g., scope['x'] = [Type('str'), Type('bool'), Type('int')]
[21:02:40] <klf> scope['x'][-1] == Type('int')
[21:03:11] <klf> Suppose the next line of Scheme is: (+ 1 x)
[21:03:20] <Zipheir> klf: But doesn't that mean you have three different bindings for x?
[21:03:31] <klf> then it would pass the typer-checker
[21:04:04] <Zipheir> And so would (if x 1 2), and (string-append x x) ?
[21:06:58] <klf> Zipheir: it would not, a call to SymbolTable.lookup on x would return scope['x'][-1], represents the *current* type of 'x'
[21:07:37] <klf> scope['x'][-1] is the top of the stack
[21:08:24] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[21:08:38] <klf> If I am *only* doing typechecking, I think it'd work w/o a stack at all
[21:09:15] <Zipheir> So, in other words, the most recent binding for x.  e.g. (let ((x 10)) (let ((x #t)) (let ((x "kermit")) x))) then the x in the body of the innermost let is of type String.
[21:10:21] <Zipheir> Or maybe I'm misunderstanding.
[21:11:29] <klf> https://www.dropbox.com/sh/1hqk8g7eda4if15/AABApd3IhJE7tmoWY5U-CtABa?dl=0
[21:11:54] <klf> Check out javaJavaSymbolTable.py.  It's code the TA shared in tutorial.
[21:12:42] <Zipheir> Ugh, I'm not ready for that yet today.  I'll take a look after more coffee.
[21:12:47] <klf> it's a simple approach that works fine.  It's uses a stack of dictionaries to keep track of scopes, which gets pushed and popped
[21:13:50] <klf> there's really not much to it:  self.scope_stack = [dict()]
[21:14:40] <Zipheir> Oh, sure, that's the implementation, but what does it mean?
[21:15:41] <Zipheir> Clearly scope is supposed to express some kind of function from names to types, but I'm not entirely sure of its semantics.
[21:19:25] <Zipheir> In particular, is a name x appearing in a given context always associated with at most one type by the scope?  Or is there some kind of "polytypy" going on where the scope associates x with multiple types?
[21:20:49] *** Joins: robin (~robin@user/terpri)
[21:35:53] <klf> yes, x appearing in a given context is always associated to one scope.  After thinking it through, I am going to drop the idea of maintaining a types stack for each "define"d name because keeping the most track of the most recent type is suffice for the purpose of type-checking.
[21:36:10] <klf> s/suffice/sufficient/
[21:40:04] *** Joins: badkins (~badkins@136.56.92.199)
[21:40:36] <amazigh> :)
[21:44:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[21:45:32] *** Joins: badkins (~badkins@136.56.92.199)
[21:48:41] *** Parts: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) ()
[21:49:04] <sham1> klf: are your functions and such always going to receive known types?
[21:49:11] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[21:51:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[21:57:16] <klf> sham1: each procedure is represented by a Signature object which has a 'typeslist' attribute.  On functiona application, the types of the arguments are determined and replaces corresponding Signature object's typeslist.  Yes, we only check to see if the number of passed args matches the number of params.
[21:58:21] *** ChanServ sets mode: +o Zipheir
[21:58:31] *** Zipheir sets mode: +v mnieper
[21:59:03] <mnieper> Hi, Zipheir!
[21:59:21] <klf> well, not *only*.  we typecheck too.
[22:00:18] <klf> (define myadd (lambda (x y) (+ x y)))
[22:00:29] *** Zipheir sets mode: -v mnieper
[22:00:44] <mnieper> Hi again, Zipheir!
[22:00:50] <Zipheir> mnieper: ACK!
[22:01:16] <klf> (myadd "NaN" 3) ; on application, the typelist gets updated to [Type('str'), Type('int')]
[22:02:31] <klf> and then typecheck fails on (+ x y)
[22:02:57] <Zipheir> So apparently all Libera channels are implicitly +r (only registered nicks can talk)?  We'll have to try to fix this at some point, if possible.
[22:02:57] <mnieper> klf: Is your "scope" a lexical or a dynamic property?
[22:03:22] *** ChanServ sets mode: -o Zipheir
[22:03:46] <klf> lexical
[22:04:22] <mnieper> How do you handle things like (let f ((x (foo))) ...) then where (foo) returns sometimes a bool and sometimes an int?
[22:05:07] <sham1> Yeah, either a number or #f given some condition for example
[22:05:08] <klf> not thinking about that atm, not supporting 'let'
[22:06:14] <klf> The other question you could ask is... "how would you handle the two branches of an 'if'?"
[22:06:39] <klf> My prof suggests that I could limit/require that both sides return the same type :-)
[22:08:05] *** ChanServ sets mode: +o Zipheir
[22:08:36] <mnieper> klf: You can do this and you could also require that a variable in a named let mustn't change its type, but then you would get something different than Scheme.
[22:08:43] <sham1> What I'd possibly do is try to have a thing where you can have some kind of a "union" representation, so you can have Type('str') | Type('int') or whatever
[22:09:00] *** ChanServ sets mode: -o Zipheir
[22:09:15] <dpk> klf: have you looked into CMUCL/SBCL's type propagation? http://www.cs.cmu.edu/~ram/pub/lfp.ps
[22:09:22] <klf> yes, someone suggested that as well.. You are talking about a "sum" data
[22:09:27] <klf> s/data/type/
[22:09:28] <sham1> Yeah
[22:10:00] <dpk> that's more of an overview of the whole implementation … not sure if there's a better paper describing their type inference and optimizations based on it in particular
[22:10:22] <sham1> Type inference and propagation are interesting because you can for example try to propagate types backwards through your flow potentially
[22:12:09] <klf> maybe at another time; but not for this project.  It's crunch time.  Currently, I do a typecheck on the last body of lambda to determine the return type
[22:13:05] <sham1> Well yeah, you need to figure it out in the tail position
[22:15:22] <Zipheir> Ahem, not +r.  Unregistered users are devoiced but can still join the channel, it seems.  I've added an ENTRYMSG to the effect of "if you can't talk, register your nick", for now.
[22:15:52] *** Joins: badkins (~badkins@136.56.92.199)
[22:17:56] <mnieper> Zipheir: thanks!
[22:19:35] <Zipheir> Yeah, it seems to be Libera policy, since the mode of the channel hasn't changed from the old Freenode days. :-/
[22:20:25] *** Parts: amazigh (~amirouche@user/amirouche) (WeeChat 2.8)
[22:20:30] *** Joins: amazigh (~amirouche@user/amirouche)
[22:20:35] <klf> dpk: thank you.  will check it out later :-)
[22:32:30] <amazigh> re C FFI while it will be useful addition to Scheme as a whole, I do not think it fits RnRS: a) except if there is reliable way to fetch errno, it will not help with networking libraries, hence it will not help with non-portable libraries, b) imo, it should be optional or it should take into account implementations like loko
[22:33:30] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[22:34:26] <sham1> It probably would have to be implementation-specific, and then one could make a wrapper for the different implementations like how CFFI is for CL
[22:34:41] <amazigh> at least with Guile and Chez there is no way to fetch errno reliably.
[22:35:19] <amazigh> I asked #lisp, and CLers agreed that errno is a big problem.
[22:36:09] <sham1> Well all one would really need is a one-liner function like `int get_errno(void) { return errno; }` in some C support library and now you have the `errno`, but it would be a question of "well where do I put it"
[22:36:50] <amazigh> no, see https://github.com/cisco/ChezScheme/issues/550#issuecomment-812032331
[22:37:09] <amazigh> I think gauche has a behavior.
[22:37:53] *** Joins: taylan2 (~taylan@user/taylan)
[22:37:55] <sham1> Oh I see
[22:38:20] <sham1> Just save the errno between every foreign function call :P
[22:38:40] <amazigh> (what would work with Chez is form like `foreign-procedure/errno` that returns both the return value of C procedure and the value of errno just after the call to the C procedure before Chez returns to Scheme)
[22:38:42] <amazigh> yes
[22:38:56] <dpk> yeah, it seems to me like this is far more easily solved by "the garbage collector saves errno before running and restores it after it's finished"
[22:39:31] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Remote host closed the connection)
[22:39:50] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[22:40:00] <sham1> Mm, the "weirdest" thing would be to somehow make it thread local but that probably isn't too big a problem
[22:40:17] *** Quits: taylan (~taylan@user/taylan) (Ping timeout: 240 seconds)
[22:40:36] <amazigh> I tried that but failed ^^'
[22:40:38] <amazigh> fwiw
[22:41:27] <amazigh> dpk idea could work, only if the GC is the only part of the implementation that access errno
[22:42:29] <amazigh> An alternative, that is not made of Scheme, is to have wrappers of POSIX libraries that do not use errno, and instead return the errno value via a function argument *errno
[22:43:34] <Zipheir> I want a POSIX server so I can completely dispense with C FFI for POSIX programs. :)
[22:44:13] <dpk> what do you mean by a POSIX 'server'?
[22:44:22] <sham1> Probably something like what you'd have on a microkernel
[22:46:11] <Zipheir> dpk: Some daemon which talks a text protocol and does POSIX system calls for your client program.
[22:46:55] <dpk> and how do you want to connect to this daemon?
[22:47:31] <sham1> She's got a point there. How'd you do it? TCP? Because that sounds circular AF
[22:47:33] <Zipheir> Probably sockets, unfortunately. :(
[22:48:44] <Zipheir> It may simply be impossible for something as low-level as system calls.  But really, the OS is a sort of server--why do I need FFI to send it requests?
[22:49:35] <sham1> If we had plan9, we could just open various locations in magic filesystem paths and suddenly you have a network connection
[22:49:46] <Zipheir> sham1: If you know of related ideas involving microkernels, do tell. :)  I'm sure smarter people than I have thought a lot about this.
[22:50:37] <Zipheir> sham1: Yes, 9p is a really good idea.
[22:51:24] <Zipheir> In general, client/server arrangements are an (underrated!) alternative to FFI.  I wonder how far the idea can be pushed.
[22:51:51] <dpk> well, you don't. mov x8, [system call number here]; svc 0
[22:51:54] <mnieper> I think the answer to all these questions is that a portable FFI needs glue code on the C side, e.g. to store errno.
[22:52:07] <mnieper> In some sense, this is a kind of client/server arrangement.
[22:52:10] <dpk> (Aarch64, your instruction set may vary)
[22:56:13] <amazigh> that is wrapper.
[22:56:16] <amazigh> that is a wrapper.
[22:57:20] <Zipheir> sham1: Maybe the OS should give each process a direct line to God, er, the kernel, in the form of a system bus fd.  Sorry, I'm just thinking out loud.
[22:57:36] <dpk> and it would write to this fd how
[22:57:36] <dpk> ?
[22:57:54] <Zipheir> dpk: True.
[22:58:06] <sham1> Yeah, you have some kind of a bootstrap problem no matter what you do
[22:58:15] <Zipheir> God gives you a telephone and a voice and the rest is up to you. :)
[22:58:49] <dpk> i guess you could have an area of memory which the kernel traps writes to and … blech
[22:59:08] <dpk> God, as you put it, gave us the service interrupt ;-)
[22:59:13] <mnieper> amazigh: What is a wrapper?
[22:59:27] <Zipheir> dpk: Heh :)
[22:59:56] <Zipheir> AFK, back later.
[23:00:02] <sham1> I mean, this is partially why I like the idea of lisp machines and it would be interesting to see a Scheme-ish take on one
[23:00:14] <sham1> Basically when you control the universe things become so much easier
[23:00:19] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[23:00:37] <sham1> The hard part of making an apple pie out of scratch though of course is reinventing the universe
[23:02:28] <dpk> i'm still intrigued by the theory that a sufficiently smart compiler enforcing memory protection in software and running everything in Ring 0 could actually be marginally faster than the current situation where hardware interrupts are used for memory protection (because that's slower than you'd think)
[23:03:25] <sham1> It most likely would. Also your "system calls" wouldn't need to jump across the rings and such
[23:03:26] <dpk> that theory is about ten years old now, though, and hardware memory protection may have got faster relative to compilers. (though unlikely, given it also had to get *slower* to protect against all the delightful branch prediction bugs we've seen in recent years)
[23:04:43] <sonny> dpk what's the point? mmu is there so might as well use it
[23:05:23] <dpk> but what if the MMU is slower than doing it in software? that's the point
[23:05:37] <sonny> someone told me the overhead is small
[23:05:59] <dpk> the problem is that it would require absurd amounts of engineering effort to develop such a compiler and operating system running on bare metal to test the hypothesis
[23:06:01] <sham1> But it could still be smaller
[23:06:24] <sonny> dpk singularity used both methods
[23:06:27] <dpk> yeah, iirc the paper was from Microsoft Research in something like 2011 and they reckoned with maybe a 5% speedup
[23:06:58] <dpk> which, again, is the sort of thing where the gains are within the margins of error of compiler speed measurement anyway
[23:07:03] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[23:07:04] <sonny> dpk what's your idea for isolation?
[23:07:26] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[23:08:14] <sonny> I don't remember the details but when I tried this thought experiment I ended up needing an mmu ...
[23:08:30] <sham1> IIRC part of the reason for Singularity's "failure" was that IIRC they were still trying to do the more traditional userland/kernel split
[23:08:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:08:53] <sonny> singularity also required you to use their compiler
[23:09:03] <sonny> so goodbye legacy code
[23:09:25] <sonny> not sure if that added to their failure, it was a successful research OS?
[23:09:42] <sonny> iirc it was deployed to run bing or something
[23:09:50] <sonny> some bing feature
[23:11:18] <dpk> sonny: the idea is that with enforced use of a compiler that does bounds checking, the OS doesn't need to stop processes trampling on each others' memory
[23:12:04] <sonny> what about the cache and stuff?
[23:12:05] <dpk> and you enforce bounds checking by making the native executable format of the OS some (low-level) bytecode which the kernel JITs into actual machine code
[23:12:31] <sonny> oh, gnarly :D
[23:12:45] <sham1> One idea I've had for making a modern and viable "Scheme machine" (or a Lisp machine in general) would just be taking something like Linux and then just running the implementation as PID 1 (+ other processes/threads for parallelism) and then having just enough FFI to get the kernel to do things for you like setting your monitor display modes and whatnot. And then just running the entire (or almost
[23:12:47] <sham1> entire) userland as just the high-level language of your choice with some kind of multitasking on top of whatever else you're doing
[23:13:07] <sonny> well, it's easier than that
[23:13:20] <sonny> why not have a scheme-c abi?
[23:13:32] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[23:13:51] <sonny> scheme isn't good for data description, so you will have to extend it
[23:14:04] <sham1> Well implementations do that last part anyway :P
[23:14:18] <sonny> and as for OS data structures a list is sufficient, but I'd rather have array types
[23:14:42] <sonny> or tables (but that sounds complex)
[23:15:07] <sonny> I do want to make a language to make an OS btw
[23:15:54] <sonny> my major block is syntax, orthogonality, and resource sharing
[23:16:44] <sonny> I've considered that two tiers may be required tbh
[23:20:37] *** Quits: jao (~jao@45.134.142.222) (Ping timeout: 240 seconds)
[23:22:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:23:05] *** Joins: jao (~jao@45.134.142.225)
[23:24:36] *** Quits: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[23:28:54] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:39:22] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[23:39:29] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:43:27] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[23:44:48] *** Joins: mnieper (~user@212.30.36.27)
[23:59:14] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[23:59:25] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Client Quit)
