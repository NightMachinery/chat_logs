[00:03:02] *** Quits: cyrus_mc (~cyrus_mc_@45.62.180.58) (Quit: Connection closed)
[00:07:38] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[00:08:14] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:08:32] <Nnavd> cyrus_mc, probably just a case of different ways of calculating memory - for example, this gist..https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773
[00:08:53] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com)
[00:12:15] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[00:16:06] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:16:06] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:16:20] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:16:21] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:18:20] *** Joins: Tasi_ (~Tasi@5403E7DA.catv.pool.telekom.hu)
[00:18:37] *** Quits: Tasi (~Tasi@20014C4C220C8F0075294762935D112C.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[00:20:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:20:45] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:21:19] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:24:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[00:26:11] *** Quits: absc (~absc@dynamic-adsl-94-34-219-179.clienti.tiscali.it) (Quit: Leaving)
[00:30:24] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:30:56] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:38:17] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[00:38:55] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[00:41:42] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:44:02] <pyzozord> when I return *p do I return copy of the value of p?
[00:47:32] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[00:48:37] <albertito> pyzozord: yes
[00:48:45] <fizzie> I'd prefer to say you just dereference a pointer to get the value it points at, and return that value. If `*p` is legal in the first place, the "value of p" would be a pointer.
[00:48:51] <fizzie> But probably yes in the sense you meant.
[00:49:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[00:50:18] <albertito> cyphics: is prometheus the only thing running in that container? you can look at /proc/<pid>/status (where <pid> is the pid of prometheus) and see if that matches more closely to Go's heap information
[00:51:29] <albertito> oh, that was for cyrus_mc and they left, sorry cyphics
[00:54:11] <pyzozord> yes sorry, not "value of pointer", I mean "value pointer points to"
[00:59:35] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:00:22] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 250 seconds)
[01:01:24] *** Quits: ekathva_ (~ekathva@n16izluvk39q3lx3y-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[01:01:42] *** Joins: ekathva_ (~ekathva@n16j0a7g3xklok7dy-1.v6.elisa-mobile.fi)
[01:04:46] <pyzozord> GOPL says that new() makes variables that are no different than local variables
[01:05:09] <pyzozord> so that means new does not allocate on heap and instead allocates on stack?
[01:05:25] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Ping timeout: 240 seconds)
[01:05:25] <b0nn> ruh roh
[01:05:34] <pyzozord> and later when the variable "leaks" out of the scope it will be moved to heap?
[01:05:36] <foobaz> where they are allocated depends on the result of escape analysis, same as with local variables
[01:06:01] <pyzozord> sorry not leaks, escapes
[01:06:09] <b0nn> pyzozord: the determination of where something is allocated depends on a couple of calculations, escape analysis is one, the size of it is another
[01:06:33] <foobaz> variables never move from stack to heap, escape analysis is done at compile time, and if the variable escapes, it's allocated on the heap from the beginning
[01:06:40] <b0nn> If the thing being allocated is considered too big for the stack it gets sent to the heap
[01:06:40] <pyzozord> so even locally declared variables might be allocated on heap?
[01:06:53] <b0nn> yes
[01:07:08] <foobaz> if the compiler is not sure what to do, heap is the default
[01:07:10] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[01:07:31] <pyzozord> so how does go want me to think about memory, what's it's memory model
[01:07:41] *** Joins: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1)
[01:07:41] <pyzozord> does it even have that dichotomy of stack/heap?
[01:07:42] <foobaz> gccgo notably puts a lot more stuff on the heap because it's not as good at figuring out when to use the stack
[01:07:49] <b0nn> RSC has a great blog post on that
[01:08:13] <b0nn> https://research.swtch.com/gomm
[01:08:52] <pyzozord> b0nn: can you give a tl;de?
[01:08:57] <pyzozord> tl;dr
[01:09:03] <b0nn> I'm supposed to be working :P
[01:09:32] *** Joins: hydracat (~hydracat_@pool-96-230-188-202.prvdri.fios.verizon.net)
[01:09:45] <b0nn> This is the /old/ stacks in Go https://dave.cheney.net/2013/06/02/why-is-a-goroutines-stack-infinite
[01:10:05] <b0nn> They changed them, though, to stop splitting IIRC
[01:10:06] *** Joins: bvk` (~user@99-130-253-220.lightspeed.sntcca.sbcglobal.net)
[01:10:07] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Leaving)
[01:10:14] <foobaz> the tl;dr is don't worry about it, you don't need to know where a variable lives
[01:10:59] *** Joins: k8yun_ (~k8yun@user/k8yun)
[01:11:24] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 252 seconds)
[01:11:38] *** Quits: bvk (~user@99-130-253-220.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 250 seconds)
[01:11:50] <b0nn> pyzozord: the Go memory model is intermediate to advanced and I recommend that you have a look at it once you're across more of the basics
[01:12:33] <b0nn> One common pitfall is people think that pointers can only talk about objects on the heap, but that is not true, a pointer can talk about an object in the same stack too
[01:12:48] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[01:14:02] <pyzozord> I know they can
[01:14:33] <b0nn> and now, I return to my misery (codebase had 1.7% test coverage, someone made a massive refactor about 4 months ago, that has broken a pile of stuffs)
[01:14:55] <pyzozord> I went thorugh K&R and even wrote my own memory allocator
[01:14:55] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[01:15:35] <pyzozord> so I'm actually understanding go form that perspective of how it could potentiall have been implemented
[01:17:50] *** Quits: Tasi_ (~Tasi@5403E7DA.catv.pool.telekom.hu) (Quit: Leaving)
[01:19:44] <pyzozord> my questoin about returing copy of a value was more about what happens when I mutate the value that wsa returned
[01:21:41] <albertito> pyzozord: it's a copy, so the mutation only affects the copy
[01:22:58] <albertito> pyzozord: and in general, go wants you to trust its escape analysis and don't worry whether a variable is in the heap or the stack, it's an internal implementation detail
[01:24:05] <albertito> pyzozord: in some specific circumstances, you may want to care about memory allocation for e.g. performance reasons, and then in that case you may look at it more closely. But even then it's usually the allocating and copying parts that ends up being dominant, not the heap-vs-stack part
[01:24:13] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[01:25:23] <ikke> and usually there are other parts where you should look first for performance gains
[01:25:24] <pyzozord> got it, thank you
[01:25:54] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[01:28:49] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com)
[01:34:33] *** Joins: rcernin (~rcernin@101.189.129.123)
[01:37:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:37:22] *** Joins: admin123 (~harrymore@37.120.216.194)
[01:38:20] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[01:38:39] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:38:39] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:38:52] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[01:38:54] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[01:41:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[01:44:37] *** Quits: alm (~alm@user/alm) (Ping timeout: 240 seconds)
[01:44:37] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:44:37] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:44:51] *** Joins: alm (~alm@user/alm)
[01:45:38] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[01:49:34] *** Quits: ekathva_ (~ekathva@n16j0a7g3xklok7dy-1.v6.elisa-mobile.fi) (Quit: Leaving)
[01:52:41] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:59:06] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[01:59:43] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[02:04:31] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:08:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:5952:c394:d6fd:fe62)
[02:08:32] *** Quits: beholders_eye (~weechat@2804:1b3:70c1:9d4a:2e43:cfbd:1e47:3d7e) (Ping timeout: 240 seconds)
[02:10:34] *** Quits: adip_ (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[02:10:34] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[02:25:31] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:31:58] *** Quits: daemonises (uid545329@id-545329.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:33:55] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 256 seconds)
[02:36:35] *** Joins: rcernin (~rcernin@101.189.129.123)
[02:37:21] *** Parts: hydracat (~hydracat_@pool-96-230-188-202.prvdri.fios.verizon.net) (Leaving)
[02:44:27] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:57:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[03:04:17] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:05:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com)
[03:06:34] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:06:54] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:09:41] *** Quits: mattfoxxx (~mattfoxxx@200116b822fc9a00c05b4fdabbc92166.dip.versatel-1u1.de) (Quit: WeeChat 3.4)
[03:11:01] *** Quits: hub (~hub@user/hub) (Quit: -)
[03:11:29] *** Joins: hub (~hub@user/hub)
[03:11:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:11:53] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:15:39] *** Joins: crashrep (~crashrep@user/crashrep)
[03:19:50] <b0nn> hrm, FTR, I carry round an ELF oriented understanding of the way Go lays things out in memory (Heap/Stack/DCC) - I *presume* something similar is done with Windows PE
[03:22:57] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[03:25:37] *** Quits: admin123 (~harrymore@37.120.216.194) (Ping timeout: 240 seconds)
[03:27:26] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[03:28:21] *** Quits: moto_ (~moto@user/moto) (Ping timeout: 252 seconds)
[03:28:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:5952:c394:d6fd:fe62) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:32:11] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[03:32:45] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:34:47] *** Joins: moto (~moto@user/moto)
[03:37:38] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:37:40] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:37:41] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[03:38:20] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[03:42:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:53dd:b5a5:6b8e:e94d) (Ping timeout: 240 seconds)
[03:42:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:43:11] *** Joins: zwr (~zwr@2804:d45:b966:fb00:628f:1ad6:16aa:dc6f)
[03:50:49] *** Joins: notepad72 (~notepad@129.159.46.243)
[03:50:58] *** Quits: notepad7 (~notepad@129.159.46.243) (Ping timeout: 272 seconds)
[03:50:59] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[03:50:59] *** notepad72 is now known as notepad7
[03:52:17] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:52:17] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:52:33] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:52:33] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:52:36] *** Joins: victori (~victori@cpe-76-89-139-69.socal.res.rr.com)
[03:54:34] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[03:55:17] *** Quits: moto (~moto@user/moto) (Ping timeout: 252 seconds)
[03:56:37] *** Quits: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:57:47] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:58:21] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:58:47] *** Quits: notepad7 (~notepad@129.159.46.243) (Quit: The Lounge - https://thelounge.chat)
[03:58:53] *** Quits: endigma (~endigma@drmons0552w-134-41-91-32.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: The Lounge - https://thelounge.chat)
[03:58:55] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:59:32] *** Joins: notepad72 (~notepad@129.159.46.243)
[03:59:39] *** Joins: endigma (~endigma@drmons0552w-134-41-91-32.dhcp-dynamic.fibreop.ns.bellaliant.net)
[04:01:44] *** Joins: moto (~moto@user/moto)
[04:06:14] *** Joins: Tharro_ (~Tharro@2001:bc8:1824:1623::1)
[04:07:02] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Ping timeout: 240 seconds)
[04:08:17] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[04:08:59] *** Joins: Torr (~Torr@user/torr)
[04:09:02] *** Quits: Tharro (~Tharro@2001:bc8:1824:1623::1) (Ping timeout: 240 seconds)
[04:12:37] *** Quits: moto (~moto@user/moto) (Ping timeout: 240 seconds)
[04:13:28] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[04:13:38] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[04:15:52] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[04:16:07] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[04:17:48] *** Joins: moto (~moto@user/moto)
[04:20:01] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:21:37] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:28:49] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[04:29:42] *** Joins: rcernin (~rcernin@101.189.129.123)
[04:30:46] *** Joins: Everything (~Everythin@37.115.210.35)
[04:38:15] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:38:15] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:38:30] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[04:38:30] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[04:43:04] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:44:49] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:44:49] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:14] *** Joins: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:39] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[04:49:51] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:53:19] *** Quits: moto (~moto@user/moto) (Ping timeout: 256 seconds)
[04:53:28] *** Joins: Seirdy0 (~Seirdy@sourcehut/user/seirdy)
[04:55:33] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com)
[04:55:57] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[05:00:48] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[05:01:42] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:01:47] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[05:02:09] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Client Quit)
[05:02:09] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Client Quit)
[05:02:22] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:02:33] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[05:03:54] *** Quits: moog (~moog@98.97.86.136) (Ping timeout: 250 seconds)
[05:04:03] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[05:04:54] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:7958:b98f:661d:a8ad) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:05:01] *** Joins: moto (~moto@user/moto)
[05:05:13] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:07:42] <nz> I have a method GetThings() which queries a paginated API of Things and returns then one-by-one through a chan{Thing}. Should I hide a goroutine inside GetThings, or should I let the caller make the choice about whether they want a goroutine here?
[05:08:37] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:08:37] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:09:01] <Torr> nz: Let the caller choose.
[05:09:12] <bpalmer> func GetThings() chan Thing  { ... } ? or func GetThings(ch chan Thing) { ... } ?
[05:09:23] <nz> the latter
[05:09:41] <bpalmer> then I'd probably let the caller choose.
[05:09:51] <nz> thanks 👍
[05:10:10] <bpalmer> If it were the former, you'd basically be stuck creating a goroutine to feed into the channel.
[05:10:45] *** Quits: con3 (~con3@143.198.53.32) (Quit: ZNC 1.8.2 - https://znc.in)
[05:11:01] *** Joins: con3_ (~con3@2604:a880:4:1d0::be:d000)
[05:11:47] *** Quits: jemaclus (~jemaclus@64.227.108.73) (Ping timeout: 268 seconds)
[05:12:01] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Ping timeout (120 seconds))
[05:12:33] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[05:12:39] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:12:57] *** Quits: explodes (~explodes@user/explodes) (Remote host closed the connection)
[05:13:01] <nz> How do you mean?
[05:13:19] *** Joins: explodes (~explodes@user/explodes)
[05:13:23] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:13:28] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[05:13:52] <bpalmer> how would that channel get populated?
[05:13:56] *** Quits: jay_wild (~very@138.68.15.221) (Ping timeout: 252 seconds)
[05:14:15] <bpalmer> it doesn't really matter, though; you're going with the more flexible approach.
[05:14:22] <nz> Gotcha - the former would mean any async virtues of GetThings() would be gone?
[05:14:31] *** Quits: wmo (~quassel@2604:a880:2:d0::1df0:b001) (Ping timeout: 245 seconds)
[05:14:47] <nz> and you'd sit there waiting for it churning until it had a full channel of Things and returns?
[05:14:52] *** Joins: wmo (~quassel@2604:a880:2:d0::1df0:b001)
[05:15:10] <bpalmer> yes, or else it'd always be empty.
[05:15:12] *** Quits: willow (~willow@user/willow) (Ping timeout: 272 seconds)
[05:15:26] <nz> Makes sense
[05:16:05] <nz> Yeah I'm still quite new to Go, so I'm feeling out some of the more idiomatic type of things
[05:16:23] *** Joins: willow (~willow@bay.systems)
[05:16:23] *** Quits: willow (~willow@bay.systems) (Changing host)
[05:16:23] *** Joins: willow (~willow@user/willow)
[05:16:31] <nz> Thanks for your tips
[05:16:34] <bpalmer> A third approach, perhaps even more flexible, is `func MapThings(f func (t Thing))` ; if the caller wants, they can do 'ch := make(chan Thing); go MapThings(func(t Thing) { ch <- t; }) return ch`
[05:16:53] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Client Quit)
[05:16:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Client Quit)
[05:17:07] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:17:08] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[05:17:29] <nz> Oo nice
[05:17:30] <bpalmer> that way everything MapThings does is synchronous, but it's easy for the caller to tune the synchronicity (e.g., by changing the buffering of the channel if thye're using a channel)
[05:18:07] *** Quits: dab21 (dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:18:08] <bpalmer> but if they don't want any asynchroncity at all, they just MapThings(func(t Thing) { fmt.Println("Got a thing ", t) })
[05:18:33] <nz> Good point. I think I'll opt for this approach, since it's a bit more natural than channels
[05:19:08] <nz> it's unlikely a caller will want to carry much state between handling my specific Things so a callback like that is natural
[05:19:16] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[05:19:22] <nz> not that it's impossible or anything, just higher cognitive load
[05:20:07] *** Joins: jemaclus (~jemaclus@64.227.108.73)
[05:20:25] *** Joins: jay_wild (~very@138.68.15.221)
[05:23:21] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:23:21] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:31:01] *** Joins: andlabs (~andlabs@2605:ef80:8096:21d4:52:e8a1:79e2:3c82)
[05:33:45] *** Quits: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:40:12] *** Quits: andlabs (~andlabs@2605:ef80:8096:21d4:52:e8a1:79e2:3c82) (Ping timeout: 240 seconds)
[05:41:32] *** Joins: andlabs (~andlabs@2605:ef80:8092:2244:f439:6b51:c341:d6dd)
[05:43:06] *** Quits: remote (~self@user/hackers) (Remote host closed the connection)
[05:43:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[05:49:51] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:52:33] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[06:04:20] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[06:04:40] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:04:40] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[06:09:15] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:09:15] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:11:09] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 252 seconds)
[06:11:20] *** Joins: O0c (~b@216.249.151.75)
[06:11:39] *** Quits: O0c (~b@216.249.151.75) (Client Quit)
[06:12:15] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[06:24:37] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[06:27:43] *** Joins: rcernin (~rcernin@101.189.129.123)
[06:31:22] *** Joins: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de)
[06:47:53] *** Quits: andlabs (~andlabs@2605:ef80:8092:2244:f439:6b51:c341:d6dd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:51:11] *** bvk` is now known as bvk
[06:51:53] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:56:11] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 245 seconds)
[07:03:39] *** Quits: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:08:51] *** Joins: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[07:09:10] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[07:10:24] *** Joins: k8yun (~k8yun@user/k8yun)
[07:16:48] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:22:40] *** Joins: irontom (~user@37.19.221.165)
[07:26:47] *** Joins: lalitmee (~lalitmee@180.94.33.5)
[07:31:27] *** Quits: irontom (~user@37.19.221.165) (Ping timeout: 252 seconds)
[07:33:17] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (Ping timeout: 240 seconds)
[07:33:35] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (Ping timeout: 250 seconds)
[07:34:32] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[07:34:35] *** Joins: rudi_s (~simon@user/rudi-s/x-7673890)
[07:37:10] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:38:20] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8902-68c6-ecc8-5f4e.inf6.spectrum.com)
[07:39:41] *** Quits: freakazoid333 (~matt@2603-9000-cf03-86c3-7da2-d52d-7c03-c4c8.inf6.spectrum.com) (Ping timeout: 256 seconds)
[07:42:58] *** Quits: lalitmee (~lalitmee@180.94.33.5) (Remote host closed the connection)
[07:45:35] *** Quits: stuart (~stuart@55d4f330.access.ecotel.net) (Ping timeout: 256 seconds)
[07:46:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[07:47:22] *** Joins: stuart (~stuart@55d4b0ba.access.ecotel.net)
[07:51:13] *** Joins: lalitmee (~lalitmee@180.94.33.5)
[07:52:43] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[08:00:59] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[08:01:10] *** Quits: gpeskens (~gpeskens@2001:985:7aa4:1:d400:b211:f977:a07e) (Remote host closed the connection)
[08:01:29] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:962:e32a:700c:a478)
[08:01:56] *** Quits: sus (zero@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[08:02:01] *** Quits: noonien (~noonien@user/noonien) (Quit: Ping timeout (120 seconds))
[08:02:07] *** Joins: sus (zero@user/zeromomentum)
[08:02:39] *** Joins: noonien (~noonien@user/noonien)
[08:03:55] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[08:05:31] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[08:07:48] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[08:09:57] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:19:26] *** Joins: ekathva (~ekathva@n16j1oo707h05v16j-1.v6.elisa-mobile.fi)
[08:22:10] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:33:13] *** Quits: Giovanni (~Giovanni@176.55.166.222) (Remote host closed the connection)
[08:34:04] *** Quits: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:35:21] *** Joins: RaySl (~raysl@sdf1.xen.prgmr.com)
[08:35:44] *** Joins: han-solo (~hanish@user/han-solo)
[08:36:01] *** Quits: RayS (~raysl@sdf1.xen.prgmr.com) (Ping timeout: 256 seconds)
[08:40:40] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:45:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[08:45:44] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[08:45:57] *** Joins: rvalue (~rvalue@user/rvalue)
[09:22:00] *** Joins: shka (~herr@109.231.3.55)
[09:23:14] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:26:16] *** Joins: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk)
[09:29:24] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:33:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[09:35:14] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[09:42:59] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[09:51:37] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 240 seconds)
[09:52:01] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[09:59:58] *** Joins: han-solo (~hanish@user/han-solo)
[10:02:17] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:04:20] *** Quits: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:05:47] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[10:07:15] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[10:11:13] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:15:11] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[10:18:08] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Quit: rairden)
[10:24:19] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:28:54] *** Joins: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de)
[10:34:03] *** Quits: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:37:36] *** Quits: scjosh (~scjosh@206.189.79.69) (Quit: The Lounge - https://thelounge.chat)
[10:38:11] *** Joins: scjosh (~scjosh@206.189.79.69)
[10:42:42] *** Joins: ekathva_ (~ekathva@86.114.187.171)
[10:44:49] *** Quits: ekathva_ (~ekathva@86.114.187.171) (Read error: Connection reset by peer)
[10:45:22] *** Quits: ekathva (~ekathva@n16j1oo707h05v16j-1.v6.elisa-mobile.fi) (Ping timeout: 250 seconds)
[10:46:07] *** Joins: ekathva_ (~ekathva@n16iyde4bmj9ireof-1.v6.elisa-mobile.fi)
[10:47:25] *** Joins: lalitmee_ (~lalitmee@180.94.32.193)
[10:50:05] *** Quits: lalitmee (~lalitmee@180.94.33.5) (Ping timeout: 256 seconds)
[10:50:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:57:13] *** Joins: ekathva__ (~ekathva@mobile-access-5672d1-126.dhcp.inet.fi)
[10:59:40] *** Quits: ekathva_ (~ekathva@n16iyde4bmj9ireof-1.v6.elisa-mobile.fi) (Ping timeout: 250 seconds)
[11:08:31] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[11:09:01] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[11:09:42] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[11:22:36] *** Quits: ekathva__ (~ekathva@mobile-access-5672d1-126.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:23:11] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[11:24:05] *** Joins: ekathva__ (~ekathva@n16j14urzyjc7uwzq-1.v6.elisa-mobile.fi)
[11:25:45] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 252 seconds)
[11:28:50] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:32:38] *** Joins: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de)
[11:35:15] *** Joins: jjido (~Denis@94.4.149.217)
[11:39:30] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:45:53] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:48:08] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[11:50:25] *** Joins: lalitmee__ (~lalitmee@180.94.32.228)
[11:50:29] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[11:52:58] *** Quits: lalitmee_ (~lalitmee@180.94.32.193) (Ping timeout: 250 seconds)
[12:01:58] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[12:01:59] *** Joins: adip_ (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[12:04:36] *** Quits: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:05:07] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:07:02] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[12:11:35] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[12:11:55] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:15:39] *** Joins: arinov (~arinov@213.194.126.155)
[12:17:06] *** Joins: bindu (~bindu@user/bindu)
[12:18:52] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Quit: Lost terminal)
[12:19:10] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:20:54] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:21:45] *** Quits: adip_ (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Quit: Lost terminal)
[12:23:44] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[12:32:54] *** Joins: lalitmee_ (~lalitmee@180.94.32.86)
[12:33:11] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[12:34:01] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:35:38] *** Quits: lalitmee__ (~lalitmee@180.94.32.228) (Ping timeout: 260 seconds)
[12:36:18] *** Quits: Kyros (~kyros@user/kyros) (Quit: ZNC 1.8.2 - https://znc.in)
[12:36:37] *** Joins: Kyros (~kyros@user/kyros)
[12:37:48] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:39:50] <synthmeat> is there anything particularly horrible with doing a monorepo with multiple services/packages in their dirs, with only single go.mod at root of the repo?
[12:40:33] <synthmeat> there's no plans on publishing publicly anything (unfortunately)
[12:40:51] <synthmeat> and there's no CI/CD systems or plans for them
[12:41:29] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[12:42:22] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[12:46:12] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[12:47:51] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 245 seconds)
[12:48:33] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[12:49:12] *** Joins: kodah (~kodah@user/kodah)
[12:55:19] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:58:42] *** Joins: rendar (~rendar@user/rendar)
[12:59:07] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[13:00:31] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[13:07:41] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 250 seconds)
[13:10:47] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[13:13:42] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:23:27] *** Joins: jla (~jordi@137.215.35.37.dynamic.jazztel.es)
[13:25:16] <b0nn> synthmeat: there is a lot of disagreement on which is best, a single monorepo, or multiple single project focussed  repos
[13:25:42] <b0nn> that means you get to choose which you prefer, and hate yourself for making the wrong choice no matter which way you go :-)
[13:26:36] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[13:26:57] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:27:17] *** Quits: tykling (~tykling@irc.tyknet.dk) (Ping timeout: 256 seconds)
[13:30:44] *** Joins: tykling (~tykling@irc.tyknet.dk)
[13:32:17] *** Quits: phylaz (~phylaz@82.51-174-55.customer.lyse.net) (Ping timeout: 240 seconds)
[13:33:37] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:53:50] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:54:26] *** Quits: lalitmee_ (~lalitmee@180.94.32.86) (Quit: Leaving)
[13:58:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[14:02:31] *** Joins: cation21 (cation@user/cation)
[14:02:59] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[14:02:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[14:04:09] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[14:05:55] *** cation21 is now known as cation
[14:09:05] <A_Dragon> from my perspective: single repos are nicer simply because they let me archive projects or otherwise not touch them for six months and not have a giant diff for doing so
[14:09:15] <A_Dragon> (as in, repo per project)
[14:09:27] <A_Dragon> also can make tools behave better
[14:25:45] <han-solo> the only good thing i heard about having a monorepo is deployment is easy or something
[14:25:59] <han-solo> i prefer repo per project as well
[14:26:48] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:27:16] *** Quits: gpeskens (~gpeskens@2001:985:7aa4:1:962:e32a:700c:a478) (Remote host closed the connection)
[14:30:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[14:32:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[14:33:16] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[14:34:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1)
[14:37:06] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[14:38:30] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[14:38:42] *** Quits: han-solo (~hanish@user/han-solo) (Killed (NickServ (GHOST command used by hanish!~hanish@178.248.114.121)))
[14:39:20] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[14:39:54] *** Joins: han-solo (~hanish@user/han-solo)
[14:40:11] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[14:41:44] *** Joins: xse_ (~xse@user/xse)
[14:42:39] *** Quits: xse (~xse@user/xse) (Ping timeout: 252 seconds)
[14:42:39] *** xse_ is now known as xse
[14:57:15] <synthmeat> oh, i've been in monorepo style (in broad sense) for all my things for over a decade now and i love it. i never had to work with more than single-digit collaborators on it though. just wondered is there smth specific to go (build/test/whatnot) that'd really not like a single top-level go.mod
[14:57:59] <A_Dragon> its gonna maybe slow down some stuff, be wary
[14:58:21] <A_Dragon> eg gopls and co will likely end up sitting on ALL of the data in the monorepo if there arent go.mods under it as well
[14:58:25] <A_Dragon> YKMD so give it a try
[14:58:46] *** Joins: X-Scale` (~ARM@83.223.232.29)
[14:59:27] <synthmeat> ykmd? :)
[15:00:09] *** Joins: xb0o2_ (~xb0o2@user/xb0o2)
[15:00:10] <synthmeat> your kilometrage may differ? :D
[15:00:13] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[15:00:13] *** X-Scale` is now known as X-Scale
[15:01:12] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[15:01:12] *** xb0o2_ is now known as xb0o2
[15:01:19] <A_Dragon> yes :P
[15:02:24] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[15:03:54] <bookworm> the workfiles or whatever they are called should make monorepos objectively worse than those
[15:04:13] <bookworm> and solve at least a good junk of the painpoints for cross repo work
[15:05:53] <ikke> workspaces?
[15:05:56] <ikke> https://go.dev/doc/tutorial/workspaces#create-the-workspace
[15:06:47] <A_Dragon> yeah
[15:06:52] <A_Dragon> Im happy with workspaces so far
[15:06:57] <A_Dragon> Ive been running rc1 to use em
[15:08:35] <ikke> What are you using it for?
[15:10:18] <A_Dragon> tandom working on my IRC lib and some IRC bots
[15:10:24] <A_Dragon> the most recent of which would be murdochite
[15:11:16] *** Joins: llorllale (~llorllale@198.98.119.85)
[15:11:25] <ikke> And how do workspaces help with that?
[15:11:46] <A_Dragon> actually checking I didnt do this with murdochite; https://github.com/A-UNDERSCORE-D/murdochite
[15:11:47] <A_Dragon> whoops
[15:11:54] <A_Dragon> https://github.com/A-UNDERSCORE-D/murdochite/blob/main/go.mod thats the link I wanted
[15:12:03] <A_Dragon> and it helps by letting me NOT do the replace in that file
[15:12:20] <A_Dragon> it ensures gopls updates hot with my changes in the library without waiting on the sumdb etc
[15:12:28] <ikke> Right, the replace I can understand
[15:13:27] <ikke> Or would you use 'use' instead and be able to just refer to those modules directly locally?
[15:13:36] <A_Dragon> for stuff like (unreleased) ixiolite and (unreleased) scordite, the work file just has, yeah
[15:14:30] <A_Dragon> `go 1.18; use ( . ; ../irc ; )`
[15:14:34] <A_Dragon> with semicolons in place of newlines
[15:15:34] <ikke> Ok, so you no longer need replace statements for those
[15:16:40] <A_Dragon> yeah
[15:17:00] <A_Dragon> it makes replace statements not needed for just dev work, compiles etc all appear to work hapily
[15:17:12] <ikke> Yeah, that's neat
[15:29:12] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[15:50:32] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:55:15] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[15:58:54] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[15:59:15] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[16:03:41] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:03:41] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:07:42] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:08:08] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:12:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[16:18:32] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[16:21:46] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[16:24:41] *** Joins: absc (~absc@81.31.144.28)
[16:25:47] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:28:34] *** Quits: jla (~jordi@137.215.35.37.dynamic.jazztel.es) (Ping timeout: 250 seconds)
[16:28:59] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:29:03] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:29:03] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:29:15] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[16:29:18] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[16:30:27] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[16:34:43] *** Joins: ekathva_ (~ekathva@193.210.171.118)
[16:36:59] *** Quits: ekathva__ (~ekathva@n16j14urzyjc7uwzq-1.v6.elisa-mobile.fi) (Ping timeout: 250 seconds)
[16:37:02] *** Joins: blacked (~blacked@user/blacked)
[16:39:51] *** Quits: ekathva_ (~ekathva@193.210.171.118) (Read error: Connection reset by peer)
[16:41:06] *** Joins: ekathva_ (~ekathva@n16j1b0fzs8z4jskb-1.v6.elisa-mobile.fi)
[16:43:25] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[16:44:19] *** Joins: teasea (~teasea@user/teasea)
[16:44:46] *** Joins: jla (~jordi@137.215.35.37.dynamic.jazztel.es)
[16:52:49] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[16:54:37] *** Joins: teasea (~teasea@user/teasea)
[16:55:24] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[16:55:42] *** Joins: k8yun (~k8yun@user/k8yun)
[16:57:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[17:00:11] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:02:34] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[17:05:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[17:05:17] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 240 seconds)
[17:05:37] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 240 seconds)
[17:05:38] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[17:06:02] *** Quits: Midjak (~Midjak@82.66.147.146) (Remote host closed the connection)
[17:07:50] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:09:35] *** Joins: beholders_eye (~weechat@2804:1b3:70c1:9d4a:2e43:cfbd:1e47:3d7e)
[17:13:17] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[17:17:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:19:48] *** Joins: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net)
[17:21:57] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[17:26:38] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:36:54] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:36:54] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:37:06] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[17:37:10] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:40:58] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[17:42:43] *** Joins: ekathva__ (~ekathva@mobile-access-5672f9-202.dhcp.inet.fi)
[17:43:58] *** Quits: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:43:59] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:43:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:44:54] *** Joins: shka (~herr@109.231.3.55)
[17:45:16] *** Quits: ekathva_ (~ekathva@n16j1b0fzs8z4jskb-1.v6.elisa-mobile.fi) (Ping timeout: 250 seconds)
[17:46:20] *** Joins: hifi (hifi@heisenbridge/hifi)
[17:47:09] *** Quits: jla (~jordi@137.215.35.37.dynamic.jazztel.es) (Ping timeout: 256 seconds)
[17:49:26] *** Joins: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de)
[17:55:32] *** Joins: k8yun (~k8yun@user/k8yun)
[17:55:53] *** Quits: normen_ (~normen@pd9eecc5a.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:58:53] *** Joins: phylaz (~phylaz@82.51-174-55.customer.lyse.net)
[18:01:33] *** Quits: ekathva__ (~ekathva@mobile-access-5672f9-202.dhcp.inet.fi) (Ping timeout: 256 seconds)
[18:01:42] *** Joins: jla (~jordi@137.215.35.37.dynamic.jazztel.es)
[18:09:46] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 272 seconds)
[18:09:47] *** Joins: normen_ (~normen@p200300d71749cc0024e0b1b32ab6ad63.dip0.t-ipconnect.de)
[18:12:10] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:15:23] *** Quits: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[18:15:30] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Ping timeout: 252 seconds)
[18:16:09] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com)
[18:16:53] <blacked> emacs emacs emacs emacs
[18:17:07] <blacked> emacs + golang == <3
[18:17:21] <blacked> what if i told you emacs is being rewrittein in golang
[18:17:32] <blacked> aumm guys
[18:17:51] <blacked> what you think about `emacs lisp ` if you are confident with both golang and elisp
[18:23:29] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[18:24:42] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[18:28:11] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:29:19] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:30:22] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[18:35:46] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[18:37:37] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[18:43:08] *** Quits: matoro (~matoro@2600:1700:4b10:9d80::2) (Changing host)
[18:43:08] *** Joins: matoro (~matoro@user/matoro)
[18:45:09] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[18:45:25] *** Joins: arkurious (~arkurious@user/arkurious)
[18:45:33] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[18:46:57] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[18:53:14] *** Joins: andlabs (~andlabs@2605:ef80:8085:21d8:898f:fffd:5ba0:70f3)
[18:53:16] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Quit: Leaving)
[18:55:03] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Quit: Leaving)
[18:55:45] *** Joins: Sam (b8f15a4bbd@golang/sam)
[18:55:45] *** ChanServ sets mode: +o Sam
[19:02:40] *** Joins: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw)
[19:05:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1)
[19:07:03] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[19:08:58] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:08:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:09:13] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[19:09:15] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[19:10:00] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[19:11:54] *** Joins: teasea (~teasea@user/teasea)
[19:13:29] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[19:17:14] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:18:01] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[19:25:54] *** Quits: jack_rabbit (~knusbaum@23.249.37.254) (Quit: ZNC 1.8.2 - https://znc.in)
[19:26:05] *** Joins: xsteadfastx (~marv@94.31.99.245)
[19:27:02] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Read error: Connection reset by peer)
[19:28:52] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[19:29:16] *** Quits: jla (~jordi@137.215.35.37.dynamic.jazztel.es) (Ping timeout: 250 seconds)
[19:31:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:31:11] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:31:24] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[19:31:26] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[19:32:33] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[19:34:11] *** Joins: treeford (~charleste@user/treeford)
[19:36:17] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[19:39:01] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:39:01] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:41:09] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Read error: Connection reset by peer)
[19:41:46] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Quit: Konversation terminated!)
[19:42:16] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[19:43:35] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[19:44:24] <lungaro> emacs is not being rewritten in go, that'd never fly
[19:46:57] *** Joins: StyXman (~mdione@2a01:e0a:931:5060:20d:b9ff:fe52:1a0)
[19:47:44] <StyXman> I need something like https://cs.opensource.google/go/go/+/refs/tags/go1.17.8:src/crypto/x509/verify.go;l=940 but public. in fact, I need something that tells me whether a given FQDN is more 'specific' than another, including support for wildcards. any ideas?
[19:50:06] <lungaro> why not just lift those functions out?
[20:00:21] *** Joins: Midjak (~Midjak@82.66.147.146)
[20:00:57] *** Joins: treeford (~charleste@user/treeford)
[20:05:15] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:08:12] *** Quits: andlabs (~andlabs@2605:ef80:8085:21d8:898f:fffd:5ba0:70f3) (Ping timeout: 240 seconds)
[20:09:27] *** Quits: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw) (Quit: Ping timeout (120 seconds))
[20:09:48] *** Joins: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw)
[20:15:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[20:18:23] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[20:18:29] <aLeSD> hi all
[20:18:46] <aLeSD> how could I test for a fatal in my unit tests ?
[20:19:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:20:17] <StyXman> lungaro: like, copy and paste?
[20:20:33] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:20:33] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[20:22:12] <ikke> aLeSD: a fatal what?
[20:22:23] <aLeSD> fatal exit
[20:22:30] <ikke> so a panic?
[20:23:09] <ikke> Or do you mean log.Fatal?
[20:23:24] <lungaro> !faq panic-recover
[20:23:57] <pyzozord> is there a difference in what and how is created between := and new?
[20:24:56] <StyXman> besides the implicit type?
[20:25:05] <ikke> aLeSD: https://stackoverflow.com/questions/26225513/how-to-test-os-exit-scenarios-in-go
[20:25:16] <pyzozord> StyXman: yep
[20:25:21] <StyXman> a := 3 is the same as int a = 3
[20:26:00] <StyXman> lungaro: I would definitely like to use the function in the stdlib so I don't have to maintina it myself :)
[20:27:31] <pyzozord> is it the same as a = new(int); a = 3
[20:27:45] <pyzozord> sorry *a = 3
[20:28:00] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:28:16] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 245 seconds)
[20:28:22] <StyXman> I don't it's a new
[20:28:43] <StyXman> so it's really int *a = new(int) ?
[20:29:10] <pyzozord> what?
[20:29:29] <pyzozord> no sorry I meand a := new(int); *a = 3
[20:29:30] <StyXman> I guess one is stored in the stack and the other in the heap, unless that's not terms in which one speaks in glonag
[20:29:38] <aLeSD> ikke, thnaks
[20:29:51] <ikke> StyXman: I don't think you can say in advance what is stored where
[20:29:56] <StyXman> pyzozord: that's definitely not a := 3
[20:30:24] <StyXman> ikke: I have no idea, really, I'm not deep in golang's mem mgmt
[20:30:37] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:31:45] <pyzozord> it looks to me that a:=new(int); *a=3 is exactly the same as a := 3
[20:31:54] *** Quits: supakeen (~supakeen@python/site-packages/supakeen) (Quit: Bridge terminating on SIGTERM)
[20:32:09] <pyzozord> only that a has different type either *int or int
[20:32:12] <ikke> StyXman: go determines at compile time determines through escape analysis and some other criteria where it is allocated
[20:32:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[20:32:37] <ikke> pyzozord: so it's not _exactly_ the same
[20:32:54] <pyzozord> looks like compiler just decides where to allocate what by itself, and I can't control it from the syntax?
[20:33:02] <ikke> pyzozord: correct
[20:33:31] <StyXman> ikke: ack
[20:33:42] <ikke> go is not a close-to-the-metal language where you can control those kinds of things
[20:34:07] *** Joins: supakeen (~supakeen@python/site-packages/supakeen)
[20:34:10] <pyzozord> hmm so new() is a way to make a pointer that points to it's own memory
[20:34:32] <pyzozord> is there a way to make pointer that does not also allocate memory for the value?
[20:35:02] <lungaro> Yeah, just var pt *Thing
[20:35:03] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:35:03] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:35:07] <pyzozord> oh right
[20:35:15] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:35:18] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[20:35:34] <pyzozord> so is var a *int = 3 correct syntax?
[20:35:50] <lungaro> no
[20:35:55] <pyzozord> I don't think I can var a *int = &3
[20:36:01] <Sam> Try it and find out :) https://go.dev/play/p/tdNg1OQmrpz
[20:36:28] <Sam> But yes, you can't take the address of a constant
[20:36:31] <pyzozord> so what's the correct way then?
[20:36:56] <ikke> var a int = 3; var b *int = &a
[20:37:16] <Sam> What exactly are you trying to do? It doesn't seem very useful to declare a pointer to a number for the most part.
[20:37:26] <StyXman> but if you then do a = 4, *b's value changes too
[20:37:27] <ikke> Sam: he's exploring the language
[20:37:41] <ikke> or they I must say
[20:37:44] <StyXman> (I sais *b's and not b's)
[20:37:53] <StyXman> said*
[20:37:59] <pyzozord> yes I'm exploring the language, thanks ikke
[20:38:01] <pyzozord> it's he
[20:38:29] <Sam> Gotcha
[20:38:58] *** Joins: Tasi (~Tasi@20014C4C220C8F00DC37BF51A96B88E8.catv.pool.telekom.hu)
[20:39:25] <lungaro> pointers largely are tough to handle because of all the nil checking required, i'd try to avoid them if possible. That being said, I use them quite often for optional things
[20:40:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com)
[20:40:47] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:40:53] <pyzozord> yes in principle I agree with that sentiment
[20:41:16] <pyzozord> but it's there so must be able to grok it
[20:41:21] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:42:53] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:46:08] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[20:46:53] *** Joins: treeford (~charleste@user/treeford)
[20:47:19] *** Quits: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1) (Quit: WeeChat 2.8)
[20:47:35] <fizzie> Other possibilities: `var a *int = new(int); *a = 3`, or (on the silly side) `var a *int = &(&[1]int{3})[0]`.
[20:48:09] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Remote host closed the connection)
[20:49:06] *** Joins: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1)
[20:51:05] <lungaro> var a *int = &(&[1]int{3})[0] is how I do it
[20:51:13] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Remote host closed the connection)
[20:51:22] *** Quits: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1) (Client Quit)
[20:51:38] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[20:51:40] *** Joins: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1)
[20:52:30] <Sam> Genuinely curious when this would ever need to be done; wouldn't you almost always want to just do a := 3 and then take the address of a and use that wherever you needed a pointer?
[20:52:36] <Sam> Why would a need to have a pointer type?
[20:53:47] *** Quits: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1) (Client Quit)
[20:54:08] *** Joins: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1)
[20:54:38] <siXy> Sam: Obfustacated code contests.
[20:55:09] <fizzie> One borderline plausible use case for when you'd want a simple expression for an initialized pointer is when you have a struct that for whatever reason has an `*int` field (maybe someone used one for an "optional int"), and you want to use a composite literal to initialize one.
[20:55:13] <Sam> Good point, I should always start doing this just in case I want to enter one of those!
[20:55:34] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[20:55:35] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:55:45] <fizzie> Protobuf types for example have a lot of *int32, *int64 and *string fields; enough for the proto package to introduce `func Int32(v int32) *int32` and other such methods to make that less painful.
[20:56:01] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[20:57:59] <Sam> Yah, fair enough, I guess if you're stuck with something ugly like that in a third party package there's not much you can do other than store an int. Although in that case I'd still just do a := 3 Foo{Whatever: &a}, anything else is probably just going to be difficult to read.
[20:58:17] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Ping timeout: 250 seconds)
[20:58:42] <fizzie> The thing is, protos get hulking big, and the separate declaration ends up far away from where it "logically" goes, maybe two levels deep in a nested initializer.
[20:58:58] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[20:59:15] <Sam> One of the many reasons I avoid protobufs
[20:59:39] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[20:59:46] <Sam> (not that that's always possible, of course, I've been at plenty of jobs that used them, though I always thought they provided a lot less value than the hassle we had to go through)
[20:59:52] <pyzozord> I'm not following, why does protobuf have *ints?
[21:00:02] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:00:06] <fizzie> Well, protobuf version 2, to be specific.
[21:00:16] *** Joins: jla (~jordi@90.74.80.23)
[21:00:30] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[21:00:59] <fizzie> It has them because it needs to distinguish between "an int32 field that's not set in the message" from "an int32 field that's set to 0", and using pointers (as opposed to, say, a separate bool field) is how it got done.
[21:01:55] <fizzie> (In proto3, primitive fields like strings and ints are no longer separately tracked like that, so the fields became non-pointers as well.)
[21:03:46] <pyzozord> ooh, I see so the revenge of "zero values"
[21:04:36] <pyzozord> how are things done in proto3 then?
[21:05:20] <fizzie> The proto3 equivalent (for the rare case where you *do* need to distinguish between unset and set-to-default) is a set of "well-known types" wrapper messages, like google.protobuf.Int64 (which has a single int64 field called `value`).
[21:05:22] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:05:22] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:05:28] <lilgopher> hmm, I noticed that a lot of problems at work happen because of simple syntax errors in sql queries. We currently write raw queries with sql := `insert into table (value1,value2,) values (1, 2) returning *` and run them with (sqlx.DB).Select(sql, &items). Notice the invalid comma before the parenthesis in the query
[21:05:35] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[21:05:38] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:05:53] <lilgopher> Is there a way to find this errors before deployment without using gorm?
[21:06:27] <pyzozord> fizzie: I don't see how a struct with one int field is different than normal int
[21:06:28] <fizzie> Which in the Go generated code form turns into a pointer to a struct, but of course that's easy enough in Go: you just write `&xpb.MyProto{..., OptionalThing: &tpb.Int64Value{Value: 123}}`.
[21:06:37] <fizzie> Submessages are still pointers even in proto3.
[21:07:23] <lilgopher> sorry I also meant to say (sqlx.DB).Get(&item, sql) instead of (sqlx.DB).Select...
[21:07:44] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Ping timeout: 272 seconds)
[21:07:59] *** Quits: jla (~jordi@90.74.80.23) (Ping timeout: 256 seconds)
[21:09:04] <pyzozord> fizzie: pointer to a struct with field that is a pointer to an int, sounds more complex than just pointer to an int
[21:09:10] <pyzozord> not sure what's the point there
[21:09:19] <pyzozord> (pun not intended)
[21:09:25] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[21:12:00] <fizzie> Of course it's more complex, but it's the rare case. It means not *every* `int64` typed field needs to be a pointer, just on the off chance someone might want to make a difference between "unset" and "set to default".
[21:12:32] <fizzie> It's a pointer to a struct with a field that's *not* a pointer.
[21:13:02] <pyzozord> i see
[21:13:26] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Ping timeout (120 seconds))
[21:13:43] <Sam> Go 1.18 was just released
[21:13:48] <Sam> Get it while it's hot :)
[21:13:59] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:14:12] <synthmeat> ulala
[21:14:33] <fizzie> Eh, it loses half its value the second you download the tarball. I'll just get it used later.
[21:16:05] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[21:16:05] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[21:16:05] *** Joins: tane (~tane@user/tane)
[21:16:38] <pyzozord> another question, since functions can return tuples, how does that work with say fmt.Printf("%v", foo())? It doesn't seem to work for me at all https://go.dev/play/p/kysa4TKKOfE
[21:17:26] <fizzie> It doesn't. But it does work with `fmt.Println(foo())`, as a special case.
[21:17:30] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[21:17:41] <fizzie> They don't really return tuples (as an object you could talk about), they just return multiple values.
[21:18:05] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[21:19:05] <pyzozord> is there some kind of "spread opreator" that would let me take all the multiple values and pass them as arguments to a function? Like this fmt.Printf("%v %v", ...foo())
[21:19:29] <ikke> pyzozord: that..
[21:19:36] <pyzozord> that works?
[21:19:41] <fizzie> No, the special case is only when the "inner" function call is the only thing providing all the arguments.
[21:19:55] <fizzie> fmt.Print(foo()) *is* pretty close to that.
[21:20:00] <fizzie> (And does work.)
[21:20:04] <ikke> pyzozord: but the ... go after
[21:20:24] <fizzie> You can't use ... to unpack "multiple" return values.
[21:20:33] <fizzie> foo()... would be appropriate if the function returned a slice.
[21:20:36] <pyzozord> ikke: that didn't work for me https://go.dev/play/p/c4GXhLZhYvW
[21:20:37] <ikke> right, it needs to be a list
[21:20:59] <pyzozord> so there is unpacking operator but it only works for slices
[21:21:07] <pyzozord> and probably arrays
[21:21:25] <Sam> It may sound nitpicky, but it may be important to your understanding of this: that is not a tuple, it is multiple return values.
[21:21:48] <Sam> Eg. you can't put those in a single variable, they are separate things that just happen to have parentheses around them for syntactical reasons
[21:22:06] <fizzie> `foo...` isn't really even an "unpacking" operator, it's more of a "pass a slice directly to a function that takes a ...T argument".
[21:22:34] <pyzozord> Yep yep I understand it is not a real object called tuple or any other reified object I can operate on as a unit
[21:22:58] *** Joins: jla (~jordi@90.74.80.23)
[21:23:24] <pyzozord> I see so if I have a function that taks two normal arguments I cannot use ... to pass a slice with two elements
[21:24:09] <fizzie> Yeah. https://go.dev/play/p/SQEg4psNEp0 shows the main things you can and can't do with `foo...`.
[21:27:41] <lungaro> so what's the best thing done so far with generics? haha
[21:28:31] <bpalmer> quiet down people complaining about the lack of generics.
[21:28:59] <lungaro> one would expect a equally large response right? <sarcastic grin>
[21:29:31] *** Quits: jla (~jordi@90.74.80.23) (Ping timeout: 256 seconds)
[21:30:19] *** Joins: rogersm (~rogersm@90.166.180.250)
[21:30:37] <siXy> I'd like a pure go protobuf library, but I don't currently have the spare cycles to write it myself.
[21:30:51] <siXy> should be possible now, though
[21:31:21] <lungaro> isnt' it pure go? What do you mean?
[21:31:24] <lungaro> like the generators too?
[21:37:06] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[21:38:10] <tristero> will "go build" automatically update the go version in go.mod if you're using a new feature like generics?
[21:39:13] <seebs> i think it will fail if you're using a new feature that isn't supported by the version you've specified
[21:41:55] *** Quits: Tasi (~Tasi@20014C4C220C8F00DC37BF51A96B88E8.catv.pool.telekom.hu) (Quit: Leaving)
[21:41:56] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:7132:8c9f:43bf:fa2a)
[21:42:40] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:49:27] <fizzie> The error message suggests updating it, though, or at least did for previous feature additions.
[21:49:33] *** Quits: Atlas (~atlas@user/atlas) (Quit: ZNC - https://znc.in)
[21:50:02] <fizzie> Like for using an underscore as a digit separator in a numeric literal, when go.mod says go 1.12: "underscores in numeric literals requires go1.13 or later (-lang was set to go1.12; check go.mod)"
[21:50:31] <fizzie> (And `go mod tidy -go=1.18` should presumably work for updating it.)
[21:54:28] <Mathisen> hello  can someone explain a resursive funktion please in simple terms. using this example > https://go.dev/play/p/NAtywCz9jj_j where does it save the value i dont get it?? base is always 5 and exp is -1 everytime it calls itself
[21:55:56] <Mathisen> i get the first step is 5*5 = 25 but where does it store 25 on the second cal
[21:55:59] *** jjhoo_ is now known as jjhoo
[21:56:48] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:56:48] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:57:01] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:57:01] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[21:58:25] <ikke> Mathisen: You could just mentally substitute each function call with the value it returns
[21:58:44] <fizzie> Mathisen: Does it help if you consider the parameters to be local to each *invocation* of the function? The call apa(5, 5) has the values base == 5, exp == 5. Then it does a recursive call apa(5, 4): that call has a *second* pair of variables, with the values base == 5, exp == 4. Eventually that nested call returns with the value 625 (5 to the power of 4), which the outermost call then multiplies
[21:58:46] <fizzie> by base (to return 3125).
[21:59:03] <seebs> mathisen: the calls all exist at once. So, the first call calls the second calls the third calls the fourth calls the fifth calls the 6th. the 6th returns 5 because exp is 0. then the 5th executes base * (returned 5), getting 25, and returns that. then the next executes 5 * (returned 25), getting 125, and returns that, and so on.
[21:59:23] <seebs> where they're stored is called "the stack" and it's a metaphorical thing you can shove stuff into, like return values of functions.
[21:59:52] *** Quits: shadowchaser (~Shadowcha@liox.eu) (Quit: The Lounge - https://thelounge.chat)
[22:00:18] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:00:49] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[22:02:10] <ikke> 5 * apa(5, 4) -> 5 * 4 * apa(5, 3) -> 5 * 4 * 3 * apa(5, 2) -> 5 * 4 * 3 * 2 * apa(5, 1) -> 5 * 4 * 3 * 2 * 1 * apa(5, 0) -> 5 * 4 * 3 * 2 * 1 * 1
[22:03:12] <Mathisen> thanks!
[22:03:26] <Mathisen> my head was melting before asking this
[22:04:29] <seebs> so the funny thing is, someone was talking about this the other day, and i realized that many people i know just never saw recursion as weird in the first place, and i was always curious about what *about* it was confusing
[22:04:30] <pyzozord> it looks to me that ... in a functin call is just saying "pass this slice as is, don't create a copy"
[22:04:34] <seebs> and now i know, so thank you
[22:04:39] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:04:39] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:04:42] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:04:54] <pyzozord> ah that's what fizzie said before
[22:06:41] <lungaro> is there a max recursive call limit or is it simply available ram? I assume its the stack that keeps growing for each call
[22:06:57] *** Quits: shadowchaser (~Shadowcha@liox.eu) (Quit: The Lounge - https://thelounge.chat)
[22:06:58] <ikke> lungaro: until the stack is full
[22:07:18] <lungaro> gotcha
[22:07:21] <pyzozord> I think goroutine stack was unlimited before but now it's just 14k or something like that?
[22:07:25] <ikke> and then you get a stack overflow
[22:07:47] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[22:07:51] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[22:07:54] <ikke> Some languages support tail call optimization
[22:08:11] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:09:51] <ikke> If your code adhears to a certain structure, the recursive function becomes basically itterative
[22:10:00] <ikke> but golang does not support it afaik
[22:14:38] <fizzie> There was a proposal for supporting explicit tail calls with the keyword `become`, which I remember mostly because there was something so amusing about that choice of a word.
[22:14:55] <seebs> yeah. clojure spells it "recur"
[22:15:23] <seebs> in general, though, it's fine as long as things don't get very deep. like, in a typical thing like a sort or whatever, it'll be roughly log-n depth, so like, for 4 billion items, depth 32, and that's trivial and works fine.
[22:16:20] <fizzie> "We are not going to do it" is how the discussion about `become` ends, alas: https://github.com/golang/go/issues/22624
[22:17:37] <ikke> "it doesn't address a significant problem that people have using the language"
[22:17:46] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:17:46] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:17:59] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[22:18:02] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:19:13] <pyzozord> is go 2 close?
[22:20:00] <ikke> I guess people "
[22:20:22] <ikke> 'don't have significant problems' with it because they learned to avoid it :P
[22:22:15] <seebs> i don't think "go 2" is well defined. a lot of the things that have been considered as possible things for development towards a New Major Version are happening or have happened, e.g., 1.18 showed up today and has some generics.
[22:24:14] <pyzozord> I remember from the opening panel with Ken Thompson and other creators, Ken said that their intent is to watch how language is used, learn from that, and design a better version later
[22:25:08] <seebs> The more recent thing was a discussion of a gradual evolution of adding features slowly and carefully.
[22:26:59] <pyzozord> I see so their are chaning their mind
[22:27:09] <pyzozord> both on new version and on not adding features
[22:27:28] <ikke> pyzozord: go 2 is not about not adding new features
[22:27:34] <ikke> it's about breaking changes
[22:27:53] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:27:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:28:03] <pyzozord> not sure if I understand well if you understand what I meant
[22:28:12] <ikke> "As always, the release maintains the Go 1 promise of compatibility. We expect almost all Go programs to continue to compile and run as before. "
[22:28:18] <ikke> pyzozord: apparently not
[22:29:16] <seebs> i think they've drifted towards "we don't need to break compatibility for anything we see on the horizon"
[22:29:32] <pyzozord> as far as I understood it, go language was intendent in large part stay as is, with majority of updates happening in the standard library. Feature wise there was attitude that new language features are very likely not going to be added to the language at all.
[22:29:48] <pyzozord> Instead they were going to develope a new version of the language later with new features.
[22:30:12] <pyzozord> *original intent
[22:30:18] <pyzozord> at least that's what I got from that opening panel
[22:30:48] <ikke> I think they want to avoid a python3 situation where a large portion of the ecosystem would remain on go 1
[22:31:23] <pyzozord> my interpretation was that they wanted to avoid c++ fate
[22:31:34] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[22:31:42] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[22:31:47] *** Joins: crashrep (~crashrep@user/crashrep)
[22:33:00] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[22:33:35] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:34:35] *** Parts: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) ()
[22:34:36] *** Joins: jmontano (~jmontano@190.131.226.138)
[22:40:06] *** Joins: jla (~jordi@137.215.35.37.dynamic.jazztel.es)
[22:40:27] <pyzozord> I'm wondering how hard would it be to write some kind of go repl. In interpreted languages like python or js I use repl to test language features
[22:40:44] <pyzozord> it's really great, much much faster and easier than looking things up in documentations and specifications
[22:40:48] <Sam> There are a handful out there already, IIRC
[22:43:09] <pyzozord> hmm maybe I should try this one
[22:43:10] <seebs> so in a general case, it's Impossibly Hard because compiled languages Don't Work Like That, but you can do some amount of interpreting simple Go and make it work okay.
[22:43:11] <pyzozord> https://github.com/x-motemen/gore
[22:43:32] <pyzozord> oh no I didn't mean to actually make it interpreted
[22:43:52] <pyzozord> just the repl behaviour
[22:45:46] *** Quits: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1) (Quit: WeeChat 2.8)
[22:46:05] *** Joins: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1)
[22:46:15] <pyzozord> gore is not bad, but it is kind of slow, it takes a second after each line
[22:49:18] *** Quits: jmontano (~jmontano@190.131.226.138) (Ping timeout: 260 seconds)
[22:49:18] *** Quits: iryith (~iryith3@user/iryith) (Read error: Connection reset by peer)
[22:50:39] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[22:50:40] *** Joins: Atlas (~atlas@user/atlas)
[22:51:18] *** Joins: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de)
[22:52:38] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:53:23] *** Quits: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1) (Quit: WeeChat 2.8)
[22:53:42] *** Joins: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1)
[22:56:16] *** Quits: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1) (Client Quit)
[22:56:34] *** Joins: lilgopher (~ubuntu@2601:241:8000:38f0::1bb1)
[22:58:04] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e94e-c6aa-d6c8-3d10.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:59:36] *** Parts: StyXman (~mdione@2a01:e0a:931:5060:20d:b9ff:fe52:1a0) (http://quassel-irc.org - Chat comfortably. Anywhere.)
[23:01:30] *** Joins: iryith (~iryith3@207.81-166-89.customer.lyse.net)
[23:01:30] *** Quits: iryith (~iryith3@207.81-166-89.customer.lyse.net) (Changing host)
[23:01:30] *** Joins: iryith (~iryith3@user/iryith)
[23:03:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[23:05:45] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1)
[23:10:22] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:13:15] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Remote host closed the connection)
[23:14:03] *** Joins: boof (~rickybob@gateway/vpn/pia/rickybob)
[23:15:58] *** Quits: boof (~rickybob@gateway/vpn/pia/rickybob) (Client Quit)
[23:21:15] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[23:25:26] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:26:34] *** Joins: Atque (~Atque@user/atque)
[23:29:26] *** Quits: jla (~jordi@137.215.35.37.dynamic.jazztel.es) (Ping timeout: 260 seconds)
[23:38:45] *** Joins: pepee (~pepee@user/pepee)
[23:40:37] *** Quits: klaas (~klaas@simply.kla.as) (Quit: ZNC 1.8.2 - https://znc.in)
[23:44:09] *** Joins: klaas (~klaas@simply.kla.as)
[23:44:22] *** Quits: halden (~halden@lden.im) (Quit: Bye)
[23:46:04] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[23:46:31] *** Joins: halden (~halden@lden.im)
[23:48:41] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:48:54] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[23:48:55] *** Joins: danmurf (uid480399@user/danmurf)
[23:49:49] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:50:04] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[23:54:18] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 252 seconds)
[23:58:35] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
