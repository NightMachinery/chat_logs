[00:00:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:00:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:00:47] *** Joins: wroathe (~wroathe@user/wroathe)
[00:01:40] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[00:01:59] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[00:03:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[00:06:33] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[00:10:55] *** Quits: benin (~benin@183.82.27.57) (Quit: The Lounge - https://thelounge.chat)
[00:13:21] *** Joins: acode (~acode@151.65.31.181)
[00:20:07] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:20:55] *** Joins: pavonia (~user@user/siracusa)
[00:31:40] <monochrom> Nice, GHC 9.0.2, now supports M1.
[00:31:51] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:33:38] *** Joins: otherwise (~otherwise@2601:602:880:90f0:8162:5dfa:7602:6575)
[00:33:49] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 240 seconds)
[00:34:43] <sshine> woot. two days before I hand back my M1 MacBook.
[00:38:31] <otherwise> phwew, for a second I thought you said "back hand".
[00:41:09] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:44:41] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:51:45] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:00:03] *** Joins: zebrag (~chris@user/zebrag)
[01:02:43] *** Joins: xkuru (~xkuru@user/xkuru)
[01:04:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[01:05:15] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[01:07:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:07:32] *** Quits: xff0x (~xff0x@2001:1a81:534f:cd00:913d:8a40:152a:49ac) (Ping timeout: 240 seconds)
[01:08:46] *** Joins: xff0x (~xff0x@2001:1a81:534f:cd00:2537:409e:e003:9b4d)
[01:11:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[01:12:22] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:13:03] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[01:13:11] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[01:16:00] *** Joins: juri_ (~juri@178.63.35.222)
[01:17:45] *** Joins: Pickchea (~private@user/pickchea)
[01:18:28] *** Quits: zer0bitz (~zer0bitz@196.244.192.54) (Ping timeout: 268 seconds)
[01:18:42] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:19:20] *** Parts: kadir (~kadir@88.251.54.120) (goodnight)
[01:22:52] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[01:22:56] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[01:23:07] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[01:24:37] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 240 seconds)
[01:25:41] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:27:09] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[01:28:17] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:30:29] *** Joins: BrokenClutch (~pioneer@2804:d41:c2a7:d800:e627:b00b:2c62:134)
[01:31:10] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:31:20] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:32:23] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:33:27] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[01:33:44] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[01:38:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:40:21] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:41:18] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Remote host closed the connection)
[01:41:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:42:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:43:26] *** Quits: otherwise (~otherwise@2601:602:880:90f0:8162:5dfa:7602:6575) (Remote host closed the connection)
[01:44:46] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:45:09] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[01:49:07] *** Joins: otherwise (~otherwise@2601:602:880:90f0:144d:55a8:1e87:818)
[01:56:36] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[01:58:12] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[02:00:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:01:10] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:04:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:06:49] *** Quits: deadmarshal (~deadmarsh@95.38.229.175) (Ping timeout: 256 seconds)
[02:07:46] *** Quits: ym (~ym@pool-96-253-29-94.prvdri.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:11:45] *** Joins: benin (~benin@183.82.27.57)
[02:17:07] <otherwise> > let multVector n [] = []; multVector n (x:xs) = n*x : multVector n xs in multVector 3 [1,2,3,4]
[02:17:09] <lambdabot>  [3,6,9,12]
[02:17:16] <otherwise> BOOYA!
[02:17:46] <otherwise> my first successful recursive function. Feels good
[02:19:21] *** Joins: ymherklotz (~ymherklot@139.59.166.119)
[02:27:05] *** Quits: max22- (~maxime@2a01cb0883359800ac192c9334b98292.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:27:32] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 268 seconds)
[02:29:07] <BrokenClutch> otherwise: congrats :)
[02:30:45] <otherwise> :) certainly is a little awkward getting the hang of this type of notation at first. So this little triumph is motivating.
[02:31:19] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:32:19] <lechner> Hi, Hackage has no documentation for aeson-schema. Can I find it anywhere else? Thanks!
[02:33:37] *** Joins: aaron (~user@93.48.228.52)
[02:34:19] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 268 seconds)
[02:34:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[02:34:50] *** Joins: KvL (~KvL@45.248.78.202)
[02:34:50] *** Quits: KvL (~KvL@45.248.78.202) (Client Quit)
[02:35:29] *** Joins: KvL (~KvL@45.248.78.202)
[02:35:35] <aaron> hi, does anyone know what happened to the learnyouahaskell.com site?
[02:36:46] *** Joins: vysn (~vysn@user/vysn)
[02:38:12] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[02:38:22] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[02:38:39] <aaron> I would like to purchase the book, but noticed that the only edition is from 2011
[02:39:23] <aaron> so I was hoping to visit the website to see if there have been substantial changes online compared to the printed edition
[02:39:54] *** Joins: acidjnk (~acidjnk@p200300d0c7271e268c494fdd7858bb85.dip0.t-ipconnect.de)
[02:40:45] <BrokenClutch> lechner: I think that the whole lib is outdated, but i'm not sure
[02:41:06] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[02:42:15] <BrokenClutch> lechner: I was wrong, but I can't find the documentation too
[02:42:28] <otherwise> aaron: Are you wanting to buy the book to support the author or because you prefer to have physical copy?
[02:43:43] <aaron> well, I surely would like to support the author, but to be honest my main reason is having a printed copy from which to study
[02:44:15] <BrokenClutch> lechner: I think I've found it, https://hackage.haskell.org/package/aeson-schema-0.2.0.0/docs/Data-Aeson-Schema.html
[02:44:41] <lechner> BrokenClutch: i think that one is outdated
[02:44:52] <geekosaur> very
[02:44:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[02:45:00] <BrokenClutch> lechner: But it's the only one I think
[02:45:14] <BrokenClutch> 0.4
[02:45:20] <geekosaur> I note the latest version has a build conflict on template-haskell according to its build log
[02:45:30] <BrokenClutch> https://hackage.haskell.org/package/aeson-schema-0.4.0.0/docs/Data-Aeson-Schema.html
[02:45:39] <lechner> thanks!
[02:45:40] <BrokenClutch> that one is the newest
[02:45:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[02:45:50] <BrokenClutch> but isn't the newest version
[02:46:23] <otherwise> in my opinion (I'm a beginner going through learn you a haskell right now, by the way), learn you a haskell is not to be used as "the one and only resource for learning haskell"
[02:46:26] <BrokenClutch> but it has the same little number, dunno, me dumb
[02:46:45] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:47:26] <otherwise> point being, the printed version would be very useful even if it is not as updated as the website (I don't have the answer to whether it is),  and regardless of whether using the printed or online version, you will probably be supplementing with other resources.
[02:47:55] <BrokenClutch> lenchner: https://hackage.haskell.org/package/aeson-schema-0.4.1.2/docs/Data-Aeson-Schema.html, Now I've verified, that's the most att one
[02:47:55] <Lycurgus> aaron, apparently the author decided that your buying the last available print editions is what e wants
[02:48:04] <Lycurgus> e still owns the domain
[02:48:33] <Lycurgus> the title in question has to some extent jaded the intended audience
[02:48:51] <aaron> ok, thank you very much for your answers
[02:48:55] <lechner> how long has it been down?
[02:49:58] * Lycurgus has no idea
[02:50:36] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[02:50:46] <Lycurgus> i sense a has moved on from haskell situation
[02:51:25] <aaron> I just noticed this evening
[02:51:48] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:51:51] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[02:51:55] <lechner> maybe unattended updates broke the site?
[02:52:35] <Lycurgus> don't think so
[02:52:36] <geekosaur> it's a domain failure
[02:52:42] <Lycurgus> the domain's not routing
[02:52:43] <aaron> I was worried that I might purchase the book and then the site gets update with the second edition, ahah
[02:52:45] <geekosaur> nxdomain = domain gone
[02:52:51] <acode> It was up yesterday, I was reading it
[02:53:01] <aaron> ok, awesome news
[02:53:06] <Lycurgus> ah, a fact!
[02:53:07] <hpc> use archive.org
[02:53:19] <geekosaur> hm, so did they just let the domain expire?
[02:53:55] <geekosaur> or is this a DNS configuration issue that might get fixed sometime next week (or next year if the folks responsible take the entire holiday period off)
[02:53:59] <hpc> it expires in august of next year
[02:54:02] <Lycurgus> i.e. as distinct from an after-the
[02:54:09] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[02:54:25] <Lycurgus> with the new fact
[02:54:44] <hpc> it's a temporary error, hopefully
[02:54:53] <hpc> in my dig it's not nxdomain, it's servfail
[02:54:55] <Lycurgus> the surmise is he just let the name expiry or such lapse and will restore presently
[02:54:59] *** Quits: Bartol (~Bartol@user/Bartol) (Ping timeout: 256 seconds)
[02:55:01] <Lycurgus> 30% confidence
[02:55:24] <geekosaur> nxdomain is what chrome gave me here
[02:55:30] <Lycurgus> 70% moved on from hs
[02:55:34] <hpc> chrome doesn't know how to error correctly
[02:55:36] <BrokenClutch> probably a conspiracy, the schemers are behind this!
[02:55:50] <acode> In the meantime I checked archive.org as suggested above and there seems to be a full copy of the website there
[02:55:54] <int-e> the domain hasn't expired, but the listed nameservers don't know about it
[02:55:59] <geekosaur> interestingly dig also gives servfail
[02:56:20] <lechner> DNS does not resolve via Google's public DNS. it could be an error implementing DNSSEC
[02:56:26] <Lycurgus> right that's how I knew he still owned it and yeah that means it can't be name expiry
[02:56:48] <aaron> awesome, trying to use archive.org as suggested by hpc
[02:56:56] <aaron> in the meanwhile
[02:57:43] <Lycurgus> updates to it are utterly a non issue, should think that was clear by no
[02:57:45] <Lycurgus> w
[02:57:47] <BrokenClutch> I still think it's a conspiracy, a l33t hack3r 4tt4ck
[02:58:35] <Lycurgus> so we now have
[02:59:10] <Lycurgus> 20% hosting ignored and might come back soon
[02:59:26] <Lycurgus> 80% hs fatigue
[02:59:58] <int-e> So... the hosting provider says... "You have requested a site that is currently offline. This generally happens when a site is temporarily disabled for some reason, but has not been permanently removed."
[03:00:01] <geekosaur> servfail is unlikely to be hs fatigue, more likely to be dns misconfiguration
[03:00:30] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:00:36] <int-e> (That's after putting  208.94.116.26 learnyouahaskell.com  into my /etc/hosts)
[03:00:47] <Lycurgus> it coming back quickly would support dns misconfig
[03:01:25] <int-e> so it seems deliberate, no clue what's going on
[03:01:55] <geekosaur> servfail seems an odd way to do that though
[03:02:10] <lechner> yeah, a link to amazon would be better
[03:02:59] <geekosaur> a link to that "offline" page would be better. or a straight up failure to resolve as opposed to a servfail
[03:03:22] <lechner> maybe the author is busy with a major public holiday
[03:03:32] * Lycurgus AWS hosting would be a salient fact but defocusing this stream
[03:03:39] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:03:48] <int-e> "deliberate" -- on part of the hosting provider (nearlyfreespeech.net), not the site author...
[03:06:11] <int-e> geekosaur: and yeah, it is weird to just drop the DNS entry like that
[03:06:38] <geekosaur> dropping the entry would not be that weird. servfail-ing it is
[03:07:17] <geekosaur> nxdomain vs. servfail
[03:07:23] <otherwise> uhh, i just refreshed my learn you a haskell page (which was working yesterday) and now it cant be reached... only archive.org as you all say
[03:09:52] <otherwise> aaron, also try your online collection of e-books from your local library. Mine has access to "Get Programming In Haskell" by Will Kurt, which is probably a better resource anyway, albeit less whimsical...
[03:10:19] <BrokenClutch> wait, is pastebin not working too?
[03:10:41] <lechner> alien invasion!
[03:10:54] <geekosaur> which pastebin?
[03:11:05] <geekosaur> paste.tomsmeding.com works here
[03:11:24] <int-e> FWIW: https://int-e.eu/~bf3/tmp/lyah-offline.png ...of course if this is a case of server maintenance gone wrong then this may be a fluke too.
[03:11:37] <BrokenClutch> pastebin.com
[03:12:08] <acode> pastebin.com is working for me
[03:12:17] <geekosaur> consider that a request to not use it :)
[03:12:39] <BrokenClutch> wait, my ISP blocked pastebin. WHY?
[03:12:54] * geekosaur has  abrowser add-on to force the raw site because ye gods, but that also disables e.g. line numbers
[03:13:30] <BrokenClutch> geekosaur: What's the problem with pastebin.com ?
[03:13:51] <geekosaur> pastebins are often blocked by content-based blockers because they're often used for sharing stolen passwords and the like
[03:14:07] <geekosaur> it's ugly, it's full of ads, its haskell markup is eye-bleeding
[03:14:34] <BrokenClutch> But, but, I wanted to use it :(
[03:14:46] <hpc> use the link in the topic instead
[03:15:03] <lechner> for GP, dpaste.org is nice
[03:16:05] <lechner> never mind: "dpaste is going to be terminated as of January 1, 2022."
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[03:18:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[03:21:29] <sm> I don't know why anyone would use pastebin . com except for the mnemonic url
[03:23:10] <sm> guess I answered my own question
[03:23:34] <aaron> otherwise thanks very much for your advice on "Get Programming In Haskell"
[03:24:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[03:24:06] <aaron> am looking in to it (amazon preview)
[03:25:57] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[03:27:21] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[03:27:21] <lechner> there are many options. fwiw, i like this one:  http://dev.stephendiehl.com/hask/
[03:28:20] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[03:28:48] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[03:28:48] <geekosaur> bpa.st is still around
[03:29:24] <geekosaur> new url but still around (bpaste.net redirects to it)
[03:30:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[03:30:17] *** Quits: Megant (megant@user/megant) (Ping timeout: 240 seconds)
[03:31:56] <lechner> aaron: the LYAH book is also available on archive.org (for free)   https://archive.org/search.php?query=learn%20you%20a%20haskell    
[03:31:58] <aaron> lechner thank you, I had stumbled on stephendiehl's site but will certainly take your advice on that page
[03:32:22] *** Joins: Megant (megant@user/megant)
[03:33:47] <aaron> lechner: awesome, thank you for the link, I was having difficulty using archive.org
[03:34:43] <lechner> aaron: there are two search boxes. this is for the open-access public library
[03:35:53] *** Joins: juri_ (~juri@178.63.35.222)
[03:36:00] *** Quits: tito (tito@tilde.team) (Quit: WeeChat 3.3)
[03:37:15] <aaron> I must say, I am busy checking out the book otherwise pointed out (Get Programming In Haskell) and it seems quite nice
[03:38:02] <aaron> I find it strange that I didn't notice it while searching for good books to start with
[03:39:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[03:40:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Remote host closed the connection)
[03:40:40] *** Quits: acode (~acode@151.65.31.181) (Quit: Client closed)
[03:40:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[03:43:52] <lechner> good price, too. two for one for $18, from the author!
[03:44:32] <otherwise> I found this pdf for learn you a haskell:
[03:44:33] <otherwise> http://barbra-coco.dyndns.org/yuri/functinal_programming/Learn%20You%20a%20Haskell%20for%20Great%20Good.pdf
[03:45:29] <otherwise> it seems the most up to date (other versions I found online had "Higher Order Functions" as chapter 5, whereas the original website had that as chapter 6 (as in the link I just provided"
[03:46:01] <aaron> awesome, thank you!
[03:47:14] <otherwise> :) glad you found interest in "get programming in haskell"
[03:47:23] *** Joins: Guest85 (~Guest85@2a00:23c7:908b:e100:5eea:1dff:fe7c:1ffd)
[03:48:57] *** Quits: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) (Ping timeout: 240 seconds)
[03:50:47] <otherwise> since we are on the topic, author of LYAH explicitly states they recommend "Real World Haskell" for a more in depth look at learning Haskell. I haven't cracked that book open, but I figure if I like LYAH, and the author recommends it, it must be pretty good. Not to overwhelm you with resources.
[03:50:53] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[03:51:53] *** Joins: Techcable (~Techcable@168.235.93.147)
[03:52:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[03:52:47] <hpc> alternatively, to overwhelm you with resources, https://www.haskell.org/documentation/ :D
[03:55:30] <aaron> awesome, checking it out, it has all the titles you mentioned... neat
[03:55:51] <otherwise> hpc HAHA also: https://www.haskell.org/onlinereport/haskell2010/
[03:56:45] <geekosaur> some of us still like https://www.haskell.org/tutorial/
[03:57:11] <aaron> I was a bit worried about "Real World Haskell" being a bit old... 2008
[03:58:31] <otherwise> aww, yeah get programming in haskell is 2018
[03:58:35] <geekosaur> it's old and was dated pretty much on publication because the exception system was overhauled at that point.l but the online version has been updated
[03:59:35] *** Quits: benin (~benin@183.82.27.57) (Ping timeout: 256 seconds)
[03:59:53] <BrokenClutch> https://paste.tomsmeding.com/yvZmn4UT  .Is this good haskell?
[04:00:02] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 268 seconds)
[04:01:02] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[04:01:36] <lyxia> licking buttons sounds a bit unhygienic :)
[04:01:41] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[04:02:37] <aaron> hpc seems cool, but not what I'm looking for for now (supplement to Haskell Report...)
[04:03:53] <lyxia> BrokenClutch: it doesn't look too bad but I'm not sure the writer monad really pulls its weight, as opposed to simply using pairs.
[04:04:33] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[04:04:36] *** Joins: benin (~benin@183.82.27.57)
[04:04:37] <BrokenClutch> lyxia: I'm testing stuff, but you're right, it's a bit heavy
[04:05:27] <hpc> aaron: ah, if you're just looking for big reference materials the ghc manual is probably your ideal next read
[04:05:30] <BrokenClutch> lyxia: Licking buttons is a form of building immunity to diseases
[04:05:34] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[04:06:11] <lyxia> Ok but don't push it.
[04:07:08] <BrokenClutch> lyxia: The button? Ok, I'm going to stop with the "jokes"
[04:07:11] <int-e> @src tell
[04:07:11] <lambdabot> Source not found. Are you on drugs?
[04:07:23] <otherwise> > "tongue" /= "finger"
[04:07:25] <lambdabot>  True
[04:07:57] *** Quits: KvL (~KvL@45.248.78.202) (Ping timeout: 240 seconds)
[04:08:11] <aaron> hpc: actually I'm trying to start understanding the language and become comfortable enough to approach small projects
[04:08:44] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[04:10:44] <int-e> :t not <$> ?hw <* tell ["Licked"]
[04:10:45] <lambdabot> (?hw::f Bool, MonadWriter [[Char]] f) => f Bool
[04:11:38] <int-e> (well, the `not` would be for the `Pressed` case, but whatever)
[04:12:50] *** Joins: KvL (~KvL@124.188.202.131)
[04:12:52] <int-e> BrokenClutch: ^^But I would definitely use `tell`
[04:13:15] *** Quits: Guest85 (~Guest85@2a00:23c7:908b:e100:5eea:1dff:fe7c:1ffd) (Quit: Client closed)
[04:14:45] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[04:15:15] <BrokenClutch> int-e: tell is actually pretty readable, thanks
[04:17:40] <BrokenClutch> I tried with "censor" too
[04:19:09] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 268 seconds)
[04:21:10] <sm> @where books
[04:21:10] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[04:21:48] <int-e> BrokenClutch: I guess `censor` works, but the intended use of this is different... say: `censor (filter (/= Licked)) act` to get the actions of `act` without the icky licks (assuming you derive Eq for that type)
[04:23:23] *** Quits: KvL (~KvL@124.188.202.131) (Ping timeout: 256 seconds)
[04:23:44] *** Joins: drewr (~drew@user/drewr)
[04:24:28] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[04:24:43] <BrokenClutch> int-e: I see, thanks
[04:25:15] <otherwise> sm Cool! :)
[04:25:17] *** Joins: KvL (~KvL@37.120.213.100)
[04:25:42] <otherwise> @ where RWH
[04:25:51] <otherwise> :(
[04:25:56] <otherwise> @where RWH
[04:25:56] <lambdabot> http://www.realworldhaskell.org/blog/ http://book.realworldhaskell.org/read/
[04:27:06] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[04:27:54] <aaron> ok, I think I've made up my mind to start off :)
[04:28:35] <aaron> I'll go with "Get Programming In Haskell" by Will Kurt
[04:28:41] <aaron> thanks otherwise
[04:29:03] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:29:18] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[04:29:19] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[04:29:21] <otherwise> know of any interactive online books for haskell? with some built in compiler similar to https://eloquentjavascript.net/03_functions.html ?
[04:29:30] <aaron> I found a leaked version... and got to skim through the pages and has many points of interest (for my experience with the language)
[04:30:37] <int-e> BrokenClutch: oh and did you know that you can do pattern matching in the left-hand sides of function definitions?  press (Button hw) = Button $ ... hw ...
[04:31:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:31:34] <aaron> I'm guessing the author is quite talented at what he does given that I found little information linking him to haskell as his main subject matter
[04:33:03] *** Quits: drewr (~drew@user/drewr) (Quit: ERC (IRC client for Emacs 27.2))
[04:33:53] <aaron> otherwise thanks once again! And thanks to everyone else for the kind support
[04:34:04] *** Joins: drewr (~drew@user/drewr)
[04:34:18] <aaron> good night, will certanily pass by some other time :)
[04:34:41] <geekosaur> otherwise, the tech for haskell exists but afaik nobody has hooked it together that way yet
[04:34:51] *** Joins: unyu (~pyon@user/pyon)
[04:35:08] <aaron> exit
[04:35:09] *** Joins: Pickchea (~private@user/pickchea)
[04:35:16] <otherwise> aaron Cool! seems like a good choice. hmm, interesting point about Will Kurt being semingly new
[04:35:26] <otherwise> to haskell
[04:35:38] <otherwise> best of luck! :
[04:35:40] <otherwise> :)
[04:35:50] <aaron> thank you!
[04:36:08] *** Quits: aaron (~user@93.48.228.52) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.2))
[04:36:57] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[04:37:38] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:40:23] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[04:43:12] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[04:44:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[04:46:11] *** Quits: acidjnk (~acidjnk@p200300d0c7271e268c494fdd7858bb85.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[04:47:26] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:47:27] *** Joins: drewr (~drew@user/drewr)
[04:47:37] *** Quits: KvL (~KvL@37.120.213.100) (Ping timeout: 240 seconds)
[04:50:00] *** Joins: KvL (~KvL@185.9.18.165)
[04:50:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[04:51:58] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 260 seconds)
[04:52:02] *** Joins: drewr` (~drew@2605:a601:a3a9:5000:fd81:b1e0:1738:6be1)
[04:52:32] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[04:52:39] <otherwise> geekosaur interesting... haskell.org seems to have implemented this basic idea in their home page tutorial, but it very limited in scope, compared to a fully fleshed out textbook. Actually, what haskell.org did is a little more interesting (albeit more linear)
[04:53:24] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:53:25] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:53:55] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[04:54:07] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:54:17] <otherwise> I'm imagining a sort of "choose your adventure" style interactive textbook, that is in the form of the haskell.org homepage tutorial... perhaps with Role Playing Game elements...
[04:55:22] <otherwise> sort of like https://simulator.dev/ but different... I'm just riffing here
[04:56:48] *** Quits: drewr` (~drew@2605:a601:a3a9:5000:fd81:b1e0:1738:6be1) (Client Quit)
[04:57:56] *** Joins: drewr (~drew@user/drewr)
[04:58:01] <dsal> Might be fun for learning targeted concepts.
[04:58:44] <dsal> I've been truing to use this plated zipper thing and so far it's like, not made my job easier.  Either because it's not actually better for what I'm doing or I don't know how to do it properly.  It'd be nice to have some confidence that at least I'm going in the right direction.  :)
[04:59:22] <Rembane> Plated zipper sounds very fancy. What problem are you trying to solve?
[05:01:55] <dsal> Day 18 of this year's AoC
[05:02:36] <dsal> I built a data structure that's like `data Pair a = Lit a | Pair (Pair a) (Pair a)` -- something like that.
[05:03:31] <Rembane> That one melted my brain, so this is gonna be fun. :)
[05:03:33] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:03:35] <dsal> I solved it by doing a `number = flip evalState 0 . traverse (\x -> (,x) <$> (id <+= 1))` and then doing some stuff with indexes and junk.
[05:04:00] <dsal> It's fineâ€¦ but I'm trying to see if I can do better with a zipper.  My mental model of what a zipper would do for me and what it actually does don't quite match.
[05:04:36] <Rembane> I don't know much of the problem nor of zippers, so I'm gonna go socratic here. What's your mental model? 
[05:04:51] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-236.elisa-laajakaista.fi) (Quit: Leaving.)
[05:04:52] <Rembane> ...and what does the zipper do?
[05:05:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[05:05:53] <dsal> I was hoping the zipper would give me a way to walk through the values in a "flat" sort of way, like traverse does.
[05:06:14] <EvanR> zippers are good for coming back
[05:06:26] <dsal> The zipper lets me maneuver about the structure and from any position replace part of the structure, but I still have to do extra work to go back whence I came.
[05:06:37] <EvanR> so only if you can undo in the adventure
[05:07:38] <EvanR> dsal, I did that one without a zipper and without numbering anything
[05:08:01] <EvanR> but ymmv
[05:08:10] <dsal> Neat.  How did you go about it?
[05:08:26] <dsal> Renumbering was pretty easy.  The zipper makes the modification kind of easy, but not all of the modifications.
[05:08:27] <EvanR> which part
[05:08:37] <dsal> expand, in particular.
[05:08:43] <dsal> er, explode
[05:08:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:09:42] <dsal> I used State on both explode and split.  Seems a bit unnecessary.
[05:09:48] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[05:09:57] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 240 seconds)
[05:10:26] <EvanR> the main data type Snail represents their trees as described in the puzzle
[05:11:10] <EvanR> to explode, I used a second data type called Exploding which wraps a Snail with one of 5 kinds of additional "state" data
[05:11:27] <EvanR> to describe what's going on in the process of trying to explode it
[05:11:57] <dsal> Ah, neat.  My `a` might allow for such a thing.
[05:11:59] <EvanR> that data is used for wrapping an exploding snail again
[05:12:26] <dsal> That's kind of how I used it.  I guess my Exploding is just a tuple, though.
[05:12:51] <otherwise> > it
[05:12:52] <lambdabot>  error:
[05:12:52] <lambdabot>      â€¢ Variable not in scope: it
[05:12:52] <lambdabot>      â€¢ Perhaps you meant one of these:
[05:12:55] <EvanR> yeah you can implement sum types as a tuple where one of the components is a tag heh
[05:12:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[05:13:23] <EvanR> since there's always 1 Snail in any case, I could have factored it that way
[05:13:30] <dsal> I mean, my Exploding equivalent is the ((leftIndex, x),  (rightIndex, y))
[05:13:33] <EvanR> paired the 5 case type with a snail
[05:13:33] <geekosaur> % it
[05:13:34] <yahb> geekosaur: True
[05:13:39] <dsal> it's true!
[05:13:52] <geekosaur> otherwise, lambdabot is not ghci and does not have an "it" binding. yahb is.
[05:14:17] <EvanR> my 5 cases are ExplodingLeft, ExplodingRight, ExplodingBoth, Exploded, and NotExploding
[05:14:36] <dsal> Doesn't sound like you used SafeHaskell
[05:15:47] <otherwise> What is it? in ghci I typed (while having :set +t active) and it returns True     it :: Bool.     but :def it or :doc it.  gives nothing...
[05:15:56] <EvanR> the naturally recursive process of exploding all the child nodes can be curtailed by look at this data, and only exploding the chosen child
[05:16:16] <otherwise> oops: ...I typed 'a':[] == ['a']
[05:16:21] <dsal> otherwise: it is what it is
[05:16:33] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#the-it-variable
[05:16:37] <dsal> (the last thing you evaluate in ghci gets bound to `it`)
[05:17:17] <geekosaur> also note that :doc is incompletley implemented at present so doesn't show a lot of what it could potentially show
[05:17:24] <otherwise> oh, its like 'ans' in MATLAB, or even a graphing calculator for that matter.
[05:19:07] *** Joins: Matheo_bis (~matheo@user/matheo-bis/x-4309430)
[05:21:26] <dsal> Man, I should really learn this guard syntax instead of just trying wacky things and being surprised when they work.
[05:22:03] *** Quits: Matheo_bis (~matheo@user/matheo-bis/x-4309430) (Client Quit)
[05:22:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[05:22:53] *** Quits: KvL (~KvL@185.9.18.165) (Ping timeout: 256 seconds)
[05:24:49] *** Joins: KvL (~KvL@124.188.202.131)
[05:28:17] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[05:28:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:31:23] *** Quits: KvL (~KvL@124.188.202.131) (Ping timeout: 256 seconds)
[05:32:49] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:32:49] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:33:16] *** Joins: KvL (~KvL@195.216.219.57)
[05:33:19] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[05:33:26] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:36:28] <BrokenClutch> int-e: I was changing the record all the time, that's why I didn't use pattern matching
[05:37:13] <BrokenClutch> Probably will write some more code, the doc is a little bit difficult to understand (sometimes)
[05:43:56] <EvanR> you can pattern match on a record using fields, it is more tolerant of changing the record type
[05:45:38] *** Joins: drewr (~drew@user/drewr)
[05:50:39] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[05:51:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[05:52:02] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[05:53:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[05:53:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[05:56:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[05:57:43] <dsal> BrokenClutch: why is there a return () at the end?
[05:57:50] <dsal> :t print
[05:57:51] <lambdabot> Show a => a -> IO ()
[05:58:30] <dsal> (return doesn't go what most people expect and should probably generally be avoided)
[05:59:34] <dsal> I don't think I've ever used Writer.  I must have a couple times.  It doesn't seem very useful in general.
[06:00:03] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Quit: fBNC - https://bnc4free.com)
[06:00:17] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[06:00:34] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[06:01:54] *** Joins: drewr (~drew@user/drewr)
[06:04:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:04:37] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:08:17] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:08:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[06:10:20] *** Quits: drewr (~drew@user/drewr) (Quit: ERC (IRC client for Emacs 27.2))
[06:10:54] *** Joins: drewr (~drew@user/drewr)
[06:12:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[06:12:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[06:13:27] <BrokenClutch> dsal: I was testing stuff. The return () is for sanity
[06:18:18] <dsal> I don't think it helps with sanity.  It's a very confusing function.  :)
[06:18:23] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[06:18:41] <dsal> > return 1 :: [Int]
[06:18:42] <lambdabot>  [1]
[06:19:44] <dsal> do { return 3; return 5 } :: [Int]
[06:19:49] <dsal> > do { return 3; return 5 } :: [Int]
[06:19:51] <lambdabot>  [5]
[06:19:57] *** Quits: xff0x (~xff0x@2001:1a81:534f:cd00:2537:409e:e003:9b4d) (Ping timeout: 240 seconds)
[06:21:58] *** Joins: xff0x (~xff0x@2001:1a81:538d:1a00:8897:3a22:97f4:9e71)
[06:25:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[06:26:05] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[06:26:43] <BrokenClutch> dsal: I will stop using, it's really strange
[06:28:35] <xsperry> it is strange if you expect it to act the same way as return statement in imperative languages. alternative is pure, which has exactly the same behavior (and slightly different constraints)
[06:29:12] <dsal> `pure` is less confusing, but functions always return the last evaluated value, so trying to be explicit about it doesn't help much and might just make things worse.
[06:29:49] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[06:30:12] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[06:30:19] <dsal> > :t \x y -> return (x + y)
[06:30:21] <lambdabot>  <hint>:1:1: error: parse error on input â€˜:â€™
[06:30:28] <dsal> > :t (\x y -> return (x + y))
[06:30:29] <lambdabot>  <hint>:1:1: error: parse error on input â€˜:â€™
[06:30:34] <dsal> :t (\x y -> return (x + y))
[06:30:35] <dsal> ha
[06:30:35] <lambdabot> (Monad m, Num a) => a -> a -> m a
[06:32:37] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[06:32:39] <xsperry> I usually use return in do and pure when working with applicatives, just out of habit. but even if you prefer to use pure everywhere, knowing how return works and what it does is essential for reading other people's code
[06:34:20] *** Joins: conann (~bc8147f2@cerf.good1.com)
[06:34:34] <dsal> When I see "return" I automatically translate it to "pure."  If that fails me someday, someone's being clever.
[06:39:53] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:41:52] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[06:42:25] *** Joins: wh16 (~smaris@user/wh16)
[06:45:03] *** Quits: td_ (~td@muedsl-82-207-238-172.citykom.de) (Ping timeout: 256 seconds)
[06:46:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[06:46:52] *** Joins: td_ (~td@94.134.91.143)
[06:47:09] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[06:47:14] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:47:29] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:47:42] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[06:49:17] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 240 seconds)
[06:49:34] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[06:51:55] <EvanR> dsal, Writer is great, but doesn't really fit intuition of "printf"
[06:52:07] <EvanR> can't really use it like that
[06:53:12] <EvanR> if what you want is nicely monoidal, it's good
[06:53:23] <EvanR> and lazy
[06:54:17] *** Joins: deadmarshal (~deadmarsh@95.38.228.37)
[06:54:39] <dsal> I'm just not sure when I'd need it other than yeah, logging maybe.  State does the thing.  Or Tardis.
[06:58:39] *** Quits: deadmarshal (~deadmarsh@95.38.228.37) (Ping timeout: 256 seconds)
[07:00:29] *** Joins: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[07:01:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:01:49] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[07:04:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:04:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[07:04:38] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:04:38] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:04:38] *** finn_elija is now known as FinnElija
[07:08:08] *** Quits: wh16 (~smaris@user/wh16) (Ping timeout: 268 seconds)
[07:10:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[07:17:33] *** Quits: yaroot (~yaroot@60.149.13.160.dy.iij4u.or.jp) (Remote host closed the connection)
[07:19:16] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[07:20:25] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[07:20:26] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:20:58] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[07:21:03] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:28:37] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[07:30:45] *** Joins: yauhsien_ (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[07:30:46] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:35:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[07:35:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:35:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:35:39] *** Joins: wroathe (~wroathe@user/wroathe)
[07:38:36] *** Joins: wh16 (~smaris@user/wh16)
[07:41:25] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:45:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[07:47:56] *** Joins: cheater (~Username@user/cheater)
[07:48:22] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[07:49:24] *** shapr` is now known as shapr
[07:50:03] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[07:50:23] *** Joins: drewr (~drew@user/drewr)
[07:54:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[07:58:09] *** Joins: mbuf (~Shakthi@110.225.250.18)
[08:03:54] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:10:50] *** Quits: yauhsien_ (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:12:24] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[08:12:45] *** Joins: ym (~ym@pool-96-253-29-94.prvdri.fios.verizon.net)
[08:16:18] *** Joins: deadmarshal (~deadmarsh@95.38.228.37)
[08:16:57] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:21:39] <otherwise> Why should I bother making type declarations if Haskell infers them for me? type declarations are difficult for me to understand how to use, especially when (Num a, Ord b) =>  and other constraints get involved...
[08:22:08] *** Quits: wh16 (~smaris@user/wh16) (Quit: segfault)
[08:22:46] <nshepperd2> using them will help you learn how to use them
[08:24:47] <EvanR> if you don't write them, can't read them, then you'll really be screwed once the compiler starts telling you about your problems
[08:25:13] <EvanR> in many cases putting a missing type signature will improve the error message
[08:25:30] *** Joins: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[08:25:47] <EvanR> also type signatures are a big step toward documentation
[08:26:15] <EvanR> and sanity check of your own thought process
[08:28:54] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[08:29:49] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[08:32:01] <EvanR> don't worry, even if you put all top-level type signatures, you'll be heavily relying on type inference anyway for everything else
[08:42:01] *** Joins: alfonsox (~quassel@103.92.42.192)
[08:42:02] <otherwise> okay, i'm curious what you mean about "... step toward documentation"
[08:43:14] <otherwise> I've been wondering how to write my own documentation notes, so I can type :doc myCustomFunction and gchi will spit back the "documentation notes" I have written for just that occasion. This is a thing in MATLAB, called "help comments"
[08:43:56] <otherwise> Is that they sort of thing you are referring to EvanR ?
[08:44:21] <EvanR> no
[08:44:35] <EvanR> but haskell does that have that sort of thing
[08:44:39] <EvanR> haddock
[08:45:17] <EvanR> For many generic functions the type is enough to understand what it does
[08:47:31] <EvanR> e.g. (a -> b -> c) -> (a,b) -> c
[08:47:37] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[08:47:51] <otherwise> hmm, it's like the most abstract definition of the function to follow. I was unaware of haddock, thanks for sharring that :)
[08:48:47] <otherwise> that says something: first parameter is (a -> b -> c) second parameter is a pair (a,b) and the function returns c
[08:49:09] <EvanR> in many languages if a function isn't documented, you often have to go delving into its source code to figure out what it does
[08:49:37] <otherwise> the first part is most confusing, it is like a single parameter that has two inputs and a single output?
[08:49:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 240 seconds)
[08:50:19] <EvanR> (a -> b -> c) -> (a,b) -> c can be thought of as the type of a 2 arg function
[08:50:38] <EvanR> the first arg is also a 2 arg function, second arg is a pair
[08:51:18] <EvanR> when you see multiple arrows in a row, mentally insert the extra parentheses until you've internalized it xD
[08:51:22] <EvanR> a -> (b -> c)
[08:51:26] <EvanR> same as
[08:51:28] *** Parts: KvL (~KvL@195.216.219.57) ()
[08:51:28] <EvanR> a -> b -> c
[08:52:17] <EvanR> because it's curried like that, you don't have to have both arguments right now
[08:52:19] <otherwise> okay, seems easy enough, just need more exposure to writing such functions to get a better handle on it (practice)
[08:52:34] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:01:56] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[09:04:42] <maralorn> can `try (TextIO.hgetChunk handle) :: IO (Either IOException Text)` return a Rght _|_ ? (using non-lazy Text)
[09:05:35] <maralorn> I meant: Could it return a Right containing a bottom.
[09:06:39] <c_wraith> you'd have to read the source of hgetchunk to know
[09:07:48] <maralorn> c_wraith: Let=s assume that code only throws IOExceptions and no other bottoms.
[09:10:10] <c_wraith> you could probably manage to assemble a handle that smuggles a bottom out
[09:11:21] <dsal> otherwise: the type definitions are important for a few reasons.  For one, it does make it a lot easier to understand what you're trying to accomplish and the compiler can direct you towards small mistakes closer to where you're making them.  You can also get stuff like type holes to help with that.
[09:12:21] <c_wraith> types are documentation that actually tells the truth.
[09:13:50] <dsal> Yeah, EvanR's uncurry example is a pretty good example.  It's pretty clear what that does.
[09:14:06] *** Parts: BrokenClutch (~pioneer@2804:d41:c2a7:d800:e627:b00b:2c62:134) ()
[09:16:21] *** Joins: KvL (~KvL@user/KvL)
[09:18:51] *** Quits: deadmarshal (~deadmarsh@95.38.228.37) (Ping timeout: 268 seconds)
[09:21:13] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:22:03] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[09:27:07] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:31:20] <otherwise> uhh... I guess I don't understand type a->b->c 
[09:31:37] <otherwise> what is an example of a program that I can write with that type?
[09:31:46] <otherwise> I was trying to re implement add
[09:32:03] <otherwise> add :: a->b->c
[09:32:17] <otherwise> add a b = a+b
[09:32:25] <otherwise> but that doesnt work...
[09:32:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:32:40] <otherwise> i'm a noob
[09:32:49] <EvanR> you can't write anything with that type in isolation
[09:33:09] <EvanR> it only makes sense as part of the whole type (a -> b -> c) -> (a,b) -> c
[09:33:33] <otherwise> oh
[09:33:36] <EvanR> in which case, if someone happened to have a function of type Int -> Char -> Bool on them, they could pass it in
[09:33:49] <EvanR> by picking a=Int, b=Char, c=Bool
[09:36:28] *** Quits: KvL (~KvL@user/KvL) (Quit: KvL)
[09:37:17] <EvanR> you can make sense of a polymorphic type (contains type variables) by mentally prepending foralls to it. The thing has to work for any choice of a, b, and c
[09:37:36] <EvanR> you can do it for (a -> b -> c) -> (a,b) -> c, but not a -> b -> c
[09:37:56] <EvanR> you can do it for a -> a
[09:37:58] <EvanR> but not a -> b
[09:38:09] <EvanR> try it yourself to see why
[09:38:22] *** Joins: KvL (~KvL@user/KvL)
[09:39:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:39:07] <otherwise> okay
[09:42:06] <dsal> otherwise: you can read `a -> b -> c` as taking any value of any type `a` and any value of any type `b` and returns a value of type `c`.  Might be hard to do that in isolation.
[09:42:46] <EvanR> because the "user" is picking a b and c
[09:43:07] <EvanR> you can't know ahead of time what they are
[09:43:22] <dsal> Yeah, the caller.  If you write that function and I say a ~ String and b ~ Int and I want you to give me c ~ Bool -- how would you implement that?
[09:44:04] <EvanR> if you knew they, you'd say e.g. False, but you don't
[09:44:07] <EvanR> knew that*
[09:44:10] <dsal> But as stated, that's not what's said here.     Given a function  `(a -> b -> c)` and a tuple `(a, b)`  (the same `a` and the same `b`) we can get a `c`.  There aren't that manyw ays to do that.
[09:44:32] <dsal> > uncurry (+) (1,2)
[09:44:34] <lambdabot>  3
[09:44:54] <dsal> > uncurry (<>) ('h','i')
[09:44:55] <lambdabot>  error:
[09:44:55] <lambdabot>      â€¢ No instance for (Semigroup Char) arising from a use of â€˜<>â€™
[09:44:55] <lambdabot>      â€¢ In the first argument of â€˜uncurryâ€™, namely â€˜(<>)â€™
[09:45:02] <dsal> no char semigroups.  boo
[09:45:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:45:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:45:07] *** Joins: wroathe (~wroathe@user/wroathe)
[09:45:09] <dsal> > uncurry (<>) ("h","i")
[09:45:11] <lambdabot>  "hi"
[09:49:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:51:48] *** Joins: deadmarshal (~deadmarsh@95.38.228.37)
[09:53:20] *** Joins: vysn (~vysn@user/vysn)
[09:54:50] <EvanR> In a -> b you can't construct any b without knowing what b is, and none were given. In a -> a you don't have to know what a is.
[09:55:09] <EvanR> One is given
[09:56:57] <otherwise> its all so abstract. I'm just trying to come up with a function that does something to try to write. I have in front of me an example for implementing flip, and I got that, but inventing my own function so I understand how to apply this is harder than understanding how to apply this...
[09:57:39] <EvanR> yeah, use concrete examples first
[09:57:44] <dsal> It's not more abstract than it needs to be.
[09:57:49] <otherwise> Like, in english, what is a simple question that I could try to write a function that would answer the question?
[09:58:04] <EvanR> you did flip
[09:58:16] <EvanR> what about, what is the reversed version of a list
[09:58:18] <otherwise> that necessitates using (a -> b -> c ) -> a -> b -> c
[09:58:33] <EvanR> (a -> b -> c) -> (a,b) -> c ?
[09:58:37] <EvanR> (uncurry)
[09:58:54] <dsal> :t ($)
[09:58:55] <lambdabot> (a -> b) -> a -> b
[09:59:14] <dsal> It's kind of that, but with more application.
[09:59:17] <EvanR> otherwise, it comes up when you would rather a function take a tuple
[09:59:44] <EvanR> it's curried, but you want to pass it a tuple
[09:59:49] <EvanR> for some reason
[09:59:56] <dsal> Which happens when a function returns two things (as a tuple) and you want to pass those two things to another function.
[10:00:16] <EvanR> I can try to concretize why this would happen
[10:00:44] <dsal> > divMod 11 3
[10:00:46] <lambdabot>  (3,2)
[10:00:52] <dsal> > uncurry (+) $ divMod 11 3
[10:00:53] <lambdabot>  5
[10:00:57] <EvanR> write a function to tell me if the quotient is bigger than the remainder
[10:00:59] <EvanR> using divMod
[10:01:07] *** Joins: dagi64893 (~dagit@2001:558:6025:38:6476:a063:d05a:44da)
[10:01:24] *** Quits: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da) (Read error: Connection reset by peer)
[10:01:50] <EvanR> that $ is so gratuitous right there!
[10:02:05] <dsal> It's the bling operator.
[10:02:34] *** dagi64893 is now known as dagit
[10:02:50] <EvanR> > uncurry (>) (divMod 11 3)
[10:02:51] <otherwise> oh okay, I'll see if I can do that EvanR
[10:02:52] <lambdabot>  True
[10:02:56] <EvanR> > uncurry (>) (divMod 2 3)
[10:02:57] <lambdabot>  False
[10:03:01] <EvanR> well, too late xd
[10:03:12] <dsal> See if you can do a similar thing, but with quotRem instead.
[10:03:12] <EvanR> still worth doing the exercise
[10:03:57] *** Joins: notzmv (~zmv@user/notzmv)
[10:04:26] <otherwise> honestly, it's probably going to take me multiple hours, so don't wait on me. But I'll get it eventually!
[10:05:15] <dsal> The main point is to write down what you expect the function to do.  :)  You start doing that before you write the function and it gets easier.
[10:05:35] <dsal> Things like flip are super abstract because they work with just about everything.
[10:05:44] <EvanR> write a top level type signature, even if that's all you did you learned something
[10:06:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:07:22] <otherwise> wait, I'm using function :: (a -> b -> c) -> (a,b) -> c.   right?
[10:07:29] <dsal> That's uncurry
[10:07:49] <dsal> Here's where it gets cool.  So you know you need a function that does that.  Is there a function that does that?
[10:07:50] <dsal> @hoogle  (a -> b -> c) -> (a,b) -> c
[10:07:52] <lambdabot> Prelude uncurry :: (a -> b -> c) -> (a, b) -> c
[10:07:52] <lambdabot> Data.Tuple uncurry :: (a -> b -> c) -> (a, b) -> c
[10:07:52] <lambdabot> Test.Hspec.Discover uncurry :: () => (a -> b -> c) -> (a, b) -> c
[10:08:17] <dsal> @hoogle (a -> b -> c) -> b -> a -> c
[10:08:18] <lambdabot> Prelude flip :: (a -> b -> c) -> b -> a -> c
[10:08:18] <lambdabot> Data.Function flip :: (a -> b -> c) -> b -> a -> c
[10:08:18] <lambdabot> GHC.Base flip :: (a -> b -> c) -> b -> a -> c
[10:08:30] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:08:37] <int-e> :t uncurry (flip (,))
[10:08:38] <lambdabot> (b, a) -> (a, b)
[10:08:48] <int-e> :t snd &&& fst
[10:08:49] <lambdabot> (a, c) -> (c, a)
[10:08:56] <EvanR> otherwise, have you looked at functions like map, filter, foldl yet
[10:09:09] <dsal> I feel like I want &&& a lot, but I'm somehow opposed to it.
[10:09:14] <EvanR> uncurry comes after those
[10:09:15] <int-e> (just a tangent; I forgot about the former way to make \(a,b) -> (b,a) point-free)
[10:10:31] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[10:11:50] <otherwise> That is actually the next paragraph in LYAH, so maybe I should do that section before I spend too long trying to getting confused by (a-> b-> c)-> (a,b) ->c 
[10:12:42] <EvanR> please do
[10:14:37] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[10:14:40] <int-e> dsal: I used it a few times in AoC... there's a map (length &&& head) . group . sort, and a minimum &&& maximum, and a maximum &&& length. So... yeah that's not a lot of uses.
[10:14:53] <int-e> compared to something like `.` which I use all the time.
[10:15:18] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:15:53] *** Joins: drewr (~drew@user/drewr)
[10:15:53] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[10:16:09] <dsal> Yeah, I'm kind of aware of it, but end up making lambdas just because "arrows" sounds scary to me.
[10:16:11] <int-e> (arguably the group thing should be a Data.Map.fromListWith (+) . map (flip (,) 1) instead.
[10:16:29] *** Joins: Jing (~hedgehog@125.105.141.97)
[10:16:30] <dsal> I use TupleSections
[10:16:49] <int-e> they're too new :P
[10:17:10] <int-e> I know they exist but I usually don't think of them when I code.
[10:17:16] <dsal> > M.fromListWith (+) . fmap (,1) $ "haskell"
[10:17:17] <lambdabot>  fromList [('a',1),('e',1),('h',1),('k',1),('l',2),('s',1)]
[10:17:24] <dsal> That's me and the arrows.  :)
[10:17:58] <dsal> TupleSections likes to tell me to introduce it because it's like any other partial as far as I care.
[10:18:34] <EvanR> tupling stuff when it's not required by some API... it always feels like "I'm doing this to cut a corner" and then it ends up not paying off xD
[10:19:02] <dsal> Frequency analysis was pretty helpful inâ€¦ one of htose.
[10:19:17] <dsal> Day 8
[10:20:17] <int-e> Day 3
[10:20:41] <int-e> (though with only 2 values...)
[10:21:27] <int-e> Ah, day 08 indeed, but that one was easy enough to brute force as well.
[10:21:45] <dsal> It helped just a bit.
[10:23:49] <dsal> part1 = liftA2 (*) Î³ Îµ <$> getInput
[10:23:50] <dsal> part2 = liftA2 (*) oâ‚‚ coâ‚‚ <$> getInput
[10:23:59] <dsal> heh.  I don't even remember this one at all.
[10:24:18] <EvanR> fancy
[10:25:10] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[10:26:25] <EvanR> in a 3rd iteration of the o2 co2 day, I expressed it as splitting an IntSet at some power of two and picking a winning partition using whatever decider was passed in
[10:27:36] <int-e> I didn't even use `partition` that day, boo
[10:28:39] <EvanR> the partitions are way too simple for partition xD
[10:28:41] <dsal> I just used foldr
[10:29:21] <EvanR> I liked the imagery of having a block of numbers and fissioning it at some point xD
[10:29:46] <EvanR> seems more evocative
[10:30:53] <int-e> I used o2 i xs | z <- [xs | xs <- xs, xs !! i == 0], o <- [xs | xs <- xs, xs !! i == 1] = o2 (i+1) (if length z > length o then z else o)  (plus a base case)
[10:31:01] <int-e> and then I shamelessly copied that for co2
[10:32:22] <EvanR> for days puzzle I was this close to implementing Word139 before I came to my senses
[10:32:31] <EvanR> for today's puzzle
[10:33:21] <EvanR> it turned out much more elegant
[10:34:36] <dsal> I have a bitset that works with Integer.
[10:34:46] <dsal> (or anything else that has a Bits instance)
[10:36:31] *** Joins: Akiva (~Akiva@user/Akiva)
[10:39:42] <EvanR> yeah I was thinking it would need more performance
[10:39:53] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[10:42:49] <dsal> My bitset thing is super nice when you have a set of lowercase letters.
[10:43:04] <dsal> Oh, I used it on day 8 as well.
[10:55:25] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:56:15] *** Quits: ym (~ym@pool-96-253-29-94.prvdri.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:57:28] *** Joins: kadir (~kadir@88.251.52.166)
[11:03:36] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[11:03:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:07:33] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[11:07:33] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:09:20] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[11:09:32] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:13:39] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:13:49] *** Joins: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[11:15:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:16:30] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:17:16] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[11:18:30] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[11:18:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[11:18:40] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:19:02] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[11:19:14] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:22:09] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:33:09] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:35:57] *** Quits: conann (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:36:37] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[11:36:55] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[11:39:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[11:39:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:03:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:10:41] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:11:53] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:12:13] *** Joins: mario (~mario@31.147.205.13)
[12:18:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[12:19:17] *** Joins: conann (~bc8147f2@cerf.good1.com)
[12:19:36] *** Quits: alfonsox (~quassel@103.92.42.192) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:20:49] *** Joins: max22- (~maxime@2a01cb0883359800aecdaff2e9d1f24d.ipv6.abo.wanadoo.fr)
[12:22:39] *** Quits: mario (~mario@31.147.205.13) (Quit: Leaving)
[12:30:07] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[12:34:11] *** Joins: acidjnk (~acidjnk@p200300d0c7271e2604f35b95c1d32a12.dip0.t-ipconnect.de)
[12:34:31] *** Quits: mbuf (~Shakthi@110.225.250.18) (Quit: Leaving)
[12:34:45] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:35:33] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[12:37:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[12:37:42] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[12:38:01] *** Joins: coolnickname (uid531864@user/coolnickname)
[12:47:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:42] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:45] *** allbery_b is now known as geekosaur
[13:02:00] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[13:03:36] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:06:19] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Client Quit)
[13:06:25] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[13:07:28] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-236.elisa-laajakaista.fi)
[13:15:56] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:18:19] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Client Quit)
[13:25:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[13:25:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[13:25:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:25:28] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[13:25:39] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[13:25:45] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:26:53] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:28:50] *** Joins: notzmv (~zmv@user/notzmv)
[13:30:40] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[13:33:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[13:33:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[13:33:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[13:35:15] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 250 seconds)
[13:35:44] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Read error: Connection reset by peer)
[13:35:57] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:36:15] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[13:36:25] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:38:34] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[13:43:22] <Hecate> looks like this year's Haskell Santa is Ukrainian!
[13:43:43] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[13:50:56] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:53:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:54:07] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[13:54:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:56:02] *** Lord_of_Life_ is now known as Lord_of_Life
[13:58:06] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[13:58:10] <otherwise> everyone: is haskell your first programming language?
[13:58:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Remote host closed the connection)
[13:58:34] <janus> otherwise: what does 'first' mean?
[13:59:07] <otherwise> learned it before you learned your second programming language
[13:59:32] *** Joins: zer0bitz (~zer0bitz@196.244.192.59)
[14:00:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[14:01:29] <Hecate> hahaha
[14:01:35] <Hecate> otherwise: I would recommend against this
[14:02:20] <Hecate> Haskell has a strong stance regarding some things that doesn't make any sense if you don't know whence they come
[14:02:51] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[14:02:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[14:03:03] <Rembane> otherwise: Haskell is my fifth programming language perhaps? 
[14:03:27] <Rembane> Hecate: Do you have something particular (that Haskell stances against) in mind? 
[14:04:11] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[14:04:18] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:04:23] <Hecate> Rembane: sure, impure computations
[14:05:03] <Hecate> I don't think it properly percolates in the mind of the learner until they've experienced an impure language that fucks them over 
[14:05:12] <Rembane> Hecate: That's true. They are a strange beast in Haskell. I've gotten used to so many peculiar things that I don't find them strange anymore. 
[14:05:27] <Hecate> :)
[14:05:46] <Rembane> Hecate: I come to think of another one, I regularly miss laziness in Elixir. 
[14:06:34] <Hecate> Rembane: lazy computation pipelines or just having everything wrapped in a lambda ?
[14:06:38] <Hecate> ;-D
[14:07:07] <Hecate> (I had to do this in React, wrapping stuff in lambdas to delay evaluation)
[14:08:03] <geekosaur> I have a lot of programming languages under my belt
[14:08:11] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:08:29] <Rembane> Hecate: Lazy computation pipelines, start with an infinite list and end up with something reasonable in the end, usually by doing take or takeWhile as the last function in the pipeline.
[14:09:33] <Rembane> I do think though that it's easier to learn Haskell as the first language than the n:th language. I have absolutely nothing to back this up with other than Haskell is very different to most of the imperitave programming languages.
[14:10:56] <otherwise> geekosaur was haskell your first, or did you pick it up after some other languages?
[14:11:03] *** Joins: acode (~acode@151.65.31.181)
[14:11:16] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:11:25] <geekosaur> whne I started programming, Haskell didn't even exist :)
[14:11:26] <Hecate> Rembane: but don't we have Streams in Elixir?
[14:11:33] <Hecate> geekosaur: hahahah
[14:12:36] <Rembane> Hecate: We do have streams. They are amazing and makes the language so much better! :)
[14:12:58] <Rembane> geekosaur: What was your first programming language? :)
[14:13:20] <geekosaur> MS-BASIC, shortly followed by Z80 and 6502 assembly language
[14:14:39] <Rembane> Nice! 
[14:14:42] <geekosaur> then I discovered C in 1981
[14:15:16] <geekosaur> if you wonder how C got to be so pervasive, consider that for years it was pretty much the only option for many people
[14:15:43] <geekosaur> other languages existed but cost a lot of money for either the hardware they ran on or for the (commercial) compilers
[14:19:43] <Logio_> haskell was certainly easier to teach to people as their first language, rather than their nth
[14:19:47] *** Logio_ is now known as Logio
[14:22:57] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[14:23:20] <janus> geekosaur: did you ever work in PlankalkÃ¼l?
[14:23:57] <geekosaur> nope
[14:24:23] <geekosaur> I'm old but not quite *that* old :)
[14:24:50] <Rembane> Logio: What were the most common things to unlearn among the n:thers? 
[14:24:59] <janus> my dad is from 1948, i saw FreePascal on his Win7 desktop yesterday :O
[14:25:51] <Rembane> I've ever only seen Pascal in modern times, have never worked in it. It still fascinates me though.
[14:26:23] <janus> if i understand correctly the best thing about Pascal is how it had length-prefixed strings by default?
[14:26:43] <geekosaur> ohm it had more than that. it had actual types
[14:26:47] <Rembane> It had, and 1-indexed arrays and strings. 
[14:26:49] <Rembane> And ranges! 
[14:27:34] <geekosaur> I was at a computer workshop between junior and senior year of high scholl, where a few lucky kids got to work with Terac IVs running Pascal. I was so pissed that I wasn't one of them
[14:28:01] <janus> what is even a range? i imagine they weren't like the ranges recently added to c++
[14:28:22] <geekosaur> var foo : 1..10;
[14:28:39] <geekosaur> runtime checked
[14:28:52] <acode> You guys are making me feel old because I had Pascal in high school now
[14:29:02] <janus> it's a datatype that wraps two integers and then a syntax shorthand for it?
[14:30:59] <geekosaur> yes. more or less like Ix in Haskell
[14:31:03] *** Joins: alx741 (~alx741@157.100.93.160)
[14:31:51] *** Quits: acode (~acode@151.65.31.181) (Quit: Client closed)
[14:33:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:34:17] *** Quits: benin (~benin@183.82.27.57) (Quit: The Lounge - https://thelounge.chat)
[14:34:34] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[14:34:35] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[14:35:04] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[14:35:14] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[14:36:47] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.56)
[14:39:17] *** Quits: zer0bitz (~zer0bitz@196.244.192.59) (Ping timeout: 240 seconds)
[14:40:43] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:448c:d273:19c0:41c1)
[14:44:17] *** Quits: zer0bitz_ (~zer0bitz@196.244.192.56) (Ping timeout: 240 seconds)
[14:48:03] <Logio> Rembane: not having mutable variables and loops seemed to cause most problems for the people with more experience
[14:50:24] <Rembane> Logio: I can totally see why and sympatize with that. 
[14:52:22] *** Quits: conann (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[14:52:29] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 268 seconds)
[14:53:57] <Logio> yeah, not having any of your algorithm knowledge directly applicable can be really frustrating
[14:55:11] <Rembane> All the algorithms have a tendency to be: "Update the array at index i..."
[14:56:52] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.59)
[14:58:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[15:00:29] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:448c:d273:19c0:41c1) (Ping timeout: 268 seconds)
[15:02:55] *** Quits: zer0bitz_ (~zer0bitz@196.244.192.59) (Read error: Connection reset by peer)
[15:02:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 240 seconds)
[15:04:43] <janus> Numerous burrito tutorials (of varying quality) are to be found on the Internet. Some describe a burrito as the image of a crÃªpe under the action of the new-world functor. https://emorehouse.wescreates.wesleyan.edu/silliness/burrito_monads.pdf
[15:07:25] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[15:07:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:14:04] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 268 seconds)
[15:18:57] *** Joins: neceve (~quassel@2.26.93.228)
[15:19:38] *** Joins: ozzymcduff (~ozzymcduf@77.49.18.242.dsl.dyn.forthnet.gr)
[15:24:21] <otherwise> I'm gonna stick with my open face plain bagels for now...
[15:28:16] *** Quits: max22- (~maxime@2a01cb0883359800aecdaff2e9d1f24d.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[15:28:29] *** Joins: max22- (~maxime@2a01cb088335980027b3e3f3a18fa9f4.ipv6.abo.wanadoo.fr)
[15:40:12] *** Joins: xsperry (~xs@user/xsperry)
[15:42:15] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[15:45:17] *** Joins: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com)
[15:45:41] *** Quits: acidjnk (~acidjnk@p200300d0c7271e2604f35b95c1d32a12.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:47:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[15:49:12] *** Quits: slowtype- (~slowtyper@79.103.178.210.dsl.dyn.forthnet.gr) (Ping timeout: 268 seconds)
[15:51:37] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:51:59] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:52:08] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:53:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:00:15] *** Quits: ozzymcduff (~ozzymcduf@77.49.18.242.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[16:00:55] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[16:03:12] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:04:14] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 252 seconds)
[16:05:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b165:3b1b:f1f6:f4de)
[16:07:12] <otherwise> https://paste.tomsmeding.com/EEI1icbM
[16:07:17] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[16:07:25] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[16:09:24] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[16:09:56] <geekosaur> you seem to be missing a 'let' in the list comp version
[16:11:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:12:18] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:12:37] <geekosaur> the first one seems confused. "long" wants a list but is passed a number
[16:13:02] <otherwise> https://paste.tomsmeding.com/WnCO0OEp
[16:13:02] <geekosaur> and you can't use filter to limit a list, you probably want takeWhile
[16:13:19] <geekosaur> filter will just keep going looking for the predicate
[16:13:29] <otherwise> oh I switch from takeWhile to filter, I'll try takeWhile again
[16:14:11] <geekosaur> you have the same problem with that one, you are giving it a number but <- expects a list
[16:14:52] <geekosaur> basically this all looks very confused as to lists vs. items
[16:16:04] <geekosaur> you can't limit a list this way, you would need to associate an index with each element of the list and watch for the index to exceed your limit
[16:16:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:17:06] <geekosaur> in particular, once you get past the current type error you will discover that the rest of the list is already infinite so length will diverge
[16:17:16] <geekosaur> (== never return a value)
[16:18:59] <geekosaur> (well. it's not really "already infinite" because it is possible to stop if you do it right. but invoking length on it will *make* it infinite.)
[16:19:54] <geekosaur> it'll keep generating values as long as length consumes them, and length will consume until it sees end of list, so it just goes on forever
[16:20:35] <geekosaur> so you are thinking about this wrong
[16:20:51] *** Joins: syrkis (~syrkis@82.192.167.70)
[16:20:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[16:26:50] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[16:27:30] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:27:49] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:29:43] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[16:32:12] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:35:04] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:36:39] <geekosaur> otherwise, you might want to try putting type signatures on your functions. this will help you clarify where things go wrong, and possibly why (in particular, if your thought about a type at one point is different from the compiler's)
[16:36:45] *** Joins: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[16:37:09] <geekosaur> also, I'd go back to the first version instead of the list comprehension
[16:39:20] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:44:15] <otherwise> https://paste.tomsmeding.com/XcmhAEUr
[16:44:33] <otherwise> oh I didnt see your reponses after 4:44
[16:46:58] <otherwise> good point about length not being sensical to apply to an infinite list
[16:51:07] *** Joins: Rum (~bourbon@user/rum)
[16:53:38] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[16:55:08] <geekosaur> put a type signature on `long`. but really the first one should tell you: why does it make sense to say `10 > list`?
[16:55:45] <geekosaur> this is why I suggest you put type signatures on everything: you evidently have the wrong idea about what one of your types is
[16:57:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:57:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:57:28] *** Joins: wroathe (~wroathe@user/wroathe)
[16:57:39] <geekosaur> actually, you have worse than that. "But I'm trying to make length of the returned list be 10"
[16:58:02] <geekosaur> you're doing this at the wrong level: takeWhile can only see elements, not the length of the whole list
[16:58:15] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[16:58:56] <geekosaur> andyou cannot use length here because it has the same problem as the list comprehension version: it'll try to force an infinite list
[17:00:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[17:01:54] <otherwise> I think long has to be Bool, considering takeWhile :: (a -> Bool) -> [a] -> [a]
[17:01:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[17:02:13] *** Joins: jakalx (~jakalx@base.jakalx.net)
[17:02:25] <geekosaur> but you are successfully comparing it to an Integer
[17:02:45] <geekosaur> just changing the type does not turn an element of the list into the list
[17:03:17] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[17:04:00] <geekosaur> basically you are thinking about this wrong
[17:04:04] <int-e> don't forget about take and drop
[17:04:17] <geekosaur> I actually hinted at a way to do this earlier, although it's not the best way to do it
[17:04:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:04:28] <geekosaur> int-e, this started out as not wanting to use take or drop
[17:04:36] <int-e> ...but why
[17:04:49] <otherwise> just to include that in the function
[17:04:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 240 seconds)
[17:05:09] <geekosaur> so just use take or drop inside the function
[17:05:29] <int-e> I mean, you're interested in what happens with the first 11 elements of (the spine of) the list.
[17:06:33] <int-e> you're not interested in the elements which basically makes the functions that take a predicate (like takeWhile) a no-go unless you annotate the elements first, and that's a bit silly
[17:06:57] <geekosaur> that was what I hinted at earlier
[17:07:23] <otherwise> I was going to generalize it n elements. I think I just need to keep working through examples in textbooks and I'll come back to this after a little more exposure/experience with types
[17:07:26] <geekosaur> but I'm going through this because otherwise seems fairly confused about what's what
[17:07:27] <otherwise> :)
[17:07:35] <int-e> yeah sorry I'm too lazy to read history
[17:07:59] <int-e> it's easier to reevaluate the situation "on demand"
[17:08:03] <geekosaur> so I'm trying to guide them through working out what's wrong and why it won't work
[17:10:05] <otherwise> geekosaur: thank you, i'll slowly digest what you've explained to me. 
[17:10:26] <int-e> I also don't understand why "I want to generalize this to n" is a reason to discard `take` or `drop`.
[17:11:29] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[17:11:45] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[17:13:05] <geekosaur> it's not just types; you're thinking about the whole problem wrong, somehow
[17:13:19] <otherwise> int-e: as for why. i found it confusing why the way LYAH would use:  let listOfFuns = map (*) [0..]) was by (listOfFuns !! 4) 5
[17:13:28] <geekosaur> which is what has led you to the wrong types
[17:14:21] <int-e> > let listOfFuns = map (*) [0..]) in (listOfFuns !! 4) 5 == 20
[17:14:22] <lambdabot>  <hint>:1:31: error: parse error on input â€˜)â€™
[17:14:31] <int-e> > let listOfFuns = map (*) [0..] in (listOfFuns !! 4) 5 == 20
[17:14:33] <lambdabot>  True
[17:15:37] <otherwise> so I wanted to test my understanding by rewriting listOfFuns so that 4 was applied to each element of the list, and a list of n elements was returned.
[17:15:43] <int-e> Anyway, obviously I'm missing context. (Since that example has nothing obvious to do with testing for long lists.)
[17:15:56] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[17:16:42] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[17:16:46] <otherwise> which is good because now I know how confused I am about types, so I now know what to focus on.
[17:18:29] <geekosaur> again, this is worse than a confusion about types. "so that 4 was applied to each element of the list" has what exactly to do with selecting the 4th element (numbering from 0) of a list?
[17:18:57] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[17:19:01] <geekosaur> you are somehow confusing a list with its elements
[17:20:33] *** Quits: alx741 (~alx741@157.100.93.160) (Quit: alx741)
[17:22:20] *** Joins: alx741 (~alx741@157.100.93.160)
[17:22:40] <otherwise> I meant that 5 is applied to the 4th element, so that it becomes (4*) 5
[17:23:30] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[17:23:46] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[17:24:15] <int-e> "4th" counting from 0.
[17:24:21] <otherwise> yes
[17:24:53] <int-e> anyway, yes, that's how it evaluates to 20 in the end
[17:26:04] *** Joins: neurocyte0132889 (~neurocyte@IP-045010062145.dynamic.medianet-world.de)
[17:26:04] *** Quits: neurocyte0132889 (~neurocyte@IP-045010062145.dynamic.medianet-world.de) (Changing host)
[17:26:04] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:26:10] <geekosaur> also don't confuse 4th element with (4*)
[17:26:28] <geekosaur> might be instructive to replace (*) with something more complicated
[17:26:59] <geekosaur> or just change [0..] to something like [20,30..]
[17:27:37] <otherwise> now i'm just trying to replace !! with  take
[17:28:03] <geekosaur> just swap the parameters
[17:28:22] <geekosaur> list !! 4, vs. take 4 list (but note the fencepost error)
[17:31:05] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[17:31:13] <otherwise> > let listOfFuns = map (*) [0..] in take 4 (listOfFuns 3)
[17:31:14] <lambdabot>  error:
[17:31:14] <lambdabot>      â€¢ Couldn't match expected type â€˜t0 -> [a]â€™
[17:31:15] <lambdabot>                    with actual type â€˜[a0 -> a0]â€™
[17:31:18] <otherwise> :(
[17:32:01] <geekosaur> I am curious as to what made you think that would work
[17:32:16] <geekosaur> given (listOfFuns !! 4) 5
[17:32:20] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[17:32:21] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[17:32:59] <otherwise> > take 4 [1..]
[17:33:00] <lambdabot>  [1,2,3,4]
[17:33:24] <otherwise> replace [1..] with the list in question, listOfFuns
[17:33:27] <geekosaur> > take 4 (map (*) [0..])
[17:33:28] <lambdabot>  [<Integer -> Integer>,<Integer -> Integer>,<Integer -> Integer>,<Integer -> ...
[17:33:42] <int-e> > take 4 [0..]
[17:33:44] <lambdabot>  [0,1,2,3]
[17:37:07] <otherwise> this is exactly why I started to write a function to perform this, cause I couldnt make it work in prelude
[17:38:10] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:38:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[17:39:00] <geekosaur> `take 4 (listOfFuns 3)` is almost right. But not quite
[17:39:09] *** Joins: kayprish (~kayprish@188.120.102.122)
[17:39:10] <otherwise> "Couldn't match expected type â€˜(Int -> [a0] -> [a0]) -> t0 -> t1 -> t' " is the error message, which I am not sure how to translate into an english sentence
[17:39:50] <geekosaur> `(take 4 listOfFuns) 3` is closer, but still not quite right
[17:40:15] <geekosaur> Try figuring out why moving the parentheses helps, then see if that helps you figure out what else is wrong
[17:40:17] *** Quits: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 240 seconds)
[17:40:51] <otherwise> hmm
[17:41:35] <geekosaur> (both are the same error, in fact, and the same error I pointed up earlier)
[17:45:09] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b165:3b1b:f1f6:f4de) (Ping timeout: 268 seconds)
[17:46:02] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b165:3b1b:f1f6:f4de)
[17:46:21] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 256 seconds)
[17:46:27] <geekosaur> let's start with: what is the type of listOfFuns? (its name should tell you)
[17:47:00] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[17:47:46] <otherwise> listOfFuns :: (Num a, Enum a) => [a -> a]
[17:48:00] <otherwise> I was just reading :doc Enum
[17:48:28] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:48:33] <geekosaur> So, what do you think the type of `listOfFuns 3` should be, and why?
[17:48:47] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:49:13] <otherwise> oh god
[17:50:09] <otherwise>  a -> a
[17:50:16] <geekosaur> if you ask ghci it'll be gobbledygook. I want to hear what *you* think it should be
[17:50:23] <otherwise>  but it just gives an error so...
[17:50:32] *** Joins: Bartol (~Bartol@user/Bartol)
[17:50:34] <geekosaur> ok, why do you think that?
[17:50:44] *** Quits: Bartol (~Bartol@user/Bartol) (Client Quit)
[17:50:56] <otherwise> I think it is something like: function -> Int -> [a]
[17:51:19] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 268 seconds)
[17:51:43] <otherwise> where listOfFuns is a function that takes an input, a, then returns a list [a]
[17:51:58] <geekosaur> but it is not a function, it is a list of functions
[17:51:58] <otherwise> (Int is a)
[17:52:07] <otherwise> right...
[17:52:11] <geekosaur> not a function of lists
[17:52:33] <otherwise> so [a] -> a -> [a]
[17:52:40] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[17:53:01] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[17:53:01] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[17:53:38] <geekosaur> :t let listOfFuns = map (*) [0..] in listOfFuns 3
[17:53:39] <lambdabot> error:
[17:53:39] <lambdabot>     â€¢ Couldn't match expected type â€˜t0 -> tâ€™
[17:53:39] <lambdabot>                   with actual type â€˜[a0 -> a0]â€™
[17:53:59] <geekosaur> again, it is not a function, it is a list of functions
[17:54:25] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[17:54:38] <otherwise> okay, so [a->a] -> a -> [a]
[17:55:14] <geekosaur> you keep doing thatâ€¦ now it's a function on a list of functions. where does that function come from?
[17:55:28] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[17:55:54] <otherwise> I don't know what a0 means
[17:56:32] <geekosaur> you don't really care
[17:57:08] <geekosaur> it's not relevant. the compiler is using that because it has no idea either, because this function has cropped up out of nowhere and it has no idea what to do with it
[17:58:40] <otherwise> Okay, so the goal is to evaluate listOfNums with the function take, and understanding the type of listOfNums  and take is the path to salvation
[17:59:04] <geekosaur> that's part of it. as I said earlier
[17:59:27] <geekosaur> this is why moving the parentheses is part of the answer: it applies take to the list instead of to nonsense
[17:59:34] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[17:59:45] <geekosaur> but afterward you still try to apply a list to a number and it's still nonsense
[17:59:56] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[17:59:57] <geekosaur> becuase lists aren't functions
[18:00:16] <geekosaur> > [0] 0
[18:00:18] <lambdabot>  error:
[18:00:18] <lambdabot>      â€¢ Couldn't match expected type â€˜t0 -> tâ€™ with actual type â€˜[a0]â€™
[18:00:18] <lambdabot>      â€¢ The function â€˜[0]â€™ is applied to one argument,
[18:00:40] <geekosaur> % [0] 0
[18:00:40] <yahb> geekosaur: ; <interactive>:7:1: error:; * Could not deduce (IsList (t0 -> t1)); (maybe you haven't applied a function to enough arguments?); from the context: (IsList (t -> t1), Num (Item (t -> t1)), Num t); bound by the inferred type for `it':; forall {t} {t1}. (IsList (t -> t1), Num (Item (t -> t1)), Num t) => t1; at <interactive>:7:1-5; The type variable 
[18:00:47] <geekosaur> ugh
[18:01:10] <geekosaur> % :set -NoOverloadedLists
[18:01:10] <yahb> geekosaur: Some flags have not been recognized: -NoOverloadedLists
[18:01:26] <geekosaur> % :set -XNoOverloadedLists
[18:01:26] <yahb> geekosaur: 
[18:01:31] <geekosaur> % [0] 0
[18:01:31] <yahb> geekosaur: ; <interactive>:10:1: error:; * Couldn't match expected type: t0 -> t; with actual type: [a0]; * The function `[0]' is applied to one value argument, but its type `[a0]' has none; In the expression: [0] 0; In an equation for `it': it = [0] 0; * Relevant bindings include it :: t (bound at <interactive>:10:1)
[18:02:16] <geekosaur> "The function `[0]' is applied to one value argument, but its type `[a0]' has none"
[18:02:31] <geekosaur> which is GHC-ese for "a list is not a function"
[18:03:37] <geekosaur> so what are you actually trying to do with `listOfFuns 3` (or `(take 4 listOfFuns) 3`)?
[18:03:49] <geekosaur> what do you think it should do, as opposed to what it actually does?
[18:04:47] <otherwise> I'm just trying to understand how to use map (*) [1,2,3,4]
[18:04:49] <geekosaur> do not consult ghci for this
[18:05:37] <otherwise> so I figure if I can do (!!) to it, I should be able to do some other function to it, but I'm not yet able to get anything other than (!!) to work
[18:05:46] <geekosaur> but you must understand this to understand how to use it
[18:06:17] *** Quits: kayprish (~kayprish@188.120.102.122) (Read error: Connection reset by peer)
[18:06:29] <otherwise> maybe head is an easier one to do before take?
[18:06:47] <geekosaur> it will be because you will no longer have a list
[18:07:11] <geekosaur> but then you do not understand what `map (*) [0..]` does
[18:07:26] <geekosaur> you understand what `(*0)` does
[18:07:44] <otherwise> yes, it is partially applying * to 0
[18:07:52] <geekosaur> sigh
[18:07:58] <geekosaur> that was not the point
[18:08:09] <geekosaur> you are removing the list and have only its first element
[18:08:31] <geekosaur> at some point you will have to learn to work with the list
[18:09:22] <otherwise> yes, although I dont know how to make a function act on listOfNums
[18:09:47] <geekosaur> most list functions will work on it
[18:09:47] <otherwise> for example, It is not clear why listOfNums 3
[18:09:54] <otherwise> is not valid
[18:09:57] <geekosaur> it will not work as a function itself
[18:10:32] <int-e> A list of functions isn't itself a function.
[18:10:34] <geekosaur> because `listOfNums 3` says "`listOfNums 3` is a function. Apply that function to the value 3"
[18:10:36] <otherwise> I guess I dont know how to pass into the list to activate the function
[18:11:02] <geekosaur> but `listOfFuns` is not a function, it is a list of functions
[18:11:07] <int-e> Well, you need a way to operate on the list elements.
[18:11:11] <geekosaur> "the" function?
[18:11:23] <int-e> (Which are functions, so you can apply those to other things.)
[18:11:41] <otherwise> the, as in each element of the list is a function
[18:11:52] <geekosaur> but that is not "the" function
[18:12:04] <otherwise> i guess * is the function
[18:12:06] <geekosaur> it is "zero or more functions". so which if any do you want to use?
[18:12:20] <geekosaur> but it is not simply (*)
[18:12:39] <geekosaur> it is [(*0), (*1), (*2), ...]
[18:12:45] <geekosaur> which one if any do you want?
[18:12:56] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[18:13:19] <int-e> (technically they're (0*), (1*) etc.)
[18:13:20] <otherwise> okay, so I was able to do h = head listOfFuns
[18:13:29] <otherwise> then h 3
[18:13:32] <otherwise> which is 0
[18:13:35] <geekosaur> (this is why I brought up (*0) earlier; if you use head you get only the first of them)
[18:14:05] <otherwise> then t = listOfFuns works
[18:14:12] <otherwise>  but t 3 does not work
[18:14:25] <geekosaur> right, because you are applying a list to a number
[18:14:29] <int-e> because that's still a list, not a function
[18:14:30] <otherwise> oops
[18:14:36] <otherwise> I meant t = take 3 listOfFuns
[18:14:43] <geekosaur> which is still a list
[18:14:57] <int-e> same reason: that's still a list, not a function
[18:14:59] <geekosaur> you just know the list is no more than 3 elements instead of possibly infinite
[18:15:10] <otherwise> so i need to pattern match?
[18:15:35] <otherwise> and recursion?
[18:15:39] <geekosaur> so, your possibilities become: (a) ignore it; (b) pick one element/function to use; (c) use all of them ("folding")
[18:16:05] <geekosaur> (a) is trivial. (b) is what (!!) does. (c) you use foldl' or foldr
[18:16:06] <int-e> otherwise: you have seen the right highe-order function to use already
[18:16:11] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:84eb:b2e:7b61:4002)
[18:16:23] <int-e> (if you want to apply all those functions to a fixed value)
[18:16:34] <int-e> (which I *think* is your intent)
[18:16:44] <geekosaur> (monochrom moment: since you started with 0, you already know the answer to the fold :)
[18:16:51] <otherwise> i just want take to work
[18:17:10] <geekosaur> take itself is not a problem. you just seem to be confused about what it gave you
[18:17:11] <int-e> > product [0..-1] --monochrom follow-up
[18:17:12] <lambdabot>  error:
[18:17:12] <lambdabot>      â€¢ Variable not in scope: (..-) :: t0 -> t1 -> a
[18:17:12] <lambdabot>      â€¢ Perhaps you meant â€˜...â€™ (imported from Control.Lens)
[18:17:19] <int-e> > product [0.. -1]
[18:17:20] <lambdabot>  1
[18:17:24] <int-e> meh. that gets me way too often
[18:17:29] <geekosaur> heh
[18:17:58] <int-e> :t map
[18:17:59] <lambdabot> (a -> b) -> [a] -> [b]
[18:19:38] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[18:19:41] <otherwise> > map (3*) [1,3..9]
[18:19:43] <lambdabot>  [3,9,15,21,27]
[18:19:46] <otherwise> I get that
[18:20:13] <otherwise> I dont get partial application, then being able to use the list of functions after it is created
[18:20:40] <otherwise> It seems to be an impenetrable list!
[18:20:55] <int-e> `map` gets you "inside"
[18:21:11] <otherwise> ...
[18:21:24] <otherwise> map into to the maped partial list!?
[18:21:36] <int-e> it's not a partial list
[18:21:41] <int-e> it's a list of partial applications
[18:22:47] <int-e> So... maybe an exercise: Write a function f such that f (3*) and f (4*) evaluate to 3*4 and 4*5.
[18:23:16] <int-e> uhm
[18:23:21] <int-e> 3*4 and 4*4.
[18:23:36] <int-e> Sorry, I didn't mean to vary the second argument there.
[18:23:52] *** Joins: fef (~thedawn@user/thedawn)
[18:24:08] <otherwise> I get it
[18:24:37] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[18:24:37] <geekosaur> I think the confusion is somewhere else
[18:24:47] <geekosaur> What do you believe `take 4` does to a list?
[18:25:07] <int-e> :t take 4
[18:25:08] <lambdabot> [a] -> [a]
[18:25:48] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[18:26:12] <geekosaur> compare to
[18:26:17] <geekosaur> :t (!! 4)
[18:26:18] <lambdabot> [a] -> a
[18:26:40] <otherwise> I think it does (head list): head(tail list): head(tail (tail list)): head (tail (tail ( tail list) ) )
[18:27:10] <geekosaur> You keep talking as if after `take 4` the list contains one function, but in fact it contains four
[18:27:15] <otherwise> except I think that last term is in brackets
[18:27:25] <geekosaur> So to get a function, you must either choose one or fold over all of them
[18:31:55] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:33:07] <geekosaur> In particular, you cannot get the original (*) back, because you mapped it over a list of numbers, so you have a list [ (0*), (1*), (2*) ... ]
[18:33:23] <geekosaur> so now you must do something with that derived list
[18:35:57] <otherwise> https://paste.tomsmeding.com/JbXPMeaN
[18:36:12] <otherwise> although it is an infinite list...
[18:37:04] <geekosaur> then you did `take 4`, so now you have [ (0*), (1*), (2*), (3*) ]. so now you have to pick one, or fold over all of them
[18:37:33] <geekosaur> you can't simply apply it to 3 and expect something sane to happen, because it has no idea which if any of the functions you intended
[18:38:09] <otherwise> sounds like fold is a prerequisite
[18:38:13] <geekosaur> not only infinite but also overengineered
[18:38:28] <geekosaur> no, you could pick one of them instead of folding over all of them
[18:38:40] <geekosaur> it's not clear to me which you intend
[18:40:07] <otherwise> I was intending over all of them that I take
[18:40:33] <otherwise> I know to take a specific one I can just use !!
[18:40:36] <geekosaur> ok, so you want a fold
[18:40:52] <geekosaur> > foldr f z [a,b,c,d]
[18:40:53] <lambdabot>  f a (f b (f c (f d z)))
[18:41:17] <geekosaur> or a map, if you want the result for each element instead of for all elements combined
[18:41:26] <geekosaur> > map f [a,b,c,d]
[18:41:28] <lambdabot>  error:
[18:41:28] <lambdabot>      â€¢ Ambiguous type variable â€˜b0â€™ arising from a use of â€˜show_M880334822319...
[18:41:28] <lambdabot>        prevents the constraint â€˜(Show b0)â€™ from being solved.
[18:41:33] <geekosaur> ble
[18:41:41] <geekosaur> > map f [a,b,c,d] :: Expr
[18:41:43] <lambdabot>  error:
[18:41:43] <lambdabot>      â€¢ Couldn't match expected type â€˜Exprâ€™ with actual type â€˜[b0]â€™
[18:41:43] <lambdabot>      â€¢ In the expression: map f [a, b, c, ....] :: Expr
[18:41:53] <geekosaur> > map f [a,b,c,d :: Expr]
[18:41:54] <lambdabot>  error:
[18:41:54] <lambdabot>      â€¢ Ambiguous type variable â€˜b0â€™ arising from a use of â€˜show_M203210898510...
[18:41:54] <lambdabot>        prevents the constraint â€˜(Show b0)â€™ from being solved.
[18:41:58] <g> :t f
[18:41:59] <lambdabot> FromExpr a => a
[18:42:01] <geekosaur> wow, this is annoying
[18:42:03] <otherwise> okay, i have not yet used fold, so I'm reading up on LYAH
[18:42:32] <geekosaur> > map f [a,b,c,d :: Expr] :: [Expr]
[18:42:34] <lambdabot>  [f a,f b,f c,f d]
[18:42:41] <geekosaur> there we go
[18:45:55] <geekosaur> note that a fold will give you one result, whereas map will give you four
[18:46:01] <geekosaur> (in a list)
[18:46:18] <otherwise> oh, so I guess I want map...
[18:48:17] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:48:48] <otherwise> I need to take a break, this is too much failure in a row
[18:49:33] <geekosaur> I'm going to be leaving to go shopping shortly so someone else will probably have to pick it up from here
[18:49:35] <otherwise> I'll come back to this problem after I get some positive feedback from the compile for a while. 
[18:49:46] <otherwise> Thanks for the help geekosaur! :)
[19:02:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:02:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:02:07] *** Joins: wroathe (~wroathe@user/wroathe)
[19:02:12] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:02:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[19:03:29] *** Joins: Rum (~bourbon@user/rum)
[19:06:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 240 seconds)
[19:19:17] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[19:20:42] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[19:22:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[19:23:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[19:23:36] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:23:40] *** Joins: Everything (~Everythin@37.115.210.35)
[19:25:13] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:25:25] <phaazon> hey, anyone used to pandoc?
[19:25:29] <mjrosenb> Does anyone have emacs+hls set up? I think I've gotten it working, but it doesn't *do* anything
[19:25:57] <phaazon> Iâ€™m trying to use the WriterOption that allows to set a syntax highlighter, and when going from Markdown to HTML5, I get classes annotated everywhere in block codes, but no actual highlight (it looks like I have to provide a CSS?)
[19:26:01] <phaazon> anyone has an idea?
[19:27:45] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[19:28:00] *** Joins: goepsilongo (~goepsilon@2806:263:c404:8000:ec3a:2574:2f9:e2db)
[19:34:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:39:42] <lyxia> phaazon: you can try this to get some basic style out of pandoc/skylighting http://fixpt.de/blog/2017-12-03-hakyll-highlighting-themes.html or you can make your own or you can grab some themes from the web.
[19:41:46] *** Quits: otherwise (~otherwise@2601:602:880:90f0:144d:55a8:1e87:818) (Remote host closed the connection)
[19:43:16] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[19:47:49] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 240 seconds)
[19:50:52] <phaazon> lyxia: ah so you do have to write a CSSÂ file
[19:50:54] <phaazon> interesting, thanks
[19:51:04] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:56:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[19:57:41] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[20:00:49] *** Joins: zer0bitz_ (~zer0bitz@185.112.82.230)
[20:03:50] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 260 seconds)
[20:09:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:15:01] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:15:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:15:36] *** Joins: __monty__ (~toonn@user/toonn)
[20:18:06] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:18:16] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:24:37] *** Joins: stef204 (~stef204@user/stef204)
[20:25:03] *** nckxmas is now known as nckx
[20:27:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[20:28:13] *** Quits: stef204 (~stef204@user/stef204) (Client Quit)
[20:29:20] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[20:29:33] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[20:29:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[20:35:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:35:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:35:14] *** Joins: wroathe (~wroathe@user/wroathe)
[20:38:20] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:38:56] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[20:39:07] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[20:39:28] *** Joins: stef204 (~stef204@user/stef204)
[20:39:30] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[20:40:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:43:19] *** Joins: neceve (~quassel@2.26.93.228)
[20:44:12] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[20:44:50] <mjrosenb> hrm, it looks like lsp thinks it is capable of doing things, but it does (almost) nothing.
[20:46:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[20:50:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[20:51:48] *** Quits: syrkis (~syrkis@82.192.167.70) (Quit: Client closed)
[20:51:51] <mjrosenb> also, it looks like there isn't any zip/unzip variant for maps.
[20:52:41] <mjrosenb> I guess unzip m = (map fst m, map snd m) isn't going to be as performant as it could be, but better than going to a list?
[20:55:35] *** Joins: python476 (~user@88.160.31.174)
[20:55:56] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[20:57:20] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:58:57] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[21:01:07] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:05:46] <EvanR> mjrosenb, there's unionWith, unionWithKey, differenceWith, differenceWithKey, intersectionWith, intersectionWithKey
[21:05:47] *** Joins: ym (~ym@pool-96-253-29-94.prvdri.fios.verizon.net)
[21:06:27] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:06:31] <EvanR> unzip seems like a bunch of maps / mapWithKey
[21:06:47] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:09:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[21:10:55] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:11:02] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[21:12:01] *** Joins: econo (uid147250@user/econo)
[21:13:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[21:19:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Remote host closed the connection)
[21:24:19] *** Joins: whaletechno (~whaletech@user/whaletechno)
[21:24:45] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[21:25:00] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[21:25:41] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[21:28:17] *** Quits: zer0bitz_ (~zer0bitz@185.112.82.230) (Ping timeout: 240 seconds)
[21:28:34] *** Joins: zer0bitz (~zer0bitz@196.244.192.56)
[21:28:44] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[21:29:57] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[21:30:14] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[21:31:58] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[21:32:15] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[21:32:50] <iphy> I have an AST and a traversal module (https://github.com/iphydf/hs-cimple/blob/generalised-traverse/src/Language/Cimple/TraverseAst.hs#L113) which traverses the AST forwards. is there an elegant way to support both forward and reverse traversal here?
[21:34:01] <sshine> what's reverse traversal?
[21:36:24] <iphy> e.g. in a function I have statements. forward traversal is traversing the statements in order, reverse is traversing the statements in reverse order
[21:37:15] <sshine> ohhh, so sort of a left-to-right/right-to-left or pre-/post-order
[21:37:33] <iphy> this traversal looks at every AST node once. if I number the nodes 1..n then the reverse traversal should be giving me numbers n..1
[21:37:59] <EvanR> you can use a newtype wrapper to change the Traversable instance to one that goes backwards
[21:38:41] <sshine> I was also thinking of something like Down.
[21:39:05] <iphy> I'm (mostly) not using Traversable here, because my traversal is a bit more complicated with multiple types
[21:39:11] <sshine> right.
[21:39:17] <sshine> TraverseAst in your case.
[21:39:28] <iphy>             Accessor <$> recurse name <*> recurse params <*> recurse errors
[21:39:35] <iphy> for example ^
[21:39:42] <EvanR> (a type that contains other traversable types can be made traversable)
[21:40:04] <iphy> <*> should be reversed
[21:40:20] <iphy> instead of name, params, errors, I want to traverse errors, params, name
[21:40:29] <EvanR> yeah, so either way you want a second implementation of the traversal
[21:40:48] <iphy> so a copy of the TraverseAst module?
[21:41:12] <sshine> iphy, so... the least elegant way is to define an instance TraverseAst ... (SomeWrapper (Node ...) where ...
[21:41:27] <EvanR> yeah. Of course there are generic ways to traverse any generic both ways
[21:43:06] <sshine> iphy, with a copy of your current mapFileAst instance definition, but where you explicitly do { lastThingY <- recurse lastThingX; firstThingY <- recurse firstThingX; pure (AstThing firstThingY lastThingY) }
[21:43:17] <iphy> :\
[21:43:24] <sshine> iphy, (I'm just thinking loud, I'm sure you're trying to avoid this exact thing.)
[21:43:28] <iphy> yeah
[21:44:01] *** Joins: Guest|70 (~Guest|70@c-24-6-12-87.hsd1.ca.comcast.net)
[21:44:18] *** Joins: BrokenClutch (~pioneer@2804:d41:c2a7:d800:e627:b00b:2c62:134)
[21:44:37] <iphy> also, it would need to be named differently I think, because that only goes 1 level deep, no?
[21:44:43] <iphy> as soon as you recurse, it's forward again
[21:45:32] <iphy> https://github.com/iphydf/hs-cimple/blob/generalised-traverse/src/Language/Cimple/AST.hs#L18
[21:45:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:45:47] <iphy> all the "Node attr lexeme" in there would have to be SomeWrapper'd
[21:46:00] <sshine> ah, yes, you'd need to wrap sub-ast elements in SomeWrapper to continue that way.
[21:46:01] <iphy> an alternative is to pass a Direction flag around and decide based on that
[21:46:13] <iphy> sshine: ah right
[21:46:22] <iphy> recurse (SomeWrapper lastThingX) etc.
[21:46:58] <EvanR> when you start to put wrappers on all nodes and subnodes, you might want to step back and factor your original structure
[21:47:02] <iphy> (define recurse as SomeWrapper . mapFileAst
[21:47:03] <iphy> )
[21:47:43] <sshine> so if your AST has that style, I forgot what it's called... like barbies: https://hackage.haskell.org/package/barbies ... and what EvanR suggests ... then you're halfway sold on recursion-schemes, I guess. it's a trade-off: manually working with your AST becomes bothersome, but writing generic traversal becomes easier.
[21:47:58] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[21:48:11] <EvanR> like instead of data AST = A X | B Y AST | C Z AST Z, ADTF a = A X | B Y a | C Z a Z, something like this
[21:48:32] <EvanR> a bunch of these functors lets you do things in the betweens
[21:49:32] <sshine> is this HKD?
[21:49:53] <EvanR> not familiar with this jargon
[21:50:25] <iphy> ADTF?
[21:50:56] <geekosaur> HKD = higher kinded data
[21:51:24] <EvanR> functorized ADT, or whatever node type
[21:51:42] <sshine> yeah, but it could also be another typeclass, not necessarily Functor.
[21:51:52] <sshine> but I guess Functor is overwhelmingly useful here.
[21:52:08] <EvanR> Functor, among other things
[21:54:26] *** Quits: xff0x (~xff0x@2001:1a81:538d:1a00:8897:3a22:97f4:9e71) (Ping timeout: 260 seconds)
[21:55:10] *** Joins: xff0x (~xff0x@2001:1a81:538d:1a00:466f:9b53:869c:77ef)
[21:56:06] <iphy> barbies is kind of interesting
[21:58:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:00:05] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 252 seconds)
[22:01:00] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:03:23] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:03:40] <sshine> probably not the shortest path to reverse ast traversal
[22:03:57] *** Quits: td_ (~td@94.134.91.143) (Ping timeout: 240 seconds)
[22:05:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:05:53] *** Quits: Jing (~hedgehog@125.105.141.97) (Ping timeout: 256 seconds)
[22:06:03] *** Joins: td_ (~td@94.134.91.110)
[22:10:40] <mjrosenb> EvanR: well, zip is a bunch of mapWithKey; unzip is just a pair of maps :-)
[22:10:47] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[22:11:26] <EvanR> wouldn't zipping two maps be at least intersectionWithKey
[22:11:54] <EvanR> ah the Node type is parameterized by the lexeme... it could be more general probably
[22:12:59] <EvanR> a leaves everywhere, or f wrappers everywhere leads to things
[22:14:18] <EvanR> er, intersectionWith
[22:19:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[22:21:09] *** Joins: wroathe (~wroathe@user/wroathe)
[22:21:23] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[22:23:52] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:23:53] *** Quits: urdh (~urdh@user/urdh) (Ping timeout: 256 seconds)
[22:23:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 240 seconds)
[22:25:43] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[22:30:08] *** ym is now known as qwym
[22:34:58] <BrokenClutch> How you guys do callback systems?
[22:34:59] *** Quits: max22- (~maxime@2a01cb088335980027b3e3f3a18fa9f4.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:36:09] <EvanR> I'm not sure what you're actually asking, but fun fact, an IO Whatever value is basically a callback (with no arguments)
[22:36:29] <EvanR> Foo -> IO Bar is a callback with one arg
[22:36:43] <geekosaur> also, lazy evaluation means any function parameter is essentially a callback
[22:36:49] <iphy> sshine: shortest path isn't really important
[22:36:57] <iphy> I want to write less code and do more stuff
[22:37:14] <iphy> if it takes a refactoring of Node to become a HKD, that's ok
[22:39:28] *** Joins: nitrix (~nitrix@user/nitrix)
[22:39:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:40:00] *** Parts: nitrix (~nitrix@user/nitrix) ()
[22:41:17] <BrokenClutch> thanks, I'm one month in and I still can't get haskell well
[22:41:21] <monochrom> We guys generalize callback systems to "that's just another higher-order function" and we just write/use higher-order functions as appropriate.
[22:41:37] *** Joins: urdh (~urdh@user/urdh)
[22:42:01] <monochrom> https://www.slideshare.net/ScottWlaschin/fp-patterns-buildstufflt slide 13
[22:42:13] <monochrom> We just write/use functions.
[22:43:24] <BrokenClutch> but only the guys do that?
[22:43:58] <EvanR> before going over so many cool things
[22:44:02] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[22:44:09] <EvanR> BrokenClutch, what the hell is a callback system?
[22:44:11] <monochrom> You asked "you guys" so the answer in kind is "we guys".
[22:44:31] <EvanR> (in this case)
[22:45:08] *** Quits: cheater (~Username@user/cheater) (Quit: Killed (BlackJac (Requested by panasync)))
[22:45:59] <BrokenClutch> I just kept forwarding the joke, sorry
[22:46:12] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Ping timeout: 240 seconds)
[22:47:17] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:47:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[22:48:23] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:49:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[22:50:00] *** Joins: xkuru (~xkuru@user/xkuru)
[22:51:05] <EvanR> to give some system a thing to be used at a time of its choosing, yeah that could be a lazy value, a function, an IO action... all of which kind of just work... because they are all presented as the same thing in haskell
[22:52:19] *** Joins: cheater (~Username@user/cheater)
[22:52:55] *** Quits: deadmarshal (~deadmarsh@95.38.228.37) (Ping timeout: 256 seconds)
[22:53:47] <iphy> sshine: barbie makes things quite ugly
[22:53:59] <BrokenClutch> EvanR: got it. Thanks.
[22:54:20] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:54:39] *** Quits: qwym (~ym@pool-96-253-29-94.prvdri.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:55:08] <EvanR> iphy, an example factoring is to take your Attr node out of that type and make that one kind of wrapper that goes at any level
[22:55:19] <EvanR> which takes 1 parameter out
[22:55:27] <iphy> yeah
[22:55:36] <iphy> that's the plan
[22:56:46] <iphy>     | PreprocDefineMacro lexeme [Node attr lexeme] (Node attr lexeme)
[22:56:49] <iphy> does this become:
[22:56:58] <iphy>     | PreprocDefineMacro lexeme [f (Node attr lexeme)] (f (Node attr lexeme))
[22:57:11] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[22:57:16] <iphy> or does "f" go outside the list? or does it go both outside and inside the list?
[22:57:40] <iphy> (I'll get rid of attr later)
[22:57:59] <iphy> (also pretend I wrote "Node f attr lexeme")
[22:58:12] <EvanR> I'm thinking data Node lexeme a = ... PrepprocDefineMacro lexeme [a] a
[22:58:45] <EvanR> but I could be trippin
[22:58:56] <iphy> then what's the type of PrepprocDefineMacro lexeme [] (PrepprocDefineMacro lexeme [] Break)?
[22:59:20] <iphy> I mean, if it's "a", then the recursiveness of the datatype goes away, no?
[22:59:24] <EvanR> you mean, a Node with bare Nodes in it?
[22:59:29] <iphy> oh I see
[22:59:37] <EvanR> you'd need to make a newtype for that
[22:59:45] <EvanR> to do recursion
[23:00:07] <EvanR> which is why I've been renaming things to WhateverF
[23:00:15] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[23:02:15] <iphy> https://hackage.haskell.org/package/hypertypes#hkd-for-nested-structures
[23:02:53] <iphy> EvanR: interesting
[23:02:54] <EvanR> oh wow did not know recursion schemes did that 
[23:03:32] *** Joins: max22- (~maxime@2a01cb088335980093d703d768803864.ipv6.abo.wanadoo.fr)
[23:04:02] <EvanR> hypertypes, damn
[23:07:00] *** Parts: kadir (~kadir@88.251.52.166) (goodnight)
[23:08:10] *** Joins: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[23:09:34] *** Quits: xff0x (~xff0x@2001:1a81:538d:1a00:466f:9b53:869c:77ef) (Ping timeout: 260 seconds)
[23:10:23] *** Joins: xff0x (~xff0x@2001:1a81:538d:1a00:d7e1:e1de:38a1:c28f)
[23:12:06] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:12:21] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[23:15:06] *** Joins: aeka` (~aeka@pool-100-4-208-71.albyny.fios.verizon.net)
[23:15:36] <iphy> https://www.irccloud.com/pastebin/oCyEMH6C/
[23:16:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[23:16:17] <iphy> I did this now, but I can't see how to use it without constructing huge types
[23:16:33] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[23:17:37] *** Quits: aeka (~aeka@2606:6080:1001:d:c59c:6e9a:3115:6f2f) (Ping timeout: 240 seconds)
[23:20:37] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Ping timeout: 240 seconds)
[23:20:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[23:20:59] *** Quits: goepsilongo (~goepsilon@2806:263:c404:8000:ec3a:2574:2f9:e2db) (Quit: Textual IRC Client: www.textualapp.com)
[23:21:50] *** Quits: aeka` (~aeka@pool-100-4-208-71.albyny.fios.verizon.net) (Read error: Connection reset by peer)
[23:22:23] <EvanR> well at least you get map and fold for free
[23:22:36] <EvanR> and maybe other things in recursion schemes
[23:23:22] <EvanR> I vaguely recall being able to do traversals and handle particular node types without much code
[23:24:13] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:25:12] <EvanR> the hypertypes page claims recursion-schemes can't deal with a mutually recursive version of this with e.g. 2 types, but I'm not sure if that's the library of the whole idea can't do it
[23:25:24] <EvanR> or*
[23:26:17] *** Joins: cosimone (~user@93-47-231-248.ip115.fastwebnet.it)
[23:26:28] <iphy> EvanR: "at least", but how do I write a parser?
[23:27:20] <iphy> data ExprF a = Add a a | Sub a a | Int Int
[23:27:56] <iphy> Add (Sub (Int 3) (Int 2)) (Int 1)
[23:29:45] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[23:29:55] *** Joins: aeka (~aeka@user/hiruji)
[23:30:03] <EvanR> what's the goal type for the parser, just Expr, or some attributes stuffs around each node
[23:30:30] <iphy> the parser doesn't add attributes, that's for later passes to add
[23:30:51] <iphy> right now the parser never produces the Attr node
[23:31:20] <EvanR> well the bare Expr is probably = Fix ExprF
[23:31:48] <EvanR> then Int 5 :: Expr
[23:34:39] <EvanR> erm
[23:35:17] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:35:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:35:41] <EvanR> Fix (Add e1 e2) :: Expr, something like that
[23:36:37] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 240 seconds)
[23:37:19] *** Joins: aeka (~aeka@user/hiruji)
[23:37:24] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:48] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[23:38:49] <EvanR> newtype Fix f = Fix { unFix :: f (Fix f) }
[23:39:39] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:40:00] <EvanR> type Expr = Fix ExprF
[23:40:13] <EvanR> Fix (Int 9) :: Expr
[23:40:17] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[23:40:25] <iphy> so what would these look like? https://github.com/iphydf/hs-cimple/blob/generalised-traverse/src/Language/Cimple/Parser.y#L306
[23:40:39] <EvanR> Fix (Add that that) :: Expr
[23:40:58] <iphy> but Fix is of type Fix f, not Expr?
[23:41:36] <EvanR> which are equal, type synonyms
[23:41:40] *** Joins: Pickchea (~private@user/pickchea)
[23:41:40] <geekosaur> above said Expr was itself Fix something
[23:41:53] <iphy> ah right, Expr
[23:42:21] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[23:42:41] <iphy> ok, so in the parser, what used to be "Add (Sub a b)" is now "Fix (Add (Fix (Sub a b)))"?
[23:43:05] <EvanR> if a parser really produces that... yeah
[23:43:30] <EvanR> basically a Fix newtype wrapper on any concrete construction
[23:44:08] <EvanR> Fix is used in libraries, but if you have other stuff going on with the `a' you could use your own newtype
[23:45:18] <iphy> ok, looks like pattern matching is going to be a pain
[23:45:36] <EvanR> which is why you want generic operations 
[23:46:15] <iphy> with HKD, I can use a type family to erase Identity from the type and make pattern matching nice
[23:46:21] <EvanR> or if it's just singling out 1 kind of node, it's just putting a Fix there too
[23:46:57] <iphy> https://github.com/TokTok/hs-tokstyle/blob/master/src/Tokstyle/Linter/LoggerCalls.hs#L23
[23:47:17] <iphy> Fix (FunctionCall (Fix (LiteralExpr _ (L _ _ "LOGGER_ASSERT"))) (_:_:Fix (LiteralExpr String) _:_) 
[23:47:42] <EvanR> yeah
[23:47:59] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:48:00] <EvanR> and if you have additional wrappers in there, those are there 
[23:49:37] <EvanR> something something lens?
[23:50:39] <EvanR> FunctionCall prism
[23:52:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:52:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:52:59] *** Joins: wroathe (~wroathe@user/wroathe)
[23:56:31] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[23:57:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
