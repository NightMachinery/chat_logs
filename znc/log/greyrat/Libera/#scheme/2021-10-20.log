[00:04:05] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a8f8:8546:7620:4477)
[00:04:05] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a8f8:8546:7620:4477) (Changing host)
[00:04:05] *** Joins: skapata (~Skapata@user/skapata)
[00:15:32] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:16:47] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[00:20:05] <jcowan> no problem; determining what low-level system we have will help determine what is and is not portable
[00:20:41] <jcowan> for example, given syntax-case, we can do keyword lambdas portably
[00:21:22] <jcowan> It's possible that er will be sufficient, but syntax-rules is too limited
[00:25:04] *** Joins: klovett (~klovett@mobile-166-137-179-141.mycingular.net)
[00:25:42] <gwatt> fwiw, you can implement er on top of syntax-case
[00:27:36] *** Quits: klovett_ (~klovett@mobile-166-137-179-141.mycingular.net) (Ping timeout: 245 seconds)
[00:29:36] <gwatt> As much as I like syntax-case as a generalization of syntax-rules, it may make sense to only mandate explicit-renaming and provide a compatibility library for syntax-case systems
[00:31:19] <gwatt> and by mandate, I mean only vote for explicit-renaming
[00:32:39] <Zipheir> syntax-case is already near-ubiquitous among the big Scheme implementations, though.
[00:32:48] <Zipheir> CHICKEN being a notable hold-out.
[00:34:22] *** Joins: klovett_ (~klovett@mobile-166-137-179-141.mycingular.net)
[00:36:01] <gwatt> I think mit-scheme doesn't have syntax-case.
[00:36:14] *** Quits: klovett (~klovett@mobile-166-137-179-141.mycingular.net) (Ping timeout: 260 seconds)
[00:48:58] *** Quits: xgqt (~user@static62133140007.ostnet.pl) (Remote host closed the connection)
[00:50:05] *** Joins: libfud (~libfud@c-73-76-134-161.hsd1.tx.comcast.net)
[00:57:19] *** Joins: xgqtd (~user@static62133140007.ostnet.pl)
[01:21:24] *** Quits: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru) (Quit: Client closed)
[01:49:58] *** Joins: pull (~tcz@91.150.165.88)
[02:03:11] <jcowan> gwatt: You can't.  You can implement a variant of er and R6RS syntax-case on a single substrate.
[02:04:03] *** Quits: klovett_ (~klovett@mobile-166-137-179-141.mycingular.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:06:29] <jcowan> see srfi 211
[02:20:02] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[02:21:14] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[02:27:40] *** Quits: LeoNerd (~leo@genoa.dictatorshipcake.co.uk) (Ping timeout: 268 seconds)
[02:29:36] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[02:33:59] *** Joins: madage (~madage@user/madage)
[02:35:26] <gwatt> jcowan: I'm not seeing anything in srfi-211 that indicates you can't implement explicit-renaming on top of syntax-case
[02:40:27] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[02:42:04] *** Joins: madage (~madage@user/madage)
[02:42:51] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[02:49:21] *** Joins: klovett (~klovett@c-73-231-102-38.hsd1.ca.comcast.net)
[02:54:47] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[02:57:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[02:57:27] *** Joins: LeoNerd (~leo@genoa.dictatorshipcake.co.uk)
[03:03:50] *** Joins: madage (~madage@user/madage)
[03:06:47] *** Joins: hexology (~hexology@user/hexology)
[03:11:37] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[03:24:07] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[03:32:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[03:32:43] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[03:39:48] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:46:50] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[03:50:45] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[04:27:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[04:29:07] *** Joins: aeth (~aeth@user/aeth)
[04:42:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:42:59] *** Quits: jao (~jao@45.152.183.53) (Ping timeout: 264 seconds)
[04:44:27] *** Joins: jao (~jao@45.152.183.61)
[04:56:21] *** Quits: jao (~jao@45.152.183.61) (Ping timeout: 245 seconds)
[04:58:26] *** Joins: jao (~jao@86.106.136.218)
[05:04:38] *** Quits: jao (~jao@86.106.136.218) (Ping timeout: 258 seconds)
[05:06:26] *** Joins: jao (~jao@194.99.104.13)
[05:17:10] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[05:18:03] *** Joins: pony (~ed@smol/hors)
[05:22:28] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[05:30:32] *** Quits: klovett (~klovett@c-73-231-102-38.hsd1.ca.comcast.net) (Quit: ZZZzzzâ€¦)
[05:31:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[05:31:41] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[05:33:21] *** Joins: aeth (~aeth@user/aeth)
[06:08:00] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:6145:a32a:3453:19d9)
[06:10:54] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:610d:6c0b:ddcc:948) (Ping timeout: 268 seconds)
[06:30:05] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[06:31:56] *** Joins: evdubs_ (~evdubs@cpe-66-8-236-219.hawaii.res.rr.com)
[06:34:20] *** Quits: evdubs (~evdubs@cpe-66-8-236-219.hawaii.res.rr.com) (Ping timeout: 258 seconds)
[06:36:04] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[06:46:32] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[06:56:09] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[07:00:35] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:16:31] <mdhughes> voted. Looking at results, seems most people are reasonably sane. Nobody likes infix.
[07:18:52] <mdhughes> SRFI 219 is ugly. An extra lambda never hurt anyone. But then, I also write (define foo (lambda... like Dybvig kind of a lot.
[07:46:24] *** Quits: jao (~jao@194.99.104.13) (Ping timeout: 258 seconds)
[07:59:37] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[08:00:12] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:11:16] *** Quits: fadein (~Erik@c-24-10-167-68.hsd1.ut.comcast.net) (Quit: leaving)
[08:11:56] *** Joins: fadein (~Erik@c-24-10-167-68.hsd1.ut.comcast.net)
[08:20:30] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[08:36:09] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[09:11:02] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[09:31:35] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 264 seconds)
[09:33:59] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[10:08:20] *** Joins: pony (~ed@smol/hors)
[10:17:07] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[10:19:24] *** Joins: pony (~ed@smol/hors)
[10:19:38] *** Quits: pony (~ed@smol/hors) (Client Quit)
[10:22:05] *** Joins: pony (~ed@smol/hors)
[10:25:46] *** Quits: pony (~ed@smol/hors) (Client Quit)
[10:26:19] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:ede1:773f:e980:d67a)
[10:26:24] *** Joins: pony (~ed@smol/hors)
[10:26:42] <dpk> gwatt: the issue, afaik, is that for explicit renaming, symbols are identifiers, whereas in syntax-case, syntax objects are identifiers
[10:28:59] <sjamaan> ISTR it works the other way around though: implementing syntax-case on top of er macros
[10:29:58] <dpk> no, there you have the issue that ER only gives you two contexts to inject identifiers into/grab them from (either using rename or a bare symbol), whereas syntax-case lets you do it at any timestamp for which you already have another marked syntax-object
[10:30:22] *** Joins: some02_ (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[10:30:34] *** Joins: ski_ (~ski@remote12.chalmers.se)
[10:30:36] *** Joins: elflng_ (~elflng@5.28.137.182)
[10:30:58] <dpk> Chibi's implementation has to use the 'other' low-level macro system in Chibi, syntactic closures, to work around this. and even then, MNW told me it has some limitations
[10:31:13] *** Joins: nckx_ (~nckx@tobias.gr)
[10:35:55] <dpk> oh wow, the ballot picked up a lot of votes overnight
[10:37:00] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Bye)
[10:39:50] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: cky (cky@meredith.poweredbytaylor.com) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: nckx (~nckx@tobias.gr) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e9fe:72f5:e93b:115a) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Menchers (Menchers@user/menchers) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: fizzie (irc@selene.zem.fi) (Ping timeout: 260 seconds)
[10:39:51] *** nckx_ is now known as nckx
[10:40:21] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[10:40:42] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252)
[10:40:52] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252) (Read error: Connection reset by peer)
[10:41:20] *** Joins: cky (cky@meredith.poweredbytaylor.com)
[10:43:07] *** Joins: fizzie (irc@selene.zem.fi)
[10:43:09] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[10:44:38] *** Joins: Menchers (Menchers@user/menchers)
[10:46:56] <ecraven> how long is it still open?
[10:47:22] <dpk> till the start of February, says jcowan 
[10:47:34] <sjamaan> What's being voted on?
[10:47:39] <sjamaan> (sorry for my ignorance)
[10:47:42] <dpk> see https://tinyurl.com/yellow-ballot
[10:52:58] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252)
[10:53:28] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252) (Remote host closed the connection)
[11:02:56] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[11:15:09] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[11:15:22] *** Joins: pony (~ed@smol/hors)
[11:39:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:42:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:54:30] *** Joins: kayprish (~kayprish@46.240.130.158)
[12:21:17] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:6145:a32a:3453:19d9) (Read error: Connection reset by peer)
[12:25:10] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:6d:8ef6:2dfc:e13f)
[12:31:50] *** Joins: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru)
[12:38:59] *** Quits: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[12:43:35] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[12:58:31] *** Joins: seninha (~seninha@user/seninha)
[13:05:01] *** Parts: some02_ (~cat@h-98-128-128-173.A351.priv.bahnhof.se) ()
[13:14:28] *** Joins: sudden (~cat@user/sudden)
[13:45:17] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[13:55:53] *** Joins: robin_ (~robin@user/terpri)
[13:56:00] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[13:56:06] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252)
[13:56:16] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252) (Remote host closed the connection)
[13:57:55] *** robin_ is now known as robin
[13:58:27] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[14:09:39] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[14:18:33] *** Quits: kayprish (~kayprish@46.240.130.158) (Read error: Connection reset by peer)
[14:22:05] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[14:44:35] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[14:45:16] *** Joins: pony (~ed@smol/hors)
[15:02:47] <gwatt> dpk: you can walk the syntax tree and wrap symbols
[15:03:29] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[15:03:55] *** Joins: mishugana (~mishugana@user/mishugana)
[15:04:08] <mishugana> Hello folks, aspiring Schemer here :D
[15:05:48] <mishugana> I'm building gerbil-scheme even as we speak, and I wanted to bounce some ideas about learning Scheme in general. I'm a complete beginner to Scheme, and I found Kent Dybvig's book, "The Scheme Programming Language" (2009). It seems to be more in line with my style of learning (I DON'T like Realm of Racket, Land of Lisp, HtDP et al, no offence intended). Just wondering what you think about this choice, 
[15:05:54] <mishugana> and if this should cover bases for all Scheme implementations at a basic level? 
[15:06:18] <mishugana> (If it helps, I have a background in Common Lisp) So suggestions and reviews of the book are kindly solicited :)
[15:06:48] <mishugana> Note that the Gerbil site does have some tutorials, but I thought I might learn Scheme from scratch in any case.
[15:08:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d443:ec89:31b2:d95b)
[15:08:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d443:ec89:31b2:d95b) (Changing host)
[15:08:13] *** Joins: skapata (~Skapata@user/skapata)
[15:09:39] <ecraven> Scheme is a small language, if you just read through R7RS once, you'll know the most basic common ground.
[15:09:51] <ecraven> Then, on top of that, you'll need to find out what your implementation supports anyway ;)
[15:10:00] <gwatt> mishugana: hey. One thing to know is that Dybvig's "The Scheme Programming Language" is about R6RS which I don't think gerbil supports. If you really want to use TSPL, I would recommend an R6RS scheme, like chez, which Dybvig also wrote.
[15:12:48] <lloda> there are several versions of Dybvig's book online, i think tspl3 was before r6rs. I like it as a reference more than as a learning book tbh
[15:13:12] <ecraven> tspl4 is online, as is the Chez Scheme Users Guide (csug)
[15:14:59] <mishugana> gwatt: Oh! :(
[15:15:24] <gwatt> lloda: ah you are right. I've use tspl4 for so long I forgot that tspl3 predates r6rs.
[15:15:36] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[15:15:44] <mishugana> I am sort of decide no using gerbil for now - any suggestions for which books I could use for that?
[15:15:51] <mishugana> decided*
[15:16:46] *** Quits: xgqtd (~user@static62133140007.ostnet.pl) (Ping timeout: 245 seconds)
[15:19:48] <mishugana> So I saw that gerbil supports r7rs ... is that not a superset of r6rs? (Sorry, totally new to Scheme-world)
[15:20:19] *** Joins: bae (~ben@49.145.160.200)
[15:21:03] <lloda> it's not a superset
[15:21:26] <ecraven> it is more of an improper subset
[15:21:31] <mishugana> ecraven: Is this https://github.com/johnwcowan/r7rs-spec/blob/errata/spec/r7rs.pdf what you're referring to?
[15:21:40] <mishugana> Whoa..
[15:21:40] <bae> I'm having a problem with a function, here's a pastebin...the problem is in the first function, but I included helper functions:
[15:21:51] <bae> https://pastebin.com/DY2cNPBZ
[15:21:56] <ecraven> mishugana: this: https://github.com/johnwcowan/r7rs-spec/blob/errata/spec/r7rs.pdf
[15:21:56] <lloda> if you're new to scheme this doesn't really matter. Just pick an impl an learn from that.
[15:22:02] <mishugana> So the numbering schemes are not cumulative, huh? Interesting.
[15:22:07] <ecraven> it's not long, just skim through it to see what kind of functions are available
[15:22:13] <ecraven> r6rs to r7rs was sort of a schism
[15:22:13] <gwatt> mishugana: R7RS is for/by people who didn't much care for R6RS.
[15:22:18] <ecraven> normally they are mostly compatible
[15:22:27] <bae> The problem seems to be in the let expression
[15:22:32] <mishugana> lloda: I know, but I sort of like the way gerbil comes across, can't explain it :)
[15:22:42] <mishugana> gwatt: Ah, okay. I see!
[15:22:46] <ecraven> gerbil is nice, and it is fully r7rs-compatible, as far as I know
[15:22:54] <mishugana> ecraven: Thank you, will check that out.
[15:23:48] <mishugana> Hmmm, the report doesn't look too big, but the format (as expected, of course) is very report like. 
[15:24:15] <mishugana> Is there some sort of base language feature set that (almost) all major implementations support and that has a corresponding book in the traditional tutorial form?
[15:24:41] <bae> Scheme is getting the output from the 'if' inside the 'let' as a function, so if I say '(gertrude 'rose)' I get an error saying that "(is a rose) is a faulty function"
[15:25:03] <mishugana> So, say I still use TSPL, would most parts still be applicable?
[15:25:15] <mishugana> I'm assuming that the conditions and errors part wouldn't be?
[15:25:26] <mishugana> (which is interesting coming from a CL perspective)
[15:25:32] <bae> https://pastebin.com/DY2cNPBZ
[15:26:05] <gwatt> bae: does `se` return a procedure? You're applying `clause`, which is returned from `se` as if it's a procedure but I'm not sure that's right
[15:26:20] <bae> se returns a flat list
[15:27:20] <bae> so (se 'dog '(fish cat) 'chicken) would return (dog fish cat chicken)
[15:28:10] <gwatt> In line 5 of your paste, you apply `clause` to `wd`, even though clause is returned from `se` and therefore a list
[15:29:07] <mishugana> Okay, now that I see some difference between r6rs and r7rs, I am starting to think I like the conditions system that r6rs supports. Supposing I went with Chez, would there be anything I'd be missing out from gerbil, say?
[15:29:43] <bae> the evaluation never gets that far. The problem is in the definition of clause
[15:30:17] <gwatt> mishugana: I think if you're starting out to learn scheme, the best thing to do is just pick a scheme implementation and use that until you're comfortable
[15:30:17] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[15:30:43] <mishugana> gwatt: Hmmm, that makes perfect sense... logically speaking.
[15:31:10] <gwatt> if gerbil, chez, or any other scheme has something that you immediately think you'll need I would just pick that scheme and run with it.
[15:31:27] <ecraven> in the end, most of the larger implementations are fine
[15:31:41] <ecraven> all of them are "fast enough", all of them have FFIs, all of them have some sort of REPL and good manuals
[15:31:46] <bae> clause (is supposed to be) a function per line 2.
[15:31:52] <ecraven> so just pick the one that looks like it best supports what you want to do right now
[15:32:07] <mishugana> gwatt: ecraven: Thank you. I think I'll follow your collective advice and start off with Chez.
[15:32:35] <mishugana> You're right - right now I don't really have any specific ideas/features that I'm looking at.
[15:32:40] <bae> gwatt clause is applied to variable wd and the output of clause goes to se
[15:33:29] <mishugana> Okay, thanks folks! So given that, are there any other books I can have a look at (Chez) apart from TSPL?
[15:33:45] <bae> the desired output would be (gertrude 'rose)-->(a rose is a rose is a rose)
[15:33:51] <mishugana> I want to have a few options that I can switch around since TSPl does indeed look a reference book in parts
[15:34:44] <bae> or (gertrude 'dog)-->(a dog is a dog is a dog)
[15:36:20] <bae> There's something wrong with my let. Is it legal to use an 'if' inside a 'let'?
[15:36:34] <gwatt> bae: is that pastebin correct? when I load it into scheme there aren't enough parentheses to actually finish `se`
[15:37:41] <bae> I might have pasted it wrong. I didn't write se. It works. I'm just using it. It was written by Brian Harvey
[15:38:04] <bae> And it's way over my head.
[15:38:42] <bae> But I know how it works, as far as inputs-->outputs
[15:39:23] <bae> So the problem is in the syntax of my let statement, I'm 99% sure.
[15:40:02] <bae> Ohhh, by the way, 'first' is also a function.
[15:40:37] <bae> It just gives the first member of a word or a list
[15:41:07] <bae> so (first 'dog) is 'd'
[15:41:27] <bae> (first (dog chicken)) is 'dog'
[15:42:35] <bae> so (vowel? (first 'dog) would be #f
[15:43:07] <bae> (vowel? (first 'agave)) would be #t
[15:48:41] <bae> By the way, after spending a fair amount of time with Scheme, I have to say that McCarthy should not have allowed the students to talk him out of implementing M-expressions.
[15:48:56] <ecraven> I humbly disagree ;)
[15:49:47] <mishugana> I think the problem with bae's examples is that it uses a bunch of primitives that Brian Harvey implemented to make Scheme very much like LOGO - http://people.eecs.berkeley.edu/~bh/ssch27/appendix-running.html
[15:49:47] <bae> Lisp is supposed to have such easy syntax, but when I have difficulty, it is invariably a syntactic issue.
[15:50:09] <ecraven> what kind of problems? do you use an editor that shows you matching parentheses?
[15:50:17] <mishugana> So according to this: http://people.eecs.berkeley.edu/~bh/ssch7/variables.html (which contains the exercises, 7.1), "se" is simply the LOGO "sentence".. hahaha
[15:50:29] <bae> ecraven yes, I use a version of Emacs
[15:50:45] <mishugana> I enjoyed Harvey's LOGO books, but this is sort of hilarious.
[15:51:01] <mishugana> I find M-expressions very ugly.
[15:51:13] <ecraven> bae: do you use something like paredit? that eliminates quite a few possible problems.
[15:51:17] <bae> mishugana if it's so hilarious, tell me what's wrong with my code.
[15:51:35] <ecraven> though of course, writing things like (let (foo bar) foo) is a problem that won't be caught by paredit.
[15:51:53] <ecraven> bae: gwatt told you, se doesn't have enough parentheses
[15:51:57] <bae> ecraven I didn't write that. 
[15:52:14] <bae> Nope ecraven, you're wrong.
[15:52:21] <mishugana> bae: No, no, I'm not laughing at your code. I'm laughing at the fact that Brian Harvey decided to turn Scheme into LOGO-lite. :D
[15:52:21] <bae> se works fine.
[15:52:49] <ecraven> I just put your paste into emacs and auto-indented it. se is a let that contains two definitions, but no actual code
[15:52:57] <bae> mishugana I need help, not snobbery.
[15:52:58] <gwatt> bae: there doesn't appear to be anything wrong with your definition of gertrude, and the rest of the code you pasted is definitely wrong, or at least pasted incorrectly.
[15:53:00] <ecraven> also, you have paranoid-append twice
[15:53:18] <mishugana> bae: Chill down, man. I'm not even talking about you.
[15:53:41] <ecraven> why does se bind all names to themselves?
[15:54:56] <bae> No, ecraven, I get an error. I'll go and run it again, and give you the exact error.
[15:55:18] <ecraven> please do. and can you try to paste `se' again? that is definitely not a working definition in your first paste
[15:55:55] <ecraven> also, (member? letter '(aeiou)) will check letter against the one symbol 'aeiou, not against each letter separately (might be a pastebin issue too)
[15:56:44] <ecraven> depending on how `first' and `wd' are defined, you'll run into that too, traditionally `first' is the same as `car', which will give you the first element of a pair, not the first letter of a symbol.
[15:56:52] <bae> (gertrude 'rose)
[15:56:53] <bae> **** Error:
[15:56:53] <bae> gertrude: bad function `(a rose is)'. Cannot be applied (type ",help" for more information)
[15:57:15] <ecraven> well, that's indeed correct
[15:57:26] <ecraven> you bind `clause' to '(a rose is), and then call (clause wd)
[15:57:35] <bae> ecraven There you go. the definition of vowel? I'll fix it.
[15:57:37] <ecraven> so it tries to apply `(a rose is) to wd. which fails, because that's not a function
[15:57:48] <ecraven> that's just a list
[15:58:17] <bae> OK, I must be fundamentally misunderstanding how let works.
[15:58:32] <ecraven> (let ((a b)) ...) just gives the result of evaluating b the name a inside ...
[15:58:42] <ecraven> fundamentally it is just used to assign names to values
[15:58:50] <bae> I thought let could be like a temporary function
[15:59:13] <bae> The value assigned can't be a function?
[15:59:27] <gwatt> it can be a function, or any other value
[15:59:29] <ecraven> they can be. but in your case, they aren't (unless `se' is supposed to return a function?)
[15:59:44] <bae> no, se returns a list
[15:59:55] <ecraven> well, then you cannot apply that like a function
[16:01:31] <mishugana> https://github.com/dyoo/simply-scheme/blob/master/private/simply.scm has the definition that Brian Harvey actually intended to be used
[16:01:53] <bae> OK. Sorry, (guy whose name has scrolled up the screen), I just have a lot of respect for Dr. Harvey. He's spent his whole life trying to promote quality CS education, so the idea of someone "laughing" at his work really bothers me.
[16:02:12] <ecraven> hm.. I should read that book, seems interesting ;)
[16:02:36] <mishugana> the function "sentence" https://paste.rs/7Jb.scm 
[16:02:49] <mishugana> similar to bae's, but he was indeed missing some bits
[16:03:04] <mishugana> ecraven: Hehe. I read through his LOGO books - they were extremely fun!
[16:03:25] <mishugana> Hence my original joke that he was trying to turn Scheme into LOGO by using, "word", "sentence" etc. :D
[16:03:46] <ecraven> hm.. I should read a logo book too then, I just associate turtles with it, but don't know anything about the actual language
[16:03:58] <mishugana> bae: It was all in jest, man. I wasn't laughing at him - just at the fact that the book seems to read like a LOGO book!
[16:04:26] <bae> Well, Logo is a dialect of Lisp, so...
[16:04:28] <mishugana> ecraven: Indeed! LOGO was the first language I learnt, all the way back in the 3rd grade/standard
[16:05:01] <mishugana> It is extremely fun, but the implementation, UCB-Logo has some serious limitations - very very slow, and you cannot copy/paste any code :|
[16:06:15] <mishugana> bae: Yeah, and maybe this is completely non sequitur, but I did find a line in the online LOGO books disparaging Taiwanese workers as cheap and working for cents which I found rather jarring... everyone is flawed, that's basically the point
[16:06:16] <ecraven> wow, that use of " is ... idiosyncratic ;)
[16:07:06] <ecraven> so `sentence' is like list or append?
[16:07:11] <mishugana> ecraven: Yup
[16:07:39] <bae> mishugana The latest version (6.2) is very buggy. It crashes a LOT. He really needs someone experienced to overhaul the code. He was attempting to add "object logo" features found in an old apple version he worked on years ago.
[16:08:38] <mishugana> Heh. In fact, a project I had in mind was based on creating a typed version of LOGO along with Object LOGO features, but unfortunately, it never took off... I do still quite love LOGO and its beautifully flowing code :)
[16:09:18] <mishugana> bae: Yeah, it does crash a lot on my macOS.
[16:09:50] <bae> ecraven 'sentence' is like list except it can take words and lists as input, and returns a "flat" list (list of atoms).
[16:10:28] <ecraven> do you see the problem with your `gertrude'?
[16:11:31] <bae> ecraven I think so. Not really, LOL. But I'm about to give up and just be a blub programmer. Maybe I can do GW-Basic, or Hypercard.
[16:12:27] <jcowan> 1
[16:13:15] <bae> (With Dr. Harvey's books) it seems like he takes great care to explain every detail, and then gets to a difficult concept like map/reduce/filter, or let, and just throws you in the deep with little explanation.
[16:13:34] <bae> or lambda...
[16:13:41] <ecraven> well, as I said, plain `let' *only* gives names to things
[16:13:55] <ecraven> just like lambda, which also mainly gives names to its parameters
[16:16:15] <bae> So his main example of let is a function that computes the quadratic formula. Not exactly the clearest example to a neophyte.
[16:16:45] <bae> I still don't get it. Is there another intro to Scheme you could recommend?
[16:17:17] <bae> I heard of one called "How to write programs" I think?
[16:18:11] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[16:18:33] <mishugana> ecraven: Are you one of the maintainers for Chez Scheme?
[16:18:45] <mishugana> I was looking at the source code on github and saw your name there :D
[16:20:15] <ecraven> not at all, I'm just a user, and have written a few issues and bug reports
[16:20:37] <ecraven> bae: there are many ;) personally, I like SICP
[16:20:48] <ecraven> see topic
[16:21:22] <ecraven> let *just* gives a name to things, that's literally the only thing it does. it is useful if you want to use the same thing multiple times, without writing it down repeatedly
[16:21:30] <mishugana> ecraven: Ah, I see. I was searching for r7rs support for Chez, and I saw a proposal(?) with your name on it. 
[16:22:05] <bae> ecraven You are not a friend of sinners.
[16:22:08] <mishugana> I was just trying to see if going with Chez would future proof me in terms of supported standards (I know that standards in Scheme world probably work a bit differently form what I'm ued to)
[16:22:37] <mishugana> bae: hahahaa
[16:23:00] <ecraven> mishugana: well, it is *not* an R7RS scheme, but, in the end, as I wrote above, there is no "portable" Scheme anyway at the moment (maybe r7rs-large will change that)
[16:23:14] <mishugana> Yup, gotcha.
[16:23:28] <bae> ecraven define just gives a name to things, right?
[16:23:38] <ecraven> yes, but define is "global".
[16:23:40] <ecraven> let is for "local" names
[16:24:01] <mishugana> Not to throw in a pitchfork, but I read https://weinholt.se/articles/r7rs-vs-r6rs/ and I find myself on the r6rs side. Just saying!
[16:24:11] <mishugana> Let me start building chez locally then.
[16:24:33] <bae> Right. So I was trying to give the name 'clause' to the 'if' expression that followed it.
[16:24:39] <mishugana> And I presume that geiser should work fine for Emacs? :-)
[16:24:41] <ecraven> it's complicated ;) in the end, both sides are right, and both are wrong, imho
[16:25:03] <ecraven> bae: what you did is give the name `clause' to the *result* of evaluating that expression
[16:25:36] <ecraven> if you want to give a name to the "function", you need to write that: (let ((clause (lambda (parameter) .... something-that-uses-parameter ...))) (clause ...))
[16:25:49] <ecraven> ponder: (let ((plus (lambda (a b) (+ a b)))) (plus 1 (plus 2 3)))
[16:27:26] <bae> ecraven I think maybe I'm misunderstanding what Harvey wants. I'll quote the exercise, and maybe you can help me, because he hasn't introduced 'lambda' at this point in the text.
[16:28:12] <bae> Also, has anyone read this: https://www.amazon.com/How-Design-Programs-Introduction-Programming/dp/0262062186/ref=pd_sbs_6/139-1889717-1335724?pd_rd_w=Z2mj8&pf_rd_p=3676f086-9496-4fd7-8490-77cf7f43f846&pf_rd_r=1KRFH70VS6NV3D68FQ6N&pd_rd_r=cd594064-f079-482b-a39b-86184c04bb24&pd_rd_wg=mogls&pd_rd_i=0262062186&psc=1
[16:28:14] <rudybot> https://teensy.info/1pewSlyCnb
[16:28:20] <bae> Sorry, it's Amazon
[16:28:41] <ecraven> it's also in the topic, htdp
[16:29:12] <mishugana> bae: It's the Felleisen Krishnamurthi et al book, right? If so, I didn't like it when I tried reading it years ago.
[16:29:41] <mishugana> In fact, I found realm of racket, land of lisp and similar books extremely trying on my patience. hahaha, maybe that's just me.
[16:30:00] <mishugana> I loved "Practical Common Lisp". I wish there was something similar for Scheme.
[16:30:14] <ecraven> I find "Programming in Scheme" by Eisenberg and Abelson very nice, but it's from 1990
[16:30:38] <ecraven> however much of the code should still work without many changes
[16:30:39] <mishugana> ecraven: I think I did read that once ... I remember Eisenberg... hmmm
[16:31:09] <mishugana> If it's the same book I'm thinking of, then I enjoyed it thoroughly - I remember Eisenberg's explanations of recursion being topnotch
[16:31:56] <bae> I need something for stupid people.
[16:32:09] <mishugana> In fact, I have to thank bae - I didn't know that B Harvey had written a scheme book, looks pretty interesting. I might use that as well. 
[16:32:25] <bae> Programming in Scheme...I can get that. It's for stupid people, right?
[16:32:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[16:32:52] <mishugana> bae: About the exercise, what Harvey wants us to do is, I think, simply use `let` to bind the (first wd) value, and then use that to avoid duplication. That's about it.
[16:32:54] <ecraven> try it and see whether you like it
[16:33:04] <mishugana> All that palaver about "se" etc. is causing the confusion! :D
[16:33:22] <bae> mishugana: Yeah, I tried to read Bjarne Stroustrup's book...talk about irritating. Very 'moralistic.'
[16:33:23] <mishugana> bae: Why do you keeping flagellating yourself? I'm sure you're not dumb
[16:33:34] <mishugana> Hahaha
[16:33:51] <mishugana> ecraven: How did you learn Scheme?
[16:33:57] <bae> No, I'm really really ignorant.
[16:33:59] <ecraven> lots and lots of books and time ;)
[16:34:06] <mishugana> Hahaha
[16:34:15] <mishugana> Are you a politician by any chance? 
[16:34:16] <ecraven> but I've been at it for more than 20 years, and still don't know half of it ;)
[16:34:20] <mishugana> Just kidding! :P
[16:34:22] *** Joins: aeth (~aeth@user/aeth)
[16:34:48] <mishugana> bae: Come on, man. Maybe if you give some idea about your background, people might be able to suggest a suitable book?
[16:35:06] <mishugana> I do agree that Brian Harvey's books start off simple and then go to 100 pretty quickly (his LOGO book was exactly like that)
[16:35:24] <bae> https://pastebin.com/KNLn2jUM
[16:36:02] <bae> mishugana I'm a failed violinist.
[16:36:19] <mishugana> bae: yes, precisely. He's asking to use `let` to bind some var to, say, `(first wd)` and then use that variable in the body
[16:36:27] <mishugana> bae: Interesting!
[16:36:38] <mishugana> Is this your first prog lang then?
[16:37:49] <ecraven> bae: it seems like he just wants you to give a name to the shared stuff
[16:38:19] <ecraven> so if you had a calculation like (+ (f x) (f x) (f x)), then you could "improve" that by writing (let ((it (f x))) (+ it it it))
[16:38:26] <ecraven> and that's what he wants you to do here, I believe
[16:38:32] <ecraven> so "factor out" the common values
[16:39:15] <bae> My first programming language was Pascal, in 1996. Then my (then) wife came to me, having noticed that I was sitting in front of the computer 12 hours a day, reading and typing like a maniac, and said,"Since you gave up on your music and took up computers, it's like part of you died (sniffle sniffle)." And so, like a dumbass, I quit programming and went back to school for the old fiddle.
[16:39:41] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:40:05] <bae> Now, all these years later, I'm picking up where I left off.
[16:40:14] <ecraven> if you got Pascal, Scheme should be simple ;)
[16:40:47] <bae> Pascal is simple. It works the way my brain works. Scheme is hard.
[16:41:01] <mishugana> bae: hahaha, sorry, I found that narrative style funny!
[16:41:35] <ecraven> Scheme is (mostly) simpler than Pascal ;)
[16:41:49] <ecraven> (let ((x 5)) ...) is like x := 5 in Pascal, but only inside the let
[16:41:54] <bae> Scheme is like a Celtic Knot.
[16:42:05] <mishugana> bae: honestly though, why Scheme instead of, say, Python?
[16:42:27] <bae> Because I never follow the Zeitgeist.
[16:46:05] <mishugana> Lmfao. :D
[16:54:23] *** Joins: seninha (~seninha@user/seninha)
[16:56:23] <mishugana> Does chez not support `displayln`? :O ... I had tried that with an online scheme interpreter, and it worked?
[16:57:32] <gwatt> mishugana: nope, no displayln
[16:57:39] <mishugana> gwatt: Ah, okay.
[16:57:48] <mishugana> I thought something was wrong with my build!
[16:57:58] <mishugana> So using (newline) is fine, right?
[16:58:06] <gwatt> yep, that works
[16:58:10] <amazigh> mishugana: Scheme, and Chez in particular has lot of DIY, look into ruse scheme, chez srfi or thunder chez (they are other chez monorepos)
[16:58:14] <mishugana> Nice! Thanks.
[16:58:36] <amazigh> and welcome :)
[16:58:40] <mishugana> Oh, man. I thought the CL landscape was diverse... this is on another level! :D
[16:58:49] <mishugana> amazigh: Danke!
[17:01:17] <mishugana> So just a couple of questions more - 1. Is it a good ideas to read the r6rs spec to get to speed on the featureset, and 2. Suppose I do some project with using r6rs specific features, is there a way to enforce that standard? 
[17:04:07] <gwatt> mishugana: can't hurt to read the R6RS spec, though I find TSPL4 a better text for users. The spec is more useful to implementors.
[17:04:34] <mishugana> gwatt: I will take your advice then and start with TSPL. Thanks! 
[17:05:07] <gwatt> I don't understand the second question.
[17:06:37] *** Joins: tfb (~tfb@88.98.95.237)
[17:06:47] <mishugana> gwatt: Okay, so suppose I used the enhanced conditions system that r6rs has but r7rs doesn't (if I read it correctly), and I create a small project that I wish to distribute, is there any way I can enforce compatibility through some project metadata (such that it will auto-detect if the user's compiler supports these features), or is it a documentation-only thing?
[17:07:07] <mishugana> Say, like Rust's "editions" system
[17:07:18] <mishugana> or Java's "-target" flags
[17:07:34] <gwatt> ah, the likeliest situation is that the code won't run.
[17:07:40] <mishugana> Right
[17:08:07] <mishugana> I suppose that is a minor thing anyway, so it's okay.
[17:09:04] <mishugana> gwatt: lloda: ecraven: bae: amazigh: Thanks for all the help and the enjoyable discussions. It's been very helpful. See you folks around again soon! :-). Cheers!
[17:09:31] *** Quits: mishugana (~mishugana@user/mishugana) (Quit: leaving)
[17:09:40] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[17:19:43] *** Joins: pull (~tcz@91.150.165.88)
[17:20:47] *** Joins: jao (~jao@45.152.183.61)
[17:24:32] *** Quits: bae (~ben@49.145.160.200) (Quit: leaving)
[17:28:38] *** Joins: klovett (~klovett@c-73-231-102-38.hsd1.ca.comcast.net)
[17:33:42] <dpk> gwatt: once you introduce anything to do with walking the whole syntax tree at each expansion, macro expansion as a whole takes quadratic time
[17:38:02] *** Joins: bae (~ben@49.145.160.200)
[17:59:40] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[18:01:04] *** Quits: bae (~ben@49.145.160.200) (Quit: leaving)
[18:03:08] *** Quits: pull (~tcz@91.150.165.88) (Quit: No Ping reply in 180 seconds.)
[18:12:01] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[18:19:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:20:45] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:21:30] *** Joins: pull (~tcz@91.150.165.88)
[18:56:06] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[19:06:26] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[19:21:35] *** Joins: civodul (~user@guix/contributor/civodul)
[19:28:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:45:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:47:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:47:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:52:19] <Zipheir> Wow, looks like I missed quite a discussion.
[20:09:57] *** Joins: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru)
[20:17:03] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[20:21:12] <gwatt> dpk: yeah, it's not ideal, but it can work.
[20:22:20] <gwatt> I suspect I could do something clever to not walk every part of the tree every time, but I haven't tried to improve it yet
[20:22:20] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:32:17] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:a646:696b:5414:7118)
[20:39:41] *** Quits: klovett (~klovett@c-73-231-102-38.hsd1.ca.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[20:42:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:42:45] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:49:24] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:54:16] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:ede1:773f:e980:d67a) (Ping timeout: 245 seconds)
[20:56:11] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[20:56:50] *** Joins: seninha (~seninha@user/seninha)
[20:59:18] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[21:03:17] *** Joins: slightlypandaish (~slightlyp@2001:8a0:5606:d100:794a:752e:2795:143a)
[21:05:54] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[21:06:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:40:20] *** Quits: slightlypandaish (~slightlyp@2001:8a0:5606:d100:794a:752e:2795:143a) (Quit: Client closed)
[21:46:23] *** Quits: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[21:55:13] *** Joins: klovett (~klovett@mobile-166-137-179-141.mycingular.net)
[21:57:42] *** Joins: klovett_ (~klovett@mobile-166-170-40-35.mycingular.net)
[21:59:41] *** Quits: klovett (~klovett@mobile-166-137-179-141.mycingular.net) (Ping timeout: 245 seconds)
[22:08:24] *** elflng_ is now known as elflng
[22:15:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:36:55] *** Joins: Avichi (~Avichi@pppoe.178-66-158-238.dynamic.avangarddsl.ru)
[22:42:45] *** Joins: xgqtd (~user@static62133140007.ostnet.pl)
[22:45:51] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:46:07] *** evdubs_ is now known as evdubs
[22:58:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:00:13] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:07:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:43:47] *** ski_ is now known as ski
[23:56:40] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@128-71-225-36.broadband.corbina.ru)
[23:57:14] *** Joins: pony (~ed@smol/hors)
[23:57:28] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@128-71-225-36.broadband.corbina.ru) (Read error: Connection reset by peer)
