[00:03:53] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[00:24:28] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Remote host closed the connection)
[00:25:13] *** Joins: rgrinberg (~textual@187.223.209.106)
[00:26:17] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[00:30:10] *** Joins: namkeleser (~namkelese@101.179.128.103)
[00:50:31] <d_bot> <zakkor> is it just me that finds matrices easier to work with using an iterative approach / mutation rather than using a functional approach?
[00:57:40] <d_bot> <NULL> They are not a recursive structure, so they're difficult / annoying to manipulate with recursive functions
[01:01:31] *** Joins: vicfred (~vicfred@user/vicfred)
[01:07:13] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[01:21:30] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:28:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:31:57] *** Joins: xd1le (~xd1le@user/xd1le)
[02:00:51] *** Joins: lagash (lagash@lagash.shelltalk.net)
[02:11:46] *** Joins: kolexar (~kolexar@user/kolexar)
[02:30:10] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[02:57:42] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[03:10:45] *** Joins: zebrag (~chris@user/zebrag)
[03:25:11] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[03:25:26] *** Joins: namkeleser (~namkelese@101.179.128.103)
[03:48:17] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[03:55:31] *** Joins: namkeleser (~namkelese@101.179.128.103)
[04:04:02] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[04:25:19] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Quit: Leaving...)
[04:29:45] *** Joins: namkeleser (~namkelese@101.179.128.103)
[05:07:30] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[05:33:45] <d_bot> <cemerick> @companion_cube didn't know about the colors support in CCFormat, that's fun üëç
[05:39:17] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[05:50:17] <companion_cube> :)
[05:51:32] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[06:02:18] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 260 seconds)
[06:07:33] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2)
[06:13:15] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[06:50:14] <d_bot> <Shon> I like some functional idioms over matrices: in particular a fold operation that also supplies indices, and mapping operations to transform the matrices. In general, I don‚Äôt much like having to reason about bounds for indices. That said, it‚Äôs nice to be able to just mutate an array cell sometimes üôÇ
[07:11:58] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[07:21:30] <companion_cube> you can have fold and map, with mutable arrays!
[07:21:37] <companion_cube> it's probably better this way anyway
[07:21:47] <companion_cube> matrices are meant to be arrays (bigarrays probably even)
[08:00:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[08:06:52] *** Joins: namkeleser (~namkelese@101.179.128.103)
[08:19:56] *** Joins: xiongxin (~Thunderbi@119.123.103.34)
[08:24:24] <companion_cube> https://github.com/c-cube/ocaml-avro alright, first draft is ready
[08:24:28] <companion_cube> üòÅ
[08:52:14] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:28:00] *** Joins: mbuf (~Shakthi@122.178.201.137)
[09:43:51] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:43:33] <remexre> if I have a module type with a large number of items that can be defined in terms of others, and typically are, is there a way to add defaults?
[10:51:55] *** Joins: chrisz (h1gdzwr9bz@55d4326b.access.ecotel.net)
[11:10:34] *** Quits: xiongxin (~Thunderbi@119.123.103.34) (Ping timeout: 256 seconds)
[11:10:53] *** Joins: xiongxin (~Thunderbi@119.123.101.55)
[11:45:21] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[12:16:53] <d_bot> <Continuation Calculus> might just be tired: let's say i have a recursive datatype, and i want one of the case to be a set. like `type fbs = Foo of int | Bar of string | Set of fbs set`. How should I do it given that `Set.Make` is a functor?
[12:23:33] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[12:24:34] <d_bot> <Continuation Calculus> or, if there is no good way to do it (like, one would have to use `module rec` and stuff), is there a good library that exposes "a universal type", as in https://blog.shaynefletcher.org/2017/03/universal-type.html ?
[12:48:26] <d_bot> <octachron> recursive types with embedded sets are one of the motivation for recursive modules.
[12:49:26] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:51:28] <d_bot> <octachron> (And with the type-only module trick, this can be done without any duplication)
[13:02:10] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[13:06:19] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[13:07:02] *** Joins: namkeleser (~namkelese@101.179.128.103)
[13:21:02] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[13:44:30] *** Quits: chrisz (h1gdzwr9bz@55d4326b.access.ecotel.net) (Quit: leaving)
[13:47:44] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[14:10:34] *** Joins: bartholin (~bartholin@109.53.1.47)
[14:28:04] *** Joins: mro (~mro@port-92-195-129-79.dynamic.as20676.net)
[14:32:39] *** Quits: mro (~mro@port-92-195-129-79.dynamic.as20676.net) (Remote host closed the connection)
[14:35:10] *** Quits: xiongxin (~Thunderbi@119.123.101.55) (Remote host closed the connection)
[14:35:28] *** Joins: xiongxin (~Thunderbi@113.116.35.101)
[15:55:17] *** Quits: bartholin (~bartholin@109.53.1.47) (Ping timeout: 252 seconds)
[16:04:54] <d_bot> <Kakadu> If I want to use State monad in my code, where should I get it's implementation? Opam `monads` package depends on core_kernel which looks like a little bit heavy... Any alternatives?
[16:04:55] <d_bot> <Kakadu> Should we put any definition of the monads in stdlib, by the same motivation as for `('a, 'b) result` data type?
[16:07:24] *** Joins: bartholin (~bartholin@109.53.2.191)
[16:20:15] *** Joins: mro (~mro@port-92-195-129-79.dynamic.as20676.net)
[16:24:50] *** Quits: mro (~mro@port-92-195-129-79.dynamic.as20676.net) (Ping timeout: 260 seconds)
[16:36:58] <Leonidas> companion_cube: haha, only yesterday I discussed that ;* would be nice (along with match*)
[16:37:14] <companion_cube> Oh yes, match*
[16:37:39] <companion_cube> remexre: functor?
[16:37:54] <Leonidas> the original ppx_let had match%bind and I am somewhat confused why this wasn't upstreamed too
[16:38:48] <Leonidas> (as in, it would be quite simple to do and the semantics are pretty clear, so if it is more complex I don't understand why)
[16:39:19] <companion_cube> Because the core team is conservative I guess
[16:39:56] <Leonidas> let* is not particularly conservative and from let* match* is a rather conservative extension
[16:40:19] <Leonidas> also let punning feels weird
[16:40:32] <Leonidas> but that's just a purely syntactic thing
[16:40:59] <Leonidas> I recently converted a codebase to let* and it was... quite pleasant.
[16:49:27] <companion_cube> Well there must be an issue discussing match* somewhere
[16:49:36] <companion_cube> I think it was in the initial proposal
[16:50:01] <companion_cube> It's definitely nice when you have monadic code, to remove the >>=
[16:51:20] <d_bot> <leviroth> https://github.com/ocaml/ocaml/pull/1947#issuecomment-409317549
[16:54:03] *** Joins: Sofi[m] (~sofi@2001:470:69fc:105::1:44cc)
[16:56:36] <d_bot> <Kakadu> Actually, I realized that I don't need full-blown state monad. Now I'm struggling of lack of higher-kinded types
[16:59:12] <d_bot> <Ulugbek> You can have a look at Jane street/higher_kindled repo, if you haven‚Äôt already
[17:00:01] <d_bot> <Kakadu> No, I mean proper higher kinded types
[17:02:06] <companion_cube> You're out of luck then
[17:10:31] <d_bot> <Kakadu> One of my frustration about higher_kinded lib is a lot of Make1,2,3,... functors. Do you know any (research?) language with higher-kinded types and non-currified type operators like in OCaml? I may try to get some insight from this language...
[17:38:00] *** Joins: Colt (~Colt@user/colt)
[17:55:11] *** Quits: bartholin (~bartholin@109.53.2.191) (Ping timeout: 252 seconds)
[17:56:59] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[17:57:32] *** Joins: Colt (~Colt@user/colt)
[18:00:39] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:01:00] *** Joins: Colt (~Colt@user/colt)
[18:02:32] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:02:55] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[18:04:09] *** Joins: Colt (~Colt@user/colt)
[18:04:29] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:04:56] *** Joins: Colt (~Colt@user/colt)
[18:05:10] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:07:20] *** Joins: bartholin (~bartholin@109.53.4.116)
[18:13:35] *** Joins: xiongxin1 (~Thunderbi@113.116.32.49)
[18:14:27] <d_bot> <Shon> Yes, I meant folding over mutable arrays. I‚Äôve had nice outcomes lately folding/mapping over arrays for traversal, then mutating for updates.
[18:14:59] *** Quits: xiongxin (~Thunderbi@113.116.35.101) (Ping timeout: 252 seconds)
[18:15:00] *** xiongxin1 is now known as xiongxin
[18:18:07] *** Joins: chrisz (gid8ipddox@55d4b9ea.access.ecotel.net)
[18:20:40] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:26:17] *** Joins: xiongxin1 (~Thunderbi@113.116.35.101)
[18:26:28] *** Quits: xiongxin (~Thunderbi@113.116.32.49) (Ping timeout: 268 seconds)
[18:26:29] *** xiongxin1 is now known as xiongxin
[18:27:49] *** Quits: bartholin (~bartholin@109.53.4.116) (Ping timeout: 250 seconds)
[18:29:16] <d_bot> <darrenldl> is there equivalent to JNDI (the main feature that allowed the log4j vuln it seems?) in ocaml?
[18:30:32] *** Quits: chrisz (gid8ipddox@55d4b9ea.access.ecotel.net) (Ping timeout: 240 seconds)
[18:32:42] *** Joins: chrisz (uwhr36a55a@55d4021a.access.ecotel.net)
[18:33:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:36:12] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[18:43:04] *** Joins: bartholin (~bartholin@109.53.4.116)
[18:48:59] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 265 seconds)
[18:50:21] <companion_cube> probably not
[18:50:34] <companion_cube> 1. OCaml doesn't have reflection so you don't typically pass foo.class around
[18:50:48] <companion_cube> 2. OCaml doesn't have hot class loading (you can load .cmxs but it's‚Ä¶ a lot more fragile)
[18:56:37] <d_bot> <darrenldl> the entire log4j situation seems a bit counterintuitive, but oh well
[18:56:57] <d_bot> <darrenldl> companion_cube: cheers for the info
[19:05:44] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[19:15:44] *** Quits: xiongxin (~Thunderbi@113.116.35.101) (Remote host closed the connection)
[19:55:07] *** Quits: bartholin (~bartholin@109.53.4.116) (Ping timeout: 250 seconds)
[20:07:56] *** Joins: bartholin (~bartholin@109.53.1.209)
[20:20:28] *** Joins: shawnw (~shawn_w@152.44.212.188)
[20:28:02] *** Joins: mro (~mro@port-92-195-129-79.dynamic.as20676.net)
[20:33:49] *** Joins: gravicappa (~gravicapp@46.191.137.20)
[20:42:25] *** Quits: mro (~mro@port-92-195-129-79.dynamic.as20676.net) (Read error: Connection reset by peer)
[20:42:30] *** Joins: mro_ (~mro@port-92-195-129-79.dynamic.as20676.net)
[20:44:58] *** Joins: mro (~mro@port-92-195-129-79.dynamic.as20676.net)
[20:48:51] *** Quits: mro_ (~mro@port-92-195-129-79.dynamic.as20676.net) (Ping timeout: 250 seconds)
[20:51:00] *** Quits: mro (~mro@port-92-195-129-79.dynamic.as20676.net) (Remote host closed the connection)
[20:58:02] *** Joins: mro (~mro@port-92-195-129-79.dynamic.as20676.net)
[21:09:27] *** Quits: bartholin (~bartholin@109.53.1.209) (Ping timeout: 250 seconds)
[21:09:52] *** Joins: rgrinberg (~textual@187.223.209.106)
[21:11:14] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[21:23:02] *** Joins: bartholin (~bartholin@109.53.7.217)
[21:25:54] *** Quits: mbuf (~Shakthi@122.178.201.137) (Quit: Leaving)
[21:27:29] *** Quits: bartholin (~bartholin@109.53.7.217) (Ping timeout: 252 seconds)
[21:39:45] *** Quits: mro (~mro@port-92-195-129-79.dynamic.as20676.net) (Remote host closed the connection)
[21:39:46] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[21:52:24] <Leonidas> darrenldl: Maybe you can ask Daniel? Logs doesn't even seem to support injecting template variables via formatting parameters ;-)
[21:52:37] <Leonidas> Or template variables to begin with
[21:55:21] *** Joins: vicfred (~vicfred@user/vicfred)
[21:55:23] *** Joins: sluigi (~sluigi@18.31.14.245)
[21:55:36] <sluigi> what's the easiest way to check if two maps have conflicting values for the same key if I'm using Core.Map?
[22:04:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:04:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:09:14] *** Joins: kadir (~kadir@88.244.28.173)
[22:11:06] *** Quits: gravicappa (~gravicapp@46.191.137.20) (Ping timeout: 260 seconds)
[22:28:18] *** Parts: kadir (~kadir@88.244.28.173) (WeeChat 3.3)
[22:28:55] *** Joins: kadir (~kadir@88.244.28.173)
[22:30:10] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:30:16] *** Parts: kadir (~kadir@88.244.28.173) (WeeChat 3.3)
[23:07:25] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[23:07:31] *** Joins: bartholin (~bartholin@158.110.70.215)
[23:10:09] *** Quits: sluigi (~sluigi@18.31.14.245) (Ping timeout: 256 seconds)
[23:17:21] *** Joins: mro (~mro@port-92-195-129-79.dynamic.as20676.net)
[23:27:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[23:36:59] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[23:58:03] *** Joins: Anarchos (~Anarchos@88.168.112.216)
