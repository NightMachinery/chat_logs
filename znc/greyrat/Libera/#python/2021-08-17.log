[00:00:11] *** Quits: magla (~gelignite@55d429d0.access.ecotel.net) (Quit: Stay safe!)
[00:00:30] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a566:9143:e279:ef46)
[00:02:58] *** Quits: extropiator (~extropiat@162.253.68.165) (Ping timeout: 246 seconds)
[00:03:09] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[00:03:21] <aphysically> I'm building up some arrays for subprocess commands that can get quite long, a lot of the lines can be combined a lot neater if I use tuple unpacking with * I believe, see: https://bpa.st/ROUA
[00:03:47] <aphysically> is there any reason this would be a bad idea? Do you agree that's more readable than a bunch of separate assignments as I mix in arrays and strings?
[00:04:00] <aphysically> I pasted one example of each
[00:04:22] * rud0lf slaps aphysically around a bit with an empty tuple
[00:04:38] <nedbat> aphysically: the tuple unpacking looks good to me
[00:04:53] *** Joins: node1 (~node1@user/node1)
[00:05:06] <aphysically> the actual commands are a lot longer than this so it looks significantly messier without this
[00:05:29] <nedbat> aphysically: you could even do this though it might be too much:    ` *(ff_deepprobe_args if deepprobe else ()), `
[00:06:14] <aphysically> hmmm
[00:06:36] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[00:06:38] <aphysically> I may use a ternary like this in some cases when it avoids breaking up the definer with ifs
[00:06:46] <aphysically> it will be a lot more readable overall I think
[00:07:04] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:08:22] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 245 seconds)
[00:09:05] *** Quits: sid-maddy (~sid-maddy@103.76.57.36) (Quit: Quit)
[00:09:14] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[00:10:33] *** oz4ga is now known as m
[00:10:47] *** m is now known as oz4ga
[00:10:58] *** Joins: wyclif (~wyclif@user/wyclif)
[00:11:10] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a566:9143:e279:ef46) (Ping timeout: 240 seconds)
[00:12:32] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 245 seconds)
[00:14:13] *** nomic2 is now known as nomic
[00:14:44] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[00:15:03] *** Quits: _AJ (~AJAlabs@198.54.140.10) (Quit: Textual IRC Client: www.textualapp.com)
[00:15:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[00:15:57] *** Joins: t3nj1n (~t3nj1n@2001:5b0:46e5:cea8:d3d8:9528:1578:9186)
[00:16:28] *** Joins: wyclif (~wyclif@user/wyclif)
[00:17:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:17:44] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[00:19:05] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[00:19:15] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[00:21:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[00:21:29] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 248 seconds)
[00:22:00] *** Joins: wyclif (~wyclif@user/wyclif)
[00:22:01] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[00:22:19] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:22:50] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[00:25:08] *** Joins: monkey_ (~user@190.104.116.134)
[00:26:10] *** Joins: Adoi (~Adoi@user/adoi)
[00:26:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[00:27:30] *** Joins: wyclif (~wyclif@user/wyclif)
[00:29:19] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:30:10] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 240 seconds)
[00:31:07] *** Quits: Praise (~Fat@user/praise) (Quit: Vado a fare qualcosa di utile.)
[00:31:20] *** Joins: Praise (~Fat@user/praise)
[00:31:57] *** Joins: paravida (~myChateau@user/paravida)
[00:32:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[00:32:14] *** Quits: t3nj1n (~t3nj1n@2001:5b0:46e5:cea8:d3d8:9528:1578:9186) (Read error: Connection reset by peer)
[00:33:01] *** Joins: wyclif (~wyclif@user/wyclif)
[00:33:15] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:33:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[00:35:52] *** Quits: mattil (~mattil@87-92-27-39.bb.dnainternet.fi) (Quit: Leaving)
[00:36:27] *** Joins: cuz (~user@38.140.58.234)
[00:36:35] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[00:37:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[00:38:26] <cuz> Quick question, I have a dictionary and a key that I want to use to look up a value. If the key is in the dictionary I want to use it to look up a value. If the key isn't in the dictionary I have a default key I want to use. Is there a method built in that can do this?
[00:38:31] *** Joins: wyclif (~wyclif@user/wyclif)
[00:38:59] <cuz> I'm looking for something like .get but based on keys instead of values...
[00:39:06] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[00:41:09] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[00:41:18] <aphysically> nedbat: I guess I could even do string conditionals like that - not sure if there's a better way *((stringval,) if boolval else ()),
[00:41:49] <Ninpo> cuz get DOES use keys
[00:42:00] <Ninpo> get(key) returns the value of key
[00:42:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:43:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[00:43:19] <Ninpo> and you can assign a default value if the key isn't there e.g. dict.get(key, None) then you do a check for None or simply set a default value if you prefer e.g. dict.get(key, "foo")
[00:43:49] *** Joins: Enitin (~Enitin@82.102.22.84)
[00:43:51] <Ninpo> (None return is default if the key isn't there but I like to be explicit)
[00:44:02] *** Joins: aifa[m] (~aifamatri@2001:470:69fc:105::d06e)
[00:44:02] *** Joins: wyclif (~wyclif@user/wyclif)
[00:44:11] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[00:44:50] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Quit: padraigd)
[00:44:52] *** Joins: Auron (~Auron956@user/auron)
[00:44:55] <aphysically> yeah this for ex. is a lot more readable than how it would have looked broken up https://bpa.st/TIAA
[00:45:52] <TML> cuz: dict.get(key, dict.get(defaultkey))
[00:46:11] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[00:47:01] *** Joins: Adoi (~Adoi@user/adoi)
[00:47:18] <nedbat> aphysically: that wouldn't work with stringval. You'd get single-character entries in your list.
[00:47:32] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[00:48:01] <aphysically> not with (stringval,) right? it will unpack to stringval I think
[00:48:12] <nedbat> aphysically: oh, i see, you're right
[00:48:34] <aphysically> I think even (stringval) won't work though
[00:48:39] <nedbat> right
[00:48:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[00:49:13] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 258 seconds)
[00:49:33] *** Joins: wyclif (~wyclif@user/wyclif)
[00:49:53] *** Joins: Wulf (~Wulf@user/wulf)
[00:50:33] <TML> aphysically: I think your paste has some syntax errors in it
[00:50:47] <TML> *(('-ss', crop_ts_string) if not args.slowseek else ()) <-- this doesn't look right to me
[00:51:15] <aphysically> I did check it with and without args.slowseek and it worked
[00:51:15] <TML> when args.slowseek is False, I think that will throw an error trying to * expand the tuple
[00:51:24] *** Joins: c10l (~c10l@89.34.167.207)
[00:51:28] <TML> really?
[00:51:30] <TML> hm
[00:51:32] <aphysically> yeah
[00:51:53] *** Quits: Adoi (~Adoi@user/adoi) (Client Quit)
[00:51:58] <nedbat> TML: () is an empty tuple, which can be unpacked to add no elements to the result
[00:52:45] *** Quits: LuxuryMode (uid91005@id-91005.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[00:53:02] *** Joins: neilthereildeil (~neilthere@70.21.11.5)
[00:53:06] <TML> nedbat: I'm referrning to when args.slowseek is False - which will lead to: *('-ss', crop_ts_string)
[00:53:29] <nedbat> TML: ok, that will unpack that two-element tuple.
[00:53:57] <aphysically> actually this confused me too at first TML, it's because the outer () aren't constructing a tuple
[00:53:58] <TML> and that's valid in the middle of that list that way?
[00:54:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[00:54:23] <TML> aphysically: No, I get that - I just didn't realize you could do [thing, thing, *(unpack, tuple), thing]
[00:54:38] <aphysically> oh ok
[00:54:45] <aphysically> I didn't get that at first :D
[00:55:04] <TML> I thought the unpacked tuples had to be at the end of the list
[00:55:04] *** Joins: wyclif (~wyclif@user/wyclif)
[00:55:49] <TML> not sure where I got that idea, but I just confirmed it _does_ work, so TIL :)
[00:55:58] <nedbat> TML: https://www.python.org/dev/peps/pep-0448/
[00:56:14] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[00:56:39] <aphysically> anyway I'm glad this works, because the end result is a lot easier to follow at a glance
[00:57:34] <TML> nedbat: Yeah, I think I misunderstood the commentary in the "Variations" section of that PEP
[00:57:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:57:58] <aphysically> I'm converting from a bash script that's like 90% unreadable garbage so cleaning it up in a way that's easy to follow is important
[00:58:18] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
[00:58:44] <TML> I mis-interpreted "Earlier iterations of this PEP allowed unpacking operators inside list, set, and dictionary comprehensions...was not accepted with the rest of the proposal."
[00:59:39] *** Joins: c10l (~c10l@89.34.167.207)
[00:59:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[00:59:44] <TML> or something - dunno
[01:00:02] *** Quits: f8l12 (~f8l12@154.3.40.120) (Ping timeout: 245 seconds)
[01:00:05] <TML> However I got there, I had invented a limitation that never existed :)
[01:00:35] *** Joins: wyclif (~wyclif@user/wyclif)
[01:02:24] *** Joins: blscoe (~blscoe@2a02:c7f:f02a:df00:4c32:e969:22bf:73cf)
[01:03:07] <neilthereildeil> in keras, is the batch_size argument of the predict function the same as the number of inputs to the neural net? like the shape of the input?
[01:03:09] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[01:03:31] <lmat> What is the best way to set up a flask, postgres, docker, nginx webserver?
[01:03:34] <blscoe> hi, how can I run 'python install -e' from a conda enviroment file?
[01:03:58] <lmat> Do I need something between nginx and flask for instance? Should I install stuff "globally" in the docker container (since it's only used for this one thing)?
[01:04:10] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 240 seconds)
[01:04:11] <lmat> (feel free to point me to a well-written article or tutorial :-D )
[01:04:37] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 245 seconds)
[01:04:50] <deniska> lmat: I typically use gunicorn and venv
[01:05:03] *** Joins: manin (~x@185.242.190.95)
[01:05:20] *** Joins: Link64 (~li@user/deepspace-link)
[01:05:22] *** Joins: Caesar-EW (~Caesar-EW@84.213.107.109)
[01:05:29] <deniska> for docker ignoring best practices and just sticking things wherever they fit globally is a fine strategy too
[01:05:50] <lmat> deniska: Cool. gunicorn is a container that can talk with ngnix, right?
[01:06:02] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[01:06:19] <deniska> lmat: gunicorn is a runner for wsgi applications, and most python frameworks, including flask, use wsgi
[01:07:04] *** Quits: nergar (~Nergar@177.225.152.13) (Read error: Connection reset by peer)
[01:07:14] <lmat> hmmm, so gunicorn is a general webserver (it speaks HTTP) and flask speaks WSGI, right?
[01:07:34] <deniska> lmat: no, gunicorn "converts" wsgi to http if you wish
[01:07:36] *** Joins: Adoi (~Adoi@user/adoi)
[01:07:41] <lmat> Ahh, okay.
[01:08:08] <deniska> lmat: flask comes with its own http server for local debugging, but it's not really meant to serve content in the public web
[01:08:17] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[01:08:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:09:03] <lmat> Good to know!
[01:09:56] *** Quits: Macuser (~Macuser@2600:1003:b460:a5bd:dd87:b998:89a8:9050) (Quit: Textual IRC Client: www.textualapp.com)
[01:10:06] *** Joins: wyclif (~wyclif@user/wyclif)
[01:14:12] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[01:15:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:15:36] *** Joins: wyclif (~wyclif@user/wyclif)
[01:15:40] <TML> lmat: There's a flask docker that will do most of that setup for you
[01:15:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[01:16:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[01:16:16] *** Joins: fortuno51 (~fortuno51@78.10.204.200)
[01:17:23] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:17:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:18:10] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[01:18:10] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:8ec4:be17:17a0:d7ab) (Ping timeout: 240 seconds)
[01:18:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:19:31] *** Joins: cthulchu_ (~Cthulchu@212.113.47.212)
[01:19:36] *** Joins: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net)
[01:20:12] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[01:20:13] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[01:20:20] *** Joins: cth (~Cthulchu@213.174.21.101)
[01:20:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[01:20:32] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[01:20:49] *** Joins: daevski9 (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net)
[01:21:03] *** Quits: cuz (~user@38.140.58.234) (Remote host closed the connection)
[01:21:08] *** Joins: wyclif (~wyclif@user/wyclif)
[01:21:22] <lmat> TML: Thank you for the pointer!
[01:21:31] *** Quits: daevski (~daevski@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[01:21:32] *** daevski9 is now known as daevski
[01:22:23] *** Quits: blscoe (~blscoe@2a02:c7f:f02a:df00:4c32:e969:22bf:73cf) (Quit: Client closed)
[01:22:28] <disi> pytest has an interesting package layout which makes it really clear/easy to see what is a public API and what isn't. one interesting thing is that the code does not appear to use its own API (e.g. you wont see `from pytest import ...` under `src/_pytest/`). does anyone know of any documentation/discussion/description of that practice as a good
[01:22:28] <disi> thing to do? (it's much less obvious for packages that don't split into 2 packages at the top level like pytest)
[01:22:40] *** Quits: cthulchu (~Cthulchu@213.174.21.101) (Ping timeout: 240 seconds)
[01:23:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[01:23:46] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 240 seconds)
[01:23:53] *** Quits: cthulchu_ (~Cthulchu@212.113.47.212) (Ping timeout: 248 seconds)
[01:24:15] *** Quits: upsala1 (~zcb@81.17.24.203) (Quit: WeeChat 3.2)
[01:24:15] *** Quits: ikus060 (~ikus060@96.127.228.230) (Quit: Leaving)
[01:24:47] <lmat> deniska: What about database migrations? I've used yoyo, but what is good?
[01:24:49] *** Quits: lethu (~lethu@user/lethu) (Quit: Quit())
[01:25:28] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::682e) (Quit: Konversation terminated!)
[01:25:39] <deniska> lmat: so far for programs which require a database I typically used django, which has built in handling of migrations
[01:25:45] *** Joins: nisstyre (~wes@user/nisstyre)
[01:25:49] <TML> lmat: check out alembic
[01:25:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[01:25:57] <TML> that's what I've always used
[01:26:23] <lmat> deniska: Right, I'm shooting for flask :-)
[01:26:25] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[01:26:26] <lmat> TML: Sure thing!
[01:26:38] *** Joins: wyclif (~wyclif@user/wyclif)
[01:26:42] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 245 seconds)
[01:26:45] <TML> alembic is built by the sqlalchemy team
[01:27:07] <akk> sqlalchemy/alembic has migrations built in.
[01:27:11] <TML> so if you're already using sqla, it works very well with it
[01:27:23] <akk> Though they sometimes need a little babysitting, they don't always "just work".
[01:28:30] <TML> 's'truth - silver bullets remain largely an elusive items
[01:29:10] <lmat> Is there some way to see the popularity of python packages?
[01:30:26] <disi> lmat: you might be interested in pypinfo
[01:31:01] <TML> https://pypistats.org/top ?
[01:31:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[01:31:35] *** Joins: c10l (~c10l@89.34.167.207)
[01:31:40] <TML> lol - aws-related stuff dominates that list
[01:31:40] <akk> pypi download stats don't tell you the real story, though, since it misses installs from linux distros, conda etc.
[01:32:03] <disi> TML: neat!
[01:32:08] *** Joins: wyclif (~wyclif@user/wyclif)
[01:32:23] *** Quits: topoi (~topoi@user/topoi) (Read error: Connection reset by peer)
[01:32:46] <akk> I wonder if anybody's ever done a sort of all import statements on github.
[01:33:02] *** Quits: summonner (~summonner@188.24.45.0) (Ping timeout: 245 seconds)
[01:33:04] <lmat> TML: Yeah, that looks good, thanks!
[01:33:10] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 240 seconds)
[01:33:26] <lmat> akk: Wow, that's a great idea!
[01:33:33] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[01:34:03] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[01:34:27] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[01:34:34] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[01:36:07] *** Quits: inom (~inom@176.59.116.194) (Read error: Connection reset by peer)
[01:36:15] *** Joins: uninhm (~user@168.197.201.1)
[01:37:04] *** Quits: uninhm (~user@168.197.201.1) (Client Quit)
[01:37:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[01:37:40] *** Joins: wyclif (~wyclif@user/wyclif)
[01:37:40] <deniska> also all these poorly configured CI/CD pipelines hitting outside world on each deployment :(
[01:38:20] <deniska> (might be correlated with AWS stuff being on the top of the list)
[01:40:36] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 268 seconds)
[01:44:20] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[01:44:40] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[01:44:45] <TML> could be - could also just be the sheer size of AWS
[01:45:17] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[01:45:48] *** Quits: iomari891 (~iomari891@197.210.71.192) (Read error: Connection reset by peer)
[01:45:54] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:46:35] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[01:46:36] <cloudbender> from tkinter import * .... ImportError: No module named tkinter
[01:46:56] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[01:47:01] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[01:47:20] *** Parts: ska (~ska@user/ska) (Leaving)
[01:47:31] <deniska> cloudbender: which python version?
[01:47:35] <cloudbender> 2.7
[01:47:45] <cloudbender> .18
[01:47:55] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[01:47:56] <deniska> cloudbender: unless you must use 2.7, use 3.x instead, 2.7 is not supported anymore
[01:47:59] *** Joins: iomari891 (~iomari891@197.210.76.177)
[01:47:59] *** Joins: blscoe (~blscoe@2a02:c7f:f02a:df00:4c32:e969:22bf:73cf)
[01:48:05] <cloudbender> I know
[01:48:17] <deniska> cloudbender: but either way, in 2.7 the module is called Tkinter
[01:49:56] *** Joins: cloudbender5 (~cloudbend@user/cloudbender)
[01:50:09] <blscoe> Hi, where can I find documentation on the -v argument to the `pip install` command?
[01:50:10] <cloudbender5> @deniska thank you, this will be enough for the tutorial
[01:50:25] *** Quits: neilthereildeil (~neilthere@70.21.11.5) (Ping timeout: 246 seconds)
[01:51:12] <Yhg1s> blscoe: 'pip help install'
[01:51:24] <cloudbender5> I am constrained to using 2.7 and whatever ships with it by default
[01:51:54] <cloudbender5> ... while learning
[01:52:03] *** Quits: cloudbender5 (~cloudbend@user/cloudbender) (Client Quit)
[01:52:04] <blscoe> thanks, the pip documentation didn't show the -v argument
[01:52:10] *** Quits: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net) (Ping timeout: 240 seconds)
[01:52:19] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 268 seconds)
[01:52:19] <deniska> cloudbender: if you don't mind me asking, why?
[01:52:32] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 245 seconds)
[01:53:38] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:54:42] *** Joins: inom (~inom@176.59.119.65)
[01:56:21] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[01:57:14] *** Joins: c10l (~c10l@89.34.167.207)
[01:57:23] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:57:56] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[01:58:22] *** Quits: Caesar-EW (~Caesar-EW@84.213.107.109) (Ping timeout: 245 seconds)
[01:59:06] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 268 seconds)
[01:59:35] *** Quits: Akuli (~Akuli@82-203-163-212.bb.dnainternet.fi) (Quit: Leaving)
[02:01:21] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[02:01:40] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 240 seconds)
[02:03:16] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[02:04:37] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 245 seconds)
[02:04:46] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[02:06:13] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[02:06:40] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 240 seconds)
[02:07:17] *** Joins: humbertowoody (~humbertow@2806:107e:f:5f0c:7469:269b:43de:44c1)
[02:09:20] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[02:09:23] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[02:10:31] *** Quits: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3) (Remote host closed the connection)
[02:15:44] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[02:16:24] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[02:16:43] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:16:49] *** Quits: Karel (~Karel@ptr-9091p582syjwt145iue.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[02:17:37] *** Quits: Barones (~Barones@2804:48dc:8500:0:6c0f:c17d:b9b1:b54f) (Quit: Leaving)
[02:19:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[02:19:43] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[02:19:47] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:20:40] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[02:20:54] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[02:22:20] *** Joins: zebragg (~chris@user/zebrag)
[02:22:32] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 245 seconds)
[02:22:35] *** Quits: fortuno51 (~fortuno51@78.10.204.200) (Remote host closed the connection)
[02:23:16] *** Joins: ubert (~Thunderbi@91.141.62.226.wireless.dyn.drei.com)
[02:23:21] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[02:27:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[02:27:57] *** Quits: BigShip (~BigShip@user/bigship) (Quit: BigShip)
[02:28:38] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[02:28:54] *** Joins: BigShip (~BigShip@user/bigship)
[02:29:10] *** Joins: gerty2 (~gerty@user/gerty)
[02:29:29] *** Quits: Batzy (~Batzy@user/batzy) (Ping timeout: 248 seconds)
[02:29:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:30:02] *** Joins: rodstewart (~dmartins@188.ip-149-56-97.net)
[02:30:10] *** Quits: hyper_dave (~hyper_dav@197.156.107.244) (Ping timeout: 240 seconds)
[02:30:14] *** Quits: gerty (~gerty@user/gerty) (Read error: Connection reset by peer)
[02:30:14] *** gerty2 is now known as gerty
[02:30:34] *** Joins: fortuno51 (~fortuno51@78.10.205.85)
[02:32:10] *** Quits: ubert (~Thunderbi@91.141.62.226.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[02:32:16] *** Quits: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) (Quit: Leaving.)
[02:32:31] *** Joins: heco (~redrum@user/redrum88)
[02:32:38] *** `{\[itchyjunk\]} is now known as [itchyjunk]
[02:33:11] *** Joins: hyper_dave (~hyper_dav@197.156.107.244)
[02:33:22] *** Joins: syrius (syrius@titan.stormtek.net)
[02:34:03] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[02:34:15] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[02:34:21] *** Joins: Batzy (~Batzy@user/batzy)
[02:38:20] *** Joins: fortuno51_ (~fortuno51@78.10.204.200)
[02:39:10] *** Quits: fortuno51 (~fortuno51@78.10.205.85) (Ping timeout: 268 seconds)
[02:39:47] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:40:09] *** Quits: Link64 (~li@user/deepspace-link) (Remote host closed the connection)
[02:40:18] *** Quits: BigShip (~BigShip@user/bigship) (Quit: BigShip)
[02:41:01] *** Joins: BigShip (~BigShip@user/bigship)
[02:41:25] *** Quits: cedric (~cedric@2a01:cb11:867:c200:37c:9327:335e:207b) (Quit: Konversation terminated!)
[02:43:46] *** zebragg is now known as zebrag
[02:43:51] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[02:45:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[02:46:53] *** Joins: i0e (~is0ke3@user/is0ke3)
[02:50:39] *** Quits: fortuno51_ (~fortuno51@78.10.204.200) (Remote host closed the connection)
[02:54:51] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-1055-580a-2b7e-a63c.res6.spectrum.com) (Read error: Connection reset by peer)
[02:55:28] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[02:55:43] *** Joins: fortuno51 (~fortuno51@78.10.204.200)
[02:56:13] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[02:56:29] *** Quits: fortuno51 (~fortuno51@78.10.204.200) (Remote host closed the connection)
[02:57:57] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 245 seconds)
[02:58:19] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[02:58:38] *** Joins: fortuno51 (~fortuno51@78.10.204.200)
[02:58:48] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:59:35] *** Joins: Naan (~naan@user/naan)
[03:03:04] *** Joins: thiras (~thiras@user/thiras)
[03:03:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[03:04:35] *** Joins: clf59 (~clf59@user/clf59)
[03:05:48] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Remote host closed the connection)
[03:08:10] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 240 seconds)
[03:08:50] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[03:10:37] *** Quits: {HD} (~{HD}@191.96.185.182) (Ping timeout: 268 seconds)
[03:10:54] *** Quits: blscoe (~blscoe@2a02:c7f:f02a:df00:4c32:e969:22bf:73cf) (Quit: Client closed)
[03:11:54] *** Joins: cjb (~cjb@user/cjb)
[03:13:44] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[03:14:37] *** Quits: hyper_dave (~hyper_dav@197.156.107.244) (Ping timeout: 245 seconds)
[03:15:14] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[03:16:31] *** Joins: {HD} (~{HD}@191.96.185.221)
[03:16:38] *** Joins: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de)
[03:17:01] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[03:17:55] *** Quits: bandit_za (~bandit_za@2c0f:ed28:b016:7760::1ed) (Ping timeout: 246 seconds)
[03:18:36] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:21:17] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:23:16] *** Quits: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net) (Quit: leaving)
[03:23:42] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (Ping timeout: 258 seconds)
[03:24:32] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[03:27:54] *** Quits: {HD} (~{HD}@191.96.185.221) (Ping timeout: 268 seconds)
[03:30:32] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 245 seconds)
[03:31:14] *** Quits: MercilessDeth (~brad@136.49.61.2) (Ping timeout: 252 seconds)
[03:32:34] *** Joins: {HD} (~{HD}@37.19.197.211)
[03:32:53] *** Joins: m4v (~znc@ubuntu/member/m4v)
[03:33:05] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[03:33:58] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:34:04] *** Quits: iomari891 (~iomari891@197.210.76.177) (Ping timeout: 268 seconds)
[03:36:31] *** Quits: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de) (Ping timeout: 268 seconds)
[03:36:32] <rannnn8888> someone know where i worng here :D ? https://bpa.st/2LMQ
[03:36:40] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Ping timeout: 240 seconds)
[03:36:51] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:e136:95b1:bac0:7698:51de)
[03:37:57] *** Joins: hyper_dave (~hyper_dav@197.156.107.244)
[03:38:39] <rannnn8888> FULL https://bpa.st/ZLOA *
[03:38:47] *** Quits: {HD} (~{HD}@37.19.197.211) (Ping timeout: 245 seconds)
[03:38:49] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 248 seconds)
[03:39:55] *** Joins: hexa- (~hexa-@juno.lossy.network)
[03:40:01] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[03:41:35] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[03:42:28] *** Joins: c10l (~c10l@89.34.167.207)
[03:43:11] *** Joins: nrg (~NRG@user/nrg)
[03:44:24] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[03:46:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:47:10] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[03:49:39] *** Joins: minip (minip@user/minip)
[03:50:27] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Quit: Leaving)
[03:50:52] *** Joins: torandu (~sean@94.10.125.197)
[03:53:01] <bjs> rannnn8888: you didn't even say *what* went wrong
[03:54:08] <rannnn8888> bjs https://bpa.st/7OJQ
[03:54:32] <rannnn8888> dont get the data
[03:55:04] <bjs> rannnn8888: it sounds like the website you're connecting to doesn't want bots sending requests
[03:55:12] <bjs> and has extra checks to reject automated HTTP requests
[03:58:22] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 245 seconds)
[03:58:30] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[03:59:13] <bjs> rannnn8888: either pretend to be a web browser harder or actually use a web browser to get the page contents (or if the site has one, use any API it provides to access the information you need)
[03:59:22] *** Quits: Ivyy (~Ivyy@2001:a61:135b:5001:b757:84c0:6614:a165) (Remote host closed the connection)
[03:59:28] <newdimension> Anyone know where's a good spot to get some help with SQLAlchemy? Both gitter and #sqlalchemy seem to not be active
[03:59:49] <SnoopJ> newdimension, questions about it are relevant in this channel
[04:00:21] *** Joins: tilde (~tilde@2a09:4c0:5e0:e::d62)
[04:00:44] <rannnn8888> bjs yes dont found here any api i think its the only way, get the data , maybe its the cookie block my post :X  hard site
[04:01:57] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[04:02:19] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[04:02:24] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[04:04:43] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[04:05:38] <newdimension> SnoopJ: Got it, thanks
[04:05:58] <rannnn8888> bjs i think its the reese84 cookie its make a token
[04:07:08] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[04:07:27] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[04:07:36] <bjs> rannnn8888: well people end up spamming these sites with requests (either on purpose or just badly written scrapers/crawlers) and so large organisations have to implement protections
[04:08:06] <bjs> it kind of sucks if you're doing it properly, morally and legitimately to work around these things but there's not much you can do
[04:08:08] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[04:09:27] <rannnn8888> bjs Yes I give it up big on me: D I do not really need it ,I just wanted to challenge myself
[04:09:29] *** Joins: georgios (~georgios@user/georgios)
[04:10:12] *** Joins: torandu (~sean@94.10.125.197)
[04:11:03] <mefistofeles> ok... subprocess hell here again :P
[04:11:55] <mefistofeles> what's the best way to get some environment variables to be read in a subprocess call? I'm trying to do shell=True but now I don't get CalledProcessError if process fails (it never fails)
[04:12:04] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:13:32] <TML> rannnn8888: have you considered the possible option that you're not getting data back because no data matches your search term? I tried manually searching by that ID and found no results.
[04:15:40] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 240 seconds)
[04:15:47] <TML> mefistofeles: Maybe subprocess.Popen(some_command, env=constructed_env) ?
[04:16:28] <rannnn8888> TML hey , try go to https://esos.nv.gov/EntitySearch/OnlineEntitySearch and in name "GENIUSSQRD CORP." first results and the filing histry
[04:17:03] <rannnn8888> TML  in the post can see the bussines id
[04:17:06] *** Quits: brachamh (~brachamh@user/brachamh) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[04:17:15] *** Quits: clf59 (~clf59@user/clf59) (Quit: Textual IRC Client: www.textualapp.com)
[04:17:21] <rannnn8888> or keep this buy https://esos.nv.gov/EntitySearch/BusinessFilingHistory?businessid=717376
[04:17:27] <rannnn8888> by*
[04:17:50] <TML> well, the 2nd URL you gave just shows a 500 error
[04:17:51] <mefistofeles> TML: let me check that, thanks
[04:18:27] <TML> and searching the offered name in the first URL doesn't give me 717376 as the business ID - it says NV20061310564
[04:18:33] <rannnn8888> TML i think its becouse u have a cookie try remove the reese84 and refresh
[04:19:48] <rannnn8888> TML "and searching the offered name in the first URL doesn't give me 717376 as the business ID - it says NV20061310564"
[04:19:48] *** Quits: tilde (~tilde@2a09:4c0:5e0:e::d62) (Quit: WeeChat 2.3)
[04:19:56] <greatgatsby> mefistofeles, subprocess.run accepts an env param
[04:19:59] <rannnn8888> yes but click the entity
[04:20:04] <mefistofeles> TML: I just don't get why it isn't inheriting from the parent process
[04:20:12] <mefistofeles> greatgatsby: yeah
[04:20:18] <rannnn8888> and then press the "filing history"
[04:20:33] <TML> rannnn8888: No, even in an incog. window, I just get a 500 error
[04:21:14] <rannnn8888> TML but in the first way u said u see the "NV20061310564" nop ?
[04:21:42] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[04:22:05] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[04:22:43] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:f5d7:14d8:321:c83a)
[04:22:55] <TML> rannnn8888: That's correct
[04:24:28] <greatgatsby> mefistofeles, what OS are you on?  On Linux, this prints my env from my shell:  p = subprocess.run(["/usr/bin/env"], capture_output=True); print(p.stdout.decode())
[04:24:49] <mefistofeles> greatgatsby: this is github actions :/
[04:24:58] <mefistofeles> it's an ubuntu
[04:24:59] <greatgatsby> oh, sorry, not familiar with that
[04:25:13] <TML> rannnn8888: Here you go, I just got this error out of them: *WARNING* Automated Traffic to this Web Site is strictly Prohibited.
[04:25:19] <mefistofeles> yeah, it can be a pain haha, but thanks anyways
[04:26:10] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[04:26:20] <rannnn8888> TML LIKE THIS https://ibb.co/8rBDtm7
[04:26:40] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:c12e:7cd3:c833:dd35)
[04:26:41] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:c12e:7cd3:c833:dd35) (Client Quit)
[04:26:48] *** Quits: phlixi (~phlixi@aftr-62-216-205-171.dynamic.mnet-online.de) (Ping timeout: 272 seconds)
[04:27:20] <TML> rannnn8888: automated traffic to that site is strictly prohibited
[04:27:26] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[04:27:49] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:28:02] <rannnn8888> TML hey , try go to https://esos.nv.gov/EntitySearch/OnlineEntitySearch and in name "GENIUSSQRD CORP." first results and the filing histry
[04:28:11] *** Joins: Fiji (~Fiji@user/fiji)
[04:28:12] <rannnn8888> U get this in this way ?
[04:28:34] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Read error: Connection reset by peer)
[04:29:16] *** Joins: torandu (~sean@94.10.125.197)
[04:29:58] *** Joins: MercilessDeth (~brad@136.49.61.2)
[04:31:05] *** Quits: gloin (~gloin@user/gloin) (Remote host closed the connection)
[04:31:54] <TML> rannnn8888: Sorrym, but given the statement by the site owner that "automated traffic to that site is strictly prohibited", I have no desire to assist further with automating traffic to that site
[04:32:07] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 245 seconds)
[04:32:26] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[04:32:39] <rannnn8888> TML its ok Thanks
[04:32:55] <Gustavo6046> python object oriented programming
[04:32:55] *** Joins: Haxxa (~Haxxa@122.199.46.17)
[04:32:59] <Gustavo6046> :p
[04:33:51] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 258 seconds)
[04:34:59] <TML> mefistofeles: given that it's actually running via Github Actions, they probably have a jailed process for running shells that discards all parent environment for security reasons
[04:35:18] *** Quits: sveinse (~sveinse@2a01:799:55e:1000:c23f:d5ff:fe69:c6fb) (Ping timeout: 276 seconds)
[04:35:42] <TML> > GitHub sets default environment variables for each GitHub Actions workflow run. You can also set custom environment variables in your workflow file.
[04:36:20] <mefistofeles> yeah, we did that, but I actually found what it seems to be a conflicting redefinition of env vars
[04:36:23] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[04:36:24] <mefistofeles> I'm checking now
[04:36:25] <mefistofeles> thanks TML
[04:36:36] <TML> (TBEH, I'm actually more than a little surprised they allow `subprocess` in that environment)
[04:37:17] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[04:37:40] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[04:37:46] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[04:38:22] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[04:40:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[04:41:27] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[04:41:57] *** Joins: extropiator (~extropiat@fixed-187-188-51-226.totalplay.net)
[04:42:12] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2)
[04:42:37] *** Joins: digilink (~digilink@user/digilink)
[04:42:57] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[04:43:16] *** Joins: jstein_ (~jstein@gentoo/developer/jstein)
[04:44:53] <newdimension> I'd appreciate feedback on how I should organize my project. This is the current structure https://imgur.com/a/g9QqRuu . Description to follow:
[04:46:12] <newdimension> The project is a scrapper that scraps a website and saves the data in Postgres. It uses SQLAlchemy and requests. I also want to create a read-only API endpoint so I decided to use Flask
[04:46:40] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 240 seconds)
[04:46:51] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:47:36] *** Joins: iomari891 (~iomari891@102.91.5.113)
[04:48:21] *** Quits: extropiator (~extropiat@fixed-187-188-51-226.totalplay.net) (Quit: Client closed)
[04:48:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[04:49:03] *** Joins: Mija (~Mija@user/mija)
[04:51:13] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[04:51:27] <newdimension> To not spam the chat, I just put the questions here https://dpaste.org/jexw
[04:51:33] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[04:52:04] *** Quits: emerent (~quassel@p200300cd57058cabba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[04:52:54] *** Joins: emerent (~quassel@p200300cd57058cceba27ebfffed28a59.dip0.t-ipconnect.de)
[04:56:51] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:7469:269b:43de:44c1) (Ping timeout: 258 seconds)
[04:58:22] *** Quits: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net) (Ping timeout: 246 seconds)
[05:00:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:00:55] *** Joins: {HD} (~{HD}@102.165.16.132)
[05:01:53] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[05:03:57] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[05:04:32] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[05:04:39] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[05:04:50] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[05:06:09] *** Joins: pycurious (~Adium@user/pycurious)
[05:07:04] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[05:07:22] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[05:07:35] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[05:08:27] *** Joins: Lando-SpaceIzzle (~Lando@user/lando-spacepimp)
[05:11:35] *** Quits: iomari891 (~iomari891@102.91.5.113) (Remote host closed the connection)
[05:12:09] *** Quits: Lando-HoloNet (~Lando@user/lando-spacepimp) (Ping timeout: 248 seconds)
[05:13:10] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[05:13:28] *** Joins: iomari891 (~iomari891@102.91.4.32)
[05:16:13] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[05:18:22] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 245 seconds)
[05:22:57] *** Quits: {HD} (~{HD}@102.165.16.132) (Ping timeout: 245 seconds)
[05:23:07] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[05:26:04] *** Joins: humbertowoody (~humbertow@2806:107e:f:5f0c:8d0e:2e34:ab83:be02)
[05:28:06] *** Joins: brachamh_ (~brachamh@user/brachamh)
[05:29:45] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[05:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:35] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:8d0e:2e34:ab83:be02) (Ping timeout: 258 seconds)
[05:33:29] *** Quits: iomari891 (~iomari891@102.91.4.32) (Ping timeout: 248 seconds)
[05:34:12] *** Joins: vlm (~vlm@user/vlm)
[05:34:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[05:37:04] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[05:39:49] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[05:40:40] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:f5d7:14d8:321:c83a) (Ping timeout: 240 seconds)
[05:41:14] *** Joins: {HD} (~{HD}@191.96.185.62)
[05:41:34] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[05:41:42] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 268 seconds)
[05:46:10] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:84e3:8129:6be2:9170)
[05:47:43] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[05:49:57] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[05:50:32] *** Joins: moog (~moog@107.242.124.145)
[05:52:07] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:53:30] *** Joins: SuperLag (~akulbe@user/superlag)
[05:57:53] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[05:58:10] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[05:58:40] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[05:58:56] *** Joins: humbertowoody (~humbertow@2806:107e:f:5f0c:8d0e:2e34:ab83:be02)
[06:00:37] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[06:00:42] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:01:55] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[06:03:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:8d0e:2e34:ab83:be02) (Ping timeout: 240 seconds)
[06:05:02] *** Quits: jstein_ (~jstein@gentoo/developer/jstein) (Ping timeout: 245 seconds)
[06:06:29] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[06:06:44] *** Quits: {HD} (~{HD}@191.96.185.62) (Quit: ZNC 1.6.5+deb1+deb9u2 - http://znc.in)
[06:07:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[06:07:40] *** Joins: qlixed (~qlixed@181.44.129.13)
[06:08:51] *** Joins: wyclif (~wyclif@user/wyclif)
[06:11:02] *** Joins: humbertowoody (~humbertow@2806:107e:f:5f0c:8d0e:2e34:ab83:be02)
[06:11:26] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[06:13:24] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[06:13:36] *** Joins: BUSY (~BUSY@user/busy)
[06:13:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[06:14:19] *** Joins: wyclif (~wyclif@user/wyclif)
[06:14:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:14:33] *** Joins: dulanic (~dulanic@47.187.144.163)
[06:15:45] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:18:15] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[06:19:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[06:25:40] *** Quits: brachamh_ (~brachamh@user/brachamh) (Ping timeout: 240 seconds)
[06:27:07] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 245 seconds)
[06:27:14] *** Joins: brachamh_ (~brachamh@user/brachamh)
[06:27:27] *** Joins: mambang (~mambang@user/mambang)
[06:28:15] *** Joins: supbo (~kenan@li227-215.members.linode.com)
[06:29:37] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 258 seconds)
[06:29:39] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:30:03] *** brabrax_ is now known as brabrax
[06:30:23] *** Quits: blddk (~admin@185.233.252.229) (Quit: ZNC 1.8.2 - https://znc.in)
[06:31:11] *** Joins: blddk (~admin@185.233.252.229)
[06:31:47] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[06:32:37] *** Joins: extropiator (~extropiat@192.252.220.41)
[06:35:13] *** Joins: rnm (~mambang@user/mambang)
[06:36:10] *** Quits: mambang (~mambang@user/mambang) (Ping timeout: 240 seconds)
[06:38:11] *** Quits: jess (~jess@libera/staff/jess) (Quit: jumping servers)
[06:38:16] *** Joins: remline (~remline@user/remline)
[06:38:58] *** Joins: jess (~jess@libera/staff/jess)
[06:39:17] *** Joins: nbao (~nbao@187.20.162.127)
[06:40:21] *** Quits: paravida (~myChateau@user/paravida) (Remote host closed the connection)
[06:41:45] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[06:42:00] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[06:42:51] <remline> (Pdb) el ==> <Element 'title' at 0x7fd72529be00>, BUT (Pdb) not el ==> True. Since el isn't None, why is not el True?
[06:42:56] <remline> el is a xml.etree.ElementTree.Element
[06:43:20] <remline> (confused C programmer here... :-0)
[06:50:32] <vdamewood> remline: What's bool(el) ?
[06:51:05] *** Joins: Wulf (~Wulf@user/wulf)
[06:51:42] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 245 seconds)
[06:52:11] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:52:11] *** FinnElija is now known as Guest4965
[06:52:11] *** Quits: Guest4965 (~finn_elij@user/finn-elija/x-0085643) (Killed (silver.libera.chat (Nickname regained by services)))
[06:52:11] *** finn_elija is now known as FinnElija
[06:53:22] <remline> vdamewood: bool(el) is False. I saw that objects can override the __bool__ function, but I'm not sure if Element does?
[06:53:58] <vdamewood> What's the full name of Element, incuding namespace(s)?
[06:54:27] <remline> xml.etree.ElementTree.Element
[06:54:39] *** Joins: stpz (~stpz@27.190.93.104)
[06:54:42] <remline> cf. https://docs.python.org/3/library/xml.etree.elementtree.html
[06:55:04] *** Joins: trace987 (~trace@95.90.106.112)
[06:55:06] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[06:55:47] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[06:56:20] *** Quits: stpz (~stpz@27.190.93.104) (Client Quit)
[06:56:25] <remline> I tried calling el.__bool__() in the debugger -- not define -- perhaps that is the wrong incantation.
[06:57:27] <vdamewood> return len(self._children)
[06:57:33] <vdamewood> ^ That's its definition.
[06:57:35] <SnoopJ> bool(obj) is the 'canonical' spelling that works even if the immediate object does not define how to do that
[06:57:57] <vdamewood> oope:  != 0
[06:58:00] <vdamewood> oops
[06:58:12] <vdamewood> return len(self._children) != 0
[06:58:15] <remline> vdamewood: Thanks, that makes sense. Where did you find that definition?
[06:58:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[06:58:44] <SnoopJ> remline, bool(obj) is generally False (obj is "falsey") if it is empty/null in some sense, but it's up to the implementer's discretion. To clarify, None is not a boolean type, it's a distinct singleton type that is falsey.
[06:58:57] <SnoopJ> (and True ("truthy") otherwise)
[06:59:02] <vdamewood> import xml.etree.ElementTree \\ print(xml.etree.ElementTree.__file__) then less that file.
[06:59:17] <SnoopJ> the only falsey string is "", for instance, all nonempty strings will become True if you call bool() on them
[06:59:30] <vdamewood> even '0'
[07:03:45] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[07:03:53] <remline> Thanks for the great information, SnoopJ and vdamewood! Mystery solved.
[07:03:56] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[07:04:22] <remline> The behavior was not intuitive to me, but I will probably understand the rationale better with time.
[07:05:10] <vdamewood> Well, there's also a big fat warning saying the behavior will change in the future in my copy, so maybe it will change in the future to something that makes a little more sense.
[07:06:23] <SnoopJ> remline, this is a helpful reference: https://docs.python.org/3/library/stdtypes.html#truth-value-testing
[07:07:46] <SnoopJ> The tutorial would be generally useful as well, but that specific spot will tell you a lot about how booleans work. The important difference from C is that many objects (particularly "containers") know (or inherit) a meaningful way to turn themselves into booleans
[07:07:57] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:07:58] <remline> I bet Element defines this way so that a recursive tree parse can say something like while (Element ...)
[07:08:40] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:08:43] <vdamewood> I'd say it's because of this, from SnoopJ's link: empty sequences and collections: '', (), [], {}, set(), range(0)
[07:09:15] <SnoopJ> yea, it's "empty" in this sense which matches the (conventional!) pattern
[07:10:28] <remline> The semantic challenge is that this Element has text, but just no child elements. Hardly "empty" in a colloquial sense. :)
[07:10:30] <vdamewood> And it has all the overrides needed to use it as a sequence.
[07:10:46] <SnoopJ> remline, well, it depends on whose colloquium it is :)
[07:10:56] <vdamewood> In XML, a text node is a child of the element.
[07:10:59] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[07:11:01] <remline> Nevertheless, I can't complain too much. In C, I'd be implementing all these data structures myself!!
[07:11:28] <remline> So i'll accept the library's semantics happily.
[07:11:37] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Ping timeout: 248 seconds)
[07:11:59] <vdamewood> I mean, if you have something like this <title>My Page</title>, then that's a 'title' element, with a single child  PCDATA node "My Page".
[07:12:00] <remline> vdamewood: Agreed -- maybe that is partly why they are considering new future behavior
[07:12:01] <SnoopJ> You'll definitely cock your head at more than a few things in Python as you get used to it. I'd say the biggest pitfall there is getting used to how iteration works (i.e. we care about iterable objects first and foremost)
[07:13:39] *** Quits: moog (~moog@107.242.124.145) (Quit: Leaving)
[07:14:13] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:16:10] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[07:17:40] *** Quits: remline (~remline@user/remline) (Quit: leaving)
[07:18:24] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[07:20:02] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[07:21:16] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[07:21:33] *** Joins: sgreadly (~sgreadly@2407:7000:a2f5:e803:1d6a:5d8c:143c:db92)
[07:21:46] *** Joins: F1R3DoG (~textual@2806:108e:19:9b24:34ff:1127:4ffc:50ab)
[07:21:56] *** Joins: de-facto (~de-facto@user/de-facto)
[07:22:52] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:212d:940:ee89:421f) (Ping timeout: 272 seconds)
[07:24:44] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:25:10] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:26:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Killed (NickServ (GHOST command used by [_])))
[07:26:20] *** [_] is now known as [itchyjunk]
[07:26:35] *** Quits: p-i- (~Ohmu@2403:6200:8870:d305:1d49:a92d:d62f:c7f3) (Remote host closed the connection)
[07:27:11] <sybariten> Evening. I'm confused by some basic file operations here, for an exercise
[07:27:15] *** Joins: p-i- (~Ohmu@2403:6200:8870:d305:999b:e827:e7d7:8b75)
[07:27:59] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Remote host closed the connection)
[07:28:27] <sybariten> So, if i'm correct, the function open() returns a file object which has a number of methods, for instance read() and readlines()
[07:29:44] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:30:25] *** Joins: manin (~x@185.242.190.95)
[07:30:47] <sybariten> in one exercise here i was just supposed to open a file, and store its contents into a variable. Then answer with the number of chars in this file. So i used open(), then read() , then len()
[07:31:00] *** Quits: nbao (~nbao@187.20.162.127) (Quit: leaving)
[07:31:20] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:8d0e:2e34:ab83:be02) (Ping timeout: 258 seconds)
[07:31:27] <SnoopJ> sybariten, yep
[07:32:11] <sybariten> oh and I was supposed to do this by storing the contents in a variable. Fine. in the following exercise however, i am supposed to "Use my variable from the earlier exercise and answer with the contents on line 12" .
[07:32:51] *** Quits: F1R3DoG (~textual@2806:108e:19:9b24:34ff:1127:4ffc:50ab) (Quit: Textual IRC Client: www.textualapp.com)
[07:33:15] <sybariten> Now, i'm thinking to do this i would only need to open a file, call readlines on the resulting object, into a variable thatList...   and then do something like print(thatList[12])
[07:33:15] <derpadmin> can you loop through readlines?
[07:33:26] <derpadmin> with a counter and stuff?
[07:33:41] <sybariten> i could but... isnt that item accessible directly, since it's a list?
[07:34:08] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[07:34:11] <ATAD> sybariten: A file object is not a list, so you can't index into it, but you can iterate over it:
[07:34:14] *** Joins: F1R3DoG (~F1R3DoG@2806:108e:19:9b24:34ff:1127:4ffc:50ab)
[07:34:16] <ATAD> for line in file_object:
[07:34:24] <ATAD>     print(line)
[07:34:26] <ATAD> for example
[07:34:39] <derpadmin> perhaps you can split on \n ?
[07:34:43] <derpadmin> then you have a list?
[07:34:53] <derpadmin> but it would be thatList[11]
[07:34:53] <ATAD> that would work, yes
[07:35:16] <sybariten> anyhow, what confuses me is that i'm supposed to use "the variable from before". That variable got its content from read() , on a file object. If my approach now is to use readlines() instead, i wont use that variable....?
[07:35:40] <sybariten> ATAD: but with readlines() i will have a list?
[07:35:49] <Repiphany> readlines() does give a list, yes
[07:36:20] <SnoopJ> sybariten, your initial idea sounds reasonable, the separate variable is probably wanting you to read the contents, store them in a name, then take the length of that value.
[07:36:46] <SnoopJ> assuming the file asks you for the number of characters (or bytes, depending on your file mode) in the file
[07:36:49] <sybariten> SnoopJ: sorry i dont get it
[07:37:02] <sybariten> i alreadyu did exercise A, it passed
[07:37:14] <SnoopJ> sybariten, I don't know what your question is, then.
[07:37:36] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[07:38:08] <Repiphany> You can't use both .read() and .readlines() without moving to the start of the file in between
[07:38:08] <sybariten> i did f = open(file), fileContents = f.read() , myAnswerToTheExercise = len(fileContents)
[07:38:55] <sybariten> now, the instructions for exercise B literally say :  "Use the variable from the earlier exercise and answer with the contents on line 12"
[07:39:02] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[07:39:14] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: Ping timeout (120 seconds))
[07:39:38] <sybariten> that variable, as i see it, would be fileContents, and it's not something i can use with for instance readlines() ...
[07:39:42] *** Quits: samathy (~samathy@user/samathy) (Ping timeout: 268 seconds)
[07:39:43] <Repiphany> You can process fileContents to get the 12 line
[07:39:50] <Repiphany> It's just a string
[07:40:10] <Repiphany> with all of the newline characters still in it
[07:40:43] <Repiphany> 12th
[07:41:13] <sybariten> Yes, sure... i just had a hunch when seeing the (whole) exercise (that is all about file operations) that first we would do the most easy, which is using read() , then try out readlines() .... this is how it could be presented in a textbook for instance. But maybe i'm overthinking
[07:41:34] <sybariten> doing the newline parse thing will bemore about text processing though than file operations....
[07:42:32] *** Joins: samathy (~samathy@user/samathy)
[07:42:50] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[07:43:20] *** Joins: humbertowoody (~humbertow@2806:107e:f:5f0c:8d0e:2e34:ab83:be02)
[07:43:36] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[07:43:46] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: puadxtub)
[07:44:05] <ATAD> hmm, I see...technically if you want re-use things, you can re-seek the file to the start with "file_object.seek(0)", in this case: "f.seek(0)" followed by file_lines_list = f.readlines()
[07:44:48] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[07:44:59] <sybariten> ATAD: i think thats overkill considering where we are standing and "what we know" when we start doing this exercise .... it basically follows what a beginner would read about , when learning about file I/O .
[07:45:25] <ATAD> that may be true, yes
[07:45:57] <sybariten> sometimes you just have a feeling for how they want you to solve certain exercises, without knowing exactly, you know what i mean? But i will be looking at our video lectures again, its possible that the teacher touches on these exercises actually, and literally talks about how to solve them.
[07:46:04] <sybariten> thanks anyhow
[07:46:10] <ATAD> welcome
[07:46:21] <ATAD> good luck, this is a great language, keep it up!
[07:46:28] <sybariten> hehe yeah its a super language
[07:47:10] *** Quits: dcaro_away (~dcaro@user/dcaro) (Ping timeout: 240 seconds)
[07:47:13] *** Joins: dcaro (~dcaro@user/dcaro)
[07:47:21] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:48:08] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[07:49:50] *** Joins: rama (~rama@76.14.13.159)
[07:50:21] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:50:36] *** Quits: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl) (Ping timeout: 268 seconds)
[07:51:03] *** Quits: jess (~jess@libera/staff/jess) ()
[07:51:10] *** Quits: martums (~martums@user/martums) (Read error: Connection reset by peer)
[07:51:40] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[07:51:57] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[07:53:10] *** Joins: djapo (~archangel@user/djapo)
[07:54:12] *** Joins: zebrag (~chris@user/zebrag)
[07:54:25] *** Quits: sgreadly (~sgreadly@2407:7000:a2f5:e803:1d6a:5d8c:143c:db92) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:56:45] *** Joins: martums (~martums@user/martums)
[07:59:35] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[08:01:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[08:03:06] *** Joins: wyclif (~wyclif@user/wyclif)
[08:04:25] * foo does a quick test to see if logger.exception() stops code execution 
[08:04:30] <foo> Looks like, no.
[08:07:22] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 258 seconds)
[08:07:43] <SnoopJ> foo, well, that's not a logger's job, which is logging
[08:08:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[08:08:22] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 245 seconds)
[08:08:35] *** Joins: wyclif (~wyclif@user/wyclif)
[08:08:43] <foo> SnoopJ: Well then, that makes sense. Heh. Thank you.
[08:09:15] *** Joins: manin (~x@185.242.190.95)
[08:09:40] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[08:10:52] *** Joins: jazzy (~jaziz@2600:380:8510:c59b:9963:e1ef:f713:608a)
[08:12:18] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:12:46] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:13:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[08:14:03] *** Joins: wyclif (~wyclif@user/wyclif)
[08:14:21] *** Joins: matsaman (~matsaman@user/matsaman)
[08:14:31] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:15:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:16:47] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: puadxtub)
[08:16:51] *** Quits: rama (~rama@76.14.13.159) (Remote host closed the connection)
[08:17:16] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[08:17:21] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:17:39] <gcbirzan> If anything, I'd hope it doesn't stop execution, heh.
[08:18:16] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[08:19:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:19:05] <Jonno_FTW> in pycharm when using ipython, is there a way to turn off previewing large dicts/arrays?
[08:20:52] *** Parts: lordrishav (~LordRisha@user/lordrishav) ()
[08:21:48] <matsaman> probably
[08:22:00] <Jonno_FTW> using `del` hepled
[08:22:34] <matsaman> helped what
[08:22:49] <Jonno_FTW> helped with the delay, I just removed the offending dict
[08:24:26] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:25:19] *** Quits: manin (~x@185.242.190.95) (Quit: Leaving)
[08:28:07] *** Joins: papna (~user@c-73-158-250-22.hsd1.ca.comcast.net)
[08:29:49] *** Quits: Mija (~Mija@user/mija) (Quit: Mija)
[08:31:26] *** Joins: nickodd (~nickodd@user/nickodd)
[08:31:46] *** Joins: torandu (~sean@94.10.125.197)
[08:32:06] *** Joins: f8l12 (~f8l12@154.3.42.18)
[08:32:42] *** Joins: rnm_ (~mambang@user/mambang)
[08:33:12] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[08:33:58] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:34:04] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[08:34:21] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:34:30] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[08:35:01] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:1d6a:5d8c:143c:db92)
[08:35:02] *** Quits: samathy (~samathy@user/samathy) (Ping timeout: 245 seconds)
[08:35:04] *** Joins: node1 (~node1@user/node1)
[08:35:10] *** Quits: rnm (~mambang@user/mambang) (Ping timeout: 240 seconds)
[08:35:26] *** Joins: samathy (~samathy@user/samathy)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Quits: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com) (Changing host)
[08:36:30] *** Joins: newdimension (~newdimnes@user/newdimension)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:51] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 268 seconds)
[08:38:18] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:1d6a:5d8c:143c:db92) (Client Quit)
[08:39:57] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:40:27] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[08:40:41] *** Joins: pegaso (~reis-r@131.72.121.3)
[08:41:56] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:43:43] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:44:12] *** Joins: extropiator18 (~extropiat@162.253.68.204)
[08:44:28] *** Quits: extropiator (~extropiat@192.252.220.41) (Ping timeout: 246 seconds)
[08:44:33] *** Quits: alxndr (~alexander@ybti.net) (Remote host closed the connection)
[08:45:56] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Remote host closed the connection)
[08:46:22] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:46:24] *** Joins: alxndr (~alexander@ybti.net)
[08:48:20] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[08:48:25] *** Quits: ckdcreation (~ckdCreati@147.55.133.129) (Read error: Connection reset by peer)
[08:48:39] *** Joins: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:49:01] <Jonno_FTW> hexnewbie: I got my code from yesterday down from 100 hours to 7 minutes
[08:49:25] <matsaman> nice
[08:49:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[08:49:55] <Jonno_FTW> trick was to move np.linalg.norm out of a loop
[08:50:20] <Jonno_FTW> and also to remove any words that aren't a valid english word
[08:50:44] *** Quits: mgocobachi (~m@ancrae.com) (Quit: Winter is coming)
[08:51:28] *** Joins: djapo (~archangel@user/djapo)
[08:51:53] *** Joins: mgocobachi (~m@ancrae.com)
[08:52:47] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[08:53:31] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Remote host closed the connection)
[08:54:14] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[08:54:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[08:55:05] *** Quits: mgocobachi (~m@ancrae.com) (Client Quit)
[08:55:20] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:55:36] *** Joins: mgocobachi (~m@ancrae.com)
[09:00:26] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[09:01:04] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[09:02:15] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:03:03] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:03:50] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[09:05:47] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[09:12:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:12:49] *** Quits: extropiator18 (~extropiat@162.253.68.204) (Ping timeout: 246 seconds)
[09:13:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[09:16:11] *** Joins: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca)
[09:16:17] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 245 seconds)
[09:18:07] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[09:18:31] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[09:18:54] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[09:20:31] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:d305:1d49:a92d:d62f:c7f3)
[09:23:10] *** Quits: p-i- (~Ohmu@2403:6200:8870:d305:999b:e827:e7d7:8b75) (Ping timeout: 240 seconds)
[09:26:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[09:27:35] *** Joins: stranac (~stranac@195.29.239.126)
[09:28:06] *** Joins: wyclif (~wyclif@user/wyclif)
[09:28:43] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[09:29:51] *** Joins: extropiator (~extropiat@107.181.178.80)
[09:30:27] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[09:30:57] *** Joins: c10l (~c10l@89.34.167.207)
[09:33:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[09:33:59] *** Joins: wyclif (~wyclif@user/wyclif)
[09:35:01] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:1a4f:6839:5b37:81ba)
[09:35:02] *** Quits: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca) (Quit: Lost terminal)
[09:36:42] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:37:19] *** Quits: extropiator (~extropiat@107.181.178.80) (Ping timeout: 246 seconds)
[09:37:32] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 245 seconds)
[09:38:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[09:39:20] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[09:39:24] *** Quits: F1R3DoG (~F1R3DoG@2806:108e:19:9b24:34ff:1127:4ffc:50ab) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:39:29] *** Joins: wyclif (~wyclif@user/wyclif)
[09:39:38] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[09:40:29] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[09:44:00] *** Quits: ST47 (~ST47@wikimedia/st47) (Remote host closed the connection)
[09:45:18] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 268 seconds)
[09:45:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[09:46:39] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:eddb:c93b:fa60:14e0) (Ping timeout: 258 seconds)
[09:47:54] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[09:50:45] *** Joins: ST47 (~ST47@wikimedia/st47)
[09:50:51] *** Joins: xmj (~xmj@user/xmj)
[09:50:53] <xmj> g'morning
[09:51:13] <xmj> which python version introduced support for f-strings?
[09:51:23] <xmj> 3.6, right?
[09:51:43] <Jonno_FTW> xmj: https://docs.python.org/3/reference/lexical_analysis.html#f-strings
[09:51:54] <Jonno_FTW> *New in version 3.6.*
[09:52:46] <enyc> xmj: https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python   *appears* to explain well and agrees
[09:52:57] <enyc> theres an old f-strings thing too, printf c like or so
[09:54:09] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[09:55:24] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:58:16] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[09:59:10] <xmj> yeah I ended up finding the PEP-498 after asking here
[09:59:11] <djapo> how do i check if all values in a column are nan in pandas
[09:59:13] <djapo> ?
[09:59:13] <xmj> tyvm
[09:59:20] * xmj wavs
[09:59:21] *** Parts: xmj (~xmj@user/xmj) ()
[09:59:33] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[09:59:39] <djapo> df['uuid'].isnull().all()  ?
[10:00:10] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[10:00:37] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:02:16] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[10:03:22] <jinsun> djapo: yes
[10:05:28] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[10:06:58] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 258 seconds)
[10:07:03] *** Joins: Obo (~roberto@78.77.166.185)
[10:12:58] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[10:13:23] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[10:15:37] *** Quits: Lando-SpaceIzzle (~Lando@user/lando-spacepimp) (Ping timeout: 248 seconds)
[10:17:17] *** Quits: orzel (~orzel@2a01:e0a:df:6ba0:1cfe:b463:3789:a442) (Remote host closed the connection)
[10:18:53] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Ping timeout: 252 seconds)
[10:18:53] *** Quits: AkechiShiro (~licht@user/akechishiro) (Ping timeout: 252 seconds)
[10:19:58] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[10:20:01] *** Joins: AkechiShiro (~licht@user/akechishiro)
[10:20:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[10:23:03] *** Quits: kadobanana (~mud@user/kadoban) (Ping timeout: 276 seconds)
[10:23:51] *** Joins: rany_ (~rany@user/rany)
[10:24:10] *** Quits: rany (~rany@user/rany) (Ping timeout: 240 seconds)
[10:25:54] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[10:26:26] <hexnewbie> Jonno_FTW: Oh, that's great. Could I see the code because I cannot exactly imagine how the np.linalg.norm works outside the loop? :)
[10:27:16] <Jonno_FTW> hexnewbie: https://bpa.st/AC3Q
[10:29:17] <Jonno_FTW> I have a new idea though. I will just generate 10 points evenly spaced out in the dataset, then find the nearest word to them
[10:29:41] *** Joins: upsala (~zcb@81.17.24.203)
[10:29:44] <hexnewbie> Jonno_FTW: Oh. Ah. Such an optimization crossed my mind (mind you, it's *why* one uses numpy), but since you said 50 dimension points, and my knowledge of numpy is limited to trying it out, it didn't occur to me you could.
[10:30:11] *** Joins: frost (~frost@59.71.240.119)
[10:30:34] <Jonno_FTW> yeah I should have rememberd that  numpy is much faster when you do everything at once
[10:30:41] <hexnewbie> When you suggested Java, I was thinking, can one use numpy to compute the *whole* distance matrix, to save oneself from the slow Python loop and move that to C, but since you were trying to avoid storing the whole thing in memory that was out of the question
[10:30:54] <Jonno_FTW> the whole distance matrix is 3gb :S
[10:31:05] *** Joins: kosh (~kosh@user/kosh)
[10:31:16] <hexnewbie> row-by-row is a fine compromise
[10:31:33] <Jonno_FTW> the rows get smaller as you go along too
[10:32:18] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[10:32:55] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[10:33:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:35:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[10:36:04] *** Joins: wyclif (~wyclif@user/wyclif)
[10:37:05] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[10:38:20] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 268 seconds)
[10:40:48] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[10:42:32] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 245 seconds)
[10:43:15] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[10:43:23] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 258 seconds)
[10:44:06] *** Quits: reset (~reset@user/reset) (Quit: reset)
[10:45:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:46:19] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:51] *** Joins: seednode (~seednode@user/seednode)
[10:48:34] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[10:49:56] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:50:04] *** Joins: manti7 (~manti7@176.10.104.94)
[10:50:07] *** Quits: ExeciN (~ExeciN@user/nicexe) (Write error: Broken pipe)
[10:50:52] *** Joins: pycurious (~Adium@user/pycurious)
[10:51:22] *** Quits: menace (~someone@user/menace) (Quit: menace)
[10:52:25] *** Quits: hyper_dave (~hyper_dav@197.156.107.244) (Ping timeout: 248 seconds)
[10:52:43] *** Joins: rendar (~rendar@user/rendar)
[10:53:07] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[10:54:25] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:58:29] *** Joins: hyper_dave (~hyper_dav@197.156.107.244)
[10:58:34] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[10:59:04] *** Quits: Mogget (Mogget@vogon.moshwire.com) (Quit: WeeChat 2.7.1)
[10:59:45] *** Joins: Mogget (Mogget@vogon.moshwire.com)
[10:59:54] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 268 seconds)
[11:00:34] *** Joins: gusto (~Augustus@109.255.100.54)
[11:01:58] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:04:32] * enyc meows
[11:05:00] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[11:05:03] *** Joins: rany (~rany@user/rany)
[11:05:25] * matsaman meows what is so funny's
[11:07:27] *** Joins: Hax0r (~Hax0r@2001:16a2:c012:f612:540d:f930:6f33:7)
[11:08:18] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[11:10:10] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:84e3:8129:6be2:9170) (Ping timeout: 240 seconds)
[11:10:17] <rendar> is that common to have a .py file with all the exceptions of the submodule?
[11:14:31] *** Joins: nickodd (~nickodd@user/nickodd)
[11:16:13] <jinsun> not sure if common but I do it
[11:16:45] <jinsun> exceptions.py inside the package for all the custom exceptions
[11:18:03] <jinsun> requests does it too https://github.com/psf/requests/blob/main/requests/exceptions.py
[11:18:04] <hexnewbie> Put the exception in the namespace where it feels it belongs to (which should usually be obvious), and if it is common for the package, it shall be in the package. And since putting real stuff in __init__.py is frowned upon (I do it, but not for exceptions), a separate errors.py/exceptions.py seems to make most sense for package-wide exceptions
[11:19:17] <hexnewbie> I don't like the tautology (foobar.error.FooError), but it's the least bad option.
[11:20:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[11:20:54] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[11:21:05] *** Quits: Hax0r (~Hax0r@2001:16a2:c012:f612:540d:f930:6f33:7) (Quit: Leaving)
[11:21:24] <hexnewbie> I also don't like that it namespaces things based on type, not purpose/context, but still
[11:21:53] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:22:19] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Ping timeout: 246 seconds)
[11:23:17] <jinsun> It makes things easy when doing try except, don't have to figure out which submodule the Exception was defined it
[11:24:52] <cluelessperson> rendar, if it makes sense to have to dedicate a file just for that, sure why not
[11:24:55] <cluelessperson> not a big deal though
[11:25:04] <cluelessperson> I'd avoid making your own exceptions
[11:25:21] <hexnewbie> jinsun: Oh, no, I mean as opposed to foobar.FooError - which would require you to edit a file named __init__.py, which is annoying to jump to in an editor, if you have 20 of those, and can make your imports weird due to cyclic module dependencies
[11:26:20] <hexnewbie> jinsun: Aside from other reasons it's disliked. I only ever use foobar.baz.FooError for errors mostly local for baz
[11:27:33] *** Joins: dvx (~dvx@185.63.97.64)
[11:28:14] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:84e3:8129:6be2:9170)
[11:28:49] *** Joins: ubert (~Thunderbi@91.141.62.226.wireless.dyn.drei.com)
[11:30:18] *** Joins: torandu (~sean@94.10.125.197)
[11:30:33] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:30:33] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[11:30:51] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[11:31:07] <jinsun> I use foo.baz.exceptions.FooError for errors local to foo.baz, unless there is only one (or maybe 2) custom exceptions defined then I just leave it inside foo.bar
[11:32:50] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:33:22] *** Quits: dre (~dre@2001:8003:c932:c301:76d5:786e:6c0b:b2c7) (Quit: Leaving)
[11:35:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[11:35:31] *** Lord_of_Life_ is now known as Lord_of_Life
[11:38:48] <df_data> Hi all, can you open an sqlite database from a windows share, I'm getting ‘unable to open database’
[11:39:37] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 245 seconds)
[11:39:46] <vdamewood> The fact that it's on a Windows share shouldn't matter. Other things like whether the file is opened by another process or if the share permissions allow it would matter.
[11:42:18] <df_data> https://bpa.st/ZTXQ
[11:42:28] <df_data> Here my code
[11:42:46] <df_data> I can UNc to the path fine
[11:43:27] <vdamewood> Ooohh... yeah. That might be a problem. Try mapping it to a drive.
[11:43:30] <df_data> Also tried \\\\192....\ and r’\\192...\
[11:43:50] <df_data> Can it not be down without mapping?
[11:44:01] <jinsun> does os.path.exists(path) give True?
[11:45:00] <jinsun> just checking the obvious thing, if python cannot find it then sqlite won't be able to open it
[11:45:41] *** Quits: f8l12 (~f8l12@154.3.42.18) (Quit: Leaving)
[11:46:21] <vdamewood> I'm tempted to try this out myself.
[11:48:11] <jinsun> oh actually it can connect, it just creates a new file
[11:48:11] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Read error: Connection reset by peer)
[11:48:43] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[11:49:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[11:50:01] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 248 seconds)
[11:50:01] <deniska> df_data: https://www.sqlite.org/draft/useovernet.html sqlite generally recommends against using it on shared filesystems because they sometimes lack some consistency mechanisms (but may lie about having them)
[11:50:40] *** Joins: wyclif (~wyclif@user/wyclif)
[11:51:57] <vdamewood> Well, isn't this fun. I can't get the shares to work at all on my systems.
[11:52:03] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[11:52:53] <deniska> sqlite.connect(os.path.join('//192.168.0.1/c$/www/', filename)) is a story which has layers to it :)
[11:53:08] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:53:40] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[11:54:39] <jinsun> I just tried on my system, //localhost/C$/temp.sqlite gives that same error if the file doesn't exist, but works if the file is already there
[11:54:49] <jinsun> /localhost/C$/users/username/temp.sqlite works either way
[11:55:09] *** Joins: nickodd (~nickodd@user/nickodd)
[11:55:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[11:55:36] <jinsun> so in the first case it is not able to write to C:/temp.sqlite which is expected because windows asks for admin rights for that
[11:56:08] *** Joins: wyclif (~wyclif@user/wyclif)
[11:57:04] <jinsun> so it could be some permission problem or file not exists problem
[11:57:15] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[11:57:32] <vdamewood> Well, this is embarrassing.
[11:58:03] <vdamewood> My SMB server can't even connect to itself as a client.
[11:58:24] *** Joins: mei (~mei@user/mei)
[11:58:28] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[11:59:34] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:00:05] <vdamewood> and... fixed.
[12:00:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[12:01:03] <vdamewood> Or not.
[12:01:36] *** Joins: wyclif (~wyclif@user/wyclif)
[12:02:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[12:03:12] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[12:03:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[12:03:33] <vdamewood> Well, this is fun. I might have to ask in one of the channels for my OS about this problem.
[12:05:12] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-1055-580a-2b7e-a63c.res6.spectrum.com)
[12:05:14] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[12:05:30] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:05:37] *** Joins: seednode (~seednode@user/seednode)
[12:05:52] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[12:05:55] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[12:06:01] *** Joins: Julian (~tos9@python/site-packages/Julian)
[12:06:30] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[12:08:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:09:41] *** Joins: cheater (~Username@user/cheater)
[12:10:40] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[12:13:40] <df_data> No luck still
[12:13:47] *** Quits: hyper_dave (~hyper_dav@197.156.107.244) (Ping timeout: 245 seconds)
[12:13:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[12:14:47] <df_data> @jinsun: that error also happens on a network share for some reason
[12:14:55] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[12:15:01] *** Joins: computeiro (~Wender@186.210.42.73)
[12:15:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:16:19] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:16:32] *** Quits: wender (~Wender@189.15.113.231) (Ping timeout: 258 seconds)
[12:18:15] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:19:59] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[12:20:00] *** Joins: shad (~shad@user/shad)
[12:20:21] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[12:20:59] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[12:22:32] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[12:23:00] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:23:48] <jinsun> df_data: you didn't say what you get if you run `os.path.exists(path)`, does that give True?
[12:26:05] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[12:27:11] <df_data> Ahh path.exists will try that thank you
[12:27:40] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:84e3:8129:6be2:9170) (Ping timeout: 240 seconds)
[12:28:30] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[12:28:35] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[12:31:40] *** Quits: audiobirb (~audio@2603-8081-1800-00ad-5755-430d-d5c4-6501.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:32:56] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[12:36:01] *** Joins: Auron (~Auron956@user/auron)
[12:36:01] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:52] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:d830:d296:ccc4:e86a)
[12:42:06] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:42:57] *** Joins: ice9 (~ice9@user/ice9)
[12:44:41] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[12:45:03] <df_data> Nothing prints @jinsun so I assume it's true?
[12:45:36] <jinsun> no
[12:46:04] <jinsun> df_data:  `print(os.path.exists(path))`
[12:47:58] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[12:48:22] <df_data> Come back false :/
[12:49:02] <df_data> Ahh true sorry
[12:49:23] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[12:50:27] *** Quits: Obo (~roberto@78.77.166.185) (Ping timeout: 245 seconds)
[12:53:13] *** Joins: ice9 (~ice9@user/ice9)
[12:54:31] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Read error: Connection reset by peer)
[12:54:38] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[12:55:20] <df_data> Interesting so it works in domain but not workgroup....
[12:58:13] <df_data> May also be os.join isnt passing any uaername and password to open the path.
[12:59:19] <df_data> @deniska: is that what you.mea by the story of layers :)
[13:00:02] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Quit: WeeChat 2.8)
[13:01:29] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 248 seconds)
[13:02:08] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[13:03:10] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 240 seconds)
[13:03:34] *** Joins: plastico (~plastico@neomutt/plastico)
[13:03:51] <jinsun> obviously os.path.join won't ask for username password, it is just joining strings, if you need to give username password then you need to do that separately
[13:04:56] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[13:05:13] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[13:05:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:05:30] *** Quits: doko (~doko@2a02:8106:1a:7600:397a:f99e:919a:179b) (Ping timeout: 272 seconds)
[13:06:00] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[13:06:38] *** Quits: kietop (~kieto@user/kieto) (Quit: WeeChat 2.3)
[13:06:40] <jinsun> df_data: maybe you just need to run `net use` using subprocess first, see https://serverfault.com/a/580516
[13:07:00] *** Joins: kieto (~kieto@user/kieto)
[13:08:25] *** Joins: mcope (~matt@user/mcope)
[13:08:29] <kieto> is there a public log of this channel? Somebody replied to me but I can't see their messages
[13:09:07] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[13:10:29] *** Joins: solarjoe4 (~solarjoe4@p57ab2528.dip0.t-ipconnect.de)
[13:11:30] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:11:38] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[13:12:02] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[13:12:10] <solarjoe4> question about regexp, why is a match only found with re.MULTILINE if the string to search in contains no new line? https://bpa.st/O7KQ
[13:13:34] <jinsun> kieto: no public logs unfortunately, some people run IRC bouncers on their server that log everything privately, but you'll have to find such people and ask them for the logs
[13:13:38] <KirkMcDonald> solarjoe4: Because you pass flags when you call .compile()
[13:13:39] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[13:13:40] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:d830:d296:ccc4:e86a) (Ping timeout: 240 seconds)
[13:13:55] <KirkMcDonald> solarjoe4: And you're passing them in place of a position.
[13:14:01] <deniska> df_data: no, I mean the whole situation. 192.168.0.1 is a peculiar IP, c:\www is a peculiar directory, and having an sqlite file inside that directory you want to access over smb share is a peculiar situation
[13:14:18] <solarjoe4> KirkMcDonald, oh damn, you are right, so stupid
[13:14:46] <deniska> df_data: sqlite docs recommend you to use a client/server based database instead in a situation like thata
[13:14:47] <solarjoe4> KirkMcDonald, thanks a lot for spotting this!
[13:14:59] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[13:15:08] *** Joins: kn1003855702625 (~kn100@wireguard/tunneler/kn100)
[13:15:56] <kieto> jinsun: thanks, I'll leave it be then :)
[13:16:25] *** Quits: yetoo (~yetoo@user/yetoo) (Ping timeout: 248 seconds)
[13:16:49] *** Quits: solarjoe4 (~solarjoe4@p57ab2528.dip0.t-ipconnect.de) (Quit: Leaving)
[13:18:32] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[13:18:57] *** Joins: entuland (~entuland@user/entuland)
[13:19:39] *** kn1003855702625 is now known as kn100
[13:19:49] *** Joins: califax (~califax@user/califx)
[13:20:45] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[13:21:22] *** Joins: i0e (~is0ke3@user/is0ke3)
[13:22:39] *** Joins: faceface (~faceface@user/faceface)
[13:23:57] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[13:24:16] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[13:24:42] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:25:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[13:25:52] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[13:26:38] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Client Quit)
[13:27:08] *** Joins: wyclif (~wyclif@user/wyclif)
[13:27:36] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[13:28:01] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[13:28:13] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 258 seconds)
[13:31:49] *** Joins: torandu (~sean@94.10.125.197)
[13:31:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[13:32:25] *** Quits: doc (~doc@user/doc) (Ping timeout: 248 seconds)
[13:32:36] *** Joins: wyclif (~wyclif@user/wyclif)
[13:33:22] *** Joins: Adoi (~Adoi@user/adoi)
[13:34:00] <rendar> how can i check if a function has been declared async or not? inspect.iscoroutine(f) returns False, and with `<stdin>:1: RuntimeWarning: coroutine 'f' was never awaited`, then inspect.iscoroutine(f()) returns True, but i can't use that with a function because inspect.iscoroutine(f()) will call the function!! (if f is a function) :(
[13:34:53] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[13:35:21] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[13:35:36] *** Joins: doc (~doc@user/doc)
[13:35:42] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::682e)
[13:36:18] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:36:26] <deniska> rendar: inspect.iscoroutinefunction
[13:37:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[13:37:13] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 248 seconds)
[13:37:31] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[13:37:38] <rendar> ok
[13:37:45] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[13:38:05] *** Joins: wyclif (~wyclif@user/wyclif)
[13:38:15] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:38:48] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:6491:83c9:4621:cc48)
[13:41:46] *** Quits: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) (Quit: Leaving.)
[13:41:52] *** Joins: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net)
[13:42:10] *** Quits: rany (~rany@user/rany) (Ping timeout: 240 seconds)
[13:46:40] *** Joins: gtristan (~tristan@110.11.238.160)
[13:49:39] <gtristan> Hi... is there a way in pytest that I can apply one marker based on my custom marker ?
[13:50:05] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[13:50:48] *** Joins: torandu (~sean@94.10.125.197)
[13:50:53] <gtristan> e.g. I have a custom marker, and if that marker applies to a test, I want it to also infer `@pytest.mark.serial`
[13:51:37] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[13:53:11] *** gitesh is now known as Shravan
[13:55:10] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 240 seconds)
[13:55:17] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[13:55:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[13:56:41] <Julian> gtristan: (imply, not infer) -- but possibly you can modify this example it seems: https://docs.pytest.org/en/6.2.x/example/markers.html#automatically-adding-markers-based-on-test-names
[13:56:53] <Julian> (where instead you check if the marker you want to imply the other one is set as the condition)
[13:58:19] <gtristan> Julian, so pytest_collection_modifyitems() is a hook I can use for this... lemme try that
[13:59:14] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:01:48] <lmat> I remember that adding modules to the default search path is discouraged. I'm starting a new python project and would like to get it right.
[14:03:04] <gtristan> Julian, `if item.get_closest_marker("mycustommarker"): ... item.add_marker(pytest.mark.serial)`... works great thanks !
[14:03:12] <lmat> I have a /gunicorn_config.py and /src/entrypoint.py (and all my python source files will be in /src). I think this means I have to   gunicorn -c gunicorn_config.py src.entrypoint.app;  Then, the root of the project will be / (not /src) so every import I do will have to be  from 'src.mod' import ...  ?
[14:03:17] *** Joins: kcrk (~kcrk@user/kcrk)
[14:05:06] <lmat> Or should I   chdir = 'src'  in gunicorn_config.py ? (I verified that the latter works.)
[14:05:53] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[14:06:08] *** Joins: Dev (~D@59.95.43.30)
[14:06:34] *** Quits: portalrat (~portalrat@user/portalrat) (Remote host closed the connection)
[14:06:51] *** Joins: BlessJah (~BlessJah@user/blessjah)
[14:08:05] *** Joins: MemoriaVetusta (~charles@176.125.228.11)
[14:08:37] *** Joins: portalrat (~portalrat@user/portalrat)
[14:09:28] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[14:09:32] *** Joins: torandu (~sean@94.10.125.197)
[14:10:16] <Julian> gtristan: np
[14:11:30] <Julian> lmat: most likely you should put the entrypoint next to gunicorn_config, even if you want to use a src/ layout.
[14:11:32] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Ping timeout: 258 seconds)
[14:12:41] *** Joins: doko (~doko@2a02:8106:1a:7600:b6cc:8eb5:99ac:edf6)
[14:13:12] <lmat> Julian: And everything else?
[14:13:27] <lmat> Julian: All my controllers, DB handling, etc.? All in / instead of /src?
[14:14:08] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[14:14:45] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[14:15:24] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 268 seconds)
[14:15:27] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[14:15:50] *** Joins: rsrx (~rsrx@103.225.150.81)
[14:16:13] *** Joins: matsaman (~matsaman@user/matsaman)
[14:16:30] *** Quits: matsaman (~matsaman@user/matsaman) (Remote host closed the connection)
[14:16:37] *** Quits: computeiro (~Wender@186.210.42.73) (Ping timeout: 268 seconds)
[14:17:31] <Julian> That's up to you. I personally don't use src layouts, but those who do would put your package in src
[14:17:38] <Julian> so src/yourapp/whatever.py
[14:18:21] *** Joins: matsaman (~matsaman@user/matsaman)
[14:19:06] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[14:20:10] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[14:20:34] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[14:21:39] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[14:21:56] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[14:22:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[14:23:34] <lmat> Julian: thank you!
[14:24:15] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:25:02] *** Quits: gtristan (~tristan@110.11.238.160) (Ping timeout: 245 seconds)
[14:25:54] *** Joins: upsala1 (~zcb@185.213.155.160)
[14:26:38] *** Joins: Proxysna_ (~Proxysna@185.251.89.199)
[14:26:43] *** Joins: rsx (~dummy@ppp-188-174-144-74.dynamic.mnet-online.de)
[14:27:07] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[14:28:07] *** Joins: upsala2 (~zcb@193.27.14.104)
[14:29:10] *** Quits: upsala (~zcb@81.17.24.203) (Ping timeout: 258 seconds)
[14:29:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:29:35] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Ping timeout: 268 seconds)
[14:30:52] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[14:31:10] *** Joins: rany (~rany@user/rany)
[14:31:28] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:28] *** Quits: upsala1 (~zcb@185.213.155.160) (Ping timeout: 258 seconds)
[14:32:25] *** Joins: ice99 (~ice9@user/ice9)
[14:33:27] *** Quits: rsrx (~rsrx@103.225.150.81) (Read error: Connection reset by peer)
[14:34:12] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 245 seconds)
[14:36:44] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[14:38:22] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[14:42:23] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:44:10] *** Joins: ice9 (~ice9@user/ice9)
[14:44:12] *** Quits: Dev (~D@59.95.43.30) (Quit: Client closed)
[14:45:37] *** Quits: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) (Quit: Leaving.)
[14:46:50] *** Joins: skapata (~Skapata@user/skapata)
[14:46:51] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[14:48:10] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[14:48:19] *** Joins: shad (~shad@user/shad)
[14:48:22] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Ping timeout: 245 seconds)
[14:51:26] *** Joins: dez (uid92154@user/dez)
[14:51:58] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[14:52:33] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[14:53:00] *** Joins: logi (~AdminUser@mimir.belgingur.is)
[14:53:18] *** Joins: RBEL (~jigubigul@2001:1c06:19c3:7000:b16e:3960:59ea:6fad)
[14:53:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:54:17] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[14:54:38] <stevieh> howdy, as I have now to move to debian bullseye with my project, I have also to move to python 3.9 from 3.7. I am maintaining the project as a debian package but have two python dependencies: dirsync and asyncinotify, which are not in debians repo.
[14:55:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:55:04] <stevieh> how to handle that most easy? it seems that stdeb and py2deb are not up to date...
[14:55:40] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 240 seconds)
[14:56:06] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[14:56:19] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:56:43] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:56:50] *** Joins: raxor2k (~raxor2k@46.230.143.108)
[14:58:25] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:00:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:00:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:02:44] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[15:04:52] *** Joins: Payam (~Payam@138.106.57.132)
[15:05:28] <Payam> Hi, Can someone explain to me what `wait` does in `threading.Event()` ?
[15:05:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:06:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:28] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[15:08:18] <raxor2k> ok this is a bit awkard, i just hate working with dicts, i just need a simple function that "while it retreive data from DB; check if exercise exists and double the amount of points inside the dict: https://bpa.st/TNCA
[15:09:59] *** Joins: cth (~Cthulchu@213.174.21.101)
[15:13:24] <raxor2k> i would really appreciate if someone could help here
[15:13:37] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[15:13:54] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[15:14:20] <lmat> raxor2k: That last comment does it for me. If you'll appreciate it, then I'll help!
[15:14:28] <lmat> raxor2k: Why is it awkward?
[15:14:38] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[15:15:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:15:40] <raxor2k> lmat: because ive done it before and nailed it perfectly..
[15:15:50] *** Quits: logi (~AdminUser@mimir.belgingur.is) (Ping timeout: 268 seconds)
[15:16:05] <raxor2k> do i perhaps need a list to add each element from dicT?
[15:16:06] <lmat> raxor2k: Maybe the easiest would be to create a new dictionary and add to it rather than trying to modify secondary_muscles.
[15:16:23] <raxor2k> lmat: yes, seems to me that the dict keeps modifying itself..
[15:16:39] <lmat> raxor2k: yes, certainly! And modifying while you're iterating isn't a good idea.
[15:17:10] <raxor2k> lmat: so my question, do i need a extra dict or just a list to append?
[15:17:36] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:17:52] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[15:17:57] <lmat> raxor2k: We can keep chatting in IRC, but here's a place to write out some code: http://collabedit.com/pyrpq
[15:18:34] <raxor2k> wow, cool feature!
[15:20:13] <lmat> Yeah, dude, sweet
[15:22:32] <lmat> Something like that?
[15:22:45] <dba> How do I check a list of string if they exist in a string. eg if ['val1', 'val2', 'val3'] in string:
[15:23:05] *** Joins: torandu (~sean@94.10.125.197)
[15:23:15] <lmat> dba: https://careerkarma.com/blog/python-find-in-list/
[15:23:20] <dba> if any of the values in the links in the string that must return true
[15:23:29] <lmat> raxor2k: I'm not so hot at python syntax, but maybe my code will work.
[15:23:37] <lmat> raxor2k: Gotta go make breakfast, catch u later!
[15:23:42] <Repiphany> if any(v in string for v in ['val1', ...])
[15:23:54] <Ninpo> if string in ['val1', 'val2', 'val3']
[15:24:02] *** mpmc is now known as ShowDonkey
[15:25:44] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[15:25:45] <raxor2k> lmat: thanks, i will try and let u know :)
[15:25:55] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[15:28:41] <stevieh> anybody with an idea how to create a debian package from a python package with python 3.9?
[15:28:47] <whaley> Repiphany: nice use of a comprehension that creates a generator and not a full list
[15:28:50] <whaley> +1
[15:29:00] *** Quits: willow (~willow@bay.systems) (Quit: willow)
[15:29:09] <Yhg1s> stevieh: which part is giving you trouble?
[15:29:42] <stevieh> Yhg1s: in fact with older versions I just used py2deb or stdeb
[15:30:01] <stevieh> now it seems both are not working anymore
[15:30:04] <Yhg1s> stevieh: I'm not sure why you think it needs anything different from that.
[15:30:36] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Remote host closed the connection)
[15:31:09] <stevieh> what do you mean? e.g. I want to get a deb for dirsync
[15:31:34] <Yhg1s> stevieh: perhaps you should ask a more specific question. Show us what you're doing and how it's failing.
[15:31:59] *** Joins: Barones (~Barones@2804:214:8197:ac97:e147:6f7c:94d:4ee0)
[15:32:36] <stevieh> Yhg1s: will do so. Thx
[15:33:30] *** Joins: Pandadub (~Barones@2804:7f3:8987:a43:c5d5:10db:3d23:1a66)
[15:33:37] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[15:34:07] *** Quits: Proxysna_ (~Proxysna@185.251.89.199) (Remote host closed the connection)
[15:34:36] *** Joins: Naan (~Naan@user/naan)
[15:36:10] *** Quits: Barones (~Barones@2804:214:8197:ac97:e147:6f7c:94d:4ee0) (Ping timeout: 240 seconds)
[15:38:33] *** Joins: DSync (~ds@user/deepspace-link)
[15:38:39] <raxor2k> lmat: im getting "keyError", maybe because it tries to loop over something doesnt exist?
[15:39:12] *** Quits: Pandadub (~Barones@2804:7f3:8987:a43:c5d5:10db:3d23:1a66) (Ping timeout: 245 seconds)
[15:41:00] *** Joins: Pandadub (~Barones@2804:7f3:8987:a43:c5d5:10db:3d23:1a66)
[15:42:51] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[15:43:32] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 258 seconds)
[15:45:15] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Client Quit)
[15:45:40] *** Quits: jazzy (~jaziz@2600:380:8510:c59b:9963:e1ef:f713:608a) (Ping timeout: 240 seconds)
[15:49:07] *** Quits: CyberShadow (vladimir@89.28.117.31) (Quit: CREO ERGO SVM)
[15:49:44] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[15:49:59] *** Joins: y1n (~y1n@84-115-65-187.wifi.dynamic.surfer.at)
[15:50:28] <jinsun> raxor2k: seems like you need a defaultdict
[15:50:52] *** Quits: torandu (~sean@94.10.125.197) (Quit: leaving)
[15:51:45] <Repiphany> or use .get or catch the exception
[15:52:54] *** Joins: rovert (uid389732@id-389732.tooting.irccloud.com)
[15:53:20] *** Joins: Jean-Luc (~gryster@104.244.73.251)
[15:54:31] <df_data> @jinsun: using a net use command before opening the database worked. Just have to solve keeping the session open longer, seems to close the connection when I start a loop on the data.
[15:54:58] *** Joins: CyberShadow (vladimir@89.28.117.31)
[15:56:13] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[15:56:29] *** Quits: raxor2k (~raxor2k@46.230.143.108) ()
[15:57:03] <jinsun> df_data: oh cool, no idea about how you would control the timeout, a brute force solution could be to just run `net use` after each loop
[15:58:33] *** Joins: F1R3DoG (~F1R3DoG@201.152.222.50)
[15:58:34] <Jean-Luc> set the timeout?
[15:58:41] <jinsun> or just copy over the database locally, and save it back once you are done (assuming no one else would work on it at the same time)
[15:58:41] <Jean-Luc> code?
[15:59:04] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[15:59:27] <jinsun> Jean-Luc: https://bpa.st/ZTXQ
[16:00:01] *** Pandadub is now known as Barones
[16:00:28] <jinsun> well that doesn't have the timeout, now df_data did some modifications which has the timeout
[16:00:44] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[16:01:20] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[16:01:48] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Remote host closed the connection)
[16:02:05] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[16:04:05] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[16:05:01] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[16:06:35] <df_data> here is the code: https://bpa.st/OESA
[16:06:40] *** Quits: RBEL (~jigubigul@2001:1c06:19c3:7000:b16e:3960:59ea:6fad) (Ping timeout: 240 seconds)
[16:06:52] <df_data> it thinks a value in the table is a table for some reason
[16:08:29] <jinsun> that doesn't look like a connection problem
[16:08:30] <rakoon> How can i have a randomly generated list of specific strings with length > 0 and length < len(elements of list) using factory_boy and faker?
[16:11:10] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 240 seconds)
[16:11:31] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[16:11:40] <Shravan> so all other data which we see on the computer stored are just different formatted string?
[16:12:17] <df_data> @jinsun just trying ti locally (not behind a vpn see if that makes a difference
[16:13:07] *** Joins: pycurious (~Adium@user/pycurious)
[16:13:51] *** Joins: computeiro (~Wender@189.37.66.232)
[16:15:02] *** Joins: Obo (~roberto@185.76.9.42)
[16:15:16] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:d305:1d49:a92d:d62f:c7f3) (Remote host closed the connection)
[16:15:36] <Shravan> for example what I'm saying is that if i am storing data on my computer means a file
[16:16:02] <Shravan> so every file my computer is different formatted strings
[16:17:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[16:17:48] *** Joins: thiras (~thiras@user/thiras)
[16:18:07] <Yhg1s> Shravan: bytes, not strings, and 'formatted' doesn't really mean anything. But yes, everything is bytes.
[16:18:47] *** Joins: wyclif (~wyclif@user/wyclif)
[16:21:36] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[16:22:48] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[16:23:30] *** Joins: Network2501 (~beard@122-199-54-62.ip4.superloop.com)
[16:23:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[16:24:18] *** Joins: wyclif (~wyclif@user/wyclif)
[16:24:40] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 240 seconds)
[16:26:41] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[16:29:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[16:29:46] *** Joins: wyclif (~wyclif@user/wyclif)
[16:29:46] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:41b5:7ad7:9cf0:15ad)
[16:30:07] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:32:03] *** Joins: Auron956 (~Auron956@user/auron)
[16:32:40] <df_data> looks like it was an sql error had to change the code
[16:32:48] <df_data> thanks @jinsun once again
[16:33:22] *** Quits: ubert (~Thunderbi@91.141.62.226.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[16:33:29] *** Joins: wender (~Wender@186.210.45.41)
[16:33:45] *** Quits: kmh_ (~kmh@p5dcc649e.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[16:34:26] *** Joins: logi (~AdminUser@mimir.belgingur.is)
[16:34:40] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[16:35:10] *** Quits: Auron (~Auron956@user/auron) (Ping timeout: 240 seconds)
[16:35:40] *** Quits: computeiro (~Wender@189.37.66.232) (Ping timeout: 240 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:08] *** Joins: zeden (~zeden@user/zeden)
[16:36:29] *** Joins: audiophile_ (~audiophil@user/audiophile)
[16:36:42] *** Quits: dld (~davidlowr@2601:197:600:1210:8491:b60f:e59c:40e2) (Ping timeout: 245 seconds)
[16:36:47] <audiophile_> TIL += is faster than list = list + list/[element]
[16:36:53] *** Shravan is now known as gitesh
[16:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:00] <audiophile_> doesnt just save keystrokes O_o
[16:37:35] <stranac> audiophile_: they do different things, the former extends the first list, the latter creates a new one
[16:38:03] <audiophile_> yeah!
[16:38:36] *** Quits: pegaso (~reis-r@131.72.121.3) (Quit: Konversation terminated!)
[16:40:33] *** Joins: Falc (~Falc@193.191.206.243)
[16:42:18] *** Joins: ub (~Thunderbi@91.141.62.226.wireless.dyn.drei.com)
[16:43:13] *** Joins: shad (~shad@user/shad)
[16:45:40] *** Quits: papna (~user@c-73-158-250-22.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[16:45:43] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[16:46:27] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:46:40] *** Quits: ub (~Thunderbi@91.141.62.226.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[16:50:58] *** Joins: humberto1 (~humbertow@2806:107e:f:5f0c:961:58ae:dd7c:a3db)
[16:51:17] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[16:51:26] *** Joins: BlessJah (~BlessJah@user/blessjah)
[16:52:00] *** Joins: gtristan (~tristan@223.38.23.138)
[16:52:39] *** Joins: ub (~Thunderbi@91.141.62.226.wireless.dyn.drei.com)
[16:52:55] <gtristan> Another pytest-xdist question... it seems that pytest-xdist does not play nicely with session-scoped fixtures... https://medium.com/@kozyreva.hanna/pytest-xdist-with-session-scoped-fixture-b9884bd7bb29 offers a solution but wont work for me
[16:53:40] *** Quits: y1n (~y1n@84-115-65-187.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[16:53:40] <gtristan> I used the session-wide fixture mostly for a teardown, not an initialization, so after the session completes I can remove some files
[16:53:41] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:8d0e:2e34:ab83:be02) (Ping timeout: 258 seconds)
[16:54:27] <gtristan> Any idea how I can get a global fixture to cleanup only once, after all tests in all threads have completed ?
[16:55:23] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[16:56:27] <nedbat> gtristan: i don't think you can
[16:56:43] <nedbat> gtristan: you could have the fixture create different global things for each worker though
[16:57:08] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Quit: stoiclunchbox)
[16:57:18] <gtristan> Ah right
[16:57:25] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:57:32] <gtristan> nedbat, good call
[16:57:37] <gtristan> that'll work
[16:58:35] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:02:30] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[17:02:49] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[17:03:59] <audiophile_> did python get a speed boost recently?
[17:04:11] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:04:22] *** Quits: todda7 (~torstein@240.red-81-37-247.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[17:04:50] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:04:57] *** Joins: besnn (~besnn@user/besnn)
[17:09:13] <Yhg1s> audiophile_: not in particular.
[17:09:52] <audiophile_> hmm i couldve sworn i saw a hn post recently about that but cant find it...
[17:10:11] <audiophile_> maybe it was a different implementation
[17:11:08] <Yhg1s> audiophile_: every Python release has preformance increases, and there are a whole bunch of projects (PyPy, Pyjion, Guido's work at Microsoft) that aim to do more.
[17:11:44] *** Joins: IceMichael (~IceMichae@2a0d:5940:6:163::ad7e)
[17:11:47] *** Joins: darksun (~darksun@user/darksun)
[17:11:58] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[17:13:13] <Jean-Luc> https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b
[17:13:19] <Jean-Luc> python 3.6 seems to be the fastest
[17:13:26] *** Joins: dld (~davidlowr@mobile-166-186-168-44.mycingular.net)
[17:13:27] <Jean-Luc> at some things
[17:13:51] <Jean-Luc> and 3.5
[17:15:28] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:15:35] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[17:16:40] <Yhg1s> That post is three years old, however. You're better off looking at sensible benchmarks for your specific use-case. speed.python.org has a whole bunch of benchmarks.
[17:17:45] <Jean-Luc> even if its old it kinda proved that some releases also have performance decreases ...
[17:17:55] <Jean-Luc> in addition to the claimed increases
[17:18:20] <Yhg1s> It depends very much on the benchmarks you pick, yes.
[17:20:01] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[17:20:27] *** Joins: hyper_dave (~hyper_dav@197.156.107.244)
[17:21:41] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:23:05] *** Joins: fdan (~fdan@192.146.154.3)
[17:23:06] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Quit: Default quit message is difficult to set. If you don't see me returning, ask me? You will find me, if you want to)
[17:24:27] *** Joins: reset (~reset@user/reset)
[17:24:50] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[17:25:34] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[17:26:18] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:26:40] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:41b5:7ad7:9cf0:15ad) (Ping timeout: 240 seconds)
[17:26:46] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[17:27:11] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[17:27:37] *** Joins: mage (~julien@orval.bbpf.belspo.be)
[17:27:46] *** Quits: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) (Client Quit)
[17:28:25] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[17:28:59] <mage> hello, any idea how could I create a class that execute a method from a member if it doesn't exist in the class itself?
[17:29:33] <Julian> mage: `__getattr__`. It's generally better not to do this for all methods though, just ones on a protocol / interface.
[17:30:17] <mage> what do you mean by "just ones on a protocol/interface" ..?
[17:31:05] <mage> (the use case here is that I have an SQLAlchemy select() object that I'd like to extend)
[17:31:11] *** Joins: Enitin (~Enitin@82.102.22.84)
[17:31:38] *** humberto1 is now known as humbertowoody
[17:33:48] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[17:33:58] *** Quits: ub (~Thunderbi@91.141.62.226.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[17:34:08] <Falc> mage: I believe what Julian means is "don't go doing this for every method"
[17:34:08] *** Joins: aiRness (~aiRness@199.ip-54-37-75.eu)
[17:34:26] *** Joins: abraxas (~abraxas@2600:8805:c880:3:c7fe:fc8e:f2cc:8056)
[17:34:29] *** Quits: F1R3DoG (~F1R3DoG@201.152.222.50) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:34:47] <mage> ah, ok.. why ?
[17:35:05] <mage> __getattr__ is called only if the method doesn't exist, right?
[17:35:57] <aiRness> Hello, I have a problem with the following error: https://bpa.st/NFPQ it seems that after upgrading my python version the ffi library is broken although every package is installed on the server, can anyone give any tips ?
[17:38:00] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[17:38:40] <Julian> mage: because it usually doesn't make sense for one object to take all the methods of another. they're separate objects. Sometimes it makes sense to take all of the related methods of another, e.g. if you're trying to essentially do a form of better inheritance (better in the sense of it being unidirectional)
[17:38:44] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[17:38:53] <Julian> mage: in those cases, the protocol / interface is your list of "all these methods are the ones that I'm transferring"
[17:39:05] <Julian> and yes __getattr__ is called only for non-existing ones
[17:39:33] <Julian> what kind of object are you writing that wants to proxy to sqlalchemy select objects?
[17:40:40] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[17:41:01] *** Joins: raxor2k (~raxor2k@28.109-247-20.customer.lyse.net)
[17:41:11] *** Quits: DSync (~ds@user/deepspace-link) (Remote host closed the connection)
[17:41:22] <raxor2k> jinsun: defaultdict ?
[17:42:15] <Julian> mage: if you want to think about a silly example of why it doesn't make sense -- if tomorrow Mike Bayer decides to add a ".name_of_author" to all his objects with the value "Mike Bayer", now all your objects should have an attribute called that which has Mike Bayer on them?
[17:42:23] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[17:42:51] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[17:42:56] *** Joins: BlessJah (~BlessJah@user/blessjah)
[17:43:40] *** Quits: abraxas (~abraxas@2600:8805:c880:3:c7fe:fc8e:f2cc:8056) (Ping timeout: 240 seconds)
[17:43:52] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[17:44:05] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:44:45] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[17:45:04] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[17:45:14] <jinsun> raxor2k: https://docs.python.org/3/library/collections.html#collections.defaultdict
[17:45:40] *** Quits: raxor2k (~raxor2k@28.109-247-20.customer.lyse.net) (Ping timeout: 240 seconds)
[17:45:46] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[17:45:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:47:16] *** Joins: ubert (~Thunderbi@91.141.37.36.wireless.dyn.drei.com)
[17:48:03] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[17:48:08] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:48:31] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[17:49:34] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[17:49:49] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Remote host closed the connection)
[17:50:00] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 268 seconds)
[17:50:07] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[17:50:10] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[17:50:16] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[17:50:32] <audiophile_> hi can someone explain why I have to add the extra pair of square brackets for the element to appear as-is in a list? http://vpaste.net/X4RlC?bg=dark&nu
[17:50:40] <audiophile_> always trips me up!
[17:50:47] <audiophile_> isnt that element a list?
[17:51:08] *** Joins: Link64 (~li@user/deepspace-link)
[17:52:40] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 240 seconds)
[17:52:55] <marduk> audiophile_: they're not "extra" afaict they're lists of lists, so you need both pairs of brackets.
[17:52:57] *** Quits: Celelibi (celelibi@user/celelibi) (Ping timeout: 245 seconds)
[17:53:02] <mage> Julian: I'd like to have a custom select object which .join and add some .options if some key exists in a dict (config settings)
[17:53:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:53:22] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:1a4f:6839:5b37:81ba) (Ping timeout: 245 seconds)
[17:53:38] *** Quits: ubert (~Thunderbi@91.141.37.36.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[17:53:50] <mage> Julian: so you make a list of method, like foo = ('method1', 'method2', ...) and in __getattr__(self, attr) you check foo ?
[17:53:51] <audiophile_> marduk im still confused...ele[0] is a list. so when I do res += ele[0] where res is [] (an empty list), shouldn't I get res = [[1,2]] ?
[17:53:58] *** Joins: wyclif (~wyclif@user/wyclif)
[17:54:28] *** Joins: mexen (uid495612@user/mexen)
[17:54:44] *** Joins: raxor2k (~raxor2k@28.109-247-20.customer.lyse.net)
[17:54:44] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[17:54:49] <raxor2k> jinsun: defaultdict ?
[17:55:01] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[17:55:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[17:55:49] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[17:55:59] <jinsun> raxor2k: ok now I forgot your problem, you'll have to share again if you still have it, or forget about defauldict if you solved it
[17:56:51] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[17:56:56] <marduk> audiophile_: I think you are getting confused by the list of lists, but a += b for lists basically means a.extend(b).  If you want the latter you probably mean rest += [ele[0]]
[17:57:17] *** Joins: Doffi (~doffi@91.132.197.188)
[17:57:30] <marduk> Personally I just use .extend() .append() because I don't like to use arithmetic operations on lists
[17:58:28] <raxor2k> jinsun: 1 moment
[17:58:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[17:59:11] *** Joins: sodimel (~co@78.195.125.78.rev.sfr.net)
[17:59:27] *** Joins: wyclif (~wyclif@user/wyclif)
[17:59:45] <rjwiii> Anyone here use openpyxl? I would like to save() a workbook to a variable instead of a file so I can attach it to an e-mail. I'm using openpyxl version 2.5. Yeah, I know it's old, but it's all I have to work with.
[18:00:00] *** Joins: cth (~Cthulchu@213.174.21.101)
[18:00:30] <raxor2k> jinsun: here it is: https://bpa.st/GN3A
[18:00:40] *** Quits: dld (~davidlowr@mobile-166-186-168-44.mycingular.net) (Ping timeout: 240 seconds)
[18:00:43] <raxor2k> right now i am using list to add the elements, but surely i dont need list for this ?
[18:01:32] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[18:01:55] <raxor2k> urgh.. i hate working with dicts..
[18:02:23] *** Quits: hexa- (~hexa-@juno.lossy.network) (Quit: WeeChat 3.1)
[18:02:26] *** Joins: ubert (~Thunderbi@91.141.37.36.wireless.dyn.drei.com)
[18:02:33] <rjwiii> dicts ROCK! :)
[18:03:56] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.230)
[18:04:06] *** Quits: ubert (~Thunderbi@91.141.37.36.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[18:04:09] *** Joins: Celelibi (celelibi@user/celelibi)
[18:04:14] *** Joins: hexa- (~hexa-@juno.lossy.network)
[18:04:26] *** Joins: ubert (~Thunderbi@91.141.37.36.wireless.dyn.drei.com)
[18:05:20] <audiophile_> marduk ah thanks, that makes sense
[18:05:56] <audiophile_> I think this is related but can someone please explain why I need to convert a list to a list for this to work? (It's the commented out line number 15). This function prints the permutations of a list
[18:05:58] <audiophile_> http://vpaste.net/Tnotu?bg=dark&nu
[18:06:25] <jinsun> raxor2k: okay list is definitely not good for your `exercises_collection`,  I was thinking defaultdict, but actually here just keeping it a dict will be good, with `exercise_ID` as key and the other values as values, then inside the loop use .get
[18:06:42] <Yhg1s> audiophile_: you're not 'converting a list to a list', you're *copying* the list, because otherwise 'oldPerm' and 'perm' refer to the same list object.
[18:06:59] <audiophile_> oh is that similar to list[:] or deepcopy?
[18:07:10] <Yhg1s> audiophile_: not deepcopy, just copy, but yes.
[18:07:10] *** Quits: Abrax (~Abrax@user/abrax) (Ping timeout: 240 seconds)
[18:07:16] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 268 seconds)
[18:07:18] <audiophile_> thanks!!!
[18:07:35] <audiophile_> I did not know you could copy a list like that without reference by list()
[18:07:40] *** Quits: logi (~AdminUser@mimir.belgingur.is) (Ping timeout: 240 seconds)
[18:07:52] <audiophile_> I still keep going back to nedbat's post on mutability
[18:07:54] <Yhg1s> audiophile_: I don't know what you mean by 'without reference'. You are refrencing the list.
[18:08:12] <audiophile_> like if I change oldPerm, it's not gonna change the perm list
[18:08:25] <Yhg1s> audiophile_: that's what 'a copy' means, yes.
[18:08:34] <audiophile_> yes!! thanks :)
[18:10:38] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (Quit: reboot)
[18:11:25] *** Joins: F1R3DoG (~F1R3DoG@2806:108e:19:9e3d:9504:44fe:e94c:a95b)
[18:11:33] *** Joins: csevast (~csevast@89-64-113-198.dynamic.chello.pl)
[18:11:42] *** Joins: jess (~jess@libera/staff/jess)
[18:13:30] *** Joins: khanred (~khanred@user/khanred)
[18:14:03] *** Quits: ubert (~Thunderbi@91.141.37.36.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[18:14:11] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[18:14:35] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[18:14:42] <audiophile_> so... list += [4] mutates the list but list = list + [4] rebinds it...?
[18:14:51] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:15:27] *** Quits: F1R3DoG (~F1R3DoG@2806:108e:19:9e3d:9504:44fe:e94c:a95b) (Ping timeout: 245 seconds)
[18:16:04] *** Quits: csevast (~csevast@89-64-113-198.dynamic.chello.pl) (Client Quit)
[18:16:14] <Yhg1s> audiophile_: yes.
[18:16:26] <Yhg1s> += on lists is like list.extend. it doesn't create a new list.
[18:16:46] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:17:03] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:17:59] <audiophile_> ah I see, but references to indices don't update when the original list is mutated? http://vpaste.net/ODe1Y?bg=dark&nu
[18:18:26] <Yhg1s> audiophile_: I don't know what you mean by 'references to indices'.
[18:18:37] <audiophile_> c = a[0] that one
[18:18:42] <Repiphany> There is no such thing as referencing an index
[18:18:52] <audiophile_> it refers to zeroth element but why is it not updating when og list is mutated
[18:18:57] <Yhg1s> audiophile_: it's not a reference to an index. it's a reference to an object, just like everything is a reference to an object.
[18:19:05] <audiophile_> oh...
[18:19:16] <audiophile_> so ints are immutable so they dont update?
[18:19:24] <Yhg1s> 'c' knows nothing about the list. Python asks 'a' for the first item, and the result is an object. 'c' references that object.
[18:19:36] <Yhg1s> audiophile_: this has nothing to do with the type of the object, or whether it's mutable or not.
[18:19:50] *** Joins: ubert (~Thunderbi@91.141.37.36.wireless.dyn.drei.com)
[18:20:22] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:20:43] <audiophile_> ''c' references that object' so is it copied here then?
[18:20:51] <audiophile_> sorry, im still a bit confused with that example
[18:20:53] <Yhg1s> audiophile_: ... no. It's a reference.
[18:20:56] <Falc> rjwiii: sorry for the late response, but I believe the best solution is to allow openpyxl to save to (temporary) file and then use the file to make an attachment
[18:21:10] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 240 seconds)
[18:21:16] <Yhg1s> audiophile_: assignment never copies, in Python.
[18:22:00] <Yhg1s> audiophile_: the list contains references to 4 objects. They happen to be integers, but it doesn't matter if they are. a[0] gives you the first of those four objects.
[18:22:37] *** Quits: ihristov (~ihristov@85.187.46.226) (Quit: Connection closed)
[18:23:03] <Falc> rjwiii: (check the stdlib module tempfile)
[18:23:05] *** Joins: ub (~Thunderbi@91.141.37.36.wireless.dyn.drei.com)
[18:23:14] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[18:23:22] *** Joins: kmh (~kmh@p200300df5f23b400a913ba491969c7e8.dip0.t-ipconnect.de)
[18:23:24] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[18:23:34] <rjwiii> Falc: Thanks for the reply. That's what I'm doing now. I'm writing to a file then doing open(file, 'rb').read(), then add_attachment(bytes, maintype="application", subtype="xlsx". Was kinda hoping to skip the file writing and dump the bytes to a variable.
[18:24:09] *** Quits: ubert (~Thunderbi@91.141.37.36.wireless.dyn.drei.com) (Ping timeout: 248 seconds)
[18:24:42] <Falc> rjwiii: thing is, it's not impossible to do it, you'd just need an io stream with the right capabilities
[18:24:57] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[18:25:52] <Falc> rjwiii: but it's not unlikely that figuring out the ins and outs might take a while, and unless you're handling gigabytes, it won't be noticably slower
[18:26:15] <audiophile_> thanks Yhg1s I understand it now. I find this very interesting...https://stackoverflow.com/a/47859483
[18:26:31] <audiophile_> [*list] is the fastest way of shallow-copying a list under 1000 elements apparently
[18:26:46] *** Joins: Adoi (~Adoi@user/adoi)
[18:27:25] <Yhg1s> the difference between that and list(yourlist) or yourlist[:] is very, very small, and very much worth not optimising for.
[18:27:32] *** Quits: ub (~Thunderbi@91.141.37.36.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[18:27:44] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[18:27:49] <audiophile_> ah, fair enough :)
[18:27:57] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[18:28:22] <rjwiii> Falc: true, that ... thanks.
[18:29:44] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.230) (Quit: Leaving)
[18:31:19] *** Joins: Abrax (~Abrax@user/abrax)
[18:32:56] *** Joins: ubert (~Thunderbi@91.141.56.213.wireless.dyn.drei.com)
[18:34:24] *** Joins: timdiels (~user@78-22-205-207.access.telenet.be)
[18:34:41] *** Quits: jess (~jess@libera/staff/jess) ()
[18:34:55] *** Joins: anon16_ (~anon16_@user/anon16)
[18:35:30] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[18:35:41] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[18:35:48] *** Joins: shad (~shad@user/shad)
[18:36:05] <timdiels> Hi, why does this example call bytes.__new__ instead of super().__new__? https://docs.python.org/3/library/enum.html?highlight=enum#when-to-use-new-vs-init
[18:36:31] *** Quits: Elzington (~Elzington@68.235.43.108) (Quit: Leaving)
[18:37:20] <anon16_> Hi, is there a way to modify the value of a tuple entry before assigning it? Let's say I have x, y = (100, 30). Is there a way of doing like this x + x, y = (100, 30), so that if x's previous value was 20, it'd be 120. I'm aware I can see just store the value in a different variable, but I was wondering if there's a cleaner way of doing that
[18:37:38] <jinsun> raxor2k: you can convert your list to a dict with values that you want, by using defaultdict and .get, something like this https://bpa.st/JZ4Q, and you obviosuly you can do this without making the list first, directly in your loop over the database entries
[18:38:01] <anon16_> (sorry for the typos)
[18:38:20] <bjs> timdiels: because it doesn't work with super()
[18:38:34] <Yhg1s> anon16_: well, there's 'x, y = x+100, 30'
[18:39:00] <anon16_> Yhg1s: yeah, but the value is generated by a function, so I can't do that
[18:39:18] *** Quits: Link64 (~li@user/deepspace-link) ()
[18:39:24] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[18:39:36] <Yhg1s> anon16_: so you actually have 'x, y = some_tuple'?
[18:39:42] <anon16_> Yes
[18:39:49] <Yhg1s> anon16_: just use a temporary variable then. They're free.
[18:40:47] *** Joins: rany (~rany@user/rany)
[18:40:48] <timdiels> bjs: the docs mention super().__new__ here though https://docs.python.org/3/reference/datamodel.html?highlight=metaclasses#object.__new__
[18:40:54] <lericson> is there a less annoying version of python's socket api that is async than asyncio?
[18:41:09] <lericson> basically i just want plain sockets but async
[18:41:10] <bjs> timdiels: yes but it doesn't work here
[18:41:15] <anon16_> Yhg1s: ah, ok
[18:41:19] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[18:41:35] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:41:49] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[18:42:45] <bjs> timdiels: remember you can't extend enumerations
[18:42:48] <Yhg1s> lericson: unfortunately it's not that simple. The socket module has a non-blocking interface, but that's not the same as 'async'. you need an event loop for 'async', which means you can't "plain sockets but async".
[18:42:55] *** Joins: amosbird (~amosbird@13.75.119.182)
[18:43:07] <amosbird> Hello! Can I use {{ x / 10 }} in jinja?
[18:43:25] <lericson> Yhg1s: an event loop is fine, it's the whole transport and protocols dance i simply do not understand why i have to deal with
[18:43:41] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Ping timeout: 252 seconds)
[18:43:45] <lericson> it makes it extremely tedious to write simple network applications
[18:44:14] <lericson> it's an api on top of an api
[18:44:33] *** Quits: Madda (~Madda@208.249.9.51.dyn.plus.net) (Remote host closed the connection)
[18:44:34] <lericson> you really should be questioning your design choices when you write functions such as asyncio.Transport.get_extra_info
[18:44:44] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Quit: Leaving)
[18:45:05] <Yhg1s> lericson: okay! So, not just 'socket but async', but an event loop. Would you want it to deal with things like error conditions on sockets? Take care of buffering for you?
[18:45:40] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[18:45:46] <Yhg1s> lericson: perhaps trio would be more to your liking. However, at some point you'll have to accept that networking isn't as simple as you'd want it to be.
[18:46:03] <lericson> i know exactly how difficult or not difficult networking is
[18:46:03] *** Joins: akaWolf (~akaWolf@akawolf.org)
[18:46:11] *** Joins: Madda (~Madda@208.249.9.51.dyn.plus.net)
[18:46:28] <jinsun> anon16_:  if you want to do in one line `x, y = (sum(z) for z in zip((x, 0), (100, 30)))`, but just using a temp variable is definitely more readable/clean
[18:46:39] <SnoopJ> lericson, perhaps you have seen a way to do a thing that nobody else has yet seen
[18:46:43] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:46:48] <anon16_> jinsun: ah ok, thanks
[18:46:51] <Payam> Hi guys, I am doing to experiment by myself. What I want to do here are two things one, call a function using a lamda expression and 2 use Event class in threading. I see that the `returnTrue` never gets executed. Can you explain to me why? https://bpa.st/UJQA
[18:46:58] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[18:47:03] <lericson> SnoopJ: really doubt it, asyncio was annoying way before python grew async functions
[18:47:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:961:58ae:dd7c:a3db) (Ping timeout: 240 seconds)
[18:47:12] <bjs> timdiels: this example for instance,  the PX/PV etc instances are created through calls to __new__ before the Coordinate class has finished being created at all and then you cannot make new classes that inherit from Coordinate.  super() just isn't going to do anything useful
[18:47:20] <bjs> Payam: nowhere calls returnTrue
[18:47:21] <lericson> Yhg1s: it seems trio does indeed do exactly this
[18:47:35] <lericson> wow nail on the head actually
[18:47:37] <SnoopJ> lericson, I really doubt it, too
[18:47:40] <lericson> thanks a bunch
[18:47:46] <bjs> Payam: why do you say `lambda: returnTrue`, just pass returnTrue
[18:47:49] <bjs> or say `lambda: returnTrue()`
[18:48:14] <Payam> bjs I am trying to learn how to call function using lambda
[18:48:20] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[18:48:20] *** Joins: upsala (~zcb@185.213.155.160)
[18:48:22] <Payam> ah so I need parantesis?
[18:48:32] <bjs> Payam: parens are how you call a function yes, `f` doesn't call the function `f()` does
[18:48:33] <Yhg1s> Payam: 'lambda' is just a silly way to define a function. You don't call it any differently than other functions.
[18:48:40] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Ping timeout: 240 seconds)
[18:48:55] <Payam> awesome thanks
[18:49:09] <bjs> Payam: a `lambda` is just another way to say `def` really,  `lambda: returnTrue` is the same as `def unnamed_function(): return returnTrue`
[18:49:32] <lericson> the trio documentation is fantastic
[18:49:39] <Payam> bjs thanks. I don't know why I am so unsecure when it comes to lambdas
[18:49:52] <bjs> Payam: you don't need lambda here at all
[18:50:02] <bjs> Payam: `waitfor(returnTrue, ...`
[18:50:52] <Payam> without paranthesis I assume?
[18:51:04] <bjs> Payam: yes without, if you put parens it'll just call it right there
[18:51:10] *** Quits: upsala2 (~zcb@193.27.14.104) (Ping timeout: 240 seconds)
[18:51:17] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 245 seconds)
[18:51:23] <bjs> but you don't want to do that, you want to give the function to waitfor() so it can call it later
[18:51:57] <Payam> yes I understand
[18:52:04] <Payam> thank you bjs
[18:52:17] <Payam> why is your name bjs? It gives alway wrong message
[18:52:26] <bjs> Payam: wrong message?
[18:52:35] <Payam> I mean bj + s
[18:52:51] <bjs> Okay
[18:52:51] <Payam> I'm sorry. It is me who got a dirty mind. sorry
[18:53:07] <grym> Payam: it's clearly costco >:)
[18:53:07] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[18:53:24] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[18:53:33] <grym> that may be a very american joke.
[18:53:48] <timdiels> bjs: does that explain this example's TypeError? https://bpa.st/G5GA
[18:53:51] <Payam> I don't know what yu mean
[18:54:07] <Payam> grym :(  I googled and got a IT company
[18:54:50] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[18:54:51] <grym> Payam: bjs and costco are both american big-box stores for bulk quanties of home goods
[18:55:03] <Payam> aah okey thanks
[18:55:11] <bjs> timdiels: no,  here your args=("val", "foo") so you're saying str("val", "foo") essentially
[18:55:38] <bjs> timdiels: nothing 'bad' will happen if you use super(), so long as the order of the base classes is correct (Enum last), but it won't really "do" anything either
[18:56:17] <timdiels> bjs: ah right, no labels. Think it's best I bring out my full example = value  # you'll get a TypeError otherwise obj.is_tast
[18:56:21] <timdiels> oops
[18:56:37] <bjs> timdiels: I literally have no idea what you're trying to say there
[18:56:44] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 258 seconds)
[18:57:14] <timdiels> bjs: I meant to link my full example https://stackoverflow.com/a/68817674/1031434
[18:57:42] <Payam> bjs Can you explain to me the meaning event.wait() still can not undrestand what it does.
[18:57:52] <bjs> Payam: it waits until the event happens
[18:58:04] <timdiels> bjs: so that's a django TextChoices I'm using which is derived from (str, Choices) and Choices is an Enum if I recall correctly
[18:58:10] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[18:58:13] <Payam> so it mean the same as time.sleep()?
[18:58:31] <bjs> Payam: no, it just blocks
[18:58:36] <timdiels> bjs: when I swapped str.__new__ for super().__new__ there I got that same TypeError
[18:58:41] *** Joins: humbertowoody (~humbertow@2806:107e:f:5f0c:961:58ae:dd7c:a3db)
[18:58:41] <bjs> Payam: it's like `while event.not_happened_yet: pass`
[18:58:47] <bjs> Payam: but more clever.
[18:59:09] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:59:20] <timdiels> bjs: and it also does its own meta magic https://github.com/django/django/blob/main/django/db/models/enums.py
[19:00:08] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[19:00:15] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[19:00:29] <timdiels> bjs: basically strips the last element of the tuple as the label and then passes the rest to my __new__ it seemed
[19:00:42] <Payam> bjs, You see in my code what I want to achieve is that "as soon as returnTrue returns true then get out from the function"
[19:02:08] <Payam> so wait mean "do your operations with event and stuff but you s amount of time in wait(s)"
[19:02:10] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 240 seconds)
[19:02:10] <Payam> right?
[19:02:24] <bjs> timdiels: you say you get "that same TypeError" ?
[19:02:33] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 248 seconds)
[19:02:33] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[19:02:54] <bjs> Payam: well the argument to wait is a timeout after which to stop waiting
[19:03:12] <Payam> aaa okey now I undrestand
[19:03:15] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 258 seconds)
[19:03:27] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[19:03:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:961:58ae:dd7c:a3db) (Ping timeout: 240 seconds)
[19:03:50] <bjs> Payam: have you read https://docs.python.org/3/library/threading.html#event-objects
[19:04:11] <Payam> I have read it actually I have the docs in front of me but I couldnt understand it
[19:04:26] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[19:04:39] <timdiels> bjs: But so what you were saying earlier, if I understand correctly, is that __new__ is called before the Coordinate class is created, so its subclasses can't exist either at that time, so bytes and Enum are the only other classes (other than their parent classes) in the mro and so calling bytes directly is equivalent to calling super in that case?
[19:05:06] <bjs> timdiels: well there can't *be* subclasses of Fruit
[19:05:07] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 245 seconds)
[19:05:14] <bjs> Enum won't even let you
[19:06:28] *** Quits: raxor2k (~raxor2k@28.109-247-20.customer.lyse.net) ()
[19:06:40] *** Joins: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133)
[19:07:04] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[19:07:17] <bjs> timdiels: you can happily use super(),  just be careful that the classes 'above' you might not be using super() themselves. That's why e.g. the Enum has to come last
[19:09:07] <timdiels> timdiels: Alright, understood that part then. On to the Fruit then. Gave it another go with super(), but did not get the TypeError. I think back then I accidentally did __new__(cls, [value]) like the bytes example, but that was just wrapping the single int in it.
[19:10:12] *** Joins: Adoi (~Adoi@user/adoi)
[19:10:30] <bjs> timdiels: remember that the reason super exists is because when you have a class you can't just look "up" at the parents to know which class is the superclass.  You have to look "down" and "out". But for Enums this isn't true. There can't be any down or out, there is only up. So super is unncessary.  This is why the Enum docs don't use super.
[19:11:06] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[19:11:40] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 240 seconds)
[19:12:25] *** Parts: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) ()
[19:13:15] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[19:13:42] <bjs> timdiels: this is compounded by the fact that these new instances you are making with __new__ are made only during the class creation, so even if you *could* extend the enumerations it wouldn't matter because you're creating these objects during the class creation
[19:13:59] <bjs> after the class is created, your __new__ gets thrown away anyway
[19:14:17] *** Quits: withere__ (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 248 seconds)
[19:14:19] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:15:05] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:17:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[19:18:00] *** Joins: redkrieg (~redkrieg@user/redkrieg)
[19:19:10] *** Joins: justyb11 (~justyb@2601:483:500:3ea:9102:4f5d:313b:3a42)
[19:19:10] *** Quits: Obo (~roberto@185.76.9.42) (Ping timeout: 240 seconds)
[19:19:52] <timdiels> bjs: so here's what happens when I use super() in my actual code (Fruit is name BlastProgram there but it's the same thing really), https://bpa.st/D35Q
[19:19:59] <bjs> timdiels: for e.g. https://bpa.st/6W7A is incorrect.  the super().__new__ in Fruit is *not* calling the __new__ that is written in the Text class. and `str`'s __new__ doesn't get called at all here
[19:20:32] <bjs> timdiels: well this error doesn't look like the same thing at all... infact it doesn't even look like the full error
[19:21:03] *** Joins: bolnav[m] (~bolnavm]@2001:470:69fc:105::1683)
[19:21:45] <timdiels> bjs: Full code https://bpa.st/ZUTQ
[19:21:52] *** Quits: betelgeuse (~john2gb@user/john2gb) (Quit: The Lounge - https://thelounge.chat)
[19:21:59] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:22:15] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[19:22:57] <timdiels> bjs: Full traceback https://bpa.st/HZFQ
[19:23:39] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[19:23:43] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[19:23:46] <bjs> timdiels: what happened to the bottom of the traceback>?
[19:23:48] <bjs> the actual error
[19:25:01] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[19:25:26] *** Joins: tbcr (~tbcr@user/tbcr)
[19:25:27] <timdiels> bjs: Sorry, I grabbed it from a log and missed it https://bpa.st/KSDQ
[19:25:42] <bjs> timdiels: so here what's happening is that you're extending TextChoices which created its own __new__ and super() is picking that up
[19:25:59] <bjs> but that's *not* the __new__ you wanted to call, you wanted to call str's __new__ really.
[19:26:21] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[19:26:43] *** Joins: mattil (~mattil@78-27-110-179.bb.dnainternet.fi)
[19:26:44] <gitesh> I have a question with this paragraph.
[19:26:51] <bjs> timdiels: this is basically my previous test,  but here is a more direct example https://bpa.st/P4YA
[19:27:00] <gitesh> Note - Technically, in a proper Python 3 interpreter, the map function produces an “iterator”, which is like a list but produces the items as they are needed. Most places in Python where you can use a list (e.g., in a for loop) you can use an “iterator” as if it was actually a list. So you probably won’t ever notice the difference. If you ever really need a list, you can explicitly turn the output of map into a list:
[19:27:00] <gitesh> list(map(...)). In the runestone environment, map actually returns a real list, but to make this code compatible with a full python environment, we always convert it to a list.
[19:27:09] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[19:27:19] <gitesh> are they calling it right that they said "iterator" ?
[19:27:22] <bjs> timdiels: this https://bpa.st/P4YA is totally invalid and incorrect,  that super().__new__ does *not* call str __new__ eventually
[19:27:23] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[19:27:39] <bjs> gitesh: your question implies you think they are not right?
[19:27:48] <gitesh> because i know iteration variable or loop variable and i know iterable
[19:27:53] <bjs> gitesh: okay
[19:28:00] <gitesh> bjs: i think they are not right, are they right?
[19:28:17] <bjs> gitesh: does this book not explain what an iterator is and what it means for something to be an iterator
[19:28:20] <gitesh> calling iterator which is supposed to be iterable righ
[19:28:25] <bjs> and how iterators are relate to iterables
[19:28:43] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[19:28:50] <gitesh> they explained that all in different chapter
[19:28:58] <bjs> gitesh: an earlier chapter?
[19:29:03] <gitesh> yes
[19:29:10] <bjs> gitesh: so, what did the earlier chapter say?
[19:29:30] <gitesh> i have to go back and see
[19:29:42] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:6491:83c9:4621:cc48) (Ping timeout: 258 seconds)
[19:29:53] *** zinc_ is now known as zinc
[19:30:24] <jinsun> the builtin map function gives an iterator and all iterators are iterable
[19:30:24] <bjs> gitesh: Well if you get to a bit of the book that talks about iterators and you're not sure if it's correct, shouldn't you go back and see what the book said about iterators earlier on?
[19:30:25] <bolnav[m]> How to type hint that a Callable has a certain field? class A(Protocol, Callable) won't work
[19:30:41] <bjs> bolnav[m]: a Protocol with a __call__ method is a Callable
[19:31:00] <bjs> bolnav[m]: see https://www.python.org/dev/peps/pep-0544/#callback-protocols
[19:31:00] <bolnav[m]> Perfect, thanks
[19:31:44] <bjs> bolnav[m]: note that some typecheckers e.g. mypy let you wite __name for parameter names, where the double-leading-underscores imply the name isn't important
[19:32:04] <bolnav[m]> I always wonder why there are books about Python when the online stdlib docs is clear enough 99% of the time
[19:33:22] *** Joins: cth (~Cthulchu@213.174.21.101)
[19:35:37] <Falc> bolnav[m]: some people prefer reading a book instead of a site
[19:35:37] *** Quits: anon16_ (~anon16_@user/anon16) (Ping timeout: 245 seconds)
[19:36:03] *** Parts: bolnav[m] (~bolnavm]@2001:470:69fc:105::1683) ()
[19:36:06] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[19:36:06] *** Quits: fortuno51 (~fortuno51@78.10.204.200) (Remote host closed the connection)
[19:36:06] <gitesh> bjs: in earlier chapters they called it 'iterable' and now suddenly they are calling it 'iterator'
[19:36:12] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:1035:5e3c:e705:f5c1) (Quit: Leaving)
[19:36:22] <supakeen> an iterator is iterable
[19:36:29] <supakeen> but not all things iterable are iterators
[19:36:31] <supakeen> something like that
[19:36:47] <gitesh> bjs: but i will take that as iterable is same as iterator and what i was referring to is actually an iterator(or loop) variable.
[19:36:56] <bjs> gitesh: no
[19:36:57] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[19:37:05] <bjs> gitesh: you should take it that the book is just bad and isn't *explaining* the terms to you
[19:37:05] *** Joins: fortuno51 (~fortuno51@78.10.204.200)
[19:37:14] <bjs> gitesh: iterables and iterators do exist and are different
[19:37:24] <jack__d> https://stackoverflow.com/questions/9884132/what-exactly-are-iterator-iterable-and-iteration
[19:37:31] *** Parts: akk (~akk@174-28-98-206.albq.qwest.net) (+++)
[19:37:35] <bjs> gitesh: is this the same book as the one we told you to stop reading last time?
[19:37:35] <jack__d> that explains the iterable vs iterators thing pretty well
[19:37:44] <gitesh> bjs: yes
[19:37:56] <graingert[m]> I have to look it up every time
[19:38:14] <gitesh> bjs: it's a good book and it's accompaning book for the courses I'm taking
[19:38:28] <bjs> gitesh: this book is bad, it does not use terminology in the correct way, and when it does it does not explain what it means
[19:38:31] <supakeen> it's pretty good at confusing you
[19:38:35] <gitesh> bjs: otherwise i have no option to learn python is other way as per my IQ
[19:38:54] <gitesh> *in
[19:39:06] <bjs> gitesh: it's always a good idea to use *multiple* resources to learn
[19:39:21] <bjs> gitesh: that book (if you must), but also other books, docs.python.org/ , trying things out yourself etc
[19:40:03] <gitesh> bjs: yeah man, i'd be a good really
[19:40:06] *** Joins: audiophile (~audiophil@user/audiophile)
[19:40:06] *** Joins: humbertowoody (~humbertow@2806:107e:f:5f0c:ec45:a9d0:a182:a212)
[19:40:37] <grym> what book is this, so that i may avoid it?
[19:40:55] *** Quits: hyper_dave (~hyper_dav@197.156.107.244) (Quit: WeeChat 3.2)
[19:41:36] *** Joins: hyper_dave (~hyper_dav@197.156.107.244)
[19:41:55] <anorthall> bjs: just code something until you can't code it, then google it, repeat?
[19:41:58] <anorthall> :P
[19:42:07] <gitesh> *it
[19:43:10] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 240 seconds)
[19:43:17] *** audiophile is now known as audiophile_
[19:45:16] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[19:45:23] *** Joins: zebrag (~chris@user/zebrag)
[19:45:40] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:45:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[19:46:54] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[19:49:04] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[19:50:33] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Ping timeout: 248 seconds)
[19:51:53] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:52:27] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:52:33] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Read error: Connection reset by peer)
[19:52:49] <gitesh> what is the difference between python docs and python tutorial on the same site docs.python.org ?
[19:52:59] <bjs> gitesh: one is the documentation and one is the tutorial
[19:53:04] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[19:54:01] <mefistofeles> heh
[19:54:37] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[19:54:55] <gitesh> i think i need documentation than tutorial as i have been already finishing courses
[19:54:55] *** Quits: Falc (~Falc@193.191.206.243) (Quit: Leaving)
[19:56:23] <mefistofeles> gitesh: yeah, documentation is great as reference but not as a learning tool
[19:56:33] <mefistofeles> even though good documentation can actually teach a lot
[19:57:13] <gitesh> i have one more question
[19:57:15] *** Joins: y1n (~y1n@84-115-65-92.wifi.dynamic.surfer.at)
[19:57:19] <gitesh> `x = 3`
[19:57:29] <mefistofeles> is that a question?
[19:57:30] <gitesh> can i use it to do `if x:`
[19:57:33] <mefistofeles> oh
[19:57:42] <mefistofeles> gitesh: sure, you can
[19:57:46] <gitesh> is it true or false?
[19:57:48] <gitesh> why?
[19:57:48] <bjs> gitesh: well,  yes you can write that
[19:57:53] <mefistofeles> gitesh: well, try it an see for yourself :)
[19:57:59] <bjs> gitesh: why what
[19:58:06] <gitesh> why true or why false
[19:58:15] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[19:58:24] <bjs> gitesh: because Python arbtirary picks whether it's true or false.  For integers anything that isn't 0 is true
[19:59:13] <gitesh> bjs: if it was a list
[19:59:19] <gitesh> not integer
[19:59:24] <grym> gitesh: lists with things in them are true, empty lists are false
[19:59:34] <gitesh> oh
[19:59:39] <grym> read "are true/false" as "evaluates to true/false in a boolean context"
[19:59:49] <grym> ie, an if statement
[19:59:58] <gitesh> okay
[20:00:05] *** Joins: ppw (~ppw@user/ppw)
[20:00:20] <ppw> hi. is there a pandas channel here somewhere?
[20:00:30] <mefistofeles> ppw: there is a pydata one
[20:00:40] <grym> ppw: you can ask alis, but you can also just ask your questions here
[20:00:43] <mefistofeles> ppw: but you can also ask about it here, I'd guess
[20:00:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:00:52] * mefistofeles high fives grym 
[20:01:15] <grym> (now i'm wondering if alis is named that because of jefferson airplane
[20:02:42] <timdiels> bjs: Thanks for baring with me, it's been a while since I read up on metaclasses. So super().__new__ behaves like any super().foo would but it's just that EnumMeta overwrites the class' __new__ with Enum.__new__. And so Choices, TextChoices, even BlastProgram has Enum.__new__ as __new__ as those classes finish getting created. And so the original BlastProgram __new__ ends up calling TextChoices.__new__
[20:02:48] <timdiels> as expected but it's actually Enum.__new__ which just fails and wouldn't ever call str anyway as it's not a parent of Enum.
[20:03:29] <bjs> timdiels: well Enum.__new__ just doesn't call super() at all I think, so even fi it was it wouldn't help
[20:03:31] <bjs> but yeah
[20:05:08] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[20:06:43] *** derpadmin is now known as CAPSLOCK
[20:06:48] *** CAPSLOCK is now known as CAPSLOCK2
[20:07:04] *** Joins: humberto1 (~humbertow@2806:107e:f:5f0c:961:58ae:dd7c:a3db)
[20:07:11] *** CAPSLOCK2 is now known as derpadmin
[20:09:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:ec45:a9d0:a182:a212) (Ping timeout: 240 seconds)
[20:14:33] *** Joins: callq (~callq@157.41.79.159)
[20:14:38] *** Quits: zopsi (~zopsi@irc.dir.ac) (Quit: Oops)
[20:16:15] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[20:17:51] *** Joins: cr0n0s (~quassel@181.67.203.188)
[20:19:03] *** Joins: aeadio (~aead@ec2-52-2-178-231.compute-1.amazonaws.com)
[20:19:38] *** Joins: omegatron (~some@p54849842.dip0.t-ipconnect.de)
[20:19:53] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Ping timeout: 248 seconds)
[20:20:19] *** Parts: khanred (~khanred@user/khanred) (Leaving)
[20:20:42] <timdiels> bjs: and yeah in cpython it doesn't call super
[20:21:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:21:25] *** Joins: Pandadub (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[20:22:17] *** Joins: death916 (~death916@user/death916)
[20:23:28] *** Joins: rnm (~mambang@user/mambang)
[20:23:28] *** Quits: rnm_ (~mambang@user/mambang) (Read error: Connection reset by peer)
[20:23:29] <sybariten> so, a little inspiration please
[20:23:29] *** Quits: rnm (~mambang@user/mambang) (Remote host closed the connection)
[20:23:33] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[20:23:45] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:23:47] *** Quits: Barones (~Barones@2804:7f3:8987:a43:c5d5:10db:3d23:1a66) (Ping timeout: 245 seconds)
[20:24:11] <sybariten> I'm supposed to read a file into a variable (of some sort), its a text file, and i shoudl remove the last n lines. I was thinking of using readlines() and then just a simple del command (is that a "command"?) , but, i should also get rid of the last \n in the file
[20:24:45] *** Joins: dld (~davidlowr@2620:6e:6000:2900:3c3c:cf45:60f2:8388)
[20:24:59] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:25:27] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[20:25:29] <sybariten> sooo i'm thinking they maybe want me to do a read() operation instead, and then use \n as separator somehow, but avoid the last one.
[20:25:38] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[20:25:42] <grym> sybariten: pathlib.Path('somefile.txt').read_lines()[:maxlines]
[20:25:52] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[20:26:10] <grym> er, read_text()
[20:26:12] <sybariten> grym: is that from a library ?
[20:26:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[20:26:39] <grym> sybariten: pathlib.Path('somefile.txt').read_text().split('\n')[:maxlines]
[20:26:45] *** Joins: rnm (~mambang@user/mambang)
[20:26:45] *** Quits: rnm (~mambang@user/mambang) (Remote host closed the connection)
[20:26:45] <grym> there, that actually works
[20:26:49] <grym> sybariten: no, pathlib is stdlib
[20:27:12] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:27:21] <sybariten> yeah, buit pathlib is just for the path right?= I have the file in the same dir. I was thinking of read_lines() as opposed to readlines()
[20:27:31] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[20:27:33] <grym> read_text, i meant to say
[20:27:37] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[20:27:57] <grym> all i'm doing is reading the entire file and then taking the first n lines
[20:28:04] *** Quits: olasd (~olasd@softwareheritage/olasd) (Quit: WeeChat 3.0)
[20:28:09] *** humberto1 is now known as humbertowoody
[20:28:12] *** Joins: olasd (~olasd@softwareheritage/olasd)
[20:28:39] <sybariten> okay, read_text then  :)  what is it, basically? Couldnt i read the whole file into a variable and then just use split with \n as splitter, and then start a for loop or something to wherever i should return it?
[20:28:42] <jinsun> grym: you have to remove the last n lines though
[20:29:28] <dale> So del ...[maxlines:] or del ...[:-num_lines_to_remove] instead?
[20:29:48] <callq> thats right
[20:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[20:30:35] <grym> jinsun: that's the same as keeping the first ones
[20:30:48] <grym> sybariten: that's ... exactly what i just did
[20:30:53] <grym> i just one-linered it
[20:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[20:31:10] *** Joins: aniruddha (uid340443@id-340443.charlton.irccloud.com)
[20:31:22] <grym> if the file is huge, you can .open() and loop and break after n
[20:31:46] <jinsun> grym: yeah but you want to keep total minus n lines to remove n
[20:32:27] *** Parts: ppw (~ppw@user/ppw) ()
[20:33:17] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:33:22] <jinsun> but ya it is trivial to change [:-maxlines] instead of [:maxlines], I was just pointing out the minor difference in what sybariten's original message
[20:33:32] <jinsun> said
[20:33:40] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[20:33:55] <grym> i don't see the difference between "read the first n lines" and "remove the last >n lines"
[20:35:29] <grym> (i also tend not to ever use del)
[20:35:35] *** Joins: rnm (~mambang@user/mambang)
[20:35:46] *** Quits: sodimel (~co@78.195.125.78.rev.sfr.net) (Quit: Konversation terminated!)
[20:35:55] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:36:10] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[20:36:28] <dale> grym: The problem statement on your homework. :)
[20:37:06] <sybariten> So... what is the difference to doing fileObject = open(somefile.txt) ; fileContents = fileObject.read() ; fileList = fileContents.split("\n") , versus : fileObject = open(somefile.txt) ; fileSomething = fileObject.read_text().split('\n')
[20:37:32] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[20:38:05] <grym> sybariten: well, the second one's not valid python
[20:38:29] <grym> .read_text is a method on Path objects, not file handles
[20:39:21] <dale> On streams you can .readlines() (no split necessary) or .read().
[20:39:30] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[20:39:40] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:39:48] <dale> I always forget that read() with no size will do multiple syscalls to read until EOF, that's nice.
[20:40:33] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Client Quit)
[20:40:44] <deniska> also file objects are iterables, they iterate by line
[20:41:08] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[20:41:13] <rendar> let's say i have 2 containers of my implementation, e.g. binomial heaps.. now, those kind of containers have an operation called merge, like A.mergeFrom(B) which means that all the nodes of B goes into A, and B remains empty. What is the best operator in doing this? i mean, doing A += B, ... i don't know, in such a case the right operand shouldn't be changed by += right?
[20:41:49] <sybariten> grym, dale: okay ... i guess since in this case i need to make an output where the last line does not have a \n , i will use read() and then split and then something else
[20:41:53] <rendar> sorry, i meant A+B
[20:42:45] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Client Quit)
[20:42:57] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:44:35] *** Joins: magla (~gelignite@55d4d9a3.access.ecotel.net)
[20:45:18] <grym> sybariten: https://bpa.st/ASZQ i mean, okay, but this works fine
[20:45:32] <jinsun> rendar: A << B, kinda like the C++ streams
[20:45:40] *** Quits: rnm (~mambang@user/mambang) (Ping timeout: 240 seconds)
[20:45:43] <rendar> jinsun: python has those operators?
[20:45:45] <grym> (for small files)
[20:46:17] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[20:46:20] <jinsun> rendar: https://docs.python.org/3/library/operator.html#operator.__lshift__
[20:46:27] <rendar> oh right
[20:46:34] <rendar> the bit shift, yeah thanks
[20:46:34] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:46:50] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[20:47:28] <rendar> also, this kind of data structure, pop elements when i iterate them
[20:47:37] *** Quits: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net) (Quit: leaving)
[20:47:46] <rendar> so, `for i in A: print(i)` will empty A
[20:47:54] <rendar> this is not a normal idiom in python right?
[20:48:19] <dale> Not IMHO, no.
[20:49:20] <The-Compiler> rendar: sounds weird, on the other hand, that's kinda how files and generators work
[20:49:29] <rendar> indeed
[20:49:33] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[20:49:49] <SnoopJ> it's not, though; those aren't destroying state, they're advancing it
[20:50:09] <SnoopJ> I guess maybe the line between those ideas is a bit blurry, though
[20:50:33] <rendar> SnoopJ: well, they are destroying state in a way because at each next(A) (let's say) A will destroy a node, internally
[20:50:41] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[20:50:49] <dale> Almost a use case for the walrus operator.  while i := A.pop(): print(i)
[20:50:59] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[20:51:14] <rendar> maybe i shouldn't program A as iterable
[20:52:08] <SnoopJ> rendar, in the structure *you* described, yes. Nothing is 'destroyed' in iteration of a file object, as I see it. Your iterable does sound pretty surprising
[20:52:35] <rendar> yep
[20:52:41] <rendar> not an iterable
[20:52:58] <rendar> SnoopJ: basically it's a stack
[20:53:01] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[20:53:02] *** Quits: rsx (~dummy@ppp-188-174-144-74.dynamic.mnet-online.de) (Quit: rsx)
[20:53:13] <rendar> (or a queue, in the other direction)
[20:53:20] <rendar> you can't iterate a stack or a queue...
[20:54:23] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[20:54:27] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[20:54:48] <SnoopJ> I don't think it's correct to say you never can, but it's not part of their ADT
[20:55:05] <SnoopJ> (you could implement a stack with list(), for instance)
[20:55:14] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[20:55:24] <rendar> yes
[20:56:00] <no_gravity> Strange, why is [*a] faster than list(a)?
[20:56:09] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:57:18] <jinsun> the name "list" has to be looked up in globals dict, I guess that's why
[20:57:52] <no_gravity> Hmm.. It seems to be almost twice as fast.
[20:58:04] <jinsun> but if the difference is too much then maybe something else
[20:58:06] <cloudbender> ^^^ noted
[20:58:17] <SnoopJ> I would suspect the CALL_FUNCTION before the LOAD_NAME in that case. Twice as fast sounds like you should show us some source, that sounds very weird.
[20:58:24] <anorthall> no_gravity: how are you timing it
[20:58:38] *** Quits: y1n (~y1n@84-115-65-92.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[20:58:40] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[20:58:44] <no_gravity> anorthall: time python3 unpack.py
[20:58:47] <Jean-Luc> guess you could compare the byte code if you really want to know
[20:58:55] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[20:59:21] <anorthall> no_gravity: cool, didn't know time existed. was just curious how you do that
[20:59:28] <no_gravity> anorthall: unpack.py looks like this: https://pastebin.com/raw/DLA4hrhR
[20:59:30] <SnoopJ> Ah, it's faster on small inputs. I would guess because of the call, where the [*a] just does BUILD_LIST and then extends that list
[20:59:39] <SnoopJ> (but that is a complete guess)
[20:59:50] *** Joins: sandb0y (pirate@user/sandb0y)
[21:00:08] <cloudbender> tkinter questions lines 3 and 7 should be easy for seasoned tkinter-ers
[21:00:10] <cloudbender> https://bpa.st/H4BA
[21:00:41] <anorthall> no_gravity: I get 1.19 sec for list() and 0.91 sec for *
[21:00:43] *** Quits: callq (~callq@157.41.79.159) (Quit: callq)
[21:00:58] <cloudbender> what is 'a' in the [*a] contruct
[21:01:14] <jinsun> for a list of 2 items I get 178 nanoseconds vs 291 nanoseconds
[21:01:22] *** Joins: Akuli (~Akuli@82-203-162-97.bb.dnainternet.fi)
[21:01:32] * daevski considers that anorthall didn't know that *time* existed. What an interesting thought...
[21:01:33] <no_gravity> anorthall: Interesting. With cpython 3?
[21:01:36] <SnoopJ> n.b. the microbenchmark version will probably vary a lot between particular versions
[21:01:41] <anorthall> no_gravity: yeah, M1 mac
[21:01:52] <no_gravity> anorthall: Strange
[21:01:59] <cloudbender> oooooooo I want an m1 so bad
[21:02:09] <anorthall> i have two
[21:02:13] <anorthall> some issues, but overall i like it
[21:02:39] <cloudbender> .... 'why have one, when you can have two for twice the price ...'
[21:02:46] <anorthall> issues is stuff like, no virtualisation software - can't run a linux vm for dev - no virtualbox - qemu works but only with arm stuff
[21:02:53] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[21:02:53] <anorthall> lots of stuff doesn't work still, like numpy
[21:03:02] <anorthall> cloudbender: i have a mini and an air
[21:03:07] <anorthall> different purposes
[21:03:12] <nedbat> cloudbender: line 10 is calling the constructor of the parent class, yes.
[21:03:25] <nedbat> cloudbender: but it would be better as:  super().__init__()
[21:03:25] <cloudbender> @nedbat thanks
[21:03:26] <no_gravity> anorthall: Maybe we can time it in Python here? https://www.online-python.com/pQiT68KN9D
[21:03:38] <cloudbender> good p oint
[21:03:42] <anorthall> no_gravity: yes
[21:03:56] <cloudbender> I can use super on any class (I assume)\
[21:04:00] <SnoopJ> the M1RACLES exploit that lets two cooperating processes exchange information is very neat
[21:04:24] <nedbat> cloudbender: in python 3, yes.
[21:04:32] <cloudbender> ok
[21:04:51] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[21:05:05] <nedbat> anorthall: micro-benchmarks like this are controversial
[21:05:22] <cloudbender> so, If python runs on ARM, and M1 is ARM-based, would not python be ok ?
[21:05:26] <no_gravity> anorthall: https://www.online-python.com/XL2kVroGg0
[21:05:31] <anorthall> cloudbender: not all python is python, though
[21:05:36] <cloudbender> ah
[21:05:38] <anorthall> numpy is C, for example
[21:05:39] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[21:05:44] <anorthall> or at least I think it's C, it's something
[21:05:59] <SnoopJ> numpy is written in Python, C, and a bit of Fortran
[21:06:32] <cloudbender> Sorry to nag, question line 3
[21:06:33] <cloudbender> https://bpa.st/H4BA
[21:06:35] <SnoopJ> uhh probably Cython in there too
[21:06:43] <anorthall> i think you can get it working on M1, but it won't compile by 'default'
[21:06:48] <anorthall> i don't need it, so not wasted much time on it
[21:06:58] <anorthall> i think there are issues with clang and M1
[21:07:20] <anorthall> cloudbender: idk about Tkinter but can't you do type()?
[21:07:26] <SnoopJ> I haven't heard much about it recently but there were all sorts of issues getting a variety of software built on it when it came out. Not too unusual, it's brand new silicon.
[21:07:29] <cloudbender> yeah ok
[21:07:36] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[21:07:37] *** Quits: simone (~nya@user/sx) (Quit: Ping timeout (120 seconds))
[21:07:50] *** Joins: simone (~nya@user/sx)
[21:08:05] <anorthall> SnoopJ: yep, as I say, tiny bugbears, overall I love it. very fast. it beats my i7-9700k in my other PC at single core arithmatic by about 20%
[21:08:18] <SnoopJ> anorthall, as already stated, microbenchmarks are fraught
[21:08:36] <anorthall> :)
[21:08:51] <sybariten> so, where i'm standing now is i've opened file1 with open (readonly), and after that i have got the lines i want , into a list. These lines in the list don't include \n as far as i can tell. I now want to write this out to file2 . Should i also open file2? And then somehow do writelines() ?
[21:09:12] <sybariten> cause i mean also the destination file needs to be like a filehandle i presume ?
[21:09:17] *** Jean-Luc is now known as jean-luc
[21:09:21] *** Joins: Fiji (~Fiji@user/fiji)
[21:09:34] *** Joins: audiophile_ (~audiophil@user/audiophile)
[21:09:45] <anorthall> sybariten: '\n'.join(list_of_lines)
[21:09:45] <grym> sybariten: pathlib.Path('outfile.txt').write_text(that_list)
[21:09:53] *** Quits: audiophile_ (~audiophil@user/audiophile) (Client Quit)
[21:10:13] <anorthall> or that, which looks better
[21:10:24] <sybariten> anorthall: i will actually need the \n 's inserted manually?
[21:10:40] <cloudbender> on the output yes
[21:10:42] *** Joins: audiophile_ (~audiophil@user/audiophile)
[21:10:44] <sybariten> aha ok
[21:10:50] <grym> write_text uses system newlines by default
[21:10:54] <grym> (which is waht you want)
[21:10:57] <anorthall> depends what method you use to write it
[21:11:01] <cloudbender> unlesss you are not stripping them from the input
[21:11:19] <cloudbender> right, it depends, I'll stop talking now
[21:11:41] *** Quits: cr0n0s (~quassel@181.67.203.188) (Read error: Connection reset by peer)
[21:11:44] *** Joins: y1n (~y1n@84-115-65-139.wifi.dynamic.surfer.at)
[21:11:58] <sybariten> i'm guessing maybe writelines() would not need manuyally inserting them...
[21:12:03] <anorthall> sybariten: if you just used a standard IO.writelines, then yes, you'd need to add \n, but if you used the method grym mentioned above, then you wouldn't
[21:12:15] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[21:12:19] <sybariten> grym: the thing is, i think we don't officially know about read_text or write_text
[21:12:27] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[21:12:40] <anorthall> writelines(lines) ->     Write a list of lines to the stream. Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end.
[21:12:56] <SnoopJ> sybariten, we don't officially know what you officially know about, but if there are additional constraints on the problem, you should tell us about those, too.
[21:13:01] <grym> sybariten: https://bpa.st/2AYQ
[21:13:06] <grym> sybariten: if you're doing homework, tell us
[21:13:07] <anorthall> maybe writelines should be called write_not_lines or something
[21:13:10] <sybariten> SnoopJ: well, sure, thats why i said that
[21:13:14] <grym> anorthall: i was wrong, it needs a string
[21:13:18] <grym> see paste
[21:13:21] <grym> sybariten: if you're doing homework, tell us
[21:13:29] <grym> otherwise you're going to get stdlib answers :)
[21:13:29] <SnoopJ> sybariten, it's not clear from what you said if it's a problem to use those methods.
[21:13:39] <grym> or, uh, answers without constraint of library
[21:13:55] <grym> if you're being handcuffed for wheel reinvention didactic purposes, you gotta let us know up front
[21:13:56] <sybariten> thats true
[21:14:15] <anorthall> sybariten: if you want to do it with writelines, do '\n'.join(list_of_lines) then use writelines
[21:14:19] <grym> because my prior is not "someone is going to grade me!"
[21:14:25] <grym> it's "i want this to work"
[21:14:44] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 258 seconds)
[21:14:44] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 258 seconds)
[21:14:57] <anorthall> sybariten: you could always tell your tutor that you used your brain and googled to find a more appropriate method
[21:15:02] <anorthall> :P
[21:15:25] <grym> i would say in general there's a difference between "learning general principles" and "learning _python_"
[21:15:27] <sybariten> grym: no, that's logical. I though it was maybe obvious from the way i asked the question earlier. But thanks for the two pastes !
[21:15:45] <grym> (and we're going to give you answers that are in the second category, usually)
[21:15:49] <cloudbender> for l in \'n'.join(...) writeline(l)     ?   ?
[21:16:11] <grym> cloudbender: one character per line
[21:16:13] <grym> >:)
[21:16:19] <cloudbender> ah
[21:16:31] <grym> join returns a string, which you can aboslutely loop over, but that's not what you meant to do there
[21:16:38] <grym> one of the classic whoopsies
[21:16:45] <cloudbender> kk
[21:17:39] <anorthall> cloudbender: file.writeline('\n'.join(list_of_lines))
[21:17:51] *** Joins: cr0n0s (~quassel@181.67.203.188)
[21:17:51] *** Quits: cr0n0s (~quassel@181.67.203.188) (Client Quit)
[21:18:10] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[21:18:22] *** Quits: noord_ (~noord@user/noord) (Ping timeout: 272 seconds)
[21:18:22] *** Quits: woky (~woky@li1651-31.members.linode.com) (Ping timeout: 272 seconds)
[21:18:22] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 245 seconds)
[21:18:23] <cloudbender> I need to look at how join works
[21:18:31] *** Joins: noord (~noord@user/noord)
[21:18:41] *** Joins: woky (~woky@li1651-31.members.linode.com)
[21:18:47] <anorthall> '-'.join([1,2,3,4,5,6]) => "1-2-3-4-5-6"
[21:19:09] <cloudbender> ok
[21:19:17] <anorthall> coming from Ruby, I think it should be [1,2,3,4,5,6].join('-'), but there we go
[21:19:20] <anorthall> that's another topic!
[21:19:25] <cloudbender> ^^^
[21:19:48] <grym> what join lives on is another record-scratch moment, yes
[21:19:53] <anorthall> i will send whoever made python an email and tell them to change it
[21:20:24] <Byteflux> str.join(iterable) seems better than list.join(str)
[21:20:38] <anorthall> here we go...
[21:20:42] <grym> Byteflux: and that's why it is the way it is, yes
[21:20:50] <grym> it's just a "huh, what?" the first time
[21:20:52] <bjs> Python could have gone the route to make .join() a method of all iterables
[21:20:56] <grym> and then you get used to it
[21:20:58] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[21:21:00] <anorthall> Byteflux: I'm sorry but you are wrong, the other way is better. :)
[21:21:12] <bjs> anorthall: well no, the way Byteflux puts it str.join(iterable) is better
[21:21:20] <bjs> because there are more iterables than just lists
[21:21:25] <anorthall> bjs: I'm sorry but you are also wrong
[21:21:26] <grym> and who better to make strings than string
[21:21:40] <grym> what business has list, making strings
[21:21:42] <anorthall> Everyone who doesn't share my opinion is wrong :(
[21:21:42] <deniska> it always trips me over how in other languages you do ['a', 'b'].join('⋄')
[21:21:52] <bjs> anorthall: well I think iterable.join(str) is also good
[21:22:04] <anorthall> bjs: then you are both wrong and right
[21:22:05] <bjs> and str.join(iterable) is okay,  but list.join(str) only is probably not
[21:22:26] <anorthall> nevermind my previous message
[21:22:39] <cloudbender> 'If at first to don't succeed ... you should have asked me how to do it ...'
[21:22:40] <bjs> anorthall: okay but in this conversation *I* am the only one who has suggested iterable.join(str) seriously,  there are reasons Python doesn't go this route
[21:22:44] <bjs> and str.join(iterable) is second best
[21:22:45] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:22:58] <anorthall> bjs: yes, i'm just messing around. i'm familiar with the logic behind the decision
[21:23:03] <anorthall> but still, i want list.join(str)
[21:23:05] <anorthall> :P
[21:23:19] <bjs> anorthall: it's not impossible to add .join() to list
[21:23:24] <cloudbender> write a method on list
[21:23:43] <bjs> I think such a PEP is likely to be rejected,  but there's no technical reason a future version could not have it
[21:23:54] <anorthall> I'll send it off posthaste
[21:24:04] <bjs> making it generically iterable.join() really just isnt possible, it's a bit too late to make that decision
[21:24:06] <cloudbender> the first thing I did in py was learn how to class(list)
[21:24:57] <bjs> Okay there are reasons you don't want to do that either, and e.g. that's why UserList exists
[21:24:59] *** Joins: matsaman (~matsaman@user/matsaman)
[21:25:01] <grym> cloudbender: do i smell experience with a language with extension methods :)
[21:25:19] * Byteflux stabs Ruby
[21:25:21] *** Joins: white_shadow (~brey@117.222.234.195)
[21:25:33] <cloudbender> I put methods on custom classes and pass them around like cheap whisky
[21:25:41] <grym> oh, well, sure
[21:25:53] <anorthall> ruby is a very good programming language
[21:25:57] <jinsun> I know C# linq has Enumerable.join, that works there because it is not duck typed, you have to implement the IEnumerable interface to be called Enumerablee
[21:26:03] <anorthall> potentially the best ever made, except for rust
[21:26:22] <anorthall> https://github.com/mTvare6/hello-world.rs
[21:26:24] <grym> jinsun: more to the point, you can https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods
[21:26:29] <grym> jinsun: which python flat out doesn't need
[21:26:36] <bjs> jinsun: Python could have done it too,  by just saying that "join" was part of the duck-typed interface for an iterable
[21:26:46] <bjs> jinsun: but you can't "add" to these interfaces later on in Python really
[21:26:53] <jinsun>  in python just having __iter__ is enough to be iterable and other iterables don't inherit from collections.abc.Iterable so just defining a collections.abc.Iterable.join is not enough
[21:27:08] <cloudbender> rust is ok bu the borrowing semantics make me question my own existence
[21:27:40] <cloudbender> but it's really fast
[21:27:50] <jinsun> bjs: yeah that's what I was kinda going to say
[21:28:15] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[21:28:20] <bjs> jinsun: other interfaces, e.g. dict-like mappings have "normal" methods (.get(), .setdefault(), etc) as part of their duck-typed "interface"
[21:28:55] <xheimlich> how can I use joblib to dump a Python object to a bytes-typed variable?
[21:29:16] <bjs> xheimlich: what is joblib
[21:29:26] <cloudbender> you mean serialize it ?
[21:29:37] <grym> xheimlich: your thing has to be picklable for joblib to work
[21:29:44] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[21:29:46] <grym> because it's just multiprocessing in a trenchcoat
[21:29:48] *** Joins: Fiji (~Fiji@user/fiji)
[21:29:52] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[21:29:52] <xheimlich> grym: that it is. I can pickle it to disk.
[21:30:10] *** Quits: KevinX (~KevinX@185.245.86.84) (Ping timeout: 240 seconds)
[21:30:11] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:30:12] <xheimlich> docs say: filename or file-like object. so I guess my question is how I say "with open my_var as file_pointer:"
[21:30:18] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[21:30:56] <grym> you should be able to pickle to bytesIO, but joblib should handle all this under the covers without more detail
[21:31:00] <bjs> xheimlich: there is io.BytesIO
[21:31:26] <xheimlich> the context: I'd like to keep some metadata with these objects. So I'd be using either pydantic or just dicts to export json files containing big binary blobs.
[21:31:39] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[21:31:51] *** Joins: node1 (~node1@user/node1)
[21:31:58] <bjs> Anything that says "files" and "pickles" in the same place immediately sets alarm bells off for me though
[21:32:19] <sybariten> anorthall: i am pro that approach and i am also con that approach.... as for now, i want to learn things in their most "basic" manner if you understand what i mean?
[21:32:33] <grym> xheimlich: do ndarrays feature prominently in your data?
[21:32:41] <jinsun> grym: I actually want the extension methods like thing in python sometimes, the python alternative is monkey patching which mypy doesn't like and doesn't work on built-in stuff
[21:32:52] <xheimlich> {"version": 0.4, "joblib_version": 0.9, "fitted_to": "those tables from john", "content": <big blob>)
[21:32:56] <anorthall> sybariten: maybe you should learn C then
[21:33:27] <grym> xheimlich: because if it does, h5py is probably where i'd go
[21:33:47] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[21:33:51] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[21:34:04] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[21:34:05] <xheimlich> yeah, but my python objects aren't just data. they're sklearn-like models.
[21:34:33] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 248 seconds)
[21:34:53] *** Quits: fortuno51 (~fortuno51@78.10.204.200) (Remote host closed the connection)
[21:34:58] <xheimlich> some have BallTrees as main internals. Basically I'd like to store these models with metadata. I might have to write a separate metadata file instead, but it isn't ideal.
[21:35:01] <grym> sklearn does love them some pickles.
[21:35:13] <grym> i like sidecar json metadata just fine, really
[21:35:26] <grym> rarely have a problem with it, and then you can cat them :)
[21:35:39] <grym> instead of having handy text stored in some nasty blob
[21:35:48] <aiRness> Hello, I have a problem with the following error: https://bpa.st/NFPQ it seems that after upgrading my python version the ffi library is broken although every package is installed on the server, can anyone give any tips ?
[21:36:18] <xheimlich> sklearn standardized on fit / predict / transform so you really can hot swap these things. also a lot of stuff outside sklearn and adjacencies has conformed to the API, even at the cost of having mostly dummy methods.
[21:36:20] *** Joins: fortuno51 (~fortuno51@78.10.204.200)
[21:36:41] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 248 seconds)
[21:36:47] <xheimlich> what is sidecar?
[21:36:59] <xheimlich> ahh i get it
[21:37:29] <sybariten> anorthall: uughh no
[21:37:42] <sybariten> :)
[21:37:45] <xheimlich> I was hoping to have a structure that can be read at the other end more "blindly".
[21:38:21] <cloudbender> c is easy to learn, it's just hard to work with
[21:38:29] <SnoopJ> aiRness, how did you upgrade your Python version? It looks like you're using your (Debian? Ubuntu?) system's Python, and this can create some really mixtures.
[21:38:46] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:38:57] <aiRness> SnoopJ: exactly, from the debian package manager (apt)
[21:39:19] <SnoopJ> aiRness, which version did you have previously, which version did you install, and from which repository?
[21:40:07] <cloudbender> well, it's been a ... slice()
[21:40:12] <cloudbender> ok that's bad
[21:40:34] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Connection closed)
[21:40:34] <aiRness> SnoopJ: 3.8, I've installed 3.9.2 now and again from the debian repo
[21:40:38] *** Joins: fdan (~fdan@192.146.154.3)
[21:40:56] <aiRness> SnoopJ: and from what I can see I had 3.5 previously but upgraded to 3.8 without issues
[21:40:57] <xheimlich> usually in ubuntu "python" continues to refer to 2.x
[21:41:01] <SnoopJ> aiRness, I'm most familiar with the potential for incompatibility with the python3 package provided by the bionic and bionic-updates repositories for Ubuntu, but I would guess it's possible in multiple releases of Debian-alikes because their philosophy is "everything goes in dist-packages" and this is awful.
[21:41:27] <aiRness> SnoopJ: so my issue is my python version ?
[21:41:52] <xheimlich> python<tab> completes here to python2.7, python3.6, python 3.7m, python3.8
[21:42:11] <xheimlich> e.g. due to old pickles I have plenty of stuff that only works on 3.6
[21:42:12] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[21:43:10] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:43:31] <SnoopJ> aiRness, my guess is that Debian has installed 3.8 and 3.9.2 on top of each other in the charming way that it does, and one or more of your other packages (probably python3-cryptography) expects just one of those. Can you put onto bpaste the result of `sudo apt list --installed python3*` ?
[21:44:16] <SnoopJ> (best advice imo on Debian is to just pretend the system Python doesn't exist, install packages you want for your own sake into a venv or a locally installed copy; pyenv is great for the latter)
[21:44:33] <anorthall> ^++
[21:44:36] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:44:41] *** Joins: Blankspace (~androirc@user/blankspace)
[21:44:48] *** Quits: Milos (~Milos@user/milos) (Quit: ZNC 1.8.2 - https://znc.in)
[21:45:03] *** Joins: Milos (~Milos@user/milos)
[21:46:00] <aiRness> for some reason the list is empty but if you want what is installed here you go: https://bpa.st/KXAQ
[21:46:06] <SnoopJ> possible too that it's an issue with the openssl version
[21:46:14] <aiRness> SnoopJ: that and also 2.7
[21:46:21] <aiRness> SnoopJ: so 2.7 and 3.9 are installed
[21:46:22] <SnoopJ> aiRness, have you been running `sudo pip install` ?
[21:46:33] <aiRness> SnoopJ: yes specifically for the application that I have the problem
[21:46:40] <grym> oops
[21:46:40] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[21:46:43] <aiRness> pip3 not pip
[21:46:49] <SnoopJ> aiRness, this is a great way to break Debian, cannot recommend against it strongly enough.
[21:46:53] <aiRness> there's no pip as a local binary
[21:47:00] <aiRness> alright
[21:48:07] *** Quits: lf94 (~lf94@178.128.239.88) (Changing host)
[21:48:07] *** Joins: lf94 (~lf94@user/lf94)
[21:48:13] <SnoopJ> revised guess: you installed that version of `cryptography` (or a package that depends on it) using the older one, but are using it from the newer one? The error itself looks like ABI incompatibility but I've not really seen one like this.
[21:48:39] <aiRness> SnoopJ: there's no older one anymore
[21:48:49] <aiRness> that's the issue python3 was upgraded
[21:48:57] <aiRness> and the library is the same
[21:49:04] <SnoopJ> aiRness, Debian doesn't care about that because it doesn't know about what you did to dist-packages before it upgraded the package
[21:49:04] <Blankspace> How do you clear coding tests
[21:49:31] <aiRness> SnoopJ: yes that's understandable, the thing is do I roll back now the python version ?
[21:49:36] <SnoopJ> aiRness, i.e. if you put stuff in dist-packages that was 3.8-specific (possibly this `cryptography`), it does not know about them and did not in any way address them
[21:49:39] <anorthall> Blankspace: more information required
[21:49:42] <grym> Blankspace: i'm not sure what a coding test is
[21:50:26] <Blankspace> They give questions to write program in specified time.
[21:50:39] <grym> oh!
[21:50:40] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[21:50:42] <grym> so clear as in "do well on"
[21:50:45] <aiRness> SnoopJ: what if I try to reinstall the application with all the current versions ?
[21:50:50] <Blankspace> Yes
[21:51:00] <grym> Blankspace: ah.  i thought you had a question about unit tests
[21:51:01] <grym> :)
[21:51:13] <SnoopJ> aiRness, two options here: blow away the offending stuff in your dist-packages (or possibly ask #debian to help you wipe it entirely and get it back to factory conditions), or downgrade the Python as you suggest. I think that's a matter of telling apt that you want the old package (i.e. `sudo apt install pkg=whatever`)
[21:51:28] <aiRness> SnoopJ: got it
[21:51:36] <anorthall> Blankspace: so what is the question
[21:51:41] <SnoopJ> aiRness, re-installing in the same fashion *might* work, but again, I really cannot say enough about what a bad idea running pip as root is, especially on a system that does so many idiosyncratic things with Python
[21:52:03] <anorthall> SnoopJ: is it a good idea to run pip as root?
[21:52:22] <aiRness> I didn't run it as root
[21:52:23] <SnoopJ> anorthall, it is the exact opposite of a good idea on a Debian system
[21:52:33] <anorthall> SnoopJ: what if I *really* want to
[21:52:48] <grym> anorthall: then you're really asking for trouble
[21:52:58] <anorthall> i just can't resist the urge
[21:53:01] <grym> consenting adults clean up their own messes
[21:53:03] <Blankspace> I am only stuck till writing Fibonacci
[21:53:22] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (Ping timeout: 245 seconds)
[21:53:26] <SnoopJ> anorthall, you are free to break your own system if you like, but I'm going to go back to the problem at-hand.
[21:53:34] <SnoopJ> aiRness, you ran it with `sudo` didn't you?
[21:53:48] <Blankspace> I wished to understand backtracking.
[21:54:46] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 246 seconds)
[21:55:40] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[21:58:02] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[21:58:17] *** Quits: white_shadow (~brey@117.222.234.195) (Quit: Leaving)
[21:59:07] *** Quits: y1n (~y1n@84-115-65-139.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[21:59:08] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[21:59:10] *** Joins: mgp (~quassel@quassel.woboq.com)
[22:00:10] *** Quits: schumaml3 (~schumaml@dslb-178-007-198-199.178.007.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[22:00:21] *** Quits: aiRness (~aiRness@199.ip-54-37-75.eu) (Remote host closed the connection)
[22:01:21] *** Joins: schumaml3 (~schumaml@dslb-092-074-006-001.092.074.pools.vodafone-ip.de)
[22:02:49] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[22:02:49] *** Quits: launchd (~examknow@bitbot/launchd) (Read error: Connection reset by peer)
[22:03:05] *** Joins: launchd (examknow@bitbot/launchd)
[22:03:54] *** Quits: launchd (examknow@bitbot/launchd) (Remote host closed the connection)
[22:04:05] *** Joins: Betal (~Betal@user/betal)
[22:04:06] *** Joins: launchd (examknow@bitbot/launchd)
[22:04:36] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[22:04:57] <rama> Hey got a question about the speed of branches vs lookups, i would think that the dictionary lookup case would be faster here because it can access the key-value directly rather than iterating over potential branches, https://bpa.st/4F5A
[22:05:28] <rama> but it seems like the branches won, is there some under the hood branch optimization that happnes?
[22:05:45] *** Quits: launchd (examknow@bitbot/launchd) (Remote host closed the connection)
[22:05:55] *** Joins: launchd (examknow@bitbot/launchd)
[22:05:57] *** Joins: Adoi (~Adoi@user/adoi)
[22:06:42] *** Quits: schumaml3 (~schumaml@dslb-092-074-006-001.092.074.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[22:07:04] <SnoopJ> rama, you have to compute the hash of the key to do a dictionary look-up, which isn't necessarily inexpensive. Probably that accounts for most of the difference here.
[22:08:46] <deniska> rama: I wouldn't expect a hashmap to be faster than just checking things in order until you have maybe lower tens amount of items
[22:09:07] <SnoopJ> rama, but you're also timing more code than you're really interested in, the setup of your dictionary and translate() can be given to timeit as the `setup` keyword argument to avoid including them in the timing output.
[22:09:17] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[22:09:21] *** Joins: vladoski (~vladoski@178.138.195.254)
[22:09:44] *** Joins: schumaml (~schumaml@dslb-088-067-050-013.088.067.pools.vodafone-ip.de)
[22:11:12] *** Joins: y1n (~y1n@84-115-65-142.wifi.dynamic.surfer.at)
[22:11:12] *** Joins: djapo (~archangel@user/djapo)
[22:11:58] <SnoopJ> the very last step of a dictionary look-up is an equality test, so it's strictly more work unless you have a lot of branches (in which case the conditional's many checks will lose to the dict's hash + one/few check(s))
[22:12:13] *** Quits: vladoski (~vladoski@178.138.195.254) (Client Quit)
[22:12:19] <rendar> my book suggests that for small projects i should use venv isolation, but for larger project, especially in remote servers venv isolation is not enough and i should use complete os isolation, thoughts?
[22:12:57] <bjs> rendar: absolute statements are always wrong
[22:13:05] <SnoopJ> rendar, there are good reasons to want to isolate an entire operating environment, but anyone who sells you universal rules should be treated with suspicion imo
[22:13:15] <rendar> ok
[22:13:37] <rendar> well he says operating system isolation is worth considering, not you must do that
[22:13:40] <rendar> tbh
[22:13:57] <bjs> rendar: fair enough,  you should consider it
[22:14:01] <rendar> ok
[22:14:56] <SnoopJ> it's a useful thing to do when isolating ~the entire operating environment adds value to the end result. This isn't true of all programs.
[22:15:53] <SnoopJ> but one big advantage is that it helps others reproduce what you did: i.e. a Dockerfile helps alleviate "works on my machine" because it provides a common 'machine'
[22:16:12] *** Joins: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca)
[22:16:47] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[22:17:58] *** Quits: launchd (examknow@bitbot/launchd) (Quit: brb)
[22:18:14] *** Joins: launchd (examknow@bitbot/launchd)
[22:21:42] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 245 seconds)
[22:22:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:26:12] *** Quits: Blankspace (~androirc@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[22:27:57] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[22:30:34] *** Joins: manin (~x@185.242.190.95)
[22:30:58] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[22:31:38] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (Read error: Connection reset by peer)
[22:31:46] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[22:33:00] *** Joins: Caesar-EW (~Caesar-EW@84.213.107.109)
[22:33:53] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:34:04] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[22:34:34] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[22:34:52] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[22:36:22] <stevieh> moving my project from python 3.7 to 3.9 gives me a change in the BaseManager address: before, I got /tmp/pymp-t70qnswx/listener-1afx0s8q now I get b'\x00listener-11783-0'
[22:37:16] <stevieh> as I need to change access rights to the socket: how do I get the full path for it again?
[22:37:19] *** Parts: lf94 (~lf94@user/lf94) (WeeChat 3.0)
[22:38:01] <stealth_> stevieh, link to code?
[22:38:39] *** Joins: schumaml1 (~schumaml@dslb-188-104-172-084.188.104.pools.vodafone-ip.de)
[22:38:58] *** Joins: Adois (~Adoi@user/adoi)
[22:39:10] *** Quits: schumaml (~schumaml@dslb-088-067-050-013.088.067.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[22:39:12] <stevieh> https://gitlab.com/syncosync/syncosync/-/blob/master/src/syncosync.py line 73
[22:39:22] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:39:40] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[22:40:44] <stevieh> adding a print("Fullname:",fullname)  there gave me the results as above
[22:40:50] <rendar> i use a script of mine to create a venv, update pip and so on, but i get a warning: https://bpa.st/LUKQ -- where am i supposed to use that flag? --no-warn-script-location ? with pip?
[22:41:06] *** Quits: Pandadub (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Remote host closed the connection)
[22:41:24] *** Joins: Pandadub (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[22:41:45] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 248 seconds)
[22:42:37] *** Joins: Blankspace (~androirc@user/blankspace)
[22:43:56] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[22:44:39] *** Joins: vladoski (~vladoski@185.53.197.91)
[22:48:53] <stealth_> stevieh, ya something in BaseManager
[22:48:58] *** Quits: vladoski (~vladoski@185.53.197.91) (Client Quit)
[22:49:18] *** Joins: vladoski (~vladoski@185.53.197.91)
[22:50:00] <stealth_> stevieh, thats weird https://github.com/python/cpython/blob/3.9/Lib/multiprocessing/managers.py#L558
[22:50:30] *** Joins: Fiji (~Fiji@user/fiji)
[22:50:30] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[22:50:50] *** Quits: rendar (~rendar@user/rendar) ()
[22:50:50] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35)
[22:50:52] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:51:03] <stevieh> stealth_: no glue ...
[22:52:10] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[22:52:55] *** Joins: yte3 (~0@151.15.182.117)
[22:53:23] <stevieh> but looks similar in 3.7
[22:53:36] *** Joins: Enitin (~Enitin@82.102.22.84)
[22:53:54] *** Joins: xon (~xon@192.145.116.163)
[22:54:20] *** Joins: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro)
[22:54:31] <stealth_> stevieh, i see, maybe there is more to it
[22:54:49] <yte3> how can I exec() a string of python code as it was import'ed?
[22:54:49] <yte3> e.g. write the string to foo.py then `import foo`. is there another way without going thru a tmp file?
[22:55:00] <yte3> *as if
[22:55:28] <stealth_> yte3, https://docs.python.org/3/library/importlib.html
[22:55:44] *** Joins: schumaml2 (~schumaml@dslb-178-007-201-081.178.007.pools.vodafone-ip.de)
[22:56:05] <yte3> exec_module?
[22:56:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:56:31] *** Joins: mud (~mud@user/kadoban)
[22:56:49] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:df2f:d9d1:c196:28b3)
[22:56:57] <SnoopJ> yte3, can you tell us what you are doing that has you reaching for this?
[22:57:06] *** Quits: schumaml1 (~schumaml@dslb-188-104-172-084.188.104.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[22:57:13] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 248 seconds)
[22:57:21] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:57:22] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1857:238e:fd4a:aa35) (Quit: Leaving)
[22:57:34] *** Quits: vladoski (~vladoski@185.53.197.91) (Quit: Textual IRC Client: www.textualapp.com)
[22:58:06] <yte3> SnoopJ: I have a string of python code as input from the user (it is an app with a small IDE and an embedded python interpreter) which I have to load and call specific functions defined in it
[22:58:13] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:58:49] *** Quits: y1n (~y1n@84-115-65-142.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[22:58:52] <xon> hello, I hope you're all doing great! my wifi changes IP daily (power problem). and I am planing to buy NordVPN to use Socks5 and add it to AWS security rules in order to have access to AWS ec2. does the socks5 will give me the same ip when I connect to it?
[22:58:55] <yte3> SnoopJ: importing the code as a module makes very easy then to reach the functions defined in it
[22:59:34] *** Quits: Jefren (~Jefren@70.35.66.78) (Ping timeout: 272 seconds)
[23:00:25] *** Joins: Jefren (~Jefren@208.104.190.25)
[23:00:43] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[23:00:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[23:01:48] *** Joins: computeiro (~Wender@189.37.66.232)
[23:02:01] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[23:02:26] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[23:03:07] *** Joins: Enitin (~Enitin@82.102.22.84)
[23:03:53] *** Quits: wender (~Wender@186.210.45.41) (Ping timeout: 268 seconds)
[23:03:53] *** Quits: Blankspace (~androirc@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[23:04:17] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Client Quit)
[23:04:37] <yte3> stealth_: how importlib can do this?
[23:04:51] *** Joins: luvalon18 (~luva@178.239.167.169)
[23:05:09] <yte3> I don't need to import a module whose *name* is defined in a variable
[23:05:12] <KirkMcDonald> yte3: The exec() builtin function may be of interest.
[23:05:26] <yte3> KirkMcDonald: yes, it's the closest thing
[23:05:34] <yte3> but how I can namespace it to a new module?
[23:05:44] <KirkMcDonald> yte3: You can namespace it to a dictionary.
[23:05:56] *** Joins: wender (~Wender@186.210.45.41)
[23:06:17] *** Quits: luvalon1 (~luva@178.239.167.170) (Ping timeout: 248 seconds)
[23:06:17] *** luvalon18 is now known as luvalon1
[23:06:19] <yte3> KirkMcDonald: oh, I overlooked the extra exec() args, thanks ;)
[23:06:23] <KirkMcDonald> d = {}; exec(s, d)
[23:07:26] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[23:07:42] <sybariten> our school material recommends a structure like this, to open a file: https://bpa.st/QXWQ   is the same principle applicable also for writing? cause when writing i really want to make sure to close the file _after_ the write has happened, i suppose?
[23:08:15] *** Joins: Jefren1 (~Jefren@70.35.67.92)
[23:08:35] *** Quits: computeiro (~Wender@189.37.66.232) (Ping timeout: 258 seconds)
[23:08:39] <KirkMcDonald> sybariten: It is typically a good idea to use a context manager when opening a file, yes. Unless you want to leave it open.
[23:08:57] <grym> sybariten: context managers are very good, yes
[23:08:57] <stevieh> stealth_: I mean, I see the socket name, but the rest of the path is missing...
[23:09:03] <sybariten> no i don't think i want to.... im a bit unsure how the closing actually works though
[23:09:12] <stealth_> stevieh, difference between 3.7/3.9 https://bpa.st/A23A
[23:09:33] <sybariten> is "with" considered a context manager? What other situations would one use "with" in? (If theres a practical example)
[23:09:37] <stealth_> stevieh, its hard to narrow down by just reading the code
[23:09:40] *** Quits: Jefren (~Jefren@208.104.190.25) (Ping timeout: 240 seconds)
[23:09:46] <stevieh> exactly
[23:09:57] *** Quits: CyberShadow (vladimir@89.28.117.31) (Quit: CREO ERGO SVM)
[23:10:09] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[23:10:18] <KirkMcDonald> sybariten: Strictly speaking, the context manager is the object that you pass to the `with` statement.
[23:10:21] *** Joins: Enitin (~Enitin@82.102.22.84)
[23:10:23] <grym> sybariten: when the with block exits, the thing after `as` "goes away'
[23:10:26] <stealth_> stevieh, you could also create a bug.python.org report maybe someone with inside knowledge can better help you .
[23:10:30] *** Quits: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) (Quit: Leaving.)
[23:10:44] <stevieh> stealth_: maybe it is not a bug...
[23:10:51] <KirkMcDonald> sybariten: But sometimes the with statement itself is called a context manager, because whatever.
[23:11:17] *** Joins: y1n (~y1n@84-115-65-115.wifi.dynamic.surfer.at)
[23:11:33] <stealth_> stevieh, assuming your code didn't change
[23:11:34] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:11:35] <sybariten> KirkMcDonald, grym: hmm i see!
[23:11:51] <grym> sybariten: https://web.archive.org/web/20200405185343/https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/
[23:11:52] *** Joins: luvalon12 (~luva@178.239.167.170)
[23:11:54] <stevieh> stealth_: no, it didn't...
[23:12:30] *** Joins: CyberShadow (vladimir@89.28.117.31)
[23:12:45] <stealth_> stevieh, if no one here can help, bugs.python.org is a good option.
[23:12:47] <sybariten> thanks
[23:13:15] *** Joins: i0e (~is0ke3@user/is0ke3)
[23:13:44] <stealth_> stevieh, you could also try `python-dev`
[23:13:47] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 245 seconds)
[23:14:09] <stevieh> stealth_: an IRC chan?
[23:14:38] <stealth_> stevieh, #python-dev maybe a code dev is feeling like helping you! most likely not, but worth a try
[23:14:49] <stealth_> core dev*
[23:15:10] <SnoopJ> yte3, if you have a module object (you can get one with importlib.util.module_from_spec() for instance), you can pass that module's __dict__ to exec() to populate it. Not sure if this can be improved on (my importlib is a little shaky), but have a look: https://bpa.st/BHMQ
[23:15:26] *** Joins: ckdCreations (~ckdCreati@147.55.130.34)
[23:15:36] *** Quits: luvalon1 (~luva@178.239.167.169) (Ping timeout: 268 seconds)
[23:15:36] *** luvalon12 is now known as luvalon1
[23:16:04] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[23:16:25] *** Joins: c10l (~c10l@89.34.167.207)
[23:16:53] <stevieh> stealth_: thx I give it a try
[23:17:32] *** Joins: cheater (~Username@user/cheater)
[23:18:03] *** Quits: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[23:19:41] <yte3> SnoopJ: thanks a lot!
[23:20:00] <SnoopJ> yte3, does the concept of making a module, then executing into it make sense?
[23:20:20] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[23:20:20] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[23:20:20] *** Quits: The-Compiler (~compiler@the-compiler.org) (*.net *.split)
[23:20:20] *** Quits: mikebald (~mikebald@159.203.185.106) (*.net *.split)
[23:20:20] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (*.net *.split)
[23:20:20] *** Quits: tanner (~tanner@tilde.town) (*.net *.split)
[23:20:20] *** Quits: carlio (~carlio@88.198.149.110) (*.net *.split)
[23:20:20] *** Quits: nigelb (~nigel@zeus.nigelb.me) (*.net *.split)
[23:20:30] *** Joins: nigelb (~nigel@zeus.nigelb.me)
[23:20:30] *** Joins: carlio (~carlio@88.198.149.110)
[23:20:30] *** Joins: Dev0n (~Dev0n@user/dev0n)
[23:20:30] *** Joins: The-Compiler (~compiler@the-compiler.org)
[23:20:30] *** Joins: mikebald (~mikebald@159.203.185.106)
[23:20:30] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[23:20:30] *** Joins: tanner (~tanner@tilde.town)
[23:20:33] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (Max SendQ exceeded)
[23:20:44] *** Joins: xon_ (~xon@host-6-net-68-160-119.mobilinkinfinity.net.pk)
[23:20:46] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[23:20:49] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[23:20:53] *** Joins: koolazer (~koo@user/koolazer)
[23:20:58] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Remote host closed the connection)
[23:21:48] *** Joins: audiobirb (~audio@2603-8081-1801-3bb5-8b06-6d83-bd34-d027.res6.spectrum.com)
[23:21:55] *** Quits: xon (~xon@192.145.116.163) (Read error: No route to host)
[23:21:56] *** Quits: xon_ (~xon@host-6-net-68-160-119.mobilinkinfinity.net.pk) (Read error: Connection reset by peer)
[23:22:56] *** Joins: civitron (~civitron@2604:3d08:1b85:a00:b1d8:febf:7f26:5d8e)
[23:23:09] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[23:23:17] <sybariten> is there anything ovbvious that is not nice about how this code is organized?  https://bpa.st/FNGA   (it seems to work all right)
[23:23:25] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[23:23:36] *** Joins: xon (~xon@host-6-net-68-160-119.mobilinkinfinity.net.pk)
[23:24:53] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[23:25:07] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.0)
[23:25:30] *** Quits: civitron (~civitron@2604:3d08:1b85:a00:b1d8:febf:7f26:5d8e) (Read error: Connection reset by peer)
[23:26:03] <jinsun> sybariten: that del doesn't look good at all, instead of that you could do `fileList = fileContents.split("\n")[:-n1] in the previous liine
[23:26:17] <sybariten> hmm hmm hmm
[23:26:50] <grym> (didn't we do that like, hours ago)
[23:26:58] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[23:27:30] *** Joins: skatino (~jolitoled@75.104.65.108)
[23:27:43] <sybariten> grym: i'm doing exercises to learn, it means i don't actually know the stuff i'm doing at the moment. Therefor the advice that comes isn't necessarily immediately applicable for me
[23:29:36] <sybariten> sidetrack: what kind of a creature is del, anyhow? I'm used to anything that operates on anything else is typically used like(this) , or maybe.likethis() . But here we have a "command" which has an actual space after the argument, like in bash or something
[23:29:52] <skatino> I'm creating properties in class using @property (and associated decorators), whose values are backed by a db. I want to be able to set the value in db, and moreover, I want to delete the db value when my instance goes bye-bye (out of scope).. My thought is to 1) add @prop.deleter (cleanup db) and then in __del__ method, add a 'del self._prop'. please advise.
[23:30:35] *** Joins: palasso (~palasso@user/palasso)
[23:31:03] *** Joins: expunged (~elonsatos@user/elon-satoshi/x-4242282)
[23:31:46] <expunged> I feel like programming can be tedious sometimes. What are the fun parts of programming?
[23:32:06] <sybariten> jinsun: oh. Ofcourse. YEah thats a nice step to remove, thanks!
[23:32:07] <jean-luc> creating something that does something you need it to do
[23:32:08] <grym> expunged: getting paid, finding clever things, the usual
[23:32:12] <jean-luc> thats the fun part of programming
[23:32:17] <jean-luc> its like being a god
[23:32:31] <grym> dog.jpg
[23:32:32] <sybariten> expunged: hahaha, very deep and relevant question on this tuesday evening actually
[23:32:33] * SnoopJ enjoys making "throwaway" programs
[23:32:34] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[23:32:40] <skatino> expunged, getting paid, figuring out a hard puzzle problem. Of course the groupies ;)
[23:33:14] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[23:33:18] <sybariten> expunged: beware though, you may cause thousands of irc users to simply turn off their computers and question their existence
[23:33:36] <expunged> lol
[23:33:58] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[23:34:07] <sybariten> SnoopJ: how do you mean?
[23:34:17] <expunged> at least one may have turned off their computer, winterflaw
[23:34:25] *** Joins: waynew (~wayne@user/waynew)
[23:34:31] <skatino> The groupies!
[23:34:40] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[23:34:42] <expunged> waynew: i can't tell if you're way new or Wayne W.
[23:34:53] <SnoopJ> sybariten, short-lived programs that are either for a really specific problem, or just for exploring an idea.
[23:35:36] <expunged> hmm
[23:35:51] *** Joins: Jefren2 (~Jefren@70.35.66.251)
[23:36:22] <expunged> I'm not sure if the coin flip project in Automate The Boring Stuff With Python's List chapter wants me to count multiple 6 in a row streaks in one set of 100 flips
[23:36:38] <cloudcell> hi, I am trying to overwrite existing data in an hdf5 file, but this manual says I cannot do that https://tenpy.readthedocs.io/en/v0.8.1/reference/tenpy.tools.hdf5_io.save_to_hdf5.html, yet this https://stackoverflow.com/questions/22922584/how-to-overwrite-array-inside-h5-file-using-h5py seems to imply this should be possible, so is it possible to overwrite old data in hdf5 file with new values?
[23:36:49] *** Quits: fortuno51 (~fortuno51@78.10.204.200) (Remote host closed the connection)
[23:37:27] <expunged> What are your favorite programming puzzles?
[23:37:40] *** Quits: Jefren1 (~Jefren@70.35.67.92) (Ping timeout: 240 seconds)
[23:38:05] *** Joins: djapo (~archangel@user/djapo)
[23:38:06] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[23:38:26] <SnoopJ> expunged, there's an excellent list of project ideas here: https://nedbatchelder.com/text/kindling.html
[23:38:28] *** Joins: Jefren3 (~Jefren@70.35.67.2)
[23:38:43] <SnoopJ> for something "puzzle" like, Project Euler is quite good
[23:38:45] *** Joins: fortuno51 (~fortuno51@78.10.204.200)
[23:38:52] *** Quits: gtristan (~tristan@223.38.23.138) (Remote host closed the connection)
[23:39:12] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:df2f:d9d1:c196:28b3) (Ping timeout: 245 seconds)
[23:39:33] <KirkMcDonald> expunged: Zachtronics games.
[23:39:45] <SnoopJ> TIS-100? :)
[23:40:02] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:40:13] *** Quits: skatino (~jolitoled@75.104.65.108) (Read error: Connection reset by peer)
[23:40:27] *** Quits: Jefren2 (~Jefren@70.35.66.251) (Ping timeout: 245 seconds)
[23:41:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:41:19] <SnoopJ> cloudcell, why do you say the first link says you can't overwrite? It doesn't appear to say that, it has a caution that seems to suggest the opposite
[23:41:39] <SnoopJ> i.e. the doc for the `path` parameter reads to me as saying "use this carefully or you'll overwrite data"
[23:41:40] *** Quits: d3sync (~d3sync@130.43.80.239.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[23:41:46] <sybariten> SnoopJ: thats interesting, philosophically i think i'm the opposite
[23:41:52] <grym> iirc, and it's been a while, you cannot _simultaneously_ write to hdf5 without really playing with fire
[23:42:02] <SnoopJ> grym, simultaneously with what?
[23:42:08] <grym> yourself?
[23:42:23] <grym> concurrent writes are scary
[23:42:24] <SnoopJ> grym, you mean writing from multiple threads?
[23:42:37] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[23:42:43] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 268 seconds)
[23:42:58] *** Joins: Pickchea (~private@user/pickchea)
[23:43:14] <cloudcell> SnoopJ: you must be right, let me try making another attempt at this
[23:43:15] <SnoopJ> there's are parallel versions of libhdf5 but I'm not sure what the implications are for h5py
[23:43:27] *** Joins: Jefren4 (~Jefren@70.35.67.113)
[23:44:08] <grym> the last time i looked, the implications were 'we're in alpha, tread carefully', but thats circa 2019
[23:44:09] <cloudcell> SnoopJ: I get this error "ValueError: Unable to create group (name already exists)"
[23:44:40] *** Quits: Jefren3 (~Jefren@70.35.67.2) (Ping timeout: 240 seconds)
[23:45:14] *** Joins: p-i- (~Ohmu@2403:6200:8870:41ad:d09f:e768:a8b9:209a)
[23:45:15] <SnoopJ> cloudcell, I guess their documentation isn't clear enough about this. Sounds like the TeNPy library doesn't support this operation.
[23:45:46] <cloudcell> yes, SnoopJ
[23:46:08] <cloudcell> but their library is very good otherwise as it allows to save dictionaries
[23:46:31] <cloudcell> and sets
[23:46:32] <SnoopJ> cloudcell, probably you want to delete the group in the HDF5 file. I'm not sure if they offer a way to do that, but h5py definitely does
[23:46:47] <cloudcell> thanks SnoopJ
[23:46:54] *** Joins: godofsea (~dark@146.196.46.15)
[23:48:12] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[23:48:33] *** Joins: |Scan| (~scan@user/scan/x-0114296)
[23:50:08] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 268 seconds)
[23:50:27] <KirkMcDonald> SnoopJ: TIS-100, Shenzhen I/O, Exapunks, Opus Magnum... Lotta good stuff in there.
[23:50:49] *** Joins: Enitin (~Enitin@82.102.22.84)
[23:50:51] <SnoopJ> KirkMcDonald, I've not played the others, but I suppose they're all programming of a sort, depending on how flexible one is about that term.
[23:51:04] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:51:06] *** Quits: besnn (~besnn@user/besnn) (Remote host closed the connection)
[23:51:10] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 240 seconds)
[23:51:31] *** Joins: mickey (~user@user/mickey)
[23:51:33] <godofsea> Hey, I have a script that needs multiple arguments like file_name, table, db, schema... like 7,8. Whats the best way of handling this in the sense that someone will miss one or 2 arguments sometimes, so reading the arguments from a config file makes sense but I am not sure what's the proper way of doing this ? Looking for ideas
[23:52:16] <grym> godofsea: any reasonable argument parser will support default values
[23:52:29] *** Quits: Adois (~Adoi@user/adoi) (Quit: Leaving)
[23:52:34] <grym> specify reasonable ones
[23:52:39] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:53:09] <godofsea> grym, yup it does. I am using typer. Default values make sense.
[23:53:17] *** Joins: acresearch (~acresearc@user/acresearch)
[23:53:35] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[23:53:42] *** Joins: todda7 (~torstein@240.red-81-37-247.dynamicip.rima-tde.net)
[23:54:16] <godofsea> I was looking at configparser module but I dont really like it, it's sort of like overkill.
[23:54:29] <expunged> Ooh I like the Python koans
[23:55:40] *** Quits: audiobirb (~audio@2603-8081-1801-3bb5-8b06-6d83-bd34-d027.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:55:58] <grym> you could construct a class instance of a config class from the arguments you specify with typer, if you like
[23:56:20] <grym> then serialise it / deserialise from disk in a format of your liking
[23:56:24] *** Quits: PJBoy (~PJBoy@user/pjboy) (Client Quit)
[23:56:56] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:57:50] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[23:58:34] *** Joins: audiobirb (~audio@2603-8081-1801-3bb5-b85b-ab08-b222-f64f.res6.spectrum.com)
[23:58:46] *** Quits: y1n (~y1n@84-115-65-115.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[23:58:56] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:59:21] *** Gustavo6046_ is now known as Gustavo6046
[23:59:22] <godofsea> grym, I am not sure I understand
[23:59:28] <godofsea> :-(
