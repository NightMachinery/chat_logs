[00:00:33] *** Quits: tedwing (~tw@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Quit: leaving)
[00:01:14] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[00:10:01] *** Joins: d3sync (~d3sync@62.1.243.19.dsl.dyn.forthnet.gr)
[00:13:03] <AhmedAmerican> tokerboker: may you show us ?
[00:13:05] <Payam> what paste website do you guys use for multiple files?
[00:15:04] <grym> bpa.st
[00:15:08] *** Joins: monkey_ (~user@190.104.116.134)
[00:15:24] <Payam> me too but it is down :(
[00:15:27] <AhmedAmerican> grym: is down since yesterday
[00:15:31] <grym> rip
[00:15:45] *** Quits: georgios (~georgios@ppp046176224061.access.hol.gr) (Quit: Konversation terminated!)
[00:15:55] <nedbat> Payam: gist.github.com also works
[00:16:16] <grym> sadly not anonymously
[00:17:00] <Payam> u gotta be logged in
[00:17:02] <Payam> :/
[00:17:41] <tokerboker> any way to anonymously share code?
[00:17:43] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[00:18:03] <grym> many, but multi-file done nicely is what's at hand here
[00:18:15] <tokerboker> any way for single-file ones?
[00:18:46] <stealth_> just do a search and find whatever you like
[00:18:53] <grym> dpaste, hastebin, all the lesser pastebins
[00:19:01] <tokerboker> https://pastebin.com/viMuKe28
[00:19:07] <tokerboker> AhmedAmerican: took a stab - https://pastebin.com/viMuKe28
[00:19:08] <nedbat> are you signed in to gitlab? https://gitlab.com/dashboard/snippets
[00:19:17] <grym> 0x0.st is nice
[00:19:19] <tokerboker> anonymous sharing :)
[00:19:35] <tokerboker> thanks grym
[00:19:45] *** thib_ is now known as thib
[00:20:12] <grym> 0x0 does not even try to render code though, so you have to curl it to see it
[00:23:03] <tokerboker> nice to have an api to do it.
[00:23:17] <tokerboker> easy to share/get large files
[00:23:21] <tokerboker> thanks for sharing
[00:23:24] <jinsun> I've seen https://paste.debian.net/, https://paste.ubuntu.com/, https://paste.centos.org/, in the past, none of them do multi-file though itt seems
[00:23:52] <stealth_> not sure why python doesn't have paste.python.org
[00:23:56] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[00:24:10] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[00:24:11] <Payam> I have a function in the super class that is a regular function. I call a async function in its subclass in which that regular function is called with first getting the running loop and then  loop.run_in_executor with an argument of type future. but I get this error : TypeError: 'ResultSet' object is not callable
[00:25:04] <bjs> Payam: what is a ResultSet ?
[00:25:09] <Payam> I don't know
[00:25:16] <Payam> Let me share the code
[00:25:36] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 276 seconds)
[00:25:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:26:23] *** Joins: wyclif (~wyclif@user/wyclif)
[00:26:46] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[00:27:29] *** Joins: fluiD (~fluiD@161.97.231.145)
[00:28:42] <Payam> my god.
[00:28:43] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[00:28:52] <Payam> debian.paste just tells me not to spam
[00:28:59] <Payam> This is crazy.
[00:29:29] <nedbat> Payam: the reason gist and gitlab want you to log in is to prevent spam. other anonymous pastebins have problems with pastes being deleted by bots.
[00:29:41] <nedbat> Payam: do you have a GitHub account?
[00:30:03] <Payam> yes I have.
[00:30:12] <Payam> can you delete gists later?
[00:30:22] <jinsun> yes
[00:30:25] <voldial> How do I force kw only args (normally sone by * in the func sig) with @attr.s(auto_attribs=True)? I found https://github.com/python-attrs/attrs/issues/110 ....
[00:30:37] <nedbat> Payam: yes. and you can make them secret (unguessable url)
[00:30:58] <bjs> voldial: for all of them? or only some of them?
[00:31:04] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[00:31:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:31:35] <bjs> voldial: there's the kw_only argument to attr.s(), as well as auto_attribs
[00:31:36] <voldial> bjs: well, I would like to be able to do either, but for some of them would be fine for my current problem
[00:31:52] <voldial> kw_only=True :) thanks:))
[00:31:56] *** Joins: wyclif (~wyclif@user/wyclif)
[00:32:19] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[00:32:57] *** Parts: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) ()
[00:33:15] *** Joins: chance (~chance@user/chance)
[00:33:16] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:33:45] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[00:33:51] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[00:34:46] *** Quits: chance (~chance@user/chance) (Client Quit)
[00:35:01] <Payam> https://gist.github.com/PeyamMaroufi/4c324c68af15f9ee89082b74373a47b9
[00:36:18] *** Quits: p-i-_ (~Ohmu@node-mzc.pool-1-4.dynamic.totinternet.net) (Quit: Leaving...)
[00:36:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[00:37:01] <Payam> bjs, nedbat I updated the gist
[00:37:05] <Payam> the traceback is there
[00:37:24] *** Joins: wyclif (~wyclif@user/wyclif)
[00:38:18] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:58ff:74e0:8a86:335d) (Ping timeout: 240 seconds)
[00:39:23] *** Quits: greedom (~greedom@2001:16b8:32e2:4d00:682a:45d8:7021:a57b) (Remote host closed the connection)
[00:39:40] <voldial> Why cant I "thing :object = attr.ib(init=False, default=None, kw_only=True)"?
[00:39:48] <stealth_> Payam, don't think you use `await task` https://gist.github.com/PeyamMaroufi/4c324c68af15f9ee89082b74373a47b9#file-subclass-py-L62
[00:40:02] <voldial> kw_only is ignored if init=False
[00:40:10] <stealth_> Payam, nm
[00:41:21] <nedbat> Payam: sorry, i am not good with future etc
[00:42:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[00:42:56] *** Joins: wyclif (~wyclif@user/wyclif)
[00:44:30] <Payam> shouldnt it be used?
[00:44:57] <stealth_> Payam, `content = await loop...` https://gist.github.com/PeyamMaroufi/4c324c68af15f9ee89082b74373a47b9#file-subclass-py-L26
[00:45:02] <grym> voldial: if init=False, it's not even a valid kwarg to the ctor
[00:45:13] *** Joins: orbatos (~orbatos@user/orbatos)
[00:47:12] *** Joins: orbatos_ (~orbatos@user/orbatos)
[00:47:40] <voldial> grym: ooh. thanks
[00:48:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[00:48:15] <Payam> stealth_, https://gist.github.com/PeyamMaroufi/4c324c68af15f9ee89082b74373a47b9
[00:48:49] *** Joins: wyclif (~wyclif@user/wyclif)
[00:49:31] *** Joins: dulanic3 (~dulanic@47.187.144.163)
[00:50:28] <stealth_> Payam, ok, 1 problem down. for this problem, i don't have access to code, it goes into whatever this get_content_with_selenium is
[00:51:27] *** Quits: dulanic (~dulanic@47.187.144.163) (Ping timeout: 258 seconds)
[00:51:28] *** dulanic3 is now known as dulanic
[00:51:31] <Payam> it is in superclass.py
[00:51:36] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[00:51:39] <Payam> it is further down on the page
[00:52:27] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:53:30] *** Joins: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com)
[00:54:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:54:15] <jinsun> Payam: looks like you are calling the function and supplying the result to run_in_executor, instead of supplying the function and arguments
[00:54:22] *** Joins: wyclif (~wyclif@user/wyclif)
[00:55:07] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[00:55:33] <jinsun> or does that get_content_with_selenium return a function?
[00:56:01] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:58ff:74e0:8a86:335d)
[00:58:03] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Quit: Leaving.)
[00:58:50] <Payam> it rturns a string
[00:58:54] *** Quits: stats464_ (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 265 seconds)
[00:59:07] <Payam> the html content of a website
[00:59:14] <jinsun> well then you can't give that to run_in_executor
[00:59:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:59:25] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:59:31] <jinsun> the 2nd argument should be a function
[00:59:56] *** Joins: wyclif (~wyclif@user/wyclif)
[01:00:04] <jinsun> https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor
[01:00:18] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:58ff:74e0:8a86:335d) (Ping timeout: 240 seconds)
[01:00:27] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[01:00:30] <Payam> that is the function. super()....selenium
[01:01:28] <jinsun> but you called it, so run_in_executor gets the output of the function call, not the function itself
[01:01:30] <bjs> Payam: so... this get_content_with_selenium function, is *that* the thing you want to run in the executor?
[01:01:33] *** Gustavo6046_ is now known as Gustavo6046
[01:01:42] <bjs> Payam: because you call the function and then pass what it returned to run_in_executor
[01:02:00] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 272 seconds)
[01:02:50] <Payam> I don't undrestand
[01:03:05] <bjs> Payam: run_in_executor(super().foo()) does not run "foo" in the executor
[01:03:15] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 265 seconds)
[01:03:23] <Payam> then what does it do?
[01:03:59] <stealth_> the are saying you need to run `content = await loop.run_in_executor(None, super().get_content_with_selenium)`
[01:04:25] <bjs> Payam: there's no magic syntax here,  it calls super().foo() and passes the result to run_in_executor.
[01:04:38] <bjs> Payam: you pass the function you want to call to run_in_executor, e.g. run_in_executor(super().foo)
[01:04:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[01:04:51] <Payam> aha. and how about the arguments?
[01:04:53] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[01:05:16] <bjs> Payam: you can use a lambda, or make another function some other way.  functools.partial() is often useful here
[01:05:27] *** Joins: wyclif (~wyclif@user/wyclif)
[01:06:04] *** Quits: rememberYou (~someone@user/rememberyou) (Read error: Connection reset by peer)
[01:07:18] *** Quits: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com) (Quit: *POOF*)
[01:07:39] <stealth_> that is so lame, why didn't they just make it work like `.run_in_executor(None, function, *arguments)`
[01:07:56] <bjs> It might do that
[01:07:59] <bjs> I haven't checked
[01:08:10] <Payam> so you meant that inside superclass I should have a function that returns a lambda function with those inputs to seleneium function?
[01:08:35] <bjs> Payam: the thing you pass to run_in_executor is the function you want to run in the executor
[01:08:47] <Payam> I understand it
[01:08:51] <bjs> I just checked the docs, and stealth_ is right that it lets you pass some arguments directly
[01:09:01] <bjs> Payam: so run_in_executor(super().foo, 1, 2, 3)
[01:09:05] <grym> (though it was not always so!)
[01:09:07] <bjs> it doesn't seem to have kwargs though(?)
[01:09:19] <grym> not too long ago you had to do the partial/map dance
[01:09:49] <Payam> awesome. Thanks bjs . Now I take some rest and will be back to try it out. Many thanks to you bjs and stealth_
[01:10:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:10:20] <jinsun> ya no kwargs, it says to use functools.partial to pass kwargs, not sure why *args but no **kwargs
[01:10:58] *** Joins: wyclif (~wyclif@user/wyclif)
[01:11:00] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[01:12:42] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:58ff:74e0:8a86:335d)
[01:12:44] <Yhg1s> jinsun: because it would prevent adding new arguments to the function in the future.
[01:12:57] *** Joins: nigelb (~nigel@zeus.nigelb.me)
[01:15:00] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 276 seconds)
[01:15:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:16:26] *** Joins: wyclif (~wyclif@user/wyclif)
[01:16:55] <jinsun> hmm yes, maybe it could have been, args: tuple, kwargs: dict, instead of *args and **kwargs, but functools.partial is not to hard to use anyway
[01:17:06] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:58ff:74e0:8a86:335d) (Ping timeout: 240 seconds)
[01:17:45] *** Joins: sliwkr_ (~kks@static-ip-87-248-67-133.promax.media.pl)
[01:19:10] *** Quits: rendar (~rendar@user/rendar) ()
[01:19:37] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[01:21:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[01:21:59] *** Joins: wyclif (~wyclif@user/wyclif)
[01:22:42] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[01:26:17] *** Quits: kadobanana (~mud@user/kadoban) (Ping timeout: 255 seconds)
[01:26:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:27:05] *** Joins: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[01:27:31] *** Joins: wyclif (~wyclif@user/wyclif)
[01:28:27] *** Joins: kadobanana (~mud@user/kadoban)
[01:28:31] *** Joins: Elodin (~weechat@user/elodin)
[01:30:24] *** Joins: audiocat (~audio@2603-8081-1800-00ad-f802-1769-9117-3041.res6.spectrum.com)
[01:31:31] *** Joins: hafat (~hafat@95.70.168.45)
[01:33:23] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 250 seconds)
[01:33:47] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[01:34:42] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[01:34:56] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 272 seconds)
[01:37:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:38:28] *** Joins: wyclif (~wyclif@user/wyclif)
[01:43:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[01:44:00] *** Joins: wyclif (~wyclif@user/wyclif)
[01:47:08] <graingert> stealth_: there's asyncio.to_thread now
[01:49:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[01:49:28] *** Joins: wyclif (~wyclif@user/wyclif)
[01:49:43] <stealth_> graingert, hmm ok! i don't really use asyncio
[01:50:14] <jinsun> ah no need to fiddle with loop, and it takes kwargs too
[01:50:15] <graingert> Payam: ^
[01:50:37] *** Joins: adamts (~Adam@user/mysteryblokhed)
[01:51:57] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[01:51:57] *** Joins: AlanMD (~AlanMD@193.105.139.131)
[01:54:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:54:52] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[01:54:58] *** Quits: AlanMD_ (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 265 seconds)
[01:55:04] *** Joins: wyclif (~wyclif@user/wyclif)
[01:55:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:55:53] *** Joins: pnoud (~pnoud@user/pnoud)
[01:57:32] *** Joins: asix (~Anders@user/asix)
[01:59:29] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:59:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[02:00:33] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[02:00:34] *** Joins: wyclif (~wyclif@user/wyclif)
[02:00:35] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[02:00:41] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 250 seconds)
[02:00:43] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[02:01:14] *** Gustavo6046_ is now known as Gustavo6046
[02:05:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[02:06:04] *** Joins: wyclif (~wyclif@user/wyclif)
[02:07:29] *** Quits: orbatos_ (~orbatos@user/orbatos) (Quit: Leaving)
[02:10:42] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[02:11:25] *** Quits: cedric (~cedric@2a01:cb11:867:c200:d62a:a4a2:6539:1c44) (Quit: Konversation terminated!)
[02:15:20] *** Joins: Snyp (~rksht@49.207.197.197)
[02:16:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[02:17:03] *** Joins: wyclif (~wyclif@user/wyclif)
[02:19:37] *** Quits: Strom (strom@fedora/strom) ()
[02:21:40] *** Joins: Strom (strom@fedora/strom)
[02:21:54] *** Parts: schangg (~schangg@2a01cb080746b7008639c0fffe0203dd.ipv6.abo.wanadoo.fr) (WeeChat 2.3)
[02:22:00] <wyre> hi guys, I'm trying to create a simple GUI with wxpython and I have this code https://bpa.st/BZQQ but when I click on the button I have "TypeError: OnClicked() takes 1 positional argument but 2 were given"
[02:22:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:22:06] <wyre> what am I doing wrong? 🤔
[02:22:34] *** Joins: wyclif (~wyclif@user/wyclif)
[02:24:39] <axisys> I forgot a term for it, but I want to take a word as input and print it every possible permutation of it. I first converted to a list with list comprehension and lets a says it is called words. Then try to print multiple times with random.choices(word) but I see lot of duplicate chars
[02:24:49] <AhmedAmerican> such Path is not `trio.Path('~/Desktop/Lab/dd'` returning `FileNotFoundError: [WinError 3] The system cannot find the path specified: '~\\Desktop\\Lab\\dd'`
[02:24:54] <axisys> this word does not have any duplicate chars.
[02:25:18] <axisys> any suggestion what should I search in google?
[02:26:21] <jinsun> wyre: your OnClicked and Onclose function should take 2 arguments
[02:27:26] <stealth_> AhmedAmerican, can't use `~` or use `os.path.expanduser`
[02:27:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:27:50] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[02:28:04] <AhmedAmerican> stealth_:  Thank you.
[02:28:06] *** Joins: wyclif (~wyclif@user/wyclif)
[02:29:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[02:29:10] <AhmedAmerican> is expanduser works on Linux too ? such as `~/` ?
[02:29:16] <wyre> jinsun, oh, I see, so adding another argument apparently works, but I'm not sure if this is right, because I'm not using that second argument in the methods
[02:29:23] <stealth_> axisys, you are probably want https://docs.python.org/3/library/itertools.html#itertools.combinations ?
[02:29:31] <stealth_> AhmedAmerican, yes
[02:30:00] *** research is now known as KeiraT
[02:30:56] <axisys> stealth_: thanks
[02:31:13] <jinsun> wyre: ya you need it even though you won't use it, because when you click it will try to call it with an extra argument anyway
[02:32:18] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Ping timeout: 240 seconds)
[02:32:38] <BrenBarn> Probably the other argument is an event object or something
[02:33:05] <wyre> jinsun, but ... am I not defining the method from scratch? 🤔
[02:33:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:33:35] *** Joins: wyclif (~wyclif@user/wyclif)
[02:36:50] *** Joins: p-i- (~Ohmu@node-17bb.pool-118-173.dynamic.totinternet.net)
[02:37:06] <p-i-> This is super-odd.
[02:37:12] <p-i-> Inside my code: print('1.', type(self.deltas), self.deltas.shape, self.deltas)  # <class 'numpy.ndarray'> (0, 4) []
[02:37:26] <jinsun> wyre: to clarify a bit more, you are passing your self.onclicked function to closeButton.Bind, which expects to receive a function with one argument, so your self.onclicked should take one argument (other than self)
[02:38:15] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:38:18] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:38:18] <p-i-> But from iPython: w = empty((0,4), dtype=float32); type(w), w.shape, w  # (numpy.ndarray, (0, 4), array([], shape=(0, 4), dtype=float32))
[02:38:21] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[02:38:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:38:45] <p-i-> So both objects report as ndarray with shape (0, 4)
[02:38:54] <ChrisWarrick> p-i-: print() calls str(x) ≈ x.__str__()
[02:39:07] *** Joins: wyclif (~wyclif@user/wyclif)
[02:39:31] <ChrisWarrick> p-i-: and if you just type into ipython — or if you look at a tuple/list — it calls repr(x), or x.__repr__()
[02:39:46] <ChrisWarrick> p-i-: and it’s quite likely that ndarrays have a different __str__ than __repr__
[02:40:21] <nubonix> how can i run a qasync program / app in parallel with something else? [starlette server]
[02:40:39] <p-i-> ah yes thassit
[02:40:53] <p-i-> huh. I have a confusing bug then.
[02:41:13] <ChrisWarrick> p-i-: okay, what bug?
[02:41:19] <nubonix> my attempt atm is https://bpa.st/NPHA
[02:41:29] <p-i-> Inside my code, `w[w[:,0] > 1]` gives: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
[02:41:41] <p-i-> But I can't replicate the warning from iPython.
[02:41:44] <p-i-> It just works fine.
[02:41:55] <p-i-> Same .venv, so same numpy.
[02:42:07] <ChrisWarrick> nubonix: You would need two coroutines. uvicorn.run isn’t one.
[02:42:26] <nubonix> ChrisWarrick: mm, how else do i start the server?
[02:43:37] <ChrisWarrick> nubonix: dunno
[02:43:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[02:44:04] *** Quits: ano (~weechat@user/ano) (Quit: ano)
[02:44:05] *** Quits: Akuli (~Akuli@87-94-111-167.bb.dnainternet.fi) (Quit: Leaving)
[02:44:17] *** Joins: ano (~weechat@user/ano)
[02:44:35] *** Joins: wyclif (~wyclif@user/wyclif)
[02:44:36] <nubonix> ChrisWarrick: o, dats not good if you dont know lols
[02:44:38] <nubonix> hmm
[02:45:01] <nubonix> ChrisWarrick: so, create an exe, and just launch the exe before i start the app?
[02:45:12] <nubonix> [within the app, launch the server.exe]
[02:45:16] <ChrisWarrick> nubonix: not necessarily
[02:45:36] <nubonix> ChrisWarrick: betters ways of doing so, im sure, but idkh?
[02:45:50] <ChrisWarrick> nubonix: uvicorn, or some lighter asgi server, should be able to run from a coroutine
[02:46:06] <nubonix> hmm
[02:46:07] <nubonix> okay
[02:46:52] <ChrisWarrick> hypercorn seems to have a `serve` coroutine in hypercorn.asyncio
[02:47:40] <ChrisWarrick> uvicorn.server.Server has a serve coroutine
[02:49:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[02:50:09] *** Joins: wyclif (~wyclif@user/wyclif)
[02:51:00] *** Joins: emika2 (~emika@185.207.249.37)
[02:51:31] *** Quits: emika (~emika@212.102.45.109) (Ping timeout: 265 seconds)
[02:51:31] *** emika2 is now known as emika
[02:51:59] *** Joins: christover (~christove@8.47.69.131)
[02:51:59] *** Joins: schumaml1 (~schumaml@dslb-188-104-162-133.188.104.pools.vodafone-ip.de)
[02:52:41] <nubonix> ChrisWarrick: whered you find this, all i can find is inline crap...
[02:53:14] <ChrisWarrick> hypercorn has a reasonable api reference with examples of running that serve coroutine
[02:53:46] <ChrisWarrick> uvicorn docs are mediocre, but I found it in the code
[02:53:55] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:54:25] *** Quits: schumaml (~schumaml@dslb-188-104-174-124.188.104.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[02:54:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[02:55:20] <nubonix> hmm
[02:55:23] <nubonix> alright, thanks
[02:55:40] *** Joins: wyclif (~wyclif@user/wyclif)
[02:57:52] <nubonix> ChrisWarrick: appreciate it*
[02:57:59] <ChrisWarrick> you’re welcome!
[03:00:31] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Quit: Leaving)
[03:00:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:01:07] *** Joins: wyclif (~wyclif@user/wyclif)
[03:01:53] *** Joins: driib6 (~driib@185.195.233.169)
[03:01:56] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[03:02:50] <nubonix> ChrisWarrick: any idea on what i pass to .serve?
[03:03:08] <nubonix> or equivalent of uvicorn.run
[03:03:26] <ChrisWarrick> nubonix: you should be able to figure it out from the code
[03:03:57] *** Quits: sectec84 (~sectec84@24.18.109.173) (Ping timeout: 250 seconds)
[03:04:46] <nubonix> well... i see takes input as a config, https://github.com/encode/uvicorn/blob/master/uvicorn/server.py#L53
[03:04:50] <madprops> is it possible to use curses on stderr?
[03:06:01] *** Quits: driib (~driib@185.195.233.168) (Ping timeout: 265 seconds)
[03:06:01] *** driib6 is now known as driib
[03:06:32] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[03:06:35] <nubonix> i see server* takes input as a config, and the config has a boatload of inputs, so possibly i need to create a config using the params im sending to uvicorn.run?
[03:09:46] <nubonix> hypercorn it is :P
[03:10:09] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:11:48] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[03:13:08] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[03:15:11] *** Quits: sliwkr_ (~kks@static-ip-87-248-67-133.promax.media.pl) (Ping timeout: 255 seconds)
[03:16:12] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[03:18:05] <nubonix> mm, await wasnt used in future? https://bpa.st/3OJA
[03:19:08] *** Quits: hafat (~hafat@95.70.168.45) (Quit: Leaving)
[03:21:26] <stealth_> nubonix, `await asyncio.create_task(...`
[03:21:44] <nubonix> oh? it does call the task when its creating it?
[03:21:47] <nubonix> hmm
[03:21:49] <nubonix> okay
[03:23:05] <stealth_> nubonix, wait it should have worked if you are passing to `.gather` without await
[03:23:19] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[03:23:25] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[03:23:44] *** Joins: supakeen (~user@python/site-packages/supakeen)
[03:23:48] <nubonix> stealth_: yeah, i thought so as well, apparently not tho >.> idky
[03:24:02] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[03:24:07] <stealth_> nubonix, try it without using list
[03:24:16] <nubonix> stealth_: i did, same thing
[03:24:32] *** Joins: lmmx (~louis@host-92-23-195-200.as13285.net)
[03:24:36] *** Quits: trace987 (~trace@dynamic-002-247-248-138.2.247.pool.telefonica.de) (Remote host closed the connection)
[03:25:06] <nubonix> atm im getting a weird error with hypercorn
[03:25:12] <lmmx> mypy is giving me an 'error: Module "zipfile" has no attribute "structCentralDir"' from accessing a module global (I presume since it's not given in the __all__
[03:25:34] <nubonix> https://bpa.st/DXLQ
[03:25:45] <lmmx> is it better to tell mypy to ignore or have I done something actually wrong there?
[03:25:58] *** Quits: christover (~christove@8.47.69.131) (Quit: Leaving)
[03:26:12] <nubonix> lmmx does that exist in the version you are using of zipfile?
[03:26:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:26:22] <lmmx> yeah I just checked
[03:26:44] <lmmx> one more check can't hurt though I guess
[03:26:46] <nubonix> lmmx r u using a virtual env?
[03:27:03] <stealth_> nubonix, not sure what `serve` and `create_app` is coming from
[03:27:35] <nubonix> stealth_: serve is coming from hypercorn, create_app coming from reverse_proxy.py that returns a starlette app
[03:27:37] *** Joins: wyclif (~wyclif@user/wyclif)
[03:27:50] <stealth_> nubonix, try this first https://bpa.st/WXNQ
[03:28:03] <lmmx> nubonix yes a conda 3.9 env, zipfile is looking as expected and the var is there https://github.com/python/cpython/blob/5d9c86e340b40379d18ffeb7ce1739e07bdeb536/Lib/zipfile.py#L100
[03:28:48] <lmmx> hm
[03:28:52] <nubonix> stealth_: yeah that works, just to the point im at now though
[03:30:01] <nubonix> lmmx can you print any of the other variables?
[03:31:13] *** Joins: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry)
[03:31:28] <StayHungry> Evening, comrades
[03:31:35] <StayHungry> Is it possible to do regex without import re?
[03:32:01] <ChrisWarrick> StayHungry: no
[03:32:16] <ChrisWarrick> StayHungry: (unless you want to use a different third-party regex module, like `regex`)
[03:32:42] <nubonix> StayHungry: kinda hacky, but could call another programming language or program to do it
[03:32:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[03:33:10] *** Joins: wyclif (~wyclif@user/wyclif)
[03:33:25] <StayHungry> noted, thank you
[03:33:29] <nubonix> ChrisWarrick: any ideas on my above question?
[03:33:50] <StayHungry> python -c "import re; print(re.sub(r'(\d+)-(\d+)-(\d+)', '\\g<3>-\\g<2>-\\g<1>', '23-07-1821'))" -> 1821-07-23
[03:34:10] <nubonix> StayHungry: could also impliment regex yourself [creating your own library]
[03:34:25] <nubonix> glhf with that tho :D
[03:34:26] <ChrisWarrick> nubonix: how does it fail? I can see += in a place where you might want list.append?
[03:34:27] <StayHungry> no, no, i'm learning native ways of doing things so far
[03:34:52] <nubonix> ChrisWarrick: oh, i cant do += with a list? meh
[03:34:57] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[03:35:06] <ChrisWarrick> nubonix: you can, but the right side must also be a list
[03:35:26] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 255 seconds)
[03:35:32] <nubonix> ChrisWarrick: hmm, ye not sure i get that but w/e heres the current up to date code https://bpa.st/DXLQ
[03:35:52] <nubonix> add a list to a list == `+=`
[03:35:58] <nubonix> alright, .append it is >>.
[03:35:59] *** Quits: driib (~driib@185.195.233.169) (Ping timeout: 265 seconds)
[03:36:00] <nubonix> >.>
[03:36:10] <ChrisWarrick> nubonix: your create_app method doesn’t match the interface hypercorn expects
[03:36:28] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:36:32] <nubonix> weird...
[03:36:36] <nubonix> hmm
[03:36:42] <nubonix> its a starlette app
[03:36:50] <stealth_> nubonix, you are back to that code? having `tasks += await` makes `gather` useless
[03:37:18] <nubonix> stealth_: not my main focus atm
[03:37:32] <ChrisWarrick> nubonix: your code does not show that. Please always pastebin complete and working code.
[03:37:40] <stealth_> nubonix, after you use the code i corrected, what error do you get?
[03:38:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[03:38:41] *** Joins: wyclif (~wyclif@user/wyclif)
[03:38:52] <ChrisWarrick> well, not necessarily working ;) - but the code that you ran and which matches the error
[03:39:47] <nubonix> okay, heres is what i have in my project, w/ the matching error, ill just stick to use gather without a list atm, and focus on that inabit, but pre sure ik how to do it now
[03:39:49] <nubonix> https://bpa.st/MJGQ
[03:40:16] <StayHungry> can python parse a string as date and then change it to another format similar to the following example?
[03:40:17] <nubonix> my current error is hypercorn doesnt know what the starlette app is as ChrisWarrick mentioned
[03:40:18] <StayHungry> php -r "echo datetime::createfromformat('d-m-Y', '23-07-1821')->format('Y-m-d');"
[03:40:25] <ChrisWarrick> nubonix: create_app is not defined in your code
[03:40:39] <ChrisWarrick> StayHungry: yes, eg. with the datetime library (built-in)
[03:40:43] *** Quits: OverCoder (~OverCoder@user/overcoder) (Remote host closed the connection)
[03:40:57] <StayHungry> built-in? hooray :)
[03:41:05] <nubonix> ChrisWarrick: ok, ill add reverse_proxy.py and the whole app.py file to show everything
[03:41:56] <nubonix> https://bpa.st/ISWA
[03:42:16] <nubonix> create_app starts at https://bpa.st/ISWA#4L72
[03:43:10] <ChrisWarrick> nubonix: perhaps you need to pass the Starlette object, eg. using   return await serve(create_app(), config)
[03:43:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 276 seconds)
[03:43:58] <nubonix> ChrisWarrick: aha!
[03:44:04] <nubonix> genius
[03:44:09] *** Joins: wyclif (~wyclif@user/wyclif)
[03:44:12] <nubonix> alright
[03:44:19] <nubonix> 1/2
[03:45:12] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:45:17] *** Joins: theelous3 (~theelous3@109.255.56.189)
[03:45:17] *** Joins: trace987 (~trace@dynamic-002-247-248-138.2.247.pool.telefonica.de)
[03:46:38] <nubonix> updated https://bpa.st/XYNQ
[03:46:47] <nubonix> `QWidget: Must construct a QApplication before a QWidget`
[03:47:09] <nubonix> pre sure this has to do with me using qasync.run, and just like uvicorn, i need to use something else [that is a coro]
[03:47:22] <ChrisWarrick> or it has to do with incorrect qt usage
[03:47:46] <nubonix> wdym
[03:47:53] <ChrisWarrick> https://github.com/CabbageDevelopment/qasync/blob/master/examples/aiohttp_fetch.py#L73
[03:48:19] <StayHungry> is there a way to shorten use of datetime calls here? python -c "import datetime; print(datetime.datetime.strptime('23-07-1821', '%d-%m-%Y').strftime('%Y/%m/%d'))"
[03:48:22] <nubonix> ChrisWarrick: yeah i havent a clue what that does
[03:48:28] <ChrisWarrick> nubonix: okay, read the qt docs and find out
[03:48:43] <nubonix> ChrisWarrick: qasync docs*?
[03:48:46] <ChrisWarrick> nubonix: no, qt docs
[03:49:02] *** Quits: lmmx (~louis@host-92-23-195-200.as13285.net) (Ping timeout: 265 seconds)
[03:49:26] <ChrisWarrick> nubonix: as for qasync.run — you will need it to run your main coroutine, but you should not use it in a coroutine (it’s similar to asyncio.run, but with a qt event loop)
[03:49:39] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[03:52:25] *** Quits: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Ping timeout: 265 seconds)
[03:53:06] *** Quits: Snyp (~rksht@49.207.197.197) (Quit: WeeChat 3.2)
[03:53:54] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bbl)
[03:54:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 276 seconds)
[03:54:44] <madprops> anybody knows of some tutorial to make a simple list selector with curses, just up/down arrow and select an item which has a value|index ?
[03:55:05] <nubonix> ChrisWarrick: isnt the part you are talking about reading the docs `app = QApplication.instance()` ?
[03:55:10] *** Joins: wyclif (~wyclif@user/wyclif)
[03:55:24] *** Joins: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[03:56:42] *** Joins: pnoud (~pnoud@user/pnoud)
[03:57:08] *** Quits: lalilulelo (~lalilulel@2804:14d:7680:8ed4:bdee:f4c9:3dc8:feca) (Quit: Leaving)
[03:57:27] <nubonix> "A QApplication must be created before creating any widget since it handles the eventloop" from SO
[03:57:52] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:58:11] <nubonix> so it seems i am not running things in the correct order
[03:58:34] *** Quits: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[03:58:38] <nubonix> and possibly not instantiating the qt window
[03:58:51] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[03:59:18] <StayHungry> hooray, -12 symbols variant found
[03:59:24] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:59:26] <StayHungry> python -c "import time; print(time.strftime('%Y-%m-%d', time.strptime('23-07-1821', '%d-%m-%Y')))"
[03:59:32] <ChrisWarrick> madprops: don’t use curses, use urwid
[03:59:44] <ChrisWarrick> nubonix: yes
[04:00:52] *** Quits: trace987 (~trace@dynamic-002-247-248-138.2.247.pool.telefonica.de) (Ping timeout: 268 seconds)
[04:01:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[04:02:14] *** Quits: ethoxy (~root@echelon.lucif3r.ru) (Quit: Lost terminal)
[04:02:48] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:03:40] <squirrel> suppose i want to find all uris with authority in text (those that have "://"). i could do perhaps `\w+://\w+` (not an actual regex), but that's pretty slow. i could also do `://(?<=\w+://)\w+`, which is much faster, but this is a bit awkward and not supported by re. what clever solution am i missing?
[04:04:03] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:06:20] *** Quits: ntdll (ntdll@user/ntdll) (Quit: WeeChat 3.2)
[04:07:05] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[04:07:30] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 240 seconds)
[04:07:52] <nubonix> ChrisWarrick: still dono howto though
[04:09:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:09:31] <nubonix> ChrisWarrick: nvm :)
[04:11:45] *** Quits: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Ping timeout: 265 seconds)
[04:12:02] <nubonix> ChrisWarrick: eh.. still 1/2 o.O??? https://bpa.st/DEPQ
[04:12:18] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[04:13:02] *** Joins: ntdll (ntdll@user/ntdll)
[04:13:43] <nubonix> oh... its b/c the semaphore, nvm, removed it, and it works!!! Thank you !!!
[04:13:51] <nubonix> :D
[04:17:15] <nubonix> alright, well one more question about this, so when i close the pyqt5 app, im getting `RuntimeError: Event loop stopped before Future completed.`
[04:17:53] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:17:57] <nubonix> o, documented in qasync
[04:17:59] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:18:41] <nubonix> nope, still happens
[04:19:25] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[04:19:40] <nubonix> catching the RuntimeError as well as the async cancel error works
[04:19:43] <nubonix> alright cool :D
[04:19:59] <nubonix> ill try not to use iirc as my diary
[04:20:03] <nubonix> :D
[04:20:33] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[04:21:06] *** Joins: eltonpinto (~1ntEgr8@2601:c8:c000:3090:b599:ff61:44c0:383)
[04:21:58] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-58ec-8d56-fa5c-3f4a.res6.spectrum.com) (Read error: Connection reset by peer)
[04:24:13] *** Joins: skapata (~Skapata@user/skapata)
[04:26:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:26:21] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[04:26:32] *** Quits: akk (~akk@75.161.155.222) (Quit: +++)
[04:26:48] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[04:27:02] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[04:27:31] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Read error: Connection reset by peer)
[04:27:50] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[04:28:07] *** Joins: y1n (~y1n@84-115-65-181.wifi.dynamic.surfer.at)
[04:29:14] *** Joins: trace987 (~trace@dynamic-002-247-248-138.2.247.pool.telefonica.de)
[04:29:28] *** Parts: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (-)
[04:30:22] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 272 seconds)
[04:31:37] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[04:31:38] *** Joins: humbertowoody (~humbertow@2806:104e:5:6e93:2424:e69d:bb4f:9d7d)
[04:32:41] *** Quits: tokerboker (~vivaan@c-73-71-182-125.hsd1.ca.comcast.net) (Remote host closed the connection)
[04:32:49] *** Joins: darksun (~darksun@user/darksun)
[04:33:30] *** Quits: waxfire23 (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[04:33:44] *** Joins: waxfire238 (~waxfire@65.119.2.240)
[04:34:28] *** Joins: tokerboker (~vivaan@c-73-71-182-125.hsd1.ca.comcast.net)
[04:35:54] *** Quits: humbertowoody (~humbertow@2806:104e:5:6e93:2424:e69d:bb4f:9d7d) (Ping timeout: 240 seconds)
[04:41:16] *** Quits: eltonpinto (~1ntEgr8@2601:c8:c000:3090:b599:ff61:44c0:383) (Quit: WeeChat 3.1)
[04:41:30] *** Joins: eltonpinto (~1ntEgr8@2601:c8:c000:3090:b599:ff61:44c0:383)
[04:42:19] *** Quits: trace987 (~trace@dynamic-002-247-248-138.2.247.pool.telefonica.de) (Ping timeout: 250 seconds)
[04:42:20] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:44:44] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 255 seconds)
[04:45:35] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[04:45:38] *** Quits: et (~et@user/et) (Ping timeout: 255 seconds)
[04:46:41] *** Joins: et (~et@user/et)
[04:48:36] *** Joins: vicfred (~vicfred@user/vicfred)
[04:49:58] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 256 seconds)
[04:51:56] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Ping timeout: 255 seconds)
[04:52:35] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:52:56] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[04:55:36] *** Quits: Mechanismus (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net) (Quit: Leaving)
[04:55:44] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[04:56:50] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:58:44] *** Joins: darksun (~darksun@user/darksun)
[04:59:06] *** Joins: et_ (~et@user/et)
[05:00:05] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[05:00:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[05:01:18] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Ping timeout: 268 seconds)
[05:01:54] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[05:01:54] *** et_ is now known as et
[05:03:36] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[05:04:16] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[05:04:26] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 265 seconds)
[05:05:56] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[05:05:59] *** Quits: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[05:06:20] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[05:06:58] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[05:07:04] *** Joins: Mechanismus (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net)
[05:10:28] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[05:12:54] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 276 seconds)
[05:13:57] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[05:14:02] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[05:14:34] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 240 seconds)
[05:15:31] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[05:16:19] *** Joins: darksun (~darksun@user/darksun)
[05:21:17] *** Joins: humbertowoody (~humbertow@2806:104e:5:6e93:2424:e69d:bb4f:9d7d)
[05:21:17] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[05:21:30] *** Quits: eltonpinto (~1ntEgr8@2601:c8:c000:3090:b599:ff61:44c0:383) (Ping timeout: 240 seconds)
[05:22:05] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 255 seconds)
[05:22:44] *** Joins: eltonpinto (~1ntEgr8@2601:c8:c000:3090:b599:ff61:44c0:383)
[05:22:44] *** Joins: jazzy (~jaziz@2600:380:c174:6a3d:c4c3:7674:1736:67d4)
[05:26:00] *** Joins: Socra (~Socra@206.217.216.27)
[05:27:22] *** Quits: eltonpinto (~1ntEgr8@2601:c8:c000:3090:b599:ff61:44c0:383) (Ping timeout: 256 seconds)
[05:31:22] *** Joins: roro (~roro@user/roro)
[05:31:23] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:30] *** Quits: humbertowoody (~humbertow@2806:104e:5:6e93:2424:e69d:bb4f:9d7d) (Ping timeout: 240 seconds)
[05:31:43] *** Quits: y1n (~y1n@84-115-65-181.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[05:31:58] *** Joins: y1n (~y1n@84-115-65-191.wifi.dynamic.surfer.at)
[05:32:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[05:33:59] *** Joins: knowmadic (~ryan@user/knowmadic)
[05:34:38] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[05:34:40] *** Quits: frost (~frost@59.71.241.179) (Quit: Ping timeout (120 seconds))
[05:35:03] *** Joins: vlm (~vlm@user/vlm)
[05:36:52] *** Quits: roro (~roro@user/roro) (Quit: roro)
[05:37:38] *** Joins: skapata (~Skapata@user/skapata)
[05:41:29] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[05:41:43] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[05:45:02] *** Quits: schumaml1 (~schumaml@dslb-188-104-162-133.188.104.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[05:46:29] *** Joins: schumaml1 (~schumaml@dslb-178-007-194-056.178.007.pools.vodafone-ip.de)
[05:46:45] *** Joins: eltonpinto (~1ntEgr8@2601:c8:c000:3090:96d:7043:ac49:cacb)
[05:48:16] *** Quits: eltonpinto (~1ntEgr8@2601:c8:c000:3090:96d:7043:ac49:cacb) (Client Quit)
[05:48:32] *** Joins: eltonpinto (~1ntEgr8@2601:c8:c000:3090:96d:7043:ac49:cacb)
[05:52:51] *** Joins: califax- (~califax@user/califx)
[05:55:32] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:55:42] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[05:55:50] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:55:51] *** califax- is now known as califax
[05:55:55] *** brabrax_ is now known as brabrax
[05:56:16] *** Quits: ferz (~ferz@93.48.251.229) (Ping timeout: 256 seconds)
[05:56:44] *** Quits: schumaml1 (~schumaml@dslb-178-007-194-056.178.007.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[05:56:55] *** Joins: schumaml1 (~schumaml@ipservice-092-211-205-249.092.211.pools.vodafone-ip.de)
[05:57:32] *** Joins: pnoud (~pnoud@user/pnoud)
[05:58:29] *** Joins: Fluxx (~Fluxx@user/fluxx)
[05:59:13] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:01:07] *** Quits: eltonpinto (~1ntEgr8@2601:c8:c000:3090:96d:7043:ac49:cacb) (Ping timeout: 268 seconds)
[06:01:15] *** Quits: theelous3 (~theelous3@109.255.56.189) (Read error: Connection reset by peer)
[06:02:43] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 258 seconds)
[06:02:48] *** Joins: Roey (~Roey@user/Roey)
[06:02:55] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[06:03:42] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[06:04:47] *** Joins: frost (~frost@59.71.241.179)
[06:06:43] *** Joins: McEndu (~McEndu@45.145.248.101)
[06:11:24] *** Joins: ferz (~ferz@93.48.251.229)
[06:13:13] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:13:33] *** Quits: y1n (~y1n@84-115-65-191.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[06:14:30] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[06:15:54] *** Joins: McEndu_ (~McEndu@114.249.194.57)
[06:19:04] *** Joins: schumaml2 (~schumaml@dslb-092-074-000-136.092.074.pools.vodafone-ip.de)
[06:19:41] *** Quits: McEndu (~McEndu@45.145.248.101) (Ping timeout: 255 seconds)
[06:21:34] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[06:21:46] *** Quits: schumaml1 (~schumaml@ipservice-092-211-205-249.092.211.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[06:22:43] *** Joins: eltonpinto (~1ntEgr8@2601:c8:c000:3090:d816:bb5b:d12f:f798)
[06:23:48] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[06:24:29] *** Quits: eltonpinto (~1ntEgr8@2601:c8:c000:3090:d816:bb5b:d12f:f798) (Client Quit)
[06:25:32] *** Quits: orbatos (~orbatos@user/orbatos) (Ping timeout: 255 seconds)
[06:25:32] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:30:57] *** Joins: leahey (~thelounge@static.36.0.217.95.clients.your-server.de)
[06:31:02] *** Quits: d3vyL (d3vyL@host-95-250-37-25.retail.telecomitalia.it) ()
[06:31:54] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[06:35:11] *** Joins: leeper (leeper@gateway/vpn/nordvpn/leeper)
[06:41:26] *** Joins: tlaxkit (~hexchat@170.253.36.135)
[06:42:16] *** Joins: candyman1 (~candyman@user/candyman)
[06:53:53] *** Quits: candyman1 (~candyman@user/candyman) (Remote host closed the connection)
[06:54:18] *** Joins: tims1 (~tims@61.69.131.46)
[06:56:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:57:03] *** Quits: tlaxkit (~hexchat@170.253.36.135) (Quit: Leaving)
[07:00:12] *** Joins: elezium (~elezium@modemcable039.188-176-173.mc.videotron.ca)
[07:00:17] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::791f) (Quit: Konversation terminated!)
[07:00:28] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[07:00:30] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[07:01:25] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:01:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (copper.libera.chat (Nickname regained by services)))
[07:01:25] *** finn_elija is now known as FinnElija
[07:03:20] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[07:03:56] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[07:04:16] *** Quits: emerent (~quassel@p200300cd57058ce7ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:04:22] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[07:04:38] *** Joins: emerent (~quassel@p200300cd57058c9fba27ebfffed28a59.dip0.t-ipconnect.de)
[07:07:03] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[07:07:31] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[07:11:34] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[07:12:37] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 245 seconds)
[07:16:44] *** Quits: emika (~emika@185.207.249.37) (Ping timeout: 256 seconds)
[07:17:00] *** Joins: emika (~emika@185.207.249.218)
[07:17:50] *** Joins: darksun (~darksun@user/darksun)
[07:18:36] *** Quits: F0odMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Quit: QUIT)
[07:22:42] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[07:23:02] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 245 seconds)
[07:24:33] *** Joins: eltonpin1 (~1ntEgr8@2601:c8:c000:3090:20d2:58dd:3f51:cdf0)
[07:27:07] *** Joins: orbatos (~orbatos@user/orbatos)
[07:28:28] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[07:30:45] *** Quits: McEndu_ (~McEndu@114.249.194.57) (Quit: Leaving)
[07:30:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[07:31:00] *** Joins: McEndu_ (~McEndu@114.249.194.57)
[07:31:00] *** McEndu_ is now known as McEndu
[07:31:16] *** Joins: Atque (~Atque@user/atque)
[07:32:21] *** Joins: humbertowoody (~humbertow@2806:107e:f:6813:2114:8ca9:6db9:3dfa)
[07:39:06] *** Quits: leeper (leeper@gateway/vpn/nordvpn/leeper) (Quit: Leaving)
[07:44:57] <nubonix> howto use wss with starlette? my attempt thus far... https://bpa.st/MDDA
[07:45:52] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 246 seconds)
[07:47:46] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:47:53] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:50:23] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[07:53:33] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Ping timeout: 255 seconds)
[07:54:04] *** Joins: Sadale (~Sadale@user/sadale)
[07:57:42] *** Joins: rando25892 (~sthk@user/rando25892)
[07:58:22] *** Joins: pnoud (~pnoud@user/pnoud)
[08:00:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:01:22] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[08:01:56] *** Joins: coldenbrewed (~nitrobrew@li1032-132.members.linode.com)
[08:03:45] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[08:03:51] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[08:08:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:08:22] *** Quits: eltonpin1 (~1ntEgr8@2601:c8:c000:3090:20d2:58dd:3f51:cdf0) (Quit: WeeChat 3.1)
[08:08:38] *** Joins: eltonpinto (~1ntEgr8@2601:c8:c000:3090:20d2:58dd:3f51:cdf0)
[08:09:01] *** Quits: elezium (~elezium@modemcable039.188-176-173.mc.videotron.ca) (Quit: Client closed)
[08:09:25] *** Joins: VimVim (~VimVim@85.191.88.203)
[08:10:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:13:32] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:b490:7230:7640:aaf5)
[08:15:40] *** Joins: TakinOver (~quassel@47.150.206.35)
[08:17:55] *** Quits: fluiD (~fluiD@161.97.231.145) (Read error: Connection reset by peer)
[08:20:25] *** Joins: fluiD (~fluiD@161.97.231.145)
[08:24:59] *** Quits: DaNeenjah (~jake@adsl-74-230-9-66.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[08:26:54] *** Joins: node1 (~node1@user/node1)
[08:27:06] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Ping timeout: 240 seconds)
[08:28:08] *** Joins: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[08:28:50] *** Quits: LiftLeft (~LiftLeft@37.19.198.86) (Ping timeout: 255 seconds)
[08:30:49] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[08:31:40] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[08:33:28] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:34:26] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:35:10] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[08:35:42] *** Joins: Wulf (~Wulf@user/wulf)
[08:35:52] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:05] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:38:00] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[08:38:05] *** Quits: humbertowoody (~humbertow@2806:107e:f:6813:2114:8ca9:6db9:3dfa) (Quit: WeeChat 3.2)
[08:39:57] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[08:43:15] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[08:45:15] *** Joins: JanC (~janc@user/janc)
[08:49:40] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:50:16] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[08:50:38] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[08:50:57] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[08:55:56] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[08:56:55] *** Quits: adamts (~Adam@user/mysteryblokhed) (Ping timeout: 265 seconds)
[08:58:40] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[09:02:00] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[09:07:44] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[09:08:45] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:12:19] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[09:15:56] *** Joins: LiftLeft (~LiftLeft@191.96.150.153)
[09:19:20] *** Joins: darksun (~darksun@user/darksun)
[09:20:11] *** Quits: eltonpinto (~1ntEgr8@2601:c8:c000:3090:20d2:58dd:3f51:cdf0) (Quit: WeeChat 3.1)
[09:20:45] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:21:49] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[09:24:51] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 250 seconds)
[09:27:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:30:08] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[09:30:49] *** Quits: guardian (~guardian@planet-d.net) (Remote host closed the connection)
[09:33:06] *** Quits: audiocat (~audio@2603-8081-1800-00ad-f802-1769-9117-3041.res6.spectrum.com) (Ping timeout: 272 seconds)
[09:34:58] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 240 seconds)
[09:36:00] *** Joins: schumaml3 (~schumaml@dslb-178-010-033-054.178.010.pools.vodafone-ip.de)
[09:36:41] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[09:38:48] *** Quits: schumaml2 (~schumaml@dslb-092-074-000-136.092.074.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[09:40:04] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[09:42:10] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:42:34] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[09:42:52] *** Joins: Atque (~Atque@user/atque)
[09:43:22] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[09:43:44] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:44:15] *** Joins: Atque (~Atque@user/atque)
[09:44:31] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[09:45:33] *** Joins: Atque (~Atque@user/atque)
[09:45:40] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[09:46:14] *** Joins: Atque (~Atque@user/atque)
[09:46:37] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:47:32] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[09:48:28] *** Joins: Atque (~Atque@user/atque)
[09:49:28] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[09:49:56] *** Joins: McEndu_ (~McEndu@45.145.248.66)
[09:52:52] *** Joins: eltonpinto (~eltonpint@169.109.136.34.bc.googleusercontent.com)
[09:53:42] *** Quits: McEndu (~McEndu@114.249.194.57) (Ping timeout: 256 seconds)
[09:54:03] *** Joins: eltonpin1 (~1ntEgr8@2601:c8:c000:3090:20d2:58dd:3f51:cdf0)
[09:54:23] *** Quits: eltonpin1 (~1ntEgr8@2601:c8:c000:3090:20d2:58dd:3f51:cdf0) (Client Quit)
[09:55:23] *** Joins: upsala (~zcb@185.213.155.160)
[09:57:10] *** Quits: Fluxx (~Fluxx@user/fluxx) (Remote host closed the connection)
[09:57:30] *** Joins: Fluxx (~Fluxx@user/fluxx)
[09:59:12] *** Joins: pnoud (~pnoud@user/pnoud)
[10:00:44] *** Joins: audiocat (~audio@2603-8081-1800-00ad-06e0-12e2-183b-f798.res6.spectrum.com)
[10:01:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[10:01:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[10:02:24] *** Joins: wyclif (~wyclif@user/wyclif)
[10:03:12] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:03:52] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 245 seconds)
[10:05:55] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[10:07:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[10:07:50] *** Joins: wyclif (~wyclif@user/wyclif)
[10:07:59] *** Joins: EGH (~EGH@185.25.195.104)
[10:08:30] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:12:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[10:12:40] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[10:13:14] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[10:13:23] *** Joins: wyclif (~wyclif@user/wyclif)
[10:14:35] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 255 seconds)
[10:18:36] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 268 seconds)
[10:19:09] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[10:20:10] *** Quits: McEndu_ (~McEndu@45.145.248.66) (Read error: Connection reset by peer)
[10:22:00] *** Joins: McEndu (~McEndu@45.145.248.66)
[10:24:02] *** Joins: rememberYou (~someone@user/rememberyou)
[10:24:05] *** Joins: m4v (~znc@ubuntu/member/m4v)
[10:27:48] *** Joins: derelict (~derelict@user/derelict)
[10:29:31] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[10:31:16] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[10:33:30] *** Joins: palasso (~palasso@user/palasso)
[10:34:20] *** Quits: audiocat (~audio@2603-8081-1800-00ad-06e0-12e2-183b-f798.res6.spectrum.com) (Remote host closed the connection)
[10:34:38] *** Joins: audiocat (~audio@2603-8081-1800-00ad-b517-0ad0-6d25-9dd6.res6.spectrum.com)
[10:36:02] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[10:37:19] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[10:41:08] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[10:41:56] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[10:43:34] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Client Quit)
[10:45:18] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 272 seconds)
[10:45:54] *** Quits: seednode2 (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:25] *** Joins: seednode2 (~seednode@user/seednode)
[10:47:12] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[10:47:33] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:52:58] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[10:53:11] *** Joins: Adoi (~Adoi@user/adoi)
[10:54:32] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:55:58] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[10:56:11] *** Quits: nahtjona (~nahtjona@190.19.22.16) (Quit: connection reset by purr)
[10:56:13] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[10:57:09] *** Quits: Adoi (~Adoi@user/adoi) (Client Quit)
[10:58:46] *** Joins: easior (~easior@27.115.42.250)
[10:59:31] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[11:01:17] *** Quits: reset (~reset@user/reset) (Quit: reset)
[11:01:45] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[11:06:48] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:08:40] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[11:09:00] *** Quits: VimVim (~VimVim@85.191.88.203) (Ping timeout: 258 seconds)
[11:10:12] *** Quits: LiftLeft (~LiftLeft@191.96.150.153) (Ping timeout: 256 seconds)
[11:13:25] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[11:13:35] *** Joins: Adoi (~Adoi@user/adoi)
[11:13:41] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[11:17:44] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[11:18:08] *** Quits: plains (~plains@user/plains) (Ping timeout: 256 seconds)
[11:19:30] *** Quits: node1 (~node1@user/node1) (Ping timeout: 276 seconds)
[11:20:49] *** Joins: darksun (~darksun@user/darksun)
[11:21:32] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[11:22:14] *** Quits: McEndu (~McEndu@45.145.248.66) (Read error: Connection reset by peer)
[11:24:26] *** Joins: McEndu (~McEndu@45.145.248.66)
[11:24:37] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:25:09] <Wulf> Good Morning!
[11:25:09] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[11:26:38] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 256 seconds)
[11:27:13] *** Quits: McEndu (~McEndu@45.145.248.66) (Remote host closed the connection)
[11:29:09] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[11:29:49] *** Joins: node1 (~node1@user/node1)
[11:31:59] *** Quits: alnr (~alnr@38.125.204.99) (Ping timeout: 255 seconds)
[11:32:31] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[11:34:24] *** Joins: Guddu (~Guddu@182.68.88.105)
[11:35:09] *** Joins: mei4 (~mei@user/mei)
[11:36:07] *** Quits: tokerboker (~vivaan@c-73-71-182-125.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:36:40] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[11:36:54] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[11:38:44] *** Quits: mei (~mei@user/mei) (Ping timeout: 255 seconds)
[11:38:44] *** mei4 is now known as mei
[11:38:45] *** Joins: VimVim (~VimVim@85.191.89.249)
[11:41:25] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[11:42:44] *** Quits: emika (~emika@185.207.249.218) (Ping timeout: 258 seconds)
[11:43:01] *** Joins: emika (~emika@185.207.249.218)
[11:43:41] *** Quits: audiocat (~audio@2603-8081-1800-00ad-b517-0ad0-6d25-9dd6.res6.spectrum.com) (Ping timeout: 255 seconds)
[11:44:10] *** Joins: NeoCore (~neocore@195.200.221.93)
[11:44:19] *** Joins: kosh (~kosh@user/kosh)
[11:44:42] *** Quits: BrokenCog (~BrokenCog@32.sub-174-194-132.myvzw.com) (Ping timeout: 245 seconds)
[11:45:58] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[11:46:16] *** Joins: node1 (~node1@user/node1)
[11:46:55] *** Joins: BrokenCog (~BrokenCog@41.sub-174-194-192.myvzw.com)
[11:52:30] <AhmedAmerican> @Wulf good morning
[11:53:41] *** Joins: kosh_ (~kosh@user/kosh)
[11:54:43] *** Joins: jay-m126_ (~jay-m@129.0.204.221)
[11:54:56] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 255 seconds)
[11:57:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:58:04] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:58:41] *** Joins: female_student_4 (~female_st@2a01:388:243:150::1:28)
[11:59:30] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 256 seconds)
[12:00:02] *** Joins: pnoud (~pnoud@user/pnoud)
[12:02:29] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[12:02:47] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:03:34] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[12:03:49] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:03:55] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Remote host closed the connection)
[12:04:49] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:05:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:06:53] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[12:07:01] *** Joins: cedric (~cedric@2a01:cb11:867:c200:9a74:b417:efe3:7467)
[12:08:00] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[12:09:46] *** Quits: traptrip (trip@brigaid.xs4all.nl) (Ping timeout: 240 seconds)
[12:12:38] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[12:13:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:13:25] *** Quits: jay-m126_ (~jay-m@129.0.204.221) (Read error: Connection reset by peer)
[12:13:27] *** Joins: noctavian_ (~noctavian@gateway/tor-sasl/noctavian)
[12:13:41] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[12:15:04] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[12:15:53] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[12:17:00] *** Joins: jay-m126_ (~jay-m@129.0.77.221)
[12:17:08] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[12:17:10] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (Quit: byeee)
[12:17:25] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[12:17:53] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (Quit: ZNC 1.7.4 - https://znc.in)
[12:18:07] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[12:18:29] *** Quits: Haxxa (~Haxxa@122.199.45.186) (Quit: Haxxa flies away.)
[12:18:52] *** Joins: Haxxa (~Haxxa@122.199.45.186)
[12:20:02] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:20:07] *** Joins: dynos01 (~dynos01@li820-149.members.linode.com)
[12:20:13] *** Quits: mwilson (~mwilson@li159-72.members.linode.com) (Quit: Leaving!)
[12:20:25] *** Joins: mwilson (mwilson@2600:3c01::f03c:92ff:fe7f:1149)
[12:21:27] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:25:24] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:27:10] *** Quits: computeiro (~Wender@189.37.65.22) (Ping timeout: 265 seconds)
[12:27:18] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:29:19] *** Quits: easior (~easior@27.115.42.250) (Quit: Leaving)
[12:33:20] *** Quits: jay-m126_ (~jay-m@129.0.77.221) (Read error: Connection reset by peer)
[12:33:57] *** Joins: darksun (~darksun@user/darksun)
[12:35:06] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Ping timeout: 240 seconds)
[12:36:06] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:35] *** Joins: jay-m126_ (~jay-m@129.0.77.221)
[12:38:50] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:35] *** Joins: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f)
[12:42:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:43:38] *** Joins: gry (~quassel@botters/gry)
[12:43:49] <gry> hi! trying to implement newton-raphson method in python for a highly nonlinear function. it diverges at some inputs. what could i do to make it more stable? current code: https://cryptobin.co/g8r2o889 password 'py3'. Thanks
[12:46:12] *** Joins: rendar (~rendar@user/rendar)
[12:48:33] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[12:48:55] *** Quits: Guddu (~Guddu@182.68.88.105) (Ping timeout: 265 seconds)
[12:50:43] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[12:51:02] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[12:51:43] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:52:00] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[12:54:06] *** Quits: sebastianos (~sebastian@user/sebastianos) (Read error: Connection reset by peer)
[12:56:58] *** Joins: sebastianos (~sebastian@user/sebastianos)
[12:58:34] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[12:58:58] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 240 seconds)
[12:59:08] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:59:16] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[12:59:59] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[13:01:58] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[13:03:45] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:04:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 256 seconds)
[13:04:13] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[13:05:27] *** Joins: ice9 (~ice9@user/ice9)
[13:09:32] *** Joins: frost (~frost@59.71.241.179)
[13:11:18] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[13:11:32] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[13:14:30] <very_sneaky> hey all, what is the scope of patterns that `Path.rglob` accepts? It obviously accepts the wildcard `*`, but i can't seem to get it to match an "or" expression, i.e. `Path.rglob('*.(so|dll)')` - the docs seem pretty light on wrt this as well
[13:15:32] <rendar> why do i get this absurd error?! https://bpa.st/TJPQ
[13:15:52] *** Joins: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38)
[13:15:55] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[13:18:18] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[13:18:41] <nedbat> rendar: it will be more apparent if you include the full traceback, but you are calling _get_datetime_unit from line 8, but you don't create firstUseful until line 9
[13:19:29] <rendar> nedbat: oh! right.. i didn't catch that, thank you
[13:19:41] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[13:20:07] <nedbat> very_sneaky: the docs should be more explicit. it's the same as glob.glob I think, which also should be more explicit.
[13:21:29] <very_sneaky> nedbat: the glob docs do say "according to the rules used by the unix shell", but even using `{}` to match variable types, i.e. `Path.rglob('*.{so,dll}')` doesn't work. tried escaping the characters to no affect as well
[13:26:41] <very_sneaky> interestingly, `Path.rglob(r'*.[sd][ol]*')` works, but it also matches `.doc` and `.sln` in my case lol
[13:27:32] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Quit: Leaving.)
[13:28:43] <very_sneaky> looks like what i'm after isn't possible, need to combine it with some other iterative/filter method :(
[13:29:16] *** Joins: slav0nic (slav0nic@python.su)
[13:29:26] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[13:30:26] <Repiphany> Missing a $
[13:31:00] <very_sneaky> if i add a $ it will only match .so, won't it? because .dll needs the additional char
[13:31:21] <Repiphany> [sd][ol]+$
[13:31:29] *** Quits: female_student_4 (~female_st@2a01:388:243:150::1:28) (Quit: Client closed)
[13:31:34] <very_sneaky> ahhh yes
[13:31:36] <very_sneaky> good idea
[13:35:35] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::791f)
[13:36:41] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[13:37:30] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[13:38:27] <grawity> couldn't you just rglob("*.so") + rglob("*.dll")
[13:39:52] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Client Quit)
[13:39:59] <very_sneaky> Repiphany: doesn't work
[13:40:06] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[13:40:06] *** MelMalik is now known as AmyMalik
[13:40:08] *** Quits: rigid (~rigid@user/rigid) (Quit: +++ ATH)
[13:40:25] <very_sneaky> grawity: yeah, that was basically the solution i landed on
[13:40:35] <very_sneaky> requires two globs though
[13:40:52] <grawity> how is that worse than requiring one impossible-to-understand glob
[13:41:31] <grawity> hmm I guess if your folder tree is so deep that it doesn't all fit in kernel's cache for the 2nd rglob...
[13:42:02] <very_sneaky> it's less efficient
[13:42:09] <very_sneaky> a comment can explain search criteria
[13:42:20] *** Joins: rigid (~rigid@user/rigid)
[13:42:21] <very_sneaky> ideally the regex would be comprehensible
[13:42:40] <very_sneaky> but yeah, ended up extending the lists - can't use the `+` operator because both are generators
[13:43:15] *** Joins: female_student_4 (~female_st@2a01:388:243:150::1:28)
[13:43:35] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[13:44:20] <grawity> iirc there was a functools helper to chain iterators/generators
[13:44:37] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[13:45:45] <very_sneaky> i do really like conan's decision to use python as the langauge for it's package recipes. makes things very convenient
[13:46:47] *** Joins: sockets (~sockets-g@user/sockets)
[13:48:52] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[13:49:45] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[13:49:50] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:51:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:52:29] *** Joins: wyclif (~wyclif@user/wyclif)
[13:54:27] *** Joins: Adoi (~Adoi@user/adoi)
[13:54:28] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:54:43] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[13:54:57] *** Joins: entuland (~entuland@user/entuland)
[13:55:02] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[13:56:00] *** Joins: dsf777b (~GN0N@36.37.198.124)
[13:56:30] *** Joins: Atque (~Atque@user/atque)
[13:56:57] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[13:57:28] <rendar> in a class method, is useful to load class attributes (e.g. self.x) in local variables? e.g. x = self.x; y=self.y ... do something else with x,y
[13:57:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[13:57:40] <rendar> i mean, it's an optimization or not?
[13:57:57] *** Joins: wyclif (~wyclif@user/wyclif)
[13:58:06] <dsf777b> <rendar> i mean, it's an optimization or not?|  NOT
[13:58:30] <dsf777b> <rendar> i mean, it's an optimization or not?|  YES
[13:58:31] *** Quits: ferz (~ferz@93.48.251.229) (Ping timeout: 265 seconds)
[13:58:59] <dsf777b> <rendar> i mean, it's an optimization or not?|  BUT OPTIMIZING PYTHON IS WASTE OF TIME
[13:59:12] <dsf777b> JUST REWRITE IT ON C
[13:59:20] <dsf777b> OR FREEBASIC
[13:59:34] <rendar> someone can ban this troll?
[14:00:00] *** Parts: dsf777b (~GN0N@36.37.198.124) ()
[14:00:21] *** Joins: sid-maddy (~sid-maddy@103.76.57.23)
[14:00:35] *** Quits: sid-maddy (~sid-maddy@103.76.57.23) (Client Quit)
[14:00:50] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[14:00:52] *** Joins: sid-maddy (~sid-maddy@103.76.57.23)
[14:01:54] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[14:03:02] <deniska> rendar: if you access a value often, local lookup is faster than object lookup
[14:03:23] <rendar> deniska: thanks
[14:03:35] *** Joins: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at)
[14:04:03] <deniska> rendar: (also local variable access is faster than builtin access, hence why sometimes you can see people doing silly things like `def foo(bar, len=len)` in performance critical code like solving Advent of Code)
[14:04:17] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Read error: Connection reset by peer)
[14:04:23] <rendar> oh..i see
[14:04:51] <rendar> so calling len() a lot of time is slower than l=len   and then calling l() a lot of times?
[14:04:57] <Repiphany> Using the right datastructures and algorithms in the first place is generally much more important than microoptimizations like that
[14:05:16] <deniska> rendar: totally not worth it in "normal" circumstances, chances are you are much better off trying to throw your code on pypy if you want it to go computationally faster
[14:05:28] <rendar> Repiphany: i don't agree, i'm learning python from C/C++ and knowing these micro optimizations allow you to write better code
[14:05:41] <deniska> rendar: but yeah, assuming l is local to a function, it's faster to call l() than len()
[14:05:42] <rendar> deniska: yes, i agree
[14:05:49] <rendar> ok
[14:06:15] <rendar> deniska: i wonder why, arent len() and l() both hash table look ups, in the end?
[14:06:18] <Repiphany> Being easier to read and follow makes for much better code than obscure microoptimizations in python
[14:06:35] *** Quits: Gerula (~Gerula@user/gerula) (Ping timeout: 252 seconds)
[14:06:48] <deniska> rendar: local variable access is not a hash table look up, it's more like indexing an array
[14:06:49] <rendar> Repiphany: man, loading object's stuff into often used local variables is not obscure at all, you do that also in C++
[14:07:08] <rendar> deniska: ok, basically you put stuff into a stack
[14:07:21] <deniska> pretty much
[14:07:24] <Repiphany> There are better places to look before trying to save nanoseconds per call
[14:07:33] *** Joins: Gerula (~Gerula@user/gerula)
[14:07:46] <rendar> Repiphany: again, it's not about saving nanoseconds, it's about knowing HOW python works internally
[14:07:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 276 seconds)
[14:07:59] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[14:08:13] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[14:08:17] <deniska> it's not that often useful to know, accessing variables is rarely on a critical performance path
[14:08:18] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[14:08:38] <rendar> deniska: yeah, but when i'm learning a language, i like to know how it works internally in detail
[14:08:54] *** Joins: wyclif (~wyclif@user/wyclif)
[14:08:55] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[14:09:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:09:17] <gordonjcp> rendar: okay, Python is basically pseudocode that gets transliterated to Forth
[14:09:27] <gordonjcp> rendar: boom, done
[14:09:31] <rendar> LOL
[14:09:38] <gordonjcp> rendar: do you understand stack-based languages?
[14:09:44] <rendar> yes..
[14:10:34] <deniska> gordonjcp: I guess we're discussing the details of what that giant `switch` statement is doing
[14:10:42] *** Joins: tokerboker (~vivaan@c-73-71-182-125.hsd1.ca.comcast.net)
[14:11:06] <gordonjcp> deniska: in the python "interpreter"?
[14:11:12] <deniska> yes
[14:11:51] <gordonjcp> nothing good I suspect
[14:12:37] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[14:12:40] *** Joins: ferz (~ferz@93.48.251.229)
[14:13:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[14:13:49] *** Quits: sid-maddy (~sid-maddy@103.76.57.23) (Quit: Quit)
[14:14:05] <Repiphany> rendar: Here's a puzzle about python internals, what gets printed and why https://bpa.st/EGHQ
[14:14:49] *** Joins: wyclif (~wyclif@user/wyclif)
[14:14:49] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[14:16:21] *** Joins: frost (~frost@59.71.241.179)
[14:16:23] <deniska> it's not exactly a question about python internals, more like an edge case of a language itself
[14:16:32] <deniska> I'd expect other implementations to behave in the same way :)
[14:16:42] *** Quits: VimVim (~VimVim@85.191.89.249) (Ping timeout: 240 seconds)
[14:16:45] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[14:17:02] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[14:18:20] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[14:18:56] <gordonjcp> rendar: honestly if you're starting to guddle about in the Python interpreter guts you're probably at a point where you need to switch to C
[14:18:56] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[14:19:36] <rendar> gordonjcp: huh?
[14:19:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[14:19:47] <rendar> shanti, man.. i just asked a curiosity about py
[14:20:14] <rendar> i call this function millions of times, so i wondered if x=self.x in local would be better, that's all
[14:20:18] <rendar> nobody has been killed...
[14:20:37] <gordonjcp> rendar: "better" in what sense?
[14:20:45] *** Joins: wyclif (~wyclif@user/wyclif)
[14:20:46] <rendar> better in calling self.x
[14:20:53] <deniska> around the time of python3.9 some optimizations were made wrt object attribute look ups
[14:20:58] *** Quits: frost (~frost@59.71.241.179) (Client Quit)
[14:21:01] <gordonjcp> rendar: right, but "better" how?
[14:21:01] <deniska> (maybe just for methods? I don't quite recall)
[14:21:06] <rendar> faster, in a sense
[14:21:08] <deniska> so maybe the difference isn't so big anymore
[14:22:24] <deniska> the real reason why people may want to pull often accessed attributes as local variables is to not write `self.` that many times :)
[14:22:32] <gordonjcp> rendar: it might be faster, but it will be worse
[14:22:39] <gordonjcp> in every conceivable way
[14:22:42] <rendar> deniska: also that
[14:22:50] <rendar> gordonjcp: ?!?!?! huh?
[14:23:12] <gordonjcp> rendar: more complex, an extra line, confusing-looking syntax
[14:23:22] <rendar> gordonjcp: ok ok
[14:23:25] <rendar> you're right
[14:23:26] <gordonjcp> rendar: but hey it's 0.000000000000000001% faster, so that's good, right?
[14:23:43] <deniska> well, to be fair it's not a complex syntax, it's a simple assignment
[14:23:46] <rendar> if you call a method MILLIONS of time, that tiny 0.0000.. is multiplied millions of time
[14:23:59] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[14:24:41] <gordonjcp> rendar: okay
[14:24:48] <deniska> and it indeed may translate in 20 seconds of runtime instead of 30
[14:24:51] <gordonjcp> rendar: but that's still a tiny improvement for a lot of work
[14:25:05] <gordonjcp> rendar: it's unlikely to be the slowest bit of your code
[14:25:07] <deniska> in very particular circumstances, but still
[14:25:08] <rendar> gordonjcp: still it's an improvement, what is your point?
[14:25:37] <gordonjcp> rendar: there's always going to be something else that'll give you more bang per buck
[14:25:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[14:25:42] <rendar> i really don't get the point of this long conversation about something so banal
[14:26:17] *** Joins: wyclif (~wyclif@user/wyclif)
[14:26:23] <deniska> gordonjcp: (until there isn't, as I said, I had usecases for spelling len=len in argument list, even if peculiar ones)
[14:26:28] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Remote host closed the connection)
[14:27:02] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 265 seconds)
[14:28:04] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[14:28:18] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[14:29:55] *** Joins: Atque (~Atque@user/atque)
[14:31:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[14:31:45] *** Joins: wyclif (~wyclif@user/wyclif)
[14:34:32] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[14:36:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[14:36:40] *** Quits: sockets (~sockets-g@user/sockets) (Read error: Connection reset by peer)
[14:37:18] *** Joins: wyclif (~wyclif@user/wyclif)
[14:40:20] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[14:40:36] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Quit: leaving)
[14:41:27] *** Joins: sockets (~sockets-g@user/sockets)
[14:42:20] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[14:43:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:45:28] *** Joins: Socra (~Socra@206.217.216.27)
[14:45:54] *** Quits: sockets (~sockets-g@user/sockets) (Ping timeout: 240 seconds)
[14:47:08] *** Joins: sockets (~sockets-g@user/sockets)
[14:49:00] *** Joins: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[14:49:02] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[14:49:43] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[14:50:25] *** Quits: noctavian_ (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[14:53:10] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[14:53:21] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 276 seconds)
[14:55:19] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Konversation terminated!)
[14:55:33] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 265 seconds)
[14:56:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[14:57:28] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[14:59:16] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[14:59:57] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Client Quit)
[15:00:02] *** Joins: pnoud (~pnoud@user/pnoud)
[15:00:32] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[15:00:46] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[15:01:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[15:03:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:03:49] <p-i-> Does A[i:j] _allocate_ in numpy? i.e. does it create a fresh array or just a view into an existing one
[15:03:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:05:28] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[15:05:36] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[15:06:18] *** Quits: darxun (sid504814@id-504814.tinside.irccloud.com) (Ping timeout: 240 seconds)
[15:06:59] <Repiphany> a = np.zeros(10); a[3:7] = 1
[15:07:05] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[15:07:20] *** Quits: female_student_4 (~female_st@2a01:388:243:150::1:28) (Quit: Client closed)
[15:07:32] *** Quits: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at) (Ping timeout: 255 seconds)
[15:07:35] *** Joins: darxun (sid504814@id-504814.tinside.irccloud.com)
[15:08:23] *** Joins: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at)
[15:09:13] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:10:58] <deniska> assignment to a slice is a different operation to slicing
[15:11:12] <deniska> they may behave differently
[15:11:17] <deniska> still, easy to test
[15:11:46] <Repiphany> a = np.zeros(10); b = a[3:7]; b[:] = 0; print(a)
[15:11:53] <Repiphany> oops, b[:] = 1
[15:13:30] <p-i-> That still doesn't determine if it performs a copy-upon-write for efficiency.
[15:14:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:15:50] *** Quits: sivoais (~zaki@199.19.225.239) (Ping timeout: 268 seconds)
[15:16:17] *** Joins: sivoais (~zaki@199.19.225.239)
[15:16:48] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[15:19:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:20:53] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[15:22:16] <jinsun> advanced indexing gives a copy, basic indexing gives a "view" https://numpy.org/doc/stable/reference/arrays.indexing.html#advanced-indexing
[15:23:10] <jinsun> but not sure about the assignment case
[15:23:24] *** Joins: dps910 (~dps910@94.10.181.140)
[15:24:02] <dps910> hi
[15:24:17] *** Joins: Adoi (~Adoi@user/adoi)
[15:27:36] *** Joins: nyah (~nyah@90.221.186.180)
[15:27:51] <gordonjcp> how do I find out which dep of a project is pulling in another dep?
[15:27:54] <p-i-> From VSCode's ipynb thingy I `from Foo import Foo` then `f = Foo()`. But if I put a print in Foo's ctor in Foo.py, where does the text go? It's not going into the cell output :(
[15:28:27] <p-i-> gordonjcp: If you use poetry, I think `poetry tree` shows you the whole tree.
[15:28:53] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[15:32:24] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[15:32:47] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[15:34:39] <nedbat> dps910: hi
[15:36:14] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[15:36:44] *** Quits: nyah (~nyah@90.221.186.180) (Remote host closed the connection)
[15:37:14] <jinsun> p-i-: did you import after the change or before? if you imported before you added the print, the old version of the module will be cached in vscode jupyter thing and you will have to reload with importlib to see the changes
[15:37:36] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[15:37:47] *** Joins: nyah (~nyah@90.221.186.180)
[15:38:06] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:39:19] <p-i-> geeee thanks!
[15:39:35] *** Joins: upsala (~zcb@185.213.155.160)
[15:40:28] *** Quits: upsala (~zcb@185.213.155.160) (Client Quit)
[15:41:43] *** Joins: upsala (~zcb@185.213.155.160)
[15:42:30] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[15:42:38] *** Quits: dps910 (~dps910@94.10.181.140) (Changing host)
[15:42:38] *** Joins: dps910 (~dps910@user/dps910)
[15:43:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[15:43:51] *** Quits: upsala (~zcb@185.213.155.160) (Client Quit)
[15:44:21] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:44:55] *** Quits: dps910 (~dps910@user/dps910) (Quit: Leaving)
[15:46:59] <Adoi> hello, I am getting the pasted error from this code: https://bpa.st/JU2Q..though I am not sure if the rest
[15:47:14] <Adoi> of the code is ok, either
[15:48:26] <bjs> Adoi: what is `amount` supposed to be in `get_balancez ?
[15:48:30] <bjs> oops `get_balance` *
[15:48:47] <Adoi> hi bjs! it's been a while :)
[15:48:54] <bjs> hi
[15:48:56] <bjs> :)
[15:50:00] <Adoi> just additional info; https://bpa.st/UC5Q
[15:50:40] <bjs> Adoi: I don't understand your `get_balance` function. Why does getting the balance try make deposits and withdrawals
[15:51:02] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[15:51:31] <bjs> and why does it try *write* to the ledger?
[15:52:36] *** Joins: upsala (~zcb@185.213.155.160)
[15:53:29] *** Joins: milkshake (~USER@27.125.241.114)
[15:54:14] <Adoi> bjs, get_balance conveys the balance after deposits and withdrawals. so in the withdraw function, I thought "self.get_balance()" needs to be compared to the amount that is intended to be withdrawn, in order to figure if the former is sufficient
[15:54:22] *** Quits: jay-m126_ (~jay-m@129.0.77.221) (Ping timeout: 272 seconds)
[15:54:37] <Adoi> to allow for a withdrawal
[15:54:40] <bjs> Adoi: yes,  so you should look at the ledger and count up how much is there right?
[15:54:49] <Adoi> bjs, yes
[15:55:05] <bjs> Adoi: so why does it call self.deposit ?  that function puts more money into the account
[15:56:04] *** Quits: sockets (~sockets-g@user/sockets) (Read error: Connection reset by peer)
[15:56:19] <bjs> Adoi: by the way your Category __init__ takes 1 argument called "ledger", but then you call it like `food = budget.Category("Food")`  which makes it sound like that argument isn't the ledger at all but the category name
[15:56:22] <Adoi> bjs, so that it would add to the balance in case the deposit function is used, that is, any amount is deposited
[15:56:34] *** Quits: ztrawhcse (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[15:56:36] <bjs> Adoi: but why should *getting the balance* change the balance at all?
[15:56:39] <bjs> it should just count, not change
[15:57:12] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[15:57:19] <bjs> Adoi: like, you should read the ledger and count up what has happened. You shouldn't try make new deposits or withdrawals right? that seems wrong
[15:57:36] <Adoi> bjs, but all transactions need to be counted somewhere
[15:57:46] <bjs> Adoi: that's what a ledger is
[15:58:37] <bjs> Adoi: get_balance would read the ledger, which records all the transactions that have happened and adds them all up
[15:59:15] <Adoi> about the ledger vs. categories, I admit I dont know how to differentiate between them
[15:59:19] <bjs> Adoi: maybe your ledger should be a list like [+1000, -10.15, -15.89]  then you can just add it all up to get the balance
[16:00:15] <bjs> Adoi: oh.  a ledger was historically a book that you wrote down a list of transactions in https://en.wikipedia.org/wiki/Ledger
[16:01:14] *** Joins: sockets (~sockets-g@user/sockets)
[16:01:46] <Adoi> yes, I know its formal definition but in the above category/instance variable context I couldnt set up the relations correctlz
[16:01:50] <Adoi> correctly
[16:02:27] *** Joins: thiras (~thiras@user/thiras)
[16:03:03] <bjs> Adoi: well making the ledger a list of transactions would be a good idea
[16:03:06] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:03:39] <bjs> Adoi: so the Category("food") would have a ledger attribute like maybe [("initial deposit", 1000), ("groceries", -10.15), ...]
[16:03:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[16:04:00] <bjs> withdraw/deposit will just write to the ledger to record what happened and get_balance would just have to read it (with a loop)
[16:04:14] *** Quits: milkshake (~USER@27.125.241.114) (Read error: Connection reset by peer)
[16:05:55] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[16:07:22] *** Quits: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[16:07:59] *** Joins: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at)
[16:08:04] *** Joins: cadmio (~gidna@151.25.153.162)
[16:08:08] <cadmio> hello
[16:08:15] <nedbat> cadmio: hey there
[16:08:20] <cadmio> Does someone have some expirience with gtk?
[16:08:44] *** Quits: emika (~emika@185.207.249.218) (Ping timeout: 255 seconds)
[16:08:46] <nedbat> cadmio: it works better here to ask your question directly. People don't often volunteer as experts, and sometimes non-experts can help.
[16:08:53] *** Joins: emika (~emika@185.207.249.116)
[16:09:15] <Adoi> bjs, thank you, I will review the whole in light of your hints
[16:09:56] <cadmio> well ok, if someone has any idea on this let me know: https://stackoverflow.com/questions/68509091/how-to-change-the-background-color-of-the-line-numbers-mode-in-gtk3
[16:12:35] *** Joins: McEndu (~McEndu@85.203.23.94)
[16:13:51] *** Joins: rsx (~dummy@ppp-188-174-137-235.dynamic.mnet-online.de)
[16:16:05] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[16:19:22] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:20:48] *** Joins: dps910 (~dps910@user/dps910)
[16:22:10] *** Quits: cruzr (~cruzr@69.30.246.164) (Ping timeout: 240 seconds)
[16:25:19] *** Joins: wyclif (~wyclif@user/wyclif)
[16:26:07] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:27:17] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[16:31:15] *** Quits: orbatos (~orbatos@user/orbatos) (Ping timeout: 265 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:17] <nedbat> cadmio: i tried looking in gtk source, but i can't find anything in there :(
[16:36:35] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:40] <cadmio> yes I know
[16:37:18] *** Quits: cadmio (~gidna@151.25.153.162) (Quit: WeeChat 2.3)
[16:40:26] *** Quits: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38) (Quit: Konversation terminated!)
[16:43:19] *** Joins: Naan (~naan@user/naan)
[16:44:26] *** Joins: jay-m126_ (~jay-m@129.0.77.221)
[16:44:28] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[16:45:57] *** Joins: easior (~easior@58.247.141.31)
[16:46:14] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[16:47:58] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[16:49:42] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 276 seconds)
[16:50:11] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:50:25] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[16:51:37] *** Quits: McEndu (~McEndu@85.203.23.94) (Read error: Connection reset by peer)
[16:53:22] *** Joins: McEndu (~McEndu@85.203.23.94)
[16:54:06] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[16:59:20] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:00:03] *** Quits: McEndu (~McEndu@85.203.23.94) (Quit: Leaving)
[17:00:36] *** Joins: McEndu (~McEndu@85.203.23.94)
[17:00:52] *** Joins: pnoud (~pnoud@user/pnoud)
[17:01:40] *** Quits: easior (~easior@58.247.141.31) (Ping timeout: 258 seconds)
[17:04:51] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:04:52] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[17:04:59] *** Joins: sliwkr (~kks@static-ip-87-248-67-133.promax.media.pl)
[17:05:53] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[17:07:30] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[17:07:46] *** Quits: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at) (Ping timeout: 256 seconds)
[17:08:47] *** Joins: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at)
[17:11:38] *** Joins: magla (~gelignite@55d4d566.access.ecotel.net)
[17:12:09] *** Quits: cpyang (cpyang@114-32-153-132.HINET-IP.hinet.net) (Read error: Connection reset by peer)
[17:12:36] <sliwkr> Hey, how do you deal with the interface of a mocked external dependency changing without you knowing so? (I mean, besides subscribing to the changelog and hoping the authors put the info there)
[17:13:20] <BtbN> You swear a lot about library authors not caring for a stable API.
[17:13:49] *** Joins: adamts (~Adam@user/mysteryblokhed)
[17:14:22] *** Joins: cpyang (cpyang@114-32-153-132.HINET-IP.hinet.net)
[17:15:02] *** Joins: easior (~easior@183.131.110.43)
[17:15:44] <nedbat> sliwkr: you could also have an expensive rarely run test that uses the actual dependency
[17:15:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:17:34] *** Joins: trace987 (~trace@ip5b429888.dynamic.kabel-deutschland.de)
[17:21:00] *** Quits: sliwkr (~kks@static-ip-87-248-67-133.promax.media.pl) (Quit: Lost terminal)
[17:21:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[17:22:20] *** Joins: sliwkr (~kks@static-ip-87-248-67-133.promax.media.pl)
[17:22:51] *** Joins: wyclif (~wyclif@user/wyclif)
[17:23:06] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[17:23:07] <sliwkr> Both strategies seem sound, ty. Suspecting that I'll implement the first one more often.
[17:26:53] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[17:27:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[17:28:29] *** Joins: wyclif (~wyclif@user/wyclif)
[17:29:28] *** Joins: schumaml4 (~schumaml@dslb-178-010-035-064.178.010.pools.vodafone-ip.de)
[17:30:02] *** Quits: schumaml3 (~schumaml@dslb-178-010-033-054.178.010.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[17:30:12] <madprops> seems I'm having some issue with accesion a variable from an outside def
[17:30:16] <madprops> i have a def inside a def
[17:30:25] <madprops> trying to access 'pos' from the parent def, for read and write
[17:30:29] <madprops> should I use something like global?
[17:30:38] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[17:30:46] *** Joins: Doffi (~doffi@91.132.197.188)
[17:30:53] <BtbN> sliwkr, it's one of the major issues of modern per-language package managers. Nobody cares about a stable API.
[17:30:58] *** Quits: BrokenCog (~BrokenCog@41.sub-174-194-192.myvzw.com) (Read error: Connection reset by peer)
[17:31:04] <BtbN> So you end up with a massive list of deps pinned to old versions.
[17:31:16] <BtbN> If you then HAVE to update something, because of a security issue, you're in for pain
[17:32:20] <jinsun> madprops: show code?
[17:32:50] <madprops> jinsun, https://dpaste.org/9LLU
[17:32:58] <madprops> it's in forget()
[17:33:04] <madprops> 'pos'
[17:34:42] *** Quits: easior (~easior@183.131.110.43) (Ping timeout: 240 seconds)
[17:35:13] *** Joins: easior (~easior@183.131.110.43)
[17:35:53] *** Quits: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f) (Remote host closed the connection)
[17:36:10] *** Joins: rsrx (~rsrx@103.225.150.81)
[17:36:21] <nedbat> madprops: you need "nonlocal pos" inside forget
[17:36:23] *** Joins: BrokenCog (~BrokenCog@41.sub-174-194-192.myvzw.com)
[17:36:30] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[17:36:37] <nedbat> madprops: though maybe it's time for a class
[17:36:40] *** Joins: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f)
[17:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[17:36:55] *** Quits: Fluxx (~Fluxx@user/fluxx) (Remote host closed the connection)
[17:37:00] <madprops> noncal is new to me
[17:38:14] *** Joins: Blankspace (~abcd@user/blankspace)
[17:38:52] <jinsun> madprops: you can't do `pos=` to modify the outside pos, it will create a new local pos variable, and you can't use global because pos is not global, nonlocal is for this case
[17:39:16] <madprops> i see
[17:40:27] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[17:41:05] <jinsun> madprops:  it is usually better to structure your program such that you don't need global or nonlocal, maybe return the new pos from the function and use that returned value in the parent fuction to modify pos, or make a class as nedbat suggested
[17:42:04] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[17:43:50] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 258 seconds)
[17:47:13] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:47:16] <madprops> gonna try turning it into a class
[17:47:17] *** Quits: sockets (~sockets-g@user/sockets) (Ping timeout: 258 seconds)
[17:48:59] *** Joins: sockets (~sockets-g@user/sockets)
[17:49:19] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:49:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:50:42] *** Quits: jay-m126_ (~jay-m@129.0.77.221) (Ping timeout: 240 seconds)
[17:50:56] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[17:51:19] *** Joins: tlaxkit (~hexchat@170.253.39.204)
[17:52:08] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[17:52:09] *** Joins: minip (minip@user/minip)
[17:53:19] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Read error: Connection reset by peer)
[17:53:40] *** Quits: easior (~easior@183.131.110.43) (Ping timeout: 256 seconds)
[17:54:51] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[17:55:28] *** Joins: easior (~easior@183.131.110.43)
[17:56:02] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[17:56:38] *** Quits: easior (~easior@183.131.110.43) (Client Quit)
[17:57:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[17:59:40] *** Joins: sockets_ (~sockets-g@user/sockets)
[18:00:07] *** Quits: sockets (~sockets-g@user/sockets) (Ping timeout: 245 seconds)
[18:00:45] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:03:53] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[18:04:00] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:04:55] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[18:05:24] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[18:06:05] *** Joins: Atque (~Atque@user/atque)
[18:07:29] *** Quits: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[18:07:47] *** Joins: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at)
[18:08:56] *** Quits: Jefren (~Jefren@208.104.190.60) (Quit: WeeChat 3.2)
[18:11:06] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[18:11:07] *** Joins: Jefren (~Jefren@208.104.190.60)
[18:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:16:24] <madprops> turning it into a class messes up with the printing https://dpaste.org/xbn0
[18:17:02] <madprops> not sure what I messed up but the key_listener makes it so it onyl shows one line when I press something
[18:17:16] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:18:26] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:18:54] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:23:42] *** Quits: jazzy (~jaziz@2600:380:c174:6a3d:c4c3:7674:1736:67d4) (Ping timeout: 256 seconds)
[18:24:03] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[18:25:33] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:25:38] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[18:26:58] *** Joins: McEndu_ (~McEndu@85.203.23.94)
[18:27:13] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[18:27:32] *** Quits: McEndu (~McEndu@85.203.23.94) (Ping timeout: 258 seconds)
[18:30:33] *** Joins: akk (~akk@75.161.155.222)
[18:31:33] *** Joins: CodeEstate (~Name@024-180-065-134.res.spectrum.com)
[18:31:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[18:33:03] *** Joins: wyclif (~wyclif@user/wyclif)
[18:33:22] *** Quits: sockets_ (~sockets-g@user/sockets) (Ping timeout: 240 seconds)
[18:33:46] *** Quits: y1n (~y1n@84-115-64-149.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[18:35:53] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 255 seconds)
[18:38:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[18:39:19] *** Joins: wyclif (~wyclif@user/wyclif)
[18:40:06] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-1027-ab2b-cf06-1736.res6.spectrum.com)
[18:44:43] *** Joins: NonNeur (~NonNeur@181.81.20.76)
[18:47:35] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[18:47:54] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[18:48:06] *** Joins: iflema (~ian@user/iflema)
[18:48:43] *** Joins: hybla (kvirc@host-79-25-188-29.retail.telecomitalia.it)
[18:48:55] <madprops> nvm it works now
[18:49:07] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[18:49:14] *** Gustavo6046_ is now known as Gustavo6046
[18:49:16] <hybla> hi
[18:49:40] <nedbat> hybla: hi
[18:50:59] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[18:51:21] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[18:52:06] *** Joins: schumaml (~schumaml@dslb-178-010-032-126.178.010.pools.vodafone-ip.de)
[18:52:33] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[18:52:51] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Quit: because)
[18:52:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:53:02] *** Joins: Blankspace (~abcd@user/blankspace)
[18:53:04] <hybla> is python a good tool for creating n concurrent http requests to n different urls, and when one finishes abort the others?
[18:53:13] *** Joins: wyclif (~wyclif@user/wyclif)
[18:53:44] *** Quits: yCrazyEdd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 256 seconds)
[18:53:50] *** Joins: jay-m126_ (~jay-m@129.0.77.221)
[18:54:14] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[18:54:48] *** Quits: schumaml4 (~schumaml@dslb-178-010-035-064.178.010.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[18:55:47] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Quit: Leaving.)
[18:56:11] *** Joins: zebrag (~chris@user/zebrag)
[18:56:14] <BtbN> Pretty much every language will be able to do that, so not sure what to tell you
[18:58:00] <hybla> i read there is no way when a thread does i/o to stop it
[18:59:21] *** Quits: telboon (~telboon@user/telboon) (Quit: Leaving)
[18:59:51] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[18:59:57] <eltonpinto> https://stackoverflow.com/questions/39204929/python-asyncio-stop-the-loop-when-one-coroutine-is-done
[19:01:12] <eltonpinto> relevant docs: https://docs.python.org/3/library/asyncio-task.html?highlight=first_completed#waiting-primitives
[19:01:21] <eltonpinto> i think this is what you're looking for
[19:01:42] *** Joins: pnoud (~pnoud@user/pnoud)
[19:01:45] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[19:01:53] *** Joins: graywolf (~wolf@user/graywolf)
[19:02:53] <hybla> eltonpinto: thanks, i didn't know about asyncio
[19:03:29] <eltonpinto> hybla: yw
[19:03:38] <graywolf> Helo I'm trying to run an app with gunicorn. I have gunicorn installed globally (apk add py3-gunicorn) and falcon locally (python3 -mvenv --system-site-packages .; ./bin/activate; pip install falcon); However the run fails with `ModuleNotFoundError: No module named 'falcon'`. Howeven, when I run `python -c "import falcon"`, it seems to work. So the issues seems to be that "global" gunicorn does not
[19:03:40] <graywolf> see "local" falcon; No idea what to do about that
[19:03:44] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 272 seconds)
[19:03:46] <graywolf> Any ideas?
[19:04:42] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[19:04:55] *** Quits: jay-m126_ (~jay-m@129.0.77.221) (Quit: Lost terminal)
[19:05:06] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Client Quit)
[19:05:51] *** Quits: hybla (kvirc@host-79-25-188-29.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[19:06:53] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[19:07:15] *** Joins: jay-m126_ (~jay-m@129.0.77.221)
[19:07:51] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[19:09:19] *** Quits: jay-m126_ (~jay-m@129.0.77.221) (Client Quit)
[19:13:40] *** Quits: McEndu_ (~McEndu@85.203.23.94) (Remote host closed the connection)
[19:14:14] *** Joins: McEndu_ (~McEndu@85.203.23.94)
[19:15:40] *** Quits: McEndu_ (~McEndu@85.203.23.94) (Remote host closed the connection)
[19:17:54] <ferz> I need to store some key, value pair in a non volatile and light local store.  I usually use File::Cache in Perl. Is there a similar package in Python?
[19:18:48] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[19:19:09] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.2)
[19:19:56] *** Quits: akk (~akk@75.161.155.222) (Ping timeout: 265 seconds)
[19:21:21] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:22:43] *** Joins: locsmif (~none@user/locsmif)
[19:22:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:25:00] *** Joins: darksun (~darksun@user/darksun)
[19:25:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:28:30] *** Joins: reset (~reset@user/reset)
[19:28:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:29:53] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 255 seconds)
[19:30:07] <trace987> could it make sense to make python as your standard shell, instead of bash or else?
[19:30:25] *** Joins: jokoon (~eio@2a01:e34:ec5c:3040:f4f5:1b92:264c:9784)
[19:30:27] <jokoon> hello
[19:30:35] <jokoon> any help to understand decorators?
[19:31:24] <grym> trace987: https://xon.sh/
[19:31:58] *** Quits: nbao (~hot@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.1)
[19:32:26] *** Joins: derelict (~derelict@user/derelict)
[19:33:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:33:43] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[19:33:46] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[19:33:54] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Remote host closed the connection)
[19:33:58] <bjs> jokoon: what is your question about decorators
[19:34:06] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[19:34:17] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[19:34:30] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:34:31] <jokoon> bjs, actually I'm curious about this code: https://bpa.st/JU6Q
[19:34:58] <bjs> jokoon: okay,  what about this code are you curious about
[19:35:00] <jokoon> because it seems that I can't name arguments when a function has *args that calls another...
[19:35:18] <bjs> jokoon: *args are the unnamed arguments
[19:35:23] <jokoon> it seems the line 7 doesn't work
[19:35:24] <bjs> jokoon: **args would be the named ones
[19:35:29] <jokoon> oooh ok
[19:35:37] <bjs> jokoon: it's common to see something like `def f(*args, **kwargs): ...`
[19:35:41] *** Joins: Snyp (~rksht@49.207.204.249)
[19:35:49] <bjs> (and the call `f2(*args, **kwargs)` to pass them along)
[19:37:31] *** Joins: VimVim (~VimVim@85.191.89.249)
[19:37:32] <jokoon> https://bpa.st/S2NQ so this is the fix
[19:38:05] <bjs> jokoon: yes that looks like it should work.
[19:38:19] <jokoon> thanks!
[19:38:40] <jokoon> it's almost like a decorator, isn't it?
[19:38:43] <jokoon> not sure it is
[19:39:11] *** Quits: dps910 (~dps910@user/dps910) (Quit: Leaving)
[19:39:29] <hexnewbie> jokoon: That's just a function calling another function. No decorators involved (yet)
[19:39:38] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 256 seconds)
[19:41:31] *** Quits: dulanic (~dulanic@47.187.144.163) (Read error: Connection reset by peer)
[19:41:32] *** Joins: darksun (~darksun@user/darksun)
[19:42:08] *** Joins: dulanic (~dulanic@47.187.144.163)
[19:43:08] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[19:44:00] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:44:11] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[19:45:01] *** Quits: dulanic (~dulanic@47.187.144.163) (Read error: Connection reset by peer)
[19:45:41] *** Joins: dulanic (~dulanic@47.187.144.163)
[19:46:31] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 265 seconds)
[19:48:04] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[19:51:03] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[19:51:17] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[19:52:19] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[19:55:08] *** Joins: oldleather (~Old@172.58.168.19)
[19:55:31] *** Parts: oldleather (~Old@172.58.168.19) (Leaving)
[19:55:58] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[19:57:36] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[19:59:41] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[19:59:50] *** Joins: darksun (~darksun@user/darksun)
[20:04:06] *** Quits: tlaxkit (~hexchat@170.253.39.204) (Ping timeout: 268 seconds)
[20:04:53] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 265 seconds)
[20:05:40] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[20:09:50] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[20:10:04] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[20:10:05] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 250 seconds)
[20:13:24] *** Joins: LiftLeft (~LiftLeft@191.96.150.157)
[20:14:17] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Remote host closed the connection)
[20:14:17] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[20:14:26] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[20:14:31] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[20:14:36] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[20:15:09] *** Joins: Adoi (~Adoi@user/adoi)
[20:15:24] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:16:47] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 245 seconds)
[20:16:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:18:48] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[20:19:13] *** Joins: jetchisel (jetchisel@user/jetchisel)
[20:20:31] *** Joins: LondonAppDev (~LondonApp@2a01:4b00:87ce:6a00:45f5:bfca:7e09:3229)
[20:22:11] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[20:23:10] <LondonAppDev> Question: If I make a `dict` with keys `1` and `True`, the value is overwritten and only one key appears. Eg: `print({1: "One", True: "True"})` will output `{1: 'True'}`. Is this intended or is there a bug somewhere? Does `1` and `True` have the same hash, and that's why it works like this?
[20:24:47] <LondonAppDev> Just found a SO post answering my question... In short, yes the hash of True, 1 and 1.0 is the same which is why this happens.
[20:24:49] *** Joins: darksun (~darksun@user/darksun)
[20:25:14] <LondonAppDev> Even after using Python for 10 years, I still learn something new every day.
[20:25:52] *** Quits: jokoon (~eio@2a01:e34:ec5c:3040:f4f5:1b92:264c:9784) (Quit: Leaving)
[20:26:09] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:26:36] <Snyp> LondonAppDev: hash same and also 1 == True
[20:30:04] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 256 seconds)
[20:31:45] <grym> bools are a subclass of int, after all
[20:31:46] <grym> :/
[20:32:10] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[20:33:24] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 265 seconds)
[20:33:24] <bjs> LondonAppDev: no bug, this is intended (although perhaps surprising): `1 == True`
[20:34:02] <LondonAppDev> Thanks all! Yes I posted above that I figured it out (not sure if it came through)?
[20:34:04] *** Joins: wyclif (~wyclif@user/wyclif)
[20:34:18] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[20:34:20] *** Quits: emika (~emika@185.207.249.116) (Ping timeout: 252 seconds)
[20:34:42] <bjs> LondonAppDev: yeah it's just a curiosity of Python that bools, ints and floats can all be equal
[20:34:49] <bjs> (and then dicts work on equality not identity)
[20:34:53] *** Joins: emika (~emika@185.207.249.129)
[20:35:13] *** Joins: tlaxkit (~hexchat@170.253.39.204)
[20:35:35] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Client Quit)
[20:35:40] *** Joins: KevinX (~KevinX@2.56.190.208)
[20:36:23] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:37:21] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[20:37:25] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[20:38:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:39:36] *** Joins: wyclif (~wyclif@user/wyclif)
[20:40:03] *** Joins: zaquest (~notzaques@5.128.210.178)
[20:40:46] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[20:40:58] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[20:41:06] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 268 seconds)
[20:41:34] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:41:45] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:42:23] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[20:42:37] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[20:43:56] *** Joins: zebrag (~chris@user/zebrag)
[20:44:37] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Read error: Connection reset by peer)
[20:44:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[20:45:00] *** Quits: tims1 (~tims@61.69.131.46) (Ping timeout: 265 seconds)
[20:45:09] *** Joins: wyclif (~wyclif@user/wyclif)
[20:46:20] <jinsun> oh TIL, I used to think that was special case for ints and floats, but we can do this with custom classes too if we match the __hash__ and __eq__ with ints
[20:46:30] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[20:47:04] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[20:47:19] *** Joins: jokoon (~eio@2a01:e34:ec5c:3040:f4f5:1b92:264c:9784)
[20:47:32] <jokoon> so we agree, yield can be used to pause a for loop, right?
[20:47:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[20:47:48] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:49:09] *** Joins: foobaz212537114 (~foobaz212@82.33.219.124)
[20:49:27] <Adoi> hello again :) I am getting this error now; https://bpa.st/RYUQ
[20:49:37] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[20:50:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[20:50:20] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[20:50:32] *** Joins: varaindemian (~varaindem@86.124.78.162)
[20:50:36] *** Joins: wyclif (~wyclif@user/wyclif)
[20:50:53] *** Quits: NonNeur (~NonNeur@181.81.20.76) (Ping timeout: 255 seconds)
[20:51:28] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[20:51:41] *** Quits: LondonAppDev (~LondonApp@2a01:4b00:87ce:6a00:45f5:bfca:7e09:3229) (Quit: Client closed)
[20:51:45] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[20:51:45] *** Quits: diego (~diego@94-36-109-68.adsl-ull.clienti.tiscali.it) (Read error: Connection reset by peer)
[20:52:02] *** Joins: OverCoder (~OverCoder@user/overcoder)
[20:52:41] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Client Quit)
[20:52:50] <bjs> Adoi: hmm,  what are you using to learn Python ?
[20:52:58] <bjs> like are you reading a book or doing some course?
[20:53:38] *** Joins: darksun (~darksun@user/darksun)
[20:53:39] <Adoi> bjs, mostly reading online resources
[20:53:46] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[20:54:47] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[20:55:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:56:08] *** Joins: wyclif (~wyclif@user/wyclif)
[20:56:30] <bjs> Adoi: the idea of a ledger in general is that it's a record you keep that you add to as things happen
[20:57:23] <Adoi> bjs, yes
[20:57:51] <bjs> Adoi: but yours isn't doing that, your deposit/withdraw functions don't seem to touch the ledger at all
[20:58:14] <bjs> Adoi: here's a little example https://bpa.st/SGIA to give you an idea
[20:58:39] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 252 seconds)
[20:59:41] <jokoon> Hello, I want to use a generator or yield to "pause" a for loop inside a function, is that possible? I cant make it work https://bpa.st/X52Q
[21:01:01] <bjs> jokoon: a function with a "yield" in it doesn't start executing immediatley.  You need to call next(the_generator) to make it run up to the yield
[21:01:59] <Adoi> bjs, I admit that after several readings I still dont have enough clue of class-inheritance to know what i am doingn
[21:02:06] <bjs> Adoi: there is no inheritance here
[21:02:32] *** Joins: pnoud (~pnoud@user/pnoud)
[21:02:37] <Adoi> bjs, see, I dont even know what it is
[21:02:41] <bjs> jokoon: like `g = f()` then `next(g)` runs to the first yield, then `next(g)` again will run until it yields again etc.
[21:03:06] <bjs> Adoi: that's why I asked what you're using to learn Python, maybe you should go through the http://docs.python.org/3/tutorial/ or some book or something which will cover things like this
[21:04:00] <Adoi> bjs, right point, I was thinking the same. I covered two texts so far but it confuses me only about what is what
[21:04:49] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[21:04:56] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[21:05:24] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[21:05:33] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[21:06:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:06:57] *** Joins: kZel (~kZel@90.199.182.233)
[21:07:11] *** Joins: wyclif (~wyclif@user/wyclif)
[21:07:43] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[21:07:49] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[21:09:07] <bjs> Adoi: does my example help though?
[21:10:04] *** Joins: rany (~rany@user/rany)
[21:11:15] <Adoi> bjs, probably, but in my case it is as if every time I see a new example about classes, it is like everything I know is wrong,
[21:11:26] *** Joins: darksun (~darksun@user/darksun)
[21:11:27] <nedbat> jokoon: i think you want to replace lines 6-8 with:  for ff in f(): print(ff); sleep(0.5)
[21:11:48] <bjs> Adoi: then maybe you should look at even more examples :)
[21:11:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[21:12:07] <Adoi> is it the hardest topic in python? I never had difficulty until now with others
[21:12:38] *** Joins: wyclif (~wyclif@user/wyclif)
[21:14:18] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[21:15:45] *** Parts: ht_ (~user@45.76.36.123) ()
[21:16:18] *** Quits: jokoon (~eio@2a01:e34:ec5c:3040:f4f5:1b92:264c:9784) (Quit: Leaving)
[21:16:22] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 245 seconds)
[21:16:42] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Ping timeout: 240 seconds)
[21:16:50] <Adoi> bjs, anyway, thank you...I think this is a difficult example for my current state.
[21:17:36] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[21:17:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:18:23] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:18:33] *** Joins: Intruder777 (~Intruder7@user/intruder777)
[21:18:50] *** Parts: Intruder777 (~Intruder7@user/intruder777) ()
[21:19:03] *** Joins: wyclif (~wyclif@user/wyclif)
[21:19:22] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Read error: Connection reset by peer)
[21:19:58] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:20:17] *** Joins: sockets (~hahaha@user/sockets)
[21:20:36] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[21:21:35] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[21:21:48] *** Quits: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Ping timeout: 272 seconds)
[21:25:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:27:30] *** Joins: Adoi (~Adoi@user/adoi)
[21:28:09] <gitesh> so the functions who doesn't return a value are called 'procedure' or 'subroutine'
[21:28:26] <grym> gitesh: no, they're called functions
[21:28:32] <grym> and all functions return values in python
[21:28:38] <grym> (sometimes it's None, though)
[21:28:41] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:29:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 276 seconds)
[21:29:26] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[21:29:56] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[21:30:03] <gitesh> all functions are fruitful functions in python
[21:30:04] *** Joins: wyclif (~wyclif@user/wyclif)
[21:30:15] *** Joins: y1n (~y1n@84-115-64-201.wifi.dynamic.surfer.at)
[21:30:30] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 276 seconds)
[21:30:58] *** Quits: sockets (~hahaha@user/sockets) (Remote host closed the connection)
[21:31:22] *** Quits: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[21:31:53] <thiras> is there a way to limit the dict keys in type annotations? like my dict can only has "a" "b" "c" keys and nothing different
[21:32:09] <bjs> gitesh: Python made a decision that instead of having many different kinds of function-like things it only has 1 and it always returns a value (even if that value is called None)
[21:32:24] <grym> thiras: no
[21:32:29] <thiras> thanks
[21:32:43] <bjs> gitesh: some languages choose to have many kinds, or to call the different types different things.  An in those languages "procedure" usually refers to something that does not have a return value, and "function" is something that does.
[21:33:16] <bjs> gitesh: this was a distinction that was much more important 50 years ago when we actually had languages like that (e.g. pascal)
[21:33:18] <grym> thiras: a slotted class that has three kwarg-only attributes with those names is close to what you want, and you can attempt to construct one from a dict in a try/except at runtime perhaps
[21:34:24] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[21:34:35] <thiras> why too overkill for my situation
[21:34:45] <thiras> i'll stick with Dict[str, int]
[21:34:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:34:50] *** Quits: Snyp (~rksht@49.207.204.249) (Ping timeout: 252 seconds)
[21:34:55] <thiras> way*
[21:35:18] <grym> https://bpa.st/YMBA, e.g.
[21:35:22] *** Joins: CodePoint (~BitShift@2600:1700:3070:3790::29)
[21:35:28] *** Quits: rendar (~rendar@user/rendar) ()
[21:35:36] *** Joins: wyclif (~wyclif@user/wyclif)
[21:35:41] <bjs> thiras: if you meant for type annotation purposes, there's TypedDict for dictionaries with fixed keys
[21:35:51] <grym> ooo, neat
[21:35:57] <thiras> checking
[21:36:38] <thiras> thanks bjs, good to know. looks neat.
[21:36:39] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:37:31] *** Quits: kZel (~kZel@90.199.182.233) ()
[21:37:59] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Client Quit)
[21:38:33] <thiras> one more question. is a class' @property's stay in the memory for while instance live on the memory? or do they get re-calculated each time at the call?
[21:38:46] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:39:09] <grym> recalculated unless you cache
[21:39:13] <thiras> thanks
[21:39:16] *** Joins: korg815 (~korg815@user/korg815)
[21:39:32] <thiras> so basically there is no difference between method and property
[21:39:41] <thiras> in manner of memory
[21:39:45] <grym> properties are sugar over methods that make them look like attributes
[21:39:48] <grym> but they're still methods
[21:40:15] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 276 seconds)
[21:40:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:41:07] *** Joins: wyclif (~wyclif@user/wyclif)
[21:41:28] <bjs> thiras: a @property is just a fancy way of calling a method on attribute access so that `x.foo` calls the foo method automatically
[21:42:11] <bjs> thiras: functools has https://docs.python.org/3/library/functools.html#functools.cached_property which is like @property but has a dict inside to cache the result so it doesn't have to call again
[21:42:16] <varaindemian> https://pastebin.com/7KETtcWV I  modified the app with:  `app.run(host='0.0.0.0', port=8080, debug=True) ` and when I run it is says `Running on http://192.168.122.36:8080/ ` but if I run it with `flask run --host=0.0.0.0 --port=8080` I get `* Running on http://0.0.0.0:8080/ ` which is what  I want. how should I mdofiy
[21:43:03] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[21:43:17] <grym> bjs: man i'm learning so many things today
[21:43:30] <thiras> thank bjs looks great
[21:43:40] <thiras> i'll implement caching soon on them.
[21:46:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:46:40] *** Joins: wyclif (~wyclif@user/wyclif)
[21:48:54] *** Joins: Auron (~Auron956@user/auron)
[21:50:22] *** Joins: entuland (~entuland@user/entuland)
[21:51:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:52:11] *** Joins: wyclif (~wyclif@user/wyclif)
[21:54:40] *** Quits: rsx (~dummy@ppp-188-174-137-235.dynamic.mnet-online.de) (Quit: rsx)
[21:56:26] *** Joins: yCrazyEdd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[21:57:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[21:57:15] <gitesh> what is if __name__ == "__main__": ?
[21:57:29] *** nomic2 is now known as nomic
[21:57:32] <gitesh> i know after if it is a boolean expression
[21:57:42] *** Joins: wyclif (~wyclif@user/wyclif)
[21:58:12] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[21:58:18] <entuland> did you look up the purpose of __name__ in the docs?
[21:59:10] <grym> gitesh: it's an if statement :)
[21:59:19] <gitesh> got it
[21:59:29] <gitesh> "__name__ is a built-in variable which evaluates to the name of the current module."
[21:59:44] <grym> (or __main__, in some conditions)
[21:59:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[22:01:12] <Byteflux> when running a module as a script (python module.py) or running with -m (python -m module)
[22:01:22] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Ping timeout: 265 seconds)
[22:02:07] *** Joins: gutt (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net)
[22:02:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[22:03:00] *** Quits: locsmif (~none@user/locsmif) (Quit: leaving)
[22:03:11] *** Joins: wyclif (~wyclif@user/wyclif)
[22:07:22] *** Quits: bjb (~bjb@sourcerer.ca) (Remote host closed the connection)
[22:07:37] *** Joins: bjb (~bjb@sourcerer.ca)
[22:07:40] *** Quits: tlaxkit (~hexchat@170.253.39.204) (Quit: Leaving)
[22:07:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:08:41] *** Joins: wyclif (~wyclif@user/wyclif)
[22:09:56] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:10:02] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[22:10:28] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[22:12:31] *** Joins: Celeo (~Celeo@user/celeo)
[22:15:17] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[22:16:21] *** Quits: Teacup_ (~teacup@user/teacup) (Quit: Teacup_)
[22:16:57] *** Joins: b3z (~b3z@user/b3z)
[22:17:07] *** Joins: Teacup (~teacup@user/teacup)
[22:17:36] *** Quits: CodePoint (~BitShift@2600:1700:3070:3790::29) (Quit: Never gonna give you up, never gonna let you down...)
[22:18:14] *** Joins: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it)
[22:18:25] <b3z> One question. I want to do a bitwise not (~) on an Integer with the size if 16 bits. What is the best way to do this? Since the normal in is 32 bits?
[22:18:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:19:23] <bjs> b3z: I'm not sure what the end of that sentence means, "the normal in is 32 bits?"
[22:19:40] *** Joins: wyclif (~wyclif@user/wyclif)
[22:19:47] *** Quits: Celeo (~Celeo@user/celeo) (Read error: Connection reset by peer)
[22:20:02] *** Joins: akk (~akk@75.161.155.222)
[22:20:13] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 258 seconds)
[22:20:54] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (Read error: Connection reset by peer)
[22:21:35] *** Joins: summersault (~summersau@179.221.251.16)
[22:22:03] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[22:22:14] *** Quits: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f) (Remote host closed the connection)
[22:22:53] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[22:22:56] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[22:23:03] *** Joins: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f)
[22:23:08] *** Quits: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 255 seconds)
[22:24:11] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[22:24:14] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[22:24:14] <b3z> i meant to type int
[22:24:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:25:12] *** Joins: wyclif (~wyclif@user/wyclif)
[22:25:24] <bjs> b3z: int's don't have a size, they are unbounded
[22:25:30] *** Joins: Guddu (~Guddu@182.68.88.105)
[22:25:57] <bjs> b3z: ~ is the bitwise operation on ints, it'll be like the number is sign extended to infinity
[22:26:20] <b3z> So what do you suggest?
[22:26:21] <bjs> (and you can `& ((1 << 16) - 1)` to truncate if you really need of course)
[22:26:29] *** Joins: thiras (~thiras@user/thiras)
[22:26:36] <bjs> b3z: use the bitwise not operator ~
[22:26:39] <bjs> as that's what it's for
[22:27:34] <b3z> Alright that its what I am doing already. The shift is also a good idea. But still if I use the not operator as it is I end up having a negative number in a lot of cases. How would you prevent this?
[22:27:50] <b3z> In my 16 bits is no signing bit.
[22:28:11] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[22:28:27] <bjs> b3z: I mean if you take a 16-bit positive number and invert it you get a negative number
[22:28:35] <bjs> if you're using the standard 2's complement interpretation
[22:28:48] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[22:28:50] *** Quits: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f) (Remote host closed the connection)
[22:28:59] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[22:29:34] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:29:36] *** Joins: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f)
[22:29:40] *** Quits: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f) (Remote host closed the connection)
[22:29:46] <b3z> Yeah, that is right. But my range is from 0 - 65535
[22:29:58] <b3z> I might should have mentioned that earlier...
[22:30:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:30:26] *** Joins: greedom (~greedom@2001:16b8:328b:f00:aaac:847f:d31e:189f)
[22:30:44] *** Joins: wyclif (~wyclif@user/wyclif)
[22:31:41] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[22:31:49] *** Quits: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com) (Ping timeout: 265 seconds)
[22:32:41] <bjs> b3z: so ~ will do the right thing,  it really makes people nervous though so I can understand.  There is the `struct` module for packing/unpacking things into different byte formats
[22:33:14] *** Joins: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com)
[22:34:02] <thiras> not completely python related but is there any drawback to not use consequential number but ABC-22-01 kind of keys on databases
[22:34:06] <b3z> so you would pack it like this: struct.pack(myInt, 16) ?
[22:34:36] <b3z> And than use this with the operators and afterwards unpack it?
[22:34:42] *** Quits: jancoow (~jancoow@user/jancoow) (Remote host closed the connection)
[22:34:47] <bjs> b3z: well *I* would just use ~ as it's doing the correct thing
[22:34:51] *** Quits: y1n (~y1n@84-115-64-201.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[22:35:07] *** Joins: y1n (~y1n@84-115-65-177.wifi.dynamic.surfer.at)
[22:35:08] <b3z> but still how do you fix the negative numbers?
[22:35:11] <bjs> b3z: but no that's not how you use struct.pack, you'll have to read the docs. It has format codes for e.g. "unsigned int" and "signed int" etc
[22:35:11] *** Joins: jancoow (~jancoow@user/jancoow)
[22:35:12] <bjs> b3z: "fix" ?
[22:35:24] <b3z> ah
[22:35:26] <b3z> I see
[22:35:28] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[22:35:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:35:48] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:36:11] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[22:36:12] *** Joins: wyclif (~wyclif@user/wyclif)
[22:36:30] <grym> thiras: there can be a performance hit, sometimes
[22:37:02] <thiras> ah too bad. so i'll go with natural keys and an extra column
[22:37:11] <grym> thiras: and depending on your choice of PK (e.g., uuids) they're larger
[22:37:16] <Byteflux> thiras: The drawback is the database is very good at generating sequential IDs. But another good alternative could be UUIDs.
[22:37:26] <grym> but there are benefits as well, like fearless merging
[22:37:37] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 265 seconds)
[22:37:39] <thiras> my IDs are not UUID
[22:37:51] <thiras> so i don't have that advantage
[22:38:02] <ammar2> also the question is very dependent on the exact DBMS
[22:38:04] <grym> adding a column seems fine then
[22:38:11] <thiras> but good to know that advantage
[22:38:24] <b3z> bjs: can't you just use x<<16 to get an unsigned 16 Bit int?
[22:38:25] <thiras> i'll always goes with postgres where available
[22:38:35] <thiras> l
[22:38:37] <thiras> i*
[22:38:41] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[22:38:58] <b3z> bjs: I mean x & 1<<16
[22:39:33] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[22:40:22] *** Joins: skapata (~Skapata@user/skapata)
[22:41:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:41:44] <b3z> bjs: okay, got it working with ~x & ((1<<16)-1) Thanks
[22:41:45] *** Joins: wyclif (~wyclif@user/wyclif)
[22:44:23] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[22:44:43] *** cvmn is now known as caveman
[22:45:10] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[22:45:37] *** Joins: az (az@user/azz)
[22:45:49] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:46:28] *** Joins: ice9 (~ice9@user/ice9)
[22:46:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:47:13] *** Joins: wyclif (~wyclif@user/wyclif)
[22:47:27] <az> hi, I would like to make my code reusable so I set something like this. if a > b: condition = 1 if b > a condition = 2. then I would do.. if condition is 1 do this if condition = 2 do that. is this a good approach or is there any better alternative. a & b are just examples
[22:47:28] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[22:47:58] <az> is it correct to use numbers for such conditional things
[22:47:59] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[22:48:00] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[22:48:10] *** Joins: ice9 (~ice9@user/ice9)
[22:48:28] *** Joins: Cracki (~Cracki@user/cracki)
[22:48:47] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:50:21] *** Joins: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[22:50:26] *** Quits: Roey (~Roey@user/Roey) (Remote host closed the connection)
[22:50:37] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::791f) (Quit: Konversation terminated!)
[22:50:39] <ChrisWarrick> az: What is the real end goal of this? What would 1 or 2 signify?
[22:50:41] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[22:51:12] *** Quits: Guddu (~Guddu@182.68.88.105) (Read error: Connection reset by peer)
[22:51:26] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:52:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:52:22] <az> ChrisWarrick, If condition is 1 then I'll make my telegram bot send one message and other one if condition is 2
[22:52:40] <az> so I don't want to have the code inside the telegram thing it self
[22:52:45] *** Joins: wyclif (~wyclif@user/wyclif)
[22:52:47] <ChrisWarrick> az: I wouldn’t write code this way, just call the appropriate message sending function
[22:53:17] <ChrisWarrick> az: also, 1 or 2 doesn’t mean anything — if you’re writing code of this kind, use an enum
[22:53:19] <az> so I put the condition function inside the message sending function?
[22:53:42] <ChrisWarrick> az: depends. Where does the data used in the condition come from?
[22:54:25] <az> external sources
[22:54:29] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[22:54:35] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 252 seconds)
[22:54:36] <varaindemian> where can I make my flask app more secure?  I alreadu have `auth = HTTPBasicAuth()` implemented and `HTTPS`
[22:54:46] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[22:54:56] <ChrisWarrick> varaindemian: secure against what?
[22:54:57] <varaindemian> I am looing for input sanitization and post/get requests sanitization
[22:55:07] <ChrisWarrick> varaindemian: what is your flask app doing?
[22:55:09] <az> here is portion of the code, ChrisWarrick https://dpaste.org/naYG
[22:55:58] <ChrisWarrick> az: and how does it relate to the messages sent? Is this code called in response to an incoming message from another user? Or is this triggered by some other event?
[22:56:07] <varaindemian> ChrisWarrick a basic app that accepts user's given URL and shows it on a screen
[22:56:43] <varaindemian> ChrisWarrick running it locally
[22:56:46] <ChrisWarrick> varaindemian: I think the usual flask thing for forms would be wtforms
[22:56:55] <ChrisWarrick> varaindemian: that said, for anything serious, I would consider using Django instead
[22:57:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:57:42] <az> ChrisWarrick, if the user say I want 5000 token it will respond with a message based on the function, so for example if the user says I want 500 it will says amount_value = 3 and it asks to chose a higher number
[22:57:55] <ChrisWarrick> az: yeah, don’t do that
[22:58:08] <ChrisWarrick> az: I’d just call the send_message function with the correct text
[22:58:16] *** Joins: wyclif (~wyclif@user/wyclif)
[22:58:40] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:58:41] <az> but if I want to write test I'll have to run it live with telegram
[22:58:46] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[22:59:03] <az> while if I put functions outside the message function I can run it independently
[22:59:26] *** Joins: leeper (leeper@gateway/vpn/nordvpn/leeper)
[22:59:43] <az> also I can more easily port the code to work with other platforms, no?
[22:59:57] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[23:00:41] <ChrisWarrick> az: you could mock the send_message function. Or you could consider making this function return the real message instead of numbers.
[23:00:45] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[23:01:24] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[23:01:40] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:02:01] <az> I've it like this,elif check_amount_value == 3:
[23:02:01] <az> update.message.reply_text(f"order below minium, please at least: {int(minimum_order)}")
[23:02:40] *** Joins: dez (uid92154@user/dez)
[23:02:41] <az> hmmm, I'll think of a better way
[23:03:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[23:03:07] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[23:03:22] *** Joins: pnoud (~pnoud@user/pnoud)
[23:03:35] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:03:49] *** Joins: wyclif (~wyclif@user/wyclif)
[23:03:55] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:04:59] *** Parts: Cracki (~Cracki@user/cracki) (Leaving)
[23:05:17] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[23:06:05] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:06:17] <az> is there a name for this thing in python that I can research further? if I had only two option I could just use true or false
[23:06:29] <az> but I need more conditions
[23:07:08] <varaindemian> ChrisWarrick that (wtforms) will protect my app against random post/get requests? I do not have a database
[23:07:26] <entuland> what's the "thing" in "this thing"? the elif? az
[23:08:02] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 245 seconds)
[23:08:03] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Client Quit)
[23:08:43] *** Quits: foobaz212537114 (~foobaz212@82.33.219.124) (Quit: Client closed)
[23:08:50] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:10:06] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[23:10:31] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[23:10:48] <az> entuland, I mean using proper naming for conditions. I used numbers like 1, 2 and 3 for easiness. I could use strings like if a > b: value = a_is_bigger then do if value == a_is_bigger do this
[23:11:20] <az> "a_is_bigger" as string with underscores
[23:11:42] <ChrisWarrick> az: in a week, you won’t remember the difference between 1, 2, and 3. You could use an enum. But I’d prefer to return messages.
[23:11:45] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Client Quit)
[23:11:48] <ChrisWarrick> varaindemian: It will help you validate forms.
[23:12:00] <varaindemian> ChrisWarrick and other than that?
[23:12:01] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a83e:c959:305b:9dbb)
[23:12:09] *** Joins: darksun (~darksun@user/darksun)
[23:12:20] <ChrisWarrick> varaindemian: well, what’s your threat model?
[23:12:42] <entuland> I would probably name the variable about the concept it expresses
[23:12:42] <ChrisWarrick> varaindemian: protecting against random requests isn’t something you typically do at the web framework level, but higher up in the stack
[23:13:05] <varaindemian> I mean if I make a random post requests on that page with 'file:////'
[23:13:21] <entuland> as in, insufficient_amount = qty < min_amount or something
[23:13:38] <entuland> so that then you can do "if insufficient_amount..."
[23:13:50] <az> ChrisWarrick, you are right but I don't only need the messages but also change the outcome of calculation and response.
[23:15:37] <az> insufficient_amount sounds fine, I'll check that thanks
[23:16:02] <entuland> could as well be qty_too_low or anything else that clearly tells what's happening
[23:16:19] <az> it should be a string, right?
[23:16:22] <entuland> no
[23:16:26] <az> no other option I guess :)
[23:16:32] <az> hmm, what can I use?
[23:16:34] <entuland> it's just a boolean that you build out of the comparison
[23:16:40] <entuland> which you can then use in conditionals
[23:16:51] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 250 seconds)
[23:17:02] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[23:17:18] <entuland> mind you, you may not need it at all if your other variables are clear enough and you never use that value more than once
[23:17:38] <entuland> "if qty < min_amount" is just fine if you're doing that only once
[23:17:54] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[23:18:15] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[23:18:22] <az> you mean like I can create custom boolean?
[23:18:31] <entuland> without the need to do "qty_too_low = qty < min_amount"
[23:18:34] <entuland> I don't understand
[23:18:42] <entuland> it's not a custom boolean
[23:18:49] <entuland> it a variable that contains a boolean value
[23:18:59] <entuland> it will be either true or false depending on the result of the comparison
[23:19:03] <az> oh, I got it
[23:19:21] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[23:19:22] <az> awesome, sounds much simple
[23:19:41] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[23:20:30] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[23:20:43] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[23:22:24] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Client Quit)
[23:22:28] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Read error: Connection reset by peer)
[23:22:47] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[23:23:13] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[23:23:28] *** Joins: sockets (~hahaha@user/sockets)
[23:23:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[23:24:48] *** Joins: wyclif (~wyclif@user/wyclif)
[23:28:13] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:28:27] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[23:30:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:30:20] *** Joins: wyclif (~wyclif@user/wyclif)
[23:30:41] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 268 seconds)
[23:31:54] *** Quits: y1n (~y1n@84-115-65-177.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[23:37:35] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 244 seconds)
[23:37:48] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:38:12] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:38:41] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[23:38:50] *** Joins: zebrag (~chris@user/zebrag)
[23:39:53] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[23:40:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:41:18] *** Joins: wyclif (~wyclif@user/wyclif)
[23:45:50] *** Joins: MemoriaVetusta (~charles@95.181.232.11)
[23:45:56] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[23:46:11] *** Joins: zeenk (~zeenk@2a02:2f04:a008:d600:18f2:3421:bac6:8f38)
[23:46:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:46:51] *** Joins: wyclif (~wyclif@user/wyclif)
[23:47:19] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:51:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[23:51:47] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[23:52:23] *** Joins: wyclif (~wyclif@user/wyclif)
[23:53:08] *** Quits: kosh_ (~kosh@user/kosh) (Ping timeout: 255 seconds)
[23:54:03] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:54:38] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:54:43] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[23:55:23] *** Joins: Roey (~Roey@user/Roey)
[23:56:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:56:13] *** Joins: Akuli (~Akuli@82-203-166-78.bb.dnainternet.fi)
[23:57:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:57:53] *** Joins: wyclif (~wyclif@user/wyclif)
